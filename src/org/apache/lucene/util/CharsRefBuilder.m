//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/CharsRefBuilder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/UnicodeUtil.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/CharsRefBuilder must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilCharsRefBuilder () {
 @public
  OrgApacheLuceneUtilCharsRef *ref_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilCharsRefBuilder, ref_, OrgApacheLuceneUtilCharsRef *)

inline NSString *OrgApacheLuceneUtilCharsRefBuilder_get_NULL_STRING(void);
static NSString *OrgApacheLuceneUtilCharsRefBuilder_NULL_STRING = @"null";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilCharsRefBuilder, NULL_STRING, NSString *)

@implementation OrgApacheLuceneUtilCharsRefBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilCharsRefBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSCharArray *)chars {
  return ((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->chars_;
}

- (jint)length {
  return ((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->length_;
}

- (void)setLengthWithInt:(jint)length {
  ((OrgApacheLuceneUtilCharsRef *) nil_chk(self->ref_))->length_ = length;
}

- (jchar)charAtWithInt:(jint)offset {
  return IOSCharArray_Get(nil_chk(((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->chars_), offset);
}

- (void)setCharAtWithInt:(jint)offset
                withChar:(jchar)b {
  *IOSCharArray_GetRef(nil_chk(((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->chars_), offset) = b;
}

- (void)clear {
  ((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->length_ = 0;
}

- (OrgApacheLuceneUtilCharsRefBuilder *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq {
  if (csq == nil) {
    return [self appendWithJavaLangCharSequence:OrgApacheLuceneUtilCharsRefBuilder_NULL_STRING];
  }
  return [self appendWithJavaLangCharSequence:csq withInt:0 withInt:[csq java_length]];
}

- (OrgApacheLuceneUtilCharsRefBuilder *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                                               withInt:(jint)start
                                                               withInt:(jint)end {
  if (csq == nil) {
    return [self appendWithJavaLangCharSequence:OrgApacheLuceneUtilCharsRefBuilder_NULL_STRING];
  }
  [self growWithInt:((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->length_ + end - start];
  for (jint i = start; i < end; ++i) {
    [self setCharAtWithInt:ref_->length_++ withChar:[csq charAtWithInt:i]];
  }
  return self;
}

- (OrgApacheLuceneUtilCharsRefBuilder *)appendWithChar:(jchar)c {
  [self growWithInt:((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->length_ + 1];
  [self setCharAtWithInt:ref_->length_++ withChar:c];
  return self;
}

- (void)copyCharsWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)other {
  [self copyCharsWithCharArray:((OrgApacheLuceneUtilCharsRef *) nil_chk(other))->chars_ withInt:other->offset_ withInt:other->length_];
}

- (void)growWithInt:(jint)newLength {
  JreStrongAssign(&((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->chars_, OrgApacheLuceneUtilArrayUtil_growWithCharArray_withInt_(ref_->chars_, newLength));
}

- (void)copyUTF8BytesWithByteArray:(IOSByteArray *)bytes
                           withInt:(jint)offset
                           withInt:(jint)length {
  [self growWithInt:length];
  ((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->length_ = OrgApacheLuceneUtilUnicodeUtil_UTF8toUTF16WithByteArray_withInt_withInt_withCharArray_(bytes, offset, length, ref_->chars_);
}

- (void)copyUTF8BytesWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  [self copyUTF8BytesWithByteArray:((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->bytes_ withInt:bytes->offset_ withInt:bytes->length_];
}

- (void)copyCharsWithCharArray:(IOSCharArray *)otherChars
                       withInt:(jint)otherOffset
                       withInt:(jint)otherLength {
  [self growWithInt:otherLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(otherChars, otherOffset, ((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->chars_, 0, otherLength);
  ref_->length_ = otherLength;
}

- (void)appendWithCharArray:(IOSCharArray *)otherChars
                    withInt:(jint)otherOffset
                    withInt:(jint)otherLength {
  jint newLen = ((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->length_ + otherLength;
  [self growWithInt:newLen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(otherChars, otherOffset, ref_->chars_, ref_->length_, otherLength);
  ref_->length_ = newLen;
}

- (OrgApacheLuceneUtilCharsRef *)get {
  JreAssert(((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->offset_ == 0, @"Modifying the offset of the returned ref is illegal");
  return ref_;
}

- (OrgApacheLuceneUtilCharsRef *)toCharsRef {
  return create_OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(JavaUtilArrays_copyOfWithCharArray_withInt_(((OrgApacheLuceneUtilCharsRef *) nil_chk(ref_))->chars_, ref_->length_), 0, ref_->length_);
}

- (NSString *)description {
  return [((OrgApacheLuceneUtilCharsRef *) nil_chk([self get])) description];
}

- (jboolean)isEqual:(id)obj {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NSUInteger)hash {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(ref_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilCharsRefBuilder;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilCharsRefBuilder;", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilCharsRefBuilder;", 0x1, 5, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 15, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilCharsRef;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilCharsRef;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(chars);
  methods[2].selector = @selector(length);
  methods[3].selector = @selector(setLengthWithInt:);
  methods[4].selector = @selector(charAtWithInt:);
  methods[5].selector = @selector(setCharAtWithInt:withChar:);
  methods[6].selector = @selector(clear);
  methods[7].selector = @selector(appendWithJavaLangCharSequence:);
  methods[8].selector = @selector(appendWithJavaLangCharSequence:withInt:withInt:);
  methods[9].selector = @selector(appendWithChar:);
  methods[10].selector = @selector(copyCharsWithOrgApacheLuceneUtilCharsRef:);
  methods[11].selector = @selector(growWithInt:);
  methods[12].selector = @selector(copyUTF8BytesWithByteArray:withInt:withInt:);
  methods[13].selector = @selector(copyUTF8BytesWithOrgApacheLuceneUtilBytesRef:);
  methods[14].selector = @selector(copyCharsWithCharArray:withInt:withInt:);
  methods[15].selector = @selector(appendWithCharArray:withInt:withInt:);
  methods[16].selector = @selector(get);
  methods[17].selector = @selector(toCharsRef);
  methods[18].selector = @selector(description);
  methods[19].selector = @selector(isEqual:);
  methods[20].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "ref_", "LOrgApacheLuceneUtilCharsRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setLength", "I", "charAt", "setCharAt", "IC", "append", "LJavaLangCharSequence;", "LJavaLangCharSequence;II", "C", "copyChars", "LOrgApacheLuceneUtilCharsRef;", "grow", "copyUTF8Bytes", "[BII", "LOrgApacheLuceneUtilBytesRef;", "[CII", "toString", "equals", "LNSObject;", "hashCode", &OrgApacheLuceneUtilCharsRefBuilder_NULL_STRING };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilCharsRefBuilder = { "CharsRefBuilder", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x1, 21, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilCharsRefBuilder;
}

@end

void OrgApacheLuceneUtilCharsRefBuilder_init(OrgApacheLuceneUtilCharsRefBuilder *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->ref_, new_OrgApacheLuceneUtilCharsRef_init());
}

OrgApacheLuceneUtilCharsRefBuilder *new_OrgApacheLuceneUtilCharsRefBuilder_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilCharsRefBuilder, init)
}

OrgApacheLuceneUtilCharsRefBuilder *create_OrgApacheLuceneUtilCharsRefBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilCharsRefBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilCharsRefBuilder)
