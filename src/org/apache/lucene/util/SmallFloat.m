//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/SmallFloat.java
//

#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "org/apache/lucene/util/SmallFloat.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/SmallFloat must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilSmallFloat ()

/*!
 @brief No instance
 */
- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilSmallFloat_init(OrgApacheLuceneUtilSmallFloat *self);

__attribute__((unused)) static OrgApacheLuceneUtilSmallFloat *new_OrgApacheLuceneUtilSmallFloat_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilSmallFloat *create_OrgApacheLuceneUtilSmallFloat_init(void);

@implementation OrgApacheLuceneUtilSmallFloat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilSmallFloat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jbyte)floatToByteWithFloat:(jfloat)f
                      withInt:(jint)numMantissaBits
                      withInt:(jint)zeroExp {
  return OrgApacheLuceneUtilSmallFloat_floatToByteWithFloat_withInt_withInt_(f, numMantissaBits, zeroExp);
}

+ (jfloat)byteToFloatWithByte:(jbyte)b
                      withInt:(jint)numMantissaBits
                      withInt:(jint)zeroExp {
  return OrgApacheLuceneUtilSmallFloat_byteToFloatWithByte_withInt_withInt_(b, numMantissaBits, zeroExp);
}

+ (jbyte)floatToByte315WithFloat:(jfloat)f {
  return OrgApacheLuceneUtilSmallFloat_floatToByte315WithFloat_(f);
}

+ (jfloat)byte315ToFloatWithByte:(jbyte)b {
  return OrgApacheLuceneUtilSmallFloat_byte315ToFloatWithByte_(b);
}

+ (jbyte)floatToByte52WithFloat:(jfloat)f {
  return OrgApacheLuceneUtilSmallFloat_floatToByte52WithFloat_(f);
}

+ (jfloat)byte52ToFloatWithByte:(jbyte)b {
  return OrgApacheLuceneUtilSmallFloat_byte52ToFloatWithByte_(b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 8, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 9, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(floatToByteWithFloat:withInt:withInt:);
  methods[2].selector = @selector(byteToFloatWithByte:withInt:withInt:);
  methods[3].selector = @selector(floatToByte315WithFloat:);
  methods[4].selector = @selector(byte315ToFloatWithByte:);
  methods[5].selector = @selector(floatToByte52WithFloat:);
  methods[6].selector = @selector(byte52ToFloatWithByte:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "floatToByte", "FII", "byteToFloat", "BII", "floatToByte315", "F", "byte315ToFloat", "B", "floatToByte52", "byte52ToFloat" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilSmallFloat = { "SmallFloat", "org.apache.lucene.util", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilSmallFloat;
}

@end

void OrgApacheLuceneUtilSmallFloat_init(OrgApacheLuceneUtilSmallFloat *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilSmallFloat *new_OrgApacheLuceneUtilSmallFloat_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilSmallFloat, init)
}

OrgApacheLuceneUtilSmallFloat *create_OrgApacheLuceneUtilSmallFloat_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilSmallFloat, init)
}

jbyte OrgApacheLuceneUtilSmallFloat_floatToByteWithFloat_withInt_withInt_(jfloat f, jint numMantissaBits, jint zeroExp) {
  OrgApacheLuceneUtilSmallFloat_initialize();
  jint fzero = JreLShift32((63 - zeroExp), numMantissaBits);
  jint bits = JavaLangFloat_floatToRawIntBitsWithFloat_(f);
  jint smallfloat = JreRShift32(bits, (24 - numMantissaBits));
  if (smallfloat <= fzero) {
    return (bits <= 0) ? (jbyte) 0 : (jbyte) 1;
  }
  else if (smallfloat >= fzero + (jint) 0x100) {
    return -1;
  }
  else {
    return (jbyte) (smallfloat - fzero);
  }
}

jfloat OrgApacheLuceneUtilSmallFloat_byteToFloatWithByte_withInt_withInt_(jbyte b, jint numMantissaBits, jint zeroExp) {
  OrgApacheLuceneUtilSmallFloat_initialize();
  if (b == 0) return 0.0f;
  jint bits = JreLShift32((b & (jint) 0xff), (24 - numMantissaBits));
  bits += JreLShift32((63 - zeroExp), 24);
  return JavaLangFloat_intBitsToFloatWithInt_(bits);
}

jbyte OrgApacheLuceneUtilSmallFloat_floatToByte315WithFloat_(jfloat f) {
  OrgApacheLuceneUtilSmallFloat_initialize();
  jint bits = JavaLangFloat_floatToRawIntBitsWithFloat_(f);
  jint smallfloat = JreRShift32(bits, (24 - 3));
  if (smallfloat <= (JreLShift32((63 - 15), 3))) {
    return (bits <= 0) ? (jbyte) 0 : (jbyte) 1;
  }
  if (smallfloat >= (JreLShift32((63 - 15), 3)) + (jint) 0x100) {
    return -1;
  }
  return (jbyte) (smallfloat - (JreLShift32((63 - 15), 3)));
}

jfloat OrgApacheLuceneUtilSmallFloat_byte315ToFloatWithByte_(jbyte b) {
  OrgApacheLuceneUtilSmallFloat_initialize();
  if (b == 0) return 0.0f;
  jint bits = JreLShift32((b & (jint) 0xff), (24 - 3));
  bits += JreLShift32((63 - 15), 24);
  return JavaLangFloat_intBitsToFloatWithInt_(bits);
}

jbyte OrgApacheLuceneUtilSmallFloat_floatToByte52WithFloat_(jfloat f) {
  OrgApacheLuceneUtilSmallFloat_initialize();
  jint bits = JavaLangFloat_floatToRawIntBitsWithFloat_(f);
  jint smallfloat = JreRShift32(bits, (24 - 5));
  if (smallfloat <= JreLShift32((63 - 2), 5)) {
    return (bits <= 0) ? (jbyte) 0 : (jbyte) 1;
  }
  if (smallfloat >= (JreLShift32((63 - 2), 5)) + (jint) 0x100) {
    return -1;
  }
  return (jbyte) (smallfloat - (JreLShift32((63 - 2), 5)));
}

jfloat OrgApacheLuceneUtilSmallFloat_byte52ToFloatWithByte_(jbyte b) {
  OrgApacheLuceneUtilSmallFloat_initialize();
  if (b == 0) return 0.0f;
  jint bits = JreLShift32((b & (jint) 0xff), (24 - 5));
  bits += JreLShift32((63 - 2), 24);
  return JavaLangFloat_intBitsToFloatWithInt_(bits);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilSmallFloat)
