//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/IntBlockPool.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/util/IntBlockPool.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/IntBlockPool must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilIntBlockPool () {
 @public
  /*!
   @brief index into the buffers array pointing to the current buffer used as the head
   */
  jint bufferUpto_;
  OrgApacheLuceneUtilIntBlockPool_Allocator *allocator_;
}

/*!
 @brief Creates a new int slice with the given starting size and returns the slices offset in the pool.
 - seealso: SliceReader
 */
- (jint)newSliceWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

+ (jboolean)assertSliceBufferWithIntArray:(IOSIntArray *)buffer;

/*!
 @brief Allocates a new slice from the given offset
 */
- (jint)allocSliceWithIntArray:(IOSIntArray *)slice
                       withInt:(jint)sliceOffset OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilIntBlockPool, allocator_, OrgApacheLuceneUtilIntBlockPool_Allocator *)

/*!
 @brief An array holding the offset into the <code>IntBlockPool.LEVEL_SIZE_ARRAY</code>
  to quickly navigate to the next slice level.
 */
inline IOSIntArray *OrgApacheLuceneUtilIntBlockPool_get_NEXT_LEVEL_ARRAY(void);
static IOSIntArray *OrgApacheLuceneUtilIntBlockPool_NEXT_LEVEL_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilIntBlockPool, NEXT_LEVEL_ARRAY, IOSIntArray *)

/*!
 @brief An array holding the level sizes for int slices.
 */
inline IOSIntArray *OrgApacheLuceneUtilIntBlockPool_get_LEVEL_SIZE_ARRAY(void);
static IOSIntArray *OrgApacheLuceneUtilIntBlockPool_LEVEL_SIZE_ARRAY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilIntBlockPool, LEVEL_SIZE_ARRAY, IOSIntArray *)

/*!
 @brief The first level size for new slices
 */
inline jint OrgApacheLuceneUtilIntBlockPool_get_FIRST_LEVEL_SIZE(void);
static jint OrgApacheLuceneUtilIntBlockPool_FIRST_LEVEL_SIZE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilIntBlockPool, FIRST_LEVEL_SIZE, jint)

__attribute__((unused)) static jint OrgApacheLuceneUtilIntBlockPool_newSliceWithInt_(OrgApacheLuceneUtilIntBlockPool *self, jint size);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilIntBlockPool_assertSliceBufferWithIntArray_(IOSIntArray *buffer);

__attribute__((unused)) static jint OrgApacheLuceneUtilIntBlockPool_allocSliceWithIntArray_withInt_(OrgApacheLuceneUtilIntBlockPool *self, IOSIntArray *slice, jint sliceOffset);

@interface OrgApacheLuceneUtilIntBlockPool_SliceWriter () {
 @public
  jint offset_;
  OrgApacheLuceneUtilIntBlockPool *pool_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilIntBlockPool_SliceWriter, pool_, OrgApacheLuceneUtilIntBlockPool *)

@interface OrgApacheLuceneUtilIntBlockPool_SliceReader () {
 @public
  OrgApacheLuceneUtilIntBlockPool *pool_;
  jint upto_;
  jint bufferUpto_;
  jint bufferOffset_;
  IOSIntArray *buffer_;
  jint limit_;
  jint level_;
  jint end_;
}

- (void)nextSlice;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilIntBlockPool_SliceReader, pool_, OrgApacheLuceneUtilIntBlockPool *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilIntBlockPool_SliceReader, buffer_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneUtilIntBlockPool_SliceReader_nextSlice(OrgApacheLuceneUtilIntBlockPool_SliceReader *self);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilIntBlockPool)

@implementation OrgApacheLuceneUtilIntBlockPool

+ (jint)INT_BLOCK_SHIFT {
  return OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SHIFT;
}

+ (jint)INT_BLOCK_SIZE {
  return OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE;
}

+ (jint)INT_BLOCK_MASK {
  return OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilIntBlockPool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneUtilIntBlockPool_Allocator:(OrgApacheLuceneUtilIntBlockPool_Allocator *)allocator {
  OrgApacheLuceneUtilIntBlockPool_initWithOrgApacheLuceneUtilIntBlockPool_Allocator_(self, allocator);
  return self;
}

- (void)reset {
  [self resetWithBoolean:true withBoolean:true];
}

- (void)resetWithBoolean:(jboolean)zeroFillBuffers
             withBoolean:(jboolean)reuseFirst {
  if (bufferUpto_ != -1) {
    if (zeroFillBuffers) {
      for (jint i = 0; i < bufferUpto_; i++) {
        JavaUtilArrays_fillWithIntArray_withInt_(IOSObjectArray_Get(nil_chk(buffers_), i), 0);
      }
      JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(IOSObjectArray_Get(nil_chk(buffers_), bufferUpto_), 0, intUpto_, 0);
    }
    if (bufferUpto_ > 0 || !reuseFirst) {
      jint offset = reuseFirst ? 1 : 0;
      [((OrgApacheLuceneUtilIntBlockPool_Allocator *) nil_chk(allocator_)) recycleIntBlocksWithIntArray2:buffers_ withInt:offset withInt:1 + bufferUpto_];
      JavaUtilArrays_fillWithNSObjectArray_withInt_withInt_withId_(buffers_, offset, bufferUpto_ + 1, nil);
    }
    if (reuseFirst) {
      bufferUpto_ = 0;
      intUpto_ = 0;
      intOffset_ = 0;
      JreStrongAssign(&buffer_, IOSObjectArray_Get(nil_chk(buffers_), 0));
    }
    else {
      bufferUpto_ = -1;
      intUpto_ = OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE;
      intOffset_ = -OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE;
      JreStrongAssign(&buffer_, nil);
    }
  }
}

- (void)nextBuffer {
  if (1 + bufferUpto_ == ((IOSObjectArray *) nil_chk(buffers_))->size_) {
    IOSObjectArray *newBuffers = [IOSObjectArray arrayWithLength:JreFpToInt((buffers_->size_ * 1.5)) type:IOSClass_intArray(1)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffers_, 0, newBuffers, 0, buffers_->size_);
    JreStrongAssign(&buffers_, newBuffers);
  }
  JreStrongAssign(&buffer_, IOSObjectArray_Set(buffers_, 1 + bufferUpto_, [((OrgApacheLuceneUtilIntBlockPool_Allocator *) nil_chk(allocator_)) getIntBlock]));
  bufferUpto_++;
  intUpto_ = 0;
  intOffset_ += OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE;
}

- (jint)newSliceWithInt:(jint)size {
  return OrgApacheLuceneUtilIntBlockPool_newSliceWithInt_(self, size);
}

+ (jboolean)assertSliceBufferWithIntArray:(IOSIntArray *)buffer {
  return OrgApacheLuceneUtilIntBlockPool_assertSliceBufferWithIntArray_(buffer);
}

- (jint)allocSliceWithIntArray:(IOSIntArray *)slice
                       withInt:(jint)sliceOffset {
  return OrgApacheLuceneUtilIntBlockPool_allocSliceWithIntArray_withInt_(self, slice, sliceOffset);
}

- (void)dealloc {
  RELEASE_(buffers_);
  RELEASE_(buffer_);
  RELEASE_(allocator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1a, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgApacheLuceneUtilIntBlockPool_Allocator:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(resetWithBoolean:withBoolean:);
  methods[4].selector = @selector(nextBuffer);
  methods[5].selector = @selector(newSliceWithInt:);
  methods[6].selector = @selector(assertSliceBufferWithIntArray:);
  methods[7].selector = @selector(allocSliceWithIntArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INT_BLOCK_SHIFT", "I", .constantValue.asInt = OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SHIFT, 0x19, -1, -1, -1, -1 },
    { "INT_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE, 0x19, -1, -1, -1, -1 },
    { "INT_BLOCK_MASK", "I", .constantValue.asInt = OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK, 0x19, -1, -1, -1, -1 },
    { "buffers_", "[[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "intUpto_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "buffer_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "intOffset_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "allocator_", "LOrgApacheLuceneUtilIntBlockPool_Allocator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "NEXT_LEVEL_ARRAY", "[I", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "LEVEL_SIZE_ARRAY", "[I", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "FIRST_LEVEL_SIZE", "I", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilIntBlockPool_Allocator;", "reset", "ZZ", "newSlice", "I", "assertSliceBuffer", "[I", "allocSlice", "[II", &OrgApacheLuceneUtilIntBlockPool_NEXT_LEVEL_ARRAY, &OrgApacheLuceneUtilIntBlockPool_LEVEL_SIZE_ARRAY, &OrgApacheLuceneUtilIntBlockPool_FIRST_LEVEL_SIZE, "LOrgApacheLuceneUtilIntBlockPool_Allocator;LOrgApacheLuceneUtilIntBlockPool_DirectAllocator;LOrgApacheLuceneUtilIntBlockPool_SliceWriter;LOrgApacheLuceneUtilIntBlockPool_SliceReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIntBlockPool = { "IntBlockPool", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 8, 12, -1, 12, -1, -1, -1 };
  return &_OrgApacheLuceneUtilIntBlockPool;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilIntBlockPool class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilIntBlockPool_NEXT_LEVEL_ARRAY, [IOSIntArray newArrayWithInts:(jint[]){ 1, 2, 3, 4, 5, 6, 7, 8, 9, 9 } count:10]);
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilIntBlockPool_LEVEL_SIZE_ARRAY, [IOSIntArray newArrayWithInts:(jint[]){ 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 } count:10]);
    OrgApacheLuceneUtilIntBlockPool_FIRST_LEVEL_SIZE = IOSIntArray_Get(OrgApacheLuceneUtilIntBlockPool_LEVEL_SIZE_ARRAY, 0);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilIntBlockPool)
  }
}

@end

void OrgApacheLuceneUtilIntBlockPool_init(OrgApacheLuceneUtilIntBlockPool *self) {
  OrgApacheLuceneUtilIntBlockPool_initWithOrgApacheLuceneUtilIntBlockPool_Allocator_(self, create_OrgApacheLuceneUtilIntBlockPool_DirectAllocator_init());
}

OrgApacheLuceneUtilIntBlockPool *new_OrgApacheLuceneUtilIntBlockPool_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIntBlockPool, init)
}

OrgApacheLuceneUtilIntBlockPool *create_OrgApacheLuceneUtilIntBlockPool_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIntBlockPool, init)
}

void OrgApacheLuceneUtilIntBlockPool_initWithOrgApacheLuceneUtilIntBlockPool_Allocator_(OrgApacheLuceneUtilIntBlockPool *self, OrgApacheLuceneUtilIntBlockPool_Allocator *allocator) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->buffers_, [IOSObjectArray newArrayWithLength:10 type:IOSClass_intArray(1)]);
  self->bufferUpto_ = -1;
  self->intUpto_ = OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE;
  self->intOffset_ = -OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE;
  JreStrongAssign(&self->allocator_, allocator);
}

OrgApacheLuceneUtilIntBlockPool *new_OrgApacheLuceneUtilIntBlockPool_initWithOrgApacheLuceneUtilIntBlockPool_Allocator_(OrgApacheLuceneUtilIntBlockPool_Allocator *allocator) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIntBlockPool, initWithOrgApacheLuceneUtilIntBlockPool_Allocator_, allocator)
}

OrgApacheLuceneUtilIntBlockPool *create_OrgApacheLuceneUtilIntBlockPool_initWithOrgApacheLuceneUtilIntBlockPool_Allocator_(OrgApacheLuceneUtilIntBlockPool_Allocator *allocator) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIntBlockPool, initWithOrgApacheLuceneUtilIntBlockPool_Allocator_, allocator)
}

jint OrgApacheLuceneUtilIntBlockPool_newSliceWithInt_(OrgApacheLuceneUtilIntBlockPool *self, jint size) {
  if (self->intUpto_ > OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE - size) {
    [self nextBuffer];
    JreAssert(OrgApacheLuceneUtilIntBlockPool_assertSliceBufferWithIntArray_(self->buffer_), @"org/apache/lucene/util/IntBlockPool.java:169 condition failed: assert assertSliceBuffer(buffer);");
  }
  jint upto = self->intUpto_;
  self->intUpto_ += size;
  *IOSIntArray_GetRef(nil_chk(self->buffer_), self->intUpto_ - 1) = 1;
  return upto;
}

jboolean OrgApacheLuceneUtilIntBlockPool_assertSliceBufferWithIntArray_(IOSIntArray *buffer) {
  OrgApacheLuceneUtilIntBlockPool_initialize();
  jint count = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(buffer))->size_; i++) {
    count += IOSIntArray_Get(buffer, i);
  }
  return count == 0;
}

jint OrgApacheLuceneUtilIntBlockPool_allocSliceWithIntArray_withInt_(OrgApacheLuceneUtilIntBlockPool *self, IOSIntArray *slice, jint sliceOffset) {
  jint level = IOSIntArray_Get(nil_chk(slice), sliceOffset);
  jint newLevel = IOSIntArray_Get(nil_chk(OrgApacheLuceneUtilIntBlockPool_NEXT_LEVEL_ARRAY), level - 1);
  jint newSize = IOSIntArray_Get(nil_chk(OrgApacheLuceneUtilIntBlockPool_LEVEL_SIZE_ARRAY), newLevel);
  if (self->intUpto_ > OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE - newSize) {
    [self nextBuffer];
    JreAssert(OrgApacheLuceneUtilIntBlockPool_assertSliceBufferWithIntArray_(self->buffer_), @"org/apache/lucene/util/IntBlockPool.java:215 condition failed: assert assertSliceBuffer(buffer);");
  }
  jint newUpto = self->intUpto_;
  jint offset = newUpto + self->intOffset_;
  self->intUpto_ += newSize;
  *IOSIntArray_GetRef(slice, sliceOffset) = offset;
  *IOSIntArray_GetRef(nil_chk(self->buffer_), self->intUpto_ - 1) = newLevel;
  return newUpto;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIntBlockPool)

@implementation OrgApacheLuceneUtilIntBlockPool_Allocator

- (instancetype)initWithInt:(jint)blockSize {
  OrgApacheLuceneUtilIntBlockPool_Allocator_initWithInt_(self, blockSize);
  return self;
}

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)start
                              withInt:(jint)end {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (IOSIntArray *)getIntBlock {
  return [IOSIntArray arrayWithLength:blockSize_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(recycleIntBlocksWithIntArray2:withInt:withInt:);
  methods[2].selector = @selector(getIntBlock);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "blockSize_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "recycleIntBlocks", "[[III", "LOrgApacheLuceneUtilIntBlockPool;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIntBlockPool_Allocator = { "Allocator", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x409, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilIntBlockPool_Allocator;
}

@end

void OrgApacheLuceneUtilIntBlockPool_Allocator_initWithInt_(OrgApacheLuceneUtilIntBlockPool_Allocator *self, jint blockSize) {
  NSObject_init(self);
  self->blockSize_ = blockSize;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIntBlockPool_Allocator)

@implementation OrgApacheLuceneUtilIntBlockPool_DirectAllocator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilIntBlockPool_DirectAllocator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)start
                              withInt:(jint)end {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(recycleIntBlocksWithIntArray2:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "recycleIntBlocks", "[[III", "LOrgApacheLuceneUtilIntBlockPool;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIntBlockPool_DirectAllocator = { "DirectAllocator", "org.apache.lucene.util", ptrTable, methods, NULL, 7, 0x19, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilIntBlockPool_DirectAllocator;
}

@end

void OrgApacheLuceneUtilIntBlockPool_DirectAllocator_init(OrgApacheLuceneUtilIntBlockPool_DirectAllocator *self) {
  OrgApacheLuceneUtilIntBlockPool_Allocator_initWithInt_(self, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE);
}

OrgApacheLuceneUtilIntBlockPool_DirectAllocator *new_OrgApacheLuceneUtilIntBlockPool_DirectAllocator_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIntBlockPool_DirectAllocator, init)
}

OrgApacheLuceneUtilIntBlockPool_DirectAllocator *create_OrgApacheLuceneUtilIntBlockPool_DirectAllocator_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIntBlockPool_DirectAllocator, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIntBlockPool_DirectAllocator)

@implementation OrgApacheLuceneUtilIntBlockPool_SliceWriter

- (instancetype)initWithOrgApacheLuceneUtilIntBlockPool:(OrgApacheLuceneUtilIntBlockPool *)pool {
  OrgApacheLuceneUtilIntBlockPool_SliceWriter_initWithOrgApacheLuceneUtilIntBlockPool_(self, pool);
  return self;
}

- (void)resetWithInt:(jint)sliceOffset {
  self->offset_ = sliceOffset;
}

- (void)writeIntWithInt:(jint)value {
  IOSIntArray *ints = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneUtilIntBlockPool *) nil_chk(pool_))->buffers_), JreRShift32(offset_, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SHIFT));
  JreAssert(ints != nil, @"org/apache/lucene/util/IntBlockPool.java:257 condition failed: assert ints != null;");
  jint relativeOffset = offset_ & OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK;
  if (IOSIntArray_Get(nil_chk(ints), relativeOffset) != 0) {
    relativeOffset = OrgApacheLuceneUtilIntBlockPool_allocSliceWithIntArray_withInt_(pool_, ints, relativeOffset);
    ints = pool_->buffer_;
    offset_ = relativeOffset + pool_->intOffset_;
  }
  *IOSIntArray_GetRef(nil_chk(ints), relativeOffset) = value;
  offset_++;
}

- (jint)startNewSlice {
  return offset_ = OrgApacheLuceneUtilIntBlockPool_newSliceWithInt_(nil_chk(pool_), JreLoadStatic(OrgApacheLuceneUtilIntBlockPool, FIRST_LEVEL_SIZE)) + pool_->intOffset_;
}

- (jint)getCurrentOffset {
  return offset_;
}

- (void)dealloc {
  RELEASE_(pool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilIntBlockPool:);
  methods[1].selector = @selector(resetWithInt:);
  methods[2].selector = @selector(writeIntWithInt:);
  methods[3].selector = @selector(startNewSlice);
  methods[4].selector = @selector(getCurrentOffset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "offset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pool_", "LOrgApacheLuceneUtilIntBlockPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilIntBlockPool;", "reset", "I", "writeInt" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIntBlockPool_SliceWriter = { "SliceWriter", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x9, 5, 2, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilIntBlockPool_SliceWriter;
}

@end

void OrgApacheLuceneUtilIntBlockPool_SliceWriter_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool_SliceWriter *self, OrgApacheLuceneUtilIntBlockPool *pool) {
  NSObject_init(self);
  JreStrongAssign(&self->pool_, pool);
}

OrgApacheLuceneUtilIntBlockPool_SliceWriter *new_OrgApacheLuceneUtilIntBlockPool_SliceWriter_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool *pool) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIntBlockPool_SliceWriter, initWithOrgApacheLuceneUtilIntBlockPool_, pool)
}

OrgApacheLuceneUtilIntBlockPool_SliceWriter *create_OrgApacheLuceneUtilIntBlockPool_SliceWriter_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool *pool) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIntBlockPool_SliceWriter, initWithOrgApacheLuceneUtilIntBlockPool_, pool)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIntBlockPool_SliceWriter)

@implementation OrgApacheLuceneUtilIntBlockPool_SliceReader

- (instancetype)initWithOrgApacheLuceneUtilIntBlockPool:(OrgApacheLuceneUtilIntBlockPool *)pool {
  OrgApacheLuceneUtilIntBlockPool_SliceReader_initWithOrgApacheLuceneUtilIntBlockPool_(self, pool);
  return self;
}

- (void)resetWithInt:(jint)startOffset
             withInt:(jint)endOffset {
  bufferUpto_ = JreIntDiv(startOffset, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE);
  bufferOffset_ = bufferUpto_ * OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE;
  self->end_ = endOffset;
  upto_ = startOffset;
  level_ = 1;
  JreStrongAssign(&buffer_, IOSObjectArray_Get(nil_chk(((OrgApacheLuceneUtilIntBlockPool *) nil_chk(pool_))->buffers_), bufferUpto_));
  upto_ = startOffset & OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK;
  jint firstSize = IOSIntArray_Get(nil_chk(JreLoadStatic(OrgApacheLuceneUtilIntBlockPool, LEVEL_SIZE_ARRAY)), 0);
  if (startOffset + firstSize >= endOffset) {
    limit_ = endOffset & OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK;
  }
  else {
    limit_ = upto_ + firstSize - 1;
  }
}

- (jboolean)endOfSlice {
  JreAssert(upto_ + bufferOffset_ <= end_, @"org/apache/lucene/util/IntBlockPool.java:340 condition failed: assert upto + bufferOffset <= end;");
  return upto_ + bufferOffset_ == end_;
}

- (jint)readInt {
  JreAssert(![self endOfSlice], @"org/apache/lucene/util/IntBlockPool.java:349 condition failed: assert !endOfSlice();");
  JreAssert(upto_ <= limit_, @"org/apache/lucene/util/IntBlockPool.java:350 condition failed: assert upto <= limit;");
  if (upto_ == limit_) OrgApacheLuceneUtilIntBlockPool_SliceReader_nextSlice(self);
  return IOSIntArray_Get(nil_chk(buffer_), upto_++);
}

- (void)nextSlice {
  OrgApacheLuceneUtilIntBlockPool_SliceReader_nextSlice(self);
}

- (void)dealloc {
  RELEASE_(pool_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilIntBlockPool:);
  methods[1].selector = @selector(resetWithInt:withInt:);
  methods[2].selector = @selector(endOfSlice);
  methods[3].selector = @selector(readInt);
  methods[4].selector = @selector(nextSlice);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pool_", "LOrgApacheLuceneUtilIntBlockPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "upto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buffer_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "level_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilIntBlockPool;", "reset", "II" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIntBlockPool_SliceReader = { "SliceReader", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x19, 5, 8, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilIntBlockPool_SliceReader;
}

@end

void OrgApacheLuceneUtilIntBlockPool_SliceReader_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool_SliceReader *self, OrgApacheLuceneUtilIntBlockPool *pool) {
  NSObject_init(self);
  JreStrongAssign(&self->pool_, pool);
}

OrgApacheLuceneUtilIntBlockPool_SliceReader *new_OrgApacheLuceneUtilIntBlockPool_SliceReader_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool *pool) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIntBlockPool_SliceReader, initWithOrgApacheLuceneUtilIntBlockPool_, pool)
}

OrgApacheLuceneUtilIntBlockPool_SliceReader *create_OrgApacheLuceneUtilIntBlockPool_SliceReader_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool *pool) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIntBlockPool_SliceReader, initWithOrgApacheLuceneUtilIntBlockPool_, pool)
}

void OrgApacheLuceneUtilIntBlockPool_SliceReader_nextSlice(OrgApacheLuceneUtilIntBlockPool_SliceReader *self) {
  jint nextIndex = IOSIntArray_Get(nil_chk(self->buffer_), self->limit_);
  self->level_ = IOSIntArray_Get(nil_chk(JreLoadStatic(OrgApacheLuceneUtilIntBlockPool, NEXT_LEVEL_ARRAY)), self->level_ - 1);
  jint newSize = IOSIntArray_Get(nil_chk(JreLoadStatic(OrgApacheLuceneUtilIntBlockPool, LEVEL_SIZE_ARRAY)), self->level_);
  self->bufferUpto_ = JreIntDiv(nextIndex, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE);
  self->bufferOffset_ = self->bufferUpto_ * OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE;
  JreStrongAssign(&self->buffer_, IOSObjectArray_Get(nil_chk(((OrgApacheLuceneUtilIntBlockPool *) nil_chk(self->pool_))->buffers_), self->bufferUpto_));
  self->upto_ = nextIndex & OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK;
  if (nextIndex + newSize >= self->end_) {
    JreAssert(self->end_ - nextIndex > 0, @"org/apache/lucene/util/IntBlockPool.java:370 condition failed: assert end - nextIndex > 0;");
    self->limit_ = self->end_ - self->bufferOffset_;
  }
  else {
    self->limit_ = self->upto_ + newSize - 1;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIntBlockPool_SliceReader)
