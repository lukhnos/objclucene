//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/BitUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Long.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/lucene/util/BitUtil.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/BitUtil must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilBitUtil ()

- (instancetype)init;

@end

inline IOSByteArray *OrgApacheLuceneUtilBitUtil_get_BYTE_COUNTS(void);
static IOSByteArray *OrgApacheLuceneUtilBitUtil_BYTE_COUNTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilBitUtil, BYTE_COUNTS, IOSByteArray *)

inline IOSIntArray *OrgApacheLuceneUtilBitUtil_get_BIT_LISTS(void);
static IOSIntArray *OrgApacheLuceneUtilBitUtil_BIT_LISTS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilBitUtil, BIT_LISTS, IOSIntArray *)

inline IOSLongArray *OrgApacheLuceneUtilBitUtil_get_MAGIC(void);
static IOSLongArray *OrgApacheLuceneUtilBitUtil_MAGIC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilBitUtil, MAGIC, IOSLongArray *)

inline IOSShortArray *OrgApacheLuceneUtilBitUtil_get_SHIFT(void);
static IOSShortArray *OrgApacheLuceneUtilBitUtil_SHIFT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilBitUtil, SHIFT, IOSShortArray *)

__attribute__((unused)) static void OrgApacheLuceneUtilBitUtil_init(OrgApacheLuceneUtilBitUtil *self);

__attribute__((unused)) static OrgApacheLuceneUtilBitUtil *new_OrgApacheLuceneUtilBitUtil_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilBitUtil *create_OrgApacheLuceneUtilBitUtil_init(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneUtilBitUtil__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneUtilBitUtil__Annotations$1(void);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilBitUtil)

@implementation OrgApacheLuceneUtilBitUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilBitUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)bitCountWithByte:(jbyte)b {
  return OrgApacheLuceneUtilBitUtil_bitCountWithByte_(b);
}

+ (jint)bitListWithByte:(jbyte)b {
  return OrgApacheLuceneUtilBitUtil_bitListWithByte_(b);
}

+ (jlong)pop_arrayWithLongArray:(IOSLongArray *)arr
                        withInt:(jint)wordOffset
                        withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(arr, wordOffset, numWords);
}

+ (jlong)pop_intersectWithLongArray:(IOSLongArray *)arr1
                      withLongArray:(IOSLongArray *)arr2
                            withInt:(jint)wordOffset
                            withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_intersectWithLongArray_withLongArray_withInt_withInt_(arr1, arr2, wordOffset, numWords);
}

+ (jlong)pop_unionWithLongArray:(IOSLongArray *)arr1
                  withLongArray:(IOSLongArray *)arr2
                        withInt:(jint)wordOffset
                        withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_unionWithLongArray_withLongArray_withInt_withInt_(arr1, arr2, wordOffset, numWords);
}

+ (jlong)pop_andnotWithLongArray:(IOSLongArray *)arr1
                   withLongArray:(IOSLongArray *)arr2
                         withInt:(jint)wordOffset
                         withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_andnotWithLongArray_withLongArray_withInt_withInt_(arr1, arr2, wordOffset, numWords);
}

+ (jlong)pop_xorWithLongArray:(IOSLongArray *)arr1
                withLongArray:(IOSLongArray *)arr2
                      withInt:(jint)wordOffset
                      withInt:(jint)numWords {
  return OrgApacheLuceneUtilBitUtil_pop_xorWithLongArray_withLongArray_withInt_withInt_(arr1, arr2, wordOffset, numWords);
}

+ (jint)nextHighestPowerOfTwoWithInt:(jint)v {
  return OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithInt_(v);
}

+ (jlong)nextHighestPowerOfTwoWithLong:(jlong)v {
  return OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithLong_(v);
}

+ (jlong)interleaveWithLong:(jlong)v1
                   withLong:(jlong)v2 {
  return OrgApacheLuceneUtilBitUtil_interleaveWithLong_withLong_(v1, v2);
}

+ (jlong)deinterleaveWithLong:(jlong)b {
  return OrgApacheLuceneUtilBitUtil_deinterleaveWithLong_(b);
}

+ (jlong)flipFlopWithLong:(jlong)b {
  return OrgApacheLuceneUtilBitUtil_flipFlopWithLong_(b);
}

+ (jint)zigZagEncodeWithInt:(jint)i {
  return OrgApacheLuceneUtilBitUtil_zigZagEncodeWithInt_(i);
}

+ (jlong)zigZagEncodeWithLong:(jlong)l {
  return OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(l);
}

+ (jint)zigZagDecodeWithInt:(jint)i {
  return OrgApacheLuceneUtilBitUtil_zigZagDecodeWithInt_(i);
}

+ (jlong)zigZagDecodeWithLong:(jlong)l {
  return OrgApacheLuceneUtilBitUtil_zigZagDecodeWithLong_(l);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, 2, -1 },
    { NULL, "I", 0x9, 3, 1, -1, -1, 4, -1 },
    { NULL, "J", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 9, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 10, 8, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 11, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 12, 14, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 17, 14, -1, -1, -1, -1 },
    { NULL, "J", 0x19, 18, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 19, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 19, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 20, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 20, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(bitCountWithByte:);
  methods[2].selector = @selector(bitListWithByte:);
  methods[3].selector = @selector(pop_arrayWithLongArray:withInt:withInt:);
  methods[4].selector = @selector(pop_intersectWithLongArray:withLongArray:withInt:withInt:);
  methods[5].selector = @selector(pop_unionWithLongArray:withLongArray:withInt:withInt:);
  methods[6].selector = @selector(pop_andnotWithLongArray:withLongArray:withInt:withInt:);
  methods[7].selector = @selector(pop_xorWithLongArray:withLongArray:withInt:withInt:);
  methods[8].selector = @selector(nextHighestPowerOfTwoWithInt:);
  methods[9].selector = @selector(nextHighestPowerOfTwoWithLong:);
  methods[10].selector = @selector(interleaveWithLong:withLong:);
  methods[11].selector = @selector(deinterleaveWithLong:);
  methods[12].selector = @selector(flipFlopWithLong:);
  methods[13].selector = @selector(zigZagEncodeWithInt:);
  methods[14].selector = @selector(zigZagEncodeWithLong:);
  methods[15].selector = @selector(zigZagDecodeWithInt:);
  methods[16].selector = @selector(zigZagDecodeWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BYTE_COUNTS", "[B", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "BIT_LISTS", "[I", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "MAGIC", "[J", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "SHIFT", "[S", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
  };
  static const void *ptrTable[] = { "bitCount", "B", (void *)&OrgApacheLuceneUtilBitUtil__Annotations$0, "bitList", (void *)&OrgApacheLuceneUtilBitUtil__Annotations$1, "pop_array", "[JII", "pop_intersect", "[J[JII", "pop_union", "pop_andnot", "pop_xor", "nextHighestPowerOfTwo", "I", "J", "interleave", "JJ", "deinterleave", "flipFlop", "zigZagEncode", "zigZagDecode", &OrgApacheLuceneUtilBitUtil_BYTE_COUNTS, &OrgApacheLuceneUtilBitUtil_BIT_LISTS, &OrgApacheLuceneUtilBitUtil_MAGIC, &OrgApacheLuceneUtilBitUtil_SHIFT };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilBitUtil = { "BitUtil", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 17, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilBitUtil;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilBitUtil class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilBitUtil_BYTE_COUNTS, [IOSByteArray newArrayWithBytes:(jbyte[]){ 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8 } count:256]);
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilBitUtil_BIT_LISTS, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0, (jint) 0x1, (jint) 0x2, (jint) 0x21, (jint) 0x3, (jint) 0x31, (jint) 0x32, (jint) 0x321, (jint) 0x4, (jint) 0x41, (jint) 0x42, (jint) 0x421, (jint) 0x43, (jint) 0x431, (jint) 0x432, (jint) 0x4321, (jint) 0x5, (jint) 0x51, (jint) 0x52, (jint) 0x521, (jint) 0x53, (jint) 0x531, (jint) 0x532, (jint) 0x5321, (jint) 0x54, (jint) 0x541, (jint) 0x542, (jint) 0x5421, (jint) 0x543, (jint) 0x5431, (jint) 0x5432, (jint) 0x54321, (jint) 0x6, (jint) 0x61, (jint) 0x62, (jint) 0x621, (jint) 0x63, (jint) 0x631, (jint) 0x632, (jint) 0x6321, (jint) 0x64, (jint) 0x641, (jint) 0x642, (jint) 0x6421, (jint) 0x643, (jint) 0x6431, (jint) 0x6432, (jint) 0x64321, (jint) 0x65, (jint) 0x651, (jint) 0x652, (jint) 0x6521, (jint) 0x653, (jint) 0x6531, (jint) 0x6532, (jint) 0x65321, (jint) 0x654, (jint) 0x6541, (jint) 0x6542, (jint) 0x65421, (jint) 0x6543, (jint) 0x65431, (jint) 0x65432, (jint) 0x654321, (jint) 0x7, (jint) 0x71, (jint) 0x72, (jint) 0x721, (jint) 0x73, (jint) 0x731, (jint) 0x732, (jint) 0x7321, (jint) 0x74, (jint) 0x741, (jint) 0x742, (jint) 0x7421, (jint) 0x743, (jint) 0x7431, (jint) 0x7432, (jint) 0x74321, (jint) 0x75, (jint) 0x751, (jint) 0x752, (jint) 0x7521, (jint) 0x753, (jint) 0x7531, (jint) 0x7532, (jint) 0x75321, (jint) 0x754, (jint) 0x7541, (jint) 0x7542, (jint) 0x75421, (jint) 0x7543, (jint) 0x75431, (jint) 0x75432, (jint) 0x754321, (jint) 0x76, (jint) 0x761, (jint) 0x762, (jint) 0x7621, (jint) 0x763, (jint) 0x7631, (jint) 0x7632, (jint) 0x76321, (jint) 0x764, (jint) 0x7641, (jint) 0x7642, (jint) 0x76421, (jint) 0x7643, (jint) 0x76431, (jint) 0x76432, (jint) 0x764321, (jint) 0x765, (jint) 0x7651, (jint) 0x7652, (jint) 0x76521, (jint) 0x7653, (jint) 0x76531, (jint) 0x76532, (jint) 0x765321, (jint) 0x7654, (jint) 0x76541, (jint) 0x76542, (jint) 0x765421, (jint) 0x76543, (jint) 0x765431, (jint) 0x765432, (jint) 0x7654321, (jint) 0x8, (jint) 0x81, (jint) 0x82, (jint) 0x821, (jint) 0x83, (jint) 0x831, (jint) 0x832, (jint) 0x8321, (jint) 0x84, (jint) 0x841, (jint) 0x842, (jint) 0x8421, (jint) 0x843, (jint) 0x8431, (jint) 0x8432, (jint) 0x84321, (jint) 0x85, (jint) 0x851, (jint) 0x852, (jint) 0x8521, (jint) 0x853, (jint) 0x8531, (jint) 0x8532, (jint) 0x85321, (jint) 0x854, (jint) 0x8541, (jint) 0x8542, (jint) 0x85421, (jint) 0x8543, (jint) 0x85431, (jint) 0x85432, (jint) 0x854321, (jint) 0x86, (jint) 0x861, (jint) 0x862, (jint) 0x8621, (jint) 0x863, (jint) 0x8631, (jint) 0x8632, (jint) 0x86321, (jint) 0x864, (jint) 0x8641, (jint) 0x8642, (jint) 0x86421, (jint) 0x8643, (jint) 0x86431, (jint) 0x86432, (jint) 0x864321, (jint) 0x865, (jint) 0x8651, (jint) 0x8652, (jint) 0x86521, (jint) 0x8653, (jint) 0x86531, (jint) 0x86532, (jint) 0x865321, (jint) 0x8654, (jint) 0x86541, (jint) 0x86542, (jint) 0x865421, (jint) 0x86543, (jint) 0x865431, (jint) 0x865432, (jint) 0x8654321, (jint) 0x87, (jint) 0x871, (jint) 0x872, (jint) 0x8721, (jint) 0x873, (jint) 0x8731, (jint) 0x8732, (jint) 0x87321, (jint) 0x874, (jint) 0x8741, (jint) 0x8742, (jint) 0x87421, (jint) 0x8743, (jint) 0x87431, (jint) 0x87432, (jint) 0x874321, (jint) 0x875, (jint) 0x8751, (jint) 0x8752, (jint) 0x87521, (jint) 0x8753, (jint) 0x87531, (jint) 0x87532, (jint) 0x875321, (jint) 0x8754, (jint) 0x87541, (jint) 0x87542, (jint) 0x875421, (jint) 0x87543, (jint) 0x875431, (jint) 0x875432, (jint) 0x8754321, (jint) 0x876, (jint) 0x8761, (jint) 0x8762, (jint) 0x87621, (jint) 0x8763, (jint) 0x87631, (jint) 0x87632, (jint) 0x876321, (jint) 0x8764, (jint) 0x87641, (jint) 0x87642, (jint) 0x876421, (jint) 0x87643, (jint) 0x876431, (jint) 0x876432, (jint) 0x8764321, (jint) 0x8765, (jint) 0x87651, (jint) 0x87652, (jint) 0x876521, (jint) 0x87653, (jint) 0x876531, (jint) 0x876532, (jint) 0x8765321, (jint) 0x87654, (jint) 0x876541, (jint) 0x876542, (jint) 0x8765421, (jint) 0x876543, (jint) 0x8765431, (jint) 0x8765432, (jint) 0x87654321 } count:256]);
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilBitUtil_MAGIC, [IOSLongArray newArrayWithLongs:(jlong[]){ (jlong) 0x5555555555555555LL, (jlong) 0x3333333333333333LL, (jlong) 0x0F0F0F0F0F0F0F0FLL, (jlong) 0x00FF00FF00FF00FFLL, (jlong) 0x0000FFFF0000FFFFLL, (jlong) 0x00000000FFFFFFFFLL, (jlong) 0xAAAAAAAAAAAAAAAALL } count:7]);
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilBitUtil_SHIFT, [IOSShortArray newArrayWithShorts:(jshort[]){ 1, 2, 4, 8, 16 } count:5]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilBitUtil)
  }
}

@end

void OrgApacheLuceneUtilBitUtil_init(OrgApacheLuceneUtilBitUtil *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilBitUtil *new_OrgApacheLuceneUtilBitUtil_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilBitUtil, init)
}

OrgApacheLuceneUtilBitUtil *create_OrgApacheLuceneUtilBitUtil_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilBitUtil, init)
}

jint OrgApacheLuceneUtilBitUtil_bitCountWithByte_(jbyte b) {
  OrgApacheLuceneUtilBitUtil_initialize();
  return IOSByteArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_BYTE_COUNTS), b & (jint) 0xFF);
}

jint OrgApacheLuceneUtilBitUtil_bitListWithByte_(jbyte b) {
  OrgApacheLuceneUtilBitUtil_initialize();
  return IOSIntArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_BIT_LISTS), b & (jint) 0xFF);
}

jlong OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(IOSLongArray *arr, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jlong popCount = 0;
  for (jint i = wordOffset, end = wordOffset + numWords; i < end; ++i) {
    popCount += JavaLangLong_bitCountWithLong_(IOSLongArray_Get(nil_chk(arr), i));
  }
  return popCount;
}

jlong OrgApacheLuceneUtilBitUtil_pop_intersectWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *arr1, IOSLongArray *arr2, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jlong popCount = 0;
  for (jint i = wordOffset, end = wordOffset + numWords; i < end; ++i) {
    popCount += JavaLangLong_bitCountWithLong_(IOSLongArray_Get(nil_chk(arr1), i) & IOSLongArray_Get(nil_chk(arr2), i));
  }
  return popCount;
}

jlong OrgApacheLuceneUtilBitUtil_pop_unionWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *arr1, IOSLongArray *arr2, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jlong popCount = 0;
  for (jint i = wordOffset, end = wordOffset + numWords; i < end; ++i) {
    popCount += JavaLangLong_bitCountWithLong_(IOSLongArray_Get(nil_chk(arr1), i) | IOSLongArray_Get(nil_chk(arr2), i));
  }
  return popCount;
}

jlong OrgApacheLuceneUtilBitUtil_pop_andnotWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *arr1, IOSLongArray *arr2, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jlong popCount = 0;
  for (jint i = wordOffset, end = wordOffset + numWords; i < end; ++i) {
    popCount += JavaLangLong_bitCountWithLong_(IOSLongArray_Get(nil_chk(arr1), i) & ~IOSLongArray_Get(nil_chk(arr2), i));
  }
  return popCount;
}

jlong OrgApacheLuceneUtilBitUtil_pop_xorWithLongArray_withLongArray_withInt_withInt_(IOSLongArray *arr1, IOSLongArray *arr2, jint wordOffset, jint numWords) {
  OrgApacheLuceneUtilBitUtil_initialize();
  jlong popCount = 0;
  for (jint i = wordOffset, end = wordOffset + numWords; i < end; ++i) {
    popCount += JavaLangLong_bitCountWithLong_(IOSLongArray_Get(nil_chk(arr1), i) ^ IOSLongArray_Get(nil_chk(arr2), i));
  }
  return popCount;
}

jint OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithInt_(jint v) {
  OrgApacheLuceneUtilBitUtil_initialize();
  v--;
  v |= JreRShift32(v, 1);
  v |= JreRShift32(v, 2);
  v |= JreRShift32(v, 4);
  v |= JreRShift32(v, 8);
  v |= JreRShift32(v, 16);
  v++;
  return v;
}

jlong OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithLong_(jlong v) {
  OrgApacheLuceneUtilBitUtil_initialize();
  v--;
  v |= JreRShift64(v, 1);
  v |= JreRShift64(v, 2);
  v |= JreRShift64(v, 4);
  v |= JreRShift64(v, 8);
  v |= JreRShift64(v, 16);
  v |= JreRShift64(v, 32);
  v++;
  return v;
}

jlong OrgApacheLuceneUtilBitUtil_interleaveWithLong_withLong_(jlong v1, jlong v2) {
  OrgApacheLuceneUtilBitUtil_initialize();
  v1 = (v1 | (JreLShift64(v1, IOSShortArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_SHIFT), 4)))) & IOSLongArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_MAGIC), 4);
  v1 = (v1 | (JreLShift64(v1, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 3)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 3);
  v1 = (v1 | (JreLShift64(v1, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 2)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 2);
  v1 = (v1 | (JreLShift64(v1, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 1)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 1);
  v1 = (v1 | (JreLShift64(v1, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 0)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 0);
  v2 = (v2 | (JreLShift64(v2, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 4)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 4);
  v2 = (v2 | (JreLShift64(v2, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 3)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 3);
  v2 = (v2 | (JreLShift64(v2, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 2)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 2);
  v2 = (v2 | (JreLShift64(v2, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 1)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 1);
  v2 = (v2 | (JreLShift64(v2, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 0)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 0);
  return (JreLShift64(v2, 1)) | v1;
}

jlong OrgApacheLuceneUtilBitUtil_deinterleaveWithLong_(jlong b) {
  OrgApacheLuceneUtilBitUtil_initialize();
  b &= IOSLongArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_MAGIC), 0);
  b = (b ^ (JreURShift64(b, IOSShortArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_SHIFT), 0)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 1);
  b = (b ^ (JreURShift64(b, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 1)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 2);
  b = (b ^ (JreURShift64(b, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 2)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 3);
  b = (b ^ (JreURShift64(b, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 3)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 4);
  b = (b ^ (JreURShift64(b, IOSShortArray_Get(OrgApacheLuceneUtilBitUtil_SHIFT, 4)))) & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 5);
  return b;
}

jlong OrgApacheLuceneUtilBitUtil_flipFlopWithLong_(jlong b) {
  OrgApacheLuceneUtilBitUtil_initialize();
  return (JreURShift64((b & IOSLongArray_Get(nil_chk(OrgApacheLuceneUtilBitUtil_MAGIC), 6)), 1)) | (JreLShift64((b & IOSLongArray_Get(OrgApacheLuceneUtilBitUtil_MAGIC, 0)), 1));
}

jint OrgApacheLuceneUtilBitUtil_zigZagEncodeWithInt_(jint i) {
  OrgApacheLuceneUtilBitUtil_initialize();
  return (JreRShift32(i, 31)) ^ (JreLShift32(i, 1));
}

jlong OrgApacheLuceneUtilBitUtil_zigZagEncodeWithLong_(jlong l) {
  OrgApacheLuceneUtilBitUtil_initialize();
  return (JreRShift64(l, 63)) ^ (JreLShift64(l, 1));
}

jint OrgApacheLuceneUtilBitUtil_zigZagDecodeWithInt_(jint i) {
  OrgApacheLuceneUtilBitUtil_initialize();
  return ((JreURShift32(i, 1)) ^ -(i & 1));
}

jlong OrgApacheLuceneUtilBitUtil_zigZagDecodeWithLong_(jlong l) {
  OrgApacheLuceneUtilBitUtil_initialize();
  return ((JreURShift64(l, 1)) ^ -(l & 1));
}

IOSObjectArray *OrgApacheLuceneUtilBitUtil__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneUtilBitUtil__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilBitUtil)
