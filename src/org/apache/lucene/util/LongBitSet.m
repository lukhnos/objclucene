//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/LongBitSet.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/LongBitSet.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/LongBitSet must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilLongBitSet () {
 @public
  IOSLongArray *bits_;
  jlong numBits_;
  jint numWords_;
}

/*!
 @brief Checks if the bits past numBits are clear.
 Some methods rely on this implicit assumption: search for "Depends on the ghost bits being clear!"
 @return true if the bits past numBits are clear.
 */
- (jboolean)verifyGhostBitsClear;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilLongBitSet, bits_, IOSLongArray *)

__attribute__((unused)) static jboolean OrgApacheLuceneUtilLongBitSet_verifyGhostBitsClear(OrgApacheLuceneUtilLongBitSet *self);

@implementation OrgApacheLuceneUtilLongBitSet

+ (OrgApacheLuceneUtilLongBitSet *)ensureCapacityWithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)bits
                                                                          withLong:(jlong)numBits {
  return OrgApacheLuceneUtilLongBitSet_ensureCapacityWithOrgApacheLuceneUtilLongBitSet_withLong_(bits, numBits);
}

+ (jint)bits2wordsWithLong:(jlong)numBits {
  return OrgApacheLuceneUtilLongBitSet_bits2wordsWithLong_(numBits);
}

- (instancetype)initWithLong:(jlong)numBits {
  OrgApacheLuceneUtilLongBitSet_initWithLong_(self, numBits);
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)storedBits
                         withLong:(jlong)numBits {
  OrgApacheLuceneUtilLongBitSet_initWithLongArray_withLong_(self, storedBits, numBits);
  return self;
}

- (jboolean)verifyGhostBitsClear {
  return OrgApacheLuceneUtilLongBitSet_verifyGhostBitsClear(self);
}

- (jlong)length {
  return numBits_;
}

- (IOSLongArray *)getBits {
  return bits_;
}

- (jlong)cardinality {
  return OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(bits_, 0, numWords_);
}

- (jboolean)getWithLong:(jlong)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$J$J", @"index=", index, @", numBits=", numBits_));
  jint i = (jint) (JreRShift64(index, 6));
  jlong bitmask = JreLShift64(1LL, index);
  return (IOSLongArray_Get(nil_chk(bits_), i) & bitmask) != 0;
}

- (void)setWithLong:(jlong)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$J$J", @"index=", index, @" numBits=", numBits_));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jlong bitmask = JreLShift64(1LL, index);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) |= bitmask;
}

- (jboolean)getAndSetWithLong:(jlong)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$J$J", @"index=", index, @", numBits=", numBits_));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jlong bitmask = JreLShift64(1LL, index);
  jboolean val = (IOSLongArray_Get(nil_chk(bits_), wordNum) & bitmask) != 0;
  *IOSLongArray_GetRef(bits_, wordNum) |= bitmask;
  return val;
}

- (void)clearWithLong:(jlong)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$J$J", @"index=", index, @", numBits=", numBits_));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jlong bitmask = JreLShift64(1LL, index);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) &= ~bitmask;
}

- (jboolean)getAndClearWithLong:(jlong)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$J$J", @"index=", index, @", numBits=", numBits_));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jlong bitmask = JreLShift64(1LL, index);
  jboolean val = (IOSLongArray_Get(nil_chk(bits_), wordNum) & bitmask) != 0;
  *IOSLongArray_GetRef(bits_, wordNum) &= ~bitmask;
  return val;
}

- (jlong)nextSetBitWithLong:(jlong)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$J$J", @"index=", index, @", numBits=", numBits_));
  jint i = (jint) (JreRShift64(index, 6));
  jlong word = JreRShift64(IOSLongArray_Get(nil_chk(bits_), i), index);
  if (word != 0) {
    return index + JavaLangLong_numberOfTrailingZerosWithLong_(word);
  }
  while (++i < numWords_) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) {
      return (JreLShift32(i, 6)) + JavaLangLong_numberOfTrailingZerosWithLong_(word);
    }
  }
  return -1;
}

- (jlong)prevSetBitWithLong:(jlong)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$J$J", @"index=", index, @" numBits=", numBits_));
  jint i = (jint) (JreRShift64(index, 6));
  jint subIndex = (jint) (index & (jint) 0x3f);
  jlong word = (JreLShift64(IOSLongArray_Get(nil_chk(bits_), i), (63 - subIndex)));
  if (word != 0) {
    return (JreLShift32(i, 6)) + subIndex - JavaLangLong_numberOfLeadingZerosWithLong_(word);
  }
  while (--i >= 0) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) {
      return (JreLShift32(i, 6)) + 63 - JavaLangLong_numberOfLeadingZerosWithLong_(word);
    }
  }
  return -1;
}

- (void)or__WithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other {
  JreAssert(((OrgApacheLuceneUtilLongBitSet *) nil_chk(other))->numWords_ <= numWords_, JreStrcat("$I$I", @"numWords=", numWords_, @", other.numWords=", other->numWords_));
  jint pos = JavaLangMath_minWithInt_withInt_(numWords_, other->numWords_);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(bits_), pos) |= IOSLongArray_Get(other->bits_, pos);
  }
}

- (void)xor__WithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other {
  JreAssert(((OrgApacheLuceneUtilLongBitSet *) nil_chk(other))->numWords_ <= numWords_, JreStrcat("$I$I", @"numWords=", numWords_, @", other.numWords=", other->numWords_));
  jint pos = JavaLangMath_minWithInt_withInt_(numWords_, other->numWords_);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(bits_), pos) ^= IOSLongArray_Get(other->bits_, pos);
  }
}

- (jboolean)intersectsWithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other {
  jint pos = JavaLangMath_minWithInt_withInt_(numWords_, ((OrgApacheLuceneUtilLongBitSet *) nil_chk(other))->numWords_);
  while (--pos >= 0) {
    if ((IOSLongArray_Get(nil_chk(bits_), pos) & IOSLongArray_Get(other->bits_, pos)) != 0) return true;
  }
  return false;
}

- (void)and__WithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other {
  jint pos = JavaLangMath_minWithInt_withInt_(numWords_, ((OrgApacheLuceneUtilLongBitSet *) nil_chk(other))->numWords_);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(bits_), pos) &= IOSLongArray_Get(other->bits_, pos);
  }
  if (numWords_ > other->numWords_) {
    JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, other->numWords_, numWords_, 0LL);
  }
}

- (void)andNotWithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other {
  jint pos = JavaLangMath_minWithInt_withInt_(numWords_, ((OrgApacheLuceneUtilLongBitSet *) nil_chk(other))->numWords_);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(bits_), pos) &= ~IOSLongArray_Get(other->bits_, pos);
  }
}

- (jboolean)scanIsEmpty {
  jint count = numWords_;
  for (jint i = 0; i < count; i++) {
    if (IOSLongArray_Get(nil_chk(bits_), i) != 0) return false;
  }
  return true;
}

- (void)flipWithLong:(jlong)startIndex
            withLong:(jlong)endIndex {
  JreAssert(startIndex >= 0 && startIndex < numBits_, @"org/apache/lucene/util/LongBitSet.java:288 condition failed: assert startIndex >= 0 && startIndex < numBits;");
  JreAssert(endIndex >= 0 && endIndex <= numBits_, @"org/apache/lucene/util/LongBitSet.java:289 condition failed: assert endIndex >= 0 && endIndex <= numBits;");
  if (endIndex <= startIndex) {
    return;
  }
  jint startWord = (jint) (JreRShift64(startIndex, 6));
  jint endWord = (jint) (JreRShift64((endIndex - 1), 6));
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) ^= (startmask & endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) ^= startmask;
  for (jint i = startWord + 1; i < endWord; i++) {
    *IOSLongArray_GetRef(bits_, i) = ~IOSLongArray_Get(bits_, i);
  }
  *IOSLongArray_GetRef(bits_, endWord) ^= endmask;
}

- (void)flipWithLong:(jlong)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$J$J", @"index=", index, @" numBits=", numBits_));
  jint wordNum = (jint) (JreRShift64(index, 6));
  jlong bitmask = JreLShift64(1LL, index);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) ^= bitmask;
}

- (void)setWithLong:(jlong)startIndex
           withLong:(jlong)endIndex {
  JreAssert(startIndex >= 0 && startIndex < numBits_, JreStrcat("$J$J", @"startIndex=", startIndex, @", numBits=", numBits_));
  JreAssert(endIndex >= 0 && endIndex <= numBits_, JreStrcat("$J$J", @"endIndex=", endIndex, @", numBits=", numBits_));
  if (endIndex <= startIndex) {
    return;
  }
  jint startWord = (jint) (JreRShift64(startIndex, 6));
  jint endWord = (jint) (JreRShift64((endIndex - 1), 6));
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) |= (startmask & endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) |= startmask;
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, startWord + 1, endWord, -1LL);
  *IOSLongArray_GetRef(bits_, endWord) |= endmask;
}

- (void)clearWithLong:(jlong)startIndex
             withLong:(jlong)endIndex {
  JreAssert(startIndex >= 0 && startIndex < numBits_, JreStrcat("$J$J", @"startIndex=", startIndex, @", numBits=", numBits_));
  JreAssert(endIndex >= 0 && endIndex <= numBits_, JreStrcat("$J$J", @"endIndex=", endIndex, @", numBits=", numBits_));
  if (endIndex <= startIndex) {
    return;
  }
  jint startWord = (jint) (JreRShift64(startIndex, 6));
  jint endWord = (jint) (JreRShift64((endIndex - 1), 6));
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  startmask = ~startmask;
  endmask = ~endmask;
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= (startmask | endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= startmask;
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, startWord + 1, endWord, 0LL);
  *IOSLongArray_GetRef(bits_, endWord) &= endmask;
}

- (OrgApacheLuceneUtilLongBitSet *)java_clone {
  IOSLongArray *bits = [IOSLongArray arrayWithLength:((IOSLongArray *) nil_chk(self->bits_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->bits_, 0, bits, 0, numWords_);
  return create_OrgApacheLuceneUtilLongBitSet_initWithLongArray_withLong_(bits, numBits_);
}

- (jboolean)isEqual:(id)o {
  if (JreObjectEqualsEquals(self, o)) {
    return true;
  }
  if (!([o isKindOfClass:[OrgApacheLuceneUtilLongBitSet class]])) {
    return false;
  }
  OrgApacheLuceneUtilLongBitSet *other = (OrgApacheLuceneUtilLongBitSet *) cast_chk(o, [OrgApacheLuceneUtilLongBitSet class]);
  if (numBits_ != ((OrgApacheLuceneUtilLongBitSet *) nil_chk(other))->numBits_) {
    return false;
  }
  return JavaUtilArrays_equalsWithLongArray_withLongArray_(bits_, other->bits_);
}

- (NSUInteger)hash {
  jlong h = 0;
  for (jint i = numWords_; --i >= 0; ) {
    h ^= IOSLongArray_Get(nil_chk(bits_), i);
    h = (JreLShift64(h, 1)) | (JreURShift64(h, 63));
  }
  return (jint) ((JreRShift64(h, 32)) ^ h) + (jint) 0x98761234;
}

- (void)dealloc {
  RELEASE_(bits_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneUtilLongBitSet;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 19, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilLongBitSet;", 0x1, 20, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(ensureCapacityWithOrgApacheLuceneUtilLongBitSet:withLong:);
  methods[1].selector = @selector(bits2wordsWithLong:);
  methods[2].selector = @selector(initWithLong:);
  methods[3].selector = @selector(initWithLongArray:withLong:);
  methods[4].selector = @selector(verifyGhostBitsClear);
  methods[5].selector = @selector(length);
  methods[6].selector = @selector(getBits);
  methods[7].selector = @selector(cardinality);
  methods[8].selector = @selector(getWithLong:);
  methods[9].selector = @selector(setWithLong:);
  methods[10].selector = @selector(getAndSetWithLong:);
  methods[11].selector = @selector(clearWithLong:);
  methods[12].selector = @selector(getAndClearWithLong:);
  methods[13].selector = @selector(nextSetBitWithLong:);
  methods[14].selector = @selector(prevSetBitWithLong:);
  methods[15].selector = @selector(or__WithOrgApacheLuceneUtilLongBitSet:);
  methods[16].selector = @selector(xor__WithOrgApacheLuceneUtilLongBitSet:);
  methods[17].selector = @selector(intersectsWithOrgApacheLuceneUtilLongBitSet:);
  methods[18].selector = @selector(and__WithOrgApacheLuceneUtilLongBitSet:);
  methods[19].selector = @selector(andNotWithOrgApacheLuceneUtilLongBitSet:);
  methods[20].selector = @selector(scanIsEmpty);
  methods[21].selector = @selector(flipWithLong:withLong:);
  methods[22].selector = @selector(flipWithLong:);
  methods[23].selector = @selector(setWithLong:withLong:);
  methods[24].selector = @selector(clearWithLong:withLong:);
  methods[25].selector = @selector(java_clone);
  methods[26].selector = @selector(isEqual:);
  methods[27].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bits_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numBits_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numWords_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ensureCapacity", "LOrgApacheLuceneUtilLongBitSet;J", "bits2words", "J", "[JJ", "get", "set", "getAndSet", "clear", "getAndClear", "nextSetBit", "prevSetBit", "or", "LOrgApacheLuceneUtilLongBitSet;", "xor", "intersects", "and", "andNot", "flip", "JJ", "clone", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilLongBitSet = { "LongBitSet", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 28, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilLongBitSet;
}

@end

OrgApacheLuceneUtilLongBitSet *OrgApacheLuceneUtilLongBitSet_ensureCapacityWithOrgApacheLuceneUtilLongBitSet_withLong_(OrgApacheLuceneUtilLongBitSet *bits, jlong numBits) {
  OrgApacheLuceneUtilLongBitSet_initialize();
  if (numBits < ((OrgApacheLuceneUtilLongBitSet *) nil_chk(bits))->numBits_) {
    return bits;
  }
  else {
    jint numWords = OrgApacheLuceneUtilLongBitSet_bits2wordsWithLong_(numBits);
    IOSLongArray *arr = [bits getBits];
    if (numWords >= ((IOSLongArray *) nil_chk(arr))->size_) {
      arr = OrgApacheLuceneUtilArrayUtil_growWithLongArray_withInt_(arr, numWords + 1);
    }
    return create_OrgApacheLuceneUtilLongBitSet_initWithLongArray_withLong_(arr, JreLShift64((jlong) ((IOSLongArray *) nil_chk(arr))->size_, 6));
  }
}

jint OrgApacheLuceneUtilLongBitSet_bits2wordsWithLong_(jlong numBits) {
  OrgApacheLuceneUtilLongBitSet_initialize();
  return (jint) (JreRShift64((numBits - 1), 6)) + 1;
}

void OrgApacheLuceneUtilLongBitSet_initWithLong_(OrgApacheLuceneUtilLongBitSet *self, jlong numBits) {
  NSObject_init(self);
  self->numBits_ = numBits;
  JreStrongAssignAndConsume(&self->bits_, [IOSLongArray newArrayWithLength:OrgApacheLuceneUtilLongBitSet_bits2wordsWithLong_(numBits)]);
  self->numWords_ = self->bits_->size_;
}

OrgApacheLuceneUtilLongBitSet *new_OrgApacheLuceneUtilLongBitSet_initWithLong_(jlong numBits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilLongBitSet, initWithLong_, numBits)
}

OrgApacheLuceneUtilLongBitSet *create_OrgApacheLuceneUtilLongBitSet_initWithLong_(jlong numBits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilLongBitSet, initWithLong_, numBits)
}

void OrgApacheLuceneUtilLongBitSet_initWithLongArray_withLong_(OrgApacheLuceneUtilLongBitSet *self, IOSLongArray *storedBits, jlong numBits) {
  NSObject_init(self);
  self->numWords_ = OrgApacheLuceneUtilLongBitSet_bits2wordsWithLong_(numBits);
  if (self->numWords_ > ((IOSLongArray *) nil_chk(storedBits))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$", @"The given long array is too small  to hold ", numBits, @" bits"));
  }
  self->numBits_ = numBits;
  JreStrongAssign(&self->bits_, storedBits);
  JreAssert(OrgApacheLuceneUtilLongBitSet_verifyGhostBitsClear(self), @"org/apache/lucene/util/LongBitSet.java:90 condition failed: assert verifyGhostBitsClear();");
}

OrgApacheLuceneUtilLongBitSet *new_OrgApacheLuceneUtilLongBitSet_initWithLongArray_withLong_(IOSLongArray *storedBits, jlong numBits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilLongBitSet, initWithLongArray_withLong_, storedBits, numBits)
}

OrgApacheLuceneUtilLongBitSet *create_OrgApacheLuceneUtilLongBitSet_initWithLongArray_withLong_(IOSLongArray *storedBits, jlong numBits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilLongBitSet, initWithLongArray_withLong_, storedBits, numBits)
}

jboolean OrgApacheLuceneUtilLongBitSet_verifyGhostBitsClear(OrgApacheLuceneUtilLongBitSet *self) {
  for (jint i = self->numWords_; i < ((IOSLongArray *) nil_chk(self->bits_))->size_; i++) {
    if (IOSLongArray_Get(self->bits_, i) != 0) return false;
  }
  if ((self->numBits_ & (jint) 0x3f) == 0) return true;
  jlong mask = JreLShift64(-1LL, self->numBits_);
  return (IOSLongArray_Get(self->bits_, self->numWords_ - 1) & mask) == 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilLongBitSet)
