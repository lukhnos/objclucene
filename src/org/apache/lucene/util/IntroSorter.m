//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/IntroSorter.java
//

#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/util/IntroSorter.h"
#include "org/apache/lucene/util/Sorter.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/IntroSorter must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneUtilIntroSorter

+ (jint)ceilLog2WithInt:(jint)n {
  return OrgApacheLuceneUtilIntroSorter_ceilLog2WithInt_(n);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilIntroSorter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)sortWithInt:(jint)from
            withInt:(jint)to {
  [self checkRangeWithInt:from withInt:to];
  [self quicksortWithInt:from withInt:to withInt:OrgApacheLuceneUtilIntroSorter_ceilLog2WithInt_(to - from)];
}

- (void)quicksortWithInt:(jint)from
                 withInt:(jint)to
                 withInt:(jint)maxDepth {
  if (to - from < OrgApacheLuceneUtilSorter_THRESHOLD) {
    [self insertionSortWithInt:from withInt:to];
    return;
  }
  else if (--maxDepth < 0) {
    [self heapSortWithInt:from withInt:to];
    return;
  }
  jint mid = JreURShift32((from + to), 1);
  if ([self compareWithInt:from withInt:mid] > 0) {
    [self swapWithInt:from withInt:mid];
  }
  if ([self compareWithInt:mid withInt:to - 1] > 0) {
    [self swapWithInt:mid withInt:to - 1];
    if ([self compareWithInt:from withInt:mid] > 0) {
      [self swapWithInt:from withInt:mid];
    }
  }
  jint left = from + 1;
  jint right = to - 2;
  [self setPivotWithInt:mid];
  for (; ; ) {
    while ([self comparePivotWithInt:right] < 0) {
      --right;
    }
    while (left < right && [self comparePivotWithInt:left] >= 0) {
      ++left;
    }
    if (left < right) {
      [self swapWithInt:left withInt:right];
      --right;
    }
    else {
      break;
    }
  }
  [self quicksortWithInt:from withInt:left + 1 withInt:maxDepth];
  [self quicksortWithInt:left + 1 withInt:to withInt:maxDepth];
}

- (void)setPivotWithInt:(jint)i {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)comparePivotWithInt:(jint)j {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 6, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x404, 7, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(ceilLog2WithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(sortWithInt:withInt:);
  methods[3].selector = @selector(quicksortWithInt:withInt:withInt:);
  methods[4].selector = @selector(setPivotWithInt:);
  methods[5].selector = @selector(comparePivotWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "ceilLog2", "I", "sort", "II", "quicksort", "III", "setPivot", "comparePivot" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIntroSorter = { "IntroSorter", "org.apache.lucene.util", ptrTable, methods, NULL, 7, 0x401, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilIntroSorter;
}

@end

jint OrgApacheLuceneUtilIntroSorter_ceilLog2WithInt_(jint n) {
  OrgApacheLuceneUtilIntroSorter_initialize();
  return JavaLangInteger_SIZE - JavaLangInteger_numberOfLeadingZerosWithInt_(n - 1);
}

void OrgApacheLuceneUtilIntroSorter_init(OrgApacheLuceneUtilIntroSorter *self) {
  OrgApacheLuceneUtilSorter_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIntroSorter)
