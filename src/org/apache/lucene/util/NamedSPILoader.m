//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/NamedSPILoader.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Thread.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/ServiceConfigurationError.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "org/apache/lucene/util/NamedSPILoader.h"
#include "org/apache/lucene/util/SPIClassIterator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/NamedSPILoader must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilNamedSPILoader () {
 @public
  volatile_id services_;
  IOSClass *clazz_;
}

/*!
 @brief Checks whether a character is a letter or digit (ascii) which are defined in the spec.
 */
+ (jboolean)isLetterOrDigitWithChar:(jchar)c;

@end

J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneUtilNamedSPILoader, services_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilNamedSPILoader, clazz_, IOSClass *)

__attribute__((unused)) static jboolean OrgApacheLuceneUtilNamedSPILoader_isLetterOrDigitWithChar_(jchar c);

@interface OrgApacheLuceneUtilNamedSPILoader_NamedSPI : NSObject

@end

@implementation OrgApacheLuceneUtilNamedSPILoader

- (instancetype)initWithIOSClass:(IOSClass *)clazz {
  OrgApacheLuceneUtilNamedSPILoader_initWithIOSClass_(self, clazz);
  return self;
}

- (instancetype)initWithIOSClass:(IOSClass *)clazz
         withJavaLangClassLoader:(JavaLangClassLoader *)classloader {
  OrgApacheLuceneUtilNamedSPILoader_initWithIOSClass_withJavaLangClassLoader_(self, clazz, classloader);
  return self;
}

- (void)reloadWithJavaLangClassLoader:(JavaLangClassLoader *)classloader {
  JavaUtilLinkedHashMap *services = create_JavaUtilLinkedHashMap_initWithJavaUtilMap_(JreLoadVolatileId(&self->services_));
  OrgApacheLuceneUtilSPIClassIterator *loader = OrgApacheLuceneUtilSPIClassIterator_getWithIOSClass_withJavaLangClassLoader_(clazz_, classloader);
  while ([((OrgApacheLuceneUtilSPIClassIterator *) nil_chk(loader)) hasNext]) {
    IOSClass *c = [loader next];
    @try {
      id<OrgApacheLuceneUtilNamedSPILoader_NamedSPI> service = [((IOSClass *) nil_chk(c)) newInstance];
      NSString *name = [((id<OrgApacheLuceneUtilNamedSPILoader_NamedSPI>) nil_chk(service)) getName];
      if (![services containsKeyWithId:name]) {
        OrgApacheLuceneUtilNamedSPILoader_checkServiceNameWithNSString_(name);
        [services putWithId:name withId:service];
      }
    }
    @catch (JavaLangException *e) {
      @throw create_JavaUtilServiceConfigurationError_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Cannot instantiate SPI class: ", [c getName]), e);
    }
  }
  JreVolatileStrongAssign(&self->services_, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(services));
}

+ (void)checkServiceNameWithNSString:(NSString *)name {
  OrgApacheLuceneUtilNamedSPILoader_checkServiceNameWithNSString_(name);
}

+ (jboolean)isLetterOrDigitWithChar:(jchar)c {
  return OrgApacheLuceneUtilNamedSPILoader_isLetterOrDigitWithChar_(c);
}

- (id<OrgApacheLuceneUtilNamedSPILoader_NamedSPI>)lookupWithNSString:(NSString *)name {
  id<OrgApacheLuceneUtilNamedSPILoader_NamedSPI> service = [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&services_))) getWithId:name];
  if (service != nil) return service;
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$$@", @"An SPI class of type ", [((IOSClass *) nil_chk(clazz_)) getName], @" with name '", name, @"' does not exist.  You need to add the corresponding JAR file supporting this SPI to your classpath.  The current classpath supports the following names: ", [self availableServices]));
}

- (id<JavaUtilSet>)availableServices {
  return [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&services_))) keySet];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&services_))) values])) iterator];
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (void)__javaClone:(OrgApacheLuceneUtilNamedSPILoader *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&services_, &original->services_);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  JreReleaseVolatile(&services_);
  RELEASE_(clazz_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilNamedSPILoader_NamedSPI;", 0x1, 10, 7, -1, 11, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:);
  methods[1].selector = @selector(initWithIOSClass:withJavaLangClassLoader:);
  methods[2].selector = @selector(reloadWithJavaLangClassLoader:);
  methods[3].selector = @selector(checkServiceNameWithNSString:);
  methods[4].selector = @selector(isLetterOrDigitWithChar:);
  methods[5].selector = @selector(lookupWithNSString:);
  methods[6].selector = @selector(availableServices);
  methods[7].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "services_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x42, -1, -1, 14, -1 },
    { "clazz_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "(Ljava/lang/Class<TS;>;)V", "LIOSClass;LJavaLangClassLoader;", "(Ljava/lang/Class<TS;>;Ljava/lang/ClassLoader;)V", "reload", "LJavaLangClassLoader;", "checkServiceName", "LNSString;", "isLetterOrDigit", "C", "lookup", "(Ljava/lang/String;)TS;", "()Ljava/util/Set<Ljava/lang/String;>;", "()Ljava/util/Iterator<TS;>;", "Ljava/util/Map<Ljava/lang/String;TS;>;", "Ljava/lang/Class<TS;>;", "LOrgApacheLuceneUtilNamedSPILoader_NamedSPI;", "<S::Lorg/apache/lucene/util/NamedSPILoader$NamedSPI;>Ljava/lang/Object;Ljava/lang/Iterable<TS;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilNamedSPILoader = { "NamedSPILoader", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 8, 2, -1, 16, -1, 17, -1 };
  return &_OrgApacheLuceneUtilNamedSPILoader;
}

@end

void OrgApacheLuceneUtilNamedSPILoader_initWithIOSClass_(OrgApacheLuceneUtilNamedSPILoader *self, IOSClass *clazz) {
  OrgApacheLuceneUtilNamedSPILoader_initWithIOSClass_withJavaLangClassLoader_(self, clazz, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader]);
}

OrgApacheLuceneUtilNamedSPILoader *new_OrgApacheLuceneUtilNamedSPILoader_initWithIOSClass_(IOSClass *clazz) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilNamedSPILoader, initWithIOSClass_, clazz)
}

OrgApacheLuceneUtilNamedSPILoader *create_OrgApacheLuceneUtilNamedSPILoader_initWithIOSClass_(IOSClass *clazz) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilNamedSPILoader, initWithIOSClass_, clazz)
}

void OrgApacheLuceneUtilNamedSPILoader_initWithIOSClass_withJavaLangClassLoader_(OrgApacheLuceneUtilNamedSPILoader *self, IOSClass *clazz, JavaLangClassLoader *classloader) {
  NSObject_init(self);
  JreVolatileStrongAssign(&self->services_, JavaUtilCollections_emptyMap());
  JreStrongAssign(&self->clazz_, clazz);
  JavaLangClassLoader *clazzClassloader = [((IOSClass *) nil_chk(clazz)) getClassLoader];
  if (clazzClassloader != nil && !OrgApacheLuceneUtilSPIClassIterator_isParentClassLoaderWithJavaLangClassLoader_withJavaLangClassLoader_(clazzClassloader, classloader)) {
    [self reloadWithJavaLangClassLoader:clazzClassloader];
  }
  [self reloadWithJavaLangClassLoader:classloader];
}

OrgApacheLuceneUtilNamedSPILoader *new_OrgApacheLuceneUtilNamedSPILoader_initWithIOSClass_withJavaLangClassLoader_(IOSClass *clazz, JavaLangClassLoader *classloader) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilNamedSPILoader, initWithIOSClass_withJavaLangClassLoader_, clazz, classloader)
}

OrgApacheLuceneUtilNamedSPILoader *create_OrgApacheLuceneUtilNamedSPILoader_initWithIOSClass_withJavaLangClassLoader_(IOSClass *clazz, JavaLangClassLoader *classloader) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilNamedSPILoader, initWithIOSClass_withJavaLangClassLoader_, clazz, classloader)
}

void OrgApacheLuceneUtilNamedSPILoader_checkServiceNameWithNSString_(NSString *name) {
  OrgApacheLuceneUtilNamedSPILoader_initialize();
  if ([((NSString *) nil_chk(name)) java_length] >= 128) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Illegal service name: '", name, @"' is too long (must be < 128 chars)."));
  }
  for (jint i = 0, len = [name java_length]; i < len; i++) {
    jchar c = [name charAtWithInt:i];
    if (!OrgApacheLuceneUtilNamedSPILoader_isLetterOrDigitWithChar_(c)) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Illegal service name: '", name, @"' must be simple ascii alphanumeric."));
    }
  }
}

jboolean OrgApacheLuceneUtilNamedSPILoader_isLetterOrDigitWithChar_(jchar c) {
  OrgApacheLuceneUtilNamedSPILoader_initialize();
  return ('a' <= c && c <= 'z') || ('A' <= c && c <= 'Z') || ('0' <= c && c <= '9');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilNamedSPILoader)

@implementation OrgApacheLuceneUtilNamedSPILoader_NamedSPI

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilNamedSPILoader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilNamedSPILoader_NamedSPI = { "NamedSPI", "org.apache.lucene.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilNamedSPILoader_NamedSPI;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilNamedSPILoader_NamedSPI)
