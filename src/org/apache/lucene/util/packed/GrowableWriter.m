//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/GrowableWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/packed/GrowableWriter.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/GrowableWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilPackedGrowableWriter () {
 @public
  jlong currentMask_;
  OrgApacheLuceneUtilPackedPackedInts_Mutable *current_;
  jfloat acceptableOverheadRatio_;
}

+ (jlong)maskWithInt:(jint)bitsPerValue;

- (void)ensureCapacityWithLong:(jlong)value;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilPackedGrowableWriter, current_, OrgApacheLuceneUtilPackedPackedInts_Mutable *)

__attribute__((unused)) static jlong OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_(jint bitsPerValue);

__attribute__((unused)) static void OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(OrgApacheLuceneUtilPackedGrowableWriter *self, jlong value);

@implementation OrgApacheLuceneUtilPackedGrowableWriter

- (instancetype)initWithInt:(jint)startBitsPerValue
                    withInt:(jint)valueCount
                  withFloat:(jfloat)acceptableOverheadRatio {
  OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(self, startBitsPerValue, valueCount, acceptableOverheadRatio);
  return self;
}

+ (jlong)maskWithInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_(bitsPerValue);
}

- (jlong)getWithInt:(jint)index {
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) getWithInt:index];
}

- (jint)size {
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) size];
}

- (jint)getBitsPerValue {
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) getBitsPerValue];
}

- (OrgApacheLuceneUtilPackedPackedInts_Mutable *)getMutable {
  return current_;
}

- (void)ensureCapacityWithLong:(jlong)value {
  OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(self, value);
}

- (void)setWithInt:(jint)index
          withLong:(jlong)value {
  OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(self, value);
  [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) setWithInt:index withLong:value];
}

- (void)clear {
  [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) clear];
}

- (OrgApacheLuceneUtilPackedGrowableWriter *)resizeWithInt:(jint)newSize {
  OrgApacheLuceneUtilPackedGrowableWriter *next = create_OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_([self getBitsPerValue], newSize, acceptableOverheadRatio_);
  jint limit = JavaLangMath_minWithInt_withInt_([self size], newSize);
  OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withInt_(current_, 0, next, 0, limit, OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE);
  return next;
}

- (jint)getWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) getWithInt:index withLongArray:arr withInt:off withInt:len];
}

- (jint)setWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  jlong max = 0;
  for (jint i = off, end = off + len; i < end; ++i) {
    max |= IOSLongArray_Get(nil_chk(arr), i);
  }
  OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(self, max);
  return [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) setWithInt:index withLongArray:arr withInt:off withInt:len];
}

- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
           withLong:(jlong)val {
  OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(self, val);
  [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) fillWithInt:fromIndex withInt:toIndex withLong:val];
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilRamUsageEstimator_alignObjectSizeWithLong_(JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_HEADER) + JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF) + OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_LONG + OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_FLOAT) + [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) ramBytesUsed];
}

- (void)saveWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(current_)) saveWithOrgApacheLuceneStoreDataOutput:outArg];
}

- (void)dealloc {
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Mutable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedGrowableWriter;", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 14, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withFloat:);
  methods[1].selector = @selector(maskWithInt:);
  methods[2].selector = @selector(getWithInt:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(getBitsPerValue);
  methods[5].selector = @selector(getMutable);
  methods[6].selector = @selector(ensureCapacityWithLong:);
  methods[7].selector = @selector(setWithInt:withLong:);
  methods[8].selector = @selector(clear);
  methods[9].selector = @selector(resizeWithInt:);
  methods[10].selector = @selector(getWithInt:withLongArray:withInt:withInt:);
  methods[11].selector = @selector(setWithInt:withLongArray:withInt:withInt:);
  methods[12].selector = @selector(fillWithInt:withInt:withLong:);
  methods[13].selector = @selector(ramBytesUsed);
  methods[14].selector = @selector(saveWithOrgApacheLuceneStoreDataOutput:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "currentMask_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "current_", "LOrgApacheLuceneUtilPackedPackedInts_Mutable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "acceptableOverheadRatio_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIF", "mask", "I", "get", "ensureCapacity", "J", "set", "IJ", "resize", "I[JII", "fill", "IIJ", "save", "LOrgApacheLuceneStoreDataOutput;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedGrowableWriter = { "GrowableWriter", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x1, 15, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedGrowableWriter;
}

@end

void OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(OrgApacheLuceneUtilPackedGrowableWriter *self, jint startBitsPerValue, jint valueCount, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedInts_Mutable_init(self);
  self->acceptableOverheadRatio_ = acceptableOverheadRatio;
  JreStrongAssign(&self->current_, OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(valueCount, startBitsPerValue, self->acceptableOverheadRatio_));
  self->currentMask_ = OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_([((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(self->current_)) getBitsPerValue]);
}

OrgApacheLuceneUtilPackedGrowableWriter *new_OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(jint startBitsPerValue, jint valueCount, jfloat acceptableOverheadRatio) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedGrowableWriter, initWithInt_withInt_withFloat_, startBitsPerValue, valueCount, acceptableOverheadRatio)
}

OrgApacheLuceneUtilPackedGrowableWriter *create_OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(jint startBitsPerValue, jint valueCount, jfloat acceptableOverheadRatio) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedGrowableWriter, initWithInt_withInt_withFloat_, startBitsPerValue, valueCount, acceptableOverheadRatio)
}

jlong OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_(jint bitsPerValue) {
  OrgApacheLuceneUtilPackedGrowableWriter_initialize();
  return bitsPerValue == 64 ? ~0LL : OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(bitsPerValue);
}

void OrgApacheLuceneUtilPackedGrowableWriter_ensureCapacityWithLong_(OrgApacheLuceneUtilPackedGrowableWriter *self, jlong value) {
  if ((value & self->currentMask_) == value) {
    return;
  }
  jint bitsRequired = OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(value);
  JreAssert(bitsRequired > [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(self->current_)) getBitsPerValue], @"org/apache/lucene/util/packed/GrowableWriter.java:78 condition failed: assert bitsRequired > current.getBitsPerValue();");
  jint valueCount = [self size];
  OrgApacheLuceneUtilPackedPackedInts_Mutable *next = OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(valueCount, bitsRequired, self->acceptableOverheadRatio_);
  OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withInt_(self->current_, 0, next, 0, valueCount, OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE);
  JreStrongAssign(&self->current_, next);
  self->currentMask_ = OrgApacheLuceneUtilPackedGrowableWriter_maskWithInt_([((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(self->current_)) getBitsPerValue]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedGrowableWriter)
