//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/PackedWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/packed/BulkOperation.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/apache/lucene/util/packed/PackedWriter.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/PackedWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilPackedPackedWriter ()

- (void)flush;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedWriter_flush(OrgApacheLuceneUtilPackedPackedWriter *self);

@implementation OrgApacheLuceneUtilPackedPackedWriter

- (instancetype)initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                              withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                                                         withInt:(jint)valueCount
                                                                         withInt:(jint)bitsPerValue
                                                                         withInt:(jint)mem {
  OrgApacheLuceneUtilPackedPackedWriter_initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format_withOrgApacheLuceneStoreDataOutput_withInt_withInt_withInt_(self, format, outArg, valueCount, bitsPerValue, mem);
  return self;
}

- (OrgApacheLuceneUtilPackedPackedInts_Format *)getFormat {
  return format_;
}

- (void)addWithLong:(jlong)v {
  JreAssert(OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(v) <= bitsPerValue_, @"org/apache/lucene/util/packed/PackedWriter.java:59 condition failed: assert PackedInts.unsignedBitsRequired(v) <= bitsPerValue;");
  JreAssert(!finished_, @"org/apache/lucene/util/packed/PackedWriter.java:60 condition failed: assert !finished;");
  if (valueCount_ != -1 && written_ >= valueCount_) {
    @throw create_JavaIoEOFException_initWithNSString_(@"Writing past end of stream");
  }
  *IOSLongArray_GetRef(nil_chk(nextValues_), off_++) = v;
  if (off_ == nextValues_->size_) {
    OrgApacheLuceneUtilPackedPackedWriter_flush(self);
  }
  ++written_;
}

- (void)finish {
  JreAssert(!finished_, @"org/apache/lucene/util/packed/PackedWriter.java:73 condition failed: assert !finished;");
  if (valueCount_ != -1) {
    while (written_ < valueCount_) {
      [self addWithLong:0LL];
    }
  }
  OrgApacheLuceneUtilPackedPackedWriter_flush(self);
  finished_ = true;
}

- (void)flush {
  OrgApacheLuceneUtilPackedPackedWriter_flush(self);
}

- (jint)ord {
  return written_ - 1;
}

- (void)dealloc {
  RELEASE_(format_);
  RELEASE_(encoder_);
  RELEASE_(nextBlocks_);
  RELEASE_(nextValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Format;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format:withOrgApacheLuceneStoreDataOutput:withInt:withInt:withInt:);
  methods[1].selector = @selector(getFormat);
  methods[2].selector = @selector(addWithLong:);
  methods[3].selector = @selector(finish);
  methods[4].selector = @selector(flush);
  methods[5].selector = @selector(ord);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "finished_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "format_", "LOrgApacheLuceneUtilPackedPackedInts_Format;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "encoder_", "LOrgApacheLuceneUtilPackedBulkOperation;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nextBlocks_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nextValues_", "[J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "iterations_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "off_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "written_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilPackedPackedInts_Format;LOrgApacheLuceneStoreDataOutput;III", "add", "J", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedWriter = { "PackedWriter", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x10, 6, 8, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedWriter;
}

@end

void OrgApacheLuceneUtilPackedPackedWriter_initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format_withOrgApacheLuceneStoreDataOutput_withInt_withInt_withInt_(OrgApacheLuceneUtilPackedPackedWriter *self, OrgApacheLuceneUtilPackedPackedInts_Format *format, OrgApacheLuceneStoreDataOutput *outArg, jint valueCount, jint bitsPerValue, jint mem) {
  OrgApacheLuceneUtilPackedPackedInts_Writer_initWithOrgApacheLuceneStoreDataOutput_withInt_withInt_(self, outArg, valueCount, bitsPerValue);
  JreStrongAssign(&self->format_, format);
  JreStrongAssign(&self->encoder_, OrgApacheLuceneUtilPackedBulkOperation_ofWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(format, bitsPerValue));
  self->iterations_ = [((OrgApacheLuceneUtilPackedBulkOperation *) nil_chk(self->encoder_)) computeIterationsWithInt:valueCount withInt:mem];
  JreStrongAssignAndConsume(&self->nextBlocks_, [IOSByteArray newArrayWithLength:self->iterations_ * [self->encoder_ byteBlockCount]]);
  JreStrongAssignAndConsume(&self->nextValues_, [IOSLongArray newArrayWithLength:self->iterations_ * [self->encoder_ byteValueCount]]);
  self->off_ = 0;
  self->written_ = 0;
  self->finished_ = false;
}

OrgApacheLuceneUtilPackedPackedWriter *new_OrgApacheLuceneUtilPackedPackedWriter_initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format_withOrgApacheLuceneStoreDataOutput_withInt_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *format, OrgApacheLuceneStoreDataOutput *outArg, jint valueCount, jint bitsPerValue, jint mem) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPackedWriter, initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format_withOrgApacheLuceneStoreDataOutput_withInt_withInt_withInt_, format, outArg, valueCount, bitsPerValue, mem)
}

OrgApacheLuceneUtilPackedPackedWriter *create_OrgApacheLuceneUtilPackedPackedWriter_initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format_withOrgApacheLuceneStoreDataOutput_withInt_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *format, OrgApacheLuceneStoreDataOutput *outArg, jint valueCount, jint bitsPerValue, jint mem) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPackedWriter, initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format_withOrgApacheLuceneStoreDataOutput_withInt_withInt_withInt_, format, outArg, valueCount, bitsPerValue, mem)
}

void OrgApacheLuceneUtilPackedPackedWriter_flush(OrgApacheLuceneUtilPackedPackedWriter *self) {
  [((OrgApacheLuceneUtilPackedBulkOperation *) nil_chk(self->encoder_)) encodeWithLongArray:self->nextValues_ withInt:0 withByteArray:self->nextBlocks_ withInt:0 withInt:self->iterations_];
  jint blockCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(self->format_)) byteCountWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT withInt:self->off_ withInt:self->bitsPerValue_];
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(self->out_)) writeBytesWithByteArray:self->nextBlocks_ withInt:blockCount];
  JavaUtilArrays_fillWithLongArray_withLong_(self->nextValues_, 0LL);
  self->off_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedWriter)
