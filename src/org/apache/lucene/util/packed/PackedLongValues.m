//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/PackedLongValues.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/LongValues.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/packed/DeltaPackedLongValues.h"
#include "org/apache/lucene/util/packed/MonotonicLongValues.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/apache/lucene/util/packed/PackedLongValues.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/PackedLongValues must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilPackedPackedLongValues () {
 @public
  jlong size_;
  jlong ramBytesUsed_;
}

@end

inline jlong OrgApacheLuceneUtilPackedPackedLongValues_get_BASE_RAM_BYTES_USED(void);
static jlong OrgApacheLuceneUtilPackedPackedLongValues_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilPackedPackedLongValues, BASE_RAM_BYTES_USED, jlong)

__attribute__((unused)) static jlong OrgApacheLuceneUtilPackedPackedLongValues_size(OrgApacheLuceneUtilPackedPackedLongValues *self);

@interface OrgApacheLuceneUtilPackedPackedLongValues_Iterator () {
 @public
  OrgApacheLuceneUtilPackedPackedLongValues *this$0_;
}

- (void)fillBlock;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedLongValues_Iterator_fillBlock(OrgApacheLuceneUtilPackedPackedLongValues_Iterator *self);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilPackedPackedLongValues_Iterator_hasNext(OrgApacheLuceneUtilPackedPackedLongValues_Iterator *self);

@interface OrgApacheLuceneUtilPackedPackedLongValues_Builder ()

- (void)pack;

@end

inline jint OrgApacheLuceneUtilPackedPackedLongValues_Builder_get_INITIAL_PAGE_COUNT(void);
#define OrgApacheLuceneUtilPackedPackedLongValues_Builder_INITIAL_PAGE_COUNT 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilPackedPackedLongValues_Builder, INITIAL_PAGE_COUNT, jint)

inline jlong OrgApacheLuceneUtilPackedPackedLongValues_Builder_get_BASE_RAM_BYTES_USED(void);
static jlong OrgApacheLuceneUtilPackedPackedLongValues_Builder_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilPackedPackedLongValues_Builder, BASE_RAM_BYTES_USED, jlong)

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedLongValues_Builder_finish(OrgApacheLuceneUtilPackedPackedLongValues_Builder *self);

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedLongValues_Builder_pack(OrgApacheLuceneUtilPackedPackedLongValues_Builder *self);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilPackedPackedLongValues)

@implementation OrgApacheLuceneUtilPackedPackedLongValues

+ (jint)DEFAULT_PAGE_SIZE {
  return OrgApacheLuceneUtilPackedPackedLongValues_DEFAULT_PAGE_SIZE;
}

+ (jint)MIN_PAGE_SIZE {
  return OrgApacheLuceneUtilPackedPackedLongValues_MIN_PAGE_SIZE;
}

+ (jint)MAX_PAGE_SIZE {
  return OrgApacheLuceneUtilPackedPackedLongValues_MAX_PAGE_SIZE;
}

+ (OrgApacheLuceneUtilPackedPackedLongValues_Builder *)packedBuilderWithInt:(jint)pageSize
                                                                  withFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedLongValues_packedBuilderWithInt_withFloat_(pageSize, acceptableOverheadRatio);
}

+ (OrgApacheLuceneUtilPackedPackedLongValues_Builder *)packedBuilderWithFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedLongValues_packedBuilderWithFloat_(acceptableOverheadRatio);
}

+ (OrgApacheLuceneUtilPackedPackedLongValues_Builder *)deltaPackedBuilderWithInt:(jint)pageSize
                                                                       withFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedLongValues_deltaPackedBuilderWithInt_withFloat_(pageSize, acceptableOverheadRatio);
}

+ (OrgApacheLuceneUtilPackedPackedLongValues_Builder *)deltaPackedBuilderWithFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedLongValues_deltaPackedBuilderWithFloat_(acceptableOverheadRatio);
}

+ (OrgApacheLuceneUtilPackedPackedLongValues_Builder *)monotonicBuilderWithInt:(jint)pageSize
                                                                     withFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedLongValues_monotonicBuilderWithInt_withFloat_(pageSize, acceptableOverheadRatio);
}

+ (OrgApacheLuceneUtilPackedPackedLongValues_Builder *)monotonicBuilderWithFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedLongValues_monotonicBuilderWithFloat_(acceptableOverheadRatio);
}

- (instancetype)initWithInt:(jint)pageShift
                    withInt:(jint)pageMask
withOrgApacheLuceneUtilPackedPackedInts_ReaderArray:(IOSObjectArray *)values
                   withLong:(jlong)size
                   withLong:(jlong)ramBytesUsed {
  OrgApacheLuceneUtilPackedPackedLongValues_initWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_ReaderArray_withLong_withLong_(self, pageShift, pageMask, values, size, ramBytesUsed);
  return self;
}

- (jlong)size {
  return OrgApacheLuceneUtilPackedPackedLongValues_size(self);
}

- (jint)decodeBlockWithInt:(jint)block
             withLongArray:(IOSLongArray *)dest {
  OrgApacheLuceneUtilPackedPackedInts_Reader *vals = IOSObjectArray_Get(nil_chk(values_), block);
  jint size = [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(vals)) size];
  for (jint k = 0; k < size; ) {
    k += [vals getWithInt:k withLongArray:dest withInt:k withInt:size - k];
  }
  return size;
}

- (jlong)getWithInt:(jint)block
            withInt:(jint)element {
  return [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(IOSObjectArray_Get(nil_chk(values_), block))) getWithInt:element];
}

- (jlong)getWithLong:(jlong)index {
  JreAssert(index >= 0 && index < OrgApacheLuceneUtilPackedPackedLongValues_size(self), @"org/apache/lucene/util/packed/PackedLongValues.java:109 condition failed: assert index >= 0 && index < size();");
  jint block = (jint) (JreRShift64(index, pageShift_));
  jint element = (jint) (index & pageMask_);
  return [self getWithInt:block withInt:element];
}

- (jlong)ramBytesUsed {
  return ramBytesUsed_;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (OrgApacheLuceneUtilPackedPackedLongValues_Iterator *)iterator {
  return create_OrgApacheLuceneUtilPackedPackedLongValues_Iterator_initWithOrgApacheLuceneUtilPackedPackedLongValues_(self);
}

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneUtilPackedPackedLongValues_Builder;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedLongValues_Builder;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedLongValues_Builder;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedLongValues_Builder;", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedLongValues_Builder;", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedLongValues_Builder;", 0x9, 4, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x11, 8, 10, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedLongValues_Iterator;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(packedBuilderWithInt:withFloat:);
  methods[1].selector = @selector(packedBuilderWithFloat:);
  methods[2].selector = @selector(deltaPackedBuilderWithInt:withFloat:);
  methods[3].selector = @selector(deltaPackedBuilderWithFloat:);
  methods[4].selector = @selector(monotonicBuilderWithInt:withFloat:);
  methods[5].selector = @selector(monotonicBuilderWithFloat:);
  methods[6].selector = @selector(initWithInt:withInt:withOrgApacheLuceneUtilPackedPackedInts_ReaderArray:withLong:withLong:);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(decodeBlockWithInt:withLongArray:);
  methods[9].selector = @selector(getWithInt:withInt:);
  methods[10].selector = @selector(getWithLong:);
  methods[11].selector = @selector(ramBytesUsed);
  methods[12].selector = @selector(getChildResources);
  methods[13].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED", "J", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "DEFAULT_PAGE_SIZE", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPackedLongValues_DEFAULT_PAGE_SIZE, 0x18, -1, -1, -1, -1 },
    { "MIN_PAGE_SIZE", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPackedLongValues_MIN_PAGE_SIZE, 0x18, -1, -1, -1, -1 },
    { "MAX_PAGE_SIZE", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPackedLongValues_MAX_PAGE_SIZE, 0x18, -1, -1, -1, -1 },
    { "values_", "[LOrgApacheLuceneUtilPackedPackedInts_Reader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "pageShift_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "pageMask_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ramBytesUsed_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "packedBuilder", "IF", "F", "deltaPackedBuilder", "monotonicBuilder", "II[LOrgApacheLuceneUtilPackedPackedInts_Reader;JJ", "decodeBlock", "I[J", "get", "II", "J", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", &OrgApacheLuceneUtilPackedPackedLongValues_BASE_RAM_BYTES_USED, "LOrgApacheLuceneUtilPackedPackedLongValues_Iterator;LOrgApacheLuceneUtilPackedPackedLongValues_Builder;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedLongValues = { "PackedLongValues", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x1, 14, 9, -1, 13, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedLongValues;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilPackedPackedLongValues class]) {
    OrgApacheLuceneUtilPackedPackedLongValues_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilPackedPackedLongValues_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilPackedPackedLongValues)
  }
}

@end

OrgApacheLuceneUtilPackedPackedLongValues_Builder *OrgApacheLuceneUtilPackedPackedLongValues_packedBuilderWithInt_withFloat_(jint pageSize, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedLongValues_initialize();
  return create_OrgApacheLuceneUtilPackedPackedLongValues_Builder_initWithInt_withFloat_(pageSize, acceptableOverheadRatio);
}

OrgApacheLuceneUtilPackedPackedLongValues_Builder *OrgApacheLuceneUtilPackedPackedLongValues_packedBuilderWithFloat_(jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedLongValues_initialize();
  return OrgApacheLuceneUtilPackedPackedLongValues_packedBuilderWithInt_withFloat_(OrgApacheLuceneUtilPackedPackedLongValues_DEFAULT_PAGE_SIZE, acceptableOverheadRatio);
}

OrgApacheLuceneUtilPackedPackedLongValues_Builder *OrgApacheLuceneUtilPackedPackedLongValues_deltaPackedBuilderWithInt_withFloat_(jint pageSize, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedLongValues_initialize();
  return create_OrgApacheLuceneUtilPackedDeltaPackedLongValues_Builder_initWithInt_withFloat_(pageSize, acceptableOverheadRatio);
}

OrgApacheLuceneUtilPackedPackedLongValues_Builder *OrgApacheLuceneUtilPackedPackedLongValues_deltaPackedBuilderWithFloat_(jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedLongValues_initialize();
  return OrgApacheLuceneUtilPackedPackedLongValues_deltaPackedBuilderWithInt_withFloat_(OrgApacheLuceneUtilPackedPackedLongValues_DEFAULT_PAGE_SIZE, acceptableOverheadRatio);
}

OrgApacheLuceneUtilPackedPackedLongValues_Builder *OrgApacheLuceneUtilPackedPackedLongValues_monotonicBuilderWithInt_withFloat_(jint pageSize, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedLongValues_initialize();
  return create_OrgApacheLuceneUtilPackedMonotonicLongValues_Builder_initWithInt_withFloat_(pageSize, acceptableOverheadRatio);
}

OrgApacheLuceneUtilPackedPackedLongValues_Builder *OrgApacheLuceneUtilPackedPackedLongValues_monotonicBuilderWithFloat_(jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedLongValues_initialize();
  return OrgApacheLuceneUtilPackedPackedLongValues_monotonicBuilderWithInt_withFloat_(OrgApacheLuceneUtilPackedPackedLongValues_DEFAULT_PAGE_SIZE, acceptableOverheadRatio);
}

void OrgApacheLuceneUtilPackedPackedLongValues_initWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_ReaderArray_withLong_withLong_(OrgApacheLuceneUtilPackedPackedLongValues *self, jint pageShift, jint pageMask, IOSObjectArray *values, jlong size, jlong ramBytesUsed) {
  OrgApacheLuceneUtilLongValues_init(self);
  self->pageShift_ = pageShift;
  self->pageMask_ = pageMask;
  JreStrongAssign(&self->values_, values);
  self->size_ = size;
  self->ramBytesUsed_ = ramBytesUsed;
}

OrgApacheLuceneUtilPackedPackedLongValues *new_OrgApacheLuceneUtilPackedPackedLongValues_initWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_ReaderArray_withLong_withLong_(jint pageShift, jint pageMask, IOSObjectArray *values, jlong size, jlong ramBytesUsed) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPackedLongValues, initWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_ReaderArray_withLong_withLong_, pageShift, pageMask, values, size, ramBytesUsed)
}

OrgApacheLuceneUtilPackedPackedLongValues *create_OrgApacheLuceneUtilPackedPackedLongValues_initWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_ReaderArray_withLong_withLong_(jint pageShift, jint pageMask, IOSObjectArray *values, jlong size, jlong ramBytesUsed) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPackedLongValues, initWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_ReaderArray_withLong_withLong_, pageShift, pageMask, values, size, ramBytesUsed)
}

jlong OrgApacheLuceneUtilPackedPackedLongValues_size(OrgApacheLuceneUtilPackedPackedLongValues *self) {
  return self->size_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedLongValues)

@implementation OrgApacheLuceneUtilPackedPackedLongValues_Iterator

- (instancetype)initWithOrgApacheLuceneUtilPackedPackedLongValues:(OrgApacheLuceneUtilPackedPackedLongValues *)outer$ {
  OrgApacheLuceneUtilPackedPackedLongValues_Iterator_initWithOrgApacheLuceneUtilPackedPackedLongValues_(self, outer$);
  return self;
}

- (void)fillBlock {
  OrgApacheLuceneUtilPackedPackedLongValues_Iterator_fillBlock(self);
}

- (jboolean)hasNext {
  return OrgApacheLuceneUtilPackedPackedLongValues_Iterator_hasNext(self);
}

- (jlong)next {
  JreAssert(OrgApacheLuceneUtilPackedPackedLongValues_Iterator_hasNext(self), @"org/apache/lucene/util/packed/PackedLongValues.java:159 condition failed: assert hasNext();");
  jlong result = IOSLongArray_Get(nil_chk(currentValues_), pOff_++);
  if (pOff_ == currentCount_) {
    vOff_ += 1;
    pOff_ = 0;
    OrgApacheLuceneUtilPackedPackedLongValues_Iterator_fillBlock(self);
  }
  return result;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(currentValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilPackedPackedLongValues:);
  methods[1].selector = @selector(fillBlock);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneUtilPackedPackedLongValues;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "currentValues_", "[J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "vOff_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pOff_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilPackedPackedLongValues;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedLongValues_Iterator = { "Iterator", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x11, 4, 5, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedLongValues_Iterator;
}

@end

void OrgApacheLuceneUtilPackedPackedLongValues_Iterator_initWithOrgApacheLuceneUtilPackedPackedLongValues_(OrgApacheLuceneUtilPackedPackedLongValues_Iterator *self, OrgApacheLuceneUtilPackedPackedLongValues *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->currentValues_, [IOSLongArray newArrayWithLength:outer$->pageMask_ + 1]);
  self->vOff_ = self->pOff_ = 0;
  OrgApacheLuceneUtilPackedPackedLongValues_Iterator_fillBlock(self);
}

OrgApacheLuceneUtilPackedPackedLongValues_Iterator *new_OrgApacheLuceneUtilPackedPackedLongValues_Iterator_initWithOrgApacheLuceneUtilPackedPackedLongValues_(OrgApacheLuceneUtilPackedPackedLongValues *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPackedLongValues_Iterator, initWithOrgApacheLuceneUtilPackedPackedLongValues_, outer$)
}

OrgApacheLuceneUtilPackedPackedLongValues_Iterator *create_OrgApacheLuceneUtilPackedPackedLongValues_Iterator_initWithOrgApacheLuceneUtilPackedPackedLongValues_(OrgApacheLuceneUtilPackedPackedLongValues *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPackedLongValues_Iterator, initWithOrgApacheLuceneUtilPackedPackedLongValues_, outer$)
}

void OrgApacheLuceneUtilPackedPackedLongValues_Iterator_fillBlock(OrgApacheLuceneUtilPackedPackedLongValues_Iterator *self) {
  if (self->vOff_ == ((IOSObjectArray *) nil_chk(self->this$0_->values_))->size_) {
    self->currentCount_ = 0;
  }
  else {
    self->currentCount_ = [self->this$0_ decodeBlockWithInt:self->vOff_ withLongArray:self->currentValues_];
    JreAssert(self->currentCount_ > 0, @"org/apache/lucene/util/packed/PackedLongValues.java:148 condition failed: assert currentCount > 0;");
  }
}

jboolean OrgApacheLuceneUtilPackedPackedLongValues_Iterator_hasNext(OrgApacheLuceneUtilPackedPackedLongValues_Iterator *self) {
  return self->pOff_ < self->currentCount_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedLongValues_Iterator)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilPackedPackedLongValues_Builder)

@implementation OrgApacheLuceneUtilPackedPackedLongValues_Builder

- (instancetype)initWithInt:(jint)pageSize
                  withFloat:(jfloat)acceptableOverheadRatio {
  OrgApacheLuceneUtilPackedPackedLongValues_Builder_initWithInt_withFloat_(self, pageSize, acceptableOverheadRatio);
  return self;
}

- (OrgApacheLuceneUtilPackedPackedLongValues *)build {
  OrgApacheLuceneUtilPackedPackedLongValues_Builder_finish(self);
  JreStrongAssign(&pending_, nil);
  IOSObjectArray *values = JavaUtilArrays_copyOfWithNSObjectArray_withInt_(self->values_, valuesOff_);
  jlong ramBytesUsed = JreLoadStatic(OrgApacheLuceneUtilPackedPackedLongValues, BASE_RAM_BYTES_USED) + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithOrgApacheLuceneUtilAccountableArray_(values);
  return create_OrgApacheLuceneUtilPackedPackedLongValues_initWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_ReaderArray_withLong_withLong_(pageShift_, pageMask_, values, size_, ramBytesUsed);
}

- (jlong)baseRamBytesUsed {
  return OrgApacheLuceneUtilPackedPackedLongValues_Builder_BASE_RAM_BYTES_USED;
}

- (jlong)ramBytesUsed {
  return ramBytesUsed_;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (jlong)size {
  return size_;
}

- (OrgApacheLuceneUtilPackedPackedLongValues_Builder *)addWithLong:(jlong)l {
  if (pending_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot be reused after build()");
  }
  if (pendingOff_ == pending_->size_) {
    if (((IOSObjectArray *) nil_chk(values_))->size_ == valuesOff_) {
      jint newLength = OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(valuesOff_ + 1, 8);
      [self growWithInt:newLength];
    }
    OrgApacheLuceneUtilPackedPackedLongValues_Builder_pack(self);
  }
  *IOSLongArray_GetRef(nil_chk(pending_), pendingOff_++) = l;
  size_ += 1;
  return self;
}

- (void)finish {
  OrgApacheLuceneUtilPackedPackedLongValues_Builder_finish(self);
}

- (void)pack {
  OrgApacheLuceneUtilPackedPackedLongValues_Builder_pack(self);
}

- (void)packWithLongArray:(IOSLongArray *)values
                  withInt:(jint)numValues
                  withInt:(jint)block
                withFloat:(jfloat)acceptableOverheadRatio {
  JreAssert(numValues > 0, @"org/apache/lucene/util/packed/PackedLongValues.java:264 condition failed: assert numValues > 0;");
  jlong minValue = IOSLongArray_Get(nil_chk(values), 0);
  jlong maxValue = IOSLongArray_Get(values, 0);
  for (jint i = 1; i < numValues; ++i) {
    minValue = JavaLangMath_minWithLong_withLong_(minValue, IOSLongArray_Get(values, i));
    maxValue = JavaLangMath_maxWithLong_withLong_(maxValue, IOSLongArray_Get(values, i));
  }
  if (minValue == 0 && maxValue == 0) {
    IOSObjectArray_SetAndConsume(nil_chk(self->values_), block, new_OrgApacheLuceneUtilPackedPackedInts_NullReader_initWithInt_(numValues));
  }
  else {
    jint bitsRequired = minValue < 0 ? 64 : OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(maxValue);
    OrgApacheLuceneUtilPackedPackedInts_Mutable *mutable_ = OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(numValues, bitsRequired, acceptableOverheadRatio);
    for (jint i = 0; i < numValues; ) {
      i += [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(mutable_)) setWithInt:i withLongArray:values withInt:i withInt:numValues - i];
    }
    IOSObjectArray_Set(nil_chk(self->values_), block, mutable_);
  }
}

- (void)growWithInt:(jint)newBlockCount {
  ramBytesUsed_ -= OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithNSObjectArray_(values_);
  JreStrongAssign(&values_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(values_, newBlockCount));
  ramBytesUsed_ += OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithNSObjectArray_(values_);
}

- (void)dealloc {
  RELEASE_(pending_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedLongValues;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedLongValues_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withFloat:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(baseRamBytesUsed);
  methods[3].selector = @selector(ramBytesUsed);
  methods[4].selector = @selector(getChildResources);
  methods[5].selector = @selector(size);
  methods[6].selector = @selector(addWithLong:);
  methods[7].selector = @selector(finish);
  methods[8].selector = @selector(pack);
  methods[9].selector = @selector(packWithLongArray:withInt:withInt:withFloat:);
  methods[10].selector = @selector(growWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INITIAL_PAGE_COUNT", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPackedLongValues_Builder_INITIAL_PAGE_COUNT, 0x1a, -1, -1, -1, -1 },
    { "BASE_RAM_BYTES_USED", "J", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "pageShift_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "pageMask_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "acceptableOverheadRatio_", "F", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "pending_", "[J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "values_", "[LOrgApacheLuceneUtilPackedPackedInts_Reader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ramBytesUsed_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "valuesOff_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pendingOff_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IF", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "add", "J", "pack", "[JIIF", "grow", "I", &OrgApacheLuceneUtilPackedPackedLongValues_Builder_BASE_RAM_BYTES_USED, "LOrgApacheLuceneUtilPackedPackedLongValues;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedLongValues_Builder = { "Builder", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x9, 11, 11, 9, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedLongValues_Builder;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilPackedPackedLongValues_Builder class]) {
    OrgApacheLuceneUtilPackedPackedLongValues_Builder_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilPackedPackedLongValues_Builder_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilPackedPackedLongValues_Builder)
  }
}

@end

void OrgApacheLuceneUtilPackedPackedLongValues_Builder_initWithInt_withFloat_(OrgApacheLuceneUtilPackedPackedLongValues_Builder *self, jint pageSize, jfloat acceptableOverheadRatio) {
  NSObject_init(self);
  self->pageShift_ = OrgApacheLuceneUtilPackedPackedInts_checkBlockSizeWithInt_withInt_withInt_(pageSize, OrgApacheLuceneUtilPackedPackedLongValues_MIN_PAGE_SIZE, OrgApacheLuceneUtilPackedPackedLongValues_MAX_PAGE_SIZE);
  self->pageMask_ = pageSize - 1;
  self->acceptableOverheadRatio_ = acceptableOverheadRatio;
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:OrgApacheLuceneUtilPackedPackedLongValues_Builder_INITIAL_PAGE_COUNT type:OrgApacheLuceneUtilPackedPackedInts_Reader_class_()]);
  JreStrongAssignAndConsume(&self->pending_, [IOSLongArray newArrayWithLength:pageSize]);
  self->valuesOff_ = 0;
  self->pendingOff_ = 0;
  self->size_ = 0;
  self->ramBytesUsed_ = [self baseRamBytesUsed] + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithLongArray_(self->pending_) + OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithNSObjectArray_(self->values_);
}

OrgApacheLuceneUtilPackedPackedLongValues_Builder *new_OrgApacheLuceneUtilPackedPackedLongValues_Builder_initWithInt_withFloat_(jint pageSize, jfloat acceptableOverheadRatio) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPackedLongValues_Builder, initWithInt_withFloat_, pageSize, acceptableOverheadRatio)
}

OrgApacheLuceneUtilPackedPackedLongValues_Builder *create_OrgApacheLuceneUtilPackedPackedLongValues_Builder_initWithInt_withFloat_(jint pageSize, jfloat acceptableOverheadRatio) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPackedLongValues_Builder, initWithInt_withFloat_, pageSize, acceptableOverheadRatio)
}

void OrgApacheLuceneUtilPackedPackedLongValues_Builder_finish(OrgApacheLuceneUtilPackedPackedLongValues_Builder *self) {
  if (self->pendingOff_ > 0) {
    if (((IOSObjectArray *) nil_chk(self->values_))->size_ == self->valuesOff_) {
      [self growWithInt:self->valuesOff_ + 1];
    }
    OrgApacheLuceneUtilPackedPackedLongValues_Builder_pack(self);
  }
}

void OrgApacheLuceneUtilPackedPackedLongValues_Builder_pack(OrgApacheLuceneUtilPackedPackedLongValues_Builder *self) {
  [self packWithLongArray:self->pending_ withInt:self->pendingOff_ withInt:self->valuesOff_ withFloat:self->acceptableOverheadRatio_];
  self->ramBytesUsed_ += [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(IOSObjectArray_Get(nil_chk(self->values_), self->valuesOff_))) ramBytesUsed];
  self->valuesOff_ += 1;
  self->pendingOff_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedLongValues_Builder)
