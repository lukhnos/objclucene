//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/Packed64.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/packed/BulkOperation.h"
#include "org/apache/lucene/util/packed/Packed64.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/Packed64 must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilPackedPacked64 () {
 @public
  /*!
   @brief Values are stores contiguously in the blocks array.
   */
  IOSLongArray *blocks_;
  /*!
   @brief A right-aligned mask of width BitsPerValue used by <code>get(int)</code>.
   */
  jlong maskRight_;
  /*!
   @brief Optimization: Saves one lookup in <code>get(int)</code>.
   */
  jint bpvMinusBlockSize_;
}

+ (jint)gcdWithInt:(jint)a
           withInt:(jint)b;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilPackedPacked64, blocks_, IOSLongArray *)

__attribute__((unused)) static jint OrgApacheLuceneUtilPackedPacked64_gcdWithInt_withInt_(jint a, jint b);

@implementation OrgApacheLuceneUtilPackedPacked64

+ (jint)BLOCK_SIZE {
  return OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE;
}

+ (jint)BLOCK_BITS {
  return OrgApacheLuceneUtilPackedPacked64_BLOCK_BITS;
}

+ (jint)MOD_MASK {
  return OrgApacheLuceneUtilPackedPacked64_MOD_MASK;
}

- (instancetype)initPackagePrivateWithInt:(jint)valueCount
                                  withInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withInt_(self, valueCount, bitsPerValue);
  return self;
}

- (instancetype)initPackagePrivateWithInt:(jint)packedIntsVersion
        withOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                  withInt:(jint)valueCount
                                  withInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_withInt_(self, packedIntsVersion, inArg, valueCount, bitsPerValue);
  return self;
}

- (jlong)getWithInt:(jint)index {
  jlong majorBitPos = (jlong) index * bitsPerValue_;
  jint elementPos = (jint) (JreURShift64(majorBitPos, OrgApacheLuceneUtilPackedPacked64_BLOCK_BITS));
  jlong endBits = (majorBitPos & OrgApacheLuceneUtilPackedPacked64_MOD_MASK) + bpvMinusBlockSize_;
  if (endBits <= 0) {
    return (JreURShift64(IOSLongArray_Get(nil_chk(blocks_), elementPos), -endBits)) & maskRight_;
  }
  return ((JreLShift64(IOSLongArray_Get(nil_chk(blocks_), elementPos), endBits)) | (JreURShift64(IOSLongArray_Get(blocks_, elementPos + 1), (OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE - endBits)))) & maskRight_;
}

- (jint)getWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert(len > 0, JreStrcat("$IC", @"len must be > 0 (got ", len, ')'));
  JreAssert(index >= 0 && index < valueCount_, @"org/apache/lucene/util/packed/Packed64.java:135 condition failed: assert index >= 0 && index < valueCount;");
  len = JavaLangMath_minWithInt_withInt_(len, valueCount_ - index);
  JreAssert(off + len <= ((IOSLongArray *) nil_chk(arr))->size_, @"org/apache/lucene/util/packed/Packed64.java:137 condition failed: assert off + len <= arr.length;");
  jint originalIndex = index;
  id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder = OrgApacheLuceneUtilPackedBulkOperation_ofWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), bitsPerValue_);
  jint offsetInBlocks = JreIntMod(index, [((id<OrgApacheLuceneUtilPackedPackedInts_Decoder>) nil_chk(decoder)) longValueCount]);
  if (offsetInBlocks != 0) {
    for (jint i = offsetInBlocks; i < [decoder longValueCount] && len > 0; ++i) {
      *IOSLongArray_GetRef(arr, off++) = [self getWithInt:index++];
      --len;
    }
    if (len == 0) {
      return index - originalIndex;
    }
  }
  JreAssert(JreIntMod(index, [decoder longValueCount]) == 0, @"org/apache/lucene/util/packed/Packed64.java:155 condition failed: assert index % decoder.longValueCount() == 0;");
  jint blockIndex = (jint) (JreURShift64(((jlong) index * bitsPerValue_), OrgApacheLuceneUtilPackedPacked64_BLOCK_BITS));
  JreAssert((((jlong) index * bitsPerValue_) & OrgApacheLuceneUtilPackedPacked64_MOD_MASK) == 0, @"org/apache/lucene/util/packed/Packed64.java:157 condition failed: assert (((long)index * bitsPerValue) & MOD_MASK) == 0;");
  jint iterations = JreIntDiv(len, [decoder longValueCount]);
  [decoder decodeWithLongArray:blocks_ withInt:blockIndex withLongArray:arr withInt:off withInt:iterations];
  jint gotValues = iterations * [decoder longValueCount];
  index += gotValues;
  len -= gotValues;
  JreAssert(len >= 0, @"org/apache/lucene/util/packed/Packed64.java:163 condition failed: assert len >= 0;");
  if (index > originalIndex) {
    return index - originalIndex;
  }
  else {
    JreAssert(index == originalIndex, @"org/apache/lucene/util/packed/Packed64.java:170 condition failed: assert index == originalIndex;");
    return [super getWithInt:index withLongArray:arr withInt:off withInt:len];
  }
}

- (void)setWithInt:(jint)index
          withLong:(jlong)value {
  jlong majorBitPos = (jlong) index * bitsPerValue_;
  jint elementPos = (jint) (JreURShift64(majorBitPos, OrgApacheLuceneUtilPackedPacked64_BLOCK_BITS));
  jlong endBits = (majorBitPos & OrgApacheLuceneUtilPackedPacked64_MOD_MASK) + bpvMinusBlockSize_;
  if (endBits <= 0) {
    *IOSLongArray_GetRef(nil_chk(blocks_), elementPos) = (IOSLongArray_Get(blocks_, elementPos) & ~(JreLShift64(maskRight_, -endBits))) | (JreLShift64(value, -endBits));
    return;
  }
  *IOSLongArray_GetRef(nil_chk(blocks_), elementPos) = (IOSLongArray_Get(blocks_, elementPos) & ~(JreURShift64(maskRight_, endBits))) | (JreURShift64(value, endBits));
  *IOSLongArray_GetRef(blocks_, elementPos + 1) = (IOSLongArray_Get(blocks_, elementPos + 1) & (JreURShift64(~0LL, endBits))) | (JreLShift64(value, (OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE - endBits)));
}

- (jint)setWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert(len > 0, JreStrcat("$IC", @"len must be > 0 (got ", len, ')'));
  JreAssert(index >= 0 && index < valueCount_, @"org/apache/lucene/util/packed/Packed64.java:199 condition failed: assert index >= 0 && index < valueCount;");
  len = JavaLangMath_minWithInt_withInt_(len, valueCount_ - index);
  JreAssert(off + len <= ((IOSLongArray *) nil_chk(arr))->size_, @"org/apache/lucene/util/packed/Packed64.java:201 condition failed: assert off + len <= arr.length;");
  jint originalIndex = index;
  id<OrgApacheLuceneUtilPackedPackedInts_Encoder> encoder = OrgApacheLuceneUtilPackedBulkOperation_ofWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), bitsPerValue_);
  jint offsetInBlocks = JreIntMod(index, [((id<OrgApacheLuceneUtilPackedPackedInts_Encoder>) nil_chk(encoder)) longValueCount]);
  if (offsetInBlocks != 0) {
    for (jint i = offsetInBlocks; i < [encoder longValueCount] && len > 0; ++i) {
      [self setWithInt:index++ withLong:IOSLongArray_Get(arr, off++)];
      --len;
    }
    if (len == 0) {
      return index - originalIndex;
    }
  }
  JreAssert(JreIntMod(index, [encoder longValueCount]) == 0, @"org/apache/lucene/util/packed/Packed64.java:219 condition failed: assert index % encoder.longValueCount() == 0;");
  jint blockIndex = (jint) (JreURShift64(((jlong) index * bitsPerValue_), OrgApacheLuceneUtilPackedPacked64_BLOCK_BITS));
  JreAssert((((jlong) index * bitsPerValue_) & OrgApacheLuceneUtilPackedPacked64_MOD_MASK) == 0, @"org/apache/lucene/util/packed/Packed64.java:221 condition failed: assert (((long)index * bitsPerValue) & MOD_MASK) == 0;");
  jint iterations = JreIntDiv(len, [encoder longValueCount]);
  [encoder encodeWithLongArray:arr withInt:off withLongArray:blocks_ withInt:blockIndex withInt:iterations];
  jint setValues = iterations * [encoder longValueCount];
  index += setValues;
  len -= setValues;
  JreAssert(len >= 0, @"org/apache/lucene/util/packed/Packed64.java:227 condition failed: assert len >= 0;");
  if (index > originalIndex) {
    return index - originalIndex;
  }
  else {
    JreAssert(index == originalIndex, @"org/apache/lucene/util/packed/Packed64.java:234 condition failed: assert index == originalIndex;");
    return [super setWithInt:index withLongArray:arr withInt:off withInt:len];
  }
}

- (NSString *)description {
  return JreStrcat("$I$I$IC", @"Packed64(bitsPerValue=", bitsPerValue_, @",size=", [self size], @",blocks=", ((IOSLongArray *) nil_chk(blocks_))->size_, ')');
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilRamUsageEstimator_alignObjectSizeWithLong_(JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_HEADER) + 3 * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT + OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_LONG + JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF)) + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithLongArray_(blocks_);
}

- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
           withLong:(jlong)val {
  JreAssert(OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(val) <= [self getBitsPerValue], @"org/apache/lucene/util/packed/Packed64.java:257 condition failed: assert PackedInts.unsignedBitsRequired(val) <= getBitsPerValue();");
  JreAssert(fromIndex <= toIndex, @"org/apache/lucene/util/packed/Packed64.java:258 condition failed: assert fromIndex <= toIndex;");
  jint nAlignedValues = JreIntDiv(64, OrgApacheLuceneUtilPackedPacked64_gcdWithInt_withInt_(64, bitsPerValue_));
  jint span = toIndex - fromIndex;
  if (span <= 3 * nAlignedValues) {
    [super fillWithInt:fromIndex withInt:toIndex withLong:val];
    return;
  }
  jint fromIndexModNAlignedValues = JreIntMod(fromIndex, nAlignedValues);
  if (fromIndexModNAlignedValues != 0) {
    for (jint i = fromIndexModNAlignedValues; i < nAlignedValues; ++i) {
      [self setWithInt:fromIndex++ withLong:val];
    }
  }
  JreAssert(JreIntMod(fromIndex, nAlignedValues) == 0, @"org/apache/lucene/util/packed/Packed64.java:277 condition failed: assert fromIndex % nAlignedValues == 0;");
  jint nAlignedBlocks = JreRShift32((nAlignedValues * bitsPerValue_), 6);
  IOSLongArray *nAlignedValuesBlocks;
  {
    OrgApacheLuceneUtilPackedPacked64 *values = create_OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withInt_(nAlignedValues, bitsPerValue_);
    for (jint i = 0; i < nAlignedValues; ++i) {
      [values setWithInt:i withLong:val];
    }
    nAlignedValuesBlocks = values->blocks_;
    JreAssert(nAlignedBlocks <= ((IOSLongArray *) nil_chk(nAlignedValuesBlocks))->size_, @"org/apache/lucene/util/packed/Packed64.java:290 condition failed: assert nAlignedBlocks <= nAlignedValuesBlocks.length;");
  }
  jint startBlock = (jint) (JreURShift64(((jlong) fromIndex * bitsPerValue_), 6));
  jint endBlock = (jint) (JreURShift64(((jlong) toIndex * bitsPerValue_), 6));
  for (jint block = startBlock; block < endBlock; ++block) {
    jlong blockValue = IOSLongArray_Get(nAlignedValuesBlocks, JreIntMod(block, nAlignedBlocks));
    *IOSLongArray_GetRef(nil_chk(blocks_), block) = blockValue;
  }
  for (jint i = (jint) (JreLongDiv((JreLShift64((jlong) endBlock, 6)), bitsPerValue_)); i < toIndex; ++i) {
    [self setWithInt:i withLong:val];
  }
}

+ (jint)gcdWithInt:(jint)a
           withInt:(jint)b {
  return OrgApacheLuceneUtilPackedPacked64_gcdWithInt_withInt_(a, b);
}

- (void)clear {
  JavaUtilArrays_fillWithLongArray_withLong_(blocks_, 0LL);
}

- (void)dealloc {
  RELEASE_(blocks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 11, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:withInt:);
  methods[1].selector = @selector(initPackagePrivateWithInt:withOrgApacheLuceneStoreDataInput:withInt:withInt:);
  methods[2].selector = @selector(getWithInt:);
  methods[3].selector = @selector(getWithInt:withLongArray:withInt:withInt:);
  methods[4].selector = @selector(setWithInt:withLong:);
  methods[5].selector = @selector(setWithInt:withLongArray:withInt:withInt:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(ramBytesUsed);
  methods[8].selector = @selector(fillWithInt:withInt:withLong:);
  methods[9].selector = @selector(gcdWithInt:withInt:);
  methods[10].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE, 0x18, -1, -1, -1, -1 },
    { "BLOCK_BITS", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPacked64_BLOCK_BITS, 0x18, -1, -1, -1, -1 },
    { "MOD_MASK", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPacked64_MOD_MASK, 0x18, -1, -1, -1, -1 },
    { "blocks_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maskRight_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bpvMinusBlockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "ILOrgApacheLuceneStoreDataInput;II", "LJavaIoIOException;", "get", "I", "I[JII", "set", "IJ", "toString", "fill", "IIJ", "gcd" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPacked64 = { "Packed64", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x0, 11, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPacked64;
}

@end

void OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withInt_(OrgApacheLuceneUtilPackedPacked64 *self, jint valueCount, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_MutableImpl_initWithInt_withInt_(self, valueCount, bitsPerValue);
  OrgApacheLuceneUtilPackedPackedInts_Format *format = JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED);
  jint longCount = [((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(format)) longCountWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT withInt:valueCount withInt:bitsPerValue];
  JreStrongAssignAndConsume(&self->blocks_, [IOSLongArray newArrayWithLength:longCount]);
  self->maskRight_ = JreURShift64(JreLShift64(~0LL, (OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE - bitsPerValue)), (OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE - bitsPerValue));
  self->bpvMinusBlockSize_ = bitsPerValue - OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE;
}

OrgApacheLuceneUtilPackedPacked64 *new_OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withInt_(jint valueCount, jint bitsPerValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPacked64, initPackagePrivateWithInt_withInt_, valueCount, bitsPerValue)
}

OrgApacheLuceneUtilPackedPacked64 *create_OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withInt_(jint valueCount, jint bitsPerValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPacked64, initPackagePrivateWithInt_withInt_, valueCount, bitsPerValue)
}

void OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_withInt_(OrgApacheLuceneUtilPackedPacked64 *self, jint packedIntsVersion, OrgApacheLuceneStoreDataInput *inArg, jint valueCount, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_MutableImpl_initWithInt_withInt_(self, valueCount, bitsPerValue);
  OrgApacheLuceneUtilPackedPackedInts_Format *format = JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED);
  jlong byteCount = [((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(format)) byteCountWithInt:packedIntsVersion withInt:valueCount withInt:bitsPerValue];
  jint longCount = [format longCountWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT withInt:valueCount withInt:bitsPerValue];
  JreStrongAssignAndConsume(&self->blocks_, [IOSLongArray newArrayWithLength:longCount]);
  for (jint i = 0; i < JreLongDiv(byteCount, 8); ++i) {
    *IOSLongArray_GetRef(self->blocks_, i) = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readLong];
  }
  jint remaining = (jint) (JreLongMod(byteCount, 8));
  if (remaining != 0) {
    jlong lastLong = 0;
    for (jint i = 0; i < remaining; ++i) {
      lastLong |= JreLShift64(([((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readByte] & (jlong) 0xFFLL), (56 - i * 8));
    }
    *IOSLongArray_GetRef(self->blocks_, self->blocks_->size_ - 1) = lastLong;
  }
  self->maskRight_ = JreURShift64(JreLShift64(~0LL, (OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE - bitsPerValue)), (OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE - bitsPerValue));
  self->bpvMinusBlockSize_ = bitsPerValue - OrgApacheLuceneUtilPackedPacked64_BLOCK_SIZE;
}

OrgApacheLuceneUtilPackedPacked64 *new_OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_withInt_(jint packedIntsVersion, OrgApacheLuceneStoreDataInput *inArg, jint valueCount, jint bitsPerValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPacked64, initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_withInt_, packedIntsVersion, inArg, valueCount, bitsPerValue)
}

OrgApacheLuceneUtilPackedPacked64 *create_OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_withInt_(jint packedIntsVersion, OrgApacheLuceneStoreDataInput *inArg, jint valueCount, jint bitsPerValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPacked64, initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_withInt_, packedIntsVersion, inArg, valueCount, bitsPerValue)
}

jint OrgApacheLuceneUtilPackedPacked64_gcdWithInt_withInt_(jint a, jint b) {
  OrgApacheLuceneUtilPackedPacked64_initialize();
  if (a < b) {
    return OrgApacheLuceneUtilPackedPacked64_gcdWithInt_withInt_(b, a);
  }
  else if (b == 0) {
    return a;
  }
  else {
    return OrgApacheLuceneUtilPackedPacked64_gcdWithInt_withInt_(b, JreIntMod(a, b));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPacked64)
