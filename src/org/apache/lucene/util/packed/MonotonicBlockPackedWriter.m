//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/MonotonicBlockPackedWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/packed/AbstractBlockPackedWriter.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedReader.h"
#include "org/apache/lucene/util/packed/MonotonicBlockPackedWriter.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/MonotonicBlockPackedWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter

- (instancetype)initWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                               withInt:(jint)blockSize {
  OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(self, outArg, blockSize);
  return self;
}

- (void)addWithLong:(jlong)l {
  JreAssert(l >= 0, @"org/apache/lucene/util/packed/MonotonicBlockPackedWriter.java:69 condition failed: assert l >= 0;");
  [super addWithLong:l];
}

- (void)flush {
  JreAssert(off_ > 0, @"org/apache/lucene/util/packed/MonotonicBlockPackedWriter.java:74 condition failed: assert off > 0;");
  jfloat avg = off_ == 1 ? 0.0f : (jfloat) (IOSLongArray_Get(nil_chk(values_), off_ - 1) - IOSLongArray_Get(values_, 0)) / (off_ - 1);
  jlong min = IOSLongArray_Get(nil_chk(values_), 0);
  for (jint i = 1; i < off_; ++i) {
    jlong actual = IOSLongArray_Get(values_, i);
    jlong expected = OrgApacheLuceneUtilPackedMonotonicBlockPackedReader_expectedWithLong_withFloat_withInt_(min, avg, i);
    if (expected > actual) {
      min -= (expected - actual);
    }
  }
  jlong maxDelta = 0;
  for (jint i = 0; i < off_; ++i) {
    *IOSLongArray_GetRef(values_, i) = IOSLongArray_Get(values_, i) - OrgApacheLuceneUtilPackedMonotonicBlockPackedReader_expectedWithLong_withFloat_withInt_(min, avg, i);
    maxDelta = JavaLangMath_maxWithLong_withLong_(maxDelta, IOSLongArray_Get(values_, i));
  }
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeZLongWithLong:min];
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeIntWithInt:JavaLangFloat_floatToIntBitsWithFloat_(avg)];
  if (maxDelta == 0) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeVIntWithInt:0];
  }
  else {
    jint bitsRequired = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(maxDelta);
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeVIntWithInt:bitsRequired];
    [self writeValuesWithInt:bitsRequired];
  }
  off_ = 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDataOutput:withInt:);
  methods[1].selector = @selector(addWithLong:);
  methods[2].selector = @selector(flush);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDataOutput;I", "add", "J", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter = { "MonotonicBlockPackedWriter", "org.apache.lucene.util.packed", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter;
}

@end

void OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter *self, OrgApacheLuceneStoreDataOutput *outArg, jint blockSize) {
  OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_initPackagePrivateWithOrgApacheLuceneStoreDataOutput_withInt_(self, outArg, blockSize);
}

OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter *new_OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(OrgApacheLuceneStoreDataOutput *outArg, jint blockSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter, initWithOrgApacheLuceneStoreDataOutput_withInt_, outArg, blockSize)
}

OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter *create_OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(OrgApacheLuceneStoreDataOutput *outArg, jint blockSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter, initWithOrgApacheLuceneStoreDataOutput_withInt_, outArg, blockSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedMonotonicBlockPackedWriter)
