//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/BulkOperationPacked3.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/util/packed/BulkOperationPacked.h"
#include "org/apache/lucene/util/packed/BulkOperationPacked3.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/BulkOperationPacked3 must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneUtilPackedBulkOperationPacked3

- (instancetype)initPackagePrivate {
  OrgApacheLuceneUtilPackedBulkOperationPacked3_initPackagePrivate(self);
  return self;
}

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong block0 = IOSLongArray_Get(nil_chk(blocks), blocksOffset++);
    *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = (jint) (JreURShift64(block0, 61));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 58)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 55)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 52)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 49)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 46)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 43)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 40)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 37)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 34)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 31)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 28)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 25)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 22)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 19)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 16)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 13)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 10)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 7)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 4)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block0, 1)) & 7LL);
    jlong block1 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block0 & 1LL), 2)) | (JreURShift64(block1, 62)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 59)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 56)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 53)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 50)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 47)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 44)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 41)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 38)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 35)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 32)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 29)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 26)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 23)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 20)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 17)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 14)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 11)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 8)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 5)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block1, 2)) & 7LL);
    jlong block2 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreLShift64((block1 & 3LL), 1)) | (JreURShift64(block2, 63)));
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 60)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 57)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 54)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 51)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 48)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 45)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 42)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 39)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 36)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 33)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 30)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 27)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 24)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 21)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 18)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 15)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 12)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 9)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 6)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) ((JreURShift64(block2, 3)) & 7LL);
    *IOSIntArray_GetRef(values, valuesOffset++) = (jint) (block2 & 7LL);
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jint byte0 = IOSByteArray_Get(nil_chk(blocks), blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = JreURShift32(byte0, 5);
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(byte0, 2)) & 7;
    jint byte1 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreLShift32((byte0 & 3), 1)) | (JreURShift32(byte1, 7));
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(byte1, 4)) & 7;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(byte1, 1)) & 7;
    jint byte2 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreLShift32((byte1 & 1), 2)) | (JreURShift32(byte2, 6));
    *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(byte2, 3)) & 7;
    *IOSIntArray_GetRef(values, valuesOffset++) = byte2 & 7;
  }
}

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong block0 = IOSLongArray_Get(nil_chk(blocks), blocksOffset++);
    *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = JreURShift64(block0, 61);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 58)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 55)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 52)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 49)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 46)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 43)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 40)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 37)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 34)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 31)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 28)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 25)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 22)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 19)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 16)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 13)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 10)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 7)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 4)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block0, 1)) & 7LL;
    jlong block1 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block0 & 1LL), 2)) | (JreURShift64(block1, 62));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 59)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 56)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 53)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 50)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 47)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 44)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 41)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 38)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 35)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 32)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 29)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 26)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 23)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 20)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 17)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 14)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 11)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 8)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 5)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block1, 2)) & 7LL;
    jlong block2 = IOSLongArray_Get(blocks, blocksOffset++);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((block1 & 3LL), 1)) | (JreURShift64(block2, 63));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 60)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 57)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 54)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 51)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 48)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 45)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 42)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 39)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 36)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 33)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 30)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 27)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 24)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 21)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 18)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 15)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 12)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 9)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 6)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(block2, 3)) & 7LL;
    *IOSLongArray_GetRef(values, valuesOffset++) = block2 & 7LL;
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  for (jint i = 0; i < iterations; ++i) {
    jlong byte0 = IOSByteArray_Get(nil_chk(blocks), blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = JreURShift64(byte0, 5);
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(byte0, 2)) & 7;
    jlong byte1 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((byte0 & 3), 1)) | (JreURShift64(byte1, 7));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(byte1, 4)) & 7;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(byte1, 1)) & 7;
    jlong byte2 = IOSByteArray_Get(blocks, blocksOffset++) & (jint) 0xFF;
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreLShift64((byte1 & 1), 2)) | (JreURShift64(byte2, 6));
    *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(byte2, 3)) & 7;
    *IOSLongArray_GetRef(values, valuesOffset++) = byte2 & 7;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(decodeWithLongArray:withInt:withIntArray:withInt:withInt:);
  methods[2].selector = @selector(decodeWithByteArray:withInt:withIntArray:withInt:withInt:);
  methods[3].selector = @selector(decodeWithLongArray:withInt:withLongArray:withInt:withInt:);
  methods[4].selector = @selector(decodeWithByteArray:withInt:withLongArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "decode", "[JI[III", "[BI[III", "[JI[JII", "[BI[JII" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedBulkOperationPacked3 = { "BulkOperationPacked3", "org.apache.lucene.util.packed", ptrTable, methods, NULL, 7, 0x10, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedBulkOperationPacked3;
}

@end

void OrgApacheLuceneUtilPackedBulkOperationPacked3_initPackagePrivate(OrgApacheLuceneUtilPackedBulkOperationPacked3 *self) {
  OrgApacheLuceneUtilPackedBulkOperationPacked_initPackagePrivateWithInt_(self, 3);
}

OrgApacheLuceneUtilPackedBulkOperationPacked3 *new_OrgApacheLuceneUtilPackedBulkOperationPacked3_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedBulkOperationPacked3, initPackagePrivate)
}

OrgApacheLuceneUtilPackedBulkOperationPacked3 *create_OrgApacheLuceneUtilPackedBulkOperationPacked3_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedBulkOperationPacked3, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedBulkOperationPacked3)
