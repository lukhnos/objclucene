//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/PackedDataOutput.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/packed/PackedDataOutput.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/PackedDataOutput must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneUtilPackedPackedDataOutput

- (instancetype)initWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneUtilPackedPackedDataOutput_initWithOrgApacheLuceneStoreDataOutput_(self, outArg);
  return self;
}

- (void)writeLongWithLong:(jlong)value
                  withInt:(jint)bitsPerValue {
  JreAssert(bitsPerValue == 64 || (value >= 0 && value <= OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(bitsPerValue)), @"org/apache/lucene/util/packed/PackedDataOutput.java:49 condition failed: assert bitsPerValue == 64 || (value >= 0 && value <= PackedInts.maxValue(bitsPerValue));");
  while (bitsPerValue > 0) {
    if (remainingBits_ == 0) {
      [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeByteWithByte:(jbyte) current_];
      current_ = 0LL;
      remainingBits_ = 8;
    }
    jint bits = JavaLangMath_minWithInt_withInt_(remainingBits_, bitsPerValue);
    current_ = current_ | (JreLShift64(((JreURShift64(value, (bitsPerValue - bits))) & ((JreLShift64(1LL, bits)) - 1)), (remainingBits_ - bits)));
    bitsPerValue -= bits;
    remainingBits_ -= bits;
  }
}

- (void)flush {
  if (remainingBits_ < 8) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeByteWithByte:(jbyte) current_];
  }
  remainingBits_ = 8;
  current_ = 0LL;
}

- (void)dealloc {
  RELEASE_(out_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDataOutput:);
  methods[1].selector = @selector(writeLongWithLong:withInt:);
  methods[2].selector = @selector(flush);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "out_", "LOrgApacheLuceneStoreDataOutput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "current_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "remainingBits_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDataOutput;", "writeLong", "JI", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedDataOutput = { "PackedDataOutput", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedDataOutput;
}

@end

void OrgApacheLuceneUtilPackedPackedDataOutput_initWithOrgApacheLuceneStoreDataOutput_(OrgApacheLuceneUtilPackedPackedDataOutput *self, OrgApacheLuceneStoreDataOutput *outArg) {
  NSObject_init(self);
  JreStrongAssign(&self->out_, outArg);
  self->current_ = 0;
  self->remainingBits_ = 8;
}

OrgApacheLuceneUtilPackedPackedDataOutput *new_OrgApacheLuceneUtilPackedPackedDataOutput_initWithOrgApacheLuceneStoreDataOutput_(OrgApacheLuceneStoreDataOutput *outArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPackedDataOutput, initWithOrgApacheLuceneStoreDataOutput_, outArg)
}

OrgApacheLuceneUtilPackedPackedDataOutput *create_OrgApacheLuceneUtilPackedPackedDataOutput_initWithOrgApacheLuceneStoreDataOutput_(OrgApacheLuceneStoreDataOutput *outArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPackedDataOutput, initWithOrgApacheLuceneStoreDataOutput_, outArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedDataOutput)
