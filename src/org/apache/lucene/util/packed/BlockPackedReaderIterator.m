//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "org/apache/lucene/util/packed/AbstractBlockPackedWriter.h"
#include "org/apache/lucene/util/packed/BlockPackedReaderIterator.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/BlockPackedReaderIterator must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilPackedBlockPackedReaderIterator ()

- (void)skipBytesWithLong:(jlong)count;

- (void)refill;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilPackedBlockPackedReaderIterator_skipBytesWithLong_(OrgApacheLuceneUtilPackedBlockPackedReaderIterator *self, jlong count);

__attribute__((unused)) static void OrgApacheLuceneUtilPackedBlockPackedReaderIterator_refill(OrgApacheLuceneUtilPackedBlockPackedReaderIterator *self);

@implementation OrgApacheLuceneUtilPackedBlockPackedReaderIterator

+ (jlong)readVLongWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  return OrgApacheLuceneUtilPackedBlockPackedReaderIterator_readVLongWithOrgApacheLuceneStoreDataInput_(inArg);
}

- (instancetype)initWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                              withInt:(jint)packedIntsVersion
                                              withInt:(jint)blockSize
                                             withLong:(jlong)valueCount {
  OrgApacheLuceneUtilPackedBlockPackedReaderIterator_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withLong_(self, inArg, packedIntsVersion, blockSize, valueCount);
  return self;
}

- (void)resetWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                      withLong:(jlong)valueCount {
  JreStrongAssign(&self->in_, inArg);
  JreAssert(valueCount >= 0, @"org/apache/lucene/util/packed/BlockPackedReaderIterator.java:101 condition failed: assert valueCount >= 0;");
  self->valueCount_ = valueCount;
  off_ = blockSize_;
  ord_ = 0;
}

- (void)skipWithLong:(jlong)count {
  JreAssert(count >= 0, @"org/apache/lucene/util/packed/BlockPackedReaderIterator.java:109 condition failed: assert count >= 0;");
  if (ord_ + count > valueCount_ || ord_ + count < 0) {
    @throw create_JavaIoEOFException_init();
  }
  jint skipBuffer = (jint) JavaLangMath_minWithLong_withLong_(count, blockSize_ - off_);
  off_ += skipBuffer;
  ord_ += skipBuffer;
  count -= skipBuffer;
  if (count == 0LL) {
    return;
  }
  JreAssert(off_ == blockSize_, @"org/apache/lucene/util/packed/BlockPackedReaderIterator.java:124 condition failed: assert off == blockSize;");
  while (count >= blockSize_) {
    jint token = [((OrgApacheLuceneStoreDataInput *) nil_chk(in_)) readByte] & (jint) 0xFF;
    jint bitsPerValue = JreURShift32(token, OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_BPV_SHIFT);
    if (bitsPerValue > 64) {
      @throw create_JavaIoIOException_initWithNSString_(@"Corrupted");
    }
    if ((token & OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MIN_VALUE_EQUALS_0) == 0) {
      OrgApacheLuceneUtilPackedBlockPackedReaderIterator_readVLongWithOrgApacheLuceneStoreDataInput_(in_);
    }
    jlong blockBytes = [((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED))) byteCountWithInt:packedIntsVersion_ withInt:blockSize_ withInt:bitsPerValue];
    OrgApacheLuceneUtilPackedBlockPackedReaderIterator_skipBytesWithLong_(self, blockBytes);
    ord_ += blockSize_;
    count -= blockSize_;
  }
  if (count == 0LL) {
    return;
  }
  JreAssert(count < blockSize_, @"org/apache/lucene/util/packed/BlockPackedReaderIterator.java:144 condition failed: assert count < blockSize;");
  OrgApacheLuceneUtilPackedBlockPackedReaderIterator_refill(self);
  ord_ += count;
  off_ += count;
}

- (void)skipBytesWithLong:(jlong)count {
  OrgApacheLuceneUtilPackedBlockPackedReaderIterator_skipBytesWithLong_(self, count);
}

- (jlong)next {
  if (ord_ == valueCount_) {
    @throw create_JavaIoEOFException_init();
  }
  if (off_ == blockSize_) {
    OrgApacheLuceneUtilPackedBlockPackedReaderIterator_refill(self);
  }
  jlong value = IOSLongArray_Get(nil_chk(values_), off_++);
  ++ord_;
  return value;
}

- (OrgApacheLuceneUtilLongsRef *)nextWithInt:(jint)count {
  JreAssert(count > 0, @"org/apache/lucene/util/packed/BlockPackedReaderIterator.java:182 condition failed: assert count > 0;");
  if (ord_ == valueCount_) {
    @throw create_JavaIoEOFException_init();
  }
  if (off_ == blockSize_) {
    OrgApacheLuceneUtilPackedBlockPackedReaderIterator_refill(self);
  }
  count = JavaLangMath_minWithInt_withInt_(count, blockSize_ - off_);
  count = (jint) JavaLangMath_minWithLong_withLong_(count, valueCount_ - ord_);
  ((OrgApacheLuceneUtilLongsRef *) nil_chk(valuesRef_))->offset_ = off_;
  valuesRef_->length_ = count;
  off_ += count;
  ord_ += count;
  return valuesRef_;
}

- (void)refill {
  OrgApacheLuceneUtilPackedBlockPackedReaderIterator_refill(self);
}

- (jlong)ord {
  return ord_;
}

- (void)dealloc {
  RELEASE_(in_);
  RELEASE_(values_);
  RELEASE_(valuesRef_);
  RELEASE_(blocks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 7, 2, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilLongsRef;", 0x1, 9, 10, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(readVLongWithOrgApacheLuceneStoreDataInput:);
  methods[1].selector = @selector(initWithOrgApacheLuceneStoreDataInput:withInt:withInt:withLong:);
  methods[2].selector = @selector(resetWithOrgApacheLuceneStoreDataInput:withLong:);
  methods[3].selector = @selector(skipWithLong:);
  methods[4].selector = @selector(skipBytesWithLong:);
  methods[5].selector = @selector(next);
  methods[6].selector = @selector(nextWithInt:);
  methods[7].selector = @selector(refill);
  methods[8].selector = @selector(ord);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LOrgApacheLuceneStoreDataInput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "packedIntsVersion_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "valueCount_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "values_", "[J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "valuesRef_", "LOrgApacheLuceneUtilLongsRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "blocks_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "off_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ord_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readVLong", "LOrgApacheLuceneStoreDataInput;", "LJavaIoIOException;", "LOrgApacheLuceneStoreDataInput;IIJ", "reset", "LOrgApacheLuceneStoreDataInput;J", "skip", "J", "skipBytes", "next", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedBlockPackedReaderIterator = { "BlockPackedReaderIterator", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x11, 9, 9, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedBlockPackedReaderIterator;
}

@end

jlong OrgApacheLuceneUtilPackedBlockPackedReaderIterator_readVLongWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneStoreDataInput *inArg) {
  OrgApacheLuceneUtilPackedBlockPackedReaderIterator_initialize();
  jbyte b = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readByte];
  if (b >= 0) return b;
  jlong i = b & (jlong) 0x7FLL;
  b = [inArg readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 7);
  if (b >= 0) return i;
  b = [inArg readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 14);
  if (b >= 0) return i;
  b = [inArg readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 21);
  if (b >= 0) return i;
  b = [inArg readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 28);
  if (b >= 0) return i;
  b = [inArg readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 35);
  if (b >= 0) return i;
  b = [inArg readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 42);
  if (b >= 0) return i;
  b = [inArg readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 49);
  if (b >= 0) return i;
  b = [inArg readByte];
  i |= JreLShift64((b & (jlong) 0xFFLL), 56);
  return i;
}

void OrgApacheLuceneUtilPackedBlockPackedReaderIterator_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withLong_(OrgApacheLuceneUtilPackedBlockPackedReaderIterator *self, OrgApacheLuceneStoreDataInput *inArg, jint packedIntsVersion, jint blockSize, jlong valueCount) {
  NSObject_init(self);
  OrgApacheLuceneUtilPackedPackedInts_checkBlockSizeWithInt_withInt_withInt_(blockSize, OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MIN_BLOCK_SIZE, OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MAX_BLOCK_SIZE);
  self->packedIntsVersion_ = packedIntsVersion;
  self->blockSize_ = blockSize;
  JreStrongAssignAndConsume(&self->values_, [IOSLongArray newArrayWithLength:blockSize]);
  JreStrongAssignAndConsume(&self->valuesRef_, new_OrgApacheLuceneUtilLongsRef_initWithLongArray_withInt_withInt_(self->values_, 0, 0));
  [self resetWithOrgApacheLuceneStoreDataInput:inArg withLong:valueCount];
}

OrgApacheLuceneUtilPackedBlockPackedReaderIterator *new_OrgApacheLuceneUtilPackedBlockPackedReaderIterator_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withLong_(OrgApacheLuceneStoreDataInput *inArg, jint packedIntsVersion, jint blockSize, jlong valueCount) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedBlockPackedReaderIterator, initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withLong_, inArg, packedIntsVersion, blockSize, valueCount)
}

OrgApacheLuceneUtilPackedBlockPackedReaderIterator *create_OrgApacheLuceneUtilPackedBlockPackedReaderIterator_initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withLong_(OrgApacheLuceneStoreDataInput *inArg, jint packedIntsVersion, jint blockSize, jlong valueCount) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedBlockPackedReaderIterator, initWithOrgApacheLuceneStoreDataInput_withInt_withInt_withLong_, inArg, packedIntsVersion, blockSize, valueCount)
}

void OrgApacheLuceneUtilPackedBlockPackedReaderIterator_skipBytesWithLong_(OrgApacheLuceneUtilPackedBlockPackedReaderIterator *self, jlong count) {
  if ([self->in_ isKindOfClass:[OrgApacheLuceneStoreIndexInput class]]) {
    OrgApacheLuceneStoreIndexInput *iin = (OrgApacheLuceneStoreIndexInput *) self->in_;
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(iin)) seekWithLong:[iin getFilePointer] + count];
  }
  else {
    if (self->blocks_ == nil) {
      JreStrongAssignAndConsume(&self->blocks_, [IOSByteArray newArrayWithLength:self->blockSize_]);
    }
    jlong skipped = 0;
    while (skipped < count) {
      jint toSkip = (jint) JavaLangMath_minWithLong_withLong_(((IOSByteArray *) nil_chk(self->blocks_))->size_, count - skipped);
      [((OrgApacheLuceneStoreDataInput *) nil_chk(self->in_)) readBytesWithByteArray:self->blocks_ withInt:0 withInt:toSkip];
      skipped += toSkip;
    }
  }
}

void OrgApacheLuceneUtilPackedBlockPackedReaderIterator_refill(OrgApacheLuceneUtilPackedBlockPackedReaderIterator *self) {
  jint token = [((OrgApacheLuceneStoreDataInput *) nil_chk(self->in_)) readByte] & (jint) 0xFF;
  jboolean minEquals0 = (token & OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MIN_VALUE_EQUALS_0) != 0;
  jint bitsPerValue = JreURShift32(token, OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_BPV_SHIFT);
  if (bitsPerValue > 64) {
    @throw create_JavaIoIOException_initWithNSString_(@"Corrupted");
  }
  jlong minValue = minEquals0 ? 0LL : OrgApacheLuceneUtilBitUtil_zigZagDecodeWithLong_(1LL + OrgApacheLuceneUtilPackedBlockPackedReaderIterator_readVLongWithOrgApacheLuceneStoreDataInput_(self->in_));
  JreAssert(minEquals0 || minValue != 0, @"org/apache/lucene/util/packed/BlockPackedReaderIterator.java:208 condition failed: assert minEquals0 || minValue != 0;");
  if (bitsPerValue == 0) {
    JavaUtilArrays_fillWithLongArray_withLong_(self->values_, minValue);
  }
  else {
    id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder = OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), self->packedIntsVersion_, bitsPerValue);
    jint iterations = JreIntDiv(self->blockSize_, [((id<OrgApacheLuceneUtilPackedPackedInts_Decoder>) nil_chk(decoder)) byteValueCount]);
    jint blocksSize = iterations * [decoder byteBlockCount];
    if (self->blocks_ == nil || self->blocks_->size_ < blocksSize) {
      JreStrongAssignAndConsume(&self->blocks_, [IOSByteArray newArrayWithLength:blocksSize]);
    }
    jint valueCount = (jint) JavaLangMath_minWithLong_withLong_(self->valueCount_ - self->ord_, self->blockSize_);
    jint blocksCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED))) byteCountWithInt:self->packedIntsVersion_ withInt:valueCount withInt:bitsPerValue];
    [((OrgApacheLuceneStoreDataInput *) nil_chk(self->in_)) readBytesWithByteArray:self->blocks_ withInt:0 withInt:blocksCount];
    [decoder decodeWithByteArray:self->blocks_ withInt:0 withLongArray:self->values_ withInt:0 withInt:iterations];
    if (minValue != 0) {
      for (jint i = 0; i < valueCount; ++i) {
        *IOSLongArray_GetRef(nil_chk(self->values_), i) += minValue;
      }
    }
  }
  self->off_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedBlockPackedReaderIterator)
