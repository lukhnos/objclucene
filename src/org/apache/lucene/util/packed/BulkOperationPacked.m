//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/BulkOperationPacked.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/util/packed/BulkOperation.h"
#include "org/apache/lucene/util/packed/BulkOperationPacked.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/BulkOperationPacked must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilPackedBulkOperationPacked () {
 @public
  jint bitsPerValue_;
  jint longBlockCount_;
  jint longValueCount_;
  jint byteBlockCount_;
  jint byteValueCount_;
  jlong mask_;
  jint intMask_;
}

@end

@implementation OrgApacheLuceneUtilPackedBulkOperationPacked

- (instancetype)initPackagePrivateWithInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedBulkOperationPacked_initPackagePrivateWithInt_(self, bitsPerValue);
  return self;
}

- (jint)longBlockCount {
  return longBlockCount_;
}

- (jint)longValueCount {
  return longValueCount_;
}

- (jint)byteBlockCount {
  return byteBlockCount_;
}

- (jint)byteValueCount {
  return byteValueCount_;
}

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  jint bitsLeft = 64;
  for (jint i = 0; i < longValueCount_ * iterations; ++i) {
    bitsLeft -= bitsPerValue_;
    if (bitsLeft < 0) {
      jint unseq$1 = blocksOffset++;
      *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = (JreLShift64((IOSLongArray_Get(nil_chk(blocks), unseq$1) & ((JreLShift64(1LL, (bitsPerValue_ + bitsLeft))) - 1)), -bitsLeft)) | (JreURShift64(IOSLongArray_Get(blocks, blocksOffset), (64 + bitsLeft)));
      bitsLeft += 64;
    }
    else {
      *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = (JreURShift64(IOSLongArray_Get(nil_chk(blocks), blocksOffset), bitsLeft)) & mask_;
    }
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
              withLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  jlong nextValue = 0LL;
  jint bitsLeft = bitsPerValue_;
  for (jint i = 0; i < iterations * byteBlockCount_; ++i) {
    jlong bytes = IOSByteArray_Get(nil_chk(blocks), blocksOffset++) & (jlong) 0xFFLL;
    if (bitsLeft > 8) {
      bitsLeft -= 8;
      nextValue |= JreLShift64(bytes, bitsLeft);
    }
    else {
      jint bits = 8 - bitsLeft;
      *IOSLongArray_GetRef(nil_chk(values), valuesOffset++) = nextValue | (JreURShift64(bytes, bits));
      while (bits >= bitsPerValue_) {
        bits -= bitsPerValue_;
        *IOSLongArray_GetRef(values, valuesOffset++) = (JreURShift64(bytes, bits)) & mask_;
      }
      bitsLeft = bitsPerValue_ - bits;
      nextValue = JreLShift64((bytes & ((JreLShift64(1LL, bits)) - 1)), bitsLeft);
    }
  }
  JreAssert(bitsLeft == bitsPerValue_, @"org/apache/lucene/util/packed/BulkOperationPacked.java:121 condition failed: assert bitsLeft == bitsPerValue;");
}

- (void)decodeWithLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  if (bitsPerValue_ > 32) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$I$", @"Cannot decode ", bitsPerValue_, @"-bits values into an int[]"));
  }
  jint bitsLeft = 64;
  for (jint i = 0; i < longValueCount_ * iterations; ++i) {
    bitsLeft -= bitsPerValue_;
    if (bitsLeft < 0) {
      jint unseq$1 = blocksOffset++;
      *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = (jint) ((JreLShift64((IOSLongArray_Get(nil_chk(blocks), unseq$1) & ((JreLShift64(1LL, (bitsPerValue_ + bitsLeft))) - 1)), -bitsLeft)) | (JreURShift64(IOSLongArray_Get(blocks, blocksOffset), (64 + bitsLeft))));
      bitsLeft += 64;
    }
    else {
      *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = (jint) ((JreURShift64(IOSLongArray_Get(nil_chk(blocks), blocksOffset), bitsLeft)) & mask_);
    }
  }
}

- (void)decodeWithByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
               withIntArray:(IOSIntArray *)values
                    withInt:(jint)valuesOffset
                    withInt:(jint)iterations {
  jint nextValue = 0;
  jint bitsLeft = bitsPerValue_;
  for (jint i = 0; i < iterations * byteBlockCount_; ++i) {
    jint bytes = IOSByteArray_Get(nil_chk(blocks), blocksOffset++) & (jint) 0xFF;
    if (bitsLeft > 8) {
      bitsLeft -= 8;
      nextValue |= JreLShift32(bytes, bitsLeft);
    }
    else {
      jint bits = 8 - bitsLeft;
      *IOSIntArray_GetRef(nil_chk(values), valuesOffset++) = nextValue | (JreURShift32(bytes, bits));
      while (bits >= bitsPerValue_) {
        bits -= bitsPerValue_;
        *IOSIntArray_GetRef(values, valuesOffset++) = (JreURShift32(bytes, bits)) & intMask_;
      }
      bitsLeft = bitsPerValue_ - bits;
      nextValue = JreLShift32((bytes & ((JreLShift32(1, bits)) - 1)), bitsLeft);
    }
  }
  JreAssert(bitsLeft == bitsPerValue_, @"org/apache/lucene/util/packed/BulkOperationPacked.java:168 condition failed: assert bitsLeft == bitsPerValue;");
}

- (void)encodeWithLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
              withLongArray:(IOSLongArray *)blocks
                    withInt:(jint)blocksOffset
                    withInt:(jint)iterations {
  jlong nextBlock = 0;
  jint bitsLeft = 64;
  for (jint i = 0; i < longValueCount_ * iterations; ++i) {
    bitsLeft -= bitsPerValue_;
    if (bitsLeft > 0) {
      nextBlock |= JreLShift64(IOSLongArray_Get(nil_chk(values), valuesOffset++), bitsLeft);
    }
    else if (bitsLeft == 0) {
      nextBlock |= IOSLongArray_Get(nil_chk(values), valuesOffset++);
      *IOSLongArray_GetRef(nil_chk(blocks), blocksOffset++) = nextBlock;
      nextBlock = 0;
      bitsLeft = 64;
    }
    else {
      nextBlock |= JreURShift64(IOSLongArray_Get(nil_chk(values), valuesOffset), -bitsLeft);
      *IOSLongArray_GetRef(nil_chk(blocks), blocksOffset++) = nextBlock;
      nextBlock = JreLShift64((IOSLongArray_Get(values, valuesOffset++) & ((JreLShift64(1LL, -bitsLeft)) - 1)), (64 + bitsLeft));
      bitsLeft += 64;
    }
  }
}

- (void)encodeWithIntArray:(IOSIntArray *)values
                   withInt:(jint)valuesOffset
             withLongArray:(IOSLongArray *)blocks
                   withInt:(jint)blocksOffset
                   withInt:(jint)iterations {
  jlong nextBlock = 0;
  jint bitsLeft = 64;
  for (jint i = 0; i < longValueCount_ * iterations; ++i) {
    bitsLeft -= bitsPerValue_;
    if (bitsLeft > 0) {
      nextBlock |= JreLShift64((IOSIntArray_Get(nil_chk(values), valuesOffset++) & (jlong) 0xFFFFFFFFLL), bitsLeft);
    }
    else if (bitsLeft == 0) {
      nextBlock |= (IOSIntArray_Get(nil_chk(values), valuesOffset++) & (jlong) 0xFFFFFFFFLL);
      *IOSLongArray_GetRef(nil_chk(blocks), blocksOffset++) = nextBlock;
      nextBlock = 0;
      bitsLeft = 64;
    }
    else {
      nextBlock |= JreURShift64((IOSIntArray_Get(nil_chk(values), valuesOffset) & (jlong) 0xFFFFFFFFLL), -bitsLeft);
      *IOSLongArray_GetRef(nil_chk(blocks), blocksOffset++) = nextBlock;
      nextBlock = JreLShift64((IOSIntArray_Get(values, valuesOffset++) & ((JreLShift64(1LL, -bitsLeft)) - 1)), (64 + bitsLeft));
      bitsLeft += 64;
    }
  }
}

- (void)encodeWithLongArray:(IOSLongArray *)values
                    withInt:(jint)valuesOffset
              withByteArray:(IOSByteArray *)blocks
                    withInt:(jint)blocksOffset
                    withInt:(jint)iterations {
  jint nextBlock = 0;
  jint bitsLeft = 8;
  for (jint i = 0; i < byteValueCount_ * iterations; ++i) {
    jlong v = IOSLongArray_Get(nil_chk(values), valuesOffset++);
    JreAssert(OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(v) <= bitsPerValue_, @"org/apache/lucene/util/packed/BulkOperationPacked.java:224 condition failed: assert PackedInts.unsignedBitsRequired(v) <= bitsPerValue;");
    if (bitsPerValue_ < bitsLeft) {
      nextBlock |= JreLShift64(v, (bitsLeft - bitsPerValue_));
      bitsLeft -= bitsPerValue_;
    }
    else {
      jint bits = bitsPerValue_ - bitsLeft;
      *IOSByteArray_GetRef(nil_chk(blocks), blocksOffset++) = (jbyte) (nextBlock | (JreURShift64(v, bits)));
      while (bits >= 8) {
        bits -= 8;
        *IOSByteArray_GetRef(blocks, blocksOffset++) = (jbyte) (JreURShift64(v, bits));
      }
      bitsLeft = 8 - bits;
      nextBlock = (jint) (JreLShift64((v & ((JreLShift64(1LL, bits)) - 1)), bitsLeft));
    }
  }
  JreAssert(bitsLeft == 8, @"org/apache/lucene/util/packed/BulkOperationPacked.java:242 condition failed: assert bitsLeft == 8;");
}

- (void)encodeWithIntArray:(IOSIntArray *)values
                   withInt:(jint)valuesOffset
             withByteArray:(IOSByteArray *)blocks
                   withInt:(jint)blocksOffset
                   withInt:(jint)iterations {
  jint nextBlock = 0;
  jint bitsLeft = 8;
  for (jint i = 0; i < byteValueCount_ * iterations; ++i) {
    jint v = IOSIntArray_Get(nil_chk(values), valuesOffset++);
    JreAssert(OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(v & (jlong) 0xFFFFFFFFLL) <= bitsPerValue_, @"org/apache/lucene/util/packed/BulkOperationPacked.java:252 condition failed: assert PackedInts.bitsRequired(v & 0xFFFFFFFFL) <= bitsPerValue;");
    if (bitsPerValue_ < bitsLeft) {
      nextBlock |= JreLShift32(v, (bitsLeft - bitsPerValue_));
      bitsLeft -= bitsPerValue_;
    }
    else {
      jint bits = bitsPerValue_ - bitsLeft;
      *IOSByteArray_GetRef(nil_chk(blocks), blocksOffset++) = (jbyte) (nextBlock | (JreURShift32(v, bits)));
      while (bits >= 8) {
        bits -= 8;
        *IOSByteArray_GetRef(blocks, blocksOffset++) = (jbyte) (JreURShift32(v, bits));
      }
      bitsLeft = 8 - bits;
      nextBlock = JreLShift32((v & ((JreLShift32(1, bits)) - 1)), bitsLeft);
    }
  }
  JreAssert(bitsLeft == 8, @"org/apache/lucene/util/packed/BulkOperationPacked.java:270 condition failed: assert bitsLeft == 8;");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:);
  methods[1].selector = @selector(longBlockCount);
  methods[2].selector = @selector(longValueCount);
  methods[3].selector = @selector(byteBlockCount);
  methods[4].selector = @selector(byteValueCount);
  methods[5].selector = @selector(decodeWithLongArray:withInt:withLongArray:withInt:withInt:);
  methods[6].selector = @selector(decodeWithByteArray:withInt:withLongArray:withInt:withInt:);
  methods[7].selector = @selector(decodeWithLongArray:withInt:withIntArray:withInt:withInt:);
  methods[8].selector = @selector(decodeWithByteArray:withInt:withIntArray:withInt:withInt:);
  methods[9].selector = @selector(encodeWithLongArray:withInt:withLongArray:withInt:withInt:);
  methods[10].selector = @selector(encodeWithIntArray:withInt:withLongArray:withInt:withInt:);
  methods[11].selector = @selector(encodeWithLongArray:withInt:withByteArray:withInt:withInt:);
  methods[12].selector = @selector(encodeWithIntArray:withInt:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bitsPerValue_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "longBlockCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "longValueCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "byteBlockCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "byteValueCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mask_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "intMask_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "decode", "[JI[JII", "[BI[JII", "[JI[III", "[BI[III", "encode", "[II[JII", "[JI[BII", "[II[BII" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedBulkOperationPacked = { "BulkOperationPacked", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x0, 13, 7, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedBulkOperationPacked;
}

@end

void OrgApacheLuceneUtilPackedBulkOperationPacked_initPackagePrivateWithInt_(OrgApacheLuceneUtilPackedBulkOperationPacked *self, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedBulkOperation_initPackagePrivate(self);
  self->bitsPerValue_ = bitsPerValue;
  JreAssert(bitsPerValue > 0 && bitsPerValue <= 64, @"org/apache/lucene/util/packed/BulkOperationPacked.java:36 condition failed: assert bitsPerValue > 0 && bitsPerValue <= 64;");
  jint blocks = bitsPerValue;
  while ((blocks & 1) == 0) {
    JreURShiftAssignInt(&blocks, 1);
  }
  self->longBlockCount_ = blocks;
  self->longValueCount_ = JreIntDiv(64 * self->longBlockCount_, bitsPerValue);
  jint byteBlockCount = 8 * self->longBlockCount_;
  jint byteValueCount = self->longValueCount_;
  while ((byteBlockCount & 1) == 0 && (byteValueCount & 1) == 0) {
    JreURShiftAssignInt(&byteBlockCount, 1);
    JreURShiftAssignInt(&byteValueCount, 1);
  }
  self->byteBlockCount_ = byteBlockCount;
  self->byteValueCount_ = byteValueCount;
  if (bitsPerValue == 64) {
    self->mask_ = ~0LL;
  }
  else {
    self->mask_ = (JreLShift64(1LL, bitsPerValue)) - 1;
  }
  self->intMask_ = (jint) self->mask_;
  JreAssert(self->longValueCount_ * bitsPerValue == 64 * self->longBlockCount_, @"org/apache/lucene/util/packed/BulkOperationPacked.java:57 condition failed: assert longValueCount * bitsPerValue == 64 * longBlockCount;");
}

OrgApacheLuceneUtilPackedBulkOperationPacked *new_OrgApacheLuceneUtilPackedBulkOperationPacked_initPackagePrivateWithInt_(jint bitsPerValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedBulkOperationPacked, initPackagePrivateWithInt_, bitsPerValue)
}

OrgApacheLuceneUtilPackedBulkOperationPacked *create_OrgApacheLuceneUtilPackedBulkOperationPacked_initPackagePrivateWithInt_(jint bitsPerValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedBulkOperationPacked, initPackagePrivateWithInt_, bitsPerValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedBulkOperationPacked)
