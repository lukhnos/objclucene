//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/AbstractBlockPackedWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/packed/AbstractBlockPackedWriter.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/AbstractBlockPackedWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilPackedAbstractBlockPackedWriter ()

- (void)checkNotFinished;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_checkNotFinished(OrgApacheLuceneUtilPackedAbstractBlockPackedWriter *self);

@implementation OrgApacheLuceneUtilPackedAbstractBlockPackedWriter

+ (jint)MIN_BLOCK_SIZE {
  return OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MIN_BLOCK_SIZE;
}

+ (jint)MAX_BLOCK_SIZE {
  return OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MAX_BLOCK_SIZE;
}

+ (jint)MIN_VALUE_EQUALS_0 {
  return OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MIN_VALUE_EQUALS_0;
}

+ (jint)BPV_SHIFT {
  return OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_BPV_SHIFT;
}

+ (void)writeVLongWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                            withLong:(jlong)i {
  OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_writeVLongWithOrgApacheLuceneStoreDataOutput_withLong_(outArg, i);
}

- (instancetype)initPackagePrivateWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                                             withInt:(jint)blockSize {
  OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_initPackagePrivateWithOrgApacheLuceneStoreDataOutput_withInt_(self, outArg, blockSize);
  return self;
}

- (void)resetWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  JreAssert(outArg != nil, @"org/apache/lucene/util/packed/AbstractBlockPackedWriter.java:63 condition failed: assert out != null;");
  JreStrongAssign(&self->out_, outArg);
  off_ = 0;
  ord_ = 0LL;
  finished_ = false;
}

- (void)checkNotFinished {
  OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_checkNotFinished(self);
}

- (void)addWithLong:(jlong)l {
  OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_checkNotFinished(self);
  if (off_ == ((IOSLongArray *) nil_chk(values_))->size_) {
    [self flush];
  }
  *IOSLongArray_GetRef(values_, off_++) = l;
  ++ord_;
}

- (void)addBlockOfZeros {
  OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_checkNotFinished(self);
  if (off_ != 0 && off_ != ((IOSLongArray *) nil_chk(values_))->size_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("I", off_));
  }
  if (off_ == ((IOSLongArray *) nil_chk(values_))->size_) {
    [self flush];
  }
  JavaUtilArrays_fillWithLongArray_withLong_(values_, 0);
  off_ = values_->size_;
  ord_ += values_->size_;
}

- (void)finish {
  OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_checkNotFinished(self);
  if (off_ > 0) {
    [self flush];
  }
  finished_ = true;
}

- (jlong)ord {
  return ord_;
}

- (void)flush {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)writeValuesWithInt:(jint)bitsRequired {
  id<OrgApacheLuceneUtilPackedPackedInts_Encoder> encoder = OrgApacheLuceneUtilPackedPackedInts_getEncoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, bitsRequired);
  jint iterations = JreIntDiv(((IOSLongArray *) nil_chk(values_))->size_, [((id<OrgApacheLuceneUtilPackedPackedInts_Encoder>) nil_chk(encoder)) byteValueCount]);
  jint blockSize = [encoder byteBlockCount] * iterations;
  if (blocks_ == nil || blocks_->size_ < blockSize) {
    JreStrongAssignAndConsume(&blocks_, [IOSByteArray newArrayWithLength:blockSize]);
  }
  if (off_ < values_->size_) {
    JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(values_, off_, values_->size_, 0LL);
  }
  [encoder encodeWithLongArray:values_ withInt:0 withByteArray:blocks_ withInt:0 withInt:iterations];
  jint blockCount = (jint) [((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED))) byteCountWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT withInt:off_ withInt:bitsRequired];
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeBytesWithByteArray:blocks_ withInt:blockCount];
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(values_);
  RELEASE_(blocks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x8, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x14, 8, 9, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(writeVLongWithOrgApacheLuceneStoreDataOutput:withLong:);
  methods[1].selector = @selector(initPackagePrivateWithOrgApacheLuceneStoreDataOutput:withInt:);
  methods[2].selector = @selector(resetWithOrgApacheLuceneStoreDataOutput:);
  methods[3].selector = @selector(checkNotFinished);
  methods[4].selector = @selector(addWithLong:);
  methods[5].selector = @selector(addBlockOfZeros);
  methods[6].selector = @selector(finish);
  methods[7].selector = @selector(ord);
  methods[8].selector = @selector(flush);
  methods[9].selector = @selector(writeValuesWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MIN_BLOCK_SIZE, 0x18, -1, -1, -1, -1 },
    { "MAX_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MAX_BLOCK_SIZE, 0x18, -1, -1, -1, -1 },
    { "MIN_VALUE_EQUALS_0", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MIN_VALUE_EQUALS_0, 0x18, -1, -1, -1, -1 },
    { "BPV_SHIFT", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_BPV_SHIFT, 0x18, -1, -1, -1, -1 },
    { "out_", "LOrgApacheLuceneStoreDataOutput;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "values_", "[J", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "blocks_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "off_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ord_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "finished_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "writeVLong", "LOrgApacheLuceneStoreDataOutput;J", "LJavaIoIOException;", "LOrgApacheLuceneStoreDataOutput;I", "reset", "LOrgApacheLuceneStoreDataOutput;", "add", "J", "writeValues", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedAbstractBlockPackedWriter = { "AbstractBlockPackedWriter", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x400, 10, 10, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedAbstractBlockPackedWriter;
}

@end

void OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_writeVLongWithOrgApacheLuceneStoreDataOutput_withLong_(OrgApacheLuceneStoreDataOutput *outArg, jlong i) {
  OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_initialize();
  jint k = 0;
  while ((i & ~(jlong) 0x7FLL) != 0LL && k++ < 8) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) ((i & (jlong) 0x7FLL) | (jlong) 0x80LL)];
    JreURShiftAssignLong(&i, 7);
  }
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) i];
}

void OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_initPackagePrivateWithOrgApacheLuceneStoreDataOutput_withInt_(OrgApacheLuceneUtilPackedAbstractBlockPackedWriter *self, OrgApacheLuceneStoreDataOutput *outArg, jint blockSize) {
  NSObject_init(self);
  OrgApacheLuceneUtilPackedPackedInts_checkBlockSizeWithInt_withInt_withInt_(blockSize, OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MIN_BLOCK_SIZE, OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_MAX_BLOCK_SIZE);
  [self resetWithOrgApacheLuceneStoreDataOutput:outArg];
  JreStrongAssignAndConsume(&self->values_, [IOSLongArray newArrayWithLength:blockSize]);
}

void OrgApacheLuceneUtilPackedAbstractBlockPackedWriter_checkNotFinished(OrgApacheLuceneUtilPackedAbstractBlockPackedWriter *self) {
  if (self->finished_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Already finished");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedAbstractBlockPackedWriter)
