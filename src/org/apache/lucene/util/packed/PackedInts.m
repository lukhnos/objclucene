//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/PackedInts.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/packed/BulkOperation.h"
#include "org/apache/lucene/util/packed/Direct16.h"
#include "org/apache/lucene/util/packed/Direct32.h"
#include "org/apache/lucene/util/packed/Direct64.h"
#include "org/apache/lucene/util/packed/Direct8.h"
#include "org/apache/lucene/util/packed/DirectPacked64SingleBlockReader.h"
#include "org/apache/lucene/util/packed/DirectPackedReader.h"
#include "org/apache/lucene/util/packed/Packed16ThreeBlocks.h"
#include "org/apache/lucene/util/packed/Packed64.h"
#include "org/apache/lucene/util/packed/Packed64SingleBlock.h"
#include "org/apache/lucene/util/packed/Packed8ThreeBlocks.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/apache/lucene/util/packed/PackedReaderIterator.h"
#include "org/apache/lucene/util/packed/PackedWriter.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/packed/PackedInts must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedInts_Format_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *self, jint id_, NSString *__name, jint __ordinal);

@interface OrgApacheLuceneUtilPackedPackedInts_Format_1 : OrgApacheLuceneUtilPackedPackedInts_Format

- (jlong)byteCountWithInt:(jint)packedIntsVersion
                  withInt:(jint)valueCount
                  withInt:(jint)bitsPerValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilPackedPackedInts_Format_1)

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedInts_Format_1_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format_1 *self, jint id_, NSString *__name, jint __ordinal);

@interface OrgApacheLuceneUtilPackedPackedInts_Format_2 : OrgApacheLuceneUtilPackedPackedInts_Format

- (jint)longCountWithInt:(jint)packedIntsVersion
                 withInt:(jint)valueCount
                 withInt:(jint)bitsPerValue;

- (jboolean)isSupportedWithInt:(jint)bitsPerValue;

- (jfloat)overheadPerValueWithInt:(jint)bitsPerValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilPackedPackedInts_Format_2)

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedInts_Format_2_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format_2 *self, jint id_, NSString *__name, jint __ordinal);

@interface OrgApacheLuceneUtilPackedPackedInts_Decoder : NSObject

@end

@interface OrgApacheLuceneUtilPackedPackedInts_Encoder : NSObject

@end

@interface OrgApacheLuceneUtilPackedPackedInts_ReaderIterator : NSObject

@end

@interface OrgApacheLuceneUtilPackedPackedInts_NullReader () {
 @public
  jint valueCount_;
}

@end

@interface OrgApacheLuceneUtilPackedPackedInts_1 : OrgApacheLuceneUtilPackedDirectPackedReader {
 @public
  jlong val$endPointer_;
}

- (instancetype)initWithLong:(jlong)capture$0
                     withInt:(jint)bitsPerValue
                     withInt:(jint)valueCount
withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg;

- (jlong)getWithInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilPackedPackedInts_1)

__attribute__((unused)) static void OrgApacheLuceneUtilPackedPackedInts_1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneUtilPackedPackedInts_1 *self, jlong capture$0, jint bitsPerValue, jint valueCount, OrgApacheLuceneStoreIndexInput *inArg);

__attribute__((unused)) static OrgApacheLuceneUtilPackedPackedInts_1 *new_OrgApacheLuceneUtilPackedPackedInts_1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(jlong capture$0, jint bitsPerValue, jint valueCount, OrgApacheLuceneStoreIndexInput *inArg) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilPackedPackedInts_1 *create_OrgApacheLuceneUtilPackedPackedInts_1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(jlong capture$0, jint bitsPerValue, jint valueCount, OrgApacheLuceneStoreIndexInput *inArg);

NSString *OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME = @"PackedInts";

@implementation OrgApacheLuceneUtilPackedPackedInts

+ (jfloat)FASTEST {
  return OrgApacheLuceneUtilPackedPackedInts_FASTEST;
}

+ (jfloat)FAST {
  return OrgApacheLuceneUtilPackedPackedInts_FAST;
}

+ (jfloat)DEFAULT {
  return OrgApacheLuceneUtilPackedPackedInts_DEFAULT;
}

+ (jfloat)COMPACT {
  return OrgApacheLuceneUtilPackedPackedInts_COMPACT;
}

+ (jint)DEFAULT_BUFFER_SIZE {
  return OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE;
}

+ (NSString *)CODEC_NAME {
  return OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME;
}

+ (jint)VERSION_START {
  return OrgApacheLuceneUtilPackedPackedInts_VERSION_START;
}

+ (jint)VERSION_BYTE_ALIGNED {
  return OrgApacheLuceneUtilPackedPackedInts_VERSION_BYTE_ALIGNED;
}

+ (jint)VERSION_MONOTONIC_WITHOUT_ZIGZAG {
  return OrgApacheLuceneUtilPackedPackedInts_VERSION_MONOTONIC_WITHOUT_ZIGZAG;
}

+ (jint)VERSION_CURRENT {
  return OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilPackedPackedInts_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)checkVersionWithInt:(jint)version_ {
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
}

+ (OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *)fastestFormatAndBitsWithInt:(jint)valueCount
                                                                           withInt:(jint)bitsPerValue
                                                                         withFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedInts_fastestFormatAndBitsWithInt_withInt_withFloat_(valueCount, bitsPerValue, acceptableOverheadRatio);
}

+ (id<OrgApacheLuceneUtilPackedPackedInts_Decoder>)getDecoderWithOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                                                                                    withInt:(jint)version_
                                                                                                    withInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(format, version_, bitsPerValue);
}

+ (id<OrgApacheLuceneUtilPackedPackedInts_Encoder>)getEncoderWithOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                                                                                    withInt:(jint)version_
                                                                                                    withInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_getEncoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(format, version_, bitsPerValue);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Reader *)getReaderNoHeaderWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                                    withOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                                                                           withInt:(jint)version_
                                                                                           withInt:(jint)valueCount
                                                                                           withInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Reader *)getReaderWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  return OrgApacheLuceneUtilPackedPackedInts_getReaderWithOrgApacheLuceneStoreDataInput_(inArg);
}

+ (id<OrgApacheLuceneUtilPackedPackedInts_ReaderIterator>)getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                                                      withOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                                                                                             withInt:(jint)version_
                                                                                                             withInt:(jint)valueCount
                                                                                                             withInt:(jint)bitsPerValue
                                                                                                             withInt:(jint)mem {
  return OrgApacheLuceneUtilPackedPackedInts_getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue, mem);
}

+ (id<OrgApacheLuceneUtilPackedPackedInts_ReaderIterator>)getReaderIteratorWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                                                                                     withInt:(jint)mem {
  return OrgApacheLuceneUtilPackedPackedInts_getReaderIteratorWithOrgApacheLuceneStoreDataInput_withInt_(inArg, mem);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Reader *)getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg
                                                           withOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                                                                                  withInt:(jint)version_
                                                                                                  withInt:(jint)valueCount
                                                                                                  withInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Reader *)getDirectReaderWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg {
  return OrgApacheLuceneUtilPackedPackedInts_getDirectReaderWithOrgApacheLuceneStoreIndexInput_(inArg);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Mutable *)getMutableWithInt:(jint)valueCount
                                                           withInt:(jint)bitsPerValue
                                                         withFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(valueCount, bitsPerValue, acceptableOverheadRatio);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Mutable *)getMutableWithInt:(jint)valueCount
                                                           withInt:(jint)bitsPerValue
                    withOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format {
  return OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Format_(valueCount, bitsPerValue, format);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Writer *)getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                                     withOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                                                                            withInt:(jint)valueCount
                                                                                            withInt:(jint)bitsPerValue
                                                                                            withInt:(jint)mem {
  return OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(outArg, format, valueCount, bitsPerValue, mem);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Writer *)getWriterWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                                                                    withInt:(jint)valueCount
                                                                                    withInt:(jint)bitsPerValue
                                                                                  withFloat:(jfloat)acceptableOverheadRatio {
  return OrgApacheLuceneUtilPackedPackedInts_getWriterWithOrgApacheLuceneStoreDataOutput_withInt_withInt_withFloat_(outArg, valueCount, bitsPerValue, acceptableOverheadRatio);
}

+ (jint)bitsRequiredWithLong:(jlong)maxValue {
  return OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(maxValue);
}

+ (jint)unsignedBitsRequiredWithLong:(jlong)bits {
  return OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(bits);
}

+ (jlong)maxValueWithInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(bitsPerValue);
}

+ (void)copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)src
                                                     withInt:(jint)srcPos
             withOrgApacheLuceneUtilPackedPackedInts_Mutable:(OrgApacheLuceneUtilPackedPackedInts_Mutable *)dest
                                                     withInt:(jint)destPos
                                                     withInt:(jint)len
                                                     withInt:(jint)mem {
  OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withInt_(src, srcPos, dest, destPos, len, mem);
}

+ (void)copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader:(OrgApacheLuceneUtilPackedPackedInts_Reader *)src
                                                     withInt:(jint)srcPos
             withOrgApacheLuceneUtilPackedPackedInts_Mutable:(OrgApacheLuceneUtilPackedPackedInts_Mutable *)dest
                                                     withInt:(jint)destPos
                                                     withInt:(jint)len
                                               withLongArray:(IOSLongArray *)buf {
  OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withLongArray_(src, srcPos, dest, destPos, len, buf);
}

+ (jint)checkBlockSizeWithInt:(jint)blockSize
                      withInt:(jint)minBlockSize
                      withInt:(jint)maxBlockSize {
  return OrgApacheLuceneUtilPackedPackedInts_checkBlockSizeWithInt_withInt_withInt_(blockSize, minBlockSize, maxBlockSize);
}

+ (jint)numBlocksWithLong:(jlong)size
                  withInt:(jint)blockSize {
  return OrgApacheLuceneUtilPackedPackedInts_numBlocksWithLong_withInt_(size, blockSize);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_FormatAndBits;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Decoder;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Encoder;", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Reader;", 0x9, 7, 8, 9, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Reader;", 0x9, 10, 11, 9, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_ReaderIterator;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_ReaderIterator;", 0x9, 14, 15, 9, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Reader;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Reader;", 0x9, 18, 19, 9, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Mutable;", 0x9, 20, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Mutable;", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Writer;", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Writer;", 0x9, 24, 25, 9, -1, -1, -1 },
    { NULL, "I", 0x9, 26, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 28, 27, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 29, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 30, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkVersionWithInt:);
  methods[2].selector = @selector(fastestFormatAndBitsWithInt:withInt:withFloat:);
  methods[3].selector = @selector(getDecoderWithOrgApacheLuceneUtilPackedPackedInts_Format:withInt:withInt:);
  methods[4].selector = @selector(getEncoderWithOrgApacheLuceneUtilPackedPackedInts_Format:withInt:withInt:);
  methods[5].selector = @selector(getReaderNoHeaderWithOrgApacheLuceneStoreDataInput:withOrgApacheLuceneUtilPackedPackedInts_Format:withInt:withInt:withInt:);
  methods[6].selector = @selector(getReaderWithOrgApacheLuceneStoreDataInput:);
  methods[7].selector = @selector(getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput:withOrgApacheLuceneUtilPackedPackedInts_Format:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(getReaderIteratorWithOrgApacheLuceneStoreDataInput:withInt:);
  methods[9].selector = @selector(getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneUtilPackedPackedInts_Format:withInt:withInt:withInt:);
  methods[10].selector = @selector(getDirectReaderWithOrgApacheLuceneStoreIndexInput:);
  methods[11].selector = @selector(getMutableWithInt:withInt:withFloat:);
  methods[12].selector = @selector(getMutableWithInt:withInt:withOrgApacheLuceneUtilPackedPackedInts_Format:);
  methods[13].selector = @selector(getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput:withOrgApacheLuceneUtilPackedPackedInts_Format:withInt:withInt:withInt:);
  methods[14].selector = @selector(getWriterWithOrgApacheLuceneStoreDataOutput:withInt:withInt:withFloat:);
  methods[15].selector = @selector(bitsRequiredWithLong:);
  methods[16].selector = @selector(unsignedBitsRequiredWithLong:);
  methods[17].selector = @selector(maxValueWithInt:);
  methods[18].selector = @selector(copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader:withInt:withOrgApacheLuceneUtilPackedPackedInts_Mutable:withInt:withInt:withInt:);
  methods[19].selector = @selector(copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader:withInt:withOrgApacheLuceneUtilPackedPackedInts_Mutable:withInt:withInt:withLongArray:);
  methods[20].selector = @selector(checkBlockSizeWithInt:withInt:withInt:);
  methods[21].selector = @selector(numBlocksWithLong:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FASTEST", "F", .constantValue.asFloat = OrgApacheLuceneUtilPackedPackedInts_FASTEST, 0x19, -1, -1, -1, -1 },
    { "FAST", "F", .constantValue.asFloat = OrgApacheLuceneUtilPackedPackedInts_FAST, 0x19, -1, -1, -1, -1 },
    { "DEFAULT", "F", .constantValue.asFloat = OrgApacheLuceneUtilPackedPackedInts_DEFAULT, 0x19, -1, -1, -1, -1 },
    { "COMPACT", "F", .constantValue.asFloat = OrgApacheLuceneUtilPackedPackedInts_COMPACT, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_BUFFER_SIZE", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE, 0x19, -1, -1, -1, -1 },
    { "CODEC_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "VERSION_START", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_VERSION_START, 0x19, -1, -1, -1, -1 },
    { "VERSION_BYTE_ALIGNED", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_VERSION_BYTE_ALIGNED, 0x19, -1, -1, -1, -1 },
    { "VERSION_MONOTONIC_WITHOUT_ZIGZAG", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_VERSION_MONOTONIC_WITHOUT_ZIGZAG, 0x19, -1, -1, -1, -1 },
    { "VERSION_CURRENT", "I", .constantValue.asInt = OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "checkVersion", "I", "fastestFormatAndBits", "IIF", "getDecoder", "LOrgApacheLuceneUtilPackedPackedInts_Format;II", "getEncoder", "getReaderNoHeader", "LOrgApacheLuceneStoreDataInput;LOrgApacheLuceneUtilPackedPackedInts_Format;III", "LJavaIoIOException;", "getReader", "LOrgApacheLuceneStoreDataInput;", "getReaderIteratorNoHeader", "LOrgApacheLuceneStoreDataInput;LOrgApacheLuceneUtilPackedPackedInts_Format;IIII", "getReaderIterator", "LOrgApacheLuceneStoreDataInput;I", "getDirectReaderNoHeader", "LOrgApacheLuceneStoreIndexInput;LOrgApacheLuceneUtilPackedPackedInts_Format;III", "getDirectReader", "LOrgApacheLuceneStoreIndexInput;", "getMutable", "IILOrgApacheLuceneUtilPackedPackedInts_Format;", "getWriterNoHeader", "LOrgApacheLuceneStoreDataOutput;LOrgApacheLuceneUtilPackedPackedInts_Format;III", "getWriter", "LOrgApacheLuceneStoreDataOutput;IIF", "bitsRequired", "J", "unsignedBitsRequired", "maxValue", "copy", "LOrgApacheLuceneUtilPackedPackedInts_Reader;ILOrgApacheLuceneUtilPackedPackedInts_Mutable;III", "LOrgApacheLuceneUtilPackedPackedInts_Reader;ILOrgApacheLuceneUtilPackedPackedInts_Mutable;II[J", "checkBlockSize", "III", "numBlocks", "JI", &OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME, "LOrgApacheLuceneUtilPackedPackedInts_Format;LOrgApacheLuceneUtilPackedPackedInts_FormatAndBits;LOrgApacheLuceneUtilPackedPackedInts_Decoder;LOrgApacheLuceneUtilPackedPackedInts_Encoder;LOrgApacheLuceneUtilPackedPackedInts_Reader;LOrgApacheLuceneUtilPackedPackedInts_ReaderIterator;LOrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl;LOrgApacheLuceneUtilPackedPackedInts_Mutable;LOrgApacheLuceneUtilPackedPackedInts_ReaderImpl;LOrgApacheLuceneUtilPackedPackedInts_MutableImpl;LOrgApacheLuceneUtilPackedPackedInts_NullReader;LOrgApacheLuceneUtilPackedPackedInts_Writer;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts = { "PackedInts", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x1, 22, 10, -1, 38, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_init(OrgApacheLuceneUtilPackedPackedInts *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilPackedPackedInts *new_OrgApacheLuceneUtilPackedPackedInts_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPackedInts, init)
}

OrgApacheLuceneUtilPackedPackedInts *create_OrgApacheLuceneUtilPackedPackedInts_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPackedInts, init)
}

void OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(jint version_) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  if (version_ < OrgApacheLuceneUtilPackedPackedInts_VERSION_START) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"Version is too old, should be at least ", OrgApacheLuceneUtilPackedPackedInts_VERSION_START, @" (got ", version_, ')'));
  }
  else if (version_ > OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"Version is too new, should be at most ", OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, @" (got ", version_, ')'));
  }
}

OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *OrgApacheLuceneUtilPackedPackedInts_fastestFormatAndBitsWithInt_withInt_withFloat_(jint valueCount, jint bitsPerValue, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  if (valueCount == -1) {
    valueCount = JavaLangInteger_MAX_VALUE;
  }
  acceptableOverheadRatio = JavaLangMath_maxWithFloat_withFloat_(OrgApacheLuceneUtilPackedPackedInts_COMPACT, acceptableOverheadRatio);
  acceptableOverheadRatio = JavaLangMath_minWithFloat_withFloat_(OrgApacheLuceneUtilPackedPackedInts_FASTEST, acceptableOverheadRatio);
  jfloat acceptableOverheadPerValue = acceptableOverheadRatio * bitsPerValue;
  jint maxBitsPerValue = bitsPerValue + JreFpToInt(acceptableOverheadPerValue);
  jint actualBitsPerValue = -1;
  OrgApacheLuceneUtilPackedPackedInts_Format *format = JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED);
  if (bitsPerValue <= 8 && maxBitsPerValue >= 8) {
    actualBitsPerValue = 8;
  }
  else if (bitsPerValue <= 16 && maxBitsPerValue >= 16) {
    actualBitsPerValue = 16;
  }
  else if (bitsPerValue <= 32 && maxBitsPerValue >= 32) {
    actualBitsPerValue = 32;
  }
  else if (bitsPerValue <= 64 && maxBitsPerValue >= 64) {
    actualBitsPerValue = 64;
  }
  else if (valueCount <= OrgApacheLuceneUtilPackedPacked8ThreeBlocks_MAX_SIZE && bitsPerValue <= 24 && maxBitsPerValue >= 24) {
    actualBitsPerValue = 24;
  }
  else if (valueCount <= OrgApacheLuceneUtilPackedPacked16ThreeBlocks_MAX_SIZE && bitsPerValue <= 48 && maxBitsPerValue >= 48) {
    actualBitsPerValue = 48;
  }
  else {
    for (jint bpv = bitsPerValue; bpv <= maxBitsPerValue; ++bpv) {
      if ([((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED_SINGLE_BLOCK))) isSupportedWithInt:bpv]) {
        jfloat overhead = [JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED_SINGLE_BLOCK) overheadPerValueWithInt:bpv];
        jfloat acceptableOverhead = acceptableOverheadPerValue + bitsPerValue - bpv;
        if (overhead <= acceptableOverhead) {
          actualBitsPerValue = bpv;
          format = JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED_SINGLE_BLOCK);
          break;
        }
      }
    }
    if (actualBitsPerValue < 0) {
      actualBitsPerValue = bitsPerValue;
    }
  }
  return create_OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(format, actualBitsPerValue);
}

id<OrgApacheLuceneUtilPackedPackedInts_Decoder> OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *format, jint version_, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  return OrgApacheLuceneUtilPackedBulkOperation_ofWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(format, bitsPerValue);
}

id<OrgApacheLuceneUtilPackedPackedInts_Encoder> OrgApacheLuceneUtilPackedPackedInts_getEncoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *format, jint version_, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  return OrgApacheLuceneUtilPackedBulkOperation_ofWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(format, bitsPerValue);
}

OrgApacheLuceneUtilPackedPackedInts_Reader *OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilPackedPackedInts_Format *format, jint version_, jint valueCount, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  switch ([format ordinal]) {
    case OrgApacheLuceneUtilPackedPackedInts_Format_Enum_PACKED_SINGLE_BLOCK:
    return OrgApacheLuceneUtilPackedPacked64SingleBlock_createWithOrgApacheLuceneStoreDataInput_withInt_withInt_(inArg, valueCount, bitsPerValue);
    case OrgApacheLuceneUtilPackedPackedInts_Format_Enum_PACKED:
    switch (bitsPerValue) {
      case 8:
      return create_OrgApacheLuceneUtilPackedDirect8_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount);
      case 16:
      return create_OrgApacheLuceneUtilPackedDirect16_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount);
      case 32:
      return create_OrgApacheLuceneUtilPackedDirect32_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount);
      case 64:
      return create_OrgApacheLuceneUtilPackedDirect64_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount);
      case 24:
      if (valueCount <= OrgApacheLuceneUtilPackedPacked8ThreeBlocks_MAX_SIZE) {
        return create_OrgApacheLuceneUtilPackedPacked8ThreeBlocks_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount);
      }
      break;
      case 48:
      if (valueCount <= OrgApacheLuceneUtilPackedPacked16ThreeBlocks_MAX_SIZE) {
        return create_OrgApacheLuceneUtilPackedPacked16ThreeBlocks_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_(version_, inArg, valueCount);
      }
      break;
    }
    return create_OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withOrgApacheLuceneStoreDataInput_withInt_withInt_(version_, inArg, valueCount, bitsPerValue);
    default:
    @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unknown Writer format: ", format));
  }
}

OrgApacheLuceneUtilPackedPackedInts_Reader *OrgApacheLuceneUtilPackedPackedInts_getReaderWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneStoreDataInput *inArg) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  jint version_ = OrgApacheLuceneCodecsCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME, OrgApacheLuceneUtilPackedPackedInts_VERSION_START, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT);
  jint bitsPerValue = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  JreAssert(bitsPerValue > 0 && bitsPerValue <= 64, JreStrcat("$I", @"bitsPerValue=", bitsPerValue));
  jint valueCount = [inArg readVInt];
  OrgApacheLuceneUtilPackedPackedInts_Format *format = OrgApacheLuceneUtilPackedPackedInts_Format_byIdWithInt_([inArg readVInt]);
  return OrgApacheLuceneUtilPackedPackedInts_getReaderNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue);
}

id<OrgApacheLuceneUtilPackedPackedInts_ReaderIterator> OrgApacheLuceneUtilPackedPackedInts_getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_withInt_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilPackedPackedInts_Format *format, jint version_, jint valueCount, jint bitsPerValue, jint mem) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  return create_OrgApacheLuceneUtilPackedPackedReaderIterator_initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_withOrgApacheLuceneStoreDataInput_withInt_(format, version_, valueCount, bitsPerValue, inArg, mem);
}

id<OrgApacheLuceneUtilPackedPackedInts_ReaderIterator> OrgApacheLuceneUtilPackedPackedInts_getReaderIteratorWithOrgApacheLuceneStoreDataInput_withInt_(OrgApacheLuceneStoreDataInput *inArg, jint mem) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  jint version_ = OrgApacheLuceneCodecsCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME, OrgApacheLuceneUtilPackedPackedInts_VERSION_START, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT);
  jint bitsPerValue = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  JreAssert(bitsPerValue > 0 && bitsPerValue <= 64, JreStrcat("$I", @"bitsPerValue=", bitsPerValue));
  jint valueCount = [inArg readVInt];
  OrgApacheLuceneUtilPackedPackedInts_Format *format = OrgApacheLuceneUtilPackedPackedInts_Format_byIdWithInt_([inArg readVInt]);
  return OrgApacheLuceneUtilPackedPackedInts_getReaderIteratorNoHeaderWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue, mem);
}

OrgApacheLuceneUtilPackedPackedInts_Reader *OrgApacheLuceneUtilPackedPackedInts_getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(OrgApacheLuceneStoreIndexInput *inArg, OrgApacheLuceneUtilPackedPackedInts_Format *format, jint version_, jint valueCount, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(version_);
  {
    jlong byteCount;
    switch ([format ordinal]) {
      case OrgApacheLuceneUtilPackedPackedInts_Format_Enum_PACKED:
      byteCount = [((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(format)) byteCountWithInt:version_ withInt:valueCount withInt:bitsPerValue];
      if (byteCount != [format byteCountWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT withInt:valueCount withInt:bitsPerValue]) {
        JreAssert(version_ == OrgApacheLuceneUtilPackedPackedInts_VERSION_START, @"org/apache/lucene/util/packed/PackedInts.java:901 condition failed: assert version == VERSION_START;");
        jlong endPointer = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) getFilePointer] + byteCount;
        return create_OrgApacheLuceneUtilPackedPackedInts_1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(endPointer, bitsPerValue, valueCount, inArg);
      }
      else {
        return create_OrgApacheLuceneUtilPackedDirectPackedReader_initPackagePrivateWithInt_withInt_withOrgApacheLuceneStoreIndexInput_(bitsPerValue, valueCount, inArg);
      }
      case OrgApacheLuceneUtilPackedPackedInts_Format_Enum_PACKED_SINGLE_BLOCK:
      return create_OrgApacheLuceneUtilPackedDirectPacked64SingleBlockReader_initPackagePrivateWithInt_withInt_withOrgApacheLuceneStoreIndexInput_(bitsPerValue, valueCount, inArg);
      default:
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"Unknwown format: ", format));
    }
  }
}

OrgApacheLuceneUtilPackedPackedInts_Reader *OrgApacheLuceneUtilPackedPackedInts_getDirectReaderWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreIndexInput *inArg) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  jint version_ = OrgApacheLuceneCodecsCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME, OrgApacheLuceneUtilPackedPackedInts_VERSION_START, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT);
  jint bitsPerValue = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) readVInt];
  JreAssert(bitsPerValue > 0 && bitsPerValue <= 64, JreStrcat("$I", @"bitsPerValue=", bitsPerValue));
  jint valueCount = [inArg readVInt];
  OrgApacheLuceneUtilPackedPackedInts_Format *format = OrgApacheLuceneUtilPackedPackedInts_Format_byIdWithInt_([inArg readVInt]);
  return OrgApacheLuceneUtilPackedPackedInts_getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(inArg, format, version_, valueCount, bitsPerValue);
}

OrgApacheLuceneUtilPackedPackedInts_Mutable *OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(jint valueCount, jint bitsPerValue, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *formatAndBits = OrgApacheLuceneUtilPackedPackedInts_fastestFormatAndBitsWithInt_withInt_withFloat_(valueCount, bitsPerValue, acceptableOverheadRatio);
  return OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Format_(valueCount, ((OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *) nil_chk(formatAndBits))->bitsPerValue_, formatAndBits->format_);
}

OrgApacheLuceneUtilPackedPackedInts_Mutable *OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Format_(jint valueCount, jint bitsPerValue, OrgApacheLuceneUtilPackedPackedInts_Format *format) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  JreAssert(valueCount >= 0, @"org/apache/lucene/util/packed/PackedInts.java:984 condition failed: assert valueCount >= 0;");
  switch ([format ordinal]) {
    case OrgApacheLuceneUtilPackedPackedInts_Format_Enum_PACKED_SINGLE_BLOCK:
    return OrgApacheLuceneUtilPackedPacked64SingleBlock_createWithInt_withInt_(valueCount, bitsPerValue);
    case OrgApacheLuceneUtilPackedPackedInts_Format_Enum_PACKED:
    switch (bitsPerValue) {
      case 8:
      return create_OrgApacheLuceneUtilPackedDirect8_initPackagePrivateWithInt_(valueCount);
      case 16:
      return create_OrgApacheLuceneUtilPackedDirect16_initPackagePrivateWithInt_(valueCount);
      case 32:
      return create_OrgApacheLuceneUtilPackedDirect32_initPackagePrivateWithInt_(valueCount);
      case 64:
      return create_OrgApacheLuceneUtilPackedDirect64_initPackagePrivateWithInt_(valueCount);
      case 24:
      if (valueCount <= OrgApacheLuceneUtilPackedPacked8ThreeBlocks_MAX_SIZE) {
        return create_OrgApacheLuceneUtilPackedPacked8ThreeBlocks_initPackagePrivateWithInt_(valueCount);
      }
      break;
      case 48:
      if (valueCount <= OrgApacheLuceneUtilPackedPacked16ThreeBlocks_MAX_SIZE) {
        return create_OrgApacheLuceneUtilPackedPacked16ThreeBlocks_initPackagePrivateWithInt_(valueCount);
      }
      break;
    }
    return create_OrgApacheLuceneUtilPackedPacked64_initPackagePrivateWithInt_withInt_(valueCount, bitsPerValue);
    default:
    @throw create_JavaLangAssertionError_init();
  }
}

OrgApacheLuceneUtilPackedPackedInts_Writer *OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(OrgApacheLuceneStoreDataOutput *outArg, OrgApacheLuceneUtilPackedPackedInts_Format *format, jint valueCount, jint bitsPerValue, jint mem) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  return create_OrgApacheLuceneUtilPackedPackedWriter_initPackagePrivateWithOrgApacheLuceneUtilPackedPackedInts_Format_withOrgApacheLuceneStoreDataOutput_withInt_withInt_withInt_(format, outArg, valueCount, bitsPerValue, mem);
}

OrgApacheLuceneUtilPackedPackedInts_Writer *OrgApacheLuceneUtilPackedPackedInts_getWriterWithOrgApacheLuceneStoreDataOutput_withInt_withInt_withFloat_(OrgApacheLuceneStoreDataOutput *outArg, jint valueCount, jint bitsPerValue, jfloat acceptableOverheadRatio) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  JreAssert(valueCount >= 0, @"org/apache/lucene/util/packed/PackedInts.java:1099 condition failed: assert valueCount >= 0;");
  OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *formatAndBits = OrgApacheLuceneUtilPackedPackedInts_fastestFormatAndBitsWithInt_withInt_withFloat_(valueCount, bitsPerValue, acceptableOverheadRatio);
  OrgApacheLuceneUtilPackedPackedInts_Writer *writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(outArg, ((OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *) nil_chk(formatAndBits))->format_, valueCount, formatAndBits->bitsPerValue_, OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE);
  [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) writeHeader];
  return writer;
}

jint OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(jlong maxValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  if (maxValue < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$JC", @"maxValue must be non-negative (got: ", maxValue, ')'));
  }
  return OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(maxValue);
}

jint OrgApacheLuceneUtilPackedPackedInts_unsignedBitsRequiredWithLong_(jlong bits) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  return JavaLangMath_maxWithInt_withInt_(1, 64 - JavaLangLong_numberOfLeadingZerosWithLong_(bits));
}

jlong OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_(jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  return bitsPerValue == 64 ? JavaLangLong_MAX_VALUE : ~(JreLShift64(~0LL, bitsPerValue));
}

void OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Reader *src, jint srcPos, OrgApacheLuceneUtilPackedPackedInts_Mutable *dest, jint destPos, jint len, jint mem) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  JreAssert(srcPos + len <= [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(src)) size], @"org/apache/lucene/util/packed/PackedInts.java:1147 condition failed: assert srcPos + len <= src.size();");
  JreAssert(destPos + len <= [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(dest)) size], @"org/apache/lucene/util/packed/PackedInts.java:1148 condition failed: assert destPos + len <= dest.size();");
  jint capacity = JreURShift32(mem, 3);
  if (capacity == 0) {
    for (jint i = 0; i < len; ++i) {
      [dest setWithInt:destPos++ withLong:[src getWithInt:srcPos++]];
    }
  }
  else if (len > 0) {
    IOSLongArray *buf = [IOSLongArray arrayWithLength:JavaLangMath_minWithInt_withInt_(capacity, len)];
    OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withLongArray_(src, srcPos, dest, destPos, len, buf);
  }
}

void OrgApacheLuceneUtilPackedPackedInts_copy__WithOrgApacheLuceneUtilPackedPackedInts_Reader_withInt_withOrgApacheLuceneUtilPackedPackedInts_Mutable_withInt_withInt_withLongArray_(OrgApacheLuceneUtilPackedPackedInts_Reader *src, jint srcPos, OrgApacheLuceneUtilPackedPackedInts_Mutable *dest, jint destPos, jint len, IOSLongArray *buf) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  JreAssert(((IOSLongArray *) nil_chk(buf))->size_ > 0, @"org/apache/lucene/util/packed/PackedInts.java:1163 condition failed: assert buf.length > 0;");
  jint remaining = 0;
  while (len > 0) {
    jint read = [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(src)) getWithInt:srcPos withLongArray:buf withInt:remaining withInt:JavaLangMath_minWithInt_withInt_(len, buf->size_ - remaining)];
    JreAssert(read > 0, @"org/apache/lucene/util/packed/PackedInts.java:1167 condition failed: assert read > 0;");
    srcPos += read;
    len -= read;
    remaining += read;
    jint written = [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(dest)) setWithInt:destPos withLongArray:buf withInt:0 withInt:remaining];
    JreAssert(written > 0, @"org/apache/lucene/util/packed/PackedInts.java:1172 condition failed: assert written > 0;");
    destPos += written;
    if (written < remaining) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, written, buf, 0, remaining - written);
    }
    remaining -= written;
  }
  while (remaining > 0) {
    jint written = [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(dest)) setWithInt:destPos withLongArray:buf withInt:0 withInt:remaining];
    destPos += written;
    remaining -= written;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buf, written, buf, 0, remaining);
  }
}

jint OrgApacheLuceneUtilPackedPackedInts_checkBlockSizeWithInt_withInt_withInt_(jint blockSize, jint minBlockSize, jint maxBlockSize) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  if (blockSize < minBlockSize || blockSize > maxBlockSize) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$I", @"blockSize must be >= ", minBlockSize, @" and <= ", maxBlockSize, @", got ", blockSize));
  }
  if ((blockSize & (blockSize - 1)) != 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"blockSize must be a power of two, got ", blockSize));
  }
  return JavaLangInteger_numberOfTrailingZerosWithInt_(blockSize);
}

jint OrgApacheLuceneUtilPackedPackedInts_numBlocksWithLong_withInt_(jlong size, jint blockSize) {
  OrgApacheLuceneUtilPackedPackedInts_initialize();
  jint numBlocks = (jint) (JreLongDiv(size, blockSize)) + (JreLongMod(size, blockSize) == 0 ? 0 : 1);
  if ((jlong) numBlocks * blockSize < size) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"size is too large for this block size");
  }
  return numBlocks;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilPackedPackedInts_Format)

OrgApacheLuceneUtilPackedPackedInts_Format *OrgApacheLuceneUtilPackedPackedInts_Format_values_[2];

@implementation OrgApacheLuceneUtilPackedPackedInts_Format

+ (OrgApacheLuceneUtilPackedPackedInts_Format *)PACKED {
  return JreEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Format *)PACKED_SINGLE_BLOCK {
  return JreEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED_SINGLE_BLOCK);
}

+ (OrgApacheLuceneUtilPackedPackedInts_Format *)byIdWithInt:(jint)id_ {
  return OrgApacheLuceneUtilPackedPackedInts_Format_byIdWithInt_(id_);
}

- (jint)getId {
  return id__;
}

- (jlong)byteCountWithInt:(jint)packedIntsVersion
                  withInt:(jint)valueCount
                  withInt:(jint)bitsPerValue {
  JreAssert(bitsPerValue >= 0 && bitsPerValue <= 64, JavaLangInteger_valueOfWithInt_(bitsPerValue));
  return 8LL * [self longCountWithInt:packedIntsVersion withInt:valueCount withInt:bitsPerValue];
}

- (jint)longCountWithInt:(jint)packedIntsVersion
                 withInt:(jint)valueCount
                 withInt:(jint)bitsPerValue {
  JreAssert(bitsPerValue >= 0 && bitsPerValue <= 64, JavaLangInteger_valueOfWithInt_(bitsPerValue));
  jlong byteCount = [self byteCountWithInt:packedIntsVersion withInt:valueCount withInt:bitsPerValue];
  JreAssert(byteCount < 8LL * JavaLangInteger_MAX_VALUE, @"org/apache/lucene/util/packed/PackedInts.java:180 condition failed: assert byteCount < 8L * Integer.MAX_VALUE;");
  if ((JreLongMod(byteCount, 8)) == 0) {
    return (jint) (JreLongDiv(byteCount, 8));
  }
  else {
    return (jint) (JreLongDiv(byteCount, 8) + 1);
  }
}

- (jboolean)isSupportedWithInt:(jint)bitsPerValue {
  return bitsPerValue >= 1 && bitsPerValue <= 64;
}

- (jfloat)overheadPerValueWithInt:(jint)bitsPerValue {
  JreAssert([self isSupportedWithInt:bitsPerValue], @"org/apache/lucene/util/packed/PackedInts.java:200 condition failed: assert isSupported(bitsPerValue);");
  return 0.0f;
}

- (jfloat)overheadRatioWithInt:(jint)bitsPerValue {
  JreAssert([self isSupportedWithInt:bitsPerValue], @"org/apache/lucene/util/packed/PackedInts.java:208 condition failed: assert isSupported(bitsPerValue);");
  return [self overheadPerValueWithInt:bitsPerValue] / bitsPerValue;
}

+ (IOSObjectArray *)values {
  return OrgApacheLuceneUtilPackedPackedInts_Format_values();
}

+ (OrgApacheLuceneUtilPackedPackedInts_Format *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneUtilPackedPackedInts_Format_valueOfWithNSString_(name);
}

- (OrgApacheLuceneUtilPackedPackedInts_Format_Enum)toNSEnum {
  return (OrgApacheLuceneUtilPackedPackedInts_Format_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Format;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x11, 7, 1, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneUtilPackedPackedInts_Format;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Format;", 0x9, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(byIdWithInt:);
  methods[1].selector = @selector(getId);
  methods[2].selector = @selector(byteCountWithInt:withInt:withInt:);
  methods[3].selector = @selector(longCountWithInt:withInt:withInt:);
  methods[4].selector = @selector(isSupportedWithInt:);
  methods[5].selector = @selector(overheadPerValueWithInt:);
  methods[6].selector = @selector(overheadRatioWithInt:);
  methods[7].selector = @selector(values);
  methods[8].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PACKED", "LOrgApacheLuceneUtilPackedPackedInts_Format;", .constantValue.asLong = 0, 0x4019, -1, 10, -1, -1 },
    { "PACKED_SINGLE_BLOCK", "LOrgApacheLuceneUtilPackedPackedInts_Format;", .constantValue.asLong = 0, 0x4019, -1, 11, -1, -1 },
    { "id__", "I", .constantValue.asLong = 0, 0x1, 12, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "byId", "I", "byteCount", "III", "longCount", "isSupported", "overheadPerValue", "overheadRatio", "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), &JreEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED_SINGLE_BLOCK), "id", "LOrgApacheLuceneUtilPackedPackedInts;", "Ljava/lang/Enum<Lorg/apache/lucene/util/packed/PackedInts$Format;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Format = { "Format", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x4009, 9, 3, 13, -1, -1, 14, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_Format;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilPackedPackedInts_Format class]) {
    size_t allocSize = 0;
    size_t objSize_PACKED = class_getInstanceSize([OrgApacheLuceneUtilPackedPackedInts_Format_1 class]);
    allocSize += objSize_PACKED;
    size_t objSize_PACKED_SINGLE_BLOCK = class_getInstanceSize([OrgApacheLuceneUtilPackedPackedInts_Format_2 class]);
    allocSize += objSize_PACKED_SINGLE_BLOCK;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    ((void) (JreEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED) = e = objc_constructInstance([OrgApacheLuceneUtilPackedPackedInts_Format_1 class], (void *)ptr)), ptr += objSize_PACKED);
    OrgApacheLuceneUtilPackedPackedInts_Format_1_initWithInt_withNSString_withInt_(e, 0, @"PACKED", 0);
    ((void) (JreEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED_SINGLE_BLOCK) = e = objc_constructInstance([OrgApacheLuceneUtilPackedPackedInts_Format_2 class], (void *)ptr)), ptr += objSize_PACKED_SINGLE_BLOCK);
    OrgApacheLuceneUtilPackedPackedInts_Format_2_initWithInt_withNSString_withInt_(e, 1, @"PACKED_SINGLE_BLOCK", 1);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilPackedPackedInts_Format)
  }
}

@end

OrgApacheLuceneUtilPackedPackedInts_Format *OrgApacheLuceneUtilPackedPackedInts_Format_byIdWithInt_(jint id_) {
  OrgApacheLuceneUtilPackedPackedInts_Format_initialize();
  {
    IOSObjectArray *a__ = OrgApacheLuceneUtilPackedPackedInts_Format_values();
    OrgApacheLuceneUtilPackedPackedInts_Format * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneUtilPackedPackedInts_Format * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneUtilPackedPackedInts_Format *format = *b__++;
      if ([((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(format)) getId] == id_) {
        return format;
      }
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown format id: ", id_));
}

void OrgApacheLuceneUtilPackedPackedInts_Format_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *self, jint id_, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->id__ = id_;
}

IOSObjectArray *OrgApacheLuceneUtilPackedPackedInts_Format_values() {
  OrgApacheLuceneUtilPackedPackedInts_Format_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneUtilPackedPackedInts_Format_values_ count:2 type:OrgApacheLuceneUtilPackedPackedInts_Format_class_()];
}

OrgApacheLuceneUtilPackedPackedInts_Format *OrgApacheLuceneUtilPackedPackedInts_Format_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneUtilPackedPackedInts_Format_initialize();
  for (int i = 0; i < 2; i++) {
    OrgApacheLuceneUtilPackedPackedInts_Format *e = OrgApacheLuceneUtilPackedPackedInts_Format_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneUtilPackedPackedInts_Format *OrgApacheLuceneUtilPackedPackedInts_Format_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneUtilPackedPackedInts_Format_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return OrgApacheLuceneUtilPackedPackedInts_Format_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Format)

@implementation OrgApacheLuceneUtilPackedPackedInts_Format_1

- (jlong)byteCountWithInt:(jint)packedIntsVersion
                  withInt:(jint)valueCount
                  withInt:(jint)bitsPerValue {
  if (packedIntsVersion < OrgApacheLuceneUtilPackedPackedInts_VERSION_BYTE_ALIGNED) {
    return 8LL * JreFpToLong(JavaLangMath_ceilWithDouble_((jdouble) valueCount * bitsPerValue / 64));
  }
  else {
    return JreFpToLong(JavaLangMath_ceilWithDouble_((jdouble) valueCount * bitsPerValue / 8));
  }
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgApacheLuceneUtilPackedPackedInts_Format_1 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(byteCountWithInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "byteCount", "III", "LOrgApacheLuceneUtilPackedPackedInts_Format;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Format_1 = { "", "org.apache.lucene.util.packed", ptrTable, methods, NULL, 7, 0xc018, 1, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_Format_1;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Format_1_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format_1 *self, jint id_, NSString *__name, jint __ordinal) {
  OrgApacheLuceneUtilPackedPackedInts_Format_initWithInt_withNSString_withInt_(self, id_, __name, __ordinal);
}

@implementation OrgApacheLuceneUtilPackedPackedInts_Format_2

- (jint)longCountWithInt:(jint)packedIntsVersion
                 withInt:(jint)valueCount
                 withInt:(jint)bitsPerValue {
  jint valuesPerBlock = JreIntDiv(64, bitsPerValue);
  return JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) valueCount / valuesPerBlock));
}

- (jboolean)isSupportedWithInt:(jint)bitsPerValue {
  return OrgApacheLuceneUtilPackedPacked64SingleBlock_isSupportedWithInt_(bitsPerValue);
}

- (jfloat)overheadPerValueWithInt:(jint)bitsPerValue {
  JreAssert([self isSupportedWithInt:bitsPerValue], @"org/apache/lucene/util/packed/PackedInts.java:130 condition failed: assert isSupported(bitsPerValue);");
  jint valuesPerBlock = JreIntDiv(64, bitsPerValue);
  jint overhead = JreIntMod(64, bitsPerValue);
  return (jfloat) overhead / valuesPerBlock;
}

- (void)dealloc {
  JreCheckFinalize(self, [OrgApacheLuceneUtilPackedPackedInts_Format_2 class]);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(longCountWithInt:withInt:withInt:);
  methods[1].selector = @selector(isSupportedWithInt:);
  methods[2].selector = @selector(overheadPerValueWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "longCount", "III", "isSupported", "I", "overheadPerValue", "LOrgApacheLuceneUtilPackedPackedInts_Format;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Format_2 = { "", "org.apache.lucene.util.packed", ptrTable, methods, NULL, 7, 0xc018, 3, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_Format_2;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Format_2_initWithInt_withNSString_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format_2 *self, jint id_, NSString *__name, jint __ordinal) {
  OrgApacheLuceneUtilPackedPackedInts_Format_initWithInt_withNSString_withInt_(self, id_, __name, __ordinal);
}

@implementation OrgApacheLuceneUtilPackedPackedInts_FormatAndBits

- (instancetype)initWithOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                                           withInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(self, format, bitsPerValue);
  return self;
}

- (NSString *)description {
  return JreStrcat("$@$IC", @"FormatAndBits(format=", format_, @" bitsPerValue=", bitsPerValue_, ')');
}

- (void)dealloc {
  RELEASE_(format_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilPackedPackedInts_Format:withInt:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "format_", "LOrgApacheLuceneUtilPackedPackedInts_Format;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "bitsPerValue_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilPackedPackedInts_Format;I", "toString", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_FormatAndBits = { "FormatAndBits", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x9, 2, 2, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_FormatAndBits;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *self, OrgApacheLuceneUtilPackedPackedInts_Format *format, jint bitsPerValue) {
  NSObject_init(self);
  JreStrongAssign(&self->format_, format);
  self->bitsPerValue_ = bitsPerValue;
}

OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *new_OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *format, jint bitsPerValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPackedInts_FormatAndBits, initWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_, format, bitsPerValue)
}

OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *create_OrgApacheLuceneUtilPackedPackedInts_FormatAndBits_initWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *format, jint bitsPerValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPackedInts_FormatAndBits, initWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_, format, bitsPerValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_FormatAndBits)

@implementation OrgApacheLuceneUtilPackedPackedInts_Decoder

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(longBlockCount);
  methods[1].selector = @selector(longValueCount);
  methods[2].selector = @selector(byteBlockCount);
  methods[3].selector = @selector(byteValueCount);
  methods[4].selector = @selector(decodeWithLongArray:withInt:withLongArray:withInt:withInt:);
  methods[5].selector = @selector(decodeWithByteArray:withInt:withLongArray:withInt:withInt:);
  methods[6].selector = @selector(decodeWithLongArray:withInt:withIntArray:withInt:withInt:);
  methods[7].selector = @selector(decodeWithByteArray:withInt:withIntArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "decode", "[JI[JII", "[BI[JII", "[JI[III", "[BI[III", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Decoder = { "Decoder", "org.apache.lucene.util.packed", ptrTable, methods, NULL, 7, 0x609, 8, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_Decoder;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Decoder)

@implementation OrgApacheLuceneUtilPackedPackedInts_Encoder

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(longBlockCount);
  methods[1].selector = @selector(longValueCount);
  methods[2].selector = @selector(byteBlockCount);
  methods[3].selector = @selector(byteValueCount);
  methods[4].selector = @selector(encodeWithLongArray:withInt:withLongArray:withInt:withInt:);
  methods[5].selector = @selector(encodeWithLongArray:withInt:withByteArray:withInt:withInt:);
  methods[6].selector = @selector(encodeWithIntArray:withInt:withLongArray:withInt:withInt:);
  methods[7].selector = @selector(encodeWithIntArray:withInt:withByteArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "encode", "[JI[JII", "[JI[BII", "[II[JII", "[II[BII", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Encoder = { "Encoder", "org.apache.lucene.util.packed", ptrTable, methods, NULL, 7, 0x609, 8, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_Encoder;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Encoder)

@implementation OrgApacheLuceneUtilPackedPackedInts_Reader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilPackedPackedInts_Reader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert(len > 0, JreStrcat("$IC", @"len must be > 0 (got ", len, ')'));
  JreAssert(index >= 0 && index < [self size], @"org/apache/lucene/util/packed/PackedInts.java:468 condition failed: assert index >= 0 && index < size();");
  JreAssert(off + len <= ((IOSLongArray *) nil_chk(arr))->size_, @"org/apache/lucene/util/packed/PackedInts.java:469 condition failed: assert off + len <= arr.length;");
  jint gets = JavaLangMath_minWithInt_withInt_([self size] - index, len);
  for (jint i = index, o = off, end = index + gets; i < end; ++i, ++o) {
    *IOSLongArray_GetRef(arr, o) = [self getWithInt:i];
  }
  return gets;
}

- (jint)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithInt:withLongArray:withInt:withInt:);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(getChildResources);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "get", "I[JII", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Reader = { "Reader", "org.apache.lucene.util.packed", ptrTable, methods, NULL, 7, 0x409, 4, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_Reader;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Reader_init(OrgApacheLuceneUtilPackedPackedInts_Reader *self) {
  OrgApacheLuceneIndexNumericDocValues_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Reader)

@implementation OrgApacheLuceneUtilPackedPackedInts_ReaderIterator

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilLongsRef;", 0x401, 1, 2, 0, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(next);
  methods[1].selector = @selector(nextWithInt:);
  methods[2].selector = @selector(getBitsPerValue);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(ord);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "next", "I", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_ReaderIterator = { "ReaderIterator", "org.apache.lucene.util.packed", ptrTable, methods, NULL, 7, 0x609, 5, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_ReaderIterator;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_ReaderIterator)

@implementation OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl

- (instancetype)initWithInt:(jint)valueCount
                    withInt:(jint)bitsPerValue
withOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl_initWithInt_withInt_withOrgApacheLuceneStoreDataInput_(self, valueCount, bitsPerValue, inArg);
  return self;
}

- (jlong)next {
  OrgApacheLuceneUtilLongsRef *nextValues = JreRetainedLocalValue([self nextWithInt:1]);
  JreAssert(((OrgApacheLuceneUtilLongsRef *) nil_chk(nextValues))->length_ > 0, @"org/apache/lucene/util/packed/PackedInts.java:521 condition failed: assert nextValues.length > 0;");
  jlong result = IOSLongArray_Get(nil_chk(nextValues->longs_), nextValues->offset_);
  ++nextValues->offset_;
  --nextValues->length_;
  return result;
}

- (jint)getBitsPerValue {
  return bitsPerValue_;
}

- (jint)size {
  return valueCount_;
}

- (void)dealloc {
  RELEASE_(in_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withOrgApacheLuceneStoreDataInput:);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(getBitsPerValue);
  methods[3].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LOrgApacheLuceneStoreDataInput;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "bitsPerValue_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "valueCount_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IILOrgApacheLuceneStoreDataInput;", "LJavaIoIOException;", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl = { "ReaderIteratorImpl", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x408, 4, 3, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl_initWithInt_withInt_withOrgApacheLuceneStoreDataInput_(OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl *self, jint valueCount, jint bitsPerValue, OrgApacheLuceneStoreDataInput *inArg) {
  NSObject_init(self);
  JreStrongAssign(&self->in_, inArg);
  self->bitsPerValue_ = bitsPerValue;
  self->valueCount_ = valueCount;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_ReaderIteratorImpl)

@implementation OrgApacheLuceneUtilPackedPackedInts_Mutable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilPackedPackedInts_Mutable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getBitsPerValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setWithInt:(jint)index
          withLong:(jlong)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)setWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert(len > 0, JreStrcat("$IC", @"len must be > 0 (got ", len, ')'));
  JreAssert(index >= 0 && index < [self size], @"org/apache/lucene/util/packed/PackedInts.java:568 condition failed: assert index >= 0 && index < size();");
  len = JavaLangMath_minWithInt_withInt_(len, [self size] - index);
  JreAssert(off + len <= ((IOSLongArray *) nil_chk(arr))->size_, @"org/apache/lucene/util/packed/PackedInts.java:570 condition failed: assert off + len <= arr.length;");
  for (jint i = index, o = off, end = index + len; i < end; ++i, ++o) {
    [self setWithInt:i withLong:IOSLongArray_Get(arr, o)];
  }
  return len;
}

- (void)fillWithInt:(jint)fromIndex
            withInt:(jint)toIndex
           withLong:(jlong)val {
  JreAssert(val <= OrgApacheLuceneUtilPackedPackedInts_maxValueWithInt_([self getBitsPerValue]), @"org/apache/lucene/util/packed/PackedInts.java:583 condition failed: assert val <= maxValue(getBitsPerValue());");
  JreAssert(fromIndex <= toIndex, @"org/apache/lucene/util/packed/PackedInts.java:584 condition failed: assert fromIndex <= toIndex;");
  for (jint i = fromIndex; i < toIndex; ++i) {
    [self setWithInt:i withLong:val];
  }
}

- (void)clear {
  [self fillWithInt:0 withInt:[self size] withLong:0];
}

- (void)saveWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneUtilPackedPackedInts_Writer *writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(outArg, [self getFormat], [self size], [self getBitsPerValue], OrgApacheLuceneUtilPackedPackedInts_DEFAULT_BUFFER_SIZE);
  [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) writeHeader];
  for (jint i = 0; i < [self size]; ++i) {
    [writer addWithLong:[self getWithInt:i]];
  }
  [writer finish];
}

- (OrgApacheLuceneUtilPackedPackedInts_Format *)getFormat {
  return JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Format;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getBitsPerValue);
  methods[2].selector = @selector(setWithInt:withLong:);
  methods[3].selector = @selector(setWithInt:withLongArray:withInt:withInt:);
  methods[4].selector = @selector(fillWithInt:withInt:withLong:);
  methods[5].selector = @selector(clear);
  methods[6].selector = @selector(saveWithOrgApacheLuceneStoreDataOutput:);
  methods[7].selector = @selector(getFormat);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "set", "IJ", "I[JII", "fill", "IIJ", "save", "LOrgApacheLuceneStoreDataOutput;", "LJavaIoIOException;", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Mutable = { "Mutable", "org.apache.lucene.util.packed", ptrTable, methods, NULL, 7, 0x409, 8, 0, 8, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_Mutable;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Mutable_init(OrgApacheLuceneUtilPackedPackedInts_Mutable *self) {
  OrgApacheLuceneUtilPackedPackedInts_Reader_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Mutable)

@implementation OrgApacheLuceneUtilPackedPackedInts_ReaderImpl

- (instancetype)initWithInt:(jint)valueCount {
  OrgApacheLuceneUtilPackedPackedInts_ReaderImpl_initWithInt_(self, valueCount);
  return self;
}

- (jlong)getWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)size {
  return valueCount_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "valueCount_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "get", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_ReaderImpl = { "ReaderImpl", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x408, 3, 1, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_ReaderImpl;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_ReaderImpl_initWithInt_(OrgApacheLuceneUtilPackedPackedInts_ReaderImpl *self, jint valueCount) {
  OrgApacheLuceneUtilPackedPackedInts_Reader_init(self);
  self->valueCount_ = valueCount;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_ReaderImpl)

@implementation OrgApacheLuceneUtilPackedPackedInts_MutableImpl

- (instancetype)initWithInt:(jint)valueCount
                    withInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedPackedInts_MutableImpl_initWithInt_withInt_(self, valueCount, bitsPerValue);
  return self;
}

- (jint)getBitsPerValue {
  return bitsPerValue_;
}

- (jint)size {
  return valueCount_;
}

- (NSString *)description {
  return JreStrcat("$$I$IC", [[self java_getClass] getSimpleName], @"(valueCount=", valueCount_, @",bitsPerValue=", bitsPerValue_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(getBitsPerValue);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "valueCount_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "bitsPerValue_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "toString", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_MutableImpl = { "MutableImpl", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x408, 4, 2, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_MutableImpl;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_MutableImpl_initWithInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_MutableImpl *self, jint valueCount, jint bitsPerValue) {
  OrgApacheLuceneUtilPackedPackedInts_Mutable_init(self);
  self->valueCount_ = valueCount;
  JreAssert(bitsPerValue > 0 && bitsPerValue <= 64, JreStrcat("$I", @"bitsPerValue=", bitsPerValue));
  self->bitsPerValue_ = bitsPerValue;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_MutableImpl)

@implementation OrgApacheLuceneUtilPackedPackedInts_NullReader

- (instancetype)initWithInt:(jint)valueCount {
  OrgApacheLuceneUtilPackedPackedInts_NullReader_initWithInt_(self, valueCount);
  return self;
}

- (jlong)getWithInt:(jint)index {
  return 0;
}

- (jint)getWithInt:(jint)index
     withLongArray:(IOSLongArray *)arr
           withInt:(jint)off
           withInt:(jint)len {
  JreAssert(len > 0, JreStrcat("$IC", @"len must be > 0 (got ", len, ')'));
  JreAssert(index >= 0 && index < valueCount_, @"org/apache/lucene/util/packed/PackedInts.java:683 condition failed: assert index >= 0 && index < valueCount;");
  len = JavaLangMath_minWithInt_withInt_(len, valueCount_ - index);
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(arr, off, off + len, 0);
  return len;
}

- (jint)size {
  return valueCount_;
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilRamUsageEstimator_alignObjectSizeWithLong_(JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_HEADER) + OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(getWithInt:withLongArray:withInt:withInt:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(ramBytesUsed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "valueCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "get", "I[JII", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_NullReader = { "NullReader", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x19, 5, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_NullReader;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_NullReader_initWithInt_(OrgApacheLuceneUtilPackedPackedInts_NullReader *self, jint valueCount) {
  OrgApacheLuceneUtilPackedPackedInts_Reader_init(self);
  self->valueCount_ = valueCount;
}

OrgApacheLuceneUtilPackedPackedInts_NullReader *new_OrgApacheLuceneUtilPackedPackedInts_NullReader_initWithInt_(jint valueCount) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPackedInts_NullReader, initWithInt_, valueCount)
}

OrgApacheLuceneUtilPackedPackedInts_NullReader *create_OrgApacheLuceneUtilPackedPackedInts_NullReader_initWithInt_(jint valueCount) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPackedInts_NullReader, initWithInt_, valueCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_NullReader)

@implementation OrgApacheLuceneUtilPackedPackedInts_Writer

- (instancetype)initWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                               withInt:(jint)valueCount
                                               withInt:(jint)bitsPerValue {
  OrgApacheLuceneUtilPackedPackedInts_Writer_initWithOrgApacheLuceneStoreDataOutput_withInt_withInt_(self, outArg, valueCount, bitsPerValue);
  return self;
}

- (void)writeHeader {
  JreAssert(valueCount_ != -1, @"org/apache/lucene/util/packed/PackedInts.java:717 condition failed: assert valueCount != -1;");
  OrgApacheLuceneCodecsCodecUtil_writeHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_(out_, OrgApacheLuceneUtilPackedPackedInts_CODEC_NAME, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT);
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(out_)) writeVIntWithInt:bitsPerValue_];
  [out_ writeVIntWithInt:valueCount_];
  [out_ writeVIntWithInt:[((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk([self getFormat])) getId]];
}

- (OrgApacheLuceneUtilPackedPackedInts_Format *)getFormat {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)addWithLong:(jlong)v {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)bitsPerValue {
  return bitsPerValue_;
}

- (void)finish {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jint)ord {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(out_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPackedPackedInts_Format;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDataOutput:withInt:withInt:);
  methods[1].selector = @selector(writeHeader);
  methods[2].selector = @selector(getFormat);
  methods[3].selector = @selector(addWithLong:);
  methods[4].selector = @selector(bitsPerValue);
  methods[5].selector = @selector(finish);
  methods[6].selector = @selector(ord);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "out_", "LOrgApacheLuceneStoreDataOutput;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "valueCount_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "bitsPerValue_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDataOutput;II", "LJavaIoIOException;", "add", "J", "LOrgApacheLuceneUtilPackedPackedInts;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_Writer = { "Writer", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x409, 7, 3, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_Writer;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_Writer_initWithOrgApacheLuceneStoreDataOutput_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Writer *self, OrgApacheLuceneStoreDataOutput *outArg, jint valueCount, jint bitsPerValue) {
  NSObject_init(self);
  JreAssert(bitsPerValue <= 64, @"org/apache/lucene/util/packed/PackedInts.java:709 condition failed: assert bitsPerValue <= 64;");
  JreAssert(valueCount >= 0 || valueCount == -1, @"org/apache/lucene/util/packed/PackedInts.java:710 condition failed: assert valueCount >= 0 || valueCount == -1;");
  JreStrongAssign(&self->out_, outArg);
  self->valueCount_ = valueCount;
  self->bitsPerValue_ = bitsPerValue;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilPackedPackedInts_Writer)

@implementation OrgApacheLuceneUtilPackedPackedInts_1

- (instancetype)initWithLong:(jlong)capture$0
                     withInt:(jint)bitsPerValue
                     withInt:(jint)valueCount
withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg {
  OrgApacheLuceneUtilPackedPackedInts_1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(self, capture$0, bitsPerValue, valueCount, inArg);
  return self;
}

- (jlong)getWithInt:(jint)index {
  jlong result = [super getWithInt:index];
  if (index == valueCount_ - 1) {
    @try {
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(in_)) seekWithLong:val$endPointer_];
    }
    @catch (JavaIoIOException *e) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"failed", e);
    }
  }
  return result;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLong:withInt:withInt:withOrgApacheLuceneStoreIndexInput:);
  methods[1].selector = @selector(getWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$endPointer_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "JIILOrgApacheLuceneStoreIndexInput;", "get", "I", "LOrgApacheLuceneUtilPackedPackedInts;", "getDirectReaderNoHeaderWithOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneUtilPackedPackedInts_Format:withInt:withInt:withInt:" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilPackedPackedInts_1 = { "", "org.apache.lucene.util.packed", ptrTable, methods, fields, 7, 0x8018, 2, 1, 3, -1, 4, -1, -1 };
  return &_OrgApacheLuceneUtilPackedPackedInts_1;
}

@end

void OrgApacheLuceneUtilPackedPackedInts_1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneUtilPackedPackedInts_1 *self, jlong capture$0, jint bitsPerValue, jint valueCount, OrgApacheLuceneStoreIndexInput *inArg) {
  self->val$endPointer_ = capture$0;
  OrgApacheLuceneUtilPackedDirectPackedReader_initPackagePrivateWithInt_withInt_withOrgApacheLuceneStoreIndexInput_(self, bitsPerValue, valueCount, inArg);
}

OrgApacheLuceneUtilPackedPackedInts_1 *new_OrgApacheLuceneUtilPackedPackedInts_1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(jlong capture$0, jint bitsPerValue, jint valueCount, OrgApacheLuceneStoreIndexInput *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilPackedPackedInts_1, initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_, capture$0, bitsPerValue, valueCount, inArg)
}

OrgApacheLuceneUtilPackedPackedInts_1 *create_OrgApacheLuceneUtilPackedPackedInts_1_initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_(jlong capture$0, jint bitsPerValue, jint valueCount, OrgApacheLuceneStoreIndexInput *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilPackedPackedInts_1, initWithLong_withInt_withInt_withOrgApacheLuceneStoreIndexInput_, capture$0, bitsPerValue, valueCount, inArg)
}
