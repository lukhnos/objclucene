//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/FilterIterator.java
//

#include "J2ObjC_source.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"
#include "org/apache/lucene/util/FilterIterator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/FilterIterator must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilFilterIterator () {
 @public
  id<JavaUtilIterator> iterator_;
  id next_;
  jboolean nextIsSet_;
}

- (jboolean)setNext;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFilterIterator, iterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFilterIterator, next_, id)

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFilterIterator_hasNext(OrgApacheLuceneUtilFilterIterator *self);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFilterIterator_setNext(OrgApacheLuceneUtilFilterIterator *self);

@implementation OrgApacheLuceneUtilFilterIterator

- (jboolean)predicateFunctionWithId:(id)object {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)baseIterator {
  OrgApacheLuceneUtilFilterIterator_initWithJavaUtilIterator_(self, baseIterator);
  return self;
}

- (jboolean)hasNext {
  return OrgApacheLuceneUtilFilterIterator_hasNext(self);
}

- (id)next {
  if (!OrgApacheLuceneUtilFilterIterator_hasNext(self)) {
    @throw create_JavaUtilNoSuchElementException_init();
  }
  JreAssert(nextIsSet_, @"org/apache/lucene/util/FilterIterator.java:54 condition failed: assert nextIsSet;");
  @try {
    return next_;
  }
  @finally {
    nextIsSet_ = false;
    JreStrongAssign(&next_, nil);
  }
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)setNext {
  return OrgApacheLuceneUtilFilterIterator_setNext(self);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(iterator_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x404, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(predicateFunctionWithId:);
  methods[1].selector = @selector(initWithJavaUtilIterator:);
  methods[2].selector = @selector(hasNext);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(remove);
  methods[5].selector = @selector(setNext);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "iterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "next_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "nextIsSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "predicateFunction", "LNSObject;", "(TInnerT;)Z", "LJavaUtilIterator;", "(Ljava/util/Iterator<TInnerT;>;)V", "()TT;", "Ljava/util/Iterator<TInnerT;>;", "TT;", "<T:Ljava/lang/Object;InnerT:TT;>Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFilterIterator = { "FilterIterator", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x401, 6, 3, -1, -1, -1, 8, -1 };
  return &_OrgApacheLuceneUtilFilterIterator;
}

@end

void OrgApacheLuceneUtilFilterIterator_initWithJavaUtilIterator_(OrgApacheLuceneUtilFilterIterator *self, id<JavaUtilIterator> baseIterator) {
  NSObject_init(self);
  JreStrongAssign(&self->next_, nil);
  self->nextIsSet_ = false;
  JreStrongAssign(&self->iterator_, baseIterator);
}

jboolean OrgApacheLuceneUtilFilterIterator_hasNext(OrgApacheLuceneUtilFilterIterator *self) {
  return self->nextIsSet_ || OrgApacheLuceneUtilFilterIterator_setNext(self);
}

jboolean OrgApacheLuceneUtilFilterIterator_setNext(OrgApacheLuceneUtilFilterIterator *self) {
  while ([((id<JavaUtilIterator>) nil_chk(self->iterator_)) hasNext]) {
    id object = [self->iterator_ next];
    if ([self predicateFunctionWithId:object]) {
      JreStrongAssign(&self->next_, object);
      self->nextIsSet_ = true;
      return true;
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFilterIterator)
