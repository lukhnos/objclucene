//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/StrictStringTokenizer.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "org/apache/lucene/util/StrictStringTokenizer.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/StrictStringTokenizer must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilStrictStringTokenizer () {
 @public
  NSString *s_;
  jchar delimiter_;
  jint pos_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilStrictStringTokenizer, s_, NSString *)

@implementation OrgApacheLuceneUtilStrictStringTokenizer

- (instancetype)initPackagePrivateWithNSString:(NSString *)s
                                      withChar:(jchar)delimiter {
  OrgApacheLuceneUtilStrictStringTokenizer_initPackagePrivateWithNSString_withChar_(self, s, delimiter);
  return self;
}

- (NSString *)nextToken {
  if (pos_ < 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"no more tokens");
  }
  jint pos1 = [((NSString *) nil_chk(s_)) java_indexOf:delimiter_ fromIndex:pos_];
  NSString *s1;
  if (pos1 >= 0) {
    s1 = [s_ java_substring:pos_ endIndex:pos1];
    pos_ = pos1 + 1;
  }
  else {
    s1 = [s_ java_substring:pos_];
    pos_ = -1;
  }
  return s1;
}

- (jboolean)hasMoreTokens {
  return pos_ >= 0;
}

- (void)dealloc {
  RELEASE_(s_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithNSString:withChar:);
  methods[1].selector = @selector(nextToken);
  methods[2].selector = @selector(hasMoreTokens);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "delimiter_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;C" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilStrictStringTokenizer = { "StrictStringTokenizer", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x10, 3, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilStrictStringTokenizer;
}

@end

void OrgApacheLuceneUtilStrictStringTokenizer_initPackagePrivateWithNSString_withChar_(OrgApacheLuceneUtilStrictStringTokenizer *self, NSString *s, jchar delimiter) {
  NSObject_init(self);
  JreStrongAssign(&self->s_, s);
  self->delimiter_ = delimiter;
}

OrgApacheLuceneUtilStrictStringTokenizer *new_OrgApacheLuceneUtilStrictStringTokenizer_initPackagePrivateWithNSString_withChar_(NSString *s, jchar delimiter) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilStrictStringTokenizer, initPackagePrivateWithNSString_withChar_, s, delimiter)
}

OrgApacheLuceneUtilStrictStringTokenizer *create_OrgApacheLuceneUtilStrictStringTokenizer_initPackagePrivateWithNSString_withChar_(NSString *s, jchar delimiter) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilStrictStringTokenizer, initPackagePrivateWithNSString_withChar_, s, delimiter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilStrictStringTokenizer)
