//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/IntsRef.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/util/IntsRef.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/IntsRef must not be compiled with ARC (-fobjc-arc)"
#endif

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilIntsRef)

IOSIntArray *OrgApacheLuceneUtilIntsRef_EMPTY_INTS;

@implementation OrgApacheLuceneUtilIntsRef

+ (IOSIntArray *)EMPTY_INTS {
  return OrgApacheLuceneUtilIntsRef_EMPTY_INTS;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilIntsRef_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  OrgApacheLuceneUtilIntsRef_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithIntArray:(IOSIntArray *)ints
                         withInt:(jint)offset
                         withInt:(jint)length {
  OrgApacheLuceneUtilIntsRef_initWithIntArray_withInt_withInt_(self, ints, offset, length);
  return self;
}

- (OrgApacheLuceneUtilIntsRef *)java_clone {
  return create_OrgApacheLuceneUtilIntsRef_initWithIntArray_withInt_withInt_(ints_, offset_, length_);
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 0;
  jint end = offset_ + length_;
  for (jint i = offset_; i < end; i++) {
    result = prime * result + IOSIntArray_Get(nil_chk(ints_), i);
  }
  return result;
}

- (jboolean)isEqual:(id)other {
  if (other == nil) {
    return false;
  }
  if ([other isKindOfClass:[OrgApacheLuceneUtilIntsRef class]]) {
    return [self intsEqualsWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *) other];
  }
  return false;
}

- (jboolean)intsEqualsWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)other {
  if (length_ == ((OrgApacheLuceneUtilIntsRef *) nil_chk(other))->length_) {
    jint otherUpto = other->offset_;
    IOSIntArray *otherInts = other->ints_;
    jint end = offset_ + length_;
    for (jint upto = offset_; upto < end; upto++, otherUpto++) {
      if (IOSIntArray_Get(nil_chk(ints_), upto) != IOSIntArray_Get(nil_chk(otherInts), otherUpto)) {
        return false;
      }
    }
    return true;
  }
  else {
    return false;
  }
}

- (jint)compareToWithId:(OrgApacheLuceneUtilIntsRef *)other {
  cast_chk(other, [OrgApacheLuceneUtilIntsRef class]);
  if (JreObjectEqualsEquals(self, other)) return 0;
  IOSIntArray *aInts = self->ints_;
  jint aUpto = self->offset_;
  IOSIntArray *bInts = ((OrgApacheLuceneUtilIntsRef *) nil_chk(other))->ints_;
  jint bUpto = other->offset_;
  jint aStop = aUpto + JavaLangMath_minWithInt_withInt_(self->length_, other->length_);
  while (aUpto < aStop) {
    jint aInt = IOSIntArray_Get(nil_chk(aInts), aUpto++);
    jint bInt = IOSIntArray_Get(nil_chk(bInts), bUpto++);
    if (aInt > bInt) {
      return 1;
    }
    else if (aInt < bInt) {
      return -1;
    }
  }
  return self->length_ - other->length_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithChar:'['];
  jint end = offset_ + length_;
  for (jint i = offset_; i < end; i++) {
    if (i > offset_) {
      [sb appendWithChar:' '];
    }
    [sb appendWithNSString:JavaLangInteger_toHexStringWithInt_(IOSIntArray_Get(nil_chk(ints_), i))];
  }
  [sb appendWithChar:']'];
  return [sb description];
}

+ (OrgApacheLuceneUtilIntsRef *)deepCopyOfWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)other {
  return OrgApacheLuceneUtilIntsRef_deepCopyOfWithOrgApacheLuceneUtilIntsRef_(other);
}

- (jboolean)isValid {
  if (ints_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"ints is null");
  }
  if (length_ < 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"length is negative: ", length_));
  }
  if (length_ > ints_->size_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"length is out of bounds: ", length_, @",ints.length=", ints_->size_));
  }
  if (offset_ < 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"offset is negative: ", offset_));
  }
  if (offset_ > ints_->size_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"offset out of bounds: ", offset_, @",ints.length=", ints_->size_));
  }
  if (offset_ + length_ < 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"offset+length is negative: offset=", offset_, @",length=", length_));
  }
  if (offset_ + length_ > ints_->size_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I$I", @"offset+length out of bounds: offset=", offset_, @",length=", length_, @",ints.length=", ints_->size_));
  }
  return true;
}

- (void)dealloc {
  RELEASE_(ints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x9, 10, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithIntArray:withInt:withInt:);
  methods[3].selector = @selector(java_clone);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(intsEqualsWithOrgApacheLuceneUtilIntsRef:);
  methods[7].selector = @selector(compareToWithId:);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(deepCopyOfWithOrgApacheLuceneUtilIntsRef:);
  methods[10].selector = @selector(isValid);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_INTS", "[I", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "ints_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "offset_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[III", "clone", "hashCode", "equals", "LNSObject;", "intsEquals", "LOrgApacheLuceneUtilIntsRef;", "compareTo", "toString", "deepCopyOf", &OrgApacheLuceneUtilIntsRef_EMPTY_INTS, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/util/IntsRef;>;Ljava/lang/Cloneable;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIntsRef = { "IntsRef", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 11, 4, -1, -1, -1, 12, -1 };
  return &_OrgApacheLuceneUtilIntsRef;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilIntsRef class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilIntsRef_EMPTY_INTS, [IOSIntArray newArrayWithLength:0]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilIntsRef)
  }
}

@end

void OrgApacheLuceneUtilIntsRef_init(OrgApacheLuceneUtilIntsRef *self) {
  NSObject_init(self);
  JreStrongAssign(&self->ints_, OrgApacheLuceneUtilIntsRef_EMPTY_INTS);
}

OrgApacheLuceneUtilIntsRef *new_OrgApacheLuceneUtilIntsRef_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIntsRef, init)
}

OrgApacheLuceneUtilIntsRef *create_OrgApacheLuceneUtilIntsRef_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIntsRef, init)
}

void OrgApacheLuceneUtilIntsRef_initWithInt_(OrgApacheLuceneUtilIntsRef *self, jint capacity) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->ints_, [IOSIntArray newArrayWithLength:capacity]);
}

OrgApacheLuceneUtilIntsRef *new_OrgApacheLuceneUtilIntsRef_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIntsRef, initWithInt_, capacity)
}

OrgApacheLuceneUtilIntsRef *create_OrgApacheLuceneUtilIntsRef_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIntsRef, initWithInt_, capacity)
}

void OrgApacheLuceneUtilIntsRef_initWithIntArray_withInt_withInt_(OrgApacheLuceneUtilIntsRef *self, IOSIntArray *ints, jint offset, jint length) {
  NSObject_init(self);
  JreStrongAssign(&self->ints_, ints);
  self->offset_ = offset;
  self->length_ = length;
  JreAssert([self isValid], @"org/apache/lucene/util/IntsRef.java:58 condition failed: assert isValid();");
}

OrgApacheLuceneUtilIntsRef *new_OrgApacheLuceneUtilIntsRef_initWithIntArray_withInt_withInt_(IOSIntArray *ints, jint offset, jint length) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIntsRef, initWithIntArray_withInt_withInt_, ints, offset, length)
}

OrgApacheLuceneUtilIntsRef *create_OrgApacheLuceneUtilIntsRef_initWithIntArray_withInt_withInt_(IOSIntArray *ints, jint offset, jint length) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIntsRef, initWithIntArray_withInt_withInt_, ints, offset, length)
}

OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilIntsRef_deepCopyOfWithOrgApacheLuceneUtilIntsRef_(OrgApacheLuceneUtilIntsRef *other) {
  OrgApacheLuceneUtilIntsRef_initialize();
  return create_OrgApacheLuceneUtilIntsRef_initWithIntArray_withInt_withInt_(JavaUtilArrays_copyOfRangeWithIntArray_withInt_withInt_(((OrgApacheLuceneUtilIntsRef *) nil_chk(other))->ints_, other->offset_, other->offset_ + other->length_), 0, other->length_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIntsRef)
