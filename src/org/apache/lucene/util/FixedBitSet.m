//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/FixedBitSet.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BitSet.h"
#include "org/apache/lucene/util/BitSetIterator.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/FixedBitSet must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilFixedBitSet () {
 @public
  IOSLongArray *bits_;
  jint numBits_;
  jint numWords_;
}

/*!
 @brief Checks if the bits past numBits are clear.
 Some methods rely on this implicit assumption: search for "Depends on the ghost bits being clear!"
 @return true if the bits past numBits are clear.
 */
- (jboolean)verifyGhostBitsClear;

- (void)or__WithLongArray:(IOSLongArray *)otherArr
                  withInt:(jint)otherNumWords;

- (void)xor__WithLongArray:(IOSLongArray *)otherBits
                   withInt:(jint)otherNumWords;

- (void)and__WithLongArray:(IOSLongArray *)otherArr
                   withInt:(jint)otherNumWords;

- (void)andNotWithLongArray:(IOSLongArray *)otherArr
                    withInt:(jint)otherNumWords;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFixedBitSet, bits_, IOSLongArray *)

inline jlong OrgApacheLuceneUtilFixedBitSet_get_BASE_RAM_BYTES_USED(void);
static jlong OrgApacheLuceneUtilFixedBitSet_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilFixedBitSet, BASE_RAM_BYTES_USED, jlong)

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFixedBitSet_verifyGhostBitsClear(OrgApacheLuceneUtilFixedBitSet *self);

__attribute__((unused)) static void OrgApacheLuceneUtilFixedBitSet_or__WithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherArr, jint otherNumWords);

__attribute__((unused)) static void OrgApacheLuceneUtilFixedBitSet_xor__WithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherBits, jint otherNumWords);

__attribute__((unused)) static void OrgApacheLuceneUtilFixedBitSet_and__WithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherArr, jint otherNumWords);

__attribute__((unused)) static void OrgApacheLuceneUtilFixedBitSet_andNotWithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherArr, jint otherNumWords);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFixedBitSet)

@implementation OrgApacheLuceneUtilFixedBitSet

+ (OrgApacheLuceneUtilFixedBitSet *)ensureCapacityWithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)bits
                                                                             withInt:(jint)numBits {
  return OrgApacheLuceneUtilFixedBitSet_ensureCapacityWithOrgApacheLuceneUtilFixedBitSet_withInt_(bits, numBits);
}

+ (jint)bits2wordsWithInt:(jint)numBits {
  return OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(numBits);
}

+ (jlong)intersectionCountWithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)a
                          withOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)b {
  return OrgApacheLuceneUtilFixedBitSet_intersectionCountWithOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(a, b);
}

+ (jlong)unionCountWithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)a
                   withOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)b {
  return OrgApacheLuceneUtilFixedBitSet_unionCountWithOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(a, b);
}

+ (jlong)andNotCountWithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)a
                    withOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)b {
  return OrgApacheLuceneUtilFixedBitSet_andNotCountWithOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(a, b);
}

- (instancetype)initWithInt:(jint)numBits {
  OrgApacheLuceneUtilFixedBitSet_initWithInt_(self, numBits);
  return self;
}

- (instancetype)initWithLongArray:(IOSLongArray *)storedBits
                          withInt:(jint)numBits {
  OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(self, storedBits, numBits);
  return self;
}

- (jboolean)verifyGhostBitsClear {
  return OrgApacheLuceneUtilFixedBitSet_verifyGhostBitsClear(self);
}

- (jint)length {
  return numBits_;
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilFixedBitSet_BASE_RAM_BYTES_USED + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithLongArray_(bits_);
}

- (IOSLongArray *)getBits {
  return bits_;
}

- (jint)cardinality {
  return (jint) OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(bits_, 0, numWords_);
}

- (jboolean)getWithInt:(jint)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_));
  jint i = JreRShift32(index, 6);
  jlong bitmask = JreLShift64(1LL, index);
  return (IOSLongArray_Get(nil_chk(bits_), i) & bitmask) != 0;
}

- (void)setWithInt:(jint)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_));
  jint wordNum = JreRShift32(index, 6);
  jlong bitmask = JreLShift64(1LL, index);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) |= bitmask;
}

- (jboolean)getAndSetWithInt:(jint)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_));
  jint wordNum = JreRShift32(index, 6);
  jlong bitmask = JreLShift64(1LL, index);
  jboolean val = (IOSLongArray_Get(nil_chk(bits_), wordNum) & bitmask) != 0;
  *IOSLongArray_GetRef(bits_, wordNum) |= bitmask;
  return val;
}

- (void)clearWithInt:(jint)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_));
  jint wordNum = JreRShift32(index, 6);
  jlong bitmask = JreLShift64(1LL, index);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) &= ~bitmask;
}

- (jboolean)getAndClearWithInt:(jint)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_));
  jint wordNum = JreRShift32(index, 6);
  jlong bitmask = JreLShift64(1LL, index);
  jboolean val = (IOSLongArray_Get(nil_chk(bits_), wordNum) & bitmask) != 0;
  *IOSLongArray_GetRef(bits_, wordNum) &= ~bitmask;
  return val;
}

- (jint)nextSetBitWithInt:(jint)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$I$I", @"index=", index, @", numBits=", numBits_));
  jint i = JreRShift32(index, 6);
  jlong word = JreRShift64(IOSLongArray_Get(nil_chk(bits_), i), index);
  if (word != 0) {
    return index + JavaLangLong_numberOfTrailingZerosWithLong_(word);
  }
  while (++i < numWords_) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) {
      return (JreLShift32(i, 6)) + JavaLangLong_numberOfTrailingZerosWithLong_(word);
    }
  }
  return OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
}

- (jint)prevSetBitWithInt:(jint)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$I$I", @"index=", index, @" numBits=", numBits_));
  jint i = JreRShift32(index, 6);
  jint subIndex = index & (jint) 0x3f;
  jlong word = (JreLShift64(IOSLongArray_Get(nil_chk(bits_), i), (63 - subIndex)));
  if (word != 0) {
    return (JreLShift32(i, 6)) + subIndex - JavaLangLong_numberOfLeadingZerosWithLong_(word);
  }
  while (--i >= 0) {
    word = IOSLongArray_Get(bits_, i);
    if (word != 0) {
      return (JreLShift32(i, 6)) + 63 - JavaLangLong_numberOfLeadingZerosWithLong_(word);
    }
  }
  return -1;
}

- (void)or__WithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iter {
  if (OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter) != nil) {
    [self assertUnpositionedWithOrgApacheLuceneSearchDocIdSetIterator:iter];
    OrgApacheLuceneUtilFixedBitSet *bits = OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter);
    [self or__WithOrgApacheLuceneUtilFixedBitSet:bits];
  }
  else {
    [super or__WithOrgApacheLuceneSearchDocIdSetIterator:iter];
  }
}

- (void)or__WithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)other {
  OrgApacheLuceneUtilFixedBitSet_or__WithLongArray_withInt_(self, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(other))->bits_, other->numWords_);
}

- (void)or__WithLongArray:(IOSLongArray *)otherArr
                  withInt:(jint)otherNumWords {
  OrgApacheLuceneUtilFixedBitSet_or__WithLongArray_withInt_(self, otherArr, otherNumWords);
}

- (void)xor__WithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)other {
  OrgApacheLuceneUtilFixedBitSet_xor__WithLongArray_withInt_(self, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(other))->bits_, other->numWords_);
}

- (void)xor__WithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iter {
  [self assertUnpositionedWithOrgApacheLuceneSearchDocIdSetIterator:iter];
  if (OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter) != nil) {
    OrgApacheLuceneUtilFixedBitSet *bits = OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter);
    [self xor__WithOrgApacheLuceneUtilFixedBitSet:bits];
  }
  else {
    jint doc;
    while ((doc = [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(iter)) nextDoc]) < numBits_) {
      [self flipWithInt:doc];
    }
  }
}

- (void)xor__WithLongArray:(IOSLongArray *)otherBits
                   withInt:(jint)otherNumWords {
  OrgApacheLuceneUtilFixedBitSet_xor__WithLongArray_withInt_(self, otherBits, otherNumWords);
}

- (void)and__WithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iter {
  if (OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter) != nil) {
    [self assertUnpositionedWithOrgApacheLuceneSearchDocIdSetIterator:iter];
    OrgApacheLuceneUtilFixedBitSet *bits = OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter);
    [self and__WithOrgApacheLuceneUtilFixedBitSet:bits];
  }
  else {
    [super and__WithOrgApacheLuceneSearchDocIdSetIterator:iter];
  }
}

- (jboolean)intersectsWithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)other {
  jint pos = JavaLangMath_minWithInt_withInt_(numWords_, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(other))->numWords_);
  while (--pos >= 0) {
    if ((IOSLongArray_Get(nil_chk(bits_), pos) & IOSLongArray_Get(other->bits_, pos)) != 0) return true;
  }
  return false;
}

- (void)and__WithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)other {
  OrgApacheLuceneUtilFixedBitSet_and__WithLongArray_withInt_(self, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(other))->bits_, other->numWords_);
}

- (void)and__WithLongArray:(IOSLongArray *)otherArr
                   withInt:(jint)otherNumWords {
  OrgApacheLuceneUtilFixedBitSet_and__WithLongArray_withInt_(self, otherArr, otherNumWords);
}

- (void)andNotWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iter {
  if (OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter) != nil) {
    [self assertUnpositionedWithOrgApacheLuceneSearchDocIdSetIterator:iter];
    OrgApacheLuceneUtilFixedBitSet *bits = OrgApacheLuceneUtilBitSetIterator_getFixedBitSetOrNullWithOrgApacheLuceneSearchDocIdSetIterator_(iter);
    [self andNotWithOrgApacheLuceneUtilFixedBitSet:bits];
  }
  else {
    [super andNotWithOrgApacheLuceneSearchDocIdSetIterator:iter];
  }
}

- (void)andNotWithOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)other {
  OrgApacheLuceneUtilFixedBitSet_andNotWithLongArray_withInt_(self, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(other))->bits_, other->numWords_);
}

- (void)andNotWithLongArray:(IOSLongArray *)otherArr
                    withInt:(jint)otherNumWords {
  OrgApacheLuceneUtilFixedBitSet_andNotWithLongArray_withInt_(self, otherArr, otherNumWords);
}

- (jboolean)scanIsEmpty {
  jint count = numWords_;
  for (jint i = 0; i < count; i++) {
    if (IOSLongArray_Get(nil_chk(bits_), i) != 0) return false;
  }
  return true;
}

- (void)flipWithInt:(jint)startIndex
            withInt:(jint)endIndex {
  JreAssert(startIndex >= 0 && startIndex < numBits_, @"org/apache/lucene/util/FixedBitSet.java:403 condition failed: assert startIndex >= 0 && startIndex < numBits;");
  JreAssert(endIndex >= 0 && endIndex <= numBits_, @"org/apache/lucene/util/FixedBitSet.java:404 condition failed: assert endIndex >= 0 && endIndex <= numBits;");
  if (endIndex <= startIndex) {
    return;
  }
  jint startWord = JreRShift32(startIndex, 6);
  jint endWord = JreRShift32((endIndex - 1), 6);
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) ^= (startmask & endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) ^= startmask;
  for (jint i = startWord + 1; i < endWord; i++) {
    *IOSLongArray_GetRef(bits_, i) = ~IOSLongArray_Get(bits_, i);
  }
  *IOSLongArray_GetRef(bits_, endWord) ^= endmask;
}

- (void)flipWithInt:(jint)index {
  JreAssert(index >= 0 && index < numBits_, JreStrcat("$I$I", @"index=", index, @" numBits=", numBits_));
  jint wordNum = JreRShift32(index, 6);
  jlong bitmask = JreLShift64(1LL, index);
  *IOSLongArray_GetRef(nil_chk(bits_), wordNum) ^= bitmask;
}

- (void)setWithInt:(jint)startIndex
           withInt:(jint)endIndex {
  JreAssert(startIndex >= 0 && startIndex < numBits_, JreStrcat("$I$I", @"startIndex=", startIndex, @", numBits=", numBits_));
  JreAssert(endIndex >= 0 && endIndex <= numBits_, JreStrcat("$I$I", @"endIndex=", endIndex, @", numBits=", numBits_));
  if (endIndex <= startIndex) {
    return;
  }
  jint startWord = JreRShift32(startIndex, 6);
  jint endWord = JreRShift32((endIndex - 1), 6);
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) |= (startmask & endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) |= startmask;
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, startWord + 1, endWord, -1LL);
  *IOSLongArray_GetRef(bits_, endWord) |= endmask;
}

- (void)clearWithInt:(jint)startIndex
             withInt:(jint)endIndex {
  JreAssert(startIndex >= 0 && startIndex < numBits_, JreStrcat("$I$I", @"startIndex=", startIndex, @", numBits=", numBits_));
  JreAssert(endIndex >= 0 && endIndex <= numBits_, JreStrcat("$I$I", @"endIndex=", endIndex, @", numBits=", numBits_));
  if (endIndex <= startIndex) {
    return;
  }
  jint startWord = JreRShift32(startIndex, 6);
  jint endWord = JreRShift32((endIndex - 1), 6);
  jlong startmask = JreLShift64(-1LL, startIndex);
  jlong endmask = JreURShift64(-1LL, -endIndex);
  startmask = ~startmask;
  endmask = ~endmask;
  if (startWord == endWord) {
    *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= (startmask | endmask);
    return;
  }
  *IOSLongArray_GetRef(nil_chk(bits_), startWord) &= startmask;
  JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(bits_, startWord + 1, endWord, 0LL);
  *IOSLongArray_GetRef(bits_, endWord) &= endmask;
}

- (OrgApacheLuceneUtilFixedBitSet *)java_clone {
  IOSLongArray *bits = [IOSLongArray arrayWithLength:((IOSLongArray *) nil_chk(self->bits_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->bits_, 0, bits, 0, numWords_);
  return create_OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(bits, numBits_);
}

- (jboolean)isEqual:(id)o {
  if (JreObjectEqualsEquals(self, o)) {
    return true;
  }
  if (!([o isKindOfClass:[OrgApacheLuceneUtilFixedBitSet class]])) {
    return false;
  }
  OrgApacheLuceneUtilFixedBitSet *other = (OrgApacheLuceneUtilFixedBitSet *) cast_chk(o, [OrgApacheLuceneUtilFixedBitSet class]);
  if (numBits_ != ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(other))->numBits_) {
    return false;
  }
  return JavaUtilArrays_equalsWithLongArray_withLongArray_(bits_, other->bits_);
}

- (NSUInteger)hash {
  jlong h = 0;
  for (jint i = numWords_; --i >= 0; ) {
    h ^= IOSLongArray_Get(nil_chk(bits_), i);
    h = (JreLShift64(h, 1)) | (JreURShift64(h, 63));
  }
  return (jint) ((JreRShift64(h, 32)) ^ h) + (jint) 0x98761234;
}

- (void)dealloc {
  RELEASE_(bits_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneUtilFixedBitSet;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 6, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 7, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, 18, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 17, 18, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 17, 18, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 17, 18, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 25, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFixedBitSet;", 0x1, 26, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(ensureCapacityWithOrgApacheLuceneUtilFixedBitSet:withInt:);
  methods[1].selector = @selector(bits2wordsWithInt:);
  methods[2].selector = @selector(intersectionCountWithOrgApacheLuceneUtilFixedBitSet:withOrgApacheLuceneUtilFixedBitSet:);
  methods[3].selector = @selector(unionCountWithOrgApacheLuceneUtilFixedBitSet:withOrgApacheLuceneUtilFixedBitSet:);
  methods[4].selector = @selector(andNotCountWithOrgApacheLuceneUtilFixedBitSet:withOrgApacheLuceneUtilFixedBitSet:);
  methods[5].selector = @selector(initWithInt:);
  methods[6].selector = @selector(initWithLongArray:withInt:);
  methods[7].selector = @selector(verifyGhostBitsClear);
  methods[8].selector = @selector(length);
  methods[9].selector = @selector(ramBytesUsed);
  methods[10].selector = @selector(getBits);
  methods[11].selector = @selector(cardinality);
  methods[12].selector = @selector(getWithInt:);
  methods[13].selector = @selector(setWithInt:);
  methods[14].selector = @selector(getAndSetWithInt:);
  methods[15].selector = @selector(clearWithInt:);
  methods[16].selector = @selector(getAndClearWithInt:);
  methods[17].selector = @selector(nextSetBitWithInt:);
  methods[18].selector = @selector(prevSetBitWithInt:);
  methods[19].selector = @selector(or__WithOrgApacheLuceneSearchDocIdSetIterator:);
  methods[20].selector = @selector(or__WithOrgApacheLuceneUtilFixedBitSet:);
  methods[21].selector = @selector(or__WithLongArray:withInt:);
  methods[22].selector = @selector(xor__WithOrgApacheLuceneUtilFixedBitSet:);
  methods[23].selector = @selector(xor__WithOrgApacheLuceneSearchDocIdSetIterator:);
  methods[24].selector = @selector(xor__WithLongArray:withInt:);
  methods[25].selector = @selector(and__WithOrgApacheLuceneSearchDocIdSetIterator:);
  methods[26].selector = @selector(intersectsWithOrgApacheLuceneUtilFixedBitSet:);
  methods[27].selector = @selector(and__WithOrgApacheLuceneUtilFixedBitSet:);
  methods[28].selector = @selector(and__WithLongArray:withInt:);
  methods[29].selector = @selector(andNotWithOrgApacheLuceneSearchDocIdSetIterator:);
  methods[30].selector = @selector(andNotWithOrgApacheLuceneUtilFixedBitSet:);
  methods[31].selector = @selector(andNotWithLongArray:withInt:);
  methods[32].selector = @selector(scanIsEmpty);
  methods[33].selector = @selector(flipWithInt:withInt:);
  methods[34].selector = @selector(flipWithInt:);
  methods[35].selector = @selector(setWithInt:withInt:);
  methods[36].selector = @selector(clearWithInt:withInt:);
  methods[37].selector = @selector(java_clone);
  methods[38].selector = @selector(isEqual:);
  methods[39].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED", "J", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "bits_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numBits_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numWords_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ensureCapacity", "LOrgApacheLuceneUtilFixedBitSet;I", "bits2words", "I", "intersectionCount", "LOrgApacheLuceneUtilFixedBitSet;LOrgApacheLuceneUtilFixedBitSet;", "unionCount", "andNotCount", "[JI", "get", "set", "getAndSet", "clear", "getAndClear", "nextSetBit", "prevSetBit", "or", "LOrgApacheLuceneSearchDocIdSetIterator;", "LJavaIoIOException;", "LOrgApacheLuceneUtilFixedBitSet;", "xor", "and", "intersects", "andNot", "flip", "II", "clone", "equals", "LNSObject;", "hashCode", &OrgApacheLuceneUtilFixedBitSet_BASE_RAM_BYTES_USED };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFixedBitSet = { "FixedBitSet", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 40, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFixedBitSet;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFixedBitSet class]) {
    OrgApacheLuceneUtilFixedBitSet_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilFixedBitSet_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFixedBitSet)
  }
}

@end

OrgApacheLuceneUtilFixedBitSet *OrgApacheLuceneUtilFixedBitSet_ensureCapacityWithOrgApacheLuceneUtilFixedBitSet_withInt_(OrgApacheLuceneUtilFixedBitSet *bits, jint numBits) {
  OrgApacheLuceneUtilFixedBitSet_initialize();
  if (numBits < ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(bits))->numBits_) {
    return bits;
  }
  else {
    jint numWords = OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(numBits);
    IOSLongArray *arr = [bits getBits];
    if (numWords >= ((IOSLongArray *) nil_chk(arr))->size_) {
      arr = OrgApacheLuceneUtilArrayUtil_growWithLongArray_withInt_(arr, numWords + 1);
    }
    return create_OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(arr, JreLShift32(((IOSLongArray *) nil_chk(arr))->size_, 6));
  }
}

jint OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(jint numBits) {
  OrgApacheLuceneUtilFixedBitSet_initialize();
  return (JreRShift32((numBits - 1), 6)) + 1;
}

jlong OrgApacheLuceneUtilFixedBitSet_intersectionCountWithOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(OrgApacheLuceneUtilFixedBitSet *a, OrgApacheLuceneUtilFixedBitSet *b) {
  OrgApacheLuceneUtilFixedBitSet_initialize();
  return OrgApacheLuceneUtilBitUtil_pop_intersectWithLongArray_withLongArray_withInt_withInt_(((OrgApacheLuceneUtilFixedBitSet *) nil_chk(a))->bits_, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(b))->bits_, 0, JavaLangMath_minWithInt_withInt_(a->numWords_, b->numWords_));
}

jlong OrgApacheLuceneUtilFixedBitSet_unionCountWithOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(OrgApacheLuceneUtilFixedBitSet *a, OrgApacheLuceneUtilFixedBitSet *b) {
  OrgApacheLuceneUtilFixedBitSet_initialize();
  jlong tot = OrgApacheLuceneUtilBitUtil_pop_unionWithLongArray_withLongArray_withInt_withInt_(((OrgApacheLuceneUtilFixedBitSet *) nil_chk(a))->bits_, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(b))->bits_, 0, JavaLangMath_minWithInt_withInt_(a->numWords_, b->numWords_));
  if (a->numWords_ < b->numWords_) {
    tot += OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(b->bits_, a->numWords_, b->numWords_ - a->numWords_);
  }
  else if (a->numWords_ > b->numWords_) {
    tot += OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(a->bits_, b->numWords_, a->numWords_ - b->numWords_);
  }
  return tot;
}

jlong OrgApacheLuceneUtilFixedBitSet_andNotCountWithOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(OrgApacheLuceneUtilFixedBitSet *a, OrgApacheLuceneUtilFixedBitSet *b) {
  OrgApacheLuceneUtilFixedBitSet_initialize();
  jlong tot = OrgApacheLuceneUtilBitUtil_pop_andnotWithLongArray_withLongArray_withInt_withInt_(((OrgApacheLuceneUtilFixedBitSet *) nil_chk(a))->bits_, ((OrgApacheLuceneUtilFixedBitSet *) nil_chk(b))->bits_, 0, JavaLangMath_minWithInt_withInt_(a->numWords_, b->numWords_));
  if (a->numWords_ > b->numWords_) {
    tot += OrgApacheLuceneUtilBitUtil_pop_arrayWithLongArray_withInt_withInt_(a->bits_, b->numWords_, a->numWords_ - b->numWords_);
  }
  return tot;
}

void OrgApacheLuceneUtilFixedBitSet_initWithInt_(OrgApacheLuceneUtilFixedBitSet *self, jint numBits) {
  OrgApacheLuceneUtilBitSet_init(self);
  self->numBits_ = numBits;
  JreStrongAssignAndConsume(&self->bits_, [IOSLongArray newArrayWithLength:OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(numBits)]);
  self->numWords_ = self->bits_->size_;
}

OrgApacheLuceneUtilFixedBitSet *new_OrgApacheLuceneUtilFixedBitSet_initWithInt_(jint numBits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFixedBitSet, initWithInt_, numBits)
}

OrgApacheLuceneUtilFixedBitSet *create_OrgApacheLuceneUtilFixedBitSet_initWithInt_(jint numBits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFixedBitSet, initWithInt_, numBits)
}

void OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *storedBits, jint numBits) {
  OrgApacheLuceneUtilBitSet_init(self);
  self->numWords_ = OrgApacheLuceneUtilFixedBitSet_bits2wordsWithInt_(numBits);
  if (self->numWords_ > ((IOSLongArray *) nil_chk(storedBits))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"The given long array is too small  to hold ", numBits, @" bits"));
  }
  self->numBits_ = numBits;
  JreStrongAssign(&self->bits_, storedBits);
  JreAssert(OrgApacheLuceneUtilFixedBitSet_verifyGhostBitsClear(self), @"org/apache/lucene/util/FixedBitSet.java:134 condition failed: assert verifyGhostBitsClear();");
}

OrgApacheLuceneUtilFixedBitSet *new_OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(IOSLongArray *storedBits, jint numBits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFixedBitSet, initWithLongArray_withInt_, storedBits, numBits)
}

OrgApacheLuceneUtilFixedBitSet *create_OrgApacheLuceneUtilFixedBitSet_initWithLongArray_withInt_(IOSLongArray *storedBits, jint numBits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFixedBitSet, initWithLongArray_withInt_, storedBits, numBits)
}

jboolean OrgApacheLuceneUtilFixedBitSet_verifyGhostBitsClear(OrgApacheLuceneUtilFixedBitSet *self) {
  for (jint i = self->numWords_; i < ((IOSLongArray *) nil_chk(self->bits_))->size_; i++) {
    if (IOSLongArray_Get(self->bits_, i) != 0) return false;
  }
  if ((self->numBits_ & (jint) 0x3f) == 0) return true;
  jlong mask = JreLShift64(-1LL, self->numBits_);
  return (IOSLongArray_Get(self->bits_, self->numWords_ - 1) & mask) == 0;
}

void OrgApacheLuceneUtilFixedBitSet_or__WithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherArr, jint otherNumWords) {
  JreAssert(otherNumWords <= self->numWords_, JreStrcat("$I$I", @"numWords=", self->numWords_, @", otherNumWords=", otherNumWords));
  IOSLongArray *thisArr = self->bits_;
  jint pos = JavaLangMath_minWithInt_withInt_(self->numWords_, otherNumWords);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(thisArr), pos) |= IOSLongArray_Get(nil_chk(otherArr), pos);
  }
}

void OrgApacheLuceneUtilFixedBitSet_xor__WithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherBits, jint otherNumWords) {
  JreAssert(otherNumWords <= self->numWords_, JreStrcat("$I$I", @"numWords=", self->numWords_, @", other.numWords=", otherNumWords));
  IOSLongArray *thisBits = self->bits_;
  jint pos = JavaLangMath_minWithInt_withInt_(self->numWords_, otherNumWords);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(thisBits), pos) ^= IOSLongArray_Get(nil_chk(otherBits), pos);
  }
}

void OrgApacheLuceneUtilFixedBitSet_and__WithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherArr, jint otherNumWords) {
  IOSLongArray *thisArr = self->bits_;
  jint pos = JavaLangMath_minWithInt_withInt_(self->numWords_, otherNumWords);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(thisArr), pos) &= IOSLongArray_Get(nil_chk(otherArr), pos);
  }
  if (self->numWords_ > otherNumWords) {
    JavaUtilArrays_fillWithLongArray_withInt_withInt_withLong_(thisArr, otherNumWords, self->numWords_, 0LL);
  }
}

void OrgApacheLuceneUtilFixedBitSet_andNotWithLongArray_withInt_(OrgApacheLuceneUtilFixedBitSet *self, IOSLongArray *otherArr, jint otherNumWords) {
  IOSLongArray *thisArr = self->bits_;
  jint pos = JavaLangMath_minWithInt_withInt_(self->numWords_, otherNumWords);
  while (--pos >= 0) {
    *IOSLongArray_GetRef(nil_chk(thisArr), pos) &= ~IOSLongArray_Get(nil_chk(otherArr), pos);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFixedBitSet)
