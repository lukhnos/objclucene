//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/StringHelper.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/FileInputStream.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/SecurityException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/util/Arrays.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/lukhnos/portmobile/file/Files.h"
#include "org/lukhnos/portmobile/file/Path.h"
#include "org/lukhnos/portmobile/file/Paths.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/StringHelper must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilStringHelper ()

- (instancetype)init;

+ (jboolean)sliceEqualsWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)sliceToTest
                       withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)other
                                               withInt:(jint)pos;

@end

inline JavaMathBigInteger *OrgApacheLuceneUtilStringHelper_get_nextId(void);
inline JavaMathBigInteger *OrgApacheLuceneUtilStringHelper_set_nextId(JavaMathBigInteger *value);
static JavaMathBigInteger *OrgApacheLuceneUtilStringHelper_nextId;
J2OBJC_STATIC_FIELD_OBJ(OrgApacheLuceneUtilStringHelper, nextId, JavaMathBigInteger *)

inline JavaMathBigInteger *OrgApacheLuceneUtilStringHelper_get_mask128(void);
static JavaMathBigInteger *OrgApacheLuceneUtilStringHelper_mask128;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilStringHelper, mask128, JavaMathBigInteger *)

inline id OrgApacheLuceneUtilStringHelper_get_idLock(void);
static id OrgApacheLuceneUtilStringHelper_idLock;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilStringHelper, idLock, id)

__attribute__((unused)) static void OrgApacheLuceneUtilStringHelper_init(OrgApacheLuceneUtilStringHelper *self);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilStringHelper_sliceEqualsWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneUtilBytesRef *sliceToTest, OrgApacheLuceneUtilBytesRef *other, jint pos);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilStringHelper)

jint OrgApacheLuceneUtilStringHelper_GOOD_FAST_HASH_SEED;

@implementation OrgApacheLuceneUtilStringHelper

+ (jint)GOOD_FAST_HASH_SEED {
  return OrgApacheLuceneUtilStringHelper_GOOD_FAST_HASH_SEED;
}

+ (jint)ID_LENGTH {
  return OrgApacheLuceneUtilStringHelper_ID_LENGTH;
}

+ (jint)bytesDifferenceWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)left
                       withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)right {
  return OrgApacheLuceneUtilStringHelper_bytesDifferenceWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(left, right);
}

+ (jint)sortKeyLengthWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)priorTerm
                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)currentTerm {
  return OrgApacheLuceneUtilStringHelper_sortKeyLengthWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(priorTerm, currentTerm);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilStringHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)equalsWithNSString:(NSString *)s1
                  withNSString:(NSString *)s2 {
  return OrgApacheLuceneUtilStringHelper_equalsWithNSString_withNSString_(s1, s2);
}

+ (jboolean)startsWithWithByteArray:(IOSByteArray *)ref
    withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix {
  return OrgApacheLuceneUtilStringHelper_startsWithWithByteArray_withOrgApacheLuceneUtilBytesRef_(ref, prefix);
}

+ (jboolean)startsWithWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)ref
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix {
  return OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(ref, prefix);
}

+ (jboolean)endsWithWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)ref
                    withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)suffix {
  return OrgApacheLuceneUtilStringHelper_endsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(ref, suffix);
}

+ (jboolean)sliceEqualsWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)sliceToTest
                       withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)other
                                               withInt:(jint)pos {
  return OrgApacheLuceneUtilStringHelper_sliceEqualsWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(sliceToTest, other, pos);
}

+ (jint)murmurhash3_x86_32WithByteArray:(IOSByteArray *)data
                                withInt:(jint)offset
                                withInt:(jint)len
                                withInt:(jint)seed {
  return OrgApacheLuceneUtilStringHelper_murmurhash3_x86_32WithByteArray_withInt_withInt_withInt_(data, offset, len, seed);
}

+ (jint)murmurhash3_x86_32WithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes
                                                  withInt:(jint)seed {
  return OrgApacheLuceneUtilStringHelper_murmurhash3_x86_32WithOrgApacheLuceneUtilBytesRef_withInt_(bytes, seed);
}

+ (IOSByteArray *)randomId {
  return OrgApacheLuceneUtilStringHelper_randomId();
}

+ (NSString *)idToStringWithByteArray:(IOSByteArray *)id_ {
  return OrgApacheLuceneUtilStringHelper_idToStringWithByteArray_(id_);
}

+ (OrgApacheLuceneUtilBytesRef *)intsRefToBytesRefWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)ints {
  return OrgApacheLuceneUtilStringHelper_intsRefToBytesRefWithOrgApacheLuceneUtilIntsRef_(ints);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 12, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x9, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(bytesDifferenceWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:);
  methods[1].selector = @selector(sortKeyLengthWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(equalsWithNSString:withNSString:);
  methods[4].selector = @selector(startsWithWithByteArray:withOrgApacheLuceneUtilBytesRef:);
  methods[5].selector = @selector(startsWithWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:);
  methods[6].selector = @selector(endsWithWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:);
  methods[7].selector = @selector(sliceEqualsWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:withInt:);
  methods[8].selector = @selector(murmurhash3_x86_32WithByteArray:withInt:withInt:withInt:);
  methods[9].selector = @selector(murmurhash3_x86_32WithOrgApacheLuceneUtilBytesRef:withInt:);
  methods[10].selector = @selector(randomId);
  methods[11].selector = @selector(idToStringWithByteArray:);
  methods[12].selector = @selector(intsRefToBytesRefWithOrgApacheLuceneUtilIntsRef:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "GOOD_FAST_HASH_SEED", "I", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "nextId", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0xa, -1, 18, -1, -1 },
    { "mask128", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "idLock", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "ID_LENGTH", "I", .constantValue.asInt = OrgApacheLuceneUtilStringHelper_ID_LENGTH, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "bytesDifference", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;", "sortKeyLength", "equals", "LNSString;LNSString;", "startsWith", "[BLOrgApacheLuceneUtilBytesRef;", "endsWith", "sliceEquals", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;I", "murmurhash3_x86_32", "[BIII", "LOrgApacheLuceneUtilBytesRef;I", "idToString", "[B", "intsRefToBytesRef", "LOrgApacheLuceneUtilIntsRef;", &OrgApacheLuceneUtilStringHelper_GOOD_FAST_HASH_SEED, &OrgApacheLuceneUtilStringHelper_nextId, &OrgApacheLuceneUtilStringHelper_mask128, &OrgApacheLuceneUtilStringHelper_idLock };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilStringHelper = { "StringHelper", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x401, 13, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilStringHelper;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilStringHelper class]) {
    {
      NSString *prop = JavaLangSystem_getPropertyWithNSString_(@"tests.seed");
      if (prop != nil) {
        OrgApacheLuceneUtilStringHelper_GOOD_FAST_HASH_SEED = ((jint) [prop hash]);
      }
      else {
        OrgApacheLuceneUtilStringHelper_GOOD_FAST_HASH_SEED = (jint) JavaLangSystem_currentTimeMillis();
      }
    }
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilStringHelper_idLock, new_NSObject_init());
    {
      IOSByteArray *maskBytes128 = [IOSByteArray arrayWithLength:16];
      JavaUtilArrays_fillWithByteArray_withByte_(maskBytes128, (jbyte) (jint) 0xff);
      JreStrongAssignAndConsume(&OrgApacheLuceneUtilStringHelper_mask128, new_JavaMathBigInteger_initWithInt_withByteArray_(1, maskBytes128));
      NSString *prop = JavaLangSystem_getPropertyWithNSString_(@"tests.seed");
      jlong x0;
      jlong x1;
      if (prop != nil) {
        if ([prop java_length] > 8) {
          prop = [prop java_substring:[prop java_length] - 8];
        }
        x0 = JavaLangLong_parseLongWithNSString_withInt_(prop, 16);
        x1 = x0;
      }
      else {
        @try {
          JavaIoDataInputStream *is = create_JavaIoDataInputStream_initWithJavaIoInputStream_(OrgLukhnosPortmobileFileFiles_newInputStreamWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePaths_getWithNSString_(@"/dev/urandom")));
          JavaLangThrowable *__primaryException1 = nil;
          @try {
            x0 = [is readLong];
            x1 = [is readLong];
          }
          @catch (JavaLangThrowable *e) {
            __primaryException1 = e;
            @throw e;
          }
          @finally {
            if (is != nil) {
              if (__primaryException1 != nil) {
                @try {
                  [is close];
                }
                @catch (JavaLangThrowable *e) {
                  [__primaryException1 addSuppressedWithJavaLangThrowable:e];
                }
              }
              else {
                [is close];
              }
            }
          }
        }
        @catch (JavaLangException *unavailable) {
          x0 = JavaLangSystem_nanoTime();
          x1 = JreLShift32(((jint) [OrgApacheLuceneUtilStringHelper_class_() hash]), 32);
          JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
          @try {
            JavaUtilProperties *p = JavaLangSystem_getProperties();
            for (NSString * __strong s in nil_chk([((JavaUtilProperties *) nil_chk(p)) stringPropertyNames])) {
              [sb appendWithNSString:s];
              [sb appendWithNSString:[p getPropertyWithNSString:s]];
            }
            x1 |= ((jint) [((NSString *) nil_chk([sb description])) hash]);
          }
          @catch (JavaLangSecurityException *notallowed) {
            x1 |= ((jint) [JavaLangStringBuffer_class_() hash]);
          }
        }
      }
      for (jint i = 0; i < 10; i++) {
        jlong s1 = x0;
        jlong s0 = x1;
        x0 = s0;
        s1 ^= JreLShift64(s1, 23);
        x1 = s1 ^ s0 ^ (JreURShift64(s1, 17)) ^ (JreURShift64(s0, 26));
      }
      IOSByteArray *maskBytes64 = [IOSByteArray arrayWithLength:8];
      JavaUtilArrays_fillWithByteArray_withByte_(maskBytes64, (jbyte) (jint) 0xff);
      JavaMathBigInteger *mask64 = create_JavaMathBigInteger_initWithInt_withByteArray_(1, maskBytes64);
      JavaMathBigInteger *unsignedX0 = JreRetainedLocalValue([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(x0))) and__WithJavaMathBigInteger:mask64]);
      JavaMathBigInteger *unsignedX1 = JreRetainedLocalValue([((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_(x1))) and__WithJavaMathBigInteger:mask64]);
      JreStrongAssign(&OrgApacheLuceneUtilStringHelper_nextId, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(unsignedX0)) shiftLeftWithInt:64])) or__WithJavaMathBigInteger:unsignedX1]);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilStringHelper)
  }
}

@end

jint OrgApacheLuceneUtilStringHelper_bytesDifferenceWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *left, OrgApacheLuceneUtilBytesRef *right) {
  OrgApacheLuceneUtilStringHelper_initialize();
  jint len = ((OrgApacheLuceneUtilBytesRef *) nil_chk(left))->length_ < ((OrgApacheLuceneUtilBytesRef *) nil_chk(right))->length_ ? left->length_ : right->length_;
  IOSByteArray *bytesLeft = left->bytes_;
  jint offLeft = left->offset_;
  IOSByteArray *bytesRight = right->bytes_;
  jint offRight = right->offset_;
  for (jint i = 0; i < len; i++) if (IOSByteArray_Get(nil_chk(bytesLeft), i + offLeft) != IOSByteArray_Get(nil_chk(bytesRight), i + offRight)) return i;
  return len;
}

jint OrgApacheLuceneUtilStringHelper_sortKeyLengthWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *priorTerm, OrgApacheLuceneUtilBytesRef *currentTerm) {
  OrgApacheLuceneUtilStringHelper_initialize();
  jint currentTermOffset = ((OrgApacheLuceneUtilBytesRef *) nil_chk(currentTerm))->offset_;
  jint priorTermOffset = ((OrgApacheLuceneUtilBytesRef *) nil_chk(priorTerm))->offset_;
  jint limit = JavaLangMath_minWithInt_withInt_(priorTerm->length_, currentTerm->length_);
  for (jint i = 0; i < limit; i++) {
    if (IOSByteArray_Get(nil_chk(priorTerm->bytes_), priorTermOffset + i) != IOSByteArray_Get(currentTerm->bytes_, currentTermOffset + i)) {
      return i + 1;
    }
  }
  return JavaLangMath_minWithInt_withInt_(1 + priorTerm->length_, currentTerm->length_);
}

void OrgApacheLuceneUtilStringHelper_init(OrgApacheLuceneUtilStringHelper *self) {
  NSObject_init(self);
}

jboolean OrgApacheLuceneUtilStringHelper_equalsWithNSString_withNSString_(NSString *s1, NSString *s2) {
  OrgApacheLuceneUtilStringHelper_initialize();
  if (s1 == nil) {
    return s2 == nil;
  }
  else {
    return [s1 isEqual:s2];
  }
}

jboolean OrgApacheLuceneUtilStringHelper_startsWithWithByteArray_withOrgApacheLuceneUtilBytesRef_(IOSByteArray *ref, OrgApacheLuceneUtilBytesRef *prefix) {
  OrgApacheLuceneUtilStringHelper_initialize();
  if (((IOSByteArray *) nil_chk(ref))->size_ < ((OrgApacheLuceneUtilBytesRef *) nil_chk(prefix))->length_) {
    return false;
  }
  for (jint i = 0; i < prefix->length_; i++) {
    if (IOSByteArray_Get(ref, i) != IOSByteArray_Get(nil_chk(prefix->bytes_), prefix->offset_ + i)) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *ref, OrgApacheLuceneUtilBytesRef *prefix) {
  OrgApacheLuceneUtilStringHelper_initialize();
  return OrgApacheLuceneUtilStringHelper_sliceEqualsWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(ref, prefix, 0);
}

jboolean OrgApacheLuceneUtilStringHelper_endsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *ref, OrgApacheLuceneUtilBytesRef *suffix) {
  OrgApacheLuceneUtilStringHelper_initialize();
  return OrgApacheLuceneUtilStringHelper_sliceEqualsWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(ref, suffix, ((OrgApacheLuceneUtilBytesRef *) nil_chk(ref))->length_ - ((OrgApacheLuceneUtilBytesRef *) nil_chk(suffix))->length_);
}

jboolean OrgApacheLuceneUtilStringHelper_sliceEqualsWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneUtilBytesRef *sliceToTest, OrgApacheLuceneUtilBytesRef *other, jint pos) {
  OrgApacheLuceneUtilStringHelper_initialize();
  if (pos < 0 || ((OrgApacheLuceneUtilBytesRef *) nil_chk(sliceToTest))->length_ - pos < ((OrgApacheLuceneUtilBytesRef *) nil_chk(other))->length_) {
    return false;
  }
  jint i = ((OrgApacheLuceneUtilBytesRef *) nil_chk(sliceToTest))->offset_ + pos;
  jint j = ((OrgApacheLuceneUtilBytesRef *) nil_chk(other))->offset_;
  jint k = other->offset_ + other->length_;
  while (j < k) {
    if (IOSByteArray_Get(nil_chk(sliceToTest->bytes_), i++) != IOSByteArray_Get(other->bytes_, j++)) {
      return false;
    }
  }
  return true;
}

jint OrgApacheLuceneUtilStringHelper_murmurhash3_x86_32WithByteArray_withInt_withInt_withInt_(IOSByteArray *data, jint offset, jint len, jint seed) {
  OrgApacheLuceneUtilStringHelper_initialize();
  jint c1 = (jint) 0xcc9e2d51;
  jint c2 = (jint) 0x1b873593;
  jint h1 = seed;
  jint roundedEnd = offset + (len & (jint) 0xfffffffc);
  for (jint i = offset; i < roundedEnd; i += 4) {
    jint k1 = (IOSByteArray_Get(nil_chk(data), i) & (jint) 0xff) | (JreLShift32((IOSByteArray_Get(data, i + 1) & (jint) 0xff), 8)) | (JreLShift32((IOSByteArray_Get(data, i + 2) & (jint) 0xff), 16)) | (JreLShift32(IOSByteArray_Get(data, i + 3), 24));
    k1 *= c1;
    k1 = JavaLangInteger_rotateLeftWithInt_withInt_(k1, 15);
    k1 *= c2;
    h1 ^= k1;
    h1 = JavaLangInteger_rotateLeftWithInt_withInt_(h1, 13);
    h1 = h1 * 5 + (jint) 0xe6546b64;
  }
  jint k1 = 0;
  switch (len & (jint) 0x03) {
    case 3:
    k1 = JreLShift32((IOSByteArray_Get(nil_chk(data), roundedEnd + 2) & (jint) 0xff), 16);
    case 2:
    k1 |= JreLShift32((IOSByteArray_Get(nil_chk(data), roundedEnd + 1) & (jint) 0xff), 8);
    case 1:
    k1 |= (IOSByteArray_Get(nil_chk(data), roundedEnd) & (jint) 0xff);
    k1 *= c1;
    k1 = JavaLangInteger_rotateLeftWithInt_withInt_(k1, 15);
    k1 *= c2;
    h1 ^= k1;
  }
  h1 ^= len;
  h1 ^= JreURShift32(h1, 16);
  h1 *= (jint) 0x85ebca6b;
  h1 ^= JreURShift32(h1, 13);
  h1 *= (jint) 0xc2b2ae35;
  h1 ^= JreURShift32(h1, 16);
  return h1;
}

jint OrgApacheLuceneUtilStringHelper_murmurhash3_x86_32WithOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneUtilBytesRef *bytes, jint seed) {
  OrgApacheLuceneUtilStringHelper_initialize();
  return OrgApacheLuceneUtilStringHelper_murmurhash3_x86_32WithByteArray_withInt_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->bytes_, bytes->offset_, bytes->length_, seed);
}

IOSByteArray *OrgApacheLuceneUtilStringHelper_randomId() {
  OrgApacheLuceneUtilStringHelper_initialize();
  IOSByteArray *bits;
  @synchronized(OrgApacheLuceneUtilStringHelper_idLock) {
    bits = JreRetainedLocalValue([((JavaMathBigInteger *) nil_chk(OrgApacheLuceneUtilStringHelper_nextId)) toByteArray]);
    JreStrongAssign(&OrgApacheLuceneUtilStringHelper_nextId, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(OrgApacheLuceneUtilStringHelper_nextId)) addWithJavaMathBigInteger:JreLoadStatic(JavaMathBigInteger, ONE)])) and__WithJavaMathBigInteger:OrgApacheLuceneUtilStringHelper_mask128]);
  }
  if (((IOSByteArray *) nil_chk(bits))->size_ > OrgApacheLuceneUtilStringHelper_ID_LENGTH) {
    JreAssert(bits->size_ == OrgApacheLuceneUtilStringHelper_ID_LENGTH + 1, @"org/apache/lucene/util/StringHelper.java:337 condition failed: assert bits.length == ID_LENGTH + 1;");
    JreAssert(IOSByteArray_Get(bits, 0) == 0, @"org/apache/lucene/util/StringHelper.java:338 condition failed: assert bits[0] == 0;");
    return JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(bits, 1, bits->size_);
  }
  else {
    IOSByteArray *result = [IOSByteArray arrayWithLength:OrgApacheLuceneUtilStringHelper_ID_LENGTH];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(bits, 0, result, result->size_ - bits->size_, bits->size_);
    return result;
  }
}

NSString *OrgApacheLuceneUtilStringHelper_idToStringWithByteArray_(IOSByteArray *id_) {
  OrgApacheLuceneUtilStringHelper_initialize();
  if (id_ == nil) {
    return @"(null)";
  }
  else {
    JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
    [sb appendWithNSString:[create_JavaMathBigInteger_initWithInt_withByteArray_(1, id_) toStringWithInt:JavaLangCharacter_MAX_RADIX]];
    if (id_->size_ != OrgApacheLuceneUtilStringHelper_ID_LENGTH) {
      [sb appendWithNSString:@" (INVALID FORMAT)"];
    }
    return [sb description];
  }
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneUtilStringHelper_intsRefToBytesRefWithOrgApacheLuceneUtilIntsRef_(OrgApacheLuceneUtilIntsRef *ints) {
  OrgApacheLuceneUtilStringHelper_initialize();
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:((OrgApacheLuceneUtilIntsRef *) nil_chk(ints))->length_];
  for (jint i = 0; i < ints->length_; i++) {
    jint x = IOSIntArray_Get(nil_chk(ints->ints_), ints->offset_ + i);
    if (x < 0 || x > 255) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$", @"int at pos=", i, @" with value=", x, @" is out-of-bounds for byte"));
    }
    *IOSByteArray_GetRef(bytes, i) = (jbyte) x;
  }
  return create_OrgApacheLuceneUtilBytesRef_initWithByteArray_(bytes);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilStringHelper)
