//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/ArrayTimSorter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/ArrayTimSorter.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/TimSorter.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/ArrayTimSorter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilArrayTimSorter () {
 @public
  id<JavaUtilComparator> comparator_;
  IOSObjectArray *arr_;
  IOSObjectArray *tmp_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilArrayTimSorter, comparator_, id<JavaUtilComparator>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilArrayTimSorter, arr_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilArrayTimSorter, tmp_, IOSObjectArray *)

@implementation OrgApacheLuceneUtilArrayTimSorter

- (instancetype)initPackagePrivateWithNSObjectArray:(IOSObjectArray *)arr
                             withJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                            withInt:(jint)maxTempSlots {
  OrgApacheLuceneUtilArrayTimSorter_initPackagePrivateWithNSObjectArray_withJavaUtilComparator_withInt_(self, arr, comparator, maxTempSlots);
  return self;
}

- (jint)compareWithInt:(jint)i
               withInt:(jint)j {
  return [((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:IOSObjectArray_Get(nil_chk(arr_), i) withId:IOSObjectArray_Get(arr_, j)];
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  OrgApacheLuceneUtilArrayUtil_swapWithNSObjectArray_withInt_withInt_(arr_, i, j);
}

- (void)copy__WithInt:(jint)src
              withInt:(jint)dest {
  IOSObjectArray_Set(nil_chk(arr_), dest, IOSObjectArray_Get(arr_, src));
}

- (void)saveWithInt:(jint)start
            withInt:(jint)len {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr_, start, tmp_, 0, len);
}

- (void)restoreWithInt:(jint)src
               withInt:(jint)dest {
  IOSObjectArray_Set(nil_chk(arr_), dest, IOSObjectArray_Get(nil_chk(tmp_), src));
}

- (jint)compareSavedWithInt:(jint)i
                    withInt:(jint)j {
  return [((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:IOSObjectArray_Get(nil_chk(tmp_), i) withId:IOSObjectArray_Get(nil_chk(arr_), j)];
}

- (void)dealloc {
  RELEASE_(comparator_);
  RELEASE_(arr_);
  RELEASE_(tmp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 8, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithNSObjectArray:withJavaUtilComparator:withInt:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(swapWithInt:withInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(saveWithInt:withInt:);
  methods[5].selector = @selector(restoreWithInt:withInt:);
  methods[6].selector = @selector(compareSavedWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "arr_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "tmp_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;LJavaUtilComparator;I", "([TT;Ljava/util/Comparator<-TT;>;I)V", "compare", "II", "swap", "copy", "save", "restore", "compareSaved", "Ljava/util/Comparator<-TT;>;", "[TT;", "<T:Ljava/lang/Object;>Lorg/apache/lucene/util/TimSorter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilArrayTimSorter = { "ArrayTimSorter", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x10, 7, 3, -1, -1, -1, 11, -1 };
  return &_OrgApacheLuceneUtilArrayTimSorter;
}

@end

void OrgApacheLuceneUtilArrayTimSorter_initPackagePrivateWithNSObjectArray_withJavaUtilComparator_withInt_(OrgApacheLuceneUtilArrayTimSorter *self, IOSObjectArray *arr, id<JavaUtilComparator> comparator, jint maxTempSlots) {
  OrgApacheLuceneUtilTimSorter_initWithInt_(self, maxTempSlots);
  JreStrongAssign(&self->arr_, arr);
  JreStrongAssign(&self->comparator_, comparator);
  if (maxTempSlots > 0) {
    IOSObjectArray *tmp = [IOSObjectArray arrayWithLength:maxTempSlots type:NSObject_class_()];
    JreStrongAssign(&self->tmp_, tmp);
  }
  else {
    JreStrongAssign(&self->tmp_, nil);
  }
}

OrgApacheLuceneUtilArrayTimSorter *new_OrgApacheLuceneUtilArrayTimSorter_initPackagePrivateWithNSObjectArray_withJavaUtilComparator_withInt_(IOSObjectArray *arr, id<JavaUtilComparator> comparator, jint maxTempSlots) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilArrayTimSorter, initPackagePrivateWithNSObjectArray_withJavaUtilComparator_withInt_, arr, comparator, maxTempSlots)
}

OrgApacheLuceneUtilArrayTimSorter *create_OrgApacheLuceneUtilArrayTimSorter_initPackagePrivateWithNSObjectArray_withJavaUtilComparator_withInt_(IOSObjectArray *arr, id<JavaUtilComparator> comparator, jint maxTempSlots) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilArrayTimSorter, initPackagePrivateWithNSObjectArray_withJavaUtilComparator_withInt_, arr, comparator, maxTempSlots)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilArrayTimSorter)
