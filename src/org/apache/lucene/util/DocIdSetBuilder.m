//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/DocIdSetBuilder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BitDocIdSet.h"
#include "org/apache/lucene/util/BitSet.h"
#include "org/apache/lucene/util/DocIdSetBuilder.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/IntArrayDocIdSet.h"
#include "org/apache/lucene/util/LSBRadixSorter.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/DocIdSetBuilder must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilDocIdSetBuilder () {
 @public
  jint maxDoc_;
  jint threshold_;
  IOSIntArray *buffer_;
  jint bufferSize_;
  OrgApacheLuceneUtilBitSet *bitSet_;
}

- (void)upgradeToBitSet;

/*!
 @brief Grows the buffer to at least minSize, but never larger than threshold.
 */
- (void)growBufferWithInt:(jint)minSize;

+ (jint)dedupWithIntArray:(IOSIntArray *)arr
                  withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilDocIdSetBuilder, buffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilDocIdSetBuilder, bitSet_, OrgApacheLuceneUtilBitSet *)

__attribute__((unused)) static void OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(OrgApacheLuceneUtilDocIdSetBuilder *self);

__attribute__((unused)) static void OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(OrgApacheLuceneUtilDocIdSetBuilder *self, jint minSize);

__attribute__((unused)) static jint OrgApacheLuceneUtilDocIdSetBuilder_dedupWithIntArray_withInt_(IOSIntArray *arr, jint length);

@implementation OrgApacheLuceneUtilDocIdSetBuilder

- (instancetype)initWithInt:(jint)maxDoc {
  OrgApacheLuceneUtilDocIdSetBuilder_initWithInt_(self, maxDoc);
  return self;
}

- (void)upgradeToBitSet {
  OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(self);
}

- (void)growBufferWithInt:(jint)minSize {
  OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(self, minSize);
}

- (void)addWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iter {
  [self growWithInt:(jint) JavaLangMath_minWithLong_withLong_(JavaLangInteger_MAX_VALUE, [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(iter)) cost])];
  if (bitSet_ != nil) {
    [bitSet_ or__WithOrgApacheLuceneSearchDocIdSetIterator:iter];
  }
  else {
    while (true) {
      JreAssert(((IOSIntArray *) nil_chk(buffer_))->size_ <= threshold_, @"org/apache/lucene/util/DocIdSetBuilder.java:90 condition failed: assert buffer.length <= threshold;");
      jint end = buffer_->size_;
      for (jint i = bufferSize_; i < end; ++i) {
        jint doc = [iter nextDoc];
        if (doc == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
          bufferSize_ = i;
          return;
        }
        *IOSIntArray_GetRef(nil_chk(buffer_), bufferSize_++) = doc;
      }
      bufferSize_ = end;
      if (bufferSize_ + 1 >= threshold_) {
        break;
      }
      OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(self, bufferSize_ + 1);
    }
    OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(self);
    for (jint doc = [iter nextDoc]; doc != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS; doc = [iter nextDoc]) {
      [((OrgApacheLuceneUtilBitSet *) nil_chk(bitSet_)) setWithInt:doc];
    }
  }
}

- (void)growWithInt:(jint)numDocs {
  if (bitSet_ == nil) {
    jlong newLength = bufferSize_ + numDocs;
    if (newLength < threshold_) {
      OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(self, (jint) newLength);
    }
    else {
      OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(self);
    }
  }
}

- (void)addWithInt:(jint)doc {
  if (bitSet_ != nil) {
    [bitSet_ setWithInt:doc];
  }
  else {
    if (bufferSize_ + 1 > ((IOSIntArray *) nil_chk(buffer_))->size_) {
      if (bufferSize_ + 1 >= threshold_) {
        OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(self);
        [((OrgApacheLuceneUtilBitSet *) nil_chk(bitSet_)) setWithInt:doc];
        return;
      }
      OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(self, bufferSize_ + 1);
    }
    *IOSIntArray_GetRef(nil_chk(buffer_), bufferSize_++) = doc;
  }
}

+ (jint)dedupWithIntArray:(IOSIntArray *)arr
                  withInt:(jint)length {
  return OrgApacheLuceneUtilDocIdSetBuilder_dedupWithIntArray_withInt_(arr, length);
}

- (OrgApacheLuceneSearchDocIdSet *)build {
  return [self buildWithLong:-1];
}

- (OrgApacheLuceneSearchDocIdSet *)buildWithLong:(jlong)costHint {
  @try {
    if (bitSet_ != nil) {
      if (costHint == -1) {
        return create_OrgApacheLuceneUtilBitDocIdSet_initWithOrgApacheLuceneUtilBitSet_(bitSet_);
      }
      else {
        return create_OrgApacheLuceneUtilBitDocIdSet_initWithOrgApacheLuceneUtilBitSet_withLong_(bitSet_, costHint);
      }
    }
    else {
      OrgApacheLuceneUtilLSBRadixSorter *sorter = create_OrgApacheLuceneUtilLSBRadixSorter_initPackagePrivate();
      [sorter sortWithIntArray:buffer_ withInt:0 withInt:bufferSize_];
      jint l = OrgApacheLuceneUtilDocIdSetBuilder_dedupWithIntArray_withInt_(buffer_, bufferSize_);
      JreAssert(l <= bufferSize_, @"org/apache/lucene/util/DocIdSetBuilder.java:192 condition failed: assert l <= bufferSize;");
      JreStrongAssign(&buffer_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(buffer_, l + 1));
      *IOSIntArray_GetRef(nil_chk(buffer_), l) = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
      return create_OrgApacheLuceneUtilIntArrayDocIdSet_initPackagePrivateWithIntArray_withInt_(buffer_, l);
    }
  }
  @finally {
    JreStrongAssign(&self->buffer_, nil);
    self->bufferSize_ = 0;
    JreStrongAssign(&self->bitSet_, nil);
  }
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(bitSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(upgradeToBitSet);
  methods[2].selector = @selector(growBufferWithInt:);
  methods[3].selector = @selector(addWithOrgApacheLuceneSearchDocIdSetIterator:);
  methods[4].selector = @selector(growWithInt:);
  methods[5].selector = @selector(addWithInt:);
  methods[6].selector = @selector(dedupWithIntArray:withInt:);
  methods[7].selector = @selector(build);
  methods[8].selector = @selector(buildWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxDoc_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "threshold_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buffer_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitSet_", "LOrgApacheLuceneUtilBitSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "growBuffer", "add", "LOrgApacheLuceneSearchDocIdSetIterator;", "LJavaIoIOException;", "grow", "dedup", "[II", "build", "J" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilDocIdSetBuilder = { "DocIdSetBuilder", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x11, 9, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilDocIdSetBuilder;
}

@end

void OrgApacheLuceneUtilDocIdSetBuilder_initWithInt_(OrgApacheLuceneUtilDocIdSetBuilder *self, jint maxDoc) {
  NSObject_init(self);
  self->maxDoc_ = maxDoc;
  self->threshold_ = JreURShift32(maxDoc, 7);
  JreStrongAssignAndConsume(&self->buffer_, [IOSIntArray newArrayWithLength:0]);
  self->bufferSize_ = 0;
  JreStrongAssign(&self->bitSet_, nil);
}

OrgApacheLuceneUtilDocIdSetBuilder *new_OrgApacheLuceneUtilDocIdSetBuilder_initWithInt_(jint maxDoc) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilDocIdSetBuilder, initWithInt_, maxDoc)
}

OrgApacheLuceneUtilDocIdSetBuilder *create_OrgApacheLuceneUtilDocIdSetBuilder_initWithInt_(jint maxDoc) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilDocIdSetBuilder, initWithInt_, maxDoc)
}

void OrgApacheLuceneUtilDocIdSetBuilder_upgradeToBitSet(OrgApacheLuceneUtilDocIdSetBuilder *self) {
  JreAssert(self->bitSet_ == nil, @"org/apache/lucene/util/DocIdSetBuilder.java:58 condition failed: assert bitSet == null;");
  JreStrongAssignAndConsume(&self->bitSet_, new_OrgApacheLuceneUtilFixedBitSet_initWithInt_(self->maxDoc_));
  for (jint i = 0; i < self->bufferSize_; ++i) {
    [((OrgApacheLuceneUtilBitSet *) nil_chk(self->bitSet_)) setWithInt:IOSIntArray_Get(nil_chk(self->buffer_), i)];
  }
  JreStrongAssign(&self->buffer_, nil);
  self->bufferSize_ = 0;
}

void OrgApacheLuceneUtilDocIdSetBuilder_growBufferWithInt_(OrgApacheLuceneUtilDocIdSetBuilder *self, jint minSize) {
  JreAssert(minSize < self->threshold_, @"org/apache/lucene/util/DocIdSetBuilder.java:69 condition failed: assert minSize < threshold;");
  if (((IOSIntArray *) nil_chk(self->buffer_))->size_ < minSize) {
    jint nextSize = JavaLangMath_minWithInt_withInt_(self->threshold_, OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(minSize, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT));
    IOSIntArray *newBuffer = [IOSIntArray arrayWithLength:nextSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, 0, newBuffer, 0, ((IOSIntArray *) nil_chk(self->buffer_))->size_);
    JreStrongAssign(&self->buffer_, newBuffer);
  }
}

jint OrgApacheLuceneUtilDocIdSetBuilder_dedupWithIntArray_withInt_(IOSIntArray *arr, jint length) {
  OrgApacheLuceneUtilDocIdSetBuilder_initialize();
  if (length == 0) {
    return 0;
  }
  jint l = 1;
  jint previous = IOSIntArray_Get(nil_chk(arr), 0);
  for (jint i = 1; i < length; ++i) {
    jint value = IOSIntArray_Get(arr, i);
    JreAssert(value >= previous, @"org/apache/lucene/util/DocIdSetBuilder.java:160 condition failed: assert value >= previous;");
    if (value != previous) {
      *IOSIntArray_GetRef(arr, l++) = value;
      previous = value;
    }
  }
  return l;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilDocIdSetBuilder)
