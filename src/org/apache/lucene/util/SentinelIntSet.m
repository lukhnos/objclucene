//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/SentinelIntSet.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/SentinelIntSet.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/SentinelIntSet must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneUtilSentinelIntSet

- (instancetype)initWithInt:(jint)size
                    withInt:(jint)emptyVal {
  OrgApacheLuceneUtilSentinelIntSet_initWithInt_withInt_(self, size, emptyVal);
  return self;
}

- (void)clear {
  JavaUtilArrays_fillWithIntArray_withInt_(keys_, emptyVal_);
  count_ = 0;
}

- (jint)hash__WithInt:(jint)key {
  return key;
}

- (jint)size {
  return count_;
}

- (jint)getSlotWithInt:(jint)key {
  JreAssert(key != emptyVal_, @"org/apache/lucene/util/SentinelIntSet.java:84 condition failed: assert key != emptyVal;");
  jint h = [self hash__WithInt:key];
  jint s = h & (((IOSIntArray *) nil_chk(keys_))->size_ - 1);
  if (IOSIntArray_Get(keys_, s) == key || IOSIntArray_Get(keys_, s) == emptyVal_) return s;
  jint increment = (JreRShift32(h, 7)) | 1;
  do {
    s = (s + increment) & (keys_->size_ - 1);
  }
  while (IOSIntArray_Get(keys_, s) != key && IOSIntArray_Get(keys_, s) != emptyVal_);
  return s;
}

- (jint)findWithInt:(jint)key {
  JreAssert(key != emptyVal_, @"org/apache/lucene/util/SentinelIntSet.java:98 condition failed: assert key != emptyVal;");
  jint h = [self hash__WithInt:key];
  jint s = h & (((IOSIntArray *) nil_chk(keys_))->size_ - 1);
  if (IOSIntArray_Get(keys_, s) == key) return s;
  if (IOSIntArray_Get(keys_, s) == emptyVal_) return -s - 1;
  jint increment = (JreRShift32(h, 7)) | 1;
  for (; ; ) {
    s = (s + increment) & (keys_->size_ - 1);
    if (IOSIntArray_Get(keys_, s) == key) return s;
    if (IOSIntArray_Get(keys_, s) == emptyVal_) return -s - 1;
  }
}

- (jboolean)existsWithInt:(jint)key {
  return [self findWithInt:key] >= 0;
}

- (jint)putWithInt:(jint)key {
  jint s = [self findWithInt:key];
  if (s < 0) {
    count_++;
    if (count_ >= rehashCount_) {
      [self rehash];
      s = [self getSlotWithInt:key];
    }
    else {
      s = -s - 1;
    }
    *IOSIntArray_GetRef(nil_chk(keys_), s) = key;
  }
  return s;
}

- (void)rehash {
  jint newSize = JreLShift32(((IOSIntArray *) nil_chk(keys_))->size_, 1);
  IOSIntArray *oldKeys = keys_;
  JreStrongAssignAndConsume(&keys_, [IOSIntArray newArrayWithLength:newSize]);
  if (emptyVal_ != 0) JavaUtilArrays_fillWithIntArray_withInt_(keys_, emptyVal_);
  {
    IOSIntArray *a__ = oldKeys;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint key = *b__++;
      if (key == emptyVal_) continue;
      jint newSlot = [self getSlotWithInt:key];
      *IOSIntArray_GetRef(nil_chk(keys_), newSlot) = key;
    }
  }
  rehashCount_ = newSize - (JreRShift32(newSize, 2));
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneUtilRamUsageEstimator_alignObjectSizeWithLong_(OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT * 3 + JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF)) + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(keys_);
}

- (void)dealloc {
  RELEASE_(keys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(hash__WithInt:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(getSlotWithInt:);
  methods[5].selector = @selector(findWithInt:);
  methods[6].selector = @selector(existsWithInt:);
  methods[7].selector = @selector(putWithInt:);
  methods[8].selector = @selector(rehash);
  methods[9].selector = @selector(ramBytesUsed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "emptyVal_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "rehashCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "hash", "I", "getSlot", "find", "exists", "put" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilSentinelIntSet = { "SentinelIntSet", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x1, 10, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilSentinelIntSet;
}

@end

void OrgApacheLuceneUtilSentinelIntSet_initWithInt_withInt_(OrgApacheLuceneUtilSentinelIntSet *self, jint size, jint emptyVal) {
  NSObject_init(self);
  self->emptyVal_ = emptyVal;
  jint tsize = JavaLangMath_maxWithInt_withInt_(OrgApacheLuceneUtilBitUtil_nextHighestPowerOfTwoWithInt_(size), 1);
  self->rehashCount_ = tsize - (JreRShift32(tsize, 2));
  if (size >= self->rehashCount_) {
    JreLShiftAssignInt(&tsize, 1);
    self->rehashCount_ = tsize - (JreRShift32(tsize, 2));
  }
  JreStrongAssignAndConsume(&self->keys_, [IOSIntArray newArrayWithLength:tsize]);
  if (emptyVal != 0) [self clear];
}

OrgApacheLuceneUtilSentinelIntSet *new_OrgApacheLuceneUtilSentinelIntSet_initWithInt_withInt_(jint size, jint emptyVal) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilSentinelIntSet, initWithInt_withInt_, size, emptyVal)
}

OrgApacheLuceneUtilSentinelIntSet *create_OrgApacheLuceneUtilSentinelIntSet_initWithInt_withInt_(jint size, jint emptyVal) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilSentinelIntSet, initWithInt_withInt_, size, emptyVal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilSentinelIntSet)
