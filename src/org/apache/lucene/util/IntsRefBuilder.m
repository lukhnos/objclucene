//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/IntsRefBuilder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/UnicodeUtil.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/IntsRefBuilder must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilIntsRefBuilder () {
 @public
  OrgApacheLuceneUtilIntsRef *ref_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilIntsRefBuilder, ref_, OrgApacheLuceneUtilIntsRef *)

@implementation OrgApacheLuceneUtilIntsRefBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilIntsRefBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSIntArray *)ints {
  return ((OrgApacheLuceneUtilIntsRef *) nil_chk(ref_))->ints_;
}

- (jint)length {
  return ((OrgApacheLuceneUtilIntsRef *) nil_chk(ref_))->length_;
}

- (void)setLengthWithInt:(jint)length {
  ((OrgApacheLuceneUtilIntsRef *) nil_chk(self->ref_))->length_ = length;
}

- (void)clear {
  [self setLengthWithInt:0];
}

- (jint)intAtWithInt:(jint)offset {
  return IOSIntArray_Get(nil_chk(((OrgApacheLuceneUtilIntsRef *) nil_chk(ref_))->ints_), offset);
}

- (void)setIntAtWithInt:(jint)offset
                withInt:(jint)b {
  *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneUtilIntsRef *) nil_chk(ref_))->ints_), offset) = b;
}

- (void)appendWithInt:(jint)i {
  [self growWithInt:((OrgApacheLuceneUtilIntsRef *) nil_chk(ref_))->length_ + 1];
  *IOSIntArray_GetRef(nil_chk(ref_->ints_), ref_->length_++) = i;
}

- (void)growWithInt:(jint)newLength {
  JreStrongAssign(&((OrgApacheLuceneUtilIntsRef *) nil_chk(ref_))->ints_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(ref_->ints_, newLength));
}

- (void)copyIntsWithIntArray:(IOSIntArray *)otherInts
                     withInt:(jint)otherOffset
                     withInt:(jint)otherLength {
  [self growWithInt:otherLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(otherInts, otherOffset, ((OrgApacheLuceneUtilIntsRef *) nil_chk(ref_))->ints_, 0, otherLength);
  ref_->length_ = otherLength;
}

- (void)copyIntsWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)ints {
  [self copyIntsWithIntArray:((OrgApacheLuceneUtilIntsRef *) nil_chk(ints))->ints_ withInt:ints->offset_ withInt:ints->length_];
}

- (void)copyUTF8BytesWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  [self growWithInt:((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->length_];
  ((OrgApacheLuceneUtilIntsRef *) nil_chk(ref_))->length_ = OrgApacheLuceneUtilUnicodeUtil_UTF8toUTF32WithOrgApacheLuceneUtilBytesRef_withIntArray_(bytes, ref_->ints_);
}

- (OrgApacheLuceneUtilIntsRef *)get {
  JreAssert(((OrgApacheLuceneUtilIntsRef *) nil_chk(ref_))->offset_ == 0, @"Modifying the offset of the returned ref is illegal");
  return ref_;
}

- (OrgApacheLuceneUtilIntsRef *)toIntsRef {
  return OrgApacheLuceneUtilIntsRef_deepCopyOfWithOrgApacheLuceneUtilIntsRef_([self get]);
}

- (jboolean)isEqual:(id)obj {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (NSUInteger)hash {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(ref_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ints);
  methods[2].selector = @selector(length);
  methods[3].selector = @selector(setLengthWithInt:);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(intAtWithInt:);
  methods[6].selector = @selector(setIntAtWithInt:withInt:);
  methods[7].selector = @selector(appendWithInt:);
  methods[8].selector = @selector(growWithInt:);
  methods[9].selector = @selector(copyIntsWithIntArray:withInt:withInt:);
  methods[10].selector = @selector(copyIntsWithOrgApacheLuceneUtilIntsRef:);
  methods[11].selector = @selector(copyUTF8BytesWithOrgApacheLuceneUtilBytesRef:);
  methods[12].selector = @selector(get);
  methods[13].selector = @selector(toIntsRef);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ref_", "LOrgApacheLuceneUtilIntsRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setLength", "I", "intAt", "setIntAt", "II", "append", "grow", "copyInts", "[III", "LOrgApacheLuceneUtilIntsRef;", "copyUTF8Bytes", "LOrgApacheLuceneUtilBytesRef;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilIntsRefBuilder = { "IntsRefBuilder", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x1, 16, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilIntsRefBuilder;
}

@end

void OrgApacheLuceneUtilIntsRefBuilder_init(OrgApacheLuceneUtilIntsRefBuilder *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->ref_, new_OrgApacheLuceneUtilIntsRef_init());
}

OrgApacheLuceneUtilIntsRefBuilder *new_OrgApacheLuceneUtilIntsRefBuilder_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilIntsRefBuilder, init)
}

OrgApacheLuceneUtilIntsRefBuilder *create_OrgApacheLuceneUtilIntsRefBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilIntsRefBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilIntsRefBuilder)
