//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/RefCount.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/apache/lucene/util/RefCount.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/RefCount must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilRefCount () {
 @public
  JavaUtilConcurrentAtomicAtomicInteger *refCount_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilRefCount, refCount_, JavaUtilConcurrentAtomicAtomicInteger *)

@implementation OrgApacheLuceneUtilRefCount

- (instancetype)initWithId:(id)object {
  OrgApacheLuceneUtilRefCount_initWithId_(self, object);
  return self;
}

- (void)release__ {
}

- (void)decRef {
  jint rc = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) decrementAndGet];
  if (rc == 0) {
    jboolean success = false;
    @try {
      [self release__];
      success = true;
    }
    @finally {
      if (!success) {
        [refCount_ incrementAndGet];
      }
    }
  }
  else if (rc < 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"too many decRef calls: refCount is ", rc, @" after decrement"));
  }
}

- (id)get {
  return object_;
}

- (jint)getRefCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) get];
}

- (void)incRef {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) incrementAndGet];
}

- (void)dealloc {
  RELEASE_(refCount_);
  RELEASE_(object_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 3, -1, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, -1, 4, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:);
  methods[1].selector = @selector(release__);
  methods[2].selector = @selector(decRef);
  methods[3].selector = @selector(get);
  methods[4].selector = @selector(getRefCount);
  methods[5].selector = @selector(incRef);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "refCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "object_", "LNSObject;", .constantValue.asLong = 0, 0x14, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "(TT;)V", "release", "LJavaIoIOException;", "()TT;", "TT;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilRefCount = { "RefCount", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, -1, -1, 6, -1 };
  return &_OrgApacheLuceneUtilRefCount;
}

@end

void OrgApacheLuceneUtilRefCount_initWithId_(OrgApacheLuceneUtilRefCount *self, id object) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->refCount_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
  JreStrongAssign(&self->object_, object);
}

OrgApacheLuceneUtilRefCount *new_OrgApacheLuceneUtilRefCount_initWithId_(id object) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilRefCount, initWithId_, object)
}

OrgApacheLuceneUtilRefCount *create_OrgApacheLuceneUtilRefCount_initWithId_(id object) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilRefCount, initWithId_, object)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilRefCount)
