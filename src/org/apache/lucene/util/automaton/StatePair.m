//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/StatePair.java
//

#include "J2ObjC_source.h"
#include "org/apache/lucene/util/automaton/StatePair.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/automaton/StatePair must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneUtilAutomatonStatePair

- (instancetype)initWithInt:(jint)s
                    withInt:(jint)s1
                    withInt:(jint)s2 {
  OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_withInt_(self, s, s1, s2);
  return self;
}

- (instancetype)initWithInt:(jint)s1
                    withInt:(jint)s2 {
  OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_(self, s1, s2);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgApacheLuceneUtilAutomatonStatePair class]]) {
    OrgApacheLuceneUtilAutomatonStatePair *p = (OrgApacheLuceneUtilAutomatonStatePair *) obj;
    return ((OrgApacheLuceneUtilAutomatonStatePair *) nil_chk(p))->s1_ == s1_ && p->s2_ == s2_;
  }
  else return false;
}

- (NSUInteger)hash {
  return s1_ ^ s2_;
}

- (NSString *)description {
  return JreStrcat("$I$IC", @"StatePair(s1=", s1_, @" s2=", s2_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "s_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s1_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "s2_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "II", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonStatePair = { "StatePair", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAutomatonStatePair;
}

@end

void OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_withInt_(OrgApacheLuceneUtilAutomatonStatePair *self, jint s, jint s1, jint s2) {
  NSObject_init(self);
  self->s_ = s;
  self->s1_ = s1;
  self->s2_ = s2;
}

OrgApacheLuceneUtilAutomatonStatePair *new_OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_withInt_(jint s, jint s1, jint s2) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonStatePair, initWithInt_withInt_withInt_, s, s1, s2)
}

OrgApacheLuceneUtilAutomatonStatePair *create_OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_withInt_(jint s, jint s1, jint s2) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonStatePair, initWithInt_withInt_withInt_, s, s1, s2)
}

void OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_(OrgApacheLuceneUtilAutomatonStatePair *self, jint s1, jint s2) {
  NSObject_init(self);
  self->s1_ = s1;
  self->s2_ = s2;
  self->s_ = -1;
}

OrgApacheLuceneUtilAutomatonStatePair *new_OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_(jint s1, jint s2) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonStatePair, initWithInt_withInt_, s1, s2)
}

OrgApacheLuceneUtilAutomatonStatePair *create_OrgApacheLuceneUtilAutomatonStatePair_initWithInt_withInt_(jint s1, jint s2) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonStatePair, initWithInt_withInt_, s1, s2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonStatePair)
