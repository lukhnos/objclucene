//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/TooComplexToDeterminizeException.java
//

#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/RegExp.h"
#include "org/apache/lucene/util/automaton/TooComplexToDeterminizeException.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/automaton/TooComplexToDeterminizeException must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException () {
 @public
  OrgApacheLuceneUtilAutomatonAutomaton *automaton_;
  OrgApacheLuceneUtilAutomatonRegExp *regExp_;
  jint maxDeterminizedStates_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException, automaton_, OrgApacheLuceneUtilAutomatonAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException, regExp_, OrgApacheLuceneUtilAutomatonRegExp *)

@implementation OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException

- (instancetype)initWithOrgApacheLuceneUtilAutomatonRegExp:(OrgApacheLuceneUtilAutomatonRegExp *)regExp
withOrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException:(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *)cause {
  OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_initWithOrgApacheLuceneUtilAutomatonRegExp_withOrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_(self, regExp, cause);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                                      withInt:(jint)maxDeterminizedStates {
  OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(self, automaton, maxDeterminizedStates);
  return self;
}

- (OrgApacheLuceneUtilAutomatonAutomaton *)getAutomaton {
  return automaton_;
}

- (OrgApacheLuceneUtilAutomatonRegExp *)getRegExp {
  return regExp_;
}

- (jint)getMaxDeterminizedStates {
  return maxDeterminizedStates_;
}

- (void)dealloc {
  RELEASE_(automaton_);
  RELEASE_(regExp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilAutomatonAutomaton;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilAutomatonRegExp;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilAutomatonRegExp:withOrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException:);
  methods[1].selector = @selector(initWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:);
  methods[2].selector = @selector(getAutomaton);
  methods[3].selector = @selector(getRegExp);
  methods[4].selector = @selector(getMaxDeterminizedStates);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "automaton_", "LOrgApacheLuceneUtilAutomatonAutomaton;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "regExp_", "LOrgApacheLuceneUtilAutomatonRegExp;", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
    { "maxDeterminizedStates_", "I", .constantValue.asLong = 0, 0x92, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilAutomatonRegExp;LOrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException;", "LOrgApacheLuceneUtilAutomatonAutomaton;I" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException = { "TooComplexToDeterminizeException", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException;
}

@end

void OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_initWithOrgApacheLuceneUtilAutomatonRegExp_withOrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *self, OrgApacheLuceneUtilAutomatonRegExp *regExp, OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *cause) {
  JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(self, JreStrcat("$$$I$", @"Determinizing ", [((OrgApacheLuceneUtilAutomatonRegExp *) nil_chk(regExp)) getOriginalString], @" would result in more than ", ((OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *) nil_chk(cause))->maxDeterminizedStates_, @" states."), cause);
  JreStrongAssign(&self->regExp_, regExp);
  JreStrongAssign(&self->automaton_, cause->automaton_);
  self->maxDeterminizedStates_ = cause->maxDeterminizedStates_;
}

OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *new_OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_initWithOrgApacheLuceneUtilAutomatonRegExp_withOrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_(OrgApacheLuceneUtilAutomatonRegExp *regExp, OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *cause) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException, initWithOrgApacheLuceneUtilAutomatonRegExp_withOrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_, regExp, cause)
}

OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *create_OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_initWithOrgApacheLuceneUtilAutomatonRegExp_withOrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_(OrgApacheLuceneUtilAutomatonRegExp *regExp, OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *cause) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException, initWithOrgApacheLuceneUtilAutomatonRegExp_withOrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_, regExp, cause)
}

void OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *self, OrgApacheLuceneUtilAutomatonAutomaton *automaton, jint maxDeterminizedStates) {
  JavaLangRuntimeException_initWithNSString_(self, JreStrcat("$I$I$I$", @"Determinizing automaton with ", [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(automaton)) getNumStates], @" states and ", [automaton getNumTransitions], @" transitions would result in more than ", maxDeterminizedStates, @" states."));
  JreStrongAssign(&self->automaton_, automaton);
  JreStrongAssign(&self->regExp_, nil);
  self->maxDeterminizedStates_ = maxDeterminizedStates;
}

OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *new_OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, jint maxDeterminizedStates) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException, initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_, automaton, maxDeterminizedStates)
}

OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException *create_OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, jint maxDeterminizedStates) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException, initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_, automaton, maxDeterminizedStates)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonTooComplexToDeterminizeException)
