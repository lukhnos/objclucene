//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/RunAutomaton.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/Operations.h"
#include "org/apache/lucene/util/automaton/RunAutomaton.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/automaton/RunAutomaton must not be compiled with ARC (-fobjc-arc)"
#endif

__attribute__((unused)) static jint OrgApacheLuceneUtilAutomatonRunAutomaton_getCharClassWithInt_(OrgApacheLuceneUtilAutomatonRunAutomaton *self, jint c);

@implementation OrgApacheLuceneUtilAutomatonRunAutomaton

- (NSString *)description {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"initial state: "])) appendWithInt:initial_])) appendWithNSString:@"\n"];
  for (jint i = 0; i < size_; i++) {
    [b appendWithNSString:JreStrcat("$I", @"state ", i)];
    if (IOSBooleanArray_Get(nil_chk(accept_), i)) [b appendWithNSString:@" [accept]:\n"];
    else [b appendWithNSString:@" [reject]:\n"];
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(points_))->size_; j++) {
      jint k = IOSIntArray_Get(nil_chk(transitions_), i * points_->size_ + j);
      if (k != -1) {
        jint min = IOSIntArray_Get(points_, j);
        jint max;
        if (j + 1 < points_->size_) max = (IOSIntArray_Get(points_, j + 1) - 1);
        else max = maxInterval_;
        [b appendWithNSString:@" "];
        OrgApacheLuceneUtilAutomatonAutomaton_appendCharStringWithInt_withJavaLangStringBuilder_(min, b);
        if (min != max) {
          [b appendWithNSString:@"-"];
          OrgApacheLuceneUtilAutomatonAutomaton_appendCharStringWithInt_withJavaLangStringBuilder_(max, b);
        }
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@" -> "])) appendWithInt:k])) appendWithNSString:@"\n"];
      }
    }
  }
  return [b description];
}

- (jint)getSize {
  return size_;
}

- (jboolean)isAcceptWithInt:(jint)state {
  return IOSBooleanArray_Get(nil_chk(accept_), state);
}

- (jint)getInitialState {
  return initial_;
}

- (IOSIntArray *)getCharIntervals {
  return [((IOSIntArray *) nil_chk(points_)) java_clone];
}

- (jint)getCharClassWithInt:(jint)c {
  return OrgApacheLuceneUtilAutomatonRunAutomaton_getCharClassWithInt_(self, c);
}

- (instancetype)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                      withInt:(jint)maxInterval
                                                  withBoolean:(jboolean)tableize {
  OrgApacheLuceneUtilAutomatonRunAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_(self, a, maxInterval, tableize);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)a
                                                      withInt:(jint)maxInterval
                                                  withBoolean:(jboolean)tableize
                                                      withInt:(jint)maxDeterminizedStates {
  OrgApacheLuceneUtilAutomatonRunAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_withInt_(self, a, maxInterval, tableize, maxDeterminizedStates);
  return self;
}

- (jint)stepWithInt:(jint)state
            withInt:(jint)c {
  if (classmap_ == nil) {
    return IOSIntArray_Get(nil_chk(transitions_), state * ((IOSIntArray *) nil_chk(points_))->size_ + OrgApacheLuceneUtilAutomatonRunAutomaton_getCharClassWithInt_(self, c));
  }
  else {
    return IOSIntArray_Get(nil_chk(transitions_), state * ((IOSIntArray *) nil_chk(points_))->size_ + IOSIntArray_Get(classmap_, c));
  }
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + initial_;
  result = prime * result + maxInterval_;
  result = prime * result + ((IOSIntArray *) nil_chk(points_))->size_;
  result = prime * result + size_;
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (obj == nil) return false;
  if (!JreObjectEqualsEquals([self java_getClass], [obj java_getClass])) return false;
  OrgApacheLuceneUtilAutomatonRunAutomaton *other = (OrgApacheLuceneUtilAutomatonRunAutomaton *) cast_chk(obj, [OrgApacheLuceneUtilAutomatonRunAutomaton class]);
  if (initial_ != other->initial_) return false;
  if (maxInterval_ != other->maxInterval_) return false;
  if (size_ != other->size_) return false;
  if (!JavaUtilArrays_equalsWithIntArray_withIntArray_(points_, other->points_)) return false;
  if (!JavaUtilArrays_equalsWithBooleanArray_withBooleanArray_(accept_, other->accept_)) return false;
  if (!JavaUtilArrays_equalsWithIntArray_withIntArray_(transitions_, other->transitions_)) return false;
  return true;
}

- (void)dealloc {
  RELEASE_(automaton_);
  RELEASE_(accept_);
  RELEASE_(transitions_);
  RELEASE_(points_);
  RELEASE_(classmap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x10, 3, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(description);
  methods[1].selector = @selector(getSize);
  methods[2].selector = @selector(isAcceptWithInt:);
  methods[3].selector = @selector(getInitialState);
  methods[4].selector = @selector(getCharIntervals);
  methods[5].selector = @selector(getCharClassWithInt:);
  methods[6].selector = @selector(initWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:withBoolean:);
  methods[7].selector = @selector(initWithOrgApacheLuceneUtilAutomatonAutomaton:withInt:withBoolean:withInt:);
  methods[8].selector = @selector(stepWithInt:withInt:);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "automaton_", "LOrgApacheLuceneUtilAutomatonAutomaton;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxInterval_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "accept_", "[Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "initial_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "transitions_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "points_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "classmap_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "isAccept", "I", "getCharClass", "LOrgApacheLuceneUtilAutomatonAutomaton;IZ", "LOrgApacheLuceneUtilAutomatonAutomaton;IZI", "step", "II", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonRunAutomaton = { "RunAutomaton", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x401, 11, 8, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAutomatonRunAutomaton;
}

@end

jint OrgApacheLuceneUtilAutomatonRunAutomaton_getCharClassWithInt_(OrgApacheLuceneUtilAutomatonRunAutomaton *self, jint c) {
  return OrgApacheLuceneUtilAutomatonOperations_findIndexWithInt_withIntArray_(c, self->points_);
}

void OrgApacheLuceneUtilAutomatonRunAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonRunAutomaton *self, OrgApacheLuceneUtilAutomatonAutomaton *a, jint maxInterval, jboolean tableize) {
  OrgApacheLuceneUtilAutomatonRunAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_withInt_(self, a, maxInterval, tableize, OrgApacheLuceneUtilAutomatonOperations_DEFAULT_MAX_DETERMINIZED_STATES);
}

void OrgApacheLuceneUtilAutomatonRunAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_withInt_(OrgApacheLuceneUtilAutomatonRunAutomaton *self, OrgApacheLuceneUtilAutomatonAutomaton *a, jint maxInterval, jboolean tableize, jint maxDeterminizedStates) {
  NSObject_init(self);
  self->maxInterval_ = maxInterval;
  a = OrgApacheLuceneUtilAutomatonOperations_determinizeWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(a, maxDeterminizedStates);
  JreStrongAssign(&self->automaton_, a);
  JreStrongAssign(&self->points_, [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(a)) getStartPoints]);
  self->initial_ = 0;
  self->size_ = JavaLangMath_maxWithInt_withInt_(1, [a getNumStates]);
  JreStrongAssignAndConsume(&self->accept_, [IOSBooleanArray newArrayWithLength:self->size_]);
  JreStrongAssignAndConsume(&self->transitions_, [IOSIntArray newArrayWithLength:self->size_ * ((IOSIntArray *) nil_chk(self->points_))->size_]);
  JavaUtilArrays_fillWithIntArray_withInt_(self->transitions_, -1);
  for (jint n = 0; n < self->size_; n++) {
    *IOSBooleanArray_GetRef(self->accept_, n) = [a isAcceptWithInt:n];
    for (jint c = 0; c < self->points_->size_; c++) {
      jint dest = [a stepWithInt:n withInt:IOSIntArray_Get(self->points_, c)];
      JreAssert(dest == -1 || dest < self->size_, @"org/apache/lucene/util/automaton/RunAutomaton.java:150 condition failed: assert dest == -1 || dest < size;");
      *IOSIntArray_GetRef(self->transitions_, n * self->points_->size_ + c) = dest;
    }
  }
  if (tableize) {
    JreStrongAssignAndConsume(&self->classmap_, [IOSIntArray newArrayWithLength:maxInterval + 1]);
    jint i = 0;
    for (jint j = 0; j <= maxInterval; j++) {
      if (i + 1 < self->points_->size_ && j == IOSIntArray_Get(self->points_, i + 1)) {
        i++;
      }
      *IOSIntArray_GetRef(self->classmap_, j) = i;
    }
  }
  else {
    JreStrongAssign(&self->classmap_, nil);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonRunAutomaton)
