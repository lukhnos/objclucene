//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/Automaton.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/BitSet.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/InPlaceMergeSorter.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/Sorter.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/Transition.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/automaton/Automaton must not be compiled with ARC (-fobjc-arc)"
#if !__has_feature(objc_arc_weak)
#error "org/apache/lucene/util/automaton/Automaton must be compiled with weak references support (-fobjc-weak)"
#endif
#endif

@interface OrgApacheLuceneUtilAutomatonAutomaton () {
 @public
  /*!
   @brief Where we next write to the int[] states; this increments by 2 for
   each added state because we pack a pointer to the transitions
   array and a count of how many transitions leave the state.
   */
  jint nextState_;
  /*!
   @brief Where we next write to in int[] transitions; this
   increments by 3 for each added transition because we
   pack min, max, dest in sequence.
   */
  jint nextTransition_;
  /*!
   @brief Current state we are adding transitions to; the caller
   must add all transitions for this state before moving
   onto another state.
   */
  jint curState_;
  /*!
   @brief Index in the transitions array, where this states
   leaving transitions are stored, or -1 if this state
   has not added any transitions yet, followed by number
   of transitions.
   */
  IOSIntArray *states_;
  JavaUtilBitSet *isAccept_;
  /*!
   @brief Holds toState, min, max for each transition.
   */
  IOSIntArray *transitions_;
  /*!
   @brief True if no state has two transitions leaving with the same label.
   */
  jboolean deterministic_;
  OrgApacheLuceneUtilSorter *destMinMaxSorter_;
  OrgApacheLuceneUtilSorter *minMaxDestSorter_;
}

/*!
 @brief Freezes the last state, sorting and reducing the transitions.
 */
- (void)finishCurrentState;

- (void)growStates;

- (void)growTransitions;

- (jboolean)transitionSortedWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonAutomaton, states_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonAutomaton, isAccept_, JavaUtilBitSet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonAutomaton, transitions_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonAutomaton, destMinMaxSorter_, OrgApacheLuceneUtilSorter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonAutomaton, minMaxDestSorter_, OrgApacheLuceneUtilSorter *)

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonAutomaton_finishCurrentState(OrgApacheLuceneUtilAutomatonAutomaton *self);

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonAutomaton_growStates(OrgApacheLuceneUtilAutomatonAutomaton *self);

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonAutomaton_growTransitions(OrgApacheLuceneUtilAutomatonAutomaton *self);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilAutomatonAutomaton_transitionSortedWithOrgApacheLuceneUtilAutomatonTransition_(OrgApacheLuceneUtilAutomatonAutomaton *self, OrgApacheLuceneUtilAutomatonTransition *t);

@interface OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter () {
 @public
  WEAK_ OrgApacheLuceneUtilAutomatonAutomaton *this$0_;
}

- (void)swapOneWithInt:(jint)i
               withInt:(jint)j;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_swapOneWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter *self, jint i, jint j);

@interface OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter () {
 @public
  WEAK_ OrgApacheLuceneUtilAutomatonAutomaton *this$0_;
}

- (void)swapOneWithInt:(jint)i
               withInt:(jint)j;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_swapOneWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter *self, jint i, jint j);

@interface OrgApacheLuceneUtilAutomatonAutomaton_Builder () {
 @public
  jint nextState_;
  JavaUtilBitSet *isAccept_;
  IOSIntArray *transitions_;
  jint nextTransition_;
  OrgApacheLuceneUtilSorter *sorter_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonAutomaton_Builder, isAccept_, JavaUtilBitSet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonAutomaton_Builder, transitions_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonAutomaton_Builder, sorter_, OrgApacheLuceneUtilSorter *)

@interface OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter () {
 @public
  WEAK_ OrgApacheLuceneUtilAutomatonAutomaton_Builder *this$0_;
}

- (void)swapOneWithInt:(jint)i
               withInt:(jint)j;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_swapOneWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter *self, jint i, jint j);

@implementation OrgApacheLuceneUtilAutomatonAutomaton

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilAutomatonAutomaton_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)numStates
                    withInt:(jint)numTransitions {
  OrgApacheLuceneUtilAutomatonAutomaton_initWithInt_withInt_(self, numStates, numTransitions);
  return self;
}

- (jint)createState {
  OrgApacheLuceneUtilAutomatonAutomaton_growStates(self);
  jint state = JreIntDiv(nextState_, 2);
  *IOSIntArray_GetRef(nil_chk(states_), nextState_) = -1;
  nextState_ += 2;
  return state;
}

- (void)setAcceptWithInt:(jint)state
             withBoolean:(jboolean)accept {
  if (state >= [self getNumStates]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"state=", state, @" is out of bounds (numStates=", [self getNumStates], ')'));
  }
  if (accept) {
    [((JavaUtilBitSet *) nil_chk(isAccept_)) setWithInt:state];
  }
  else {
    [((JavaUtilBitSet *) nil_chk(isAccept_)) clearWithInt:state];
  }
}

- (IOSObjectArray *)getSortedTransitions {
  jint numStates = [self getNumStates];
  IOSObjectArray *transitions = [IOSObjectArray arrayWithLength:numStates type:IOSClass_arrayType(OrgApacheLuceneUtilAutomatonTransition_class_(), 1)];
  for (jint s = 0; s < numStates; s++) {
    jint numTransitions = [self getNumTransitionsWithInt:s];
    IOSObjectArray_SetAndConsume(transitions, s, [IOSObjectArray newArrayWithLength:numTransitions type:OrgApacheLuceneUtilAutomatonTransition_class_()]);
    for (jint t = 0; t < numTransitions; t++) {
      OrgApacheLuceneUtilAutomatonTransition *transition = create_OrgApacheLuceneUtilAutomatonTransition_init();
      [self getTransitionWithInt:s withInt:t withOrgApacheLuceneUtilAutomatonTransition:transition];
      IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(transitions, s)), t, transition);
    }
  }
  return transitions;
}

- (JavaUtilBitSet *)getAcceptStates {
  return isAccept_;
}

- (jboolean)isAcceptWithInt:(jint)state {
  return [((JavaUtilBitSet *) nil_chk(isAccept_)) getWithInt:state];
}

- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                     withInt:(jint)label {
  [self addTransitionWithInt:source withInt:dest withInt:label withInt:label];
}

- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                     withInt:(jint)min
                     withInt:(jint)max {
  JreAssert(JreIntMod(nextTransition_, 3) == 0, @"org/apache/lucene/util/automaton/Automaton.java:167 condition failed: assert nextTransition%3 == 0;");
  if (source >= JreIntDiv(nextState_, 2)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"source=", source, @" is out of bounds (maxState is ", (JreIntDiv(nextState_, 2) - 1), ')'));
  }
  if (dest >= JreIntDiv(nextState_, 2)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"dest=", dest, @" is out of bounds (max state is ", (JreIntDiv(nextState_, 2) - 1), ')'));
  }
  OrgApacheLuceneUtilAutomatonAutomaton_growTransitions(self);
  if (curState_ != source) {
    if (curState_ != -1) {
      OrgApacheLuceneUtilAutomatonAutomaton_finishCurrentState(self);
    }
    curState_ = source;
    if (IOSIntArray_Get(nil_chk(states_), 2 * curState_) != -1) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"from state (", source, @") already had transitions added"));
    }
    JreAssert(IOSIntArray_Get(states_, 2 * curState_ + 1) == 0, @"org/apache/lucene/util/automaton/Automaton.java:187 condition failed: assert states[2*curState+1] == 0;");
    *IOSIntArray_GetRef(states_, 2 * curState_) = nextTransition_;
  }
  *IOSIntArray_GetRef(nil_chk(transitions_), nextTransition_++) = dest;
  *IOSIntArray_GetRef(transitions_, nextTransition_++) = min;
  *IOSIntArray_GetRef(transitions_, nextTransition_++) = max;
  (*IOSIntArray_GetRef(nil_chk(states_), 2 * curState_ + 1))++;
}

- (void)addEpsilonWithInt:(jint)source
                  withInt:(jint)dest {
  OrgApacheLuceneUtilAutomatonTransition *t = create_OrgApacheLuceneUtilAutomatonTransition_init();
  jint count = [self initTransitionWithInt:dest withOrgApacheLuceneUtilAutomatonTransition:t];
  for (jint i = 0; i < count; i++) {
    [self getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
    [self addTransitionWithInt:source withInt:t->dest_ withInt:t->min_ withInt:t->max_];
  }
  if ([self isAcceptWithInt:dest]) {
    [self setAcceptWithInt:source withBoolean:true];
  }
}

- (void)copy__WithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)other {
  jint stateOffset = [self getNumStates];
  JreStrongAssign(&states_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(states_, nextState_ + ((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(other))->nextState_));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(other->states_, 0, states_, nextState_, other->nextState_);
  for (jint i = 0; i < other->nextState_; i += 2) {
    if (IOSIntArray_Get(nil_chk(states_), nextState_ + i) != -1) {
      *IOSIntArray_GetRef(states_, nextState_ + i) += nextTransition_;
    }
  }
  nextState_ += other->nextState_;
  jint otherNumStates = [other getNumStates];
  JavaUtilBitSet *otherAcceptStates = JreRetainedLocalValue([other getAcceptStates]);
  jint state = 0;
  while (state < otherNumStates && (state = [((JavaUtilBitSet *) nil_chk(otherAcceptStates)) nextSetBitWithInt:state]) != -1) {
    [self setAcceptWithInt:stateOffset + state withBoolean:true];
    state++;
  }
  JreStrongAssign(&transitions_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(transitions_, nextTransition_ + other->nextTransition_));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(other->transitions_, 0, transitions_, nextTransition_, other->nextTransition_);
  for (jint i = 0; i < other->nextTransition_; i += 3) {
    *IOSIntArray_GetRef(nil_chk(transitions_), nextTransition_ + i) += stateOffset;
  }
  nextTransition_ += other->nextTransition_;
  if (other->deterministic_ == false) {
    deterministic_ = false;
  }
}

- (void)finishCurrentState {
  OrgApacheLuceneUtilAutomatonAutomaton_finishCurrentState(self);
}

- (jboolean)isDeterministic {
  return deterministic_;
}

- (void)finishState {
  if (curState_ != -1) {
    OrgApacheLuceneUtilAutomatonAutomaton_finishCurrentState(self);
    curState_ = -1;
  }
}

- (jint)getNumStates {
  return JreIntDiv(nextState_, 2);
}

- (jint)getNumTransitions {
  return JreIntDiv(nextTransition_, 3);
}

- (jint)getNumTransitionsWithInt:(jint)state {
  JreAssert(state >= 0, @"org/apache/lucene/util/automaton/Automaton.java:355 condition failed: assert state >= 0;");
  jint count = IOSIntArray_Get(nil_chk(states_), 2 * state + 1);
  if (count == -1) {
    return 0;
  }
  else {
    return count;
  }
}

- (void)growStates {
  OrgApacheLuceneUtilAutomatonAutomaton_growStates(self);
}

- (void)growTransitions {
  OrgApacheLuceneUtilAutomatonAutomaton_growTransitions(self);
}

- (jint)initTransitionWithInt:(jint)state
withOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t {
  JreAssert(state < JreIntDiv(nextState_, 2), JreStrcat("$I$I", @"state=", state, @" nextState=", nextState_));
  ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(t))->source_ = state;
  t->transitionUpto_ = IOSIntArray_Get(nil_chk(states_), 2 * state);
  return [self getNumTransitionsWithInt:state];
}

- (void)getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t {
  JreAssert((((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(t))->transitionUpto_ + 3 - IOSIntArray_Get(nil_chk(states_), 2 * t->source_)) <= 3 * IOSIntArray_Get(states_, 2 * t->source_ + 1), @"org/apache/lucene/util/automaton/Automaton.java:502 condition failed: assert (t.transitionUpto+3 - states[2*t.source]) <= 3*states[2*t.source+1];");
  JreAssert(OrgApacheLuceneUtilAutomatonAutomaton_transitionSortedWithOrgApacheLuceneUtilAutomatonTransition_(self, t), @"org/apache/lucene/util/automaton/Automaton.java:505 condition failed: assert transitionSorted(t);");
  t->dest_ = IOSIntArray_Get(nil_chk(transitions_), t->transitionUpto_++);
  t->min_ = IOSIntArray_Get(transitions_, t->transitionUpto_++);
  t->max_ = IOSIntArray_Get(transitions_, t->transitionUpto_++);
}

- (jboolean)transitionSortedWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t {
  return OrgApacheLuceneUtilAutomatonAutomaton_transitionSortedWithOrgApacheLuceneUtilAutomatonTransition_(self, t);
}

- (void)getTransitionWithInt:(jint)state
                     withInt:(jint)index
withOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t {
  jint i = IOSIntArray_Get(nil_chk(states_), 2 * state) + 3 * index;
  ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(t))->source_ = state;
  t->dest_ = IOSIntArray_Get(nil_chk(transitions_), i++);
  t->min_ = IOSIntArray_Get(transitions_, i++);
  t->max_ = IOSIntArray_Get(transitions_, i++);
}

+ (void)appendCharStringWithInt:(jint)c
      withJavaLangStringBuilder:(JavaLangStringBuilder *)b {
  OrgApacheLuceneUtilAutomatonAutomaton_appendCharStringWithInt_withJavaLangStringBuilder_(c, b);
}

- (NSString *)toDot {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  [b appendWithNSString:@"digraph Automaton {\n"];
  [b appendWithNSString:@"  rankdir = LR\n"];
  jint numStates = [self getNumStates];
  if (numStates > 0) {
    [b appendWithNSString:@"  initial [shape=plaintext,label=\"0\"]\n"];
    [b appendWithNSString:@"  initial -> 0\n"];
  }
  OrgApacheLuceneUtilAutomatonTransition *t = create_OrgApacheLuceneUtilAutomatonTransition_init();
  for (jint state = 0; state < numStates; state++) {
    [b appendWithNSString:@"  "];
    [b appendWithInt:state];
    if ([self isAcceptWithInt:state]) {
      [b appendWithNSString:JreStrcat("$I$", @" [shape=doublecircle,label=\"", state, @"\"]\n")];
    }
    else {
      [b appendWithNSString:JreStrcat("$I$", @" [shape=circle,label=\"", state, @"\"]\n")];
    }
    jint numTransitions = [self initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint i = 0; i < numTransitions; i++) {
      [self getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      JreAssert(t->max_ >= t->min_, @"org/apache/lucene/util/automaton/Automaton.java:617 condition failed: assert t.max >= t.min;");
      [b appendWithNSString:@"  "];
      [b appendWithInt:state];
      [b appendWithNSString:@" -> "];
      [b appendWithInt:t->dest_];
      [b appendWithNSString:@" [label=\""];
      OrgApacheLuceneUtilAutomatonAutomaton_appendCharStringWithInt_withJavaLangStringBuilder_(t->min_, b);
      if (t->max_ != t->min_) {
        [b appendWithChar:'-'];
        OrgApacheLuceneUtilAutomatonAutomaton_appendCharStringWithInt_withJavaLangStringBuilder_(t->max_, b);
      }
      [b appendWithNSString:@"\"]\n"];
    }
  }
  [b appendWithChar:'}'];
  return [b description];
}

- (IOSIntArray *)getStartPoints {
  id<JavaUtilSet> pointset = create_JavaUtilHashSet_init();
  [pointset addWithId:JavaLangInteger_valueOfWithInt_(JavaLangCharacter_MIN_CODE_POINT)];
  for (jint s = 0; s < nextState_; s += 2) {
    jint trans = IOSIntArray_Get(nil_chk(states_), s);
    jint limit = trans + 3 * IOSIntArray_Get(states_, s + 1);
    while (trans < limit) {
      jint min = IOSIntArray_Get(nil_chk(transitions_), trans + 1);
      jint max = IOSIntArray_Get(transitions_, trans + 2);
      [pointset addWithId:JavaLangInteger_valueOfWithInt_(min)];
      if (max < JavaLangCharacter_MAX_CODE_POINT) {
        [pointset addWithId:JavaLangInteger_valueOfWithInt_(max + 1)];
      }
      trans += 3;
    }
  }
  IOSIntArray *points = [IOSIntArray arrayWithLength:[pointset size]];
  jint n = 0;
  for (JavaLangInteger * __strong m in pointset) {
    *IOSIntArray_GetRef(points, n++) = [((JavaLangInteger *) nil_chk(m)) intValue];
  }
  JavaUtilArrays_sortWithIntArray_(points);
  return points;
}

- (jint)stepWithInt:(jint)state
            withInt:(jint)label {
  JreAssert(state >= 0, @"org/apache/lucene/util/automaton/Automaton.java:675 condition failed: assert state >= 0;");
  JreAssert(label >= 0, @"org/apache/lucene/util/automaton/Automaton.java:676 condition failed: assert label >= 0;");
  jint trans = IOSIntArray_Get(nil_chk(states_), 2 * state);
  jint limit = trans + 3 * IOSIntArray_Get(states_, 2 * state + 1);
  while (trans < limit) {
    jint dest = IOSIntArray_Get(nil_chk(transitions_), trans);
    jint min = IOSIntArray_Get(transitions_, trans + 1);
    jint max = IOSIntArray_Get(transitions_, trans + 2);
    if (min <= label && label <= max) {
      return dest;
    }
    trans += 3;
  }
  return -1;
}

- (jlong)ramBytesUsed {
  return JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_HEADER) + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(states_) + OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(transitions_) + JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_HEADER) + (JreIntDiv([((JavaUtilBitSet *) nil_chk(isAccept_)) size], 8)) + JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF) + 2 * JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF) + 3 * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT + OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_BOOLEAN;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (void)dealloc {
  RELEASE_(states_);
  RELEASE_(isAccept_);
  RELEASE_(transitions_);
  RELEASE_(destMinMaxSorter_);
  RELEASE_(minMaxDestSorter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[[LOrgApacheLuceneUtilAutomatonTransition;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilBitSet;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 22, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(createState);
  methods[3].selector = @selector(setAcceptWithInt:withBoolean:);
  methods[4].selector = @selector(getSortedTransitions);
  methods[5].selector = @selector(getAcceptStates);
  methods[6].selector = @selector(isAcceptWithInt:);
  methods[7].selector = @selector(addTransitionWithInt:withInt:withInt:);
  methods[8].selector = @selector(addTransitionWithInt:withInt:withInt:withInt:);
  methods[9].selector = @selector(addEpsilonWithInt:withInt:);
  methods[10].selector = @selector(copy__WithOrgApacheLuceneUtilAutomatonAutomaton:);
  methods[11].selector = @selector(finishCurrentState);
  methods[12].selector = @selector(isDeterministic);
  methods[13].selector = @selector(finishState);
  methods[14].selector = @selector(getNumStates);
  methods[15].selector = @selector(getNumTransitions);
  methods[16].selector = @selector(getNumTransitionsWithInt:);
  methods[17].selector = @selector(growStates);
  methods[18].selector = @selector(growTransitions);
  methods[19].selector = @selector(initTransitionWithInt:withOrgApacheLuceneUtilAutomatonTransition:);
  methods[20].selector = @selector(getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:);
  methods[21].selector = @selector(transitionSortedWithOrgApacheLuceneUtilAutomatonTransition:);
  methods[22].selector = @selector(getTransitionWithInt:withInt:withOrgApacheLuceneUtilAutomatonTransition:);
  methods[23].selector = @selector(appendCharStringWithInt:withJavaLangStringBuilder:);
  methods[24].selector = @selector(toDot);
  methods[25].selector = @selector(getStartPoints);
  methods[26].selector = @selector(stepWithInt:withInt:);
  methods[27].selector = @selector(ramBytesUsed);
  methods[28].selector = @selector(getChildResources);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nextState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextTransition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "states_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isAccept_", "LJavaUtilBitSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "transitions_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deterministic_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "destMinMaxSorter_", "LOrgApacheLuceneUtilSorter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minMaxDestSorter_", "LOrgApacheLuceneUtilSorter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "setAccept", "IZ", "isAccept", "I", "addTransition", "III", "IIII", "addEpsilon", "copy", "LOrgApacheLuceneUtilAutomatonAutomaton;", "getNumTransitions", "initTransition", "ILOrgApacheLuceneUtilAutomatonTransition;", "getNextTransition", "LOrgApacheLuceneUtilAutomatonTransition;", "transitionSorted", "getTransition", "IILOrgApacheLuceneUtilAutomatonTransition;", "appendCharString", "ILJavaLangStringBuilder;", "step", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "LOrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter;LOrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter;LOrgApacheLuceneUtilAutomatonAutomaton_Builder;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonAutomaton = { "Automaton", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x1, 29, 9, -1, 23, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAutomatonAutomaton;
}

@end

void OrgApacheLuceneUtilAutomatonAutomaton_init(OrgApacheLuceneUtilAutomatonAutomaton *self) {
  OrgApacheLuceneUtilAutomatonAutomaton_initWithInt_withInt_(self, 2, 2);
}

OrgApacheLuceneUtilAutomatonAutomaton *new_OrgApacheLuceneUtilAutomatonAutomaton_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonAutomaton, init)
}

OrgApacheLuceneUtilAutomatonAutomaton *create_OrgApacheLuceneUtilAutomatonAutomaton_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonAutomaton, init)
}

void OrgApacheLuceneUtilAutomatonAutomaton_initWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *self, jint numStates, jint numTransitions) {
  NSObject_init(self);
  self->curState_ = -1;
  self->deterministic_ = true;
  JreStrongAssignAndConsume(&self->destMinMaxSorter_, new_OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(self));
  JreStrongAssignAndConsume(&self->minMaxDestSorter_, new_OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(self));
  JreStrongAssignAndConsume(&self->states_, [IOSIntArray newArrayWithLength:numStates * 2]);
  JreStrongAssignAndConsume(&self->isAccept_, new_JavaUtilBitSet_initWithInt_(numStates));
  JreStrongAssignAndConsume(&self->transitions_, [IOSIntArray newArrayWithLength:numTransitions * 3]);
}

OrgApacheLuceneUtilAutomatonAutomaton *new_OrgApacheLuceneUtilAutomatonAutomaton_initWithInt_withInt_(jint numStates, jint numTransitions) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonAutomaton, initWithInt_withInt_, numStates, numTransitions)
}

OrgApacheLuceneUtilAutomatonAutomaton *create_OrgApacheLuceneUtilAutomatonAutomaton_initWithInt_withInt_(jint numStates, jint numTransitions) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonAutomaton, initWithInt_withInt_, numStates, numTransitions)
}

void OrgApacheLuceneUtilAutomatonAutomaton_finishCurrentState(OrgApacheLuceneUtilAutomatonAutomaton *self) {
  jint numTransitions = IOSIntArray_Get(nil_chk(self->states_), 2 * self->curState_ + 1);
  JreAssert(numTransitions > 0, @"org/apache/lucene/util/automaton/Automaton.java:252 condition failed: assert numTransitions > 0;");
  jint offset = IOSIntArray_Get(self->states_, 2 * self->curState_);
  jint start = JreIntDiv(offset, 3);
  [((OrgApacheLuceneUtilSorter *) nil_chk(self->destMinMaxSorter_)) sortWithInt:start withInt:start + numTransitions];
  jint upto = 0;
  jint min = -1;
  jint max = -1;
  jint dest = -1;
  for (jint i = 0; i < numTransitions; i++) {
    jint tDest = IOSIntArray_Get(nil_chk(self->transitions_), offset + 3 * i);
    jint tMin = IOSIntArray_Get(self->transitions_, offset + 3 * i + 1);
    jint tMax = IOSIntArray_Get(self->transitions_, offset + 3 * i + 2);
    if (dest == tDest) {
      if (tMin <= max + 1) {
        if (tMax > max) {
          max = tMax;
        }
      }
      else {
        if (dest != -1) {
          *IOSIntArray_GetRef(self->transitions_, offset + 3 * upto) = dest;
          *IOSIntArray_GetRef(self->transitions_, offset + 3 * upto + 1) = min;
          *IOSIntArray_GetRef(self->transitions_, offset + 3 * upto + 2) = max;
          upto++;
        }
        min = tMin;
        max = tMax;
      }
    }
    else {
      if (dest != -1) {
        *IOSIntArray_GetRef(self->transitions_, offset + 3 * upto) = dest;
        *IOSIntArray_GetRef(self->transitions_, offset + 3 * upto + 1) = min;
        *IOSIntArray_GetRef(self->transitions_, offset + 3 * upto + 2) = max;
        upto++;
      }
      dest = tDest;
      min = tMin;
      max = tMax;
    }
  }
  if (dest != -1) {
    *IOSIntArray_GetRef(nil_chk(self->transitions_), offset + 3 * upto) = dest;
    *IOSIntArray_GetRef(self->transitions_, offset + 3 * upto + 1) = min;
    *IOSIntArray_GetRef(self->transitions_, offset + 3 * upto + 2) = max;
    upto++;
  }
  self->nextTransition_ -= (numTransitions - upto) * 3;
  *IOSIntArray_GetRef(nil_chk(self->states_), 2 * self->curState_ + 1) = upto;
  [((OrgApacheLuceneUtilSorter *) nil_chk(self->minMaxDestSorter_)) sortWithInt:start withInt:start + upto];
  if (self->deterministic_ && upto > 1) {
    jint lastMax = IOSIntArray_Get(nil_chk(self->transitions_), offset + 2);
    for (jint i = 1; i < upto; i++) {
      min = IOSIntArray_Get(self->transitions_, offset + 3 * i + 1);
      if (min <= lastMax) {
        self->deterministic_ = false;
        break;
      }
      lastMax = IOSIntArray_Get(self->transitions_, offset + 3 * i + 2);
    }
  }
}

void OrgApacheLuceneUtilAutomatonAutomaton_growStates(OrgApacheLuceneUtilAutomatonAutomaton *self) {
  if (self->nextState_ + 2 >= ((IOSIntArray *) nil_chk(self->states_))->size_) {
    JreStrongAssign(&self->states_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(self->states_, self->nextState_ + 2));
  }
}

void OrgApacheLuceneUtilAutomatonAutomaton_growTransitions(OrgApacheLuceneUtilAutomatonAutomaton *self) {
  if (self->nextTransition_ + 3 >= ((IOSIntArray *) nil_chk(self->transitions_))->size_) {
    JreStrongAssign(&self->transitions_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(self->transitions_, self->nextTransition_ + 3));
  }
}

jboolean OrgApacheLuceneUtilAutomatonAutomaton_transitionSortedWithOrgApacheLuceneUtilAutomatonTransition_(OrgApacheLuceneUtilAutomatonAutomaton *self, OrgApacheLuceneUtilAutomatonTransition *t) {
  jint upto = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(t))->transitionUpto_;
  if (upto == IOSIntArray_Get(nil_chk(self->states_), 2 * t->source_)) {
    return true;
  }
  jint nextDest = IOSIntArray_Get(nil_chk(self->transitions_), upto);
  jint nextMin = IOSIntArray_Get(self->transitions_, upto + 1);
  jint nextMax = IOSIntArray_Get(self->transitions_, upto + 2);
  if (nextMin > t->min_) {
    return true;
  }
  else if (nextMin < t->min_) {
    return false;
  }
  if (nextMax > t->max_) {
    return true;
  }
  else if (nextMax < t->max_) {
    return false;
  }
  if (nextDest > t->dest_) {
    return true;
  }
  else if (nextDest < t->dest_) {
    return false;
  }
  return false;
}

void OrgApacheLuceneUtilAutomatonAutomaton_appendCharStringWithInt_withJavaLangStringBuilder_(jint c, JavaLangStringBuilder *b) {
  OrgApacheLuceneUtilAutomatonAutomaton_initialize();
  if (c >= (jint) 0x21 && c <= (jint) 0x7e && c != '\\' && c != '"') [((JavaLangStringBuilder *) nil_chk(b)) appendCodePointWithInt:c];
  else {
    [((JavaLangStringBuilder *) nil_chk(b)) appendWithNSString:@"\\\\U"];
    NSString *s = JavaLangInteger_toHexStringWithInt_(c);
    if (c < (jint) 0x10) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"0000000"])) appendWithNSString:s];
    else if (c < (jint) 0x100) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"000000"])) appendWithNSString:s];
    else if (c < (jint) 0x1000) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"00000"])) appendWithNSString:s];
    else if (c < (jint) 0x10000) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"0000"])) appendWithNSString:s];
    else if (c < (jint) 0x100000) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"000"])) appendWithNSString:s];
    else if (c < (jint) 0x1000000) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"00"])) appendWithNSString:s];
    else if (c < (jint) 0x10000000) [((JavaLangStringBuilder *) nil_chk([b appendWithNSString:@"0"])) appendWithNSString:s];
    else [b appendWithNSString:s];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonAutomaton)

@implementation OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter

- (instancetype)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)outer$ {
  OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(self, outer$);
  return self;
}

- (void)swapOneWithInt:(jint)i
               withInt:(jint)j {
  OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_swapOneWithInt_withInt_(self, i, j);
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  jint iStart = 3 * i;
  jint jStart = 3 * j;
  OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_swapOneWithInt_withInt_(self, iStart, jStart);
  OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_swapOneWithInt_withInt_(self, iStart + 1, jStart + 1);
  OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_swapOneWithInt_withInt_(self, iStart + 2, jStart + 2);
}

- (jint)compareWithInt:(jint)i
               withInt:(jint)j {
  jint iStart = 3 * i;
  jint jStart = 3 * j;
  jint iDest = IOSIntArray_Get(nil_chk(this$0_->transitions_), iStart);
  jint jDest = IOSIntArray_Get(this$0_->transitions_, jStart);
  if (iDest < jDest) {
    return -1;
  }
  else if (iDest > jDest) {
    return 1;
  }
  jint iMin = IOSIntArray_Get(this$0_->transitions_, iStart + 1);
  jint jMin = IOSIntArray_Get(this$0_->transitions_, jStart + 1);
  if (iMin < jMin) {
    return -1;
  }
  else if (iMin > jMin) {
    return 1;
  }
  jint iMax = IOSIntArray_Get(this$0_->transitions_, iStart + 2);
  jint jMax = IOSIntArray_Get(this$0_->transitions_, jStart + 2);
  if (iMax < jMax) {
    return -1;
  }
  else if (iMax > jMax) {
    return 1;
  }
  return 0;
}

- (void)__javaClone:(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilAutomatonAutomaton:);
  methods[1].selector = @selector(swapOneWithInt:withInt:);
  methods[2].selector = @selector(swapWithInt:withInt:);
  methods[3].selector = @selector(compareWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneUtilAutomatonAutomaton;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilAutomatonAutomaton;", "swapOne", "II", "swap", "compare" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter = { "DestMinMaxSorter", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x0, 4, 1, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter;
}

@end

void OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter *self, OrgApacheLuceneUtilAutomatonAutomaton *outer$) {
  self->this$0_ = outer$;
  OrgApacheLuceneUtilInPlaceMergeSorter_init(self);
}

OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter *new_OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter, initWithOrgApacheLuceneUtilAutomatonAutomaton_, outer$)
}

OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter *create_OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter, initWithOrgApacheLuceneUtilAutomatonAutomaton_, outer$)
}

void OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_swapOneWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter *self, jint i, jint j) {
  jint x = IOSIntArray_Get(nil_chk(self->this$0_->transitions_), i);
  *IOSIntArray_GetRef(self->this$0_->transitions_, i) = IOSIntArray_Get(self->this$0_->transitions_, j);
  *IOSIntArray_GetRef(self->this$0_->transitions_, j) = x;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter)

@implementation OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter

- (instancetype)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)outer$ {
  OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(self, outer$);
  return self;
}

- (void)swapOneWithInt:(jint)i
               withInt:(jint)j {
  OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_swapOneWithInt_withInt_(self, i, j);
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  jint iStart = 3 * i;
  jint jStart = 3 * j;
  OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_swapOneWithInt_withInt_(self, iStart, jStart);
  OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_swapOneWithInt_withInt_(self, iStart + 1, jStart + 1);
  OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_swapOneWithInt_withInt_(self, iStart + 2, jStart + 2);
}

- (jint)compareWithInt:(jint)i
               withInt:(jint)j {
  jint iStart = 3 * i;
  jint jStart = 3 * j;
  jint iMin = IOSIntArray_Get(nil_chk(this$0_->transitions_), iStart + 1);
  jint jMin = IOSIntArray_Get(this$0_->transitions_, jStart + 1);
  if (iMin < jMin) {
    return -1;
  }
  else if (iMin > jMin) {
    return 1;
  }
  jint iMax = IOSIntArray_Get(this$0_->transitions_, iStart + 2);
  jint jMax = IOSIntArray_Get(this$0_->transitions_, jStart + 2);
  if (iMax < jMax) {
    return -1;
  }
  else if (iMax > jMax) {
    return 1;
  }
  jint iDest = IOSIntArray_Get(this$0_->transitions_, iStart);
  jint jDest = IOSIntArray_Get(this$0_->transitions_, jStart);
  if (iDest < jDest) {
    return -1;
  }
  else if (iDest > jDest) {
    return 1;
  }
  return 0;
}

- (void)__javaClone:(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilAutomatonAutomaton:);
  methods[1].selector = @selector(swapOneWithInt:withInt:);
  methods[2].selector = @selector(swapWithInt:withInt:);
  methods[3].selector = @selector(compareWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneUtilAutomatonAutomaton;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilAutomatonAutomaton;", "swapOne", "II", "swap", "compare" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter = { "MinMaxDestSorter", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x0, 4, 1, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter;
}

@end

void OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter *self, OrgApacheLuceneUtilAutomatonAutomaton *outer$) {
  self->this$0_ = outer$;
  OrgApacheLuceneUtilInPlaceMergeSorter_init(self);
}

OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter *new_OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter, initWithOrgApacheLuceneUtilAutomatonAutomaton_, outer$)
}

OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter *create_OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter, initWithOrgApacheLuceneUtilAutomatonAutomaton_, outer$)
}

void OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_swapOneWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter *self, jint i, jint j) {
  jint x = IOSIntArray_Get(nil_chk(self->this$0_->transitions_), i);
  *IOSIntArray_GetRef(self->this$0_->transitions_, i) = IOSIntArray_Get(self->this$0_->transitions_, j);
  *IOSIntArray_GetRef(self->this$0_->transitions_, j) = x;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter)

@implementation OrgApacheLuceneUtilAutomatonAutomaton_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilAutomatonAutomaton_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)numStates
                    withInt:(jint)numTransitions {
  OrgApacheLuceneUtilAutomatonAutomaton_Builder_initWithInt_withInt_(self, numStates, numTransitions);
  return self;
}

- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                     withInt:(jint)label {
  [self addTransitionWithInt:source withInt:dest withInt:label withInt:label];
}

- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                     withInt:(jint)min
                     withInt:(jint)max {
  if (((IOSIntArray *) nil_chk(transitions_))->size_ < nextTransition_ + 4) {
    JreStrongAssign(&transitions_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(transitions_, nextTransition_ + 4));
  }
  *IOSIntArray_GetRef(nil_chk(transitions_), nextTransition_++) = source;
  *IOSIntArray_GetRef(transitions_, nextTransition_++) = dest;
  *IOSIntArray_GetRef(transitions_, nextTransition_++) = min;
  *IOSIntArray_GetRef(transitions_, nextTransition_++) = max;
}

- (void)addEpsilonWithInt:(jint)source
                  withInt:(jint)dest {
  for (jint upto = 0; upto < nextTransition_; upto += 4) {
    if (IOSIntArray_Get(nil_chk(transitions_), upto) == dest) {
      [self addTransitionWithInt:source withInt:IOSIntArray_Get(transitions_, upto + 1) withInt:IOSIntArray_Get(transitions_, upto + 2) withInt:IOSIntArray_Get(transitions_, upto + 3)];
    }
  }
  if ([self isAcceptWithInt:dest]) {
    [self setAcceptWithInt:source withBoolean:true];
  }
}

- (OrgApacheLuceneUtilAutomatonAutomaton *)finish {
  jint numStates = nextState_;
  jint numTransitions = JreIntDiv(nextTransition_, 4);
  OrgApacheLuceneUtilAutomatonAutomaton *a = create_OrgApacheLuceneUtilAutomatonAutomaton_initWithInt_withInt_(numStates, numTransitions);
  for (jint state = 0; state < numStates; state++) {
    [a createState];
    [a setAcceptWithInt:state withBoolean:[self isAcceptWithInt:state]];
  }
  [((OrgApacheLuceneUtilSorter *) nil_chk(sorter_)) sortWithInt:0 withInt:numTransitions];
  for (jint upto = 0; upto < nextTransition_; upto += 4) {
    [a addTransitionWithInt:IOSIntArray_Get(nil_chk(transitions_), upto) withInt:IOSIntArray_Get(transitions_, upto + 1) withInt:IOSIntArray_Get(transitions_, upto + 2) withInt:IOSIntArray_Get(transitions_, upto + 3)];
  }
  [a finishState];
  return a;
}

- (jint)createState {
  return nextState_++;
}

- (void)setAcceptWithInt:(jint)state
             withBoolean:(jboolean)accept {
  if (state >= [self getNumStates]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"state=", state, @" is out of bounds (numStates=", [self getNumStates], ')'));
  }
  [((JavaUtilBitSet *) nil_chk(self->isAccept_)) setWithInt:state withBoolean:accept];
}

- (jboolean)isAcceptWithInt:(jint)state {
  return [((JavaUtilBitSet *) nil_chk(self->isAccept_)) getWithInt:state];
}

- (jint)getNumStates {
  return nextState_;
}

- (void)copy__WithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)other {
  jint offset = [self getNumStates];
  jint otherNumStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(other)) getNumStates];
  [self copyStatesWithOrgApacheLuceneUtilAutomatonAutomaton:other];
  OrgApacheLuceneUtilAutomatonTransition *t = create_OrgApacheLuceneUtilAutomatonTransition_init();
  for (jint s = 0; s < otherNumStates; s++) {
    jint count = [other initTransitionWithInt:s withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint i = 0; i < count; i++) {
      [other getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      [self addTransitionWithInt:offset + s withInt:offset + t->dest_ withInt:t->min_ withInt:t->max_];
    }
  }
}

- (void)copyStatesWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)other {
  jint otherNumStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(other)) getNumStates];
  for (jint s = 0; s < otherNumStates; s++) {
    jint newState = [self createState];
    [self setAcceptWithInt:newState withBoolean:[other isAcceptWithInt:s]];
  }
}

- (void)dealloc {
  RELEASE_(isAccept_);
  RELEASE_(transitions_);
  RELEASE_(sorter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilAutomatonAutomaton;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withInt:);
  methods[2].selector = @selector(addTransitionWithInt:withInt:withInt:);
  methods[3].selector = @selector(addTransitionWithInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(addEpsilonWithInt:withInt:);
  methods[5].selector = @selector(finish);
  methods[6].selector = @selector(createState);
  methods[7].selector = @selector(setAcceptWithInt:withBoolean:);
  methods[8].selector = @selector(isAcceptWithInt:);
  methods[9].selector = @selector(getNumStates);
  methods[10].selector = @selector(copy__WithOrgApacheLuceneUtilAutomatonAutomaton:);
  methods[11].selector = @selector(copyStatesWithOrgApacheLuceneUtilAutomatonAutomaton:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nextState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isAccept_", "LJavaUtilBitSet;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "transitions_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextTransition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sorter_", "LOrgApacheLuceneUtilSorter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "addTransition", "III", "IIII", "addEpsilon", "setAccept", "IZ", "isAccept", "I", "copy", "LOrgApacheLuceneUtilAutomatonAutomaton;", "copyStates", "LOrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonAutomaton_Builder = { "Builder", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x9, 12, 5, 10, 12, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAutomatonAutomaton_Builder;
}

@end

void OrgApacheLuceneUtilAutomatonAutomaton_Builder_init(OrgApacheLuceneUtilAutomatonAutomaton_Builder *self) {
  OrgApacheLuceneUtilAutomatonAutomaton_Builder_initWithInt_withInt_(self, 16, 16);
}

OrgApacheLuceneUtilAutomatonAutomaton_Builder *new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_Builder, init)
}

OrgApacheLuceneUtilAutomatonAutomaton_Builder *create_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_Builder, init)
}

void OrgApacheLuceneUtilAutomatonAutomaton_Builder_initWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton_Builder *self, jint numStates, jint numTransitions) {
  NSObject_init(self);
  self->nextState_ = 0;
  self->nextTransition_ = 0;
  JreStrongAssignAndConsume(&self->sorter_, new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_(self));
  JreStrongAssignAndConsume(&self->isAccept_, new_JavaUtilBitSet_initWithInt_(numStates));
  JreStrongAssignAndConsume(&self->transitions_, [IOSIntArray newArrayWithLength:numTransitions * 4]);
}

OrgApacheLuceneUtilAutomatonAutomaton_Builder *new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_initWithInt_withInt_(jint numStates, jint numTransitions) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_Builder, initWithInt_withInt_, numStates, numTransitions)
}

OrgApacheLuceneUtilAutomatonAutomaton_Builder *create_OrgApacheLuceneUtilAutomatonAutomaton_Builder_initWithInt_withInt_(jint numStates, jint numTransitions) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_Builder, initWithInt_withInt_, numStates, numTransitions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonAutomaton_Builder)

@implementation OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter

- (instancetype)initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder:(OrgApacheLuceneUtilAutomatonAutomaton_Builder *)outer$ {
  OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_(self, outer$);
  return self;
}

- (void)swapOneWithInt:(jint)i
               withInt:(jint)j {
  OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_swapOneWithInt_withInt_(self, i, j);
}

- (void)swapWithInt:(jint)i
            withInt:(jint)j {
  jint iStart = 4 * i;
  jint jStart = 4 * j;
  OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_swapOneWithInt_withInt_(self, iStart, jStart);
  OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_swapOneWithInt_withInt_(self, iStart + 1, jStart + 1);
  OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_swapOneWithInt_withInt_(self, iStart + 2, jStart + 2);
  OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_swapOneWithInt_withInt_(self, iStart + 3, jStart + 3);
}

- (jint)compareWithInt:(jint)i
               withInt:(jint)j {
  jint iStart = 4 * i;
  jint jStart = 4 * j;
  jint iSrc = IOSIntArray_Get(nil_chk(this$0_->transitions_), iStart);
  jint jSrc = IOSIntArray_Get(this$0_->transitions_, jStart);
  if (iSrc < jSrc) {
    return -1;
  }
  else if (iSrc > jSrc) {
    return 1;
  }
  jint iMin = IOSIntArray_Get(this$0_->transitions_, iStart + 2);
  jint jMin = IOSIntArray_Get(this$0_->transitions_, jStart + 2);
  if (iMin < jMin) {
    return -1;
  }
  else if (iMin > jMin) {
    return 1;
  }
  jint iMax = IOSIntArray_Get(this$0_->transitions_, iStart + 3);
  jint jMax = IOSIntArray_Get(this$0_->transitions_, jStart + 3);
  if (iMax < jMax) {
    return -1;
  }
  else if (iMax > jMax) {
    return 1;
  }
  jint iDest = IOSIntArray_Get(this$0_->transitions_, iStart + 1);
  jint jDest = IOSIntArray_Get(this$0_->transitions_, jStart + 1);
  if (iDest < jDest) {
    return -1;
  }
  else if (iDest > jDest) {
    return 1;
  }
  return 0;
}

- (void)__javaClone:(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder:);
  methods[1].selector = @selector(swapOneWithInt:withInt:);
  methods[2].selector = @selector(swapWithInt:withInt:);
  methods[3].selector = @selector(compareWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneUtilAutomatonAutomaton_Builder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilAutomatonAutomaton_Builder;", "swapOne", "II", "swap", "compare" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter = { "OurSorter", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x0, 4, 1, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter;
}

@end

void OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter *self, OrgApacheLuceneUtilAutomatonAutomaton_Builder *outer$) {
  self->this$0_ = outer$;
  OrgApacheLuceneUtilInPlaceMergeSorter_init(self);
}

OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter *new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_(OrgApacheLuceneUtilAutomatonAutomaton_Builder *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter, initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_, outer$)
}

OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter *create_OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_(OrgApacheLuceneUtilAutomatonAutomaton_Builder *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter, initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_, outer$)
}

void OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_swapOneWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter *self, jint i, jint j) {
  jint x = IOSIntArray_Get(nil_chk(self->this$0_->transitions_), i);
  *IOSIntArray_GetRef(self->this$0_->transitions_, i) = IOSIntArray_Get(self->this$0_->transitions_, j);
  *IOSIntArray_GetRef(self->this$0_->transitions_, j) = x;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter)
