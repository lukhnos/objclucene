//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/SingleTermsEnum.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/UnicodeUtil.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/automaton/Operations.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "org/apache/lucene/util/automaton/UTF32ToUTF8.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/automaton/CompiledAutomaton must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilAutomatonCompiledAutomaton () {
 @public
  OrgApacheLuceneUtilAutomatonTransition *transition_;
}

/*!
 @brief Returns sink state, if present, else -1.
 */
+ (jint)findSinkStateWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton;

- (OrgApacheLuceneUtilBytesRef *)addTailWithInt:(jint)state
         withOrgApacheLuceneUtilBytesRefBuilder:(OrgApacheLuceneUtilBytesRefBuilder *)term
                                        withInt:(jint)idx
                                        withInt:(jint)leadLabel;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonCompiledAutomaton, transition_, OrgApacheLuceneUtilAutomatonTransition *)

__attribute__((unused)) static jint OrgApacheLuceneUtilAutomatonCompiledAutomaton_findSinkStateWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *automaton);

__attribute__((unused)) static OrgApacheLuceneUtilBytesRef *OrgApacheLuceneUtilAutomatonCompiledAutomaton_addTailWithInt_withOrgApacheLuceneUtilBytesRefBuilder_withInt_withInt_(OrgApacheLuceneUtilAutomatonCompiledAutomaton *self, jint state, OrgApacheLuceneUtilBytesRefBuilder *term, jint idx, jint leadLabel);

__attribute__((unused)) static void OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_initWithNSString_withInt_(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *self, NSString *__name, jint __ordinal);

@implementation OrgApacheLuceneUtilAutomatonCompiledAutomaton

- (instancetype)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_(self, automaton);
  return self;
}

+ (jint)findSinkStateWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton {
  return OrgApacheLuceneUtilAutomatonCompiledAutomaton_findSinkStateWithOrgApacheLuceneUtilAutomatonAutomaton_(automaton);
}

- (instancetype)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                          withJavaLangBoolean:(JavaLangBoolean *)finite
                                                  withBoolean:(jboolean)simplify {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_(self, automaton, finite, simplify);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                          withJavaLangBoolean:(JavaLangBoolean *)finite
                                                  withBoolean:(jboolean)simplify
                                                      withInt:(jint)maxDeterminizedStates
                                                  withBoolean:(jboolean)isBinary {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_(self, automaton, finite, simplify, maxDeterminizedStates, isBinary);
  return self;
}

- (OrgApacheLuceneUtilBytesRef *)addTailWithInt:(jint)state
         withOrgApacheLuceneUtilBytesRefBuilder:(OrgApacheLuceneUtilBytesRefBuilder *)term
                                        withInt:(jint)idx
                                        withInt:(jint)leadLabel {
  return OrgApacheLuceneUtilAutomatonCompiledAutomaton_addTailWithInt_withOrgApacheLuceneUtilBytesRefBuilder_withInt_withInt_(self, state, term, idx, leadLabel);
}

- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms {
  switch ([type_ ordinal]) {
    case OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum_NONE:
    return JreLoadStatic(OrgApacheLuceneIndexTermsEnum, EMPTY);
    case OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum_ALL:
    return [((OrgApacheLuceneIndexTerms *) nil_chk(terms)) iterator];
    case OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum_SINGLE:
    return create_OrgApacheLuceneIndexSingleTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilBytesRef_([((OrgApacheLuceneIndexTerms *) nil_chk(terms)) iterator], term_);
    case OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum_NORMAL:
    return [((OrgApacheLuceneIndexTerms *) nil_chk(terms)) intersectWithOrgApacheLuceneUtilAutomatonCompiledAutomaton:self withOrgApacheLuceneUtilBytesRef:nil];
    default:
    @throw create_JavaLangRuntimeException_initWithNSString_(@"unhandled case");
  }
}

- (OrgApacheLuceneUtilBytesRef *)floorWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)input
                               withOrgApacheLuceneUtilBytesRefBuilder:(OrgApacheLuceneUtilBytesRefBuilder *)output {
  jint state = [((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(runAutomaton_)) getInitialState];
  if (((OrgApacheLuceneUtilBytesRef *) nil_chk(input))->length_ == 0) {
    if ([runAutomaton_ isAcceptWithInt:state]) {
      [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(output)) clear];
      return [output get];
    }
    else {
      return nil;
    }
  }
  id<JavaUtilList> stack = create_JavaUtilArrayList_init();
  jint idx = 0;
  while (true) {
    jint label = IOSByteArray_Get(nil_chk(input->bytes_), input->offset_ + idx) & (jint) 0xff;
    jint nextState = [runAutomaton_ stepWithInt:state withInt:label];
    if (idx == input->length_ - 1) {
      if (nextState != -1 && [runAutomaton_ isAcceptWithInt:nextState]) {
        [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(output)) growWithInt:1 + idx];
        [output setByteAtWithInt:idx withByte:(jbyte) label];
        [output setLengthWithInt:input->length_];
        return [output get];
      }
      else {
        nextState = -1;
      }
    }
    if (nextState == -1) {
      while (true) {
        jint numTransitions = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(automaton_)) getNumTransitionsWithInt:state];
        if (numTransitions == 0) {
          JreAssert([runAutomaton_ isAcceptWithInt:state], @"org/apache/lucene/util/automaton/CompiledAutomaton.java:394 condition failed: assert runAutomaton.isAccept(state);");
          [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(output)) setLengthWithInt:idx];
          return [output get];
        }
        else {
          [automaton_ getTransitionWithInt:state withInt:0 withOrgApacheLuceneUtilAutomatonTransition:transition_];
          if (label - 1 < ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(transition_))->min_) {
            if ([runAutomaton_ isAcceptWithInt:state]) {
              [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(output)) setLengthWithInt:idx];
              return [output get];
            }
            if ([stack size] == 0) {
              return nil;
            }
            else {
              state = [((JavaLangInteger *) nil_chk([stack removeWithInt:[stack size] - 1])) intValue];
              idx--;
              label = IOSByteArray_Get(nil_chk(input->bytes_), input->offset_ + idx) & (jint) 0xff;
            }
          }
          else {
            break;
          }
        }
      }
      return OrgApacheLuceneUtilAutomatonCompiledAutomaton_addTailWithInt_withOrgApacheLuceneUtilBytesRefBuilder_withInt_withInt_(self, state, output, idx, label);
    }
    else {
      [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(output)) growWithInt:1 + idx];
      [output setByteAtWithInt:idx withByte:(jbyte) label];
      [stack addWithId:JavaLangInteger_valueOfWithInt_(state)];
      state = nextState;
      idx++;
    }
  }
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((runAutomaton_ == nil) ? 0 : ((jint) [((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(runAutomaton_)) hash]));
  result = prime * result + ((term_ == nil) ? 0 : ((jint) [((OrgApacheLuceneUtilBytesRef *) nil_chk(term_)) hash]));
  result = prime * result + ((type_ == nil) ? 0 : ((jint) [((OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *) nil_chk(type_)) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (obj == nil) return false;
  if (!JreObjectEqualsEquals([self java_getClass], [obj java_getClass])) return false;
  OrgApacheLuceneUtilAutomatonCompiledAutomaton *other = (OrgApacheLuceneUtilAutomatonCompiledAutomaton *) cast_chk(obj, [OrgApacheLuceneUtilAutomatonCompiledAutomaton class]);
  if (type_ != other->type_) return false;
  if (type_ == JreLoadEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, SINGLE)) {
    if (![((OrgApacheLuceneUtilBytesRef *) nil_chk(term_)) isEqual:other->term_]) return false;
  }
  else if (type_ == JreLoadEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NORMAL)) {
    if (![((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(runAutomaton_)) isEqual:other->runAutomaton_]) return false;
  }
  return true;
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(term_);
  RELEASE_(runAutomaton_);
  RELEASE_(automaton_);
  RELEASE_(commonSuffixRef_);
  RELEASE_(finite_);
  RELEASE_(transition_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilAutomatonAutomaton:);
  methods[1].selector = @selector(findSinkStateWithOrgApacheLuceneUtilAutomatonAutomaton:);
  methods[2].selector = @selector(initWithOrgApacheLuceneUtilAutomatonAutomaton:withJavaLangBoolean:withBoolean:);
  methods[3].selector = @selector(initWithOrgApacheLuceneUtilAutomatonAutomaton:withJavaLangBoolean:withBoolean:withInt:withBoolean:);
  methods[4].selector = @selector(addTailWithInt:withOrgApacheLuceneUtilBytesRefBuilder:withInt:withInt:);
  methods[5].selector = @selector(getTermsEnumWithOrgApacheLuceneIndexTerms:);
  methods[6].selector = @selector(floorWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRefBuilder:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LOrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "term_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "runAutomaton_", "LOrgApacheLuceneUtilAutomatonByteRunAutomaton;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "automaton_", "LOrgApacheLuceneUtilAutomatonAutomaton;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "commonSuffixRef_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "finite_", "LJavaLangBoolean;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "sinkState_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "transition_", "LOrgApacheLuceneUtilAutomatonTransition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilAutomatonAutomaton;", "findSinkState", "LOrgApacheLuceneUtilAutomatonAutomaton;LJavaLangBoolean;Z", "LOrgApacheLuceneUtilAutomatonAutomaton;LJavaLangBoolean;ZIZ", "addTail", "ILOrgApacheLuceneUtilBytesRefBuilder;II", "getTermsEnum", "LOrgApacheLuceneIndexTerms;", "LJavaIoIOException;", "floor", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRefBuilder;", "hashCode", "equals", "LNSObject;", "LOrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonCompiledAutomaton = { "CompiledAutomaton", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x1, 9, 8, -1, 14, -1, -1, -1 };
  return &_OrgApacheLuceneUtilAutomatonCompiledAutomaton;
}

@end

void OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonCompiledAutomaton *self, OrgApacheLuceneUtilAutomatonAutomaton *automaton) {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_(self, automaton, nil, true);
}

OrgApacheLuceneUtilAutomatonCompiledAutomaton *new_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *automaton) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonCompiledAutomaton, initWithOrgApacheLuceneUtilAutomatonAutomaton_, automaton)
}

OrgApacheLuceneUtilAutomatonCompiledAutomaton *create_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *automaton) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonCompiledAutomaton, initWithOrgApacheLuceneUtilAutomatonAutomaton_, automaton)
}

jint OrgApacheLuceneUtilAutomatonCompiledAutomaton_findSinkStateWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *automaton) {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_initialize();
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(automaton)) getNumStates];
  OrgApacheLuceneUtilAutomatonTransition *t = create_OrgApacheLuceneUtilAutomatonTransition_init();
  jint foundState = -1;
  for (jint s = 0; s < numStates; s++) {
    if ([automaton isAcceptWithInt:s]) {
      jint count = [automaton initTransitionWithInt:s withOrgApacheLuceneUtilAutomatonTransition:t];
      jboolean isSinkState = false;
      for (jint i = 0; i < count; i++) {
        [automaton getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
        if (t->dest_ == s && t->min_ == 0 && t->max_ == (jint) 0xff) {
          isSinkState = true;
          break;
        }
      }
      if (isSinkState) {
        foundState = s;
        break;
      }
    }
  }
  return foundState;
}

void OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_(OrgApacheLuceneUtilAutomatonCompiledAutomaton *self, OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify) {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_(self, automaton, finite, simplify, OrgApacheLuceneUtilAutomatonOperations_DEFAULT_MAX_DETERMINIZED_STATES, false);
}

OrgApacheLuceneUtilAutomatonCompiledAutomaton *new_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonCompiledAutomaton, initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_, automaton, finite, simplify)
}

OrgApacheLuceneUtilAutomatonCompiledAutomaton *create_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonCompiledAutomaton, initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_, automaton, finite, simplify)
}

void OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonCompiledAutomaton *self, OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify, jint maxDeterminizedStates, jboolean isBinary) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->transition_, new_OrgApacheLuceneUtilAutomatonTransition_init());
  if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(automaton)) getNumStates] == 0) {
    automaton = create_OrgApacheLuceneUtilAutomatonAutomaton_init();
    [automaton createState];
  }
  if (simplify) {
    if (OrgApacheLuceneUtilAutomatonOperations_isEmptyWithOrgApacheLuceneUtilAutomatonAutomaton_(automaton)) {
      JreStrongAssign(&self->type_, JreLoadEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NONE));
      JreStrongAssign(&self->term_, nil);
      JreStrongAssign(&self->commonSuffixRef_, nil);
      JreStrongAssign(&self->runAutomaton_, nil);
      JreStrongAssign(&self->automaton_, nil);
      JreStrongAssign(&self->finite_, nil);
      self->sinkState_ = -1;
      return;
    }
    jboolean isTotal;
    if (isBinary) {
      isTotal = OrgApacheLuceneUtilAutomatonOperations_isTotalWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_withInt_(automaton, 0, (jint) 0xff);
    }
    else {
      isTotal = OrgApacheLuceneUtilAutomatonOperations_isTotalWithOrgApacheLuceneUtilAutomatonAutomaton_(automaton);
    }
    if (isTotal) {
      JreStrongAssign(&self->type_, JreLoadEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, ALL));
      JreStrongAssign(&self->term_, nil);
      JreStrongAssign(&self->commonSuffixRef_, nil);
      JreStrongAssign(&self->runAutomaton_, nil);
      JreStrongAssign(&self->automaton_, nil);
      JreStrongAssign(&self->finite_, nil);
      self->sinkState_ = -1;
      return;
    }
    automaton = OrgApacheLuceneUtilAutomatonOperations_determinizeWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(automaton, maxDeterminizedStates);
    OrgApacheLuceneUtilIntsRef *singleton = OrgApacheLuceneUtilAutomatonOperations_getSingletonWithOrgApacheLuceneUtilAutomatonAutomaton_(automaton);
    if (singleton != nil) {
      JreStrongAssign(&self->type_, JreLoadEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, SINGLE));
      JreStrongAssign(&self->commonSuffixRef_, nil);
      JreStrongAssign(&self->runAutomaton_, nil);
      JreStrongAssign(&self->automaton_, nil);
      JreStrongAssign(&self->finite_, nil);
      if (isBinary) {
        JreStrongAssign(&self->term_, OrgApacheLuceneUtilStringHelper_intsRefToBytesRefWithOrgApacheLuceneUtilIntsRef_(singleton));
      }
      else {
        JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(OrgApacheLuceneUtilUnicodeUtil_newStringWithIntArray_withInt_withInt_(singleton->ints_, singleton->offset_, singleton->length_)));
      }
      self->sinkState_ = -1;
      return;
    }
  }
  JreStrongAssign(&self->type_, JreLoadEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NORMAL));
  JreStrongAssign(&self->term_, nil);
  if (finite == nil) {
    JreStrongAssign(&self->finite_, JavaLangBoolean_valueOfWithBoolean_(OrgApacheLuceneUtilAutomatonOperations_isFiniteWithOrgApacheLuceneUtilAutomatonAutomaton_(automaton)));
  }
  else {
    JreStrongAssign(&self->finite_, finite);
  }
  OrgApacheLuceneUtilAutomatonAutomaton *binary;
  if (isBinary) {
    binary = automaton;
  }
  else {
    binary = [create_OrgApacheLuceneUtilAutomatonUTF32ToUTF8_init() convertWithOrgApacheLuceneUtilAutomatonAutomaton:automaton];
  }
  if ([self->finite_ booleanValue]) {
    JreStrongAssign(&self->commonSuffixRef_, nil);
  }
  else {
    OrgApacheLuceneUtilBytesRef *suffix = OrgApacheLuceneUtilAutomatonOperations_getCommonSuffixBytesRefWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(binary, maxDeterminizedStates);
    if (((OrgApacheLuceneUtilBytesRef *) nil_chk(suffix))->length_ == 0) {
      JreStrongAssign(&self->commonSuffixRef_, nil);
    }
    else {
      JreStrongAssign(&self->commonSuffixRef_, suffix);
    }
  }
  JreStrongAssignAndConsume(&self->runAutomaton_, new_OrgApacheLuceneUtilAutomatonByteRunAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withBoolean_withInt_(binary, true, maxDeterminizedStates));
  JreStrongAssign(&self->automaton_, self->runAutomaton_->automaton_);
  self->sinkState_ = OrgApacheLuceneUtilAutomatonCompiledAutomaton_findSinkStateWithOrgApacheLuceneUtilAutomatonAutomaton_(self->automaton_);
}

OrgApacheLuceneUtilAutomatonCompiledAutomaton *new_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify, jint maxDeterminizedStates, jboolean isBinary) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilAutomatonCompiledAutomaton, initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_, automaton, finite, simplify, maxDeterminizedStates, isBinary)
}

OrgApacheLuceneUtilAutomatonCompiledAutomaton *create_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify, jint maxDeterminizedStates, jboolean isBinary) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilAutomatonCompiledAutomaton, initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_, automaton, finite, simplify, maxDeterminizedStates, isBinary)
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneUtilAutomatonCompiledAutomaton_addTailWithInt_withOrgApacheLuceneUtilBytesRefBuilder_withInt_withInt_(OrgApacheLuceneUtilAutomatonCompiledAutomaton *self, jint state, OrgApacheLuceneUtilBytesRefBuilder *term, jint idx, jint leadLabel) {
  jint maxIndex = -1;
  jint numTransitions = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(self->automaton_)) initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:self->transition_];
  for (jint i = 0; i < numTransitions; i++) {
    [self->automaton_ getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:self->transition_];
    if (((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->min_ < leadLabel) {
      maxIndex = i;
    }
    else {
      break;
    }
  }
  JreAssert(maxIndex != -1, @"org/apache/lucene/util/automaton/CompiledAutomaton.java:279 condition failed: assert maxIndex != -1;");
  [self->automaton_ getTransitionWithInt:state withInt:maxIndex withOrgApacheLuceneUtilAutomatonTransition:self->transition_];
  jint floorLabel;
  if (((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->max_ > leadLabel - 1) {
    floorLabel = leadLabel - 1;
  }
  else {
    floorLabel = self->transition_->max_;
  }
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(term)) growWithInt:1 + idx];
  [term setByteAtWithInt:idx withByte:(jbyte) floorLabel];
  state = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->dest_;
  idx++;
  while (true) {
    numTransitions = [self->automaton_ getNumTransitionsWithInt:state];
    if (numTransitions == 0) {
      JreAssert([((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(self->runAutomaton_)) isAcceptWithInt:state], @"org/apache/lucene/util/automaton/CompiledAutomaton.java:303 condition failed: assert runAutomaton.isAccept(state);");
      [term setLengthWithInt:idx];
      return [term get];
    }
    else {
      [self->automaton_ getTransitionWithInt:state withInt:numTransitions - 1 withOrgApacheLuceneUtilAutomatonTransition:self->transition_];
      [term growWithInt:1 + idx];
      [term setByteAtWithInt:idx withByte:(jbyte) ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->max_];
      state = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->dest_;
      idx++;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonCompiledAutomaton)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE)

OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_values_[4];

@implementation OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE

+ (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *)NONE {
  return JreEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NONE);
}

+ (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *)ALL {
  return JreEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, ALL);
}

+ (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *)SINGLE {
  return JreEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, SINGLE);
}

+ (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *)NORMAL {
  return JreEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NORMAL);
}

+ (IOSObjectArray *)values {
  return OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_values();
}

+ (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_valueOfWithNSString_(name);
}

- (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum)toNSEnum {
  return (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NONE", "LOrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "ALL", "LOrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SINGLE", "LOrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "NORMAL", "LOrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NONE), &JreEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, ALL), &JreEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, SINGLE), &JreEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NORMAL), "LOrgApacheLuceneUtilAutomatonCompiledAutomaton;", "Ljava/lang/Enum<Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE = { "AUTOMATON_TYPE", "org.apache.lucene.util.automaton", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_initWithNSString_withInt_(e, JreEnumConstantName(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE)
  }
}

@end

void OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_initWithNSString_withInt_(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_values() {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_values_ count:4 type:OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_class_()];
}

OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_initialize();
  for (int i = 0; i < 4; i++) {
    OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *e = OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE)
