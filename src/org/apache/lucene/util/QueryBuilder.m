//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/QueryBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/QueryBuilder.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/QueryBuilder must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilQueryBuilder () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  jboolean enablePositionIncrements_;
}

/*!
 @brief Creates simple term query from the cached tokenstream contents
 */
- (OrgApacheLuceneSearchQuery *)analyzeTermWithNSString:(NSString *)field
                 withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream;

/*!
 @brief Creates simple boolean query from the cached tokenstream contents
 */
- (OrgApacheLuceneSearchQuery *)analyzeBooleanWithNSString:(NSString *)field
                    withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream;

- (void)addWithOrgApacheLuceneSearchBooleanQuery_Builder:(OrgApacheLuceneSearchBooleanQuery_Builder *)q
                   withOrgApacheLuceneSearchBooleanQuery:(OrgApacheLuceneSearchBooleanQuery *)current
            withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)operator_;

/*!
 @brief Creates complex boolean query from the cached tokenstream contents
 */
- (OrgApacheLuceneSearchQuery *)analyzeMultiBooleanWithNSString:(NSString *)field
                         withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream
                   withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)operator_;

/*!
 @brief Creates simple phrase query from the cached tokenstream contents
 */
- (OrgApacheLuceneSearchQuery *)analyzePhraseWithNSString:(NSString *)field
                   withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream
                                                  withInt:(jint)slop;

/*!
 @brief Creates complex phrase query from the cached tokenstream contents
 */
- (OrgApacheLuceneSearchQuery *)analyzeMultiPhraseWithNSString:(NSString *)field
                        withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream
                                                       withInt:(jint)slop;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilQueryBuilder, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneSearchBooleanClause_Occur_withNSString_withNSString_withBoolean_withInt_(OrgApacheLuceneUtilQueryBuilder *self, OrgApacheLuceneAnalysisAnalyzer *analyzer, OrgApacheLuceneSearchBooleanClause_Occur *operator_, NSString *field, NSString *queryText, jboolean quoted, jint phraseSlop);

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzeTermWithNSString_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream);

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzeBooleanWithNSString_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream);

__attribute__((unused)) static void OrgApacheLuceneUtilQueryBuilder_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(OrgApacheLuceneUtilQueryBuilder *self, OrgApacheLuceneSearchBooleanQuery_Builder *q, OrgApacheLuceneSearchBooleanQuery *current, OrgApacheLuceneSearchBooleanClause_Occur *operator_);

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzeMultiBooleanWithNSString_withOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneSearchBooleanClause_Occur_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream, OrgApacheLuceneSearchBooleanClause_Occur *operator_);

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzePhraseWithNSString_withOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream, jint slop);

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzeMultiPhraseWithNSString_withOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream, jint slop);

@implementation OrgApacheLuceneUtilQueryBuilder

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(self, analyzer);
  return self;
}

- (OrgApacheLuceneSearchQuery *)createBooleanQueryWithNSString:(NSString *)field
                                                  withNSString:(NSString *)queryText {
  return [self createBooleanQueryWithNSString:field withNSString:queryText withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
}

- (OrgApacheLuceneSearchQuery *)createBooleanQueryWithNSString:(NSString *)field
                                                  withNSString:(NSString *)queryText
                  withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)operator_ {
  if (operator_ != JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD) && operator_ != JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"invalid operator: only SHOULD or MUST are allowed");
  }
  return OrgApacheLuceneUtilQueryBuilder_createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneSearchBooleanClause_Occur_withNSString_withNSString_withBoolean_withInt_(self, analyzer_, operator_, field, queryText, false, 0);
}

- (OrgApacheLuceneSearchQuery *)createPhraseQueryWithNSString:(NSString *)field
                                                 withNSString:(NSString *)queryText {
  return [self createPhraseQueryWithNSString:field withNSString:queryText withInt:0];
}

- (OrgApacheLuceneSearchQuery *)createPhraseQueryWithNSString:(NSString *)field
                                                 withNSString:(NSString *)queryText
                                                      withInt:(jint)phraseSlop {
  return OrgApacheLuceneUtilQueryBuilder_createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneSearchBooleanClause_Occur_withNSString_withNSString_withBoolean_withInt_(self, analyzer_, JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST), field, queryText, true, phraseSlop);
}

- (OrgApacheLuceneSearchQuery *)createMinShouldMatchQueryWithNSString:(NSString *)field
                                                         withNSString:(NSString *)queryText
                                                            withFloat:(jfloat)fraction {
  if (JavaLangFloat_isNaNWithFloat_(fraction) || fraction < 0 || fraction > 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"fraction should be >= 0 and <= 1");
  }
  if (fraction == 1) {
    return [self createBooleanQueryWithNSString:field withNSString:queryText withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST)];
  }
  OrgApacheLuceneSearchQuery *query = OrgApacheLuceneUtilQueryBuilder_createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneSearchBooleanClause_Occur_withNSString_withNSString_withBoolean_withInt_(self, analyzer_, JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD), field, queryText, false, 0);
  if ([query isKindOfClass:[OrgApacheLuceneSearchBooleanQuery class]]) {
    OrgApacheLuceneSearchBooleanQuery *bq = (OrgApacheLuceneSearchBooleanQuery *) query;
    OrgApacheLuceneSearchBooleanQuery_Builder *builder = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
    [builder setDisableCoordWithBoolean:[((OrgApacheLuceneSearchBooleanQuery *) nil_chk(bq)) isCoordDisabled]];
    [builder setMinimumNumberShouldMatchWithInt:JreFpToInt((fraction * [((id<JavaUtilList>) nil_chk([bq clauses])) size]))];
    for (OrgApacheLuceneSearchBooleanClause * __strong clause in bq) {
      [builder addWithOrgApacheLuceneSearchBooleanClause:clause];
    }
    query = [builder build];
  }
  return query;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  return analyzer_;
}

- (void)setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  JreStrongAssign(&self->analyzer_, analyzer);
}

- (jboolean)getEnablePositionIncrements {
  return enablePositionIncrements_;
}

- (void)setEnablePositionIncrementsWithBoolean:(jboolean)enable {
  self->enablePositionIncrements_ = enable;
}

- (OrgApacheLuceneSearchQuery *)createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                       withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)operator_
                                                                       withNSString:(NSString *)field
                                                                       withNSString:(NSString *)queryText
                                                                        withBoolean:(jboolean)quoted
                                                                            withInt:(jint)phraseSlop {
  return OrgApacheLuceneUtilQueryBuilder_createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneSearchBooleanClause_Occur_withNSString_withNSString_withBoolean_withInt_(self, analyzer, operator_, field, queryText, quoted, phraseSlop);
}

- (OrgApacheLuceneSearchQuery *)analyzeTermWithNSString:(NSString *)field
                 withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream {
  return OrgApacheLuceneUtilQueryBuilder_analyzeTermWithNSString_withOrgApacheLuceneAnalysisTokenStream_(self, field, stream);
}

- (OrgApacheLuceneSearchQuery *)analyzeBooleanWithNSString:(NSString *)field
                    withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream {
  return OrgApacheLuceneUtilQueryBuilder_analyzeBooleanWithNSString_withOrgApacheLuceneAnalysisTokenStream_(self, field, stream);
}

- (void)addWithOrgApacheLuceneSearchBooleanQuery_Builder:(OrgApacheLuceneSearchBooleanQuery_Builder *)q
                   withOrgApacheLuceneSearchBooleanQuery:(OrgApacheLuceneSearchBooleanQuery *)current
            withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)operator_ {
  OrgApacheLuceneUtilQueryBuilder_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(self, q, current, operator_);
}

- (OrgApacheLuceneSearchQuery *)analyzeMultiBooleanWithNSString:(NSString *)field
                         withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream
                   withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)operator_ {
  return OrgApacheLuceneUtilQueryBuilder_analyzeMultiBooleanWithNSString_withOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneSearchBooleanClause_Occur_(self, field, stream, operator_);
}

- (OrgApacheLuceneSearchQuery *)analyzePhraseWithNSString:(NSString *)field
                   withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream
                                                  withInt:(jint)slop {
  return OrgApacheLuceneUtilQueryBuilder_analyzePhraseWithNSString_withOrgApacheLuceneAnalysisTokenStream_withInt_(self, field, stream, slop);
}

- (OrgApacheLuceneSearchQuery *)analyzeMultiPhraseWithNSString:(NSString *)field
                        withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream
                                                       withInt:(jint)slop {
  return OrgApacheLuceneUtilQueryBuilder_analyzeMultiPhraseWithNSString_withOrgApacheLuceneAnalysisTokenStream_withInt_(self, field, stream, slop);
}

- (OrgApacheLuceneSearchBooleanQuery_Builder *)newBooleanQueryWithBoolean:(jboolean)disableCoord {
  OrgApacheLuceneSearchBooleanQuery_Builder *builder = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [builder setDisableCoordWithBoolean:disableCoord];
  return builder;
}

- (OrgApacheLuceneSearchQuery *)newTermQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  return create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(term);
}

- (OrgApacheLuceneSearchMultiPhraseQuery *)newMultiPhraseQuery {
  return create_OrgApacheLuceneSearchMultiPhraseQuery_init();
}

- (void)dealloc {
  RELEASE_(analyzer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x14, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x2, 13, 14, 15, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x2, 16, 14, 15, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x2, 19, 20, 15, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x2, 21, 22, 15, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x2, 23, 22, 15, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBooleanQuery_Builder;", 0x4, 24, 10, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 25, 26, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchMultiPhraseQuery;", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisAnalyzer:);
  methods[1].selector = @selector(createBooleanQueryWithNSString:withNSString:);
  methods[2].selector = @selector(createBooleanQueryWithNSString:withNSString:withOrgApacheLuceneSearchBooleanClause_Occur:);
  methods[3].selector = @selector(createPhraseQueryWithNSString:withNSString:);
  methods[4].selector = @selector(createPhraseQueryWithNSString:withNSString:withInt:);
  methods[5].selector = @selector(createMinShouldMatchQueryWithNSString:withNSString:withFloat:);
  methods[6].selector = @selector(getAnalyzer);
  methods[7].selector = @selector(setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:);
  methods[8].selector = @selector(getEnablePositionIncrements);
  methods[9].selector = @selector(setEnablePositionIncrementsWithBoolean:);
  methods[10].selector = @selector(createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneSearchBooleanClause_Occur:withNSString:withNSString:withBoolean:withInt:);
  methods[11].selector = @selector(analyzeTermWithNSString:withOrgApacheLuceneAnalysisTokenStream:);
  methods[12].selector = @selector(analyzeBooleanWithNSString:withOrgApacheLuceneAnalysisTokenStream:);
  methods[13].selector = @selector(addWithOrgApacheLuceneSearchBooleanQuery_Builder:withOrgApacheLuceneSearchBooleanQuery:withOrgApacheLuceneSearchBooleanClause_Occur:);
  methods[14].selector = @selector(analyzeMultiBooleanWithNSString:withOrgApacheLuceneAnalysisTokenStream:withOrgApacheLuceneSearchBooleanClause_Occur:);
  methods[15].selector = @selector(analyzePhraseWithNSString:withOrgApacheLuceneAnalysisTokenStream:withInt:);
  methods[16].selector = @selector(analyzeMultiPhraseWithNSString:withOrgApacheLuceneAnalysisTokenStream:withInt:);
  methods[17].selector = @selector(newBooleanQueryWithBoolean:);
  methods[18].selector = @selector(newTermQueryWithOrgApacheLuceneIndexTerm:);
  methods[19].selector = @selector(newMultiPhraseQuery);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "enablePositionIncrements_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisAnalyzer;", "createBooleanQuery", "LNSString;LNSString;", "LNSString;LNSString;LOrgApacheLuceneSearchBooleanClause_Occur;", "createPhraseQuery", "LNSString;LNSString;I", "createMinShouldMatchQuery", "LNSString;LNSString;F", "setAnalyzer", "setEnablePositionIncrements", "Z", "createFieldQuery", "LOrgApacheLuceneAnalysisAnalyzer;LOrgApacheLuceneSearchBooleanClause_Occur;LNSString;LNSString;ZI", "analyzeTerm", "LNSString;LOrgApacheLuceneAnalysisTokenStream;", "LJavaIoIOException;", "analyzeBoolean", "add", "LOrgApacheLuceneSearchBooleanQuery_Builder;LOrgApacheLuceneSearchBooleanQuery;LOrgApacheLuceneSearchBooleanClause_Occur;", "analyzeMultiBoolean", "LNSString;LOrgApacheLuceneAnalysisTokenStream;LOrgApacheLuceneSearchBooleanClause_Occur;", "analyzePhrase", "LNSString;LOrgApacheLuceneAnalysisTokenStream;I", "analyzeMultiPhrase", "newBooleanQuery", "newTermQuery", "LOrgApacheLuceneIndexTerm;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilQueryBuilder = { "QueryBuilder", "org.apache.lucene.util", ptrTable, methods, fields, 7, 0x1, 20, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilQueryBuilder;
}

@end

void OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneUtilQueryBuilder *self, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  NSObject_init(self);
  self->enablePositionIncrements_ = true;
  JreStrongAssign(&self->analyzer_, analyzer);
}

OrgApacheLuceneUtilQueryBuilder *new_OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilQueryBuilder, initWithOrgApacheLuceneAnalysisAnalyzer_, analyzer)
}

OrgApacheLuceneUtilQueryBuilder *create_OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilQueryBuilder, initWithOrgApacheLuceneAnalysisAnalyzer_, analyzer)
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer_withOrgApacheLuceneSearchBooleanClause_Occur_withNSString_withNSString_withBoolean_withInt_(OrgApacheLuceneUtilQueryBuilder *self, OrgApacheLuceneAnalysisAnalyzer *analyzer, OrgApacheLuceneSearchBooleanClause_Occur *operator_, NSString *field, NSString *queryText, jboolean quoted, jint phraseSlop) {
  JreAssert(operator_ == JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD) || operator_ == JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST), @"org/apache/lucene/util/QueryBuilder.java:200 condition failed: assert operator == BooleanClause.Occur.SHOULD || operator == BooleanClause.Occur.MUST;");
  @try {
    OrgApacheLuceneAnalysisTokenStream *source = [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(analyzer)) tokenStreamWithNSString:field withNSString:queryText];
    JavaLangThrowable *__primaryException2 = nil;
    @try {
      OrgApacheLuceneAnalysisCachingTokenFilter *stream = create_OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(source);
      JavaLangThrowable *__primaryException1 = nil;
      @try {
        id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute> termAtt = JreRetainedLocalValue([stream getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute_class_()]);
        id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncAtt = JreRetainedLocalValue([stream addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
        if (termAtt == nil) {
          return nil;
        }
        jint numTokens = 0;
        jint positionCount = 0;
        jboolean hasSynonyms = false;
        [stream reset];
        while ([stream incrementToken]) {
          numTokens++;
          jint positionIncrement = [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncAtt)) getPositionIncrement];
          if (positionIncrement != 0) {
            positionCount += positionIncrement;
          }
          else {
            hasSynonyms = true;
          }
        }
        if (numTokens == 0) {
          return nil;
        }
        else if (numTokens == 1) {
          return OrgApacheLuceneUtilQueryBuilder_analyzeTermWithNSString_withOrgApacheLuceneAnalysisTokenStream_(self, field, stream);
        }
        else if (quoted && positionCount > 1) {
          if (hasSynonyms) {
            return OrgApacheLuceneUtilQueryBuilder_analyzeMultiPhraseWithNSString_withOrgApacheLuceneAnalysisTokenStream_withInt_(self, field, stream, phraseSlop);
          }
          else {
            return OrgApacheLuceneUtilQueryBuilder_analyzePhraseWithNSString_withOrgApacheLuceneAnalysisTokenStream_withInt_(self, field, stream, phraseSlop);
          }
        }
        else {
          if (positionCount == 1) {
            return OrgApacheLuceneUtilQueryBuilder_analyzeBooleanWithNSString_withOrgApacheLuceneAnalysisTokenStream_(self, field, stream);
          }
          else {
            return OrgApacheLuceneUtilQueryBuilder_analyzeMultiBooleanWithNSString_withOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneSearchBooleanClause_Occur_(self, field, stream, operator_);
          }
        }
      }
      @catch (JavaLangThrowable *e) {
        __primaryException1 = e;
        @throw e;
      }
      @finally {
        if (stream != nil) {
          if (__primaryException1 != nil) {
            @try {
              [stream close];
            }
            @catch (JavaLangThrowable *e) {
              [__primaryException1 addSuppressedWithJavaLangThrowable:e];
            }
          }
          else {
            [stream close];
          }
        }
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException2 = e;
      @throw e;
    }
    @finally {
      if (source != nil) {
        if (__primaryException2 != nil) {
          @try {
            [source close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException2 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [source close];
        }
      }
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(@"Error analyzing query text", e);
  }
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzeTermWithNSString_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream) {
  id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute> termAtt = JreRetainedLocalValue([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(stream)) getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute_class_()]);
  [stream reset];
  if (![stream incrementToken]) {
    @throw create_JavaLangAssertionError_init();
  }
  return [self newTermQueryWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(field, OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_([((id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute>) nil_chk(termAtt)) getBytesRef]))];
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzeBooleanWithNSString_withOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream) {
  OrgApacheLuceneSearchBooleanQuery_Builder *q = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [q setDisableCoordWithBoolean:true];
  id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute> termAtt = JreRetainedLocalValue([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(stream)) getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute_class_()]);
  [stream reset];
  while ([stream incrementToken]) {
    OrgApacheLuceneSearchQuery *currentQuery = JreRetainedLocalValue([self newTermQueryWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(field, OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_([((id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute>) nil_chk(termAtt)) getBytesRef]))]);
    [q addWithOrgApacheLuceneSearchQuery:currentQuery withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
  }
  return [q build];
}

void OrgApacheLuceneUtilQueryBuilder_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(OrgApacheLuceneUtilQueryBuilder *self, OrgApacheLuceneSearchBooleanQuery_Builder *q, OrgApacheLuceneSearchBooleanQuery *current, OrgApacheLuceneSearchBooleanClause_Occur *operator_) {
  if ([((id<JavaUtilList>) nil_chk([((OrgApacheLuceneSearchBooleanQuery *) nil_chk(current)) clauses])) isEmpty]) {
    return;
  }
  if ([((id<JavaUtilList>) nil_chk([current clauses])) size] == 1) {
    [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(q)) addWithOrgApacheLuceneSearchQuery:[((OrgApacheLuceneSearchBooleanClause *) nil_chk([((id<JavaUtilIterator>) nil_chk([((id<JavaUtilList>) nil_chk([current clauses])) iterator])) next])) getQuery] withOrgApacheLuceneSearchBooleanClause_Occur:operator_];
  }
  else {
    [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(q)) addWithOrgApacheLuceneSearchQuery:current withOrgApacheLuceneSearchBooleanClause_Occur:operator_];
  }
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzeMultiBooleanWithNSString_withOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneSearchBooleanClause_Occur_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream, OrgApacheLuceneSearchBooleanClause_Occur *operator_) {
  OrgApacheLuceneSearchBooleanQuery_Builder *q = JreRetainedLocalValue([self newBooleanQueryWithBoolean:false]);
  OrgApacheLuceneSearchBooleanQuery_Builder *currentQuery = JreRetainedLocalValue([self newBooleanQueryWithBoolean:true]);
  id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute> termAtt = JreRetainedLocalValue([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(stream)) getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute_class_()]);
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt = JreRetainedLocalValue([stream getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  [stream reset];
  while ([stream incrementToken]) {
    OrgApacheLuceneUtilBytesRef *bytes = JreRetainedLocalValue([((id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute>) nil_chk(termAtt)) getBytesRef]);
    if ([((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt)) getPositionIncrement] != 0) {
      OrgApacheLuceneUtilQueryBuilder_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(self, q, [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(currentQuery)) build], operator_);
      currentQuery = [self newBooleanQueryWithBoolean:true];
    }
    [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(currentQuery)) addWithOrgApacheLuceneSearchQuery:[self newTermQueryWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(field, OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(bytes))] withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
  }
  OrgApacheLuceneUtilQueryBuilder_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(self, q, [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(currentQuery)) build], operator_);
  return [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(q)) build];
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzePhraseWithNSString_withOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream, jint slop) {
  OrgApacheLuceneSearchPhraseQuery_Builder *builder = create_OrgApacheLuceneSearchPhraseQuery_Builder_init();
  [builder setSlopWithInt:slop];
  id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute> termAtt = JreRetainedLocalValue([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(stream)) getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute_class_()]);
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt = JreRetainedLocalValue([stream getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  jint position = -1;
  [stream reset];
  while ([stream incrementToken]) {
    OrgApacheLuceneUtilBytesRef *bytes = JreRetainedLocalValue([((id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute>) nil_chk(termAtt)) getBytesRef]);
    if (self->enablePositionIncrements_) {
      position += [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt)) getPositionIncrement];
    }
    else {
      position += 1;
    }
    [builder addWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(field, bytes) withInt:position];
  }
  return [builder build];
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneUtilQueryBuilder_analyzeMultiPhraseWithNSString_withOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneUtilQueryBuilder *self, NSString *field, OrgApacheLuceneAnalysisTokenStream *stream, jint slop) {
  OrgApacheLuceneSearchMultiPhraseQuery *mpq = JreRetainedLocalValue([self newMultiPhraseQuery]);
  [((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(mpq)) setSlopWithInt:slop];
  id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute> termAtt = JreRetainedLocalValue([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(stream)) getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute_class_()]);
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt = JreRetainedLocalValue([stream getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  jint position = -1;
  id<JavaUtilList> multiTerms = create_JavaUtilArrayList_init();
  [stream reset];
  while ([stream incrementToken]) {
    jint positionIncrement = [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt)) getPositionIncrement];
    if (positionIncrement > 0 && [multiTerms size] > 0) {
      if (self->enablePositionIncrements_) {
        [mpq addWithOrgApacheLuceneIndexTermArray:[multiTerms toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]] withInt:position];
      }
      else {
        [mpq addWithOrgApacheLuceneIndexTermArray:[multiTerms toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]]];
      }
      [multiTerms clear];
    }
    position += positionIncrement;
    [multiTerms addWithId:create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(field, OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_([((id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute>) nil_chk(termAtt)) getBytesRef]))];
  }
  if (self->enablePositionIncrements_) {
    [mpq addWithOrgApacheLuceneIndexTermArray:[multiTerms toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]] withInt:position];
  }
  else {
    [mpq addWithOrgApacheLuceneIndexTermArray:[multiTerms toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]]];
  }
  return mpq;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilQueryBuilder)
