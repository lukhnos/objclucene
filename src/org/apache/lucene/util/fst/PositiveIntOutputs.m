//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/fst/PositiveIntOutputs.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/util/fst/PositiveIntOutputs.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/fst/PositiveIntOutputs must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneUtilFstPositiveIntOutputs ()

- (instancetype)init;

- (jboolean)validWithJavaLangLong:(JavaLangLong *)o;

@end

inline JavaLangLong *OrgApacheLuceneUtilFstPositiveIntOutputs_get_NO_OUTPUT(void);
static JavaLangLong *OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilFstPositiveIntOutputs, NO_OUTPUT, JavaLangLong *)

inline OrgApacheLuceneUtilFstPositiveIntOutputs *OrgApacheLuceneUtilFstPositiveIntOutputs_get_singleton(void);
static OrgApacheLuceneUtilFstPositiveIntOutputs *OrgApacheLuceneUtilFstPositiveIntOutputs_singleton;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilFstPositiveIntOutputs, singleton, OrgApacheLuceneUtilFstPositiveIntOutputs *)

__attribute__((unused)) static void OrgApacheLuceneUtilFstPositiveIntOutputs_init(OrgApacheLuceneUtilFstPositiveIntOutputs *self);

__attribute__((unused)) static OrgApacheLuceneUtilFstPositiveIntOutputs *new_OrgApacheLuceneUtilFstPositiveIntOutputs_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstPositiveIntOutputs *create_OrgApacheLuceneUtilFstPositiveIntOutputs_init(void);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(OrgApacheLuceneUtilFstPositiveIntOutputs *self, JavaLangLong *o);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFstPositiveIntOutputs)

@implementation OrgApacheLuceneUtilFstPositiveIntOutputs

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilFstPositiveIntOutputs_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgApacheLuceneUtilFstPositiveIntOutputs *)getSingleton {
  return OrgApacheLuceneUtilFstPositiveIntOutputs_getSingleton();
}

- (JavaLangLong *)commonWithId:(JavaLangLong *)output1
                        withId:(JavaLangLong *)output2 {
  JreAssert(OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output1), @"org/apache/lucene/util/fst/PositiveIntOutputs.java:48 condition failed: assert valid(output1);");
  JreAssert(OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output2), @"org/apache/lucene/util/fst/PositiveIntOutputs.java:49 condition failed: assert valid(output2);");
  if (JreObjectEqualsEquals(output1, OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT) || JreObjectEqualsEquals(output2, OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT)) {
    return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
  }
  else {
    JreAssert([((JavaLangLong *) nil_chk(output1)) longLongValue] > 0, @"org/apache/lucene/util/fst/PositiveIntOutputs.java:53 condition failed: assert output1 > 0;");
    JreAssert([((JavaLangLong *) nil_chk(output2)) longLongValue] > 0, @"org/apache/lucene/util/fst/PositiveIntOutputs.java:54 condition failed: assert output2 > 0;");
    return JavaLangLong_valueOfWithLong_(JavaLangMath_minWithLong_withLong_([output1 longLongValue], [output2 longLongValue]));
  }
}

- (JavaLangLong *)subtractWithId:(JavaLangLong *)output
                          withId:(JavaLangLong *)inc {
  JreAssert(OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output), @"org/apache/lucene/util/fst/PositiveIntOutputs.java:61 condition failed: assert valid(output);");
  JreAssert(OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, inc), @"org/apache/lucene/util/fst/PositiveIntOutputs.java:62 condition failed: assert valid(inc);");
  JreAssert([((JavaLangLong *) nil_chk(output)) longLongValue] >= [((JavaLangLong *) nil_chk(inc)) longLongValue], @"org/apache/lucene/util/fst/PositiveIntOutputs.java:63 condition failed: assert output >= inc;");
  if (JreObjectEqualsEquals(inc, OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT)) {
    return output;
  }
  else if ([output isEqual:inc]) {
    return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
  }
  else {
    return JavaLangLong_valueOfWithLong_([output longLongValue] - [inc longLongValue]);
  }
}

- (JavaLangLong *)addWithId:(JavaLangLong *)prefix
                     withId:(JavaLangLong *)output {
  JreAssert(OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, prefix), @"org/apache/lucene/util/fst/PositiveIntOutputs.java:76 condition failed: assert valid(prefix);");
  JreAssert(OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output), @"org/apache/lucene/util/fst/PositiveIntOutputs.java:77 condition failed: assert valid(output);");
  if (JreObjectEqualsEquals(prefix, OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT)) {
    return output;
  }
  else if (JreObjectEqualsEquals(output, OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT)) {
    return prefix;
  }
  else {
    return JavaLangLong_valueOfWithLong_([((JavaLangLong *) nil_chk(prefix)) longLongValue] + [((JavaLangLong *) nil_chk(output)) longLongValue]);
  }
}

- (void)writeWithId:(JavaLangLong *)output
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  JreAssert(OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, output), @"org/apache/lucene/util/fst/PositiveIntOutputs.java:89 condition failed: assert valid(output);");
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVLongWithLong:[((JavaLangLong *) nil_chk(output)) longLongValue]];
}

- (JavaLangLong *)readWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  jlong v = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVLong];
  if (v == 0) {
    return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
  }
  else {
    return JavaLangLong_valueOfWithLong_(v);
  }
}

- (jboolean)validWithJavaLangLong:(JavaLangLong *)o {
  return OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(self, o);
}

- (JavaLangLong *)getNoOutput {
  return OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT;
}

- (NSString *)outputToStringWithId:(JavaLangLong *)output {
  return [((JavaLangLong *) nil_chk(output)) description];
}

- (NSString *)description {
  return @"PositiveIntOutputs";
}

- (jlong)ramBytesUsedWithId:(JavaLangLong *)output {
  return OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithJavaLangLong_(output);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstPositiveIntOutputs;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 7, 8, 6, -1, -1, -1 },
    { NULL, "Z", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 13, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSingleton);
  methods[2].selector = @selector(commonWithId:withId:);
  methods[3].selector = @selector(subtractWithId:withId:);
  methods[4].selector = @selector(addWithId:withId:);
  methods[5].selector = @selector(writeWithId:withOrgApacheLuceneStoreDataOutput:);
  methods[6].selector = @selector(readWithOrgApacheLuceneStoreDataInput:);
  methods[7].selector = @selector(validWithJavaLangLong:);
  methods[8].selector = @selector(getNoOutput);
  methods[9].selector = @selector(outputToStringWithId:);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(ramBytesUsedWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_OUTPUT", "LJavaLangLong;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "singleton", "LOrgApacheLuceneUtilFstPositiveIntOutputs;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
  };
  static const void *ptrTable[] = { "common", "LJavaLangLong;LJavaLangLong;", "subtract", "add", "write", "LJavaLangLong;LOrgApacheLuceneStoreDataOutput;", "LJavaIoIOException;", "read", "LOrgApacheLuceneStoreDataInput;", "valid", "LJavaLangLong;", "outputToString", "toString", "ramBytesUsed", &OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT, &OrgApacheLuceneUtilFstPositiveIntOutputs_singleton, "Lorg/apache/lucene/util/fst/Outputs<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstPositiveIntOutputs = { "PositiveIntOutputs", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x11, 12, 2, -1, -1, -1, 16, -1 };
  return &_OrgApacheLuceneUtilFstPositiveIntOutputs;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFstPositiveIntOutputs class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT, new_JavaLangLong_initWithLong_(0));
    JreStrongAssignAndConsume(&OrgApacheLuceneUtilFstPositiveIntOutputs_singleton, new_OrgApacheLuceneUtilFstPositiveIntOutputs_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFstPositiveIntOutputs)
  }
}

@end

void OrgApacheLuceneUtilFstPositiveIntOutputs_init(OrgApacheLuceneUtilFstPositiveIntOutputs *self) {
  OrgApacheLuceneUtilFstOutputs_init(self);
}

OrgApacheLuceneUtilFstPositiveIntOutputs *new_OrgApacheLuceneUtilFstPositiveIntOutputs_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstPositiveIntOutputs, init)
}

OrgApacheLuceneUtilFstPositiveIntOutputs *create_OrgApacheLuceneUtilFstPositiveIntOutputs_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstPositiveIntOutputs, init)
}

OrgApacheLuceneUtilFstPositiveIntOutputs *OrgApacheLuceneUtilFstPositiveIntOutputs_getSingleton() {
  OrgApacheLuceneUtilFstPositiveIntOutputs_initialize();
  return OrgApacheLuceneUtilFstPositiveIntOutputs_singleton;
}

jboolean OrgApacheLuceneUtilFstPositiveIntOutputs_validWithJavaLangLong_(OrgApacheLuceneUtilFstPositiveIntOutputs *self, JavaLangLong *o) {
  JreAssert(o != nil, @"org/apache/lucene/util/fst/PositiveIntOutputs.java:104 condition failed: assert o != null;");
  JreAssert(JreObjectEqualsEquals(o, OrgApacheLuceneUtilFstPositiveIntOutputs_NO_OUTPUT) || [((JavaLangLong *) nil_chk(o)) longLongValue] > 0, JreStrcat("$@", @"o=", o));
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstPositiveIntOutputs)
