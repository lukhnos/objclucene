//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/fst/FST.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Comparable.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/store/ByteArrayDataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/InputStreamDataInput.h"
#include "org/apache/lucene/store/OutputStreamDataOutput.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/Constants.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/BytesStore.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/ForwardBytesReader.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/util/fst/ReverseBytesReader.h"
#include "org/apache/lucene/util/packed/GrowableWriter.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/lukhnos/portmobile/file/Files.h"
#include "org/lukhnos/portmobile/file/Path.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/fst/FST must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneUtilFstFST () {
 @public
  jlong startNode_;
  jboolean packed_;
  OrgApacheLuceneUtilPackedPackedInts_Reader *nodeRefToAddress_;
  IOSObjectArray *cachedRootArcs_;
  OrgApacheLuceneUtilPackedGrowableWriter *nodeAddress_;
  OrgApacheLuceneUtilPackedGrowableWriter *inCounts_;
  jint version__;
  jint cachedArcsBytesUsed_;
}

+ (jboolean)flagWithInt:(jint)flags
                withInt:(jint)bit;

- (jlong)ramBytesUsedWithOrgApacheLuceneUtilFstFST_ArcArray:(IOSObjectArray *)arcs;

- (jlong)getNodeAddressWithLong:(jlong)node;

- (void)cacheRootArcs;

- (void)writeLabelWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                             withInt:(jint)v;

- (jlong)readUnpackedNodeTargetWithOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg;

- (jboolean)assertRootCachedArcWithInt:(jint)label
     withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)cachedArc;

/*!
 @brief Finds an arc leaving the incoming arc, replacing the arc in place.
 This returns null if the arc was not found, else the incoming arc.
 */
- (OrgApacheLuceneUtilFstFST_Arc *)findTargetArcWithInt:(jint)labelToMatch
                      withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                      withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
              withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg
                                            withBoolean:(jboolean)useRootArcCache;

- (void)seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg;

/*!
 @brief Nodes will be expanded if their depth (distance from the root node) is 
 &lt;= this value and their number of arcs is &gt;=
  <code>FIXED_ARRAY_NUM_ARCS_SHALLOW</code>.
 <p>
  Fixed array consumes more RAM but enables binary search on the arcs
  (instead of a linear scan) on lookup by arc label.
 @return <code>true</code> if <code>node</code> should be stored in an
          expanded (array) form.
 - seealso: #FIXED_ARRAY_NUM_ARCS_DEEP
 - seealso: Builder.UnCompiledNode#depth
 */
- (jboolean)shouldExpandWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
         withOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node;

- (instancetype)initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE:(OrgApacheLuceneUtilFstFST_INPUT_TYPE *)inputType
                           withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs
                                                     withInt:(jint)bytesPageBits;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, nodeRefToAddress_, OrgApacheLuceneUtilPackedPackedInts_Reader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, cachedRootArcs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, nodeAddress_, OrgApacheLuceneUtilPackedGrowableWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstFST, inCounts_, OrgApacheLuceneUtilPackedGrowableWriter *)

inline jlong OrgApacheLuceneUtilFstFST_get_BASE_RAM_BYTES_USED(void);
static jlong OrgApacheLuceneUtilFstFST_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilFstFST, BASE_RAM_BYTES_USED, jlong)

inline jlong OrgApacheLuceneUtilFstFST_get_ARC_SHALLOW_RAM_BYTES_USED(void);
static jlong OrgApacheLuceneUtilFstFST_ARC_SHALLOW_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilFstFST, ARC_SHALLOW_RAM_BYTES_USED, jlong)

inline jint OrgApacheLuceneUtilFstFST_get_BIT_TARGET_DELTA(void);
#define OrgApacheLuceneUtilFstFST_BIT_TARGET_DELTA 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, BIT_TARGET_DELTA, jint)

inline jbyte OrgApacheLuceneUtilFstFST_get_ARCS_AS_FIXED_ARRAY(void);
#define OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, ARCS_AS_FIXED_ARRAY, jbyte)

inline NSString *OrgApacheLuceneUtilFstFST_get_FILE_FORMAT_NAME(void);
static NSString *OrgApacheLuceneUtilFstFST_FILE_FORMAT_NAME = @"FST";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilFstFST, FILE_FORMAT_NAME, NSString *)

inline jint OrgApacheLuceneUtilFstFST_get_VERSION_START(void);
#define OrgApacheLuceneUtilFstFST_VERSION_START 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_START, jint)

/*!
 @brief Changed numBytesPerArc for array'd case from byte to int.
 */
inline jint OrgApacheLuceneUtilFstFST_get_VERSION_INT_NUM_BYTES_PER_ARC(void);
#define OrgApacheLuceneUtilFstFST_VERSION_INT_NUM_BYTES_PER_ARC 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_INT_NUM_BYTES_PER_ARC, jint)

/*!
 @brief Write BYTE2 labels as 2-byte short, not vInt.
 */
inline jint OrgApacheLuceneUtilFstFST_get_VERSION_SHORT_BYTE2_LABELS(void);
#define OrgApacheLuceneUtilFstFST_VERSION_SHORT_BYTE2_LABELS 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_SHORT_BYTE2_LABELS, jint)

/*!
 @brief Added optional packed format.
 */
inline jint OrgApacheLuceneUtilFstFST_get_VERSION_PACKED(void);
#define OrgApacheLuceneUtilFstFST_VERSION_PACKED 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_PACKED, jint)

/*!
 @brief Changed from int to vInt for encoding arc targets.
 Also changed maxBytesPerArc from int to vInt in the array case.
 */
inline jint OrgApacheLuceneUtilFstFST_get_VERSION_VINT_TARGET(void);
#define OrgApacheLuceneUtilFstFST_VERSION_VINT_TARGET 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_VINT_TARGET, jint)

/*!
 @brief Don't store arcWithOutputCount anymore
 */
inline jint OrgApacheLuceneUtilFstFST_get_VERSION_NO_NODE_ARC_COUNTS(void);
#define OrgApacheLuceneUtilFstFST_VERSION_NO_NODE_ARC_COUNTS 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_NO_NODE_ARC_COUNTS, jint)

inline jint OrgApacheLuceneUtilFstFST_get_VERSION_CURRENT(void);
#define OrgApacheLuceneUtilFstFST_VERSION_CURRENT 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, VERSION_CURRENT, jint)

inline jlong OrgApacheLuceneUtilFstFST_get_FINAL_END_NODE(void);
#define OrgApacheLuceneUtilFstFST_FINAL_END_NODE -1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, FINAL_END_NODE, jlong)

inline jlong OrgApacheLuceneUtilFstFST_get_NON_FINAL_END_NODE(void);
#define OrgApacheLuceneUtilFstFST_NON_FINAL_END_NODE 0LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilFstFST, NON_FINAL_END_NODE, jlong)

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(jint flags, jint bit);

__attribute__((unused)) static jlong OrgApacheLuceneUtilFstFST_ramBytesUsedWithOrgApacheLuceneUtilFstFST_ArcArray_(OrgApacheLuceneUtilFstFST *self, IOSObjectArray *arcs);

__attribute__((unused)) static jlong OrgApacheLuceneUtilFstFST_getNodeAddressWithLong_(OrgApacheLuceneUtilFstFST *self, jlong node);

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_cacheRootArcs(OrgApacheLuceneUtilFstFST *self);

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_writeLabelWithOrgApacheLuceneStoreDataOutput_withInt_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneStoreDataOutput *outArg, jint v);

__attribute__((unused)) static jlong OrgApacheLuceneUtilFstFST_readUnpackedNodeTargetWithOrgApacheLuceneUtilFstFST_BytesReader_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_BytesReader *inArg);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFstFST_assertRootCachedArcWithInt_withOrgApacheLuceneUtilFstFST_Arc_(OrgApacheLuceneUtilFstFST *self, jint label, OrgApacheLuceneUtilFstFST_Arc *cachedArc);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneUtilFstFST_findTargetArcWithInt_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_BytesReader_withBoolean_(OrgApacheLuceneUtilFstFST *self, jint labelToMatch, OrgApacheLuceneUtilFstFST_Arc *follow, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilFstFST_BytesReader *inArg, jboolean useRootArcCache);

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_BytesReader *inArg);

__attribute__((unused)) static jboolean OrgApacheLuceneUtilFstFST_shouldExpandWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstBuilder *builder, OrgApacheLuceneUtilFstBuilder_UnCompiledNode *node);

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs, jint bytesPageBits);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST *new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs, jint bytesPageBits) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstFST *create_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs, jint bytesPageBits);

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_INPUT_TYPE_initWithNSString_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *self, NSString *__name, jint __ordinal);

@interface OrgApacheLuceneUtilFstFST_NodeAndInCount : NSObject < JavaLangComparable > {
 @public
  jint node_;
  jint count_;
}

- (instancetype)initWithInt:(jint)node
                    withInt:(jint)count;

- (jint)compareToWithId:(OrgApacheLuceneUtilFstFST_NodeAndInCount *)other;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstFST_NodeAndInCount)

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_NodeAndInCount_initWithInt_withInt_(OrgApacheLuceneUtilFstFST_NodeAndInCount *self, jint node, jint count);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_NodeAndInCount *new_OrgApacheLuceneUtilFstFST_NodeAndInCount_initWithInt_withInt_(jint node, jint count) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_NodeAndInCount *create_OrgApacheLuceneUtilFstFST_NodeAndInCount_initWithInt_withInt_(jint node, jint count);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstFST_NodeAndInCount)

@interface OrgApacheLuceneUtilFstFST_NodeQueue : OrgApacheLuceneUtilPriorityQueue

- (instancetype)initWithInt:(jint)topN;

- (jboolean)lessThanWithId:(OrgApacheLuceneUtilFstFST_NodeAndInCount *)a
                    withId:(OrgApacheLuceneUtilFstFST_NodeAndInCount *)b;

- (OrgApacheLuceneUtilFstFST_NodeAndInCount *)pop;

- (OrgApacheLuceneUtilFstFST_NodeAndInCount *)top;

- (OrgApacheLuceneUtilFstFST_NodeAndInCount *)insertWithOverflowWithId:(OrgApacheLuceneUtilFstFST_NodeAndInCount *)arg0;

- (OrgApacheLuceneUtilFstFST_NodeAndInCount *)addWithId:(OrgApacheLuceneUtilFstFST_NodeAndInCount *)arg0;

- (OrgApacheLuceneUtilFstFST_NodeAndInCount *)getSentinelObject;

- (OrgApacheLuceneUtilFstFST_NodeAndInCount *)updateTopWithId:(OrgApacheLuceneUtilFstFST_NodeAndInCount *)arg0;

- (OrgApacheLuceneUtilFstFST_NodeAndInCount *)updateTop;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstFST_NodeQueue)

__attribute__((unused)) static void OrgApacheLuceneUtilFstFST_NodeQueue_initWithInt_(OrgApacheLuceneUtilFstFST_NodeQueue *self, jint topN);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_NodeQueue *new_OrgApacheLuceneUtilFstFST_NodeQueue_initWithInt_(jint topN) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_NodeQueue *create_OrgApacheLuceneUtilFstFST_NodeQueue_initWithInt_(jint topN);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstFST_NodeQueue)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFstFST)

jint OrgApacheLuceneUtilFstFST_DEFAULT_MAX_BLOCK_BITS;

@implementation OrgApacheLuceneUtilFstFST

+ (jint)BIT_FINAL_ARC {
  return OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC;
}

+ (jint)BIT_LAST_ARC {
  return OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
}

+ (jint)BIT_TARGET_NEXT {
  return OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT;
}

+ (jint)BIT_STOP_NODE {
  return OrgApacheLuceneUtilFstFST_BIT_STOP_NODE;
}

+ (jint)BIT_ARC_HAS_OUTPUT {
  return OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT;
}

+ (jint)BIT_ARC_HAS_FINAL_OUTPUT {
  return OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT;
}

+ (jint)FIXED_ARRAY_SHALLOW_DISTANCE {
  return OrgApacheLuceneUtilFstFST_FIXED_ARRAY_SHALLOW_DISTANCE;
}

+ (jint)FIXED_ARRAY_NUM_ARCS_SHALLOW {
  return OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_SHALLOW;
}

+ (jint)FIXED_ARRAY_NUM_ARCS_DEEP {
  return OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_DEEP;
}

+ (jint)END_LABEL {
  return OrgApacheLuceneUtilFstFST_END_LABEL;
}

+ (jint)DEFAULT_MAX_BLOCK_BITS {
  return OrgApacheLuceneUtilFstFST_DEFAULT_MAX_BLOCK_BITS;
}

+ (jboolean)flagWithInt:(jint)flags
                withInt:(jint)bit {
  return OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, bit);
}

- (instancetype)initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE:(OrgApacheLuceneUtilFstFST_INPUT_TYPE *)inputType
                           withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs
                                                 withBoolean:(jboolean)willPackFST
                                                   withFloat:(jfloat)acceptableOverheadRatio
                                                     withInt:(jint)bytesPageBits {
  OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withInt_(self, inputType, outputs, willPackFST, acceptableOverheadRatio, bytesPageBits);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                    withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs {
  OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(self, inArg, outputs);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                    withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs
                                              withInt:(jint)maxBlockBits {
  OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_withInt_(self, inArg, outputs, maxBlockBits);
  return self;
}

- (OrgApacheLuceneUtilFstFST_INPUT_TYPE *)getInputType {
  return inputType_;
}

- (jlong)ramBytesUsedWithOrgApacheLuceneUtilFstFST_ArcArray:(IOSObjectArray *)arcs {
  return OrgApacheLuceneUtilFstFST_ramBytesUsedWithOrgApacheLuceneUtilFstFST_ArcArray_(self, arcs);
}

- (jlong)ramBytesUsed {
  jlong size = OrgApacheLuceneUtilFstFST_BASE_RAM_BYTES_USED;
  if (bytesArray_ != nil) {
    size += bytesArray_->size_;
  }
  else {
    size += [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(bytes_)) ramBytesUsed];
  }
  if (packed_) {
    size += [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(nodeRefToAddress_)) ramBytesUsed];
  }
  else if (nodeAddress_ != nil) {
    size += [nodeAddress_ ramBytesUsed];
    size += [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(inCounts_)) ramBytesUsed];
  }
  size += cachedArcsBytesUsed_;
  return size;
}

- (id<JavaUtilCollection>)getChildResources {
  id<JavaUtilList> resources = create_JavaUtilArrayList_init();
  if (packed_) {
    [resources addWithId:OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"node ref to address", nodeRefToAddress_)];
  }
  else if (nodeAddress_ != nil) {
    [resources addWithId:OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"node addresses", nodeAddress_)];
    [resources addWithId:OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"in counts", inCounts_)];
  }
  return resources;
}

- (NSString *)description {
  return JreStrcat("$$@$@$Z", [[self java_getClass] getSimpleName], @"(input=", inputType_, @",output=", outputs_, @",packed=", packed_);
}

- (void)finishWithLong:(jlong)newStartNode {
  JreAssert(newStartNode <= [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(bytes_)) getPosition], @"org/apache/lucene/util/fst/FST.java:456 condition failed: assert newStartNode <= bytes.getPosition();");
  if (startNode_ != -1) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"already finished");
  }
  if (newStartNode == OrgApacheLuceneUtilFstFST_FINAL_END_NODE && emptyOutput_ != nil) {
    newStartNode = 0;
  }
  startNode_ = newStartNode;
  [bytes_ finish];
  OrgApacheLuceneUtilFstFST_cacheRootArcs(self);
}

- (jlong)getNodeAddressWithLong:(jlong)node {
  return OrgApacheLuceneUtilFstFST_getNodeAddressWithLong_(self, node);
}

- (void)cacheRootArcs {
  OrgApacheLuceneUtilFstFST_cacheRootArcs(self);
}

- (id)getEmptyOutput {
  return emptyOutput_;
}

- (void)setEmptyOutputWithId:(id)v {
  if (emptyOutput_ != nil) {
    JreStrongAssign(&emptyOutput_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) mergeWithId:emptyOutput_ withId:v]);
  }
  else {
    JreStrongAssign(&emptyOutput_, v);
  }
}

- (void)saveWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  if (startNode_ == -1) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"call finish first");
  }
  if (nodeAddress_ != nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"cannot save an FST pre-packed FST; it must first be packed");
  }
  if (packed_ && !([nodeRefToAddress_ isKindOfClass:[OrgApacheLuceneUtilPackedPackedInts_Mutable class]])) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"cannot save a FST which has been loaded from disk ");
  }
  OrgApacheLuceneCodecsCodecUtil_writeHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_(outArg, OrgApacheLuceneUtilFstFST_FILE_FORMAT_NAME, OrgApacheLuceneUtilFstFST_VERSION_CURRENT);
  if (packed_) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) 1];
  }
  else {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) 0];
  }
  if (emptyOutput_ != nil) {
    [outArg writeByteWithByte:(jbyte) 1];
    OrgApacheLuceneStoreRAMOutputStream *ros = create_OrgApacheLuceneStoreRAMOutputStream_init();
    [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) writeFinalOutputWithId:emptyOutput_ withOrgApacheLuceneStoreDataOutput:ros];
    IOSByteArray *emptyOutputBytes = [IOSByteArray arrayWithLength:(jint) [ros getFilePointer]];
    [ros writeToWithByteArray:emptyOutputBytes withInt:0];
    if (!packed_) {
      jint stopAt = JreIntDiv(emptyOutputBytes->size_, 2);
      jint upto = 0;
      while (upto < stopAt) {
        jbyte b = IOSByteArray_Get(emptyOutputBytes, upto);
        *IOSByteArray_GetRef(emptyOutputBytes, upto) = IOSByteArray_Get(emptyOutputBytes, emptyOutputBytes->size_ - upto - 1);
        *IOSByteArray_GetRef(emptyOutputBytes, emptyOutputBytes->size_ - upto - 1) = b;
        upto++;
      }
    }
    [outArg writeVIntWithInt:emptyOutputBytes->size_];
    [outArg writeBytesWithByteArray:emptyOutputBytes withInt:0 withInt:emptyOutputBytes->size_];
  }
  else {
    [outArg writeByteWithByte:(jbyte) 0];
  }
  jbyte t;
  if (inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1)) {
    t = 0;
  }
  else if (inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2)) {
    t = 1;
  }
  else {
    t = 2;
  }
  [outArg writeByteWithByte:t];
  if (packed_) {
    [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(((OrgApacheLuceneUtilPackedPackedInts_Mutable *) cast_chk(nodeRefToAddress_, [OrgApacheLuceneUtilPackedPackedInts_Mutable class])))) saveWithOrgApacheLuceneStoreDataOutput:outArg];
  }
  [outArg writeVLongWithLong:startNode_];
  if (bytes_ != nil) {
    jlong numBytes = [bytes_ getPosition];
    [outArg writeVLongWithLong:numBytes];
    [bytes_ writeToWithOrgApacheLuceneStoreDataOutput:outArg];
  }
  else {
    JreAssert(bytesArray_ != nil, @"org/apache/lucene/util/fst/FST.java:590 condition failed: assert bytesArray != null;");
    [outArg writeVLongWithLong:((IOSByteArray *) nil_chk(bytesArray_))->size_];
    [outArg writeBytesWithByteArray:bytesArray_ withInt:0 withInt:bytesArray_->size_];
  }
}

- (void)saveWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path {
  JavaIoOutputStream *os = create_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(OrgLukhnosPortmobileFileFiles_newOutputStreamWithOrgLukhnosPortmobileFilePath_(path));
  JavaLangThrowable *__primaryException1 = nil;
  @try {
    [self saveWithOrgApacheLuceneStoreDataOutput:create_OrgApacheLuceneStoreOutputStreamDataOutput_initWithJavaIoOutputStream_(os)];
  }
  @catch (JavaLangThrowable *e) {
    __primaryException1 = e;
    @throw e;
  }
  @finally {
    if (os != nil) {
      if (__primaryException1 != nil) {
        @try {
          [os close];
        }
        @catch (JavaLangThrowable *e) {
          [__primaryException1 addSuppressedWithJavaLangThrowable:e];
        }
      }
      else {
        [os close];
      }
    }
  }
}

+ (OrgApacheLuceneUtilFstFST *)readWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path
                                  withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs {
  return OrgApacheLuceneUtilFstFST_readWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneUtilFstOutputs_(path, outputs);
}

- (void)writeLabelWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
                                             withInt:(jint)v {
  OrgApacheLuceneUtilFstFST_writeLabelWithOrgApacheLuceneStoreDataOutput_withInt_(self, outArg, v);
}

- (jint)readLabelWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  jint v;
  if (inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1)) {
    v = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readByte] & (jint) 0xFF;
  }
  else if (inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2)) {
    v = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readShort] & (jint) 0xFFFF;
  }
  else {
    v = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  }
  return v;
}

+ (jboolean)targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  return OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(arc);
}

- (jlong)addNodeWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
 withOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)nodeIn {
  id NO_OUTPUT = JreRetainedLocalValue([((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) getNoOutput]);
  if (((OrgApacheLuceneUtilFstBuilder_UnCompiledNode *) nil_chk(nodeIn))->numArcs_ == 0) {
    if (nodeIn->isFinal_) {
      return OrgApacheLuceneUtilFstFST_FINAL_END_NODE;
    }
    else {
      return OrgApacheLuceneUtilFstFST_NON_FINAL_END_NODE;
    }
  }
  jlong startAddress = [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(((OrgApacheLuceneUtilFstBuilder *) nil_chk(builder))->bytes_)) getPosition];
  jboolean doFixedArray = OrgApacheLuceneUtilFstFST_shouldExpandWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(self, builder, nodeIn);
  if (doFixedArray) {
    if (((IOSIntArray *) nil_chk(builder->reusedBytesPerArc_))->size_ < nodeIn->numArcs_) {
      JreStrongAssignAndConsume(&builder->reusedBytesPerArc_, [IOSIntArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(nodeIn->numArcs_, 1)]);
    }
  }
  builder->arcCount_ += nodeIn->numArcs_;
  jint lastArc = nodeIn->numArcs_ - 1;
  jlong lastArcStart = [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) getPosition];
  jint maxBytesPerArc = 0;
  for (jint arcIdx = 0; arcIdx < nodeIn->numArcs_; arcIdx++) {
    OrgApacheLuceneUtilFstBuilder_Arc *arc = IOSObjectArray_Get(nil_chk(nodeIn->arcs_), arcIdx);
    OrgApacheLuceneUtilFstBuilder_CompiledNode *target = (OrgApacheLuceneUtilFstBuilder_CompiledNode *) cast_chk(((OrgApacheLuceneUtilFstBuilder_Arc *) nil_chk(arc))->target_, [OrgApacheLuceneUtilFstBuilder_CompiledNode class]);
    jint flags = 0;
    if (arcIdx == lastArc) {
      flags += OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    }
    if (builder->lastFrozenNode_ == ((OrgApacheLuceneUtilFstBuilder_CompiledNode *) nil_chk(target))->node_ && !doFixedArray) {
      flags += OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT;
    }
    if (arc->isFinal_) {
      flags += OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC;
      if (!JreObjectEqualsEquals(arc->nextFinalOutput_, NO_OUTPUT)) {
        flags += OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT;
      }
    }
    else {
      JreAssert(JreObjectEqualsEquals(arc->nextFinalOutput_, NO_OUTPUT), @"org/apache/lucene/util/fst/FST.java:702 condition failed: assert arc.nextFinalOutput == NO_OUTPUT;");
    }
    jboolean targetHasArcs = target->node_ > 0;
    if (!targetHasArcs) {
      flags += OrgApacheLuceneUtilFstFST_BIT_STOP_NODE;
    }
    else if (inCounts_ != nil) {
      [inCounts_ setWithInt:(jint) target->node_ withLong:[inCounts_ getWithInt:(jint) target->node_] + 1];
    }
    if (!JreObjectEqualsEquals(arc->output_, NO_OUTPUT)) {
      flags += OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT;
    }
    [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) writeByteWithByte:(jbyte) flags];
    OrgApacheLuceneUtilFstFST_writeLabelWithOrgApacheLuceneStoreDataOutput_withInt_(self, builder->bytes_, arc->label_);
    if (!JreObjectEqualsEquals(arc->output_, NO_OUTPUT)) {
      [outputs_ writeWithId:arc->output_ withOrgApacheLuceneStoreDataOutput:builder->bytes_];
    }
    if (!JreObjectEqualsEquals(arc->nextFinalOutput_, NO_OUTPUT)) {
      [outputs_ writeFinalOutputWithId:arc->nextFinalOutput_ withOrgApacheLuceneStoreDataOutput:builder->bytes_];
    }
    if (targetHasArcs && (flags & OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT) == 0) {
      JreAssert(target->node_ > 0, @"org/apache/lucene/util/fst/FST.java:733 condition failed: assert target.node > 0;");
      [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) writeVLongWithLong:target->node_];
    }
    if (doFixedArray) {
      *IOSIntArray_GetRef(nil_chk(builder->reusedBytesPerArc_), arcIdx) = (jint) ([((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) getPosition] - lastArcStart);
      lastArcStart = [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) getPosition];
      maxBytesPerArc = JavaLangMath_maxWithInt_withInt_(maxBytesPerArc, IOSIntArray_Get(nil_chk(builder->reusedBytesPerArc_), arcIdx));
    }
  }
  if (doFixedArray) {
    jint MAX_HEADER_SIZE = 11;
    JreAssert(maxBytesPerArc > 0, @"org/apache/lucene/util/fst/FST.java:771 condition failed: assert maxBytesPerArc > 0;");
    IOSByteArray *header = [IOSByteArray arrayWithLength:MAX_HEADER_SIZE];
    OrgApacheLuceneStoreByteArrayDataOutput *bad = create_OrgApacheLuceneStoreByteArrayDataOutput_initWithByteArray_(header);
    [bad writeByteWithByte:OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY];
    [bad writeVIntWithInt:nodeIn->numArcs_];
    [bad writeVIntWithInt:maxBytesPerArc];
    jint headerLen = [bad getPosition];
    jlong fixedArrayStart = startAddress + headerLen;
    jlong srcPos = [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) getPosition];
    jlong destPos = fixedArrayStart + nodeIn->numArcs_ * maxBytesPerArc;
    JreAssert(destPos >= srcPos, @"org/apache/lucene/util/fst/FST.java:791 condition failed: assert destPos >= srcPos;");
    if (destPos > srcPos) {
      [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) skipBytesWithInt:(jint) (destPos - srcPos)];
      for (jint arcIdx = nodeIn->numArcs_ - 1; arcIdx >= 0; arcIdx--) {
        destPos -= maxBytesPerArc;
        srcPos -= IOSIntArray_Get(nil_chk(builder->reusedBytesPerArc_), arcIdx);
        if (srcPos != destPos) {
          JreAssert(destPos > srcPos, JreStrcat("$J$J$I$I$I$I", @"destPos=", destPos, @" srcPos=", srcPos, @" arcIdx=", arcIdx, @" maxBytesPerArc=", maxBytesPerArc, @" reusedBytesPerArc[arcIdx]=", IOSIntArray_Get(builder->reusedBytesPerArc_, arcIdx), @" nodeIn.numArcs=", nodeIn->numArcs_));
          [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) copyBytesWithLong:srcPos withLong:destPos withInt:IOSIntArray_Get(builder->reusedBytesPerArc_, arcIdx)];
        }
      }
    }
    [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) writeBytesWithLong:startAddress withByteArray:header withInt:0 withInt:headerLen];
  }
  jlong thisNodeAddress = [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) getPosition] - 1;
  [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) reverseWithLong:startAddress withLong:thisNodeAddress];
  if (nodeAddress_ != nil && builder->nodeCount_ == JavaLangInteger_MAX_VALUE) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"cannot create a packed FST with more than 2.1 billion nodes");
  }
  builder->nodeCount_++;
  jlong node;
  if (nodeAddress_ != nil) {
    if ((jint) builder->nodeCount_ == [nodeAddress_ size]) {
      JreStrongAssign(&nodeAddress_, [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(nodeAddress_)) resizeWithInt:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_([nodeAddress_ size] + 1, [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(nodeAddress_)) getBitsPerValue])]);
      JreStrongAssign(&inCounts_, [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(inCounts_)) resizeWithInt:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_([inCounts_ size] + 1, [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(inCounts_)) getBitsPerValue])]);
    }
    [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(nodeAddress_)) setWithInt:(jint) builder->nodeCount_ withLong:thisNodeAddress];
    node = builder->nodeCount_;
  }
  else {
    node = thisNodeAddress;
  }
  return node;
}

- (OrgApacheLuceneUtilFstFST_Arc *)getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc {
  id NO_OUTPUT = JreRetainedLocalValue([((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) getNoOutput]);
  if (emptyOutput_ != nil) {
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC | OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    JreStrongAssign(&arc->nextFinalOutput_, emptyOutput_);
    if (!JreObjectEqualsEquals(emptyOutput_, NO_OUTPUT)) {
      arc->flags_ |= OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT;
    }
  }
  else {
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    JreStrongAssign(&arc->nextFinalOutput_, NO_OUTPUT);
  }
  JreStrongAssign(&arc->output_, NO_OUTPUT);
  arc->target_ = startNode_;
  return arc;
}

- (OrgApacheLuceneUtilFstFST_Arc *)readLastTargetArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                                                    withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                            withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  if (!OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(follow)) {
    JreAssert([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow)) isFinal], @"org/apache/lucene/util/fst/FST.java:873 condition failed: assert follow.isFinal();");
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ = OrgApacheLuceneUtilFstFST_END_LABEL;
    arc->target_ = OrgApacheLuceneUtilFstFST_FINAL_END_NODE;
    JreStrongAssign(&arc->output_, follow->nextFinalOutput_);
    arc->flags_ = OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    return arc;
  }
  else {
    [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:OrgApacheLuceneUtilFstFST_getNodeAddressWithLong_(self, ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow))->target_)];
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->node_ = follow->target_;
    jbyte b = [inArg readByte];
    if (b == OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY) {
      arc->numArcs_ = [inArg readVInt];
      if (packed_ || version__ >= OrgApacheLuceneUtilFstFST_VERSION_VINT_TARGET) {
        arc->bytesPerArc_ = [inArg readVInt];
      }
      else {
        arc->bytesPerArc_ = [inArg readInt];
      }
      arc->posArcsStart_ = [inArg getPosition];
      arc->arcIdx_ = arc->numArcs_ - 2;
    }
    else {
      arc->flags_ = b;
      arc->bytesPerArc_ = 0;
      while (![arc isLast]) {
        [self readLabelWithOrgApacheLuceneStoreDataInput:inArg];
        if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT]) {
          [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) skipOutputWithOrgApacheLuceneStoreDataInput:inArg];
        }
        if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT]) {
          [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) skipFinalOutputWithOrgApacheLuceneStoreDataInput:inArg];
        }
        if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_STOP_NODE]) {
        }
        else if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT]) {
        }
        else if (packed_) {
          [inArg readVLong];
        }
        else {
          OrgApacheLuceneUtilFstFST_readUnpackedNodeTargetWithOrgApacheLuceneUtilFstFST_BytesReader_(self, inArg);
        }
        arc->flags_ = [inArg readByte];
      }
      [inArg skipBytesWithLong:-1];
      arc->nextArc_ = [inArg getPosition];
    }
    [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
    JreAssert([arc isLast], @"org/apache/lucene/util/fst/FST.java:922 condition failed: assert arc.isLast();");
    return arc;
  }
}

- (jlong)readUnpackedNodeTargetWithOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  return OrgApacheLuceneUtilFstFST_readUnpackedNodeTargetWithOrgApacheLuceneUtilFstFST_BytesReader_(self, inArg);
}

- (OrgApacheLuceneUtilFstFST_Arc *)readFirstTargetArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                                                     withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                             withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  if ([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow)) isFinal]) {
    ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ = OrgApacheLuceneUtilFstFST_END_LABEL;
    JreStrongAssign(&arc->output_, follow->nextFinalOutput_);
    arc->flags_ = OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC;
    if (follow->target_ <= 0) {
      arc->flags_ |= OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
    }
    else {
      arc->node_ = follow->target_;
      arc->nextArc_ = follow->target_;
    }
    arc->target_ = OrgApacheLuceneUtilFstFST_FINAL_END_NODE;
    return arc;
  }
  else {
    return [self readFirstRealTargetArcWithLong:follow->target_ withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
  }
}

- (OrgApacheLuceneUtilFstFST_Arc *)readFirstRealTargetArcWithLong:(jlong)node
                                withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                        withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  jlong address = OrgApacheLuceneUtilFstFST_getNodeAddressWithLong_(self, node);
  [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:address];
  ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->node_ = node;
  if ([inArg readByte] == OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY) {
    arc->numArcs_ = [inArg readVInt];
    if (packed_ || version__ >= OrgApacheLuceneUtilFstFST_VERSION_VINT_TARGET) {
      arc->bytesPerArc_ = [inArg readVInt];
    }
    else {
      arc->bytesPerArc_ = [inArg readInt];
    }
    arc->arcIdx_ = -1;
    arc->nextArc_ = arc->posArcsStart_ = [inArg getPosition];
  }
  else {
    arc->nextArc_ = address;
    arc->bytesPerArc_ = 0;
  }
  return [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
}

- (jboolean)isExpandedTargetWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                    withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  if (!OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(follow)) {
    return false;
  }
  else {
    [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:OrgApacheLuceneUtilFstFST_getNodeAddressWithLong_(self, ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow))->target_)];
    return [inArg readByte] == OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY;
  }
}

- (OrgApacheLuceneUtilFstFST_Arc *)readNextArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                      withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->label_ == OrgApacheLuceneUtilFstFST_END_LABEL) {
    if (arc->nextArc_ <= 0) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"cannot readNextArc when arc.isLast()=true");
    }
    return [self readFirstRealTargetArcWithLong:arc->nextArc_ withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
  }
  else {
    return [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
  }
}

- (jint)readNextArcLabelWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  JreAssert(![((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isLast], @"org/apache/lucene/util/fst/FST.java:1027 condition failed: assert !arc.isLast();");
  if (arc->label_ == OrgApacheLuceneUtilFstFST_END_LABEL) {
    jlong pos = OrgApacheLuceneUtilFstFST_getNodeAddressWithLong_(self, arc->nextArc_);
    [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:pos];
    jbyte b = [inArg readByte];
    if (b == OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY) {
      [inArg readVInt];
      if (packed_ || version__ >= OrgApacheLuceneUtilFstFST_VERSION_VINT_TARGET) {
        [inArg readVInt];
      }
      else {
        [inArg readInt];
      }
    }
    else {
      [inArg setPositionWithLong:pos];
    }
  }
  else {
    if (arc->bytesPerArc_ != 0) {
      [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:arc->posArcsStart_];
      [inArg skipBytesWithLong:(1 + arc->arcIdx_) * arc->bytesPerArc_];
    }
    else {
      [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:arc->nextArc_];
    }
  }
  [inArg readByte];
  return [self readLabelWithOrgApacheLuceneStoreDataInput:inArg];
}

- (OrgApacheLuceneUtilFstFST_Arc *)readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                          withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->bytesPerArc_ != 0) {
    arc->arcIdx_++;
    JreAssert(arc->arcIdx_ < arc->numArcs_, @"org/apache/lucene/util/fst/FST.java:1078 condition failed: assert arc.arcIdx < arc.numArcs;");
    [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:arc->posArcsStart_];
    [inArg skipBytesWithLong:arc->arcIdx_ * arc->bytesPerArc_];
  }
  else {
    [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:arc->nextArc_];
  }
  arc->flags_ = [inArg readByte];
  arc->label_ = [self readLabelWithOrgApacheLuceneStoreDataInput:inArg];
  if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT]) {
    JreStrongAssign(&arc->output_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) readWithOrgApacheLuceneStoreDataInput:inArg]);
  }
  else {
    JreStrongAssign(&arc->output_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) getNoOutput]);
  }
  if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT]) {
    JreStrongAssign(&arc->nextFinalOutput_, [outputs_ readFinalOutputWithOrgApacheLuceneStoreDataInput:inArg]);
  }
  else {
    JreStrongAssign(&arc->nextFinalOutput_, [outputs_ getNoOutput]);
  }
  if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_STOP_NODE]) {
    if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC]) {
      arc->target_ = OrgApacheLuceneUtilFstFST_FINAL_END_NODE;
    }
    else {
      arc->target_ = OrgApacheLuceneUtilFstFST_NON_FINAL_END_NODE;
    }
    arc->nextArc_ = [inArg getPosition];
  }
  else if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT]) {
    arc->nextArc_ = [inArg getPosition];
    if (nodeAddress_ == nil) {
      if (![arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_LAST_ARC]) {
        if (arc->bytesPerArc_ == 0) {
          OrgApacheLuceneUtilFstFST_seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader_(self, inArg);
        }
        else {
          [inArg setPositionWithLong:arc->posArcsStart_];
          [inArg skipBytesWithLong:arc->bytesPerArc_ * arc->numArcs_];
        }
      }
      arc->target_ = [inArg getPosition];
    }
    else {
      arc->target_ = arc->node_ - 1;
      JreAssert(arc->target_ > 0, @"org/apache/lucene/util/fst/FST.java:1124 condition failed: assert arc.target > 0;");
    }
  }
  else {
    if (packed_) {
      jlong pos = [inArg getPosition];
      jlong code = [inArg readVLong];
      if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_TARGET_DELTA]) {
        arc->target_ = pos + code;
      }
      else if (code < [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(nodeRefToAddress_)) size]) {
        arc->target_ = [((OrgApacheLuceneUtilPackedPackedInts_Reader *) nil_chk(nodeRefToAddress_)) getWithInt:(jint) code];
      }
      else {
        arc->target_ = code;
      }
    }
    else {
      arc->target_ = OrgApacheLuceneUtilFstFST_readUnpackedNodeTargetWithOrgApacheLuceneUtilFstFST_BytesReader_(self, inArg);
    }
    arc->nextArc_ = [inArg getPosition];
  }
  return arc;
}

- (jboolean)assertRootCachedArcWithInt:(jint)label
     withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)cachedArc {
  return OrgApacheLuceneUtilFstFST_assertRootCachedArcWithInt_withOrgApacheLuceneUtilFstFST_Arc_(self, label, cachedArc);
}

- (OrgApacheLuceneUtilFstFST_Arc *)findTargetArcWithInt:(jint)labelToMatch
                      withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                      withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
              withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  return OrgApacheLuceneUtilFstFST_findTargetArcWithInt_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_BytesReader_withBoolean_(self, labelToMatch, follow, arc, inArg, true);
}

- (OrgApacheLuceneUtilFstFST_Arc *)findTargetArcWithInt:(jint)labelToMatch
                      withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                      withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
              withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg
                                            withBoolean:(jboolean)useRootArcCache {
  return OrgApacheLuceneUtilFstFST_findTargetArcWithInt_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_BytesReader_withBoolean_(self, labelToMatch, follow, arc, inArg, useRootArcCache);
}

- (void)seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  OrgApacheLuceneUtilFstFST_seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader_(self, inArg);
}

- (jboolean)shouldExpandWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
         withOrgApacheLuceneUtilFstBuilder_UnCompiledNode:(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *)node {
  return OrgApacheLuceneUtilFstFST_shouldExpandWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(self, builder, node);
}

- (OrgApacheLuceneUtilFstFST_BytesReader *)getBytesReader {
  if (packed_) {
    if (bytesArray_ != nil) {
      return create_OrgApacheLuceneUtilFstForwardBytesReader_initPackagePrivateWithByteArray_(bytesArray_);
    }
    else {
      return [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(bytes_)) getForwardReader];
    }
  }
  else {
    if (bytesArray_ != nil) {
      return create_OrgApacheLuceneUtilFstReverseBytesReader_initPackagePrivateWithByteArray_(bytesArray_);
    }
    else {
      return [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(bytes_)) getReverseReader];
    }
  }
}

- (instancetype)initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE:(OrgApacheLuceneUtilFstFST_INPUT_TYPE *)inputType
                           withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs
                                                     withInt:(jint)bytesPageBits {
  OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_(self, inputType, outputs, bytesPageBits);
  return self;
}

- (OrgApacheLuceneUtilFstFST *)packWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
                                                             withInt:(jint)minInCountDeref
                                                             withInt:(jint)maxDerefNodes
                                                           withFloat:(jfloat)acceptableOverheadRatio {
  if (nodeAddress_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"this FST was not built with willPackFST=true");
  }
  id NO_OUTPUT = JreRetainedLocalValue([((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) getNoOutput]);
  OrgApacheLuceneUtilFstFST_Arc *arc = create_OrgApacheLuceneUtilFstFST_Arc_init();
  OrgApacheLuceneUtilFstFST_BytesReader *r = [self getBytesReader];
  jint topN = JavaLangMath_minWithInt_withInt_(maxDerefNodes, [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(inCounts_)) size]);
  OrgApacheLuceneUtilFstFST_NodeQueue *q = create_OrgApacheLuceneUtilFstFST_NodeQueue_initWithInt_(topN);
  OrgApacheLuceneUtilFstFST_NodeAndInCount *bottom = nil;
  for (jint node = 0; node < [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(inCounts_)) size]; node++) {
    if ([((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(inCounts_)) getWithInt:node] >= minInCountDeref) {
      if (bottom == nil) {
        [q addWithId:create_OrgApacheLuceneUtilFstFST_NodeAndInCount_initWithInt_withInt_(node, (jint) [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(inCounts_)) getWithInt:node])];
        if ([q size] == topN) {
          bottom = [q top];
        }
      }
      else if ([((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(inCounts_)) getWithInt:node] > bottom->count_) {
        [q insertWithOverflowWithId:create_OrgApacheLuceneUtilFstFST_NodeAndInCount_initWithInt_withInt_(node, (jint) [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(inCounts_)) getWithInt:node])];
      }
    }
  }
  JreStrongAssign(&inCounts_, nil);
  id<JavaUtilMap> topNodeMap = create_JavaUtilHashMap_init();
  for (jint downTo = [q size] - 1; downTo >= 0; downTo--) {
    OrgApacheLuceneUtilFstFST_NodeAndInCount *n = JreRetainedLocalValue([q pop]);
    [topNodeMap putWithId:JavaLangInteger_valueOfWithInt_(((OrgApacheLuceneUtilFstFST_NodeAndInCount *) nil_chk(n))->node_) withId:JavaLangInteger_valueOfWithInt_(downTo)];
  }
  OrgApacheLuceneUtilPackedGrowableWriter *newNodeAddress = create_OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_([((OrgApacheLuceneUtilFstBytesStore *) nil_chk(((OrgApacheLuceneUtilFstBuilder *) nil_chk(builder))->bytes_)) getPosition]), (jint) (1 + builder->nodeCount_), acceptableOverheadRatio);
  for (jint node = 1; node <= builder->nodeCount_; node++) {
    [newNodeAddress setWithInt:node withLong:1 + [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) getPosition] - [((OrgApacheLuceneUtilPackedGrowableWriter *) nil_chk(nodeAddress_)) getWithInt:node]];
  }
  jint absCount;
  jint deltaCount;
  jint topCount;
  jint nextCount;
  OrgApacheLuceneUtilFstFST *fst;
  while (true) {
    jboolean changed = false;
    jboolean negDelta = false;
    fst = create_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_(inputType_, outputs_, [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(builder->bytes_)) getBlockBits]);
    OrgApacheLuceneUtilFstBytesStore *writer = fst->bytes_;
    [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(writer)) writeByteWithByte:(jbyte) 0];
    absCount = deltaCount = topCount = nextCount = 0;
    jint changedCount = 0;
    jlong addressError = 0;
    for (jint node = (jint) builder->nodeCount_; node >= 1; node--) {
      jlong address = [writer getPosition];
      if (address != [newNodeAddress getWithInt:node]) {
        addressError = address - [newNodeAddress getWithInt:node];
        changed = true;
        [newNodeAddress setWithInt:node withLong:address];
        changedCount++;
      }
      jint nodeArcCount = 0;
      jint bytesPerArc = 0;
      jboolean retry = false;
      jboolean anyNegDelta = false;
      writeNode: while (true) {
        [self readFirstRealTargetArcWithLong:node withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:r];
        jboolean useArcArray = arc->bytesPerArc_ != 0;
        if (useArcArray) {
          if (bytesPerArc == 0) {
            bytesPerArc = arc->bytesPerArc_;
          }
          [writer writeByteWithByte:OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY];
          [writer writeVIntWithInt:arc->numArcs_];
          [writer writeVIntWithInt:bytesPerArc];
        }
        jint maxBytesPerArc = 0;
        while (true) {
          jlong arcStartPos = [writer getPosition];
          nodeArcCount++;
          jbyte flags = 0;
          if ([arc isLast]) {
            flags += OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
          }
          if (!useArcArray && node != 1 && arc->target_ == node - 1) {
            flags += OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT;
            if (!retry) {
              nextCount++;
            }
          }
          if ([arc isFinal]) {
            flags += OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC;
            if (!JreObjectEqualsEquals(arc->nextFinalOutput_, NO_OUTPUT)) {
              flags += OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT;
            }
          }
          else {
            JreAssert(JreObjectEqualsEquals(arc->nextFinalOutput_, NO_OUTPUT), @"org/apache/lucene/util/fst/FST.java:1671 condition failed: assert arc.nextFinalOutput == NO_OUTPUT;");
          }
          if (!OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(arc)) {
            flags += OrgApacheLuceneUtilFstFST_BIT_STOP_NODE;
          }
          if (!JreObjectEqualsEquals(arc->output_, NO_OUTPUT)) {
            flags += OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT;
          }
          jlong absPtr;
          jboolean doWriteTarget = OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(arc) && (flags & OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT) == 0;
          if (doWriteTarget) {
            JavaLangInteger *ptr = [topNodeMap getWithId:JavaLangLong_valueOfWithLong_(arc->target_)];
            if (ptr != nil) {
              absPtr = [ptr intValue];
            }
            else {
              absPtr = [topNodeMap size] + [newNodeAddress getWithInt:(jint) arc->target_] + addressError;
            }
            jlong delta = [newNodeAddress getWithInt:(jint) arc->target_] + addressError - [writer getPosition] - 2;
            if (delta < 0) {
              anyNegDelta = true;
              delta = 0;
            }
            if (delta < absPtr) {
              flags |= OrgApacheLuceneUtilFstFST_BIT_TARGET_DELTA;
            }
          }
          else {
            absPtr = 0;
          }
          JreAssert(flags != OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY, @"org/apache/lucene/util/fst/FST.java:1706 condition failed: assert flags != ARCS_AS_FIXED_ARRAY;");
          [writer writeByteWithByte:flags];
          OrgApacheLuceneUtilFstFST_writeLabelWithOrgApacheLuceneStoreDataOutput_withInt_(fst, writer, arc->label_);
          if (!JreObjectEqualsEquals(arc->output_, NO_OUTPUT)) {
            [outputs_ writeWithId:arc->output_ withOrgApacheLuceneStoreDataOutput:writer];
          }
          if (!JreObjectEqualsEquals(arc->nextFinalOutput_, NO_OUTPUT)) {
            [outputs_ writeFinalOutputWithId:arc->nextFinalOutput_ withOrgApacheLuceneStoreDataOutput:writer];
          }
          if (doWriteTarget) {
            jlong delta = [newNodeAddress getWithInt:(jint) arc->target_] + addressError - [writer getPosition];
            if (delta < 0) {
              anyNegDelta = true;
              delta = 0;
            }
            if (OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_TARGET_DELTA)) {
              [writer writeVLongWithLong:delta];
              if (!retry) {
                deltaCount++;
              }
            }
            else {
              [writer writeVLongWithLong:absPtr];
              if (!retry) {
                if (absPtr >= [topNodeMap size]) {
                  absCount++;
                }
                else {
                  topCount++;
                }
              }
            }
          }
          if (useArcArray) {
            jint arcBytes = (jint) ([writer getPosition] - arcStartPos);
            maxBytesPerArc = JavaLangMath_maxWithInt_withInt_(maxBytesPerArc, arcBytes);
            [writer skipBytesWithInt:(jint) (arcStartPos + bytesPerArc - [writer getPosition])];
          }
          if ([arc isLast]) {
            break;
          }
          [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:r];
        }
        if (useArcArray) {
          if (maxBytesPerArc == bytesPerArc || (retry && maxBytesPerArc <= bytesPerArc)) {
            break;
          }
        }
        else {
          break;
        }
        bytesPerArc = maxBytesPerArc;
        [writer truncateWithLong:address];
        nodeArcCount = 0;
        retry = true;
        anyNegDelta = false;
      }
      negDelta |= anyNegDelta;
    }
    if (!changed) {
      JreAssert(!negDelta, @"org/apache/lucene/util/fst/FST.java:1802 condition failed: assert !negDelta;");
      break;
    }
  }
  jlong maxAddress = 0;
  for (JavaLangInteger *boxed__ in nil_chk([topNodeMap keySet])) {
    jlong key = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    maxAddress = JavaLangMath_maxWithLong_withLong_(maxAddress, [newNodeAddress getWithInt:(jint) key]);
  }
  OrgApacheLuceneUtilPackedPackedInts_Mutable *nodeRefToAddressIn = OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_([topNodeMap size], OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(maxAddress), acceptableOverheadRatio);
  for (id<JavaUtilMap_Entry> __strong ent in nil_chk([topNodeMap entrySet])) {
    [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(nodeRefToAddressIn)) setWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(ent)) getValue])) intValue] withLong:[newNodeAddress getWithInt:[((JavaLangInteger *) nil_chk([ent getKey])) intValue]]];
  }
  JreStrongAssign(&((OrgApacheLuceneUtilFstFST *) nil_chk(fst))->nodeRefToAddress_, nodeRefToAddressIn);
  fst->startNode_ = [newNodeAddress getWithInt:(jint) startNode_];
  if (emptyOutput_ != nil) {
    [fst setEmptyOutputWithId:emptyOutput_];
  }
  [((OrgApacheLuceneUtilFstBytesStore *) nil_chk(fst->bytes_)) finish];
  OrgApacheLuceneUtilFstFST_cacheRootArcs(fst);
  return fst;
}

- (void)dealloc {
  RELEASE_(inputType_);
  RELEASE_(emptyOutput_);
  RELEASE_(bytes_);
  RELEASE_(bytesArray_);
  RELEASE_(outputs_);
  RELEASE_(nodeRefToAddress_);
  RELEASE_(cachedRootArcs_);
  RELEASE_(nodeAddress_);
  RELEASE_(inCounts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 5, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, 5, 8, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 15, 5, -1, -1, -1 },
    { NULL, "J", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "V", 0x0, 18, 19, 5, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 23, 5, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST;", 0x9, 24, 25, 5, 26, -1, -1 },
    { NULL, "V", 0x2, 27, 28, 5, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 30, 5, -1, -1, -1 },
    { NULL, "Z", 0x9, 31, 32, -1, 33, -1, -1 },
    { NULL, "J", 0x0, 34, 35, 5, 36, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 37, 32, -1, 38, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 39, 40, 5, 41, -1, -1 },
    { NULL, "J", 0x2, 42, 43, 5, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 44, 40, 5, 41, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 45, 46, 5, 47, -1, -1 },
    { NULL, "Z", 0x0, 48, 49, 5, 50, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 51, 49, 5, 52, -1, -1 },
    { NULL, "I", 0x1, 53, 49, 5, 54, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 55, 49, 5, 52, -1, -1 },
    { NULL, "Z", 0x2, 56, 57, 5, 58, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 59, 60, 5, 61, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x2, 59, 62, 5, 63, -1, -1 },
    { NULL, "V", 0x2, 64, 43, 5, -1, -1, -1 },
    { NULL, "Z", 0x2, 65, 35, -1, 66, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_BytesReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 67, -1, 68, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST;", 0x0, 69, 70, 5, 71, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(flagWithInt:withInt:);
  methods[1].selector = @selector(initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE:withOrgApacheLuceneUtilFstOutputs:withBoolean:withFloat:withInt:);
  methods[2].selector = @selector(initWithOrgApacheLuceneStoreDataInput:withOrgApacheLuceneUtilFstOutputs:);
  methods[3].selector = @selector(initWithOrgApacheLuceneStoreDataInput:withOrgApacheLuceneUtilFstOutputs:withInt:);
  methods[4].selector = @selector(getInputType);
  methods[5].selector = @selector(ramBytesUsedWithOrgApacheLuceneUtilFstFST_ArcArray:);
  methods[6].selector = @selector(ramBytesUsed);
  methods[7].selector = @selector(getChildResources);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(finishWithLong:);
  methods[10].selector = @selector(getNodeAddressWithLong:);
  methods[11].selector = @selector(cacheRootArcs);
  methods[12].selector = @selector(getEmptyOutput);
  methods[13].selector = @selector(setEmptyOutputWithId:);
  methods[14].selector = @selector(saveWithOrgApacheLuceneStoreDataOutput:);
  methods[15].selector = @selector(saveWithOrgLukhnosPortmobileFilePath:);
  methods[16].selector = @selector(readWithOrgLukhnosPortmobileFilePath:withOrgApacheLuceneUtilFstOutputs:);
  methods[17].selector = @selector(writeLabelWithOrgApacheLuceneStoreDataOutput:withInt:);
  methods[18].selector = @selector(readLabelWithOrgApacheLuceneStoreDataInput:);
  methods[19].selector = @selector(targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc:);
  methods[20].selector = @selector(addNodeWithOrgApacheLuceneUtilFstBuilder:withOrgApacheLuceneUtilFstBuilder_UnCompiledNode:);
  methods[21].selector = @selector(getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:);
  methods[22].selector = @selector(readLastTargetArcWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[23].selector = @selector(readUnpackedNodeTargetWithOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[24].selector = @selector(readFirstTargetArcWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[25].selector = @selector(readFirstRealTargetArcWithLong:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[26].selector = @selector(isExpandedTargetWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[27].selector = @selector(readNextArcWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[28].selector = @selector(readNextArcLabelWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[29].selector = @selector(readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[30].selector = @selector(assertRootCachedArcWithInt:withOrgApacheLuceneUtilFstFST_Arc:);
  methods[31].selector = @selector(findTargetArcWithInt:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[32].selector = @selector(findTargetArcWithInt:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:withBoolean:);
  methods[33].selector = @selector(seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader:);
  methods[34].selector = @selector(shouldExpandWithOrgApacheLuceneUtilFstBuilder:withOrgApacheLuceneUtilFstBuilder_UnCompiledNode:);
  methods[35].selector = @selector(getBytesReader);
  methods[36].selector = @selector(initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE:withOrgApacheLuceneUtilFstOutputs:withInt:);
  methods[37].selector = @selector(packWithOrgApacheLuceneUtilFstBuilder:withInt:withInt:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED", "J", .constantValue.asLong = 0, 0x1a, -1, 72, -1, -1 },
    { "ARC_SHALLOW_RAM_BYTES_USED", "J", .constantValue.asLong = 0, 0x1a, -1, 73, -1, -1 },
    { "BIT_FINAL_ARC", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC, 0x18, -1, -1, -1, -1 },
    { "BIT_LAST_ARC", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_LAST_ARC, 0x18, -1, -1, -1, -1 },
    { "BIT_TARGET_NEXT", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT, 0x18, -1, -1, -1, -1 },
    { "BIT_STOP_NODE", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_STOP_NODE, 0x18, -1, -1, -1, -1 },
    { "BIT_ARC_HAS_OUTPUT", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT, 0x19, -1, -1, -1, -1 },
    { "BIT_ARC_HAS_FINAL_OUTPUT", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT, 0x18, -1, -1, -1, -1 },
    { "BIT_TARGET_DELTA", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_BIT_TARGET_DELTA, 0x1a, -1, -1, -1, -1 },
    { "ARCS_AS_FIXED_ARRAY", "B", .constantValue.asChar = OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY, 0x1a, -1, -1, -1, -1 },
    { "FIXED_ARRAY_SHALLOW_DISTANCE", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_FIXED_ARRAY_SHALLOW_DISTANCE, 0x18, -1, -1, -1, -1 },
    { "FIXED_ARRAY_NUM_ARCS_SHALLOW", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_SHALLOW, 0x18, -1, -1, -1, -1 },
    { "FIXED_ARRAY_NUM_ARCS_DEEP", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_DEEP, 0x18, -1, -1, -1, -1 },
    { "FILE_FORMAT_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "VERSION_START", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_START, 0x1a, -1, -1, -1, -1 },
    { "VERSION_INT_NUM_BYTES_PER_ARC", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_INT_NUM_BYTES_PER_ARC, 0x1a, -1, -1, -1, -1 },
    { "VERSION_SHORT_BYTE2_LABELS", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_SHORT_BYTE2_LABELS, 0x1a, -1, -1, -1, -1 },
    { "VERSION_PACKED", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_PACKED, 0x1a, -1, -1, -1, -1 },
    { "VERSION_VINT_TARGET", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_VINT_TARGET, 0x1a, -1, -1, -1, -1 },
    { "VERSION_NO_NODE_ARC_COUNTS", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_NO_NODE_ARC_COUNTS, 0x1a, -1, -1, -1, -1 },
    { "VERSION_CURRENT", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_VERSION_CURRENT, 0x1a, -1, -1, -1, -1 },
    { "FINAL_END_NODE", "J", .constantValue.asLong = OrgApacheLuceneUtilFstFST_FINAL_END_NODE, 0x1a, -1, -1, -1, -1 },
    { "NON_FINAL_END_NODE", "J", .constantValue.asLong = OrgApacheLuceneUtilFstFST_NON_FINAL_END_NODE, 0x1a, -1, -1, -1, -1 },
    { "END_LABEL", "I", .constantValue.asInt = OrgApacheLuceneUtilFstFST_END_LABEL, 0x19, -1, -1, -1, -1 },
    { "inputType_", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "emptyOutput_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, 75, -1 },
    { "bytes_", "LOrgApacheLuceneUtilFstBytesStore;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bytesArray_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "startNode_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "outputs_", "LOrgApacheLuceneUtilFstOutputs;", .constantValue.asLong = 0, 0x11, -1, -1, 76, -1 },
    { "packed_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nodeRefToAddress_", "LOrgApacheLuceneUtilPackedPackedInts_Reader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cachedRootArcs_", "[LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x2, -1, -1, 77, -1 },
    { "nodeAddress_", "LOrgApacheLuceneUtilPackedGrowableWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inCounts_", "LOrgApacheLuceneUtilPackedGrowableWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x12, 78, -1, -1, -1 },
    { "DEFAULT_MAX_BLOCK_BITS", "I", .constantValue.asLong = 0, 0x19, -1, 79, -1, -1 },
    { "cachedArcsBytesUsed_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "flag", "II", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;LOrgApacheLuceneUtilFstOutputs;ZFI", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;Lorg/apache/lucene/util/fst/Outputs<TT;>;ZFI)V", "LOrgApacheLuceneStoreDataInput;LOrgApacheLuceneUtilFstOutputs;", "LJavaIoIOException;", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs<TT;>;)V", "LOrgApacheLuceneStoreDataInput;LOrgApacheLuceneUtilFstOutputs;I", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs<TT;>;I)V", "ramBytesUsed", "[LOrgApacheLuceneUtilFstFST_Arc;", "([Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)J", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "toString", "finish", "J", "getNodeAddress", "()TT;", "setEmptyOutput", "LNSObject;", "(TT;)V", "save", "LOrgApacheLuceneStoreDataOutput;", "LOrgLukhnosPortmobileFilePath;", "read", "LOrgLukhnosPortmobileFilePath;LOrgApacheLuceneUtilFstOutputs;", "<T:Ljava/lang/Object;>(Lorg/lukhnos/portmobile/file/Path;Lorg/apache/lucene/util/fst/Outputs<TT;>;)Lorg/apache/lucene/util/fst/FST<TT;>;", "writeLabel", "LOrgApacheLuceneStoreDataOutput;I", "readLabel", "LOrgApacheLuceneStoreDataInput;", "targetHasArcs", "LOrgApacheLuceneUtilFstFST_Arc;", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)Z", "addNode", "LOrgApacheLuceneUtilFstBuilder;LOrgApacheLuceneUtilFstBuilder_UnCompiledNode;", "(Lorg/apache/lucene/util/fst/Builder<TT;>;Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<TT;>;)J", "getFirstArc", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "readLastTargetArc", "LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesReader;", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "readUnpackedNodeTarget", "LOrgApacheLuceneUtilFstFST_BytesReader;", "readFirstTargetArc", "readFirstRealTargetArc", "JLOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesReader;", "(JLorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "isExpandedTarget", "LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesReader;", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$BytesReader;)Z", "readNextArc", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "readNextArcLabel", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$BytesReader;)I", "readNextRealArc", "assertRootCachedArc", "ILOrgApacheLuceneUtilFstFST_Arc;", "(ILorg/apache/lucene/util/fst/FST$Arc<TT;>;)Z", "findTargetArc", "ILOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesReader;", "(ILorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "ILOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesReader;Z", "(ILorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$BytesReader;Z)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "seekToNextNode", "shouldExpand", "(Lorg/apache/lucene/util/fst/Builder<TT;>;Lorg/apache/lucene/util/fst/Builder$UnCompiledNode<TT;>;)Z", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;LOrgApacheLuceneUtilFstOutputs;I", "(Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;Lorg/apache/lucene/util/fst/Outputs<TT;>;I)V", "pack", "LOrgApacheLuceneUtilFstBuilder;IIF", "(Lorg/apache/lucene/util/fst/Builder<TT;>;IIF)Lorg/apache/lucene/util/fst/FST<TT;>;", &OrgApacheLuceneUtilFstFST_BASE_RAM_BYTES_USED, &OrgApacheLuceneUtilFstFST_ARC_SHALLOW_RAM_BYTES_USED, &OrgApacheLuceneUtilFstFST_FILE_FORMAT_NAME, "TT;", "Lorg/apache/lucene/util/fst/Outputs<TT;>;", "[Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "version", &OrgApacheLuceneUtilFstFST_DEFAULT_MAX_BLOCK_BITS, "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesReader;LOrgApacheLuceneUtilFstFST_NodeAndInCount;LOrgApacheLuceneUtilFstFST_NodeQueue;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/lucene/util/Accountable;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST = { "FST", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x11, 38, 38, -1, 80, -1, 81, -1 };
  return &_OrgApacheLuceneUtilFstFST;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFstFST class]) {
    OrgApacheLuceneUtilFstFST_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilFstFST_class_());
    OrgApacheLuceneUtilFstFST_ARC_SHALLOW_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilFstFST_Arc_class_());
    OrgApacheLuceneUtilFstFST_DEFAULT_MAX_BLOCK_BITS = JreLoadStatic(OrgApacheLuceneUtilConstants, JRE_IS_64BIT) ? 30 : 28;
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFstFST)
  }
}

@end

jboolean OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(jint flags, jint bit) {
  OrgApacheLuceneUtilFstFST_initialize();
  return (flags & bit) != 0;
}

void OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withInt_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs, jboolean willPackFST, jfloat acceptableOverheadRatio, jint bytesPageBits) {
  NSObject_init(self);
  self->startNode_ = -1;
  JreStrongAssign(&self->inputType_, inputType);
  JreStrongAssign(&self->outputs_, outputs);
  self->version__ = OrgApacheLuceneUtilFstFST_VERSION_CURRENT;
  JreStrongAssign(&self->bytesArray_, nil);
  JreStrongAssignAndConsume(&self->bytes_, new_OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithInt_(bytesPageBits));
  [self->bytes_ writeByteWithByte:(jbyte) 0];
  if (willPackFST) {
    JreStrongAssignAndConsume(&self->nodeAddress_, new_OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(15, 8, acceptableOverheadRatio));
    JreStrongAssignAndConsume(&self->inCounts_, new_OrgApacheLuceneUtilPackedGrowableWriter_initWithInt_withInt_withFloat_(1, 8, acceptableOverheadRatio));
  }
  else {
    JreStrongAssign(&self->nodeAddress_, nil);
    JreStrongAssign(&self->inCounts_, nil);
  }
  JreStrongAssign(&self->emptyOutput_, nil);
  self->packed_ = false;
  JreStrongAssign(&self->nodeRefToAddress_, nil);
}

OrgApacheLuceneUtilFstFST *new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs, jboolean willPackFST, jfloat acceptableOverheadRatio, jint bytesPageBits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withInt_, inputType, outputs, willPackFST, acceptableOverheadRatio, bytesPageBits)
}

OrgApacheLuceneUtilFstFST *create_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs, jboolean willPackFST, jfloat acceptableOverheadRatio, jint bytesPageBits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withInt_, inputType, outputs, willPackFST, acceptableOverheadRatio, bytesPageBits)
}

void OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilFstOutputs *outputs) {
  OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_withInt_(self, inArg, outputs, OrgApacheLuceneUtilFstFST_DEFAULT_MAX_BLOCK_BITS);
}

OrgApacheLuceneUtilFstFST *new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilFstOutputs *outputs) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_, inArg, outputs)
}

OrgApacheLuceneUtilFstFST *create_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilFstOutputs *outputs) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_, inArg, outputs)
}

void OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_withInt_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilFstOutputs *outputs, jint maxBlockBits) {
  NSObject_init(self);
  self->startNode_ = -1;
  JreStrongAssign(&self->outputs_, outputs);
  if (maxBlockBits < 1 || maxBlockBits > 30) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"maxBlockBits should be 1 .. 30; got ", maxBlockBits));
  }
  self->version__ = OrgApacheLuceneCodecsCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(inArg, OrgApacheLuceneUtilFstFST_FILE_FORMAT_NAME, OrgApacheLuceneUtilFstFST_VERSION_PACKED, OrgApacheLuceneUtilFstFST_VERSION_NO_NODE_ARC_COUNTS);
  self->packed_ = ([((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readByte] == 1);
  if ([inArg readByte] == 1) {
    OrgApacheLuceneUtilFstBytesStore *emptyBytes = create_OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithInt_(10);
    jint numBytes = [inArg readVInt];
    [emptyBytes copyBytesWithOrgApacheLuceneStoreDataInput:inArg withLong:numBytes];
    OrgApacheLuceneUtilFstFST_BytesReader *reader;
    if (self->packed_) {
      reader = [emptyBytes getForwardReader];
    }
    else {
      reader = [emptyBytes getReverseReader];
      if (numBytes > 0) {
        [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(reader)) setPositionWithLong:numBytes - 1];
      }
    }
    JreStrongAssign(&self->emptyOutput_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs)) readFinalOutputWithOrgApacheLuceneStoreDataInput:reader]);
  }
  else {
    JreStrongAssign(&self->emptyOutput_, nil);
  }
  jbyte t = [inArg readByte];
  switch (t) {
    case 0:
    JreStrongAssign(&self->inputType_, JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1));
    break;
    case 1:
    JreStrongAssign(&self->inputType_, JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2));
    break;
    case 2:
    JreStrongAssign(&self->inputType_, JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4));
    break;
    default:
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$B", @"invalid input type ", t));
  }
  if (self->packed_) {
    JreStrongAssign(&self->nodeRefToAddress_, OrgApacheLuceneUtilPackedPackedInts_getReaderWithOrgApacheLuceneStoreDataInput_(inArg));
  }
  else {
    JreStrongAssign(&self->nodeRefToAddress_, nil);
  }
  self->startNode_ = [inArg readVLong];
  if (self->version__ < OrgApacheLuceneUtilFstFST_VERSION_NO_NODE_ARC_COUNTS) {
    [inArg readVLong];
    [inArg readVLong];
    [inArg readVLong];
  }
  jlong numBytes = [inArg readVLong];
  if (numBytes > JreLShift32(1, maxBlockBits)) {
    JreStrongAssignAndConsume(&self->bytes_, new_OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithOrgApacheLuceneStoreDataInput_withLong_withInt_(inArg, numBytes, JreLShift32(1, maxBlockBits)));
    JreStrongAssign(&self->bytesArray_, nil);
  }
  else {
    JreStrongAssign(&self->bytes_, nil);
    JreStrongAssignAndConsume(&self->bytesArray_, [IOSByteArray newArrayWithLength:(jint) numBytes]);
    [inArg readBytesWithByteArray:self->bytesArray_ withInt:0 withInt:self->bytesArray_->size_];
  }
  OrgApacheLuceneUtilFstFST_cacheRootArcs(self);
}

OrgApacheLuceneUtilFstFST *new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_withInt_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilFstOutputs *outputs, jint maxBlockBits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_withInt_, inArg, outputs, maxBlockBits)
}

OrgApacheLuceneUtilFstFST *create_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_withInt_(OrgApacheLuceneStoreDataInput *inArg, OrgApacheLuceneUtilFstOutputs *outputs, jint maxBlockBits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_withInt_, inArg, outputs, maxBlockBits)
}

jlong OrgApacheLuceneUtilFstFST_ramBytesUsedWithOrgApacheLuceneUtilFstFST_ArcArray_(OrgApacheLuceneUtilFstFST *self, IOSObjectArray *arcs) {
  jlong size = 0;
  if (arcs != nil) {
    size += OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithNSObjectArray_(arcs);
    {
      IOSObjectArray *a__ = arcs;
      OrgApacheLuceneUtilFstFST_Arc * const *b__ = a__->buffer_;
      OrgApacheLuceneUtilFstFST_Arc * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneUtilFstFST_Arc *arc = *b__++;
        if (arc != nil) {
          size += OrgApacheLuceneUtilFstFST_ARC_SHALLOW_RAM_BYTES_USED;
          if (arc->output_ != nil && !JreObjectEqualsEquals(arc->output_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(self->outputs_)) getNoOutput])) {
            size += [((OrgApacheLuceneUtilFstOutputs *) nil_chk(self->outputs_)) ramBytesUsedWithId:arc->output_];
          }
          if (arc->nextFinalOutput_ != nil && !JreObjectEqualsEquals(arc->nextFinalOutput_, [((OrgApacheLuceneUtilFstOutputs *) nil_chk(self->outputs_)) getNoOutput])) {
            size += [((OrgApacheLuceneUtilFstOutputs *) nil_chk(self->outputs_)) ramBytesUsedWithId:arc->nextFinalOutput_];
          }
        }
      }
    }
  }
  return size;
}

jlong OrgApacheLuceneUtilFstFST_getNodeAddressWithLong_(OrgApacheLuceneUtilFstFST *self, jlong node) {
  if (self->nodeAddress_ != nil) {
    return [self->nodeAddress_ getWithInt:(jint) node];
  }
  else {
    return node;
  }
}

void OrgApacheLuceneUtilFstFST_cacheRootArcs(OrgApacheLuceneUtilFstFST *self) {
  JreAssert(self->cachedArcsBytesUsed_ == 0, @"org/apache/lucene/util/fst/FST.java:482 condition failed: assert cachedArcsBytesUsed == 0;");
  OrgApacheLuceneUtilFstFST_Arc *arc = create_OrgApacheLuceneUtilFstFST_Arc_init();
  [self getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:arc];
  if (OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(arc)) {
    OrgApacheLuceneUtilFstFST_BytesReader *in = [self getBytesReader];
    IOSObjectArray *arcs = [IOSObjectArray arrayWithLength:(jint) 0x80 type:OrgApacheLuceneUtilFstFST_Arc_class_()];
    [self readFirstRealTargetArcWithLong:arc->target_ withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:in];
    jint count = 0;
    while (true) {
      JreAssert(arc->label_ != OrgApacheLuceneUtilFstFST_END_LABEL, @"org/apache/lucene/util/fst/FST.java:492 condition failed: assert arc.label != END_LABEL;");
      if (arc->label_ < arcs->size_) {
        IOSObjectArray_Set(arcs, arc->label_, [create_OrgApacheLuceneUtilFstFST_Arc_init() copyFromWithOrgApacheLuceneUtilFstFST_Arc:arc]);
      }
      else {
        break;
      }
      if ([arc isLast]) {
        break;
      }
      [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:in];
      count++;
    }
    jint cacheRAM = (jint) OrgApacheLuceneUtilFstFST_ramBytesUsedWithOrgApacheLuceneUtilFstFST_ArcArray_(self, arcs);
    if (count >= OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_SHALLOW && cacheRAM < JreLongDiv([self ramBytesUsed], 5)) {
      JreStrongAssign(&self->cachedRootArcs_, arcs);
      self->cachedArcsBytesUsed_ = cacheRAM;
    }
  }
}

OrgApacheLuceneUtilFstFST *OrgApacheLuceneUtilFstFST_readWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneUtilFstOutputs_(OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneUtilFstOutputs *outputs) {
  OrgApacheLuceneUtilFstFST_initialize();
  JavaIoInputStream *is = OrgLukhnosPortmobileFileFiles_newInputStreamWithOrgLukhnosPortmobileFilePath_(path);
  JavaLangThrowable *__primaryException1 = nil;
  @try {
    return create_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(create_OrgApacheLuceneStoreInputStreamDataInput_initWithJavaIoInputStream_(create_JavaIoBufferedInputStream_initWithJavaIoInputStream_(is)), outputs);
  }
  @catch (JavaLangThrowable *e) {
    __primaryException1 = e;
    @throw e;
  }
  @finally {
    if (is != nil) {
      if (__primaryException1 != nil) {
        @try {
          [is close];
        }
        @catch (JavaLangThrowable *e) {
          [__primaryException1 addSuppressedWithJavaLangThrowable:e];
        }
      }
      else {
        [is close];
      }
    }
  }
}

void OrgApacheLuceneUtilFstFST_writeLabelWithOrgApacheLuceneStoreDataOutput_withInt_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneStoreDataOutput *outArg, jint v) {
  JreAssert(v >= 0, JreStrcat("$I", @"v=", v));
  if (self->inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1)) {
    JreAssert(v <= 255, JreStrcat("$I", @"v=", v));
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) v];
  }
  else if (self->inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2)) {
    JreAssert(v <= 65535, JreStrcat("$I", @"v=", v));
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeShortWithShort:(jshort) v];
  }
  else {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:v];
  }
}

jboolean OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(OrgApacheLuceneUtilFstFST_Arc *arc) {
  OrgApacheLuceneUtilFstFST_initialize();
  return ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->target_ > 0;
}

jlong OrgApacheLuceneUtilFstFST_readUnpackedNodeTargetWithOrgApacheLuceneUtilFstFST_BytesReader_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_BytesReader *inArg) {
  jlong target;
  if (self->version__ < OrgApacheLuceneUtilFstFST_VERSION_VINT_TARGET) {
    target = [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) readInt];
  }
  else {
    target = [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) readVLong];
  }
  return target;
}

jboolean OrgApacheLuceneUtilFstFST_assertRootCachedArcWithInt_withOrgApacheLuceneUtilFstFST_Arc_(OrgApacheLuceneUtilFstFST *self, jint label, OrgApacheLuceneUtilFstFST_Arc *cachedArc) {
  OrgApacheLuceneUtilFstFST_Arc *arc = create_OrgApacheLuceneUtilFstFST_Arc_init();
  [self getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:arc];
  OrgApacheLuceneUtilFstFST_BytesReader *in = JreRetainedLocalValue([self getBytesReader]);
  OrgApacheLuceneUtilFstFST_Arc *result = OrgApacheLuceneUtilFstFST_findTargetArcWithInt_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_BytesReader_withBoolean_(self, label, arc, arc, in, false);
  if (result == nil) {
    JreAssert(cachedArc == nil, @"org/apache/lucene/util/fst/FST.java:1162 condition failed: assert cachedArc == null;");
  }
  else {
    JreAssert(cachedArc != nil, @"org/apache/lucene/util/fst/FST.java:1164 condition failed: assert cachedArc != null;");
    JreAssert(((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(cachedArc))->arcIdx_ == result->arcIdx_, @"org/apache/lucene/util/fst/FST.java:1165 condition failed: assert cachedArc.arcIdx == result.arcIdx;");
    JreAssert(cachedArc->bytesPerArc_ == result->bytesPerArc_, @"org/apache/lucene/util/fst/FST.java:1166 condition failed: assert cachedArc.bytesPerArc == result.bytesPerArc;");
    JreAssert(cachedArc->flags_ == result->flags_, @"org/apache/lucene/util/fst/FST.java:1167 condition failed: assert cachedArc.flags == result.flags;");
    JreAssert(cachedArc->label_ == result->label_, @"org/apache/lucene/util/fst/FST.java:1168 condition failed: assert cachedArc.label == result.label;");
    JreAssert(cachedArc->nextArc_ == result->nextArc_, @"org/apache/lucene/util/fst/FST.java:1169 condition failed: assert cachedArc.nextArc == result.nextArc;");
    JreAssert([nil_chk(cachedArc->nextFinalOutput_) isEqual:result->nextFinalOutput_], @"org/apache/lucene/util/fst/FST.java:1170 condition failed: assert cachedArc.nextFinalOutput.equals(result.nextFinalOutput);");
    JreAssert(cachedArc->node_ == result->node_, @"org/apache/lucene/util/fst/FST.java:1171 condition failed: assert cachedArc.node == result.node;");
    JreAssert(cachedArc->numArcs_ == result->numArcs_, @"org/apache/lucene/util/fst/FST.java:1172 condition failed: assert cachedArc.numArcs == result.numArcs;");
    JreAssert([nil_chk(cachedArc->output_) isEqual:result->output_], @"org/apache/lucene/util/fst/FST.java:1173 condition failed: assert cachedArc.output.equals(result.output);");
    JreAssert(cachedArc->posArcsStart_ == result->posArcsStart_, @"org/apache/lucene/util/fst/FST.java:1174 condition failed: assert cachedArc.posArcsStart == result.posArcsStart;");
    JreAssert(cachedArc->target_ == result->target_, @"org/apache/lucene/util/fst/FST.java:1175 condition failed: assert cachedArc.target == result.target;");
  }
  return true;
}

OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneUtilFstFST_findTargetArcWithInt_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_BytesReader_withBoolean_(OrgApacheLuceneUtilFstFST *self, jint labelToMatch, OrgApacheLuceneUtilFstFST_Arc *follow, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilFstFST_BytesReader *inArg, jboolean useRootArcCache) {
  if (labelToMatch == OrgApacheLuceneUtilFstFST_END_LABEL) {
    if ([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow)) isFinal]) {
      if (follow->target_ <= 0) {
        ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
      }
      else {
        ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = 0;
        arc->nextArc_ = follow->target_;
        arc->node_ = follow->target_;
      }
      JreStrongAssign(&arc->output_, follow->nextFinalOutput_);
      arc->label_ = OrgApacheLuceneUtilFstFST_END_LABEL;
      return arc;
    }
    else {
      return nil;
    }
  }
  if (useRootArcCache && self->cachedRootArcs_ != nil && ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow))->target_ == self->startNode_ && labelToMatch < self->cachedRootArcs_->size_) {
    OrgApacheLuceneUtilFstFST_Arc *result = IOSObjectArray_Get(self->cachedRootArcs_, labelToMatch);
    JreAssert(OrgApacheLuceneUtilFstFST_assertRootCachedArcWithInt_withOrgApacheLuceneUtilFstFST_Arc_(self, labelToMatch, result), @"org/apache/lucene/util/fst/FST.java:1218 condition failed: assert assertRootCachedArc(labelToMatch, result);");
    if (result == nil) {
      return nil;
    }
    else {
      [((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) copyFromWithOrgApacheLuceneUtilFstFST_Arc:result];
      return arc;
    }
  }
  if (!OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(follow)) {
    return nil;
  }
  [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:OrgApacheLuceneUtilFstFST_getNodeAddressWithLong_(self, ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow))->target_)];
  ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->node_ = follow->target_;
  if ([inArg readByte] == OrgApacheLuceneUtilFstFST_ARCS_AS_FIXED_ARRAY) {
    arc->numArcs_ = [inArg readVInt];
    if (self->packed_ || self->version__ >= OrgApacheLuceneUtilFstFST_VERSION_VINT_TARGET) {
      arc->bytesPerArc_ = [inArg readVInt];
    }
    else {
      arc->bytesPerArc_ = [inArg readInt];
    }
    arc->posArcsStart_ = [inArg getPosition];
    jint low = 0;
    jint high = arc->numArcs_ - 1;
    while (low <= high) {
      jint mid = JreURShift32((low + high), 1);
      [inArg setPositionWithLong:arc->posArcsStart_];
      [inArg skipBytesWithLong:arc->bytesPerArc_ * mid + 1];
      jint midLabel = [self readLabelWithOrgApacheLuceneStoreDataInput:inArg];
      jint cmp = midLabel - labelToMatch;
      if (cmp < 0) {
        low = mid + 1;
      }
      else if (cmp > 0) {
        high = mid - 1;
      }
      else {
        arc->arcIdx_ = mid - 1;
        return [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
      }
    }
    return nil;
  }
  [self readFirstRealTargetArcWithLong:follow->target_ withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
  while (true) {
    if (arc->label_ == labelToMatch) {
      return arc;
    }
    else if (arc->label_ > labelToMatch) {
      return nil;
    }
    else if ([arc isLast]) {
      return nil;
    }
    else {
      [self readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
    }
  }
}

void OrgApacheLuceneUtilFstFST_seekToNextNodeWithOrgApacheLuceneUtilFstFST_BytesReader_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_BytesReader *inArg) {
  while (true) {
    jint flags = [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) readByte];
    [self readLabelWithOrgApacheLuceneStoreDataInput:inArg];
    if (OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT)) {
      [((OrgApacheLuceneUtilFstOutputs *) nil_chk(self->outputs_)) skipOutputWithOrgApacheLuceneStoreDataInput:inArg];
    }
    if (OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT)) {
      [((OrgApacheLuceneUtilFstOutputs *) nil_chk(self->outputs_)) skipFinalOutputWithOrgApacheLuceneStoreDataInput:inArg];
    }
    if (!OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_STOP_NODE) && !OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT)) {
      if (self->packed_) {
        [inArg readVLong];
      }
      else {
        OrgApacheLuceneUtilFstFST_readUnpackedNodeTargetWithOrgApacheLuceneUtilFstFST_BytesReader_(self, inArg);
      }
    }
    if (OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags, OrgApacheLuceneUtilFstFST_BIT_LAST_ARC)) {
      return;
    }
  }
}

jboolean OrgApacheLuceneUtilFstFST_shouldExpandWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstBuilder_UnCompiledNode_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstBuilder *builder, OrgApacheLuceneUtilFstBuilder_UnCompiledNode *node) {
  return ((OrgApacheLuceneUtilFstBuilder *) nil_chk(builder))->allowArrayArcs_ && ((((OrgApacheLuceneUtilFstBuilder_UnCompiledNode *) nil_chk(node))->depth_ <= OrgApacheLuceneUtilFstFST_FIXED_ARRAY_SHALLOW_DISTANCE && node->numArcs_ >= OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_SHALLOW) || node->numArcs_ >= OrgApacheLuceneUtilFstFST_FIXED_ARRAY_NUM_ARCS_DEEP);
}

void OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_(OrgApacheLuceneUtilFstFST *self, OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs, jint bytesPageBits) {
  NSObject_init(self);
  self->startNode_ = -1;
  self->version__ = OrgApacheLuceneUtilFstFST_VERSION_CURRENT;
  self->packed_ = true;
  JreStrongAssign(&self->inputType_, inputType);
  JreStrongAssign(&self->bytesArray_, nil);
  JreStrongAssignAndConsume(&self->bytes_, new_OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithInt_(bytesPageBits));
  JreStrongAssign(&self->outputs_, outputs);
}

OrgApacheLuceneUtilFstFST *new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs, jint bytesPageBits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_, inputType, outputs, bytesPageBits)
}

OrgApacheLuceneUtilFstFST *create_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs, jint bytesPageBits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST, initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_withInt_, inputType, outputs, bytesPageBits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFstFST_INPUT_TYPE)

OrgApacheLuceneUtilFstFST_INPUT_TYPE *OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_[3];

@implementation OrgApacheLuceneUtilFstFST_INPUT_TYPE

+ (OrgApacheLuceneUtilFstFST_INPUT_TYPE *)BYTE1 {
  return JreEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1);
}

+ (OrgApacheLuceneUtilFstFST_INPUT_TYPE *)BYTE2 {
  return JreEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2);
}

+ (OrgApacheLuceneUtilFstFST_INPUT_TYPE *)BYTE4 {
  return JreEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4);
}

+ (IOSObjectArray *)values {
  return OrgApacheLuceneUtilFstFST_INPUT_TYPE_values();
}

+ (OrgApacheLuceneUtilFstFST_INPUT_TYPE *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneUtilFstFST_INPUT_TYPE_valueOfWithNSString_(name);
}

- (OrgApacheLuceneUtilFstFST_INPUT_TYPE_Enum)toNSEnum {
  return (OrgApacheLuceneUtilFstFST_INPUT_TYPE_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BYTE1", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "BYTE2", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "BYTE4", "LOrgApacheLuceneUtilFstFST_INPUT_TYPE;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1), &JreEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2), &JreEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4), "LOrgApacheLuceneUtilFstFST;", "Ljava/lang/Enum<Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST_INPUT_TYPE = { "INPUT_TYPE", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_OrgApacheLuceneUtilFstFST_INPUT_TYPE;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFstFST_INPUT_TYPE class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      ((void)(OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      OrgApacheLuceneUtilFstFST_INPUT_TYPE_initWithNSString_withInt_(e, JreEnumConstantName(OrgApacheLuceneUtilFstFST_INPUT_TYPE_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFstFST_INPUT_TYPE)
  }
}

@end

void OrgApacheLuceneUtilFstFST_INPUT_TYPE_initWithNSString_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgApacheLuceneUtilFstFST_INPUT_TYPE_values() {
  OrgApacheLuceneUtilFstFST_INPUT_TYPE_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_ count:3 type:OrgApacheLuceneUtilFstFST_INPUT_TYPE_class_()];
}

OrgApacheLuceneUtilFstFST_INPUT_TYPE *OrgApacheLuceneUtilFstFST_INPUT_TYPE_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneUtilFstFST_INPUT_TYPE_initialize();
  for (int i = 0; i < 3; i++) {
    OrgApacheLuceneUtilFstFST_INPUT_TYPE *e = OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneUtilFstFST_INPUT_TYPE *OrgApacheLuceneUtilFstFST_INPUT_TYPE_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneUtilFstFST_INPUT_TYPE_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return OrgApacheLuceneUtilFstFST_INPUT_TYPE_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST_INPUT_TYPE)

@implementation OrgApacheLuceneUtilFstFST_Arc

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilFstFST_Arc_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneUtilFstFST_Arc *)copyFromWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)other {
  node_ = ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(other))->node_;
  label_ = other->label_;
  target_ = other->target_;
  flags_ = other->flags_;
  JreStrongAssign(&output_, other->output_);
  JreStrongAssign(&nextFinalOutput_, other->nextFinalOutput_);
  nextArc_ = other->nextArc_;
  bytesPerArc_ = other->bytesPerArc_;
  if (bytesPerArc_ != 0) {
    posArcsStart_ = other->posArcsStart_;
    arcIdx_ = other->arcIdx_;
    numArcs_ = other->numArcs_;
  }
  return self;
}

- (jboolean)flagWithInt:(jint)flag {
  return OrgApacheLuceneUtilFstFST_flagWithInt_withInt_(flags_, flag);
}

- (jboolean)isLast {
  return [self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_LAST_ARC];
}

- (jboolean)isFinal {
  return [self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC];
}

- (NSString *)description {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  [b appendWithNSString:JreStrcat("$J", @"node=", node_)];
  [b appendWithNSString:JreStrcat("$J", @" target=", target_)];
  [b appendWithNSString:JreStrcat("$$", @" label=0x", JavaLangInteger_toHexStringWithInt_(label_))];
  if ([self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_FINAL_ARC]) {
    [b appendWithNSString:@" final"];
  }
  if ([self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_LAST_ARC]) {
    [b appendWithNSString:@" last"];
  }
  if ([self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT]) {
    [b appendWithNSString:@" targetNext"];
  }
  if ([self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_STOP_NODE]) {
    [b appendWithNSString:@" stop"];
  }
  if ([self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT]) {
    [b appendWithNSString:JreStrcat("$@", @" output=", output_)];
  }
  if ([self flagWithInt:OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_FINAL_OUTPUT]) {
    [b appendWithNSString:JreStrcat("$@", @" nextFinalOutput=", nextFinalOutput_)];
  }
  if (bytesPerArc_ != 0) {
    [b appendWithNSString:JreStrcat("$I$IC", @" arcArray(idx=", arcIdx_, @" of ", numArcs_, ')')];
  }
  return [b description];
}

- (void)dealloc {
  RELEASE_(output_);
  RELEASE_(nextFinalOutput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copyFromWithOrgApacheLuceneUtilFstFST_Arc:);
  methods[2].selector = @selector(flagWithInt:);
  methods[3].selector = @selector(isLast);
  methods[4].selector = @selector(isFinal);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "label_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "output_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 6, -1 },
    { "node_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "target_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "flags_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextFinalOutput_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 6, -1 },
    { "nextArc_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "posArcsStart_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bytesPerArc_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arcIdx_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numArcs_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copyFrom", "LOrgApacheLuceneUtilFstFST_Arc;", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "flag", "I", "toString", "TT;", "LOrgApacheLuceneUtilFstFST;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST_Arc = { "Arc", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x19, 6, 11, 7, -1, -1, 8, -1 };
  return &_OrgApacheLuceneUtilFstFST_Arc;
}

@end

void OrgApacheLuceneUtilFstFST_Arc_init(OrgApacheLuceneUtilFstFST_Arc *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilFstFST_Arc *new_OrgApacheLuceneUtilFstFST_Arc_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST_Arc, init)
}

OrgApacheLuceneUtilFstFST_Arc *create_OrgApacheLuceneUtilFstFST_Arc_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST_Arc, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST_Arc)

@implementation OrgApacheLuceneUtilFstFST_BytesReader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilFstFST_BytesReader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)getPosition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setPositionWithLong:(jlong)pos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)reversed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getPosition);
  methods[2].selector = @selector(setPositionWithLong:);
  methods[3].selector = @selector(reversed);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setPosition", "J", "LOrgApacheLuceneUtilFstFST;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST_BytesReader = { "BytesReader", "org.apache.lucene.util.fst", ptrTable, methods, NULL, 7, 0x409, 4, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFstFST_BytesReader;
}

@end

void OrgApacheLuceneUtilFstFST_BytesReader_init(OrgApacheLuceneUtilFstFST_BytesReader *self) {
  OrgApacheLuceneStoreDataInput_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST_BytesReader)

@implementation OrgApacheLuceneUtilFstFST_NodeAndInCount

- (instancetype)initWithInt:(jint)node
                    withInt:(jint)count {
  OrgApacheLuceneUtilFstFST_NodeAndInCount_initWithInt_withInt_(self, node, count);
  return self;
}

- (jint)compareToWithId:(OrgApacheLuceneUtilFstFST_NodeAndInCount *)other {
  cast_chk(other, [OrgApacheLuceneUtilFstFST_NodeAndInCount class]);
  if (count_ > ((OrgApacheLuceneUtilFstFST_NodeAndInCount *) nil_chk(other))->count_) {
    return 1;
  }
  else if (count_ < other->count_) {
    return -1;
  }
  else {
    return other->node_ - node_;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "node_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "compareTo", "LOrgApacheLuceneUtilFstFST_NodeAndInCount;", "LOrgApacheLuceneUtilFstFST;", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/util/fst/FST$NodeAndInCount;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST_NodeAndInCount = { "NodeAndInCount", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0xa, 2, 2, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneUtilFstFST_NodeAndInCount;
}

@end

void OrgApacheLuceneUtilFstFST_NodeAndInCount_initWithInt_withInt_(OrgApacheLuceneUtilFstFST_NodeAndInCount *self, jint node, jint count) {
  NSObject_init(self);
  self->node_ = node;
  self->count_ = count;
}

OrgApacheLuceneUtilFstFST_NodeAndInCount *new_OrgApacheLuceneUtilFstFST_NodeAndInCount_initWithInt_withInt_(jint node, jint count) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST_NodeAndInCount, initWithInt_withInt_, node, count)
}

OrgApacheLuceneUtilFstFST_NodeAndInCount *create_OrgApacheLuceneUtilFstFST_NodeAndInCount_initWithInt_withInt_(jint node, jint count) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST_NodeAndInCount, initWithInt_withInt_, node, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST_NodeAndInCount)

@implementation OrgApacheLuceneUtilFstFST_NodeQueue

- (instancetype)initWithInt:(jint)topN {
  OrgApacheLuceneUtilFstFST_NodeQueue_initWithInt_(self, topN);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneUtilFstFST_NodeAndInCount *)a
                    withId:(OrgApacheLuceneUtilFstFST_NodeAndInCount *)b {
  jint cmp = [((OrgApacheLuceneUtilFstFST_NodeAndInCount *) nil_chk(a)) compareToWithId:b];
  JreAssert(cmp != 0, @"org/apache/lucene/util/fst/FST.java:1867 condition failed: assert cmp != 0;");
  return cmp < 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(lessThanWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "lessThan", "LOrgApacheLuceneUtilFstFST_NodeAndInCount;LOrgApacheLuceneUtilFstFST_NodeAndInCount;", "LOrgApacheLuceneUtilFstFST;", "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/util/fst/FST$NodeAndInCount;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstFST_NodeQueue = { "NodeQueue", "org.apache.lucene.util.fst", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneUtilFstFST_NodeQueue;
}

@end

void OrgApacheLuceneUtilFstFST_NodeQueue_initWithInt_(OrgApacheLuceneUtilFstFST_NodeQueue *self, jint topN) {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_withBoolean_(self, topN, false);
}

OrgApacheLuceneUtilFstFST_NodeQueue *new_OrgApacheLuceneUtilFstFST_NodeQueue_initWithInt_(jint topN) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstFST_NodeQueue, initWithInt_, topN)
}

OrgApacheLuceneUtilFstFST_NodeQueue *create_OrgApacheLuceneUtilFstFST_NodeQueue_initWithInt_(jint topN) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstFST_NodeQueue, initWithInt_, topN)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstFST_NodeQueue)
