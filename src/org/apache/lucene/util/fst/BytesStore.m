//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/fst/BytesStore.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/fst/BytesStore.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/ForwardBytesReader.h"
#include "org/apache/lucene/util/fst/ReverseBytesReader.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/fst/BytesStore must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilFstBytesStore () {
 @public
  id<JavaUtilList> blocks_;
  jint blockSize_;
  jint blockBits_;
  jint blockMask_;
  IOSByteArray *current_;
  jint nextWrite_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBytesStore, blocks_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBytesStore, current_, IOSByteArray *)

inline jlong OrgApacheLuceneUtilFstBytesStore_get_BASE_RAM_BYTES_USED(void);
static jlong OrgApacheLuceneUtilFstBytesStore_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilFstBytesStore, BASE_RAM_BYTES_USED, jlong)

@interface OrgApacheLuceneUtilFstBytesStore_1 : OrgApacheLuceneUtilFstFST_BytesReader {
 @public
  OrgApacheLuceneUtilFstBytesStore *this$0_;
  IOSByteArray *current_;
  jint nextBuffer_;
  jint nextRead_;
}

- (instancetype)initWithOrgApacheLuceneUtilFstBytesStore:(OrgApacheLuceneUtilFstBytesStore *)outer$;

- (jbyte)readByte;

- (void)skipBytesWithLong:(jlong)count;

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len;

- (jlong)getPosition;

- (void)setPositionWithLong:(jlong)pos;

- (jboolean)reversed;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstBytesStore_1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBytesStore_1, current_, IOSByteArray *)

__attribute__((unused)) static void OrgApacheLuceneUtilFstBytesStore_1_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore_1 *self, OrgApacheLuceneUtilFstBytesStore *outer$);

__attribute__((unused)) static OrgApacheLuceneUtilFstBytesStore_1 *new_OrgApacheLuceneUtilFstBytesStore_1_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstBytesStore_1 *create_OrgApacheLuceneUtilFstBytesStore_1_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore *outer$);

@interface OrgApacheLuceneUtilFstBytesStore_2 : OrgApacheLuceneUtilFstFST_BytesReader {
 @public
  OrgApacheLuceneUtilFstBytesStore *this$0_;
  IOSByteArray *current_;
  jint nextBuffer_;
  jint nextRead_;
}

- (instancetype)initWithOrgApacheLuceneUtilFstBytesStore:(OrgApacheLuceneUtilFstBytesStore *)outer$;

- (jbyte)readByte;

- (void)skipBytesWithLong:(jlong)count;

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len;

- (jlong)getPosition;

- (void)setPositionWithLong:(jlong)pos;

- (jboolean)reversed;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstBytesStore_2)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBytesStore_2, current_, IOSByteArray *)

__attribute__((unused)) static void OrgApacheLuceneUtilFstBytesStore_2_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore_2 *self, OrgApacheLuceneUtilFstBytesStore *outer$);

__attribute__((unused)) static OrgApacheLuceneUtilFstBytesStore_2 *new_OrgApacheLuceneUtilFstBytesStore_2_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstBytesStore_2 *create_OrgApacheLuceneUtilFstBytesStore_2_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore *outer$);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFstBytesStore)

@implementation OrgApacheLuceneUtilFstBytesStore

- (instancetype)initPackagePrivateWithInt:(jint)blockBits {
  OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithInt_(self, blockBits);
  return self;
}

- (instancetype)initPackagePrivateWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
                                                           withLong:(jlong)numBytes
                                                            withInt:(jint)maxBlockSize {
  OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithOrgApacheLuceneStoreDataInput_withLong_withInt_(self, inArg, numBytes, maxBlockSize);
  return self;
}

- (void)writeByteWithInt:(jint)dest
                withByte:(jbyte)b {
  jint blockIndex = JreRShift32(dest, blockBits_);
  IOSByteArray *block = [((id<JavaUtilList>) nil_chk(blocks_)) getWithInt:blockIndex];
  *IOSByteArray_GetRef(nil_chk(block), dest & blockMask_) = b;
}

- (void)writeByteWithByte:(jbyte)b {
  if (nextWrite_ == blockSize_) {
    JreStrongAssignAndConsume(&current_, [IOSByteArray newArrayWithLength:blockSize_]);
    [((id<JavaUtilList>) nil_chk(blocks_)) addWithId:current_];
    nextWrite_ = 0;
  }
  *IOSByteArray_GetRef(nil_chk(current_), nextWrite_++) = b;
}

- (void)writeBytesWithByteArray:(IOSByteArray *)b
                        withInt:(jint)offset
                        withInt:(jint)len {
  while (len > 0) {
    jint chunk = blockSize_ - nextWrite_;
    if (len <= chunk) {
      JreAssert(b != nil, @"org/apache/lucene/util/fst/BytesStore.java:103 condition failed: assert b != null;");
      JreAssert(current_ != nil, @"org/apache/lucene/util/fst/BytesStore.java:104 condition failed: assert current != null;");
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, offset, current_, nextWrite_, len);
      nextWrite_ += len;
      break;
    }
    else {
      if (chunk > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, offset, current_, nextWrite_, chunk);
        offset += chunk;
        len -= chunk;
      }
      JreStrongAssignAndConsume(&current_, [IOSByteArray newArrayWithLength:blockSize_]);
      [((id<JavaUtilList>) nil_chk(blocks_)) addWithId:current_];
      nextWrite_ = 0;
    }
  }
}

- (jint)getBlockBits {
  return blockBits_;
}

- (void)writeBytesWithLong:(jlong)dest
             withByteArray:(IOSByteArray *)b
                   withInt:(jint)offset
                   withInt:(jint)len {
  JreAssert(dest + len <= [self getPosition], JreStrcat("$J$J$I", @"dest=", dest, @" pos=", [self getPosition], @" len=", len));
  jlong end = dest + len;
  jint blockIndex = (jint) (JreRShift64(end, blockBits_));
  jint downTo = (jint) (end & blockMask_);
  if (downTo == 0) {
    blockIndex--;
    downTo = blockSize_;
  }
  IOSByteArray *block = [((id<JavaUtilList>) nil_chk(blocks_)) getWithInt:blockIndex];
  while (len > 0) {
    if (len <= downTo) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, offset, block, downTo - len, len);
      break;
    }
    else {
      len -= downTo;
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, offset + len, block, 0, downTo);
      blockIndex--;
      block = [blocks_ getWithInt:blockIndex];
      downTo = blockSize_;
    }
  }
}

- (void)copyBytesWithLong:(jlong)src
                 withLong:(jlong)dest
                  withInt:(jint)len {
  JreAssert(src < dest, @"org/apache/lucene/util/fst/BytesStore.java:189 condition failed: assert src < dest;");
  jlong end = src + len;
  jint blockIndex = (jint) (JreRShift64(end, blockBits_));
  jint downTo = (jint) (end & blockMask_);
  if (downTo == 0) {
    blockIndex--;
    downTo = blockSize_;
  }
  IOSByteArray *block = [((id<JavaUtilList>) nil_chk(blocks_)) getWithInt:blockIndex];
  while (len > 0) {
    if (len <= downTo) {
      [self writeBytesWithLong:dest withByteArray:block withInt:downTo - len withInt:len];
      break;
    }
    else {
      len -= downTo;
      [self writeBytesWithLong:dest + len withByteArray:block withInt:0 withInt:downTo];
      blockIndex--;
      block = [blocks_ getWithInt:blockIndex];
      downTo = blockSize_;
    }
  }
}

- (void)writeIntWithLong:(jlong)pos
                 withInt:(jint)value {
  jint blockIndex = (jint) (JreRShift64(pos, blockBits_));
  jint upto = (jint) (pos & blockMask_);
  IOSByteArray *block = [((id<JavaUtilList>) nil_chk(blocks_)) getWithInt:blockIndex];
  jint shift = 24;
  for (jint i = 0; i < 4; i++) {
    *IOSByteArray_GetRef(nil_chk(block), upto++) = (jbyte) (JreRShift32(value, shift));
    shift -= 8;
    if (upto == blockSize_) {
      upto = 0;
      blockIndex++;
      block = [blocks_ getWithInt:blockIndex];
    }
  }
}

- (void)reverseWithLong:(jlong)srcPos
               withLong:(jlong)destPos {
  JreAssert(srcPos < destPos, @"org/apache/lucene/util/fst/BytesStore.java:264 condition failed: assert srcPos < destPos;");
  JreAssert(destPos < [self getPosition], @"org/apache/lucene/util/fst/BytesStore.java:265 condition failed: assert destPos < getPosition();");
  jint srcBlockIndex = (jint) (JreRShift64(srcPos, blockBits_));
  jint src = (jint) (srcPos & blockMask_);
  IOSByteArray *srcBlock = [((id<JavaUtilList>) nil_chk(blocks_)) getWithInt:srcBlockIndex];
  jint destBlockIndex = (jint) (JreRShift64(destPos, blockBits_));
  jint dest = (jint) (destPos & blockMask_);
  IOSByteArray *destBlock = [blocks_ getWithInt:destBlockIndex];
  jint limit = JreIntDiv((jint) (destPos - srcPos + 1), 2);
  for (jint i = 0; i < limit; i++) {
    jbyte b = IOSByteArray_Get(nil_chk(srcBlock), src);
    *IOSByteArray_GetRef(srcBlock, src) = IOSByteArray_Get(nil_chk(destBlock), dest);
    *IOSByteArray_GetRef(destBlock, dest) = b;
    src++;
    if (src == blockSize_) {
      srcBlockIndex++;
      srcBlock = [blocks_ getWithInt:srcBlockIndex];
      src = 0;
    }
    dest--;
    if (dest == -1) {
      destBlockIndex--;
      destBlock = [blocks_ getWithInt:destBlockIndex];
      dest = blockSize_ - 1;
    }
  }
}

- (void)skipBytesWithInt:(jint)len {
  while (len > 0) {
    jint chunk = blockSize_ - nextWrite_;
    if (len <= chunk) {
      nextWrite_ += len;
      break;
    }
    else {
      len -= chunk;
      JreStrongAssignAndConsume(&current_, [IOSByteArray newArrayWithLength:blockSize_]);
      [((id<JavaUtilList>) nil_chk(blocks_)) addWithId:current_];
      nextWrite_ = 0;
    }
  }
}

- (jlong)getPosition {
  return ((jlong) [((id<JavaUtilList>) nil_chk(blocks_)) size] - 1) * blockSize_ + nextWrite_;
}

- (void)truncateWithLong:(jlong)newLen {
  JreAssert(newLen <= [self getPosition], @"org/apache/lucene/util/fst/BytesStore.java:323 condition failed: assert newLen <= getPosition();");
  JreAssert(newLen >= 0, @"org/apache/lucene/util/fst/BytesStore.java:324 condition failed: assert newLen >= 0;");
  jint blockIndex = (jint) (JreRShift64(newLen, blockBits_));
  nextWrite_ = (jint) (newLen & blockMask_);
  if (nextWrite_ == 0) {
    blockIndex--;
    nextWrite_ = blockSize_;
  }
  [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(blocks_)) subListWithInt:blockIndex + 1 withInt:[blocks_ size]])) clear];
  if (newLen == 0) {
    JreStrongAssign(&current_, nil);
  }
  else {
    JreStrongAssign(&current_, [blocks_ getWithInt:blockIndex]);
  }
  JreAssert(newLen == [self getPosition], @"org/apache/lucene/util/fst/BytesStore.java:337 condition failed: assert newLen == getPosition();");
}

- (void)finish {
  if (current_ != nil) {
    IOSByteArray *lastBuffer = [IOSByteArray arrayWithLength:nextWrite_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(current_, 0, lastBuffer, 0, nextWrite_);
    [((id<JavaUtilList>) nil_chk(blocks_)) setWithInt:[blocks_ size] - 1 withId:lastBuffer];
    JreStrongAssign(&current_, nil);
  }
}

- (void)writeToWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  for (IOSByteArray * __strong block in nil_chk(blocks_)) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeBytesWithByteArray:block withInt:0 withInt:((IOSByteArray *) nil_chk(block))->size_];
  }
}

- (OrgApacheLuceneUtilFstFST_BytesReader *)getForwardReader {
  if ([((id<JavaUtilList>) nil_chk(blocks_)) size] == 1) {
    return create_OrgApacheLuceneUtilFstForwardBytesReader_initPackagePrivateWithByteArray_([blocks_ getWithInt:0]);
  }
  return create_OrgApacheLuceneUtilFstBytesStore_1_initWithOrgApacheLuceneUtilFstBytesStore_(self);
}

- (OrgApacheLuceneUtilFstFST_BytesReader *)getReverseReader {
  return [self getReverseReaderWithBoolean:true];
}

- (OrgApacheLuceneUtilFstFST_BytesReader *)getReverseReaderWithBoolean:(jboolean)allowSingle {
  if (allowSingle && [((id<JavaUtilList>) nil_chk(blocks_)) size] == 1) {
    return create_OrgApacheLuceneUtilFstReverseBytesReader_initPackagePrivateWithByteArray_([((id<JavaUtilList>) nil_chk(blocks_)) getWithInt:0]);
  }
  return create_OrgApacheLuceneUtilFstBytesStore_2_initWithOrgApacheLuceneUtilFstBytesStore_(self);
}

- (jlong)ramBytesUsed {
  jlong size = OrgApacheLuceneUtilFstBytesStore_BASE_RAM_BYTES_USED;
  for (IOSByteArray * __strong block in nil_chk(blocks_)) {
    size += OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithByteArray_(block);
  }
  return size;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (NSString *)description {
  return JreStrcat("$$IC", [[self java_getClass] getSimpleName], @"(numBlocks=", [((id<JavaUtilList>) nil_chk(blocks_)) size], ')');
}

- (void)dealloc {
  RELEASE_(blocks_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_BytesReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_BytesReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_BytesReader;", 0x0, 20, 21, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:);
  methods[1].selector = @selector(initPackagePrivateWithOrgApacheLuceneStoreDataInput:withLong:withInt:);
  methods[2].selector = @selector(writeByteWithInt:withByte:);
  methods[3].selector = @selector(writeByteWithByte:);
  methods[4].selector = @selector(writeBytesWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(getBlockBits);
  methods[6].selector = @selector(writeBytesWithLong:withByteArray:withInt:withInt:);
  methods[7].selector = @selector(copyBytesWithLong:withLong:withInt:);
  methods[8].selector = @selector(writeIntWithLong:withInt:);
  methods[9].selector = @selector(reverseWithLong:withLong:);
  methods[10].selector = @selector(skipBytesWithInt:);
  methods[11].selector = @selector(getPosition);
  methods[12].selector = @selector(truncateWithLong:);
  methods[13].selector = @selector(finish);
  methods[14].selector = @selector(writeToWithOrgApacheLuceneStoreDataOutput:);
  methods[15].selector = @selector(getForwardReader);
  methods[16].selector = @selector(getReverseReader);
  methods[17].selector = @selector(getReverseReaderWithBoolean:);
  methods[18].selector = @selector(ramBytesUsed);
  methods[19].selector = @selector(getChildResources);
  methods[20].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED", "J", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "blocks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blockBits_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blockMask_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "current_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextWrite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LOrgApacheLuceneStoreDataInput;JI", "LJavaIoIOException;", "writeByte", "IB", "B", "writeBytes", "[BII", "J[BII", "copyBytes", "JJI", "writeInt", "JI", "reverse", "JJ", "skipBytes", "truncate", "J", "writeTo", "LOrgApacheLuceneStoreDataOutput;", "getReverseReader", "Z", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "toString", &OrgApacheLuceneUtilFstBytesStore_BASE_RAM_BYTES_USED, "Ljava/util/List<[B>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstBytesStore = { "BytesStore", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x0, 21, 7, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFstBytesStore;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFstBytesStore class]) {
    OrgApacheLuceneUtilFstBytesStore_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilFstBytesStore_class_()) + OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(JavaUtilArrayList_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFstBytesStore)
  }
}

@end

void OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithInt_(OrgApacheLuceneUtilFstBytesStore *self, jint blockBits) {
  OrgApacheLuceneStoreDataOutput_init(self);
  JreStrongAssignAndConsume(&self->blocks_, new_JavaUtilArrayList_init());
  self->blockBits_ = blockBits;
  self->blockSize_ = JreLShift32(1, blockBits);
  self->blockMask_ = self->blockSize_ - 1;
  self->nextWrite_ = self->blockSize_;
}

OrgApacheLuceneUtilFstBytesStore *new_OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithInt_(jint blockBits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstBytesStore, initPackagePrivateWithInt_, blockBits)
}

OrgApacheLuceneUtilFstBytesStore *create_OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithInt_(jint blockBits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstBytesStore, initPackagePrivateWithInt_, blockBits)
}

void OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithOrgApacheLuceneStoreDataInput_withLong_withInt_(OrgApacheLuceneUtilFstBytesStore *self, OrgApacheLuceneStoreDataInput *inArg, jlong numBytes, jint maxBlockSize) {
  OrgApacheLuceneStoreDataOutput_init(self);
  JreStrongAssignAndConsume(&self->blocks_, new_JavaUtilArrayList_init());
  jint blockSize = 2;
  jint blockBits = 1;
  while (blockSize < numBytes && blockSize < maxBlockSize) {
    blockSize *= 2;
    blockBits++;
  }
  self->blockBits_ = blockBits;
  self->blockSize_ = blockSize;
  self->blockMask_ = blockSize - 1;
  jlong left = numBytes;
  while (left > 0) {
    jint chunk = (jint) JavaLangMath_minWithLong_withLong_(blockSize, left);
    IOSByteArray *block = [IOSByteArray arrayWithLength:chunk];
    [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readBytesWithByteArray:block withInt:0 withInt:block->size_];
    [self->blocks_ addWithId:block];
    left -= chunk;
  }
  self->nextWrite_ = ((IOSByteArray *) nil_chk([self->blocks_ getWithInt:[self->blocks_ size] - 1]))->size_;
}

OrgApacheLuceneUtilFstBytesStore *new_OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithOrgApacheLuceneStoreDataInput_withLong_withInt_(OrgApacheLuceneStoreDataInput *inArg, jlong numBytes, jint maxBlockSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstBytesStore, initPackagePrivateWithOrgApacheLuceneStoreDataInput_withLong_withInt_, inArg, numBytes, maxBlockSize)
}

OrgApacheLuceneUtilFstBytesStore *create_OrgApacheLuceneUtilFstBytesStore_initPackagePrivateWithOrgApacheLuceneStoreDataInput_withLong_withInt_(OrgApacheLuceneStoreDataInput *inArg, jlong numBytes, jint maxBlockSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstBytesStore, initPackagePrivateWithOrgApacheLuceneStoreDataInput_withLong_withInt_, inArg, numBytes, maxBlockSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstBytesStore)

@implementation OrgApacheLuceneUtilFstBytesStore_1

- (instancetype)initWithOrgApacheLuceneUtilFstBytesStore:(OrgApacheLuceneUtilFstBytesStore *)outer$ {
  OrgApacheLuceneUtilFstBytesStore_1_initWithOrgApacheLuceneUtilFstBytesStore_(self, outer$);
  return self;
}

- (jbyte)readByte {
  if (nextRead_ == this$0_->blockSize_) {
    JreStrongAssign(&current_, [((id<JavaUtilList>) nil_chk(this$0_->blocks_)) getWithInt:nextBuffer_++]);
    nextRead_ = 0;
  }
  return IOSByteArray_Get(nil_chk(current_), nextRead_++);
}

- (void)skipBytesWithLong:(jlong)count {
  [self setPositionWithLong:[self getPosition] + count];
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  while (len > 0) {
    jint chunkLeft = this$0_->blockSize_ - nextRead_;
    if (len <= chunkLeft) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(current_, nextRead_, b, offset, len);
      nextRead_ += len;
      break;
    }
    else {
      if (chunkLeft > 0) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(current_, nextRead_, b, offset, chunkLeft);
        offset += chunkLeft;
        len -= chunkLeft;
      }
      JreStrongAssign(&current_, [((id<JavaUtilList>) nil_chk(this$0_->blocks_)) getWithInt:nextBuffer_++]);
      nextRead_ = 0;
    }
  }
}

- (jlong)getPosition {
  return ((jlong) nextBuffer_ - 1) * this$0_->blockSize_ + nextRead_;
}

- (void)setPositionWithLong:(jlong)pos {
  jint bufferIndex = (jint) (JreRShift64(pos, this$0_->blockBits_));
  nextBuffer_ = bufferIndex + 1;
  JreStrongAssign(&current_, [((id<JavaUtilList>) nil_chk(this$0_->blocks_)) getWithInt:bufferIndex]);
  nextRead_ = (jint) (pos & this$0_->blockMask_);
  JreAssert([self getPosition] == pos, @"org/apache/lucene/util/fst/BytesStore.java:410 condition failed: assert getPosition() == pos;");
}

- (jboolean)reversed {
  return false;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilFstBytesStore:);
  methods[1].selector = @selector(readByte);
  methods[2].selector = @selector(skipBytesWithLong:);
  methods[3].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(getPosition);
  methods[5].selector = @selector(setPositionWithLong:);
  methods[6].selector = @selector(reversed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneUtilFstBytesStore;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "current_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextBuffer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilFstBytesStore;", "skipBytes", "J", "readBytes", "[BII", "setPosition", "getForwardReader" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstBytesStore_1 = { "", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x8010, 7, 4, 0, -1, 6, -1, -1 };
  return &_OrgApacheLuceneUtilFstBytesStore_1;
}

@end

void OrgApacheLuceneUtilFstBytesStore_1_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore_1 *self, OrgApacheLuceneUtilFstBytesStore *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneUtilFstFST_BytesReader_init(self);
  self->nextRead_ = outer$->blockSize_;
}

OrgApacheLuceneUtilFstBytesStore_1 *new_OrgApacheLuceneUtilFstBytesStore_1_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstBytesStore_1, initWithOrgApacheLuceneUtilFstBytesStore_, outer$)
}

OrgApacheLuceneUtilFstBytesStore_1 *create_OrgApacheLuceneUtilFstBytesStore_1_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstBytesStore_1, initWithOrgApacheLuceneUtilFstBytesStore_, outer$)
}

@implementation OrgApacheLuceneUtilFstBytesStore_2

- (instancetype)initWithOrgApacheLuceneUtilFstBytesStore:(OrgApacheLuceneUtilFstBytesStore *)outer$ {
  OrgApacheLuceneUtilFstBytesStore_2_initWithOrgApacheLuceneUtilFstBytesStore_(self, outer$);
  return self;
}

- (jbyte)readByte {
  if (nextRead_ == -1) {
    JreStrongAssign(&current_, [((id<JavaUtilList>) nil_chk(this$0_->blocks_)) getWithInt:nextBuffer_--]);
    nextRead_ = this$0_->blockSize_ - 1;
  }
  return IOSByteArray_Get(nil_chk(current_), nextRead_--);
}

- (void)skipBytesWithLong:(jlong)count {
  [self setPositionWithLong:[self getPosition] - count];
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  for (jint i = 0; i < len; i++) {
    *IOSByteArray_GetRef(nil_chk(b), offset + i) = [self readByte];
  }
}

- (jlong)getPosition {
  return ((jlong) nextBuffer_ + 1) * this$0_->blockSize_ + nextRead_;
}

- (void)setPositionWithLong:(jlong)pos {
  jint bufferIndex = (jint) (JreRShift64(pos, this$0_->blockBits_));
  nextBuffer_ = bufferIndex - 1;
  JreStrongAssign(&current_, [((id<JavaUtilList>) nil_chk(this$0_->blocks_)) getWithInt:bufferIndex]);
  nextRead_ = (jint) (pos & this$0_->blockMask_);
  JreAssert([self getPosition] == pos, JreStrcat("$J$J", @"pos=", pos, @" getPos()=", [self getPosition]));
}

- (jboolean)reversed {
  return true;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilFstBytesStore:);
  methods[1].selector = @selector(readByte);
  methods[2].selector = @selector(skipBytesWithLong:);
  methods[3].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(getPosition);
  methods[5].selector = @selector(setPositionWithLong:);
  methods[6].selector = @selector(reversed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneUtilFstBytesStore;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "current_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextBuffer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilFstBytesStore;", "skipBytes", "J", "readBytes", "[BII", "setPosition", "getReverseReaderWithBoolean:" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstBytesStore_2 = { "", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x8010, 7, 4, 0, -1, 6, -1, -1 };
  return &_OrgApacheLuceneUtilFstBytesStore_2;
}

@end

void OrgApacheLuceneUtilFstBytesStore_2_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore_2 *self, OrgApacheLuceneUtilFstBytesStore *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneUtilFstFST_BytesReader_init(self);
  JreStrongAssign(&self->current_, [((id<JavaUtilList>) nil_chk(outer$->blocks_)) size] == 0 ? nil : [outer$->blocks_ getWithInt:0]);
  self->nextBuffer_ = -1;
  self->nextRead_ = 0;
}

OrgApacheLuceneUtilFstBytesStore_2 *new_OrgApacheLuceneUtilFstBytesStore_2_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstBytesStore_2, initWithOrgApacheLuceneUtilFstBytesStore_, outer$)
}

OrgApacheLuceneUtilFstBytesStore_2 *create_OrgApacheLuceneUtilFstBytesStore_2_initWithOrgApacheLuceneUtilFstBytesStore_(OrgApacheLuceneUtilFstBytesStore *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstBytesStore_2, initWithOrgApacheLuceneUtilFstBytesStore_, outer$)
}
