//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./misc/src/java/org/apache/lucene/util/fst/ListOfOutputs.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/fst/ListOfOutputs.h"
#include "org/apache/lucene/util/fst/Outputs.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/fst/ListOfOutputs must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneUtilFstListOfOutputs () {
 @public
  OrgApacheLuceneUtilFstOutputs *outputs_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstListOfOutputs, outputs_, OrgApacheLuceneUtilFstOutputs *)

inline jlong OrgApacheLuceneUtilFstListOfOutputs_get_BASE_LIST_NUM_BYTES(void);
static jlong OrgApacheLuceneUtilFstListOfOutputs_BASE_LIST_NUM_BYTES;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilFstListOfOutputs, BASE_LIST_NUM_BYTES, jlong)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneUtilFstListOfOutputs)

@implementation OrgApacheLuceneUtilFstListOfOutputs

- (instancetype)initWithOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs {
  OrgApacheLuceneUtilFstListOfOutputs_initWithOrgApacheLuceneUtilFstOutputs_(self, outputs);
  return self;
}

- (id)commonWithId:(id)output1
            withId:(id)output2 {
  return [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) commonWithId:output1 withId:output2];
}

- (id)subtractWithId:(id)object
              withId:(id)inc {
  return [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) subtractWithId:object withId:inc];
}

- (id)addWithId:(id)prefix
         withId:(id)output {
  JreAssert(!([JavaUtilList_class_() isInstance:prefix]), @"org/apache/lucene/util/fst/ListOfOutputs.java:89 condition failed: assert !(prefix instanceof List);");
  if (!([JavaUtilList_class_() isInstance:output])) {
    return [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) addWithId:prefix withId:output];
  }
  else {
    id<JavaUtilList> outputList = (id<JavaUtilList>) cast_check(output, JavaUtilList_class_());
    id<JavaUtilList> addedList = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(outputList)) size]);
    for (id __strong _output in outputList) {
      [addedList addWithId:[((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) addWithId:prefix withId:_output]];
    }
    return addedList;
  }
}

- (void)writeWithId:(id)output
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  JreAssert(!([JavaUtilList_class_() isInstance:output]), @"org/apache/lucene/util/fst/ListOfOutputs.java:104 condition failed: assert !(output instanceof List);");
  [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) writeWithId:output withOrgApacheLuceneStoreDataOutput:outArg];
}

- (void)writeFinalOutputWithId:(id)output
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  if (!([JavaUtilList_class_() isInstance:output])) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:1];
    [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) writeWithId:output withOrgApacheLuceneStoreDataOutput:outArg];
  }
  else {
    id<JavaUtilList> outputList = (id<JavaUtilList>) cast_check(output, JavaUtilList_class_());
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:[((id<JavaUtilList>) nil_chk(outputList)) size]];
    for (id __strong eachOutput in outputList) {
      [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) writeWithId:eachOutput withOrgApacheLuceneStoreDataOutput:outArg];
    }
  }
}

- (id)readWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  return [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) readWithOrgApacheLuceneStoreDataInput:inArg];
}

- (void)skipOutputWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) skipOutputWithOrgApacheLuceneStoreDataInput:inArg];
}

- (id)readFinalOutputWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  jint count = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  if (count == 1) {
    return [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) readWithOrgApacheLuceneStoreDataInput:inArg];
  }
  else {
    id<JavaUtilList> outputList = create_JavaUtilArrayList_initWithInt_(count);
    for (jint i = 0; i < count; i++) {
      [outputList addWithId:[((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) readWithOrgApacheLuceneStoreDataInput:inArg]];
    }
    return outputList;
  }
}

- (void)skipFinalOutputWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  jint count = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  for (jint i = 0; i < count; i++) {
    [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) skipOutputWithOrgApacheLuceneStoreDataInput:inArg];
  }
}

- (id)getNoOutput {
  return [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) getNoOutput];
}

- (NSString *)outputToStringWithId:(id)output {
  if (!([JavaUtilList_class_() isInstance:output])) {
    return [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) outputToStringWithId:output];
  }
  else {
    id<JavaUtilList> outputList = (id<JavaUtilList>) cast_check(output, JavaUtilList_class_());
    JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
    [b appendWithChar:'['];
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(outputList)) size]; i++) {
      if (i > 0) {
        [b appendWithNSString:@", "];
      }
      [b appendWithNSString:[((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) outputToStringWithId:[outputList getWithInt:i]]];
    }
    [b appendWithChar:']'];
    return [b description];
  }
}

- (id)mergeWithId:(id)first
           withId:(id)second {
  id<JavaUtilList> outputList = create_JavaUtilArrayList_init();
  if (!([JavaUtilList_class_() isInstance:first])) {
    [outputList addWithId:first];
  }
  else {
    [outputList addAllWithJavaUtilCollection:(id<JavaUtilList>) cast_check(first, JavaUtilList_class_())];
  }
  if (!([JavaUtilList_class_() isInstance:second])) {
    [outputList addWithId:second];
  }
  else {
    [outputList addAllWithJavaUtilCollection:(id<JavaUtilList>) cast_check(second, JavaUtilList_class_())];
  }
  return outputList;
}

- (NSString *)description {
  return JreStrcat("$@C", @"OneOrMoreOutputs(", outputs_, ')');
}

- (id<JavaUtilList>)asListWithId:(id)output {
  if (!([JavaUtilList_class_() isInstance:output])) {
    id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_(1);
    [result addWithId:output];
    return result;
  }
  else {
    return (id<JavaUtilList>) cast_check(output, JavaUtilList_class_());
  }
}

- (jlong)ramBytesUsedWithId:(id)output {
  jlong bytes = 0;
  if ([JavaUtilList_class_() isInstance:output]) {
    bytes += OrgApacheLuceneUtilFstListOfOutputs_BASE_LIST_NUM_BYTES;
    id<JavaUtilList> outputList = (id<JavaUtilList>) cast_check(output, JavaUtilList_class_());
    for (id __strong _output in nil_chk(outputList)) {
      bytes += [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) ramBytesUsedWithId:_output];
    }
    bytes += 2 * [outputList size] * JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF);
  }
  else {
    bytes += [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) ramBytesUsedWithId:output];
  }
  return bytes;
}

- (void)dealloc {
  RELEASE_(outputs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 7, 8, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 11, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, 8, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 11, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 11, 8, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 19, 16, -1, 20, -1, -1 },
    { NULL, "J", 0x1, 21, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilFstOutputs:);
  methods[1].selector = @selector(commonWithId:withId:);
  methods[2].selector = @selector(subtractWithId:withId:);
  methods[3].selector = @selector(addWithId:withId:);
  methods[4].selector = @selector(writeWithId:withOrgApacheLuceneStoreDataOutput:);
  methods[5].selector = @selector(writeFinalOutputWithId:withOrgApacheLuceneStoreDataOutput:);
  methods[6].selector = @selector(readWithOrgApacheLuceneStoreDataInput:);
  methods[7].selector = @selector(skipOutputWithOrgApacheLuceneStoreDataInput:);
  methods[8].selector = @selector(readFinalOutputWithOrgApacheLuceneStoreDataInput:);
  methods[9].selector = @selector(skipFinalOutputWithOrgApacheLuceneStoreDataInput:);
  methods[10].selector = @selector(getNoOutput);
  methods[11].selector = @selector(outputToStringWithId:);
  methods[12].selector = @selector(mergeWithId:withId:);
  methods[13].selector = @selector(description);
  methods[14].selector = @selector(asListWithId:);
  methods[15].selector = @selector(ramBytesUsedWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "outputs_", "LOrgApacheLuceneUtilFstOutputs;", .constantValue.asLong = 0, 0x12, -1, -1, 22, -1 },
    { "BASE_LIST_NUM_BYTES", "J", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilFstOutputs;", "(Lorg/apache/lucene/util/fst/Outputs<TT;>;)V", "common", "LNSObject;LNSObject;", "subtract", "add", "write", "LNSObject;LOrgApacheLuceneStoreDataOutput;", "LJavaIoIOException;", "writeFinalOutput", "read", "LOrgApacheLuceneStoreDataInput;", "skipOutput", "readFinalOutput", "skipFinalOutput", "outputToString", "LNSObject;", "merge", "toString", "asList", "(Ljava/lang/Object;)Ljava/util/List<TT;>;", "ramBytesUsed", "Lorg/apache/lucene/util/fst/Outputs<TT;>;", &OrgApacheLuceneUtilFstListOfOutputs_BASE_LIST_NUM_BYTES, "<T:Ljava/lang/Object;>Lorg/apache/lucene/util/fst/Outputs<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstListOfOutputs = { "ListOfOutputs", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x11, 16, 2, -1, -1, -1, 24, -1 };
  return &_OrgApacheLuceneUtilFstListOfOutputs;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneUtilFstListOfOutputs class]) {
    OrgApacheLuceneUtilFstListOfOutputs_BASE_LIST_NUM_BYTES = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithId_(create_JavaUtilArrayList_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneUtilFstListOfOutputs)
  }
}

@end

void OrgApacheLuceneUtilFstListOfOutputs_initWithOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstListOfOutputs *self, OrgApacheLuceneUtilFstOutputs *outputs) {
  OrgApacheLuceneUtilFstOutputs_init(self);
  JreStrongAssign(&self->outputs_, outputs);
}

OrgApacheLuceneUtilFstListOfOutputs *new_OrgApacheLuceneUtilFstListOfOutputs_initWithOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstOutputs *outputs) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstListOfOutputs, initWithOrgApacheLuceneUtilFstOutputs_, outputs)
}

OrgApacheLuceneUtilFstListOfOutputs *create_OrgApacheLuceneUtilFstListOfOutputs_initWithOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstOutputs *outputs) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstListOfOutputs, initWithOrgApacheLuceneUtilFstOutputs_, outputs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstListOfOutputs)
