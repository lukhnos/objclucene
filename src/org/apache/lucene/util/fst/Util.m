//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/fst/Util.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Writer.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/BitSet.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Spliterator.h"
#include "java/util/TreeSet.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/util/fst/Util.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/util/fst/Util must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheLuceneUtilFstUtil ()

- (instancetype)init;

/*!
 @brief Emit a single state in the <code>dot</code> language.
 */
+ (void)emitDotStateWithJavaIoWriter:(JavaIoWriter *)outArg
                        withNSString:(NSString *)name
                        withNSString:(NSString *)shape
                        withNSString:(NSString *)color
                        withNSString:(NSString *)label;

/*!
 @brief Ensures an arc's label is indeed printable (dot uses US-ASCII).
 */
+ (NSString *)printableLabelWithInt:(jint)label;

@end

__attribute__((unused)) static void OrgApacheLuceneUtilFstUtil_init(OrgApacheLuceneUtilFstUtil *self);

__attribute__((unused)) static OrgApacheLuceneUtilFstUtil *new_OrgApacheLuceneUtilFstUtil_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstUtil *create_OrgApacheLuceneUtilFstUtil_init(void);

__attribute__((unused)) static void OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(JavaIoWriter *outArg, NSString *name, NSString *shape, NSString *color, NSString *label);

__attribute__((unused)) static NSString *OrgApacheLuceneUtilFstUtil_printableLabelWithInt_(jint label);

/*!
 @brief Compares first by the provided comparator, and then
   tie breaks by path.input.
 */
@interface OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator : NSObject < JavaUtilComparator > {
 @public
  id<JavaUtilComparator> comparator_;
}

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

- (jint)compareWithId:(OrgApacheLuceneUtilFstUtil_FSTPath *)a
               withId:(OrgApacheLuceneUtilFstUtil_FSTPath *)b;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator, comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator_initWithJavaUtilComparator_(OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator *self, id<JavaUtilComparator> comparator);

__attribute__((unused)) static OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator *new_OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator *create_OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator)

@interface OrgApacheLuceneUtilFstUtil_TopNSearcher () {
 @public
  OrgApacheLuceneUtilFstFST *fst_;
  OrgApacheLuceneUtilFstFST_BytesReader *bytesReader_;
  jint topN_;
  jint maxQueueDepth_;
  OrgApacheLuceneUtilFstFST_Arc *scratchArc_;
  id<JavaUtilComparator> comparator_;
  id<JavaUtilComparator> pathComparator_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_TopNSearcher, fst_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_TopNSearcher, bytesReader_, OrgApacheLuceneUtilFstFST_BytesReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_TopNSearcher, scratchArc_, OrgApacheLuceneUtilFstFST_Arc *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_TopNSearcher, comparator_, id<JavaUtilComparator>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_TopNSearcher, pathComparator_, id<JavaUtilComparator>)

@implementation OrgApacheLuceneUtilFstUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneUtilFstUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)getWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
        withOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input {
  return OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRef_(fst, input);
}

+ (id)getWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
       withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)input {
  return OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRef_(fst, input);
}

+ (OrgApacheLuceneUtilIntsRef *)getByOutputWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                                withLong:(jlong)targetOutput {
  return OrgApacheLuceneUtilFstUtil_getByOutputWithOrgApacheLuceneUtilFstFST_withLong_(fst, targetOutput);
}

+ (OrgApacheLuceneUtilIntsRef *)getByOutputWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                                withLong:(jlong)targetOutput
                               withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg
                                       withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                       withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)scratchArc
                                   withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)result {
  return OrgApacheLuceneUtilFstUtil_getByOutputWithOrgApacheLuceneUtilFstFST_withLong_withOrgApacheLuceneUtilFstFST_BytesReader_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(fst, targetOutput, inArg, arc, scratchArc, result);
}

+ (OrgApacheLuceneUtilFstUtil_TopResults *)shortestPathsWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                    withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)fromNode
                                                                               withId:(id)startOutput
                                                               withJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                                                              withInt:(jint)topN
                                                                          withBoolean:(jboolean)allowEmptyString {
  return OrgApacheLuceneUtilFstUtil_shortestPathsWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilFstFST_Arc_withId_withJavaUtilComparator_withInt_withBoolean_(fst, fromNode, startOutput, comparator, topN, allowEmptyString);
}

+ (void)toDotWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                          withJavaIoWriter:(JavaIoWriter *)outArg
                               withBoolean:(jboolean)sameRank
                               withBoolean:(jboolean)labelStates {
  OrgApacheLuceneUtilFstUtil_toDotWithOrgApacheLuceneUtilFstFST_withJavaIoWriter_withBoolean_withBoolean_(fst, outArg, sameRank, labelStates);
}

+ (void)emitDotStateWithJavaIoWriter:(JavaIoWriter *)outArg
                        withNSString:(NSString *)name
                        withNSString:(NSString *)shape
                        withNSString:(NSString *)color
                        withNSString:(NSString *)label {
  OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(outArg, name, shape, color, label);
}

+ (NSString *)printableLabelWithInt:(jint)label {
  return OrgApacheLuceneUtilFstUtil_printableLabelWithInt_(label);
}

+ (OrgApacheLuceneUtilIntsRef *)toUTF16WithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratch {
  return OrgApacheLuceneUtilFstUtil_toUTF16WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_(s, scratch);
}

+ (OrgApacheLuceneUtilIntsRef *)toUTF32WithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratch {
  return OrgApacheLuceneUtilFstUtil_toUTF32WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_(s, scratch);
}

+ (OrgApacheLuceneUtilIntsRef *)toUTF32WithCharArray:(IOSCharArray *)s
                                             withInt:(jint)offset
                                             withInt:(jint)length
               withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratch {
  return OrgApacheLuceneUtilFstUtil_toUTF32WithCharArray_withInt_withInt_withOrgApacheLuceneUtilIntsRefBuilder_(s, offset, length, scratch);
}

+ (OrgApacheLuceneUtilIntsRef *)toIntsRefWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)input
                                   withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratch {
  return OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(input, scratch);
}

+ (OrgApacheLuceneUtilBytesRef *)toBytesRefWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input
                                   withOrgApacheLuceneUtilBytesRefBuilder:(OrgApacheLuceneUtilBytesRefBuilder *)scratch {
  return OrgApacheLuceneUtilFstUtil_toBytesRefWithOrgApacheLuceneUtilIntsRef_withOrgApacheLuceneUtilBytesRefBuilder_(input, scratch);
}

+ (OrgApacheLuceneUtilFstFST_Arc *)readCeilArcWithInt:(jint)label
                        withOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                    withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                    withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
            withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg {
  return OrgApacheLuceneUtilFstUtil_readCeilArcWithInt_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_BytesReader_(label, fst, follow, arc, inArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, 2, 3, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 4, 2, 5, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x9, 6, 7, 2, 8, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x9, 6, 9, 2, 10, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstUtil_TopResults;", 0x9, 11, 12, 2, 13, -1, -1 },
    { NULL, "V", 0x9, 14, 15, 2, 16, -1, -1 },
    { NULL, "V", 0xa, 17, 18, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x9, 23, 22, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x9, 29, 30, 2, 31, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithOrgApacheLuceneUtilFstFST:withOrgApacheLuceneUtilIntsRef:);
  methods[2].selector = @selector(getWithOrgApacheLuceneUtilFstFST:withOrgApacheLuceneUtilBytesRef:);
  methods[3].selector = @selector(getByOutputWithOrgApacheLuceneUtilFstFST:withLong:);
  methods[4].selector = @selector(getByOutputWithOrgApacheLuceneUtilFstFST:withLong:withOrgApacheLuceneUtilFstFST_BytesReader:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[5].selector = @selector(shortestPathsWithOrgApacheLuceneUtilFstFST:withOrgApacheLuceneUtilFstFST_Arc:withId:withJavaUtilComparator:withInt:withBoolean:);
  methods[6].selector = @selector(toDotWithOrgApacheLuceneUtilFstFST:withJavaIoWriter:withBoolean:withBoolean:);
  methods[7].selector = @selector(emitDotStateWithJavaIoWriter:withNSString:withNSString:withNSString:withNSString:);
  methods[8].selector = @selector(printableLabelWithInt:);
  methods[9].selector = @selector(toUTF16WithJavaLangCharSequence:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[10].selector = @selector(toUTF32WithJavaLangCharSequence:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[11].selector = @selector(toUTF32WithCharArray:withInt:withInt:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[12].selector = @selector(toIntsRefWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[13].selector = @selector(toBytesRefWithOrgApacheLuceneUtilIntsRef:withOrgApacheLuceneUtilBytesRefBuilder:);
  methods[14].selector = @selector(readCeilArcWithInt:withOrgApacheLuceneUtilFstFST:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "get", "LOrgApacheLuceneUtilFstFST;LOrgApacheLuceneUtilIntsRef;", "LJavaIoIOException;", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST<TT;>;Lorg/apache/lucene/util/IntsRef;)TT;", "LOrgApacheLuceneUtilFstFST;LOrgApacheLuceneUtilBytesRef;", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST<TT;>;Lorg/apache/lucene/util/BytesRef;)TT;", "getByOutput", "LOrgApacheLuceneUtilFstFST;J", "(Lorg/apache/lucene/util/fst/FST<Ljava/lang/Long;>;J)Lorg/apache/lucene/util/IntsRef;", "LOrgApacheLuceneUtilFstFST;JLOrgApacheLuceneUtilFstFST_BytesReader;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilIntsRefBuilder;", "(Lorg/apache/lucene/util/fst/FST<Ljava/lang/Long;>;JLorg/apache/lucene/util/fst/FST$BytesReader;Lorg/apache/lucene/util/fst/FST$Arc<Ljava/lang/Long;>;Lorg/apache/lucene/util/fst/FST$Arc<Ljava/lang/Long;>;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/IntsRef;", "shortestPaths", "LOrgApacheLuceneUtilFstFST;LOrgApacheLuceneUtilFstFST_Arc;LNSObject;LJavaUtilComparator;IZ", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST<TT;>;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;TT;Ljava/util/Comparator<TT;>;IZ)Lorg/apache/lucene/util/fst/Util$TopResults<TT;>;", "toDot", "LOrgApacheLuceneUtilFstFST;LJavaIoWriter;ZZ", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/util/fst/FST<TT;>;Ljava/io/Writer;ZZ)V", "emitDotState", "LJavaIoWriter;LNSString;LNSString;LNSString;LNSString;", "printableLabel", "I", "toUTF16", "LJavaLangCharSequence;LOrgApacheLuceneUtilIntsRefBuilder;", "toUTF32", "[CIILOrgApacheLuceneUtilIntsRefBuilder;", "toIntsRef", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilIntsRefBuilder;", "toBytesRef", "LOrgApacheLuceneUtilIntsRef;LOrgApacheLuceneUtilBytesRefBuilder;", "readCeilArc", "ILOrgApacheLuceneUtilFstFST;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesReader;", "<T:Ljava/lang/Object;>(ILorg/apache/lucene/util/fst/FST<TT;>;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "LOrgApacheLuceneUtilFstUtil_FSTPath;LOrgApacheLuceneUtilFstUtil_TieBreakByInputComparator;LOrgApacheLuceneUtilFstUtil_TopNSearcher;LOrgApacheLuceneUtilFstUtil_Result;LOrgApacheLuceneUtilFstUtil_TopResults;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstUtil = { "Util", "org.apache.lucene.util.fst", ptrTable, methods, NULL, 7, 0x11, 15, 0, -1, 32, -1, -1, -1 };
  return &_OrgApacheLuceneUtilFstUtil;
}

@end

void OrgApacheLuceneUtilFstUtil_init(OrgApacheLuceneUtilFstUtil *self) {
  NSObject_init(self);
}

OrgApacheLuceneUtilFstUtil *new_OrgApacheLuceneUtilFstUtil_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstUtil, init)
}

OrgApacheLuceneUtilFstUtil *create_OrgApacheLuceneUtilFstUtil_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstUtil, init)
}

id OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRef_(OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilIntsRef *input) {
  OrgApacheLuceneUtilFstUtil_initialize();
  OrgApacheLuceneUtilFstFST_Arc *arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fst)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader = [fst getBytesReader];
  id output = JreRetainedLocalValue([((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput]);
  for (jint i = 0; i < ((OrgApacheLuceneUtilIntsRef *) nil_chk(input))->length_; i++) {
    if ([fst findTargetArcWithInt:IOSIntArray_Get(nil_chk(input->ints_), input->offset_ + i) withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:fstReader] == nil) {
      return nil;
    }
    output = [fst->outputs_ addWithId:output withId:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_];
  }
  if ([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]) {
    return [fst->outputs_ addWithId:output withId:arc->nextFinalOutput_];
  }
  else {
    return nil;
  }
}

id OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilBytesRef *input) {
  OrgApacheLuceneUtilFstUtil_initialize();
  JreAssert(((OrgApacheLuceneUtilFstFST *) nil_chk(fst))->inputType_ == JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1), @"org/apache/lucene/util/fst/Util.java:73 condition failed: assert fst.inputType == FST.INPUT_TYPE.BYTE1;");
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader = [fst getBytesReader];
  OrgApacheLuceneUtilFstFST_Arc *arc = [fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  id output = JreRetainedLocalValue([((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput]);
  for (jint i = 0; i < ((OrgApacheLuceneUtilBytesRef *) nil_chk(input))->length_; i++) {
    if ([fst findTargetArcWithInt:IOSByteArray_Get(nil_chk(input->bytes_), i + input->offset_) & (jint) 0xFF withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:fstReader] == nil) {
      return nil;
    }
    output = [fst->outputs_ addWithId:output withId:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_];
  }
  if ([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]) {
    return [fst->outputs_ addWithId:output withId:arc->nextFinalOutput_];
  }
  else {
    return nil;
  }
}

OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_getByOutputWithOrgApacheLuceneUtilFstFST_withLong_(OrgApacheLuceneUtilFstFST *fst, jlong targetOutput) {
  OrgApacheLuceneUtilFstUtil_initialize();
  OrgApacheLuceneUtilFstFST_BytesReader *in = [((OrgApacheLuceneUtilFstFST *) nil_chk(fst)) getBytesReader];
  OrgApacheLuceneUtilFstFST_Arc *arc = JreRetainedLocalValue([fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()]);
  OrgApacheLuceneUtilFstFST_Arc *scratchArc = create_OrgApacheLuceneUtilFstFST_Arc_init();
  OrgApacheLuceneUtilIntsRefBuilder *result = create_OrgApacheLuceneUtilIntsRefBuilder_init();
  return OrgApacheLuceneUtilFstUtil_getByOutputWithOrgApacheLuceneUtilFstFST_withLong_withOrgApacheLuceneUtilFstFST_BytesReader_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(fst, targetOutput, in, arc, scratchArc, result);
}

OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_getByOutputWithOrgApacheLuceneUtilFstFST_withLong_withOrgApacheLuceneUtilFstFST_BytesReader_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneUtilFstFST *fst, jlong targetOutput, OrgApacheLuceneUtilFstFST_BytesReader *inArg, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilFstFST_Arc *scratchArc, OrgApacheLuceneUtilIntsRefBuilder *result) {
  OrgApacheLuceneUtilFstUtil_initialize();
  jlong output = [((JavaLangLong *) nil_chk(((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_)) longLongValue];
  jint upto = 0;
  while (true) {
    if ([arc isFinal]) {
      jlong finalOutput = output + [((JavaLangLong *) nil_chk(arc->nextFinalOutput_)) longLongValue];
      if (finalOutput == targetOutput) {
        [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(result)) setLengthWithInt:upto];
        return [result get];
      }
      else if (finalOutput > targetOutput) {
        return nil;
      }
    }
    if (OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(arc)) {
      [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(result)) growWithInt:1 + upto];
      [((OrgApacheLuceneUtilFstFST *) nil_chk(fst)) readFirstRealTargetArcWithLong:arc->target_ withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
      if (arc->bytesPerArc_ != 0) {
        jint low = 0;
        jint high = arc->numArcs_ - 1;
        jint mid = 0;
        jboolean exact = false;
        while (low <= high) {
          mid = JreURShift32((low + high), 1);
          [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:arc->posArcsStart_];
          [inArg skipBytesWithLong:arc->bytesPerArc_ * mid];
          jbyte flags = [inArg readByte];
          [fst readLabelWithOrgApacheLuceneStoreDataInput:inArg];
          jlong minArcOutput;
          if ((flags & OrgApacheLuceneUtilFstFST_BIT_ARC_HAS_OUTPUT) != 0) {
            jlong arcOutput = [((JavaLangLong *) nil_chk([((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) readWithOrgApacheLuceneStoreDataInput:inArg])) longLongValue];
            minArcOutput = output + arcOutput;
          }
          else {
            minArcOutput = output;
          }
          if (minArcOutput == targetOutput) {
            exact = true;
            break;
          }
          else if (minArcOutput < targetOutput) {
            low = mid + 1;
          }
          else {
            high = mid - 1;
          }
        }
        if (high == -1) {
          return nil;
        }
        else if (exact) {
          arc->arcIdx_ = mid - 1;
        }
        else {
          arc->arcIdx_ = low - 2;
        }
        [fst readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
        [result setIntAtWithInt:upto++ withInt:arc->label_];
        output += [((JavaLangLong *) nil_chk(arc->output_)) longLongValue];
      }
      else {
        OrgApacheLuceneUtilFstFST_Arc *prevArc = nil;
        while (true) {
          jlong minArcOutput = output + [((JavaLangLong *) nil_chk(arc->output_)) longLongValue];
          if (minArcOutput == targetOutput) {
            output = minArcOutput;
            [result setIntAtWithInt:upto++ withInt:arc->label_];
            break;
          }
          else if (minArcOutput > targetOutput) {
            if (prevArc == nil) {
              return nil;
            }
            else {
              [arc copyFromWithOrgApacheLuceneUtilFstFST_Arc:prevArc];
              [result setIntAtWithInt:upto++ withInt:arc->label_];
              output += [((JavaLangLong *) nil_chk(arc->output_)) longLongValue];
              break;
            }
          }
          else if ([arc isLast]) {
            output = minArcOutput;
            [result setIntAtWithInt:upto++ withInt:arc->label_];
            break;
          }
          else {
            prevArc = scratchArc;
            [((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(prevArc)) copyFromWithOrgApacheLuceneUtilFstFST_Arc:arc];
            [fst readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
          }
        }
      }
    }
    else {
      return nil;
    }
  }
}

OrgApacheLuceneUtilFstUtil_TopResults *OrgApacheLuceneUtilFstUtil_shortestPathsWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilFstFST_Arc_withId_withJavaUtilComparator_withInt_withBoolean_(OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilFstFST_Arc *fromNode, id startOutput, id<JavaUtilComparator> comparator, jint topN, jboolean allowEmptyString) {
  OrgApacheLuceneUtilFstUtil_initialize();
  OrgApacheLuceneUtilFstUtil_TopNSearcher *searcher = create_OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_(fst, topN, topN, comparator);
  [searcher addStartPathsWithOrgApacheLuceneUtilFstFST_Arc:fromNode withId:startOutput withBoolean:allowEmptyString withOrgApacheLuceneUtilIntsRefBuilder:create_OrgApacheLuceneUtilIntsRefBuilder_init()];
  return [searcher search];
}

void OrgApacheLuceneUtilFstUtil_toDotWithOrgApacheLuceneUtilFstFST_withJavaIoWriter_withBoolean_withBoolean_(OrgApacheLuceneUtilFstFST *fst, JavaIoWriter *outArg, jboolean sameRank, jboolean labelStates) {
  OrgApacheLuceneUtilFstUtil_initialize();
  NSString *expandedNodeColor = @"blue";
  OrgApacheLuceneUtilFstFST_Arc *startArc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fst)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  id<JavaUtilList> thisLevelQueue = create_JavaUtilArrayList_init();
  id<JavaUtilList> nextLevelQueue = create_JavaUtilArrayList_init();
  [nextLevelQueue addWithId:startArc];
  id<JavaUtilList> sameLevelStates = create_JavaUtilArrayList_init();
  JavaUtilBitSet *seen = create_JavaUtilBitSet_init();
  [seen setWithInt:(jint) ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(startArc))->target_];
  NSString *stateShape = @"circle";
  NSString *finalStateShape = @"doublecircle";
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"digraph FST {\n"];
  [outArg writeWithNSString:@"  rankdir = LR; splines=true; concentrate=true; ordering=out; ranksep=2.5; \n"];
  if (!labelStates) {
    [outArg writeWithNSString:@"  node [shape=circle, width=.2, height=.2, style=filled]\n"];
  }
  OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(outArg, @"initial", @"point", @"white", @"");
  id NO_OUTPUT = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput];
  OrgApacheLuceneUtilFstFST_BytesReader *r = [fst getBytesReader];
  {
    NSString *stateColor;
    if ([fst isExpandedTargetWithOrgApacheLuceneUtilFstFST_Arc:startArc withOrgApacheLuceneUtilFstFST_BytesReader:r]) {
      stateColor = expandedNodeColor;
    }
    else {
      stateColor = nil;
    }
    jboolean isFinal;
    id finalOutput;
    if ([startArc isFinal]) {
      isFinal = true;
      finalOutput = JreObjectEqualsEquals(startArc->nextFinalOutput_, NO_OUTPUT) ? nil : startArc->nextFinalOutput_;
    }
    else {
      isFinal = false;
      finalOutput = nil;
    }
    OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(outArg, JavaLangLong_toStringWithLong_(startArc->target_), isFinal ? finalStateShape : stateShape, stateColor, finalOutput == nil ? @"" : [fst->outputs_ outputToStringWithId:finalOutput]);
  }
  [outArg writeWithNSString:JreStrcat("$JC", @"  initial -> ", startArc->target_, 0x000a)];
  jint level = 0;
  while (![nextLevelQueue isEmpty]) {
    [thisLevelQueue addAllWithJavaUtilCollection:nextLevelQueue];
    [nextLevelQueue clear];
    level++;
    [outArg writeWithNSString:JreStrcat("$IC", @"\n  // Transitions and states at level: ", level, 0x000a)];
    while (![thisLevelQueue isEmpty]) {
      OrgApacheLuceneUtilFstFST_Arc *arc = [thisLevelQueue removeWithInt:[thisLevelQueue size] - 1];
      if (OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(arc)) {
        jlong node = ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->target_;
        [fst readFirstRealTargetArcWithLong:arc->target_ withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:r];
        while (true) {
          if (arc->target_ >= 0 && ![seen getWithInt:(jint) arc->target_]) {
            NSString *stateColor;
            if ([fst isExpandedTargetWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:r]) {
              stateColor = expandedNodeColor;
            }
            else {
              stateColor = nil;
            }
            NSString *finalOutput;
            if (arc->nextFinalOutput_ != nil && !JreObjectEqualsEquals(arc->nextFinalOutput_, NO_OUTPUT)) {
              finalOutput = [fst->outputs_ outputToStringWithId:arc->nextFinalOutput_];
            }
            else {
              finalOutput = @"";
            }
            OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(outArg, JavaLangLong_toStringWithLong_(arc->target_), stateShape, stateColor, finalOutput);
            [seen setWithInt:(jint) arc->target_];
            [nextLevelQueue addWithId:[create_OrgApacheLuceneUtilFstFST_Arc_init() copyFromWithOrgApacheLuceneUtilFstFST_Arc:arc]];
            [sameLevelStates addWithId:JavaLangInteger_valueOfWithInt_((jint) arc->target_)];
          }
          NSString *outs;
          if (!JreObjectEqualsEquals(arc->output_, NO_OUTPUT)) {
            outs = JreStrcat("C$", '/', [fst->outputs_ outputToStringWithId:arc->output_]);
          }
          else {
            outs = @"";
          }
          if (!OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(arc) && [arc isFinal] && !JreObjectEqualsEquals(arc->nextFinalOutput_, NO_OUTPUT)) {
            outs = JreStrcat("$$$C", outs, @"/[", [fst->outputs_ outputToStringWithId:arc->nextFinalOutput_], ']');
          }
          NSString *arcColor;
          if ([arc flagWithInt:OrgApacheLuceneUtilFstFST_BIT_TARGET_NEXT]) {
            arcColor = @"red";
          }
          else {
            arcColor = @"black";
          }
          JreAssert(arc->label_ != OrgApacheLuceneUtilFstFST_END_LABEL, @"org/apache/lucene/util/fst/Util.java:782 condition failed: assert arc.label != FST.END_LABEL;");
          [outArg writeWithNSString:JreStrcat("$J$J$$$C$$$$", @"  ", node, @" -> ", arc->target_, @" [label=\"", OrgApacheLuceneUtilFstUtil_printableLabelWithInt_(arc->label_), outs, '"', ([arc isFinal] ? @" style=\"bold\"" : @""), @" color=\"", arcColor, @"\"]\n")];
          if ([arc isLast]) {
            break;
          }
          [fst readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:r];
        }
      }
    }
    if (sameRank && [sameLevelStates size] > 1) {
      [outArg writeWithNSString:@"  {rank=same; "];
      for (JavaLangInteger *boxed__ in sameLevelStates) {
        jint state = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
        [outArg writeWithNSString:JreStrcat("I$", state, @"; ")];
      }
      [outArg writeWithNSString:@" }\n"];
    }
    [sameLevelStates clear];
  }
  [outArg writeWithNSString:@"  -1 [style=filled, color=black, shape=doublecircle, label=\"\"]\n\n"];
  [outArg writeWithNSString:@"  {rank=sink; -1 }\n"];
  [outArg writeWithNSString:@"}\n"];
  [outArg flush];
}

void OrgApacheLuceneUtilFstUtil_emitDotStateWithJavaIoWriter_withNSString_withNSString_withNSString_withNSString_(JavaIoWriter *outArg, NSString *name, NSString *shape, NSString *color, NSString *label) {
  OrgApacheLuceneUtilFstUtil_initialize();
  [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:JreStrcat("$$$$C$C$$", @"  ", name, @" [", (shape != nil ? JreStrcat("$$", @"shape=", shape) : @""), ' ', (color != nil ? JreStrcat("$$", @"color=", color) : @""), ' ', (label != nil ? JreStrcat("$$C", @"label=\"", label, '"') : @"label=\"\""), @" ]\n")];
}

NSString *OrgApacheLuceneUtilFstUtil_printableLabelWithInt_(jint label) {
  OrgApacheLuceneUtilFstUtil_initialize();
  if (label >= (jint) 0x20 && label <= (jint) 0x7d && label != (jint) 0x22 && label != (jint) 0x5c) {
    return JavaLangCharacter_toStringWithChar_((jchar) label);
  }
  return JreStrcat("$$", @"0x", JavaLangInteger_toHexStringWithInt_(label));
}

OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_toUTF16WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_(id<JavaLangCharSequence> s, OrgApacheLuceneUtilIntsRefBuilder *scratch) {
  OrgApacheLuceneUtilFstUtil_initialize();
  jint charLimit = [((id<JavaLangCharSequence>) nil_chk(s)) java_length];
  [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(scratch)) setLengthWithInt:charLimit];
  [scratch growWithInt:charLimit];
  for (jint idx = 0; idx < charLimit; idx++) {
    [scratch setIntAtWithInt:idx withInt:(jint) [s charAtWithInt:idx]];
  }
  return [scratch get];
}

OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_toUTF32WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_(id<JavaLangCharSequence> s, OrgApacheLuceneUtilIntsRefBuilder *scratch) {
  OrgApacheLuceneUtilFstUtil_initialize();
  jint charIdx = 0;
  jint intIdx = 0;
  jint charLimit = [((id<JavaLangCharSequence>) nil_chk(s)) java_length];
  while (charIdx < charLimit) {
    [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(scratch)) growWithInt:intIdx + 1];
    jint utf32 = JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(s, charIdx);
    [scratch setIntAtWithInt:intIdx withInt:utf32];
    charIdx += JavaLangCharacter_charCountWithInt_(utf32);
    intIdx++;
  }
  [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(scratch)) setLengthWithInt:intIdx];
  return [scratch get];
}

OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_toUTF32WithCharArray_withInt_withInt_withOrgApacheLuceneUtilIntsRefBuilder_(IOSCharArray *s, jint offset, jint length, OrgApacheLuceneUtilIntsRefBuilder *scratch) {
  OrgApacheLuceneUtilFstUtil_initialize();
  jint charIdx = offset;
  jint intIdx = 0;
  jint charLimit = offset + length;
  while (charIdx < charLimit) {
    [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(scratch)) growWithInt:intIdx + 1];
    jint utf32 = JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(s, charIdx, charLimit);
    [scratch setIntAtWithInt:intIdx withInt:utf32];
    charIdx += JavaLangCharacter_charCountWithInt_(utf32);
    intIdx++;
  }
  [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(scratch)) setLengthWithInt:intIdx];
  return [scratch get];
}

OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneUtilBytesRef *input, OrgApacheLuceneUtilIntsRefBuilder *scratch) {
  OrgApacheLuceneUtilFstUtil_initialize();
  [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(scratch)) clear];
  for (jint i = 0; i < ((OrgApacheLuceneUtilBytesRef *) nil_chk(input))->length_; i++) {
    [scratch appendWithInt:IOSByteArray_Get(nil_chk(input->bytes_), i + input->offset_) & (jint) 0xFF];
  }
  return [scratch get];
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneUtilFstUtil_toBytesRefWithOrgApacheLuceneUtilIntsRef_withOrgApacheLuceneUtilBytesRefBuilder_(OrgApacheLuceneUtilIntsRef *input, OrgApacheLuceneUtilBytesRefBuilder *scratch) {
  OrgApacheLuceneUtilFstUtil_initialize();
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(scratch)) growWithInt:((OrgApacheLuceneUtilIntsRef *) nil_chk(input))->length_];
  for (jint i = 0; i < input->length_; i++) {
    jint value = IOSIntArray_Get(nil_chk(input->ints_), i + input->offset_);
    JreAssert(value >= JavaLangByte_MIN_VALUE && value <= 255, JreStrcat("$I$", @"value ", value, @" doesn't fit into byte"));
    [scratch setByteAtWithInt:i withByte:(jbyte) value];
  }
  [scratch setLengthWithInt:input->length_];
  return [scratch get];
}

OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneUtilFstUtil_readCeilArcWithInt_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_BytesReader_(jint label, OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilFstFST_Arc *follow, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilFstFST_BytesReader *inArg) {
  OrgApacheLuceneUtilFstUtil_initialize();
  if (label == OrgApacheLuceneUtilFstFST_END_LABEL) {
    if ([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow)) isFinal]) {
      if (follow->target_ <= 0) {
        ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = OrgApacheLuceneUtilFstFST_BIT_LAST_ARC;
      }
      else {
        ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->flags_ = 0;
        arc->nextArc_ = follow->target_;
        arc->node_ = follow->target_;
      }
      JreStrongAssign(&arc->output_, follow->nextFinalOutput_);
      arc->label_ = OrgApacheLuceneUtilFstFST_END_LABEL;
      return arc;
    }
    else {
      return nil;
    }
  }
  if (!OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(follow)) {
    return nil;
  }
  [((OrgApacheLuceneUtilFstFST *) nil_chk(fst)) readFirstTargetArcWithOrgApacheLuceneUtilFstFST_Arc:follow withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
  if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->bytesPerArc_ != 0 && arc->label_ != OrgApacheLuceneUtilFstFST_END_LABEL) {
    jint low = arc->arcIdx_;
    jint high = arc->numArcs_ - 1;
    jint mid = 0;
    while (low <= high) {
      mid = JreURShift32((low + high), 1);
      [((OrgApacheLuceneUtilFstFST_BytesReader *) nil_chk(inArg)) setPositionWithLong:arc->posArcsStart_];
      [inArg skipBytesWithLong:arc->bytesPerArc_ * mid + 1];
      jint midLabel = [fst readLabelWithOrgApacheLuceneStoreDataInput:inArg];
      jint cmp = midLabel - label;
      if (cmp < 0) {
        low = mid + 1;
      }
      else if (cmp > 0) {
        high = mid - 1;
      }
      else {
        arc->arcIdx_ = mid - 1;
        return [fst readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
      }
    }
    if (low == arc->numArcs_) {
      return nil;
    }
    arc->arcIdx_ = (low > high ? high : low);
    return [fst readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
  }
  [fst readFirstRealTargetArcWithLong:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(follow))->target_ withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
  while (true) {
    if (arc->label_ >= label) {
      return arc;
    }
    else if ([arc isLast]) {
      return nil;
    }
    else {
      [fst readNextRealArcWithOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:inArg];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstUtil)

@implementation OrgApacheLuceneUtilFstUtil_FSTPath

- (instancetype)initWithId:(id)cost
withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input {
  OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(self, cost, arc, input);
  return self;
}

- (instancetype)initWithId:(id)cost
withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input
                 withFloat:(jfloat)boost
  withJavaLangCharSequence:(id<JavaLangCharSequence>)context {
  OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(self, cost, arc, input, boost, context);
  return self;
}

- (OrgApacheLuceneUtilFstUtil_FSTPath *)newPathWithId:(id)cost
                withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input {
  return create_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(cost, self->arc_, input, self->boost_, self->context_);
}

- (NSString *)description {
  return JreStrcat("$@$@$@$F", @"input=", [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(input_)) get], @" cost=", cost_, @"context=", context_, @"boost=", boost_);
}

- (void)dealloc {
  RELEASE_(arc_);
  RELEASE_(cost_);
  RELEASE_(input_);
  RELEASE_(context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstUtil_FSTPath;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[1].selector = @selector(initWithId:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilIntsRefBuilder:withFloat:withJavaLangCharSequence:);
  methods[2].selector = @selector(newPathWithId:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "arc_", "LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x1, -1, -1, 8, -1 },
    { "cost_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, 9, -1 },
    { "input_", "LOrgApacheLuceneUtilIntsRefBuilder;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "boost_", "F", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "context_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilIntsRefBuilder;", "(TT;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/IntsRefBuilder;)V", "LNSObject;LOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilIntsRefBuilder;FLJavaLangCharSequence;", "(TT;Lorg/apache/lucene/util/fst/FST$Arc<TT;>;Lorg/apache/lucene/util/IntsRefBuilder;FLjava/lang/CharSequence;)V", "newPath", "LNSObject;LOrgApacheLuceneUtilIntsRefBuilder;", "(TT;Lorg/apache/lucene/util/IntsRefBuilder;)Lorg/apache/lucene/util/fst/Util$FSTPath<TT;>;", "toString", "Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "TT;", "LOrgApacheLuceneUtilFstUtil;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstUtil_FSTPath = { "FSTPath", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x9, 4, 5, 10, -1, -1, 11, -1 };
  return &_OrgApacheLuceneUtilFstUtil_FSTPath;
}

@end

void OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneUtilFstUtil_FSTPath *self, id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input) {
  OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(self, cost, arc, input, 0, nil);
}

OrgApacheLuceneUtilFstUtil_FSTPath *new_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstUtil_FSTPath, initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_, cost, arc, input)
}

OrgApacheLuceneUtilFstUtil_FSTPath *create_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstUtil_FSTPath, initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_, cost, arc, input)
}

void OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(OrgApacheLuceneUtilFstUtil_FSTPath *self, id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input, jfloat boost, id<JavaLangCharSequence> context) {
  NSObject_init(self);
  JreStrongAssign(&self->arc_, [create_OrgApacheLuceneUtilFstFST_Arc_init() copyFromWithOrgApacheLuceneUtilFstFST_Arc:arc]);
  JreStrongAssign(&self->cost_, cost);
  JreStrongAssign(&self->input_, input);
  self->boost_ = boost;
  JreStrongAssign(&self->context_, context);
}

OrgApacheLuceneUtilFstUtil_FSTPath *new_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input, jfloat boost, id<JavaLangCharSequence> context) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstUtil_FSTPath, initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_, cost, arc, input, boost, context)
}

OrgApacheLuceneUtilFstUtil_FSTPath *create_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input, jfloat boost, id<JavaLangCharSequence> context) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstUtil_FSTPath, initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_, cost, arc, input, boost, context)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstUtil_FSTPath)

@implementation OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator_initWithJavaUtilComparator_(self, comparator);
  return self;
}

- (jint)compareWithId:(OrgApacheLuceneUtilFstUtil_FSTPath *)a
               withId:(OrgApacheLuceneUtilFstUtil_FSTPath *)b {
  jint cmp = [((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:((OrgApacheLuceneUtilFstUtil_FSTPath *) nil_chk(a))->cost_ withId:((OrgApacheLuceneUtilFstUtil_FSTPath *) nil_chk(b))->cost_];
  if (cmp == 0) {
    return [((OrgApacheLuceneUtilIntsRef *) nil_chk([((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(a->input_)) get])) compareToWithId:[b->input_ get]];
  }
  else {
    return cmp;
  }
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilComparator:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilComparator;", "(Ljava/util/Comparator<TT;>;)V", "compare", "LOrgApacheLuceneUtilFstUtil_FSTPath;LOrgApacheLuceneUtilFstUtil_FSTPath;", "(Lorg/apache/lucene/util/fst/Util$FSTPath<TT;>;Lorg/apache/lucene/util/fst/Util$FSTPath<TT;>;)I", "Ljava/util/Comparator<TT;>;", "LOrgApacheLuceneUtilFstUtil;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/util/fst/Util$FSTPath<TT;>;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator = { "TieBreakByInputComparator", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0xa, 2, 1, 6, -1, -1, 7, -1 };
  return &_OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator;
}

@end

void OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator_initWithJavaUtilComparator_(OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator *self, id<JavaUtilComparator> comparator) {
  NSObject_init(self);
  JreStrongAssign(&self->comparator_, comparator);
}

OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator *new_OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator, initWithJavaUtilComparator_, comparator)
}

OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator *create_OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator_initWithJavaUtilComparator_(id<JavaUtilComparator> comparator) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator, initWithJavaUtilComparator_, comparator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator)

@implementation OrgApacheLuceneUtilFstUtil_TopNSearcher

- (instancetype)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                          withInt:(jint)topN
                                          withInt:(jint)maxQueueDepth
                           withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_(self, fst, topN, maxQueueDepth, comparator);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                          withInt:(jint)topN
                                          withInt:(jint)maxQueueDepth
                           withJavaUtilComparator:(id<JavaUtilComparator>)comparator
                           withJavaUtilComparator:(id<JavaUtilComparator>)pathComparator {
  OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_(self, fst, topN, maxQueueDepth, comparator, pathComparator);
  return self;
}

- (void)addIfCompetitiveWithOrgApacheLuceneUtilFstUtil_FSTPath:(OrgApacheLuceneUtilFstUtil_FSTPath *)path {
  JreAssert(queue_ != nil, @"org/apache/lucene/util/fst/Util.java:340 condition failed: assert queue != null;");
  id cost = JreRetainedLocalValue([((OrgApacheLuceneUtilFstOutputs *) nil_chk(((OrgApacheLuceneUtilFstFST *) nil_chk(fst_))->outputs_)) addWithId:((OrgApacheLuceneUtilFstUtil_FSTPath *) nil_chk(path))->cost_ withId:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_))->output_]);
  if ([((JavaUtilTreeSet *) nil_chk(queue_)) size] == maxQueueDepth_) {
    OrgApacheLuceneUtilFstUtil_FSTPath *bottom = JreRetainedLocalValue([((JavaUtilTreeSet *) nil_chk(queue_)) last]);
    jint comp = [((id<JavaUtilComparator>) nil_chk(pathComparator_)) compareWithId:path withId:bottom];
    if (comp > 0) {
      return;
    }
    else if (comp == 0) {
      [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(path->input_)) appendWithInt:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_))->label_];
      jint cmp = [((OrgApacheLuceneUtilIntsRef *) nil_chk([((OrgApacheLuceneUtilFstUtil_FSTPath *) nil_chk(bottom))->input_ get])) compareToWithId:[path->input_ get]];
      [path->input_ setLengthWithInt:[path->input_ length] - 1];
      JreAssert(cmp != 0, @"org/apache/lucene/util/fst/Util.java:358 condition failed: assert cmp != 0;");
      if (cmp < 0) {
        return;
      }
    }
  }
  else {
  }
  OrgApacheLuceneUtilIntsRefBuilder *newInput = create_OrgApacheLuceneUtilIntsRefBuilder_init();
  [newInput copyIntsWithOrgApacheLuceneUtilIntsRef:[((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(path->input_)) get]];
  [newInput appendWithInt:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_))->label_];
  [((JavaUtilTreeSet *) nil_chk(queue_)) addWithId:[path newPathWithId:cost withOrgApacheLuceneUtilIntsRefBuilder:newInput]];
  if ([((JavaUtilTreeSet *) nil_chk(queue_)) size] == maxQueueDepth_ + 1) {
    [((JavaUtilTreeSet *) nil_chk(queue_)) pollLast];
  }
}

- (void)addStartPathsWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)node
                                                withId:(id)startOutput
                                           withBoolean:(jboolean)allowEmptyString
                 withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input {
  [self addStartPathsWithOrgApacheLuceneUtilFstFST_Arc:node withId:startOutput withBoolean:allowEmptyString withOrgApacheLuceneUtilIntsRefBuilder:input withFloat:0 withJavaLangCharSequence:nil];
}

- (void)addStartPathsWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)node
                                                withId:(id)startOutput
                                           withBoolean:(jboolean)allowEmptyString
                 withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input
                                             withFloat:(jfloat)boost
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)context {
  if ([nil_chk(startOutput) isEqual:[((OrgApacheLuceneUtilFstOutputs *) nil_chk(((OrgApacheLuceneUtilFstFST *) nil_chk(fst_))->outputs_)) getNoOutput]]) {
    startOutput = [fst_->outputs_ getNoOutput];
  }
  OrgApacheLuceneUtilFstUtil_FSTPath *path = create_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(startOutput, node, input, boost, context);
  [fst_ readFirstTargetArcWithOrgApacheLuceneUtilFstFST_Arc:node withOrgApacheLuceneUtilFstFST_Arc:path->arc_ withOrgApacheLuceneUtilFstFST_BytesReader:bytesReader_];
  while (true) {
    if (allowEmptyString || ((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_))->label_ != OrgApacheLuceneUtilFstFST_END_LABEL) {
      [self addIfCompetitiveWithOrgApacheLuceneUtilFstUtil_FSTPath:path];
    }
    if ([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_)) isLast]) {
      break;
    }
    [fst_ readNextArcWithOrgApacheLuceneUtilFstFST_Arc:path->arc_ withOrgApacheLuceneUtilFstFST_BytesReader:bytesReader_];
  }
}

- (OrgApacheLuceneUtilFstUtil_TopResults *)search {
  id<JavaUtilList> results = create_JavaUtilArrayList_init();
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader = [((OrgApacheLuceneUtilFstFST *) nil_chk(fst_)) getBytesReader];
  id NO_OUTPUT = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst_->outputs_)) getNoOutput];
  jint rejectCount = 0;
  while ([results size] < topN_) {
    OrgApacheLuceneUtilFstUtil_FSTPath *path;
    if (queue_ == nil) {
      break;
    }
    path = [queue_ pollFirst];
    if (path == nil) {
      break;
    }
    if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_))->label_ == OrgApacheLuceneUtilFstFST_END_LABEL) {
      [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(path->input_)) setLengthWithInt:[path->input_ length] - 1];
      [results addWithId:create_OrgApacheLuceneUtilFstUtil_Result_initWithOrgApacheLuceneUtilIntsRef_withId_([path->input_ get], path->cost_)];
      continue;
    }
    if ([results size] == topN_ - 1 && maxQueueDepth_ == topN_) {
      JreStrongAssign(&queue_, nil);
    }
    while (true) {
      [fst_ readFirstTargetArcWithOrgApacheLuceneUtilFstFST_Arc:path->arc_ withOrgApacheLuceneUtilFstFST_Arc:path->arc_ withOrgApacheLuceneUtilFstFST_BytesReader:fstReader];
      jboolean foundZero = false;
      while (true) {
        if ([((id<JavaUtilComparator>) nil_chk(comparator_)) compareWithId:NO_OUTPUT withId:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_))->output_] == 0) {
          if (queue_ == nil) {
            foundZero = true;
            break;
          }
          else if (!foundZero) {
            [((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(scratchArc_)) copyFromWithOrgApacheLuceneUtilFstFST_Arc:path->arc_];
            foundZero = true;
          }
          else {
            [self addIfCompetitiveWithOrgApacheLuceneUtilFstUtil_FSTPath:path];
          }
        }
        else if (queue_ != nil) {
          [self addIfCompetitiveWithOrgApacheLuceneUtilFstUtil_FSTPath:path];
        }
        if ([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_)) isLast]) {
          break;
        }
        [fst_ readNextArcWithOrgApacheLuceneUtilFstFST_Arc:path->arc_ withOrgApacheLuceneUtilFstFST_BytesReader:fstReader];
      }
      JreAssert(foundZero, @"org/apache/lucene/util/fst/Util.java:505 condition failed: assert foundZero;");
      if (queue_ != nil) {
        [((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_)) copyFromWithOrgApacheLuceneUtilFstFST_Arc:scratchArc_];
      }
      if (((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_))->label_ == OrgApacheLuceneUtilFstFST_END_LABEL) {
        JreStrongAssign(&path->cost_, [fst_->outputs_ addWithId:path->cost_ withId:path->arc_->output_]);
        if ([self acceptResultWithOrgApacheLuceneUtilFstUtil_FSTPath:path]) {
          [results addWithId:create_OrgApacheLuceneUtilFstUtil_Result_initWithOrgApacheLuceneUtilIntsRef_withId_([((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(path->input_)) get], path->cost_)];
        }
        else {
          rejectCount++;
        }
        break;
      }
      else {
        [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(path->input_)) appendWithInt:path->arc_->label_];
        JreStrongAssign(&path->cost_, [fst_->outputs_ addWithId:path->cost_ withId:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(path->arc_))->output_]);
      }
    }
  }
  return create_OrgApacheLuceneUtilFstUtil_TopResults_initWithBoolean_withJavaUtilList_(rejectCount + topN_ <= maxQueueDepth_, results);
}

- (jboolean)acceptResultWithOrgApacheLuceneUtilFstUtil_FSTPath:(OrgApacheLuceneUtilFstUtil_FSTPath *)path {
  return [self acceptResultWithOrgApacheLuceneUtilIntsRef:[((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(((OrgApacheLuceneUtilFstUtil_FSTPath *) nil_chk(path))->input_)) get] withId:path->cost_];
}

- (jboolean)acceptResultWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input
                                                withId:(id)output {
  return true;
}

- (void)dealloc {
  RELEASE_(fst_);
  RELEASE_(bytesReader_);
  RELEASE_(scratchArc_);
  RELEASE_(comparator_);
  RELEASE_(pathComparator_);
  RELEASE_(queue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 9, 10, -1, -1 },
    { NULL, "V", 0x1, 7, 11, 9, 12, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstUtil_TopResults;", 0x1, -1, -1, 9, 13, -1, -1 },
    { NULL, "Z", 0x4, 14, 5, -1, 15, -1, -1 },
    { NULL, "Z", 0x4, 14, 16, -1, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilFstFST:withInt:withInt:withJavaUtilComparator:);
  methods[1].selector = @selector(initWithOrgApacheLuceneUtilFstFST:withInt:withInt:withJavaUtilComparator:withJavaUtilComparator:);
  methods[2].selector = @selector(addIfCompetitiveWithOrgApacheLuceneUtilFstUtil_FSTPath:);
  methods[3].selector = @selector(addStartPathsWithOrgApacheLuceneUtilFstFST_Arc:withId:withBoolean:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[4].selector = @selector(addStartPathsWithOrgApacheLuceneUtilFstFST_Arc:withId:withBoolean:withOrgApacheLuceneUtilIntsRefBuilder:withFloat:withJavaLangCharSequence:);
  methods[5].selector = @selector(search);
  methods[6].selector = @selector(acceptResultWithOrgApacheLuceneUtilFstUtil_FSTPath:);
  methods[7].selector = @selector(acceptResultWithOrgApacheLuceneUtilIntsRef:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fst_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "bytesReader_", "LOrgApacheLuceneUtilFstFST_BytesReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "topN_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxQueueDepth_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratchArc_", "LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
    { "pathComparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x12, -1, -1, 21, -1 },
    { "queue_", "LJavaUtilTreeSet;", .constantValue.asLong = 0, 0x0, -1, -1, 22, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilFstFST;IILJavaUtilComparator;", "(Lorg/apache/lucene/util/fst/FST<TT;>;IILjava/util/Comparator<TT;>;)V", "LOrgApacheLuceneUtilFstFST;IILJavaUtilComparator;LJavaUtilComparator;", "(Lorg/apache/lucene/util/fst/FST<TT;>;IILjava/util/Comparator<TT;>;Ljava/util/Comparator<Lorg/apache/lucene/util/fst/Util$FSTPath<TT;>;>;)V", "addIfCompetitive", "LOrgApacheLuceneUtilFstUtil_FSTPath;", "(Lorg/apache/lucene/util/fst/Util$FSTPath<TT;>;)V", "addStartPaths", "LOrgApacheLuceneUtilFstFST_Arc;LNSObject;ZLOrgApacheLuceneUtilIntsRefBuilder;", "LJavaIoIOException;", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;TT;ZLorg/apache/lucene/util/IntsRefBuilder;)V", "LOrgApacheLuceneUtilFstFST_Arc;LNSObject;ZLOrgApacheLuceneUtilIntsRefBuilder;FLJavaLangCharSequence;", "(Lorg/apache/lucene/util/fst/FST$Arc<TT;>;TT;ZLorg/apache/lucene/util/IntsRefBuilder;FLjava/lang/CharSequence;)V", "()Lorg/apache/lucene/util/fst/Util$TopResults<TT;>;", "acceptResult", "(Lorg/apache/lucene/util/fst/Util$FSTPath<TT;>;)Z", "LOrgApacheLuceneUtilIntsRef;LNSObject;", "(Lorg/apache/lucene/util/IntsRef;TT;)Z", "Lorg/apache/lucene/util/fst/FST<TT;>;", "Lorg/apache/lucene/util/fst/FST$Arc<TT;>;", "Ljava/util/Comparator<TT;>;", "Ljava/util/Comparator<Lorg/apache/lucene/util/fst/Util$FSTPath<TT;>;>;", "Ljava/util/TreeSet<Lorg/apache/lucene/util/fst/Util$FSTPath<TT;>;>;", "LOrgApacheLuceneUtilFstUtil;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstUtil_TopNSearcher = { "TopNSearcher", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x9, 8, 8, 23, -1, -1, 24, -1 };
  return &_OrgApacheLuceneUtilFstUtil_TopNSearcher;
}

@end

void OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_(OrgApacheLuceneUtilFstUtil_TopNSearcher *self, OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator) {
  OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_(self, fst, topN, maxQueueDepth, comparator, create_OrgApacheLuceneUtilFstUtil_TieBreakByInputComparator_initWithJavaUtilComparator_(comparator));
}

OrgApacheLuceneUtilFstUtil_TopNSearcher *new_OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_(OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstUtil_TopNSearcher, initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_, fst, topN, maxQueueDepth, comparator)
}

OrgApacheLuceneUtilFstUtil_TopNSearcher *create_OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_(OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstUtil_TopNSearcher, initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_, fst, topN, maxQueueDepth, comparator)
}

void OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_(OrgApacheLuceneUtilFstUtil_TopNSearcher *self, OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator, id<JavaUtilComparator> pathComparator) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->scratchArc_, new_OrgApacheLuceneUtilFstFST_Arc_init());
  JreStrongAssign(&self->queue_, nil);
  JreStrongAssign(&self->fst_, fst);
  JreStrongAssign(&self->bytesReader_, [((OrgApacheLuceneUtilFstFST *) nil_chk(fst)) getBytesReader]);
  self->topN_ = topN;
  self->maxQueueDepth_ = maxQueueDepth;
  JreStrongAssign(&self->comparator_, comparator);
  JreStrongAssign(&self->pathComparator_, pathComparator);
  JreStrongAssignAndConsume(&self->queue_, new_JavaUtilTreeSet_initWithJavaUtilComparator_(pathComparator));
}

OrgApacheLuceneUtilFstUtil_TopNSearcher *new_OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_(OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator, id<JavaUtilComparator> pathComparator) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstUtil_TopNSearcher, initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_, fst, topN, maxQueueDepth, comparator, pathComparator)
}

OrgApacheLuceneUtilFstUtil_TopNSearcher *create_OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_(OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator, id<JavaUtilComparator> pathComparator) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstUtil_TopNSearcher, initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_, fst, topN, maxQueueDepth, comparator, pathComparator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstUtil_TopNSearcher)

@implementation OrgApacheLuceneUtilFstUtil_Result

- (instancetype)initWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input
                                            withId:(id)output {
  OrgApacheLuceneUtilFstUtil_Result_initWithOrgApacheLuceneUtilIntsRef_withId_(self, input, output);
  return self;
}

- (void)dealloc {
  RELEASE_(input_);
  RELEASE_(output_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilIntsRef:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "input_", "LOrgApacheLuceneUtilIntsRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "output_", "LNSObject;", .constantValue.asLong = 0, 0x11, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilIntsRef;LNSObject;", "(Lorg/apache/lucene/util/IntsRef;TT;)V", "TT;", "LOrgApacheLuceneUtilFstUtil;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstUtil_Result = { "Result", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x19, 1, 2, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneUtilFstUtil_Result;
}

@end

void OrgApacheLuceneUtilFstUtil_Result_initWithOrgApacheLuceneUtilIntsRef_withId_(OrgApacheLuceneUtilFstUtil_Result *self, OrgApacheLuceneUtilIntsRef *input, id output) {
  NSObject_init(self);
  JreStrongAssign(&self->input_, input);
  JreStrongAssign(&self->output_, output);
}

OrgApacheLuceneUtilFstUtil_Result *new_OrgApacheLuceneUtilFstUtil_Result_initWithOrgApacheLuceneUtilIntsRef_withId_(OrgApacheLuceneUtilIntsRef *input, id output) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstUtil_Result, initWithOrgApacheLuceneUtilIntsRef_withId_, input, output)
}

OrgApacheLuceneUtilFstUtil_Result *create_OrgApacheLuceneUtilFstUtil_Result_initWithOrgApacheLuceneUtilIntsRef_withId_(OrgApacheLuceneUtilIntsRef *input, id output) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstUtil_Result, initWithOrgApacheLuceneUtilIntsRef_withId_, input, output)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstUtil_Result)

@implementation OrgApacheLuceneUtilFstUtil_TopResults

- (instancetype)initWithBoolean:(jboolean)isComplete
               withJavaUtilList:(id<JavaUtilList>)topN {
  OrgApacheLuceneUtilFstUtil_TopResults_initWithBoolean_withJavaUtilList_(self, isComplete, topN);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilList>) nil_chk(topN_)) iterator];
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(topN_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withJavaUtilList:);
  methods[1].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isComplete_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "topN_", "LJavaUtilList;", .constantValue.asLong = 0, 0x11, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "ZLJavaUtilList;", "(ZLjava/util/List<Lorg/apache/lucene/util/fst/Util$Result<TT;>;>;)V", "()Ljava/util/Iterator<Lorg/apache/lucene/util/fst/Util$Result<TT;>;>;", "Ljava/util/List<Lorg/apache/lucene/util/fst/Util$Result<TT;>;>;", "LOrgApacheLuceneUtilFstUtil;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/lang/Iterable<Lorg/apache/lucene/util/fst/Util$Result<TT;>;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneUtilFstUtil_TopResults = { "TopResults", "org.apache.lucene.util.fst", ptrTable, methods, fields, 7, 0x19, 2, 2, 4, -1, -1, 5, -1 };
  return &_OrgApacheLuceneUtilFstUtil_TopResults;
}

@end

void OrgApacheLuceneUtilFstUtil_TopResults_initWithBoolean_withJavaUtilList_(OrgApacheLuceneUtilFstUtil_TopResults *self, jboolean isComplete, id<JavaUtilList> topN) {
  NSObject_init(self);
  JreStrongAssign(&self->topN_, topN);
  self->isComplete_ = isComplete;
}

OrgApacheLuceneUtilFstUtil_TopResults *new_OrgApacheLuceneUtilFstUtil_TopResults_initWithBoolean_withJavaUtilList_(jboolean isComplete, id<JavaUtilList> topN) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneUtilFstUtil_TopResults, initWithBoolean_withJavaUtilList_, isComplete, topN)
}

OrgApacheLuceneUtilFstUtil_TopResults *create_OrgApacheLuceneUtilFstUtil_TopResults_initWithBoolean_withJavaUtilList_(jboolean isComplete, id<JavaUtilList> topN) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneUtilFstUtil_TopResults, initWithBoolean_withJavaUtilList_, isComplete, topN)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneUtilFstUtil_TopResults)
