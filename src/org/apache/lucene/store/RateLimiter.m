//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/RateLimiter.java
//

#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/store/RateLimiter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter () {
 @public
  volatile_jdouble mbPerSec_;
  volatile_jlong minPauseCheckBytes_;
  jlong lastNS_;
}

@end

inline jint OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter_get_MIN_PAUSE_CHECK_MSEC(void);
#define OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter_MIN_PAUSE_CHECK_MSEC 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter, MIN_PAUSE_CHECK_MSEC, jint)

@implementation OrgApacheLuceneStoreRateLimiter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreRateLimiter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setMBPerSecWithDouble:(jdouble)mbPerSec {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getMBPerSec {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)pauseWithLong:(jlong)bytes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getMinPauseCheckBytes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 2, 3, 4, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setMBPerSecWithDouble:);
  methods[2].selector = @selector(getMBPerSec);
  methods[3].selector = @selector(pauseWithLong:);
  methods[4].selector = @selector(getMinPauseCheckBytes);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setMBPerSec", "D", "pause", "J", "LJavaIoIOException;", "LOrgApacheLuceneStoreRateLimiter_SimpleRateLimiter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreRateLimiter = { "RateLimiter", "org.apache.lucene.store", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, 5, -1, -1, -1 };
  return &_OrgApacheLuceneStoreRateLimiter;
}

@end

void OrgApacheLuceneStoreRateLimiter_init(OrgApacheLuceneStoreRateLimiter *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreRateLimiter)

@implementation OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter

- (instancetype)initWithDouble:(jdouble)mbPerSec {
  OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter_initWithDouble_(self, mbPerSec);
  return self;
}

- (void)setMBPerSecWithDouble:(jdouble)mbPerSec {
  JreAssignVolatileDouble(&self->mbPerSec_, mbPerSec);
  JreAssignVolatileLong(&minPauseCheckBytes_, JreFpToLong(((OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter_MIN_PAUSE_CHECK_MSEC / 1000.0) * mbPerSec * 1024 * 1024)));
}

- (jlong)getMinPauseCheckBytes {
  return JreLoadVolatileLong(&minPauseCheckBytes_);
}

- (jdouble)getMBPerSec {
  return JreLoadVolatileDouble(&self->mbPerSec_);
}

- (jlong)pauseWithLong:(jlong)bytes {
  jlong startNS = JavaLangSystem_nanoTime();
  jdouble secondsToPause = (bytes / 1024. / 1024.) / JreLoadVolatileDouble(&mbPerSec_);
  jlong targetNS;
  @synchronized(self) {
    targetNS = lastNS_ + JreFpToLong((1000000000 * secondsToPause));
    if (startNS >= targetNS) {
      lastNS_ = startNS;
      return 0;
    }
    lastNS_ = targetNS;
  }
  jlong curNS = startNS;
  while (true) {
    jlong pauseNS = targetNS - curNS;
    if (pauseNS > 0) {
      @try {
        jint sleepNS;
        jint sleepMS;
        if (pauseNS > 100000LL * JavaLangInteger_MAX_VALUE) {
          sleepMS = JavaLangInteger_MAX_VALUE;
          sleepNS = 0;
        }
        else {
          sleepMS = (jint) (JreLongDiv(pauseNS, 1000000));
          sleepNS = (jint) (JreLongMod(pauseNS, 1000000));
        }
        JavaLangThread_sleepWithLong_withInt_(sleepMS, sleepNS);
      }
      @catch (JavaLangInterruptedException *ie) {
        @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
      }
      curNS = JavaLangSystem_nanoTime();
      continue;
    }
    break;
  }
  return curNS - startNS;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDouble:);
  methods[1].selector = @selector(setMBPerSecWithDouble:);
  methods[2].selector = @selector(getMinPauseCheckBytes);
  methods[3].selector = @selector(getMBPerSec);
  methods[4].selector = @selector(pauseWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_PAUSE_CHECK_MSEC", "I", .constantValue.asInt = OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter_MIN_PAUSE_CHECK_MSEC, 0x1a, -1, -1, -1, -1 },
    { "mbPerSec_", "D", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "minPauseCheckBytes_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "lastNS_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "D", "setMBPerSec", "pause", "J", "LOrgApacheLuceneStoreRateLimiter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter = { "SimpleRateLimiter", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x9, 5, 4, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter;
}

@end

void OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter_initWithDouble_(OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter *self, jdouble mbPerSec) {
  OrgApacheLuceneStoreRateLimiter_init(self);
  [self setMBPerSecWithDouble:mbPerSec];
  self->lastNS_ = JavaLangSystem_nanoTime();
}

OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter *new_OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter_initWithDouble_(jdouble mbPerSec) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter, initWithDouble_, mbPerSec)
}

OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter *create_OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter_initWithDouble_(jdouble mbPerSec) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter, initWithDouble_, mbPerSec)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreRateLimiter_SimpleRateLimiter)
