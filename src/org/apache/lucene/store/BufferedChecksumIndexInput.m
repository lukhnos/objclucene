//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/BufferedChecksumIndexInput.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/zip/CRC32.h"
#include "java/util/zip/Checksum.h"
#include "org/apache/lucene/store/BufferedChecksum.h"
#include "org/apache/lucene/store/BufferedChecksumIndexInput.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "org/apache/lucene/store/IndexInput.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/store/BufferedChecksumIndexInput must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneStoreBufferedChecksumIndexInput

- (instancetype)initWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)main {
  OrgApacheLuceneStoreBufferedChecksumIndexInput_initWithOrgApacheLuceneStoreIndexInput_(self, main);
  return self;
}

- (jbyte)readByte {
  jbyte b = [((OrgApacheLuceneStoreIndexInput *) nil_chk(main_)) readByte];
  [((id<JavaUtilZipChecksum>) nil_chk(digest_)) updateWithInt:b];
  return b;
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(main_)) readBytesWithByteArray:b withInt:offset withInt:len];
  [((id<JavaUtilZipChecksum>) nil_chk(digest_)) updateWithByteArray:b withInt:offset withInt:len];
}

- (jlong)getChecksum {
  return [((id<JavaUtilZipChecksum>) nil_chk(digest_)) getValue];
}

- (void)close {
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(main_)) close];
}

- (jlong)getFilePointer {
  return [((OrgApacheLuceneStoreIndexInput *) nil_chk(main_)) getFilePointer];
}

- (jlong)length {
  return [((OrgApacheLuceneStoreIndexInput *) nil_chk(main_)) length];
}

- (OrgApacheLuceneStoreIndexInput *)java_clone {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (OrgApacheLuceneStoreIndexInput *)sliceWithNSString:(NSString *)sliceDescription
                                             withLong:(jlong)offset
                                             withLong:(jlong)length {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(main_);
  RELEASE_(digest_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreIndexInput;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreIndexInput;", 0x1, 5, 6, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreIndexInput:);
  methods[1].selector = @selector(readByte);
  methods[2].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(getChecksum);
  methods[4].selector = @selector(close);
  methods[5].selector = @selector(getFilePointer);
  methods[6].selector = @selector(length);
  methods[7].selector = @selector(java_clone);
  methods[8].selector = @selector(sliceWithNSString:withLong:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "main_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "digest_", "LJavaUtilZipChecksum;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreIndexInput;", "LJavaIoIOException;", "readBytes", "[BII", "clone", "slice", "LNSString;JJ" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreBufferedChecksumIndexInput = { "BufferedChecksumIndexInput", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreBufferedChecksumIndexInput;
}

@end

void OrgApacheLuceneStoreBufferedChecksumIndexInput_initWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreBufferedChecksumIndexInput *self, OrgApacheLuceneStoreIndexInput *main) {
  OrgApacheLuceneStoreChecksumIndexInput_initWithNSString_(self, JreStrcat("$@C", @"BufferedChecksumIndexInput(", main, ')'));
  JreStrongAssign(&self->main_, main);
  JreStrongAssignAndConsume(&self->digest_, new_OrgApacheLuceneStoreBufferedChecksum_initWithJavaUtilZipChecksum_(create_JavaUtilZipCRC32_init()));
}

OrgApacheLuceneStoreBufferedChecksumIndexInput *new_OrgApacheLuceneStoreBufferedChecksumIndexInput_initWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreIndexInput *main) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreBufferedChecksumIndexInput, initWithOrgApacheLuceneStoreIndexInput_, main)
}

OrgApacheLuceneStoreBufferedChecksumIndexInput *create_OrgApacheLuceneStoreBufferedChecksumIndexInput_initWithOrgApacheLuceneStoreIndexInput_(OrgApacheLuceneStoreIndexInput *main) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreBufferedChecksumIndexInput, initWithOrgApacheLuceneStoreIndexInput_, main)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreBufferedChecksumIndexInput)
