//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/RAMFile.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/lucene/store/RAMDirectory.h"
#include "org/apache/lucene/store/RAMFile.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/store/RAMFile must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneStoreRAMFile

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreRAMFile_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneStoreRAMDirectory:(OrgApacheLuceneStoreRAMDirectory *)directory {
  OrgApacheLuceneStoreRAMFile_initWithOrgApacheLuceneStoreRAMDirectory_(self, directory);
  return self;
}

- (jlong)getLength {
  @synchronized(self) {
    return length_;
  }
}

- (void)setLengthWithLong:(jlong)length {
  @synchronized(self) {
    self->length_ = length;
  }
}

- (IOSByteArray *)addBufferWithInt:(jint)size {
  IOSByteArray *buffer = [self newBufferWithInt:size];
  @synchronized(self) {
    [((JavaUtilArrayList *) nil_chk(buffers_)) addWithId:buffer];
    sizeInBytes_ += size;
  }
  if (directory_ != nil) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(directory_->sizeInBytes_)) getAndAddWithLong:size];
  }
  return buffer;
}

- (IOSByteArray *)getBufferWithInt:(jint)index {
  @synchronized(self) {
    return JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(buffers_)) getWithInt:index]);
  }
}

- (jint)numBuffers {
  @synchronized(self) {
    return [((JavaUtilArrayList *) nil_chk(buffers_)) size];
  }
}

- (IOSByteArray *)newBufferWithInt:(jint)size {
  return [IOSByteArray arrayWithLength:size];
}

- (jlong)ramBytesUsed {
  @synchronized(self) {
    return sizeInBytes_;
  }
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (NSString *)description {
  return JreStrcat("$$JC", [[self java_getClass] getSimpleName], @"(length=", length_, ')');
}

- (NSUInteger)hash {
  jint h = (jint) (length_ ^ (JreURShift64(length_, 32)));
  for (IOSByteArray * __strong block in nil_chk(buffers_)) {
    h = 31 * h + JavaUtilArrays_hashCodeWithByteArray_(block);
  }
  return h;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (obj == nil) return false;
  if (!JreObjectEqualsEquals([self java_getClass], [obj java_getClass])) return false;
  OrgApacheLuceneStoreRAMFile *other = (OrgApacheLuceneStoreRAMFile *) cast_chk(obj, [OrgApacheLuceneStoreRAMFile class]);
  if (length_ != other->length_) return false;
  if ([((JavaUtilArrayList *) nil_chk(buffers_)) size] != [other->buffers_ size]) {
    return false;
  }
  for (jint i = 0; i < [buffers_ size]; i++) {
    if (!JavaUtilArrays_equalsWithByteArray_withByteArray_([buffers_ getWithInt:i], [other->buffers_ getWithInt:i])) {
      return false;
    }
  }
  return true;
}

- (void)dealloc {
  RELEASE_(buffers_);
  RELEASE_(directory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x24, 1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x14, 3, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x34, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x34, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 6, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgApacheLuceneStoreRAMDirectory:);
  methods[2].selector = @selector(getLength);
  methods[3].selector = @selector(setLengthWithLong:);
  methods[4].selector = @selector(addBufferWithInt:);
  methods[5].selector = @selector(getBufferWithInt:);
  methods[6].selector = @selector(numBuffers);
  methods[7].selector = @selector(newBufferWithInt:);
  methods[8].selector = @selector(ramBytesUsed);
  methods[9].selector = @selector(getChildResources);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(hash);
  methods[12].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffers_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x14, -1, -1, 12, -1 },
    { "length_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "directory_", "LOrgApacheLuceneStoreRAMDirectory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sizeInBytes_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreRAMDirectory;", "setLength", "J", "addBuffer", "I", "getBuffer", "newBuffer", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "toString", "hashCode", "equals", "LNSObject;", "Ljava/util/ArrayList<[B>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreRAMFile = { "RAMFile", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x1, 13, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreRAMFile;
}

@end

void OrgApacheLuceneStoreRAMFile_init(OrgApacheLuceneStoreRAMFile *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->buffers_, new_JavaUtilArrayList_init());
}

OrgApacheLuceneStoreRAMFile *new_OrgApacheLuceneStoreRAMFile_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreRAMFile, init)
}

OrgApacheLuceneStoreRAMFile *create_OrgApacheLuceneStoreRAMFile_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreRAMFile, init)
}

void OrgApacheLuceneStoreRAMFile_initWithOrgApacheLuceneStoreRAMDirectory_(OrgApacheLuceneStoreRAMFile *self, OrgApacheLuceneStoreRAMDirectory *directory) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->buffers_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->directory_, directory);
}

OrgApacheLuceneStoreRAMFile *new_OrgApacheLuceneStoreRAMFile_initWithOrgApacheLuceneStoreRAMDirectory_(OrgApacheLuceneStoreRAMDirectory *directory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreRAMFile, initWithOrgApacheLuceneStoreRAMDirectory_, directory)
}

OrgApacheLuceneStoreRAMFile *create_OrgApacheLuceneStoreRAMFile_initWithOrgApacheLuceneStoreRAMDirectory_(OrgApacheLuceneStoreRAMDirectory *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreRAMFile, initWithOrgApacheLuceneStoreRAMDirectory_, directory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreRAMFile)
