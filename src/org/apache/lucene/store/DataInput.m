//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/DataInput.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/annotation/Annotation.h"
#include "java/nio/charset/Charset.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "org/lukhnos/portmobile/charset/StandardCharsets.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/store/DataInput must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneStoreDataInput () {
 @public
  IOSByteArray *skipBuffer_;
}

- (jlong)readVLongWithBoolean:(jboolean)allowNegative;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreDataInput, skipBuffer_, IOSByteArray *)

inline jint OrgApacheLuceneStoreDataInput_get_SKIP_BUFFER_SIZE(void);
#define OrgApacheLuceneStoreDataInput_SKIP_BUFFER_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneStoreDataInput, SKIP_BUFFER_SIZE, jint)

__attribute__((unused)) static jlong OrgApacheLuceneStoreDataInput_readVLongWithBoolean_(OrgApacheLuceneStoreDataInput *self, jboolean allowNegative);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneStoreDataInput__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneStoreDataInput__Annotations$1(void);

@implementation OrgApacheLuceneStoreDataInput

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreDataInput_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jbyte)readByte {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len
                   withBoolean:(jboolean)useBuffer {
  [self readBytesWithByteArray:b withInt:offset withInt:len];
}

- (jshort)readShort {
  return (jshort) ((JreLShift32(([self readByte] & (jint) 0xFF), 8)) | ([self readByte] & (jint) 0xFF));
}

- (jint)readInt {
  return (JreLShift32(([self readByte] & (jint) 0xFF), 24)) | (JreLShift32(([self readByte] & (jint) 0xFF), 16)) | (JreLShift32(([self readByte] & (jint) 0xFF), 8)) | ([self readByte] & (jint) 0xFF);
}

- (jint)readVInt {
  jbyte b = [self readByte];
  if (b >= 0) return b;
  jint i = b & (jint) 0x7F;
  b = [self readByte];
  i |= JreLShift32((b & (jint) 0x7F), 7);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift32((b & (jint) 0x7F), 14);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift32((b & (jint) 0x7F), 21);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift32((b & (jint) 0x0F), 28);
  if ((b & (jint) 0xF0) == 0) return i;
  @throw create_JavaIoIOException_initWithNSString_(@"Invalid vInt detected (too many bits)");
}

- (jint)readZInt {
  return OrgApacheLuceneUtilBitUtil_zigZagDecodeWithInt_([self readVInt]);
}

- (jlong)readLong {
  return (JreLShift64(((jlong) [self readInt]), 32)) | ([self readInt] & (jlong) 0xFFFFFFFFLL);
}

- (jlong)readVLong {
  return OrgApacheLuceneStoreDataInput_readVLongWithBoolean_(self, false);
}

- (jlong)readVLongWithBoolean:(jboolean)allowNegative {
  return OrgApacheLuceneStoreDataInput_readVLongWithBoolean_(self, allowNegative);
}

- (jlong)readZLong {
  return OrgApacheLuceneUtilBitUtil_zigZagDecodeWithLong_(OrgApacheLuceneStoreDataInput_readVLongWithBoolean_(self, true));
}

- (NSString *)readString {
  jint length = [self readVInt];
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:length];
  [self readBytesWithByteArray:bytes withInt:0 withInt:length];
  return [NSString java_stringWithBytes:bytes offset:0 length:length charset:JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8)];
}

- (OrgApacheLuceneStoreDataInput *)java_clone {
  @try {
    return (OrgApacheLuceneStoreDataInput *) cast_chk([super java_clone], [OrgApacheLuceneStoreDataInput class]);
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw create_JavaLangError_initWithNSString_(@"This cannot happen: Failing to clone DataInput");
  }
}

- (id<JavaUtilMap>)readStringStringMap {
  id<JavaUtilMap> map = create_JavaUtilHashMap_init();
  jint count = [self readInt];
  for (jint i = 0; i < count; i++) {
    NSString *key = [self readString];
    NSString *val = [self readString];
    [map putWithId:key withId:val];
  }
  return map;
}

- (id<JavaUtilMap>)readMapOfStrings {
  jint count = [self readVInt];
  if (count == 0) {
    return JavaUtilCollections_emptyMap();
  }
  else if (count == 1) {
    return JavaUtilCollections_singletonMapWithId_withId_([self readString], [self readString]);
  }
  else {
    id<JavaUtilMap> map = count > 10 ? create_JavaUtilHashMap_init() : (id) create_JavaUtilTreeMap_init();
    for (jint i = 0; i < count; i++) {
      NSString *key = [self readString];
      NSString *val = [self readString];
      [map putWithId:key withId:val];
    }
    return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(map);
  }
}

- (id<JavaUtilSet>)readStringSet {
  id<JavaUtilSet> set = create_JavaUtilHashSet_init();
  jint count = [self readInt];
  for (jint i = 0; i < count; i++) {
    [set addWithId:[self readString]];
  }
  return set;
}

- (id<JavaUtilSet>)readSetOfStrings {
  jint count = [self readVInt];
  if (count == 0) {
    return JavaUtilCollections_emptySet();
  }
  else if (count == 1) {
    return JavaUtilCollections_singletonWithId_([self readString]);
  }
  else {
    id<JavaUtilSet> set = count > 10 ? create_JavaUtilHashSet_init() : (id) create_JavaUtilTreeSet_init();
    for (jint i = 0; i < count; i++) {
      [set addWithId:[self readString]];
    }
    return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(set);
  }
}

- (void)skipBytesWithLong:(jlong)numBytes {
  if (numBytes < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J", @"numBytes must be >= 0, got ", numBytes));
  }
  if (skipBuffer_ == nil) {
    JreStrongAssignAndConsume(&skipBuffer_, [IOSByteArray newArrayWithLength:OrgApacheLuceneStoreDataInput_SKIP_BUFFER_SIZE]);
  }
  JreAssert(skipBuffer_->size_ == OrgApacheLuceneStoreDataInput_SKIP_BUFFER_SIZE, @"org/apache/lucene/store/DataInput.java:347 condition failed: assert skipBuffer.length == SKIP_BUFFER_SIZE;");
  for (jlong skipped = 0; skipped < numBytes; ) {
    jint step = (jint) JavaLangMath_minWithLong_withLong_(OrgApacheLuceneStoreDataInput_SKIP_BUFFER_SIZE, numBytes - skipped);
    [self readBytesWithByteArray:skipBuffer_ withInt:0 withInt:step withBoolean:false];
    skipped += step;
  }
}

- (void)dealloc {
  RELEASE_(skipBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, 0, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x2, 4, 5, 0, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDataInput;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, 0, 7, 8, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, 0, 7, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, 0, 9, 10, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, 0, 9, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readByte);
  methods[2].selector = @selector(readBytesWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(readBytesWithByteArray:withInt:withInt:withBoolean:);
  methods[4].selector = @selector(readShort);
  methods[5].selector = @selector(readInt);
  methods[6].selector = @selector(readVInt);
  methods[7].selector = @selector(readZInt);
  methods[8].selector = @selector(readLong);
  methods[9].selector = @selector(readVLong);
  methods[10].selector = @selector(readVLongWithBoolean:);
  methods[11].selector = @selector(readZLong);
  methods[12].selector = @selector(readString);
  methods[13].selector = @selector(java_clone);
  methods[14].selector = @selector(readStringStringMap);
  methods[15].selector = @selector(readMapOfStrings);
  methods[16].selector = @selector(readStringSet);
  methods[17].selector = @selector(readSetOfStrings);
  methods[18].selector = @selector(skipBytesWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SKIP_BUFFER_SIZE", "I", .constantValue.asInt = OrgApacheLuceneStoreDataInput_SKIP_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "skipBuffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "readBytes", "[BII", "[BIIZ", "readVLong", "Z", "clone", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", (void *)&OrgApacheLuceneStoreDataInput__Annotations$0, "()Ljava/util/Set<Ljava/lang/String;>;", (void *)&OrgApacheLuceneStoreDataInput__Annotations$1, "skipBytes", "J" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreDataInput = { "DataInput", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x401, 19, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreDataInput;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneStoreDataInput_init(OrgApacheLuceneStoreDataInput *self) {
  NSObject_init(self);
}

jlong OrgApacheLuceneStoreDataInput_readVLongWithBoolean_(OrgApacheLuceneStoreDataInput *self, jboolean allowNegative) {
  jbyte b = [self readByte];
  if (b >= 0) return b;
  jlong i = b & (jlong) 0x7FLL;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 7);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 14);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 21);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 28);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 35);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 42);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 49);
  if (b >= 0) return i;
  b = [self readByte];
  i |= JreLShift64((b & (jlong) 0x7FLL), 56);
  if (b >= 0) return i;
  if (allowNegative) {
    b = [self readByte];
    i |= JreLShift64((b & (jlong) 0x7FLL), 63);
    if (b == 0 || b == 1) return i;
    @throw create_JavaIoIOException_initWithNSString_(@"Invalid vLong detected (more than 64 bits)");
  }
  else {
    @throw create_JavaIoIOException_initWithNSString_(@"Invalid vLong detected (negative values disallowed)");
  }
}

IOSObjectArray *OrgApacheLuceneStoreDataInput__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneStoreDataInput__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreDataInput)
