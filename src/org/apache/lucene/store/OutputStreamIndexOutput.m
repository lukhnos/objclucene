//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/OutputStreamIndexOutput.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Throwable.h"
#include "java/util/zip/CRC32.h"
#include "java/util/zip/CheckedOutputStream.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/OutputStreamIndexOutput.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/store/OutputStreamIndexOutput must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneStoreOutputStreamIndexOutput () {
 @public
  JavaUtilZipCRC32 *crc_;
  JavaIoBufferedOutputStream *os_;
  jlong bytesWritten_;
  jboolean flushedOnClose_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreOutputStreamIndexOutput, crc_, JavaUtilZipCRC32 *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreOutputStreamIndexOutput, os_, JavaIoBufferedOutputStream *)

@implementation OrgApacheLuceneStoreOutputStreamIndexOutput

- (instancetype)initWithNSString:(NSString *)resourceDescription
          withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                         withInt:(jint)bufferSize {
  OrgApacheLuceneStoreOutputStreamIndexOutput_initWithNSString_withJavaIoOutputStream_withInt_(self, resourceDescription, outArg, bufferSize);
  return self;
}

- (void)writeByteWithByte:(jbyte)b {
  [((JavaIoBufferedOutputStream *) nil_chk(os_)) writeWithInt:b];
  bytesWritten_++;
}

- (void)writeBytesWithByteArray:(IOSByteArray *)b
                        withInt:(jint)offset
                        withInt:(jint)length {
  [((JavaIoBufferedOutputStream *) nil_chk(os_)) writeWithByteArray:b withInt:offset withInt:length];
  bytesWritten_ += length;
}

- (void)close {
  JavaIoOutputStream *o = os_;
  JavaLangThrowable *__primaryException1 = nil;
  @try {
    if (!flushedOnClose_) {
      flushedOnClose_ = true;
      [((JavaIoOutputStream *) nil_chk(o)) flush];
    }
  }
  @catch (JavaLangThrowable *e) {
    __primaryException1 = e;
    @throw e;
  }
  @finally {
    if (o != nil) {
      if (__primaryException1 != nil) {
        @try {
          [o close];
        }
        @catch (JavaLangThrowable *e) {
          [__primaryException1 addSuppressedWithJavaLangThrowable:e];
        }
      }
      else {
        [o close];
      }
    }
  }
}

- (jlong)getFilePointer {
  return bytesWritten_;
}

- (jlong)getChecksum {
  [((JavaIoBufferedOutputStream *) nil_chk(os_)) flush];
  return [((JavaUtilZipCRC32 *) nil_chk(crc_)) getValue];
}

- (void)dealloc {
  RELEASE_(crc_);
  RELEASE_(os_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withJavaIoOutputStream:withInt:);
  methods[1].selector = @selector(writeByteWithByte:);
  methods[2].selector = @selector(writeBytesWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(getFilePointer);
  methods[5].selector = @selector(getChecksum);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "crc_", "LJavaUtilZipCRC32;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "os_", "LJavaIoBufferedOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bytesWritten_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flushedOnClose_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaIoOutputStream;I", "writeByte", "B", "LJavaIoIOException;", "writeBytes", "[BII" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreOutputStreamIndexOutput = { "OutputStreamIndexOutput", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreOutputStreamIndexOutput;
}

@end

void OrgApacheLuceneStoreOutputStreamIndexOutput_initWithNSString_withJavaIoOutputStream_withInt_(OrgApacheLuceneStoreOutputStreamIndexOutput *self, NSString *resourceDescription, JavaIoOutputStream *outArg, jint bufferSize) {
  OrgApacheLuceneStoreIndexOutput_initWithNSString_(self, resourceDescription);
  JreStrongAssignAndConsume(&self->crc_, new_JavaUtilZipCRC32_init());
  self->bytesWritten_ = 0LL;
  self->flushedOnClose_ = false;
  JreStrongAssignAndConsume(&self->os_, new_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_withInt_(create_JavaUtilZipCheckedOutputStream_initWithJavaIoOutputStream_withJavaUtilZipChecksum_(outArg, self->crc_), bufferSize));
}

OrgApacheLuceneStoreOutputStreamIndexOutput *new_OrgApacheLuceneStoreOutputStreamIndexOutput_initWithNSString_withJavaIoOutputStream_withInt_(NSString *resourceDescription, JavaIoOutputStream *outArg, jint bufferSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreOutputStreamIndexOutput, initWithNSString_withJavaIoOutputStream_withInt_, resourceDescription, outArg, bufferSize)
}

OrgApacheLuceneStoreOutputStreamIndexOutput *create_OrgApacheLuceneStoreOutputStreamIndexOutput_initWithNSString_withJavaIoOutputStream_withInt_(NSString *resourceDescription, JavaIoOutputStream *outArg, jint bufferSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreOutputStreamIndexOutput, initWithNSString_withJavaIoOutputStream_withInt_, resourceDescription, outArg, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreOutputStreamIndexOutput)
