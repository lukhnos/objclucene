//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/RateLimitedIndexOutput.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RateLimitedIndexOutput.h"
#include "org/apache/lucene/store/RateLimiter.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/store/RateLimitedIndexOutput must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneStoreRateLimitedIndexOutput () {
 @public
  OrgApacheLuceneStoreIndexOutput *delegate_;
  OrgApacheLuceneStoreRateLimiter *rateLimiter_;
  /*!
   @brief How many bytes we've written since we last called rateLimiter.pause.
   */
  jlong bytesSinceLastPause_;
  /*!
   @brief Cached here not not always have to call RateLimiter#getMinPauseCheckBytes()
  which does volatile read.
   */
  jlong currentMinPauseCheckBytes_;
}

- (void)checkRate;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreRateLimitedIndexOutput, delegate_, OrgApacheLuceneStoreIndexOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreRateLimitedIndexOutput, rateLimiter_, OrgApacheLuceneStoreRateLimiter *)

__attribute__((unused)) static void OrgApacheLuceneStoreRateLimitedIndexOutput_checkRate(OrgApacheLuceneStoreRateLimitedIndexOutput *self);

@implementation OrgApacheLuceneStoreRateLimitedIndexOutput

- (instancetype)initWithOrgApacheLuceneStoreRateLimiter:(OrgApacheLuceneStoreRateLimiter *)rateLimiter
                    withOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)delegate {
  OrgApacheLuceneStoreRateLimitedIndexOutput_initWithOrgApacheLuceneStoreRateLimiter_withOrgApacheLuceneStoreIndexOutput_(self, rateLimiter, delegate);
  return self;
}

- (void)close {
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(delegate_)) close];
}

- (jlong)getFilePointer {
  return [((OrgApacheLuceneStoreIndexOutput *) nil_chk(delegate_)) getFilePointer];
}

- (jlong)getChecksum {
  return [((OrgApacheLuceneStoreIndexOutput *) nil_chk(delegate_)) getChecksum];
}

- (void)writeByteWithByte:(jbyte)b {
  bytesSinceLastPause_++;
  OrgApacheLuceneStoreRateLimitedIndexOutput_checkRate(self);
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(delegate_)) writeByteWithByte:b];
}

- (void)writeBytesWithByteArray:(IOSByteArray *)b
                        withInt:(jint)offset
                        withInt:(jint)length {
  bytesSinceLastPause_ += length;
  OrgApacheLuceneStoreRateLimitedIndexOutput_checkRate(self);
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(delegate_)) writeBytesWithByteArray:b withInt:offset withInt:length];
}

- (void)checkRate {
  OrgApacheLuceneStoreRateLimitedIndexOutput_checkRate(self);
}

- (void)dealloc {
  RELEASE_(delegate_);
  RELEASE_(rateLimiter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreRateLimiter:withOrgApacheLuceneStoreIndexOutput:);
  methods[1].selector = @selector(close);
  methods[2].selector = @selector(getFilePointer);
  methods[3].selector = @selector(getChecksum);
  methods[4].selector = @selector(writeByteWithByte:);
  methods[5].selector = @selector(writeBytesWithByteArray:withInt:withInt:);
  methods[6].selector = @selector(checkRate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LOrgApacheLuceneStoreIndexOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rateLimiter_", "LOrgApacheLuceneStoreRateLimiter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bytesSinceLastPause_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentMinPauseCheckBytes_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreRateLimiter;LOrgApacheLuceneStoreIndexOutput;", "LJavaIoIOException;", "writeByte", "B", "writeBytes", "[BII" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreRateLimitedIndexOutput = { "RateLimitedIndexOutput", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x11, 7, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreRateLimitedIndexOutput;
}

@end

void OrgApacheLuceneStoreRateLimitedIndexOutput_initWithOrgApacheLuceneStoreRateLimiter_withOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneStoreRateLimitedIndexOutput *self, OrgApacheLuceneStoreRateLimiter *rateLimiter, OrgApacheLuceneStoreIndexOutput *delegate) {
  OrgApacheLuceneStoreIndexOutput_initWithNSString_(self, JreStrcat("$@C", @"RateLimitedIndexOutput(", delegate, ')'));
  JreStrongAssign(&self->delegate_, delegate);
  JreStrongAssign(&self->rateLimiter_, rateLimiter);
  self->currentMinPauseCheckBytes_ = [((OrgApacheLuceneStoreRateLimiter *) nil_chk(rateLimiter)) getMinPauseCheckBytes];
}

OrgApacheLuceneStoreRateLimitedIndexOutput *new_OrgApacheLuceneStoreRateLimitedIndexOutput_initWithOrgApacheLuceneStoreRateLimiter_withOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneStoreRateLimiter *rateLimiter, OrgApacheLuceneStoreIndexOutput *delegate) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreRateLimitedIndexOutput, initWithOrgApacheLuceneStoreRateLimiter_withOrgApacheLuceneStoreIndexOutput_, rateLimiter, delegate)
}

OrgApacheLuceneStoreRateLimitedIndexOutput *create_OrgApacheLuceneStoreRateLimitedIndexOutput_initWithOrgApacheLuceneStoreRateLimiter_withOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneStoreRateLimiter *rateLimiter, OrgApacheLuceneStoreIndexOutput *delegate) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreRateLimitedIndexOutput, initWithOrgApacheLuceneStoreRateLimiter_withOrgApacheLuceneStoreIndexOutput_, rateLimiter, delegate)
}

void OrgApacheLuceneStoreRateLimitedIndexOutput_checkRate(OrgApacheLuceneStoreRateLimitedIndexOutput *self) {
  if (self->bytesSinceLastPause_ > self->currentMinPauseCheckBytes_) {
    [((OrgApacheLuceneStoreRateLimiter *) nil_chk(self->rateLimiter_)) pauseWithLong:self->bytesSinceLastPause_];
    self->bytesSinceLastPause_ = 0;
    self->currentMinPauseCheckBytes_ = [self->rateLimiter_ getMinPauseCheckBytes];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreRateLimitedIndexOutput)
