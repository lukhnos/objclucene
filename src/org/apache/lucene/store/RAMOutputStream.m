//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/RAMOutputStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Set.h"
#include "java/util/zip/CRC32.h"
#include "java/util/zip/Checksum.h"
#include "org/apache/lucene/store/BufferedChecksum.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/store/RAMOutputStream must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneStoreRAMOutputStream () {
 @public
  OrgApacheLuceneStoreRAMFile *file_;
  IOSByteArray *currentBuffer_;
  jint currentBufferIndex_;
  jint bufferPosition_;
  jlong bufferStart_;
  jint bufferLength_;
  id<JavaUtilZipChecksum> crc_;
}

- (void)switchCurrentBuffer;

- (void)setFileLength;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreRAMOutputStream, file_, OrgApacheLuceneStoreRAMFile *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreRAMOutputStream, currentBuffer_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneStoreRAMOutputStream, crc_, id<JavaUtilZipChecksum>)

__attribute__((unused)) static void OrgApacheLuceneStoreRAMOutputStream_switchCurrentBuffer(OrgApacheLuceneStoreRAMOutputStream *self);

__attribute__((unused)) static void OrgApacheLuceneStoreRAMOutputStream_setFileLength(OrgApacheLuceneStoreRAMOutputStream *self);

@implementation OrgApacheLuceneStoreRAMOutputStream

+ (jint)BUFFER_SIZE {
  return OrgApacheLuceneStoreRAMOutputStream_BUFFER_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreRAMOutputStream_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneStoreRAMFile:(OrgApacheLuceneStoreRAMFile *)f
                                        withBoolean:(jboolean)checksum {
  OrgApacheLuceneStoreRAMOutputStream_initWithOrgApacheLuceneStoreRAMFile_withBoolean_(self, f, checksum);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
 withOrgApacheLuceneStoreRAMFile:(OrgApacheLuceneStoreRAMFile *)f
                     withBoolean:(jboolean)checksum {
  OrgApacheLuceneStoreRAMOutputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_withBoolean_(self, name, f, checksum);
  return self;
}

- (void)writeToWithOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  [self flush];
  jlong end = ((OrgApacheLuceneStoreRAMFile *) nil_chk(file_))->length_;
  jlong pos = 0;
  jint buffer = 0;
  while (pos < end) {
    jint length = OrgApacheLuceneStoreRAMOutputStream_BUFFER_SIZE;
    jlong nextPos = pos + length;
    if (nextPos > end) {
      length = (jint) (end - pos);
    }
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeBytesWithByteArray:[file_ getBufferWithInt:buffer++] withInt:length];
    pos = nextPos;
  }
}

- (void)writeToWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)offset {
  [self flush];
  jlong end = ((OrgApacheLuceneStoreRAMFile *) nil_chk(file_))->length_;
  jlong pos = 0;
  jint buffer = 0;
  jint bytesUpto = offset;
  while (pos < end) {
    jint length = OrgApacheLuceneStoreRAMOutputStream_BUFFER_SIZE;
    jlong nextPos = pos + length;
    if (nextPos > end) {
      length = (jint) (end - pos);
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([file_ getBufferWithInt:buffer++], 0, bytes, bytesUpto, length);
    bytesUpto += length;
    pos = nextPos;
  }
}

- (void)reset {
  JreStrongAssign(&currentBuffer_, nil);
  currentBufferIndex_ = -1;
  bufferPosition_ = 0;
  bufferStart_ = 0;
  bufferLength_ = 0;
  [((OrgApacheLuceneStoreRAMFile *) nil_chk(file_)) setLengthWithLong:0];
  if (crc_ != nil) {
    [crc_ reset];
  }
}

- (void)close {
  [self flush];
}

- (void)writeByteWithByte:(jbyte)b {
  if (bufferPosition_ == bufferLength_) {
    currentBufferIndex_++;
    OrgApacheLuceneStoreRAMOutputStream_switchCurrentBuffer(self);
  }
  if (crc_ != nil) {
    [crc_ updateWithInt:b];
  }
  *IOSByteArray_GetRef(nil_chk(currentBuffer_), bufferPosition_++) = b;
}

- (void)writeBytesWithByteArray:(IOSByteArray *)b
                        withInt:(jint)offset
                        withInt:(jint)len {
  JreAssert(b != nil, @"org/apache/lucene/store/RAMOutputStream.java:143 condition failed: assert b != null;");
  if (crc_ != nil) {
    [crc_ updateWithByteArray:b withInt:offset withInt:len];
  }
  while (len > 0) {
    if (bufferPosition_ == bufferLength_) {
      currentBufferIndex_++;
      OrgApacheLuceneStoreRAMOutputStream_switchCurrentBuffer(self);
    }
    jint remainInBuffer = ((IOSByteArray *) nil_chk(currentBuffer_))->size_ - bufferPosition_;
    jint bytesToCopy = len < remainInBuffer ? len : remainInBuffer;
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, offset, currentBuffer_, bufferPosition_, bytesToCopy);
    offset += bytesToCopy;
    len -= bytesToCopy;
    bufferPosition_ += bytesToCopy;
  }
}

- (void)switchCurrentBuffer {
  OrgApacheLuceneStoreRAMOutputStream_switchCurrentBuffer(self);
}

- (void)setFileLength {
  OrgApacheLuceneStoreRAMOutputStream_setFileLength(self);
}

- (void)flush {
  OrgApacheLuceneStoreRAMOutputStream_setFileLength(self);
}

- (jlong)getFilePointer {
  return currentBufferIndex_ < 0 ? 0 : bufferStart_ + bufferPosition_;
}

- (jlong)ramBytesUsed {
  return (jlong) [((OrgApacheLuceneStoreRAMFile *) nil_chk(file_)) numBuffers] * (jlong) OrgApacheLuceneStoreRAMOutputStream_BUFFER_SIZE;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_singletonWithId_(OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"file", file_));
}

- (jlong)getChecksum {
  if (crc_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"internal RAMOutputStream created with checksum disabled");
  }
  else {
    return [crc_ getValue];
  }
}

- (void)dealloc {
  RELEASE_(file_);
  RELEASE_(currentBuffer_);
  RELEASE_(crc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 4, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 4, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgApacheLuceneStoreRAMFile:withBoolean:);
  methods[2].selector = @selector(initWithNSString:withOrgApacheLuceneStoreRAMFile:withBoolean:);
  methods[3].selector = @selector(writeToWithOrgApacheLuceneStoreDataOutput:);
  methods[4].selector = @selector(writeToWithByteArray:withInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(close);
  methods[7].selector = @selector(writeByteWithByte:);
  methods[8].selector = @selector(writeBytesWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(switchCurrentBuffer);
  methods[10].selector = @selector(setFileLength);
  methods[11].selector = @selector(flush);
  methods[12].selector = @selector(getFilePointer);
  methods[13].selector = @selector(ramBytesUsed);
  methods[14].selector = @selector(getChildResources);
  methods[15].selector = @selector(getChecksum);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_SIZE", "I", .constantValue.asInt = OrgApacheLuceneStoreRAMOutputStream_BUFFER_SIZE, 0x18, -1, -1, -1, -1 },
    { "file_", "LOrgApacheLuceneStoreRAMFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentBuffer_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentBufferIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferStart_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "crc_", "LJavaUtilZipChecksum;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreRAMFile;Z", "LNSString;LOrgApacheLuceneStoreRAMFile;Z", "writeTo", "LOrgApacheLuceneStoreDataOutput;", "LJavaIoIOException;", "[BI", "writeByte", "B", "writeBytes", "[BII", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreRAMOutputStream = { "RAMOutputStream", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x1, 16, 8, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreRAMOutputStream;
}

@end

void OrgApacheLuceneStoreRAMOutputStream_init(OrgApacheLuceneStoreRAMOutputStream *self) {
  OrgApacheLuceneStoreRAMOutputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_withBoolean_(self, @"noname", create_OrgApacheLuceneStoreRAMFile_init(), false);
}

OrgApacheLuceneStoreRAMOutputStream *new_OrgApacheLuceneStoreRAMOutputStream_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreRAMOutputStream, init)
}

OrgApacheLuceneStoreRAMOutputStream *create_OrgApacheLuceneStoreRAMOutputStream_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreRAMOutputStream, init)
}

void OrgApacheLuceneStoreRAMOutputStream_initWithOrgApacheLuceneStoreRAMFile_withBoolean_(OrgApacheLuceneStoreRAMOutputStream *self, OrgApacheLuceneStoreRAMFile *f, jboolean checksum) {
  OrgApacheLuceneStoreRAMOutputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_withBoolean_(self, @"noname", f, checksum);
}

OrgApacheLuceneStoreRAMOutputStream *new_OrgApacheLuceneStoreRAMOutputStream_initWithOrgApacheLuceneStoreRAMFile_withBoolean_(OrgApacheLuceneStoreRAMFile *f, jboolean checksum) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreRAMOutputStream, initWithOrgApacheLuceneStoreRAMFile_withBoolean_, f, checksum)
}

OrgApacheLuceneStoreRAMOutputStream *create_OrgApacheLuceneStoreRAMOutputStream_initWithOrgApacheLuceneStoreRAMFile_withBoolean_(OrgApacheLuceneStoreRAMFile *f, jboolean checksum) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreRAMOutputStream, initWithOrgApacheLuceneStoreRAMFile_withBoolean_, f, checksum)
}

void OrgApacheLuceneStoreRAMOutputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_withBoolean_(OrgApacheLuceneStoreRAMOutputStream *self, NSString *name, OrgApacheLuceneStoreRAMFile *f, jboolean checksum) {
  OrgApacheLuceneStoreIndexOutput_initWithNSString_(self, JreStrcat("$$$", @"RAMOutputStream(name=\"", name, @"\")"));
  JreStrongAssign(&self->file_, f);
  self->currentBufferIndex_ = -1;
  JreStrongAssign(&self->currentBuffer_, nil);
  if (checksum) {
    JreStrongAssignAndConsume(&self->crc_, new_OrgApacheLuceneStoreBufferedChecksum_initWithJavaUtilZipChecksum_(create_JavaUtilZipCRC32_init()));
  }
  else {
    JreStrongAssign(&self->crc_, nil);
  }
}

OrgApacheLuceneStoreRAMOutputStream *new_OrgApacheLuceneStoreRAMOutputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_withBoolean_(NSString *name, OrgApacheLuceneStoreRAMFile *f, jboolean checksum) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreRAMOutputStream, initWithNSString_withOrgApacheLuceneStoreRAMFile_withBoolean_, name, f, checksum)
}

OrgApacheLuceneStoreRAMOutputStream *create_OrgApacheLuceneStoreRAMOutputStream_initWithNSString_withOrgApacheLuceneStoreRAMFile_withBoolean_(NSString *name, OrgApacheLuceneStoreRAMFile *f, jboolean checksum) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreRAMOutputStream, initWithNSString_withOrgApacheLuceneStoreRAMFile_withBoolean_, name, f, checksum)
}

void OrgApacheLuceneStoreRAMOutputStream_switchCurrentBuffer(OrgApacheLuceneStoreRAMOutputStream *self) {
  if (self->currentBufferIndex_ == [((OrgApacheLuceneStoreRAMFile *) nil_chk(self->file_)) numBuffers]) {
    JreStrongAssign(&self->currentBuffer_, [self->file_ addBufferWithInt:OrgApacheLuceneStoreRAMOutputStream_BUFFER_SIZE]);
  }
  else {
    JreStrongAssign(&self->currentBuffer_, [self->file_ getBufferWithInt:self->currentBufferIndex_]);
  }
  self->bufferPosition_ = 0;
  self->bufferStart_ = (jlong) OrgApacheLuceneStoreRAMOutputStream_BUFFER_SIZE * (jlong) self->currentBufferIndex_;
  self->bufferLength_ = ((IOSByteArray *) nil_chk(self->currentBuffer_))->size_;
}

void OrgApacheLuceneStoreRAMOutputStream_setFileLength(OrgApacheLuceneStoreRAMOutputStream *self) {
  jlong pointer = self->bufferStart_ + self->bufferPosition_;
  if (pointer > ((OrgApacheLuceneStoreRAMFile *) nil_chk(self->file_))->length_) {
    [self->file_ setLengthWithLong:pointer];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreRAMOutputStream)
