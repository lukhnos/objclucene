//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/MMapDirectory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/Throwable.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Method.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/MappedByteBuffer.h"
#include "java/nio/channels/FileChannel.h"
#include "java/security/AccessController.h"
#include "java/security/PrivilegedAction.h"
#include "java/security/PrivilegedActionException.h"
#include "java/security/PrivilegedExceptionAction.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/store/ByteBufferIndexInput.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/MMapDirectory.h"
#include "org/apache/lucene/util/Constants.h"
#include "org/lukhnos/portmobile/channels/utils/FileChannelUtils.h"
#include "org/lukhnos/portmobile/file/Path.h"
#include "org/lukhnos/portmobile/file/StandardOpenOption.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/store/MMapDirectory must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneStoreMMapDirectory () {
 @public
  jboolean useUnmapHack_;
  jboolean preload_;
}

- (JavaIoIOException *)convertMapFailedIOExceptionWithJavaIoIOException:(JavaIoIOException *)ioe
                                                           withNSString:(NSString *)resourceDescription
                                                                withInt:(jint)bufSize;

@end

inline id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> OrgApacheLuceneStoreMMapDirectory_get_CLEANER(void);
static id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner> OrgApacheLuceneStoreMMapDirectory_CLEANER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneStoreMMapDirectory, CLEANER, id<OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner>)

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneStoreMMapDirectory_mapWithNSString_withJavaNioChannelsFileChannel_withLong_withLong_(OrgApacheLuceneStoreMMapDirectory *self, NSString *resourceDescription, JavaNioChannelsFileChannel *fc, jlong offset, jlong length);

__attribute__((unused)) static JavaIoIOException *OrgApacheLuceneStoreMMapDirectory_convertMapFailedIOExceptionWithJavaIoIOException_withNSString_withInt_(OrgApacheLuceneStoreMMapDirectory *self, JavaIoIOException *ioe, NSString *resourceDescription, jint bufSize);

@interface OrgApacheLuceneStoreMMapDirectory_1 : NSObject < JavaSecurityPrivilegedAction >

- (instancetype)init;

- (JavaLangBoolean *)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneStoreMMapDirectory_1)

__attribute__((unused)) static void OrgApacheLuceneStoreMMapDirectory_1_init(OrgApacheLuceneStoreMMapDirectory_1 *self);

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_1 *new_OrgApacheLuceneStoreMMapDirectory_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_1 *create_OrgApacheLuceneStoreMMapDirectory_1_init(void);

@interface OrgApacheLuceneStoreMMapDirectory_2 : NSObject < OrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner >

- (instancetype)init;

- (void)freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:(OrgApacheLuceneStoreByteBufferIndexInput *)parent
                                         withJavaNioByteBuffer:(JavaNioByteBuffer *)buffer;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneStoreMMapDirectory_2)

__attribute__((unused)) static void OrgApacheLuceneStoreMMapDirectory_2_init(OrgApacheLuceneStoreMMapDirectory_2 *self);

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_2 *new_OrgApacheLuceneStoreMMapDirectory_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_2 *create_OrgApacheLuceneStoreMMapDirectory_2_init(void);

@interface OrgApacheLuceneStoreMMapDirectory_2_1 : NSObject < JavaSecurityPrivilegedExceptionAction > {
 @public
  JavaNioByteBuffer *val$buffer_;
}

- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0;

- (JavaLangVoid *)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneStoreMMapDirectory_2_1)

__attribute__((unused)) static void OrgApacheLuceneStoreMMapDirectory_2_1_initWithJavaNioByteBuffer_(OrgApacheLuceneStoreMMapDirectory_2_1 *self, JavaNioByteBuffer *capture$0);

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_2_1 *new_OrgApacheLuceneStoreMMapDirectory_2_1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneStoreMMapDirectory_2_1 *create_OrgApacheLuceneStoreMMapDirectory_2_1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneStoreMMapDirectory)

jint OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE;
jboolean OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED;

@implementation OrgApacheLuceneStoreMMapDirectory

+ (jint)DEFAULT_MAX_CHUNK_SIZE {
  return OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE;
}

+ (jboolean)UNMAP_SUPPORTED {
  return OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path
                 withOrgApacheLuceneStoreLockFactory:(OrgApacheLuceneStoreLockFactory *)lockFactory {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(self, path, lockFactory);
  return self;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_(self, path);
  return self;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path
                                             withInt:(jint)maxChunkSize {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withInt_(self, path, maxChunkSize);
  return self;
}

- (instancetype)initWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path
                 withOrgApacheLuceneStoreLockFactory:(OrgApacheLuceneStoreLockFactory *)lockFactory
                                             withInt:(jint)maxChunkSize {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(self, path, lockFactory, maxChunkSize);
  return self;
}

- (void)setUseUnmapWithBoolean:(jboolean)useUnmapHack {
  if (useUnmapHack && !OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unmap hack not supported on this platform!");
  self->useUnmapHack_ = useUnmapHack;
}

- (jboolean)getUseUnmap {
  return useUnmapHack_;
}

- (void)setPreloadWithBoolean:(jboolean)preload {
  self->preload_ = preload;
}

- (jboolean)getPreload {
  return preload_;
}

- (jint)getMaxChunkSize {
  return JreLShift32(1, chunkSizePower_);
}

- (OrgApacheLuceneStoreIndexInput *)openInputWithNSString:(NSString *)name
                        withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  [self ensureOpen];
  OrgLukhnosPortmobileFilePath *path = JreRetainedLocalValue([((OrgLukhnosPortmobileFilePath *) nil_chk(directory_)) resolveWithNSString:name]);
  {
    JavaNioChannelsFileChannel *c = OrgLukhnosPortmobileChannelsUtilsFileChannelUtils_openWithOrgLukhnosPortmobileFilePath_withOrgLukhnosPortmobileFileStandardOpenOptionArray_(path, [IOSObjectArray arrayWithObjects:(id[]){ JreLoadEnum(OrgLukhnosPortmobileFileStandardOpenOption, READ) } count:1 type:OrgLukhnosPortmobileFileStandardOpenOption_class_()]);
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      NSString *resourceDescription = JreStrcat("$$$", @"MMapIndexInput(path=\"", [((OrgLukhnosPortmobileFilePath *) nil_chk(path)) description], @"\")");
      jboolean useUnmap = [self getUseUnmap];
      return OrgApacheLuceneStoreByteBufferIndexInput_newInstanceWithNSString_withJavaNioByteBufferArray_withLong_withInt_withOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner_withBoolean_(resourceDescription, OrgApacheLuceneStoreMMapDirectory_mapWithNSString_withJavaNioChannelsFileChannel_withLong_withLong_(self, resourceDescription, c, 0, [((JavaNioChannelsFileChannel *) nil_chk(c)) size]), [c size], chunkSizePower_, useUnmap ? OrgApacheLuceneStoreMMapDirectory_CLEANER : nil, useUnmap);
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (c != nil) {
        if (__primaryException1 != nil) {
          @try {
            [c close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [c close];
        }
      }
    }
  }
}

- (IOSObjectArray *)mapWithNSString:(NSString *)resourceDescription
     withJavaNioChannelsFileChannel:(JavaNioChannelsFileChannel *)fc
                           withLong:(jlong)offset
                           withLong:(jlong)length {
  return OrgApacheLuceneStoreMMapDirectory_mapWithNSString_withJavaNioChannelsFileChannel_withLong_withLong_(self, resourceDescription, fc, offset, length);
}

- (JavaIoIOException *)convertMapFailedIOExceptionWithJavaIoIOException:(JavaIoIOException *)ioe
                                                           withNSString:(NSString *)resourceDescription
                                                                withInt:(jint)bufSize {
  return OrgApacheLuceneStoreMMapDirectory_convertMapFailedIOExceptionWithJavaIoIOException_withNSString_withInt_(self, ioe, resourceDescription, bufSize);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreIndexInput;", 0x1, 8, 9, 1, -1, -1, -1 },
    { NULL, "[LJavaNioByteBuffer;", 0x10, 10, 11, 1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x2, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgLukhnosPortmobileFilePath:withOrgApacheLuceneStoreLockFactory:);
  methods[1].selector = @selector(initWithOrgLukhnosPortmobileFilePath:);
  methods[2].selector = @selector(initWithOrgLukhnosPortmobileFilePath:withInt:);
  methods[3].selector = @selector(initWithOrgLukhnosPortmobileFilePath:withOrgApacheLuceneStoreLockFactory:withInt:);
  methods[4].selector = @selector(setUseUnmapWithBoolean:);
  methods[5].selector = @selector(getUseUnmap);
  methods[6].selector = @selector(setPreloadWithBoolean:);
  methods[7].selector = @selector(getPreload);
  methods[8].selector = @selector(getMaxChunkSize);
  methods[9].selector = @selector(openInputWithNSString:withOrgApacheLuceneStoreIOContext:);
  methods[10].selector = @selector(mapWithNSString:withJavaNioChannelsFileChannel:withLong:withLong:);
  methods[11].selector = @selector(convertMapFailedIOExceptionWithJavaIoIOException:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "useUnmapHack_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preload_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_MAX_CHUNK_SIZE", "I", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "chunkSizePower_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "UNMAP_SUPPORTED", "Z", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "CLEANER", "LOrgApacheLuceneStoreByteBufferIndexInput_BufferCleaner;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgLukhnosPortmobileFilePath;LOrgApacheLuceneStoreLockFactory;", "LJavaIoIOException;", "LOrgLukhnosPortmobileFilePath;", "LOrgLukhnosPortmobileFilePath;I", "LOrgLukhnosPortmobileFilePath;LOrgApacheLuceneStoreLockFactory;I", "setUseUnmap", "Z", "setPreload", "openInput", "LNSString;LOrgApacheLuceneStoreIOContext;", "map", "LNSString;LJavaNioChannelsFileChannel;JJ", "convertMapFailedIOException", "LJavaIoIOException;LNSString;I", &OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE, &OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED, &OrgApacheLuceneStoreMMapDirectory_CLEANER };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreMMapDirectory = { "MMapDirectory", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x1, 12, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreMMapDirectory;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneStoreMMapDirectory class]) {
    OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE = JreLoadStatic(OrgApacheLuceneUtilConstants, JRE_IS_64BIT) ? (JreLShift32(1, 30)) : (JreLShift32(1, 28));
    OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED = [((JavaLangBoolean *) nil_chk(JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedAction_(create_OrgApacheLuceneStoreMMapDirectory_1_init()))) booleanValue];
    JreStrongAssignAndConsume(&OrgApacheLuceneStoreMMapDirectory_CLEANER, new_OrgApacheLuceneStoreMMapDirectory_2_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneStoreMMapDirectory)
  }
}

@end

void OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(OrgApacheLuceneStoreMMapDirectory *self, OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory) {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(self, path, lockFactory, OrgApacheLuceneStoreMMapDirectory_DEFAULT_MAX_CHUNK_SIZE);
}

OrgApacheLuceneStoreMMapDirectory *new_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_, path, lockFactory)
}

OrgApacheLuceneStoreMMapDirectory *create_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_, path, lockFactory)
}

void OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_(OrgApacheLuceneStoreMMapDirectory *self, OrgLukhnosPortmobileFilePath *path) {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(self, path, OrgApacheLuceneStoreFSLockFactory_getDefault());
}

OrgApacheLuceneStoreMMapDirectory *new_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *path) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_, path)
}

OrgApacheLuceneStoreMMapDirectory *create_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *path) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_, path)
}

void OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withInt_(OrgApacheLuceneStoreMMapDirectory *self, OrgLukhnosPortmobileFilePath *path, jint maxChunkSize) {
  OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(self, path, OrgApacheLuceneStoreFSLockFactory_getDefault(), maxChunkSize);
}

OrgApacheLuceneStoreMMapDirectory *new_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withInt_(OrgLukhnosPortmobileFilePath *path, jint maxChunkSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withInt_, path, maxChunkSize)
}

OrgApacheLuceneStoreMMapDirectory *create_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withInt_(OrgLukhnosPortmobileFilePath *path, jint maxChunkSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withInt_, path, maxChunkSize)
}

void OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(OrgApacheLuceneStoreMMapDirectory *self, OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory, jint maxChunkSize) {
  OrgApacheLuceneStoreFSDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(self, path, lockFactory);
  self->useUnmapHack_ = OrgApacheLuceneStoreMMapDirectory_UNMAP_SUPPORTED;
  if (maxChunkSize <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Maximum chunk size for mmap must be >0");
  }
  self->chunkSizePower_ = 31 - JavaLangInteger_numberOfLeadingZerosWithInt_(maxChunkSize);
  JreAssert(self->chunkSizePower_ >= 0 && self->chunkSizePower_ <= 30, @"org/apache/lucene/store/MMapDirectory.java:162 condition failed: assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;");
}

OrgApacheLuceneStoreMMapDirectory *new_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory, jint maxChunkSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_, path, lockFactory, maxChunkSize)
}

OrgApacheLuceneStoreMMapDirectory *create_OrgApacheLuceneStoreMMapDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_(OrgLukhnosPortmobileFilePath *path, OrgApacheLuceneStoreLockFactory *lockFactory, jint maxChunkSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory, initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_withInt_, path, lockFactory, maxChunkSize)
}

IOSObjectArray *OrgApacheLuceneStoreMMapDirectory_mapWithNSString_withJavaNioChannelsFileChannel_withLong_withLong_(OrgApacheLuceneStoreMMapDirectory *self, NSString *resourceDescription, JavaNioChannelsFileChannel *fc, jlong offset, jlong length) {
  if ((JreURShift64(length, self->chunkSizePower_)) >= JavaLangInteger_MAX_VALUE) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"RandomAccessFile too big for chunk size: ", resourceDescription));
  jlong chunkSize = JreLShift64(1LL, self->chunkSizePower_);
  jint nrBuffers = (jint) (JreURShift64(length, self->chunkSizePower_)) + 1;
  IOSObjectArray *buffers = [IOSObjectArray arrayWithLength:nrBuffers type:JavaNioByteBuffer_class_()];
  jlong bufferStart = 0LL;
  for (jint bufNr = 0; bufNr < nrBuffers; bufNr++) {
    jint bufSize = (jint) ((length > (bufferStart + chunkSize)) ? chunkSize : (length - bufferStart));
    JavaNioMappedByteBuffer *buffer;
    @try {
      buffer = [((JavaNioChannelsFileChannel *) nil_chk(fc)) mapWithJavaNioChannelsFileChannel_MapMode:JreLoadStatic(JavaNioChannelsFileChannel_MapMode, READ_ONLY) withLong:offset + bufferStart withLong:bufSize];
    }
    @catch (JavaIoIOException *ioe) {
      @throw nil_chk(OrgApacheLuceneStoreMMapDirectory_convertMapFailedIOExceptionWithJavaIoIOException_withNSString_withInt_(self, ioe, resourceDescription, bufSize));
    }
    if (self->preload_) {
      [((JavaNioMappedByteBuffer *) nil_chk(buffer)) load__];
    }
    IOSObjectArray_Set(buffers, bufNr, buffer);
    bufferStart += bufSize;
  }
  return buffers;
}

JavaIoIOException *OrgApacheLuceneStoreMMapDirectory_convertMapFailedIOExceptionWithJavaIoIOException_withNSString_withInt_(OrgApacheLuceneStoreMMapDirectory *self, JavaIoIOException *ioe, NSString *resourceDescription, jint bufSize) {
  NSString *originalMessage;
  JavaLangThrowable *originalCause;
  if ([[((JavaIoIOException *) nil_chk(ioe)) getCause] isKindOfClass:[JavaLangOutOfMemoryError class]]) {
    originalMessage = @"Map failed";
    originalCause = nil;
  }
  else {
    originalMessage = [ioe getMessage];
    originalCause = [ioe getCause];
  }
  NSString *moreInfo;
  if (!JreLoadStatic(OrgApacheLuceneUtilConstants, JRE_IS_64BIT)) {
    moreInfo = @"MMapDirectory should only be used on 64bit platforms, because the address space on 32bit operating systems is too small. ";
  }
  else if (JreLoadStatic(OrgApacheLuceneUtilConstants, WINDOWS)) {
    moreInfo = @"Windows is unfortunately very limited on virtual address space. If your index size is several hundred Gigabytes, consider changing to Linux. ";
  }
  else if (JreLoadStatic(OrgApacheLuceneUtilConstants, LINUX)) {
    moreInfo = @"Please review 'ulimit -v', 'ulimit -m' (both should return 'unlimited'), and 'sysctl vm.max_map_count'. ";
  }
  else {
    moreInfo = @"Please review 'ulimit -v', 'ulimit -m' (both should return 'unlimited'). ";
  }
  JavaIoIOException *newIoe = create_JavaIoIOException_initWithNSString_withJavaLangThrowable_(NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ENGLISH), @"%s: %s [this may be caused by lack of enough unfragmented virtual address space or too restrictive virtual memory limits enforced by the operating system, preventing us to map a chunk of %d bytes. %sMore information: http://blog.thetaphi.de/2012/07/use-lucenes-mmapdirectory-on-64bit.html]", [IOSObjectArray arrayWithObjects:(id[]){ originalMessage, resourceDescription, JavaLangInteger_valueOfWithInt_(bufSize), moreInfo } count:4 type:NSObject_class_()]), originalCause);
  [newIoe setStackTraceWithJavaLangStackTraceElementArray:[ioe getStackTrace]];
  return newIoe;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreMMapDirectory)

@implementation OrgApacheLuceneStoreMMapDirectory_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreMMapDirectory_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangBoolean *)run {
  @try {
    IOSClass *clazz = IOSClass_forName_(@"java.nio.DirectByteBuffer");
    JavaLangReflectMethod *method = [((IOSClass *) nil_chk(clazz)) getMethod:@"cleaner" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
    [((JavaLangReflectMethod *) nil_chk(method)) setAccessibleWithBoolean:true];
    return JavaLangBoolean_valueOfWithBoolean_(true);
  }
  @catch (JavaLangException *e) {
    return JavaLangBoolean_valueOfWithBoolean_(false);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreMMapDirectory;", "Ljava/lang/Object;Ljava/security/PrivilegedAction<Ljava/lang/Boolean;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreMMapDirectory_1 = { "", "org.apache.lucene.store", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, 1, -1 };
  return &_OrgApacheLuceneStoreMMapDirectory_1;
}

@end

void OrgApacheLuceneStoreMMapDirectory_1_init(OrgApacheLuceneStoreMMapDirectory_1 *self) {
  NSObject_init(self);
}

OrgApacheLuceneStoreMMapDirectory_1 *new_OrgApacheLuceneStoreMMapDirectory_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory_1, init)
}

OrgApacheLuceneStoreMMapDirectory_1 *create_OrgApacheLuceneStoreMMapDirectory_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory_1, init)
}

@implementation OrgApacheLuceneStoreMMapDirectory_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreMMapDirectory_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:(OrgApacheLuceneStoreByteBufferIndexInput *)parent
                                         withJavaNioByteBuffer:(JavaNioByteBuffer *)buffer {
  @try {
    JavaSecurityAccessController_doPrivilegedWithJavaSecurityPrivilegedExceptionAction_(create_OrgApacheLuceneStoreMMapDirectory_2_1_initWithJavaNioByteBuffer_(buffer));
  }
  @catch (JavaSecurityPrivilegedActionException *e) {
    @throw create_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Unable to unmap the mapped buffer: ", [((OrgApacheLuceneStoreByteBufferIndexInput *) nil_chk(parent)) description]), [e getCause]);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:withJavaNioByteBuffer:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "freeBuffer", "LOrgApacheLuceneStoreByteBufferIndexInput;LJavaNioByteBuffer;", "LJavaIoIOException;", "LOrgApacheLuceneStoreMMapDirectory;" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreMMapDirectory_2 = { "", "org.apache.lucene.store", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreMMapDirectory_2;
}

@end

void OrgApacheLuceneStoreMMapDirectory_2_init(OrgApacheLuceneStoreMMapDirectory_2 *self) {
  NSObject_init(self);
}

OrgApacheLuceneStoreMMapDirectory_2 *new_OrgApacheLuceneStoreMMapDirectory_2_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory_2, init)
}

OrgApacheLuceneStoreMMapDirectory_2 *create_OrgApacheLuceneStoreMMapDirectory_2_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory_2, init)
}

@implementation OrgApacheLuceneStoreMMapDirectory_2_1

- (instancetype)initWithJavaNioByteBuffer:(JavaNioByteBuffer *)capture$0 {
  OrgApacheLuceneStoreMMapDirectory_2_1_initWithJavaNioByteBuffer_(self, capture$0);
  return self;
}

- (JavaLangVoid *)run {
  JavaLangReflectMethod *getCleanerMethod = [[((JavaNioByteBuffer *) nil_chk(val$buffer_)) java_getClass] getMethod:@"cleaner" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
  [((JavaLangReflectMethod *) nil_chk(getCleanerMethod)) setAccessibleWithBoolean:true];
  id cleaner = [getCleanerMethod invokeWithId:val$buffer_ withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
  if (cleaner != nil) {
    [((JavaLangReflectMethod *) nil_chk([[cleaner java_getClass] getMethod:@"clean" parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]])) invokeWithId:cleaner withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
  }
  return JreRetainedLocalValue(nil);
}

- (void)dealloc {
  RELEASE_(val$buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNioByteBuffer:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$buffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNioByteBuffer;", "LJavaLangException;", "LOrgApacheLuceneStoreMMapDirectory_2;", "freeBufferWithOrgApacheLuceneStoreByteBufferIndexInput:withJavaNioByteBuffer:", "Ljava/lang/Object;Ljava/security/PrivilegedExceptionAction<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreMMapDirectory_2_1 = { "", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x8010, 2, 1, 2, -1, 3, 4, -1 };
  return &_OrgApacheLuceneStoreMMapDirectory_2_1;
}

@end

void OrgApacheLuceneStoreMMapDirectory_2_1_initWithJavaNioByteBuffer_(OrgApacheLuceneStoreMMapDirectory_2_1 *self, JavaNioByteBuffer *capture$0) {
  JreStrongAssign(&self->val$buffer_, capture$0);
  NSObject_init(self);
}

OrgApacheLuceneStoreMMapDirectory_2_1 *new_OrgApacheLuceneStoreMMapDirectory_2_1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreMMapDirectory_2_1, initWithJavaNioByteBuffer_, capture$0)
}

OrgApacheLuceneStoreMMapDirectory_2_1 *create_OrgApacheLuceneStoreMMapDirectory_2_1_initWithJavaNioByteBuffer_(JavaNioByteBuffer *capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreMMapDirectory_2_1, initWithJavaNioByteBuffer_, capture$0)
}
