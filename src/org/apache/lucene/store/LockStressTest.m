//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/LockStressTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Field.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/Socket.h"
#include "java/util/Random.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "org/apache/lucene/store/LockStressTest.h"
#include "org/apache/lucene/store/NoLockFactory.h"
#include "org/apache/lucene/store/SimpleFSDirectory.h"
#include "org/apache/lucene/store/VerifyingLockFactory.h"
#include "org/lukhnos/portmobile/file/Path.h"
#include "org/lukhnos/portmobile/file/Paths.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/store/LockStressTest must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneStoreLockStressTest ()

+ (OrgApacheLuceneStoreFSLockFactory *)getNewLockFactoryWithNSString:(NSString *)lockFactoryClassName;

@end

__attribute__((unused)) static OrgApacheLuceneStoreFSLockFactory *OrgApacheLuceneStoreLockStressTest_getNewLockFactoryWithNSString_(NSString *lockFactoryClassName);

NSString *OrgApacheLuceneStoreLockStressTest_LOCK_FILE_NAME = @"test.lock";

@implementation OrgApacheLuceneStoreLockStressTest

+ (NSString *)LOCK_FILE_NAME {
  return OrgApacheLuceneStoreLockStressTest_LOCK_FILE_NAME;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneStoreLockStressTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgApacheLuceneStoreLockStressTest_mainWithNSStringArray_(args);
}

+ (OrgApacheLuceneStoreFSLockFactory *)getNewLockFactoryWithNSString:(NSString *)lockFactoryClassName {
  return OrgApacheLuceneStoreLockStressTest_getNewLockFactoryWithNSString_(lockFactoryClassName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreFSLockFactory;", 0xa, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(getNewLockFactoryWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCK_FILE_NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaLangException;", "getNewLockFactory", "LNSString;", "LJavaIoIOException;", &OrgApacheLuceneStoreLockStressTest_LOCK_FILE_NAME };
  static const J2ObjcClassInfo _OrgApacheLuceneStoreLockStressTest = { "LockStressTest", "org.apache.lucene.store", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneStoreLockStressTest;
}

@end

void OrgApacheLuceneStoreLockStressTest_init(OrgApacheLuceneStoreLockStressTest *self) {
  NSObject_init(self);
}

OrgApacheLuceneStoreLockStressTest *new_OrgApacheLuceneStoreLockStressTest_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneStoreLockStressTest, init)
}

OrgApacheLuceneStoreLockStressTest *create_OrgApacheLuceneStoreLockStressTest_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneStoreLockStressTest, init)
}

void OrgApacheLuceneStoreLockStressTest_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheLuceneStoreLockStressTest_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ != 7) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Usage: java org.apache.lucene.store.LockStressTest myID verifierHost verifierPort lockFactoryClassName lockDirName sleepTimeMS count\n\n  myID = int from 0 .. 255 (should be unique for test process)\n  verifierHost = hostname that LockVerifyServer is listening on\n  verifierPort = port that LockVerifyServer is listening on\n  lockFactoryClassName = primary FSLockFactory class that we will use\n  lockDirName = path to the lock directory\n  sleepTimeMS = milliseconds to pause betweeen each lock obtain/release\n  count = number of locking tries\n\nYou should run multiple instances of this process, each with its own\nunique ID, and each pointing to the same lock directory, to verify\nthat locking is working correctly.\n\nMake sure you are first running LockVerifyServer."];
    JavaLangSystem_exitWithInt_(1);
  }
  jint arg = 0;
  jint myID = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, arg++));
  if (myID < 0 || myID > 255) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"myID must be a unique int 0..255"];
    JavaLangSystem_exitWithInt_(1);
  }
  NSString *verifierHost = IOSObjectArray_Get(args, arg++);
  jint verifierPort = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, arg++));
  NSString *lockFactoryClassName = IOSObjectArray_Get(args, arg++);
  OrgLukhnosPortmobileFilePath *lockDirPath = OrgLukhnosPortmobileFilePaths_getWithNSString_(IOSObjectArray_Get(args, arg++));
  jint sleepTimeMS = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, arg++));
  jint count = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, arg++));
  OrgApacheLuceneStoreLockFactory *lockFactory = OrgApacheLuceneStoreLockStressTest_getNewLockFactoryWithNSString_(lockFactoryClassName);
  OrgApacheLuceneStoreFSDirectory *lockDir = create_OrgApacheLuceneStoreSimpleFSDirectory_initWithOrgLukhnosPortmobileFilePath_withOrgApacheLuceneStoreLockFactory_(lockDirPath, JreLoadStatic(OrgApacheLuceneStoreNoLockFactory, INSTANCE));
  JavaNetInetSocketAddress *addr = create_JavaNetInetSocketAddress_initWithNSString_withInt_(verifierHost, verifierPort);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$I$", @"Connecting to server ", addr, @" and registering as client ", myID, @"...")];
  {
    JavaNetSocket *socket = create_JavaNetSocket_init();
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      [socket setReuseAddressWithBoolean:true];
      [socket connectWithJavaNetSocketAddress:addr withInt:500];
      JavaIoOutputStream *out = [socket getOutputStream];
      JavaIoInputStream *in = [socket getInputStream];
      [((JavaIoOutputStream *) nil_chk(out)) writeWithInt:myID];
      [out flush];
      OrgApacheLuceneStoreLockFactory *verifyLF = create_OrgApacheLuceneStoreVerifyingLockFactory_initWithOrgApacheLuceneStoreLockFactory_withJavaIoInputStream_withJavaIoOutputStream_(lockFactory, in, out);
      JavaUtilRandom *rnd = create_JavaUtilRandom_init();
      if ([((JavaIoInputStream *) nil_chk(in)) read] != 43) {
        @throw create_JavaIoIOException_initWithNSString_(@"Protocol violation");
      }
      for (jint i = 0; i < count; i++) {
        @try {
          OrgApacheLuceneStoreLock *l = [verifyLF obtainLockWithOrgApacheLuceneStoreDirectory:lockDir withNSString:OrgApacheLuceneStoreLockStressTest_LOCK_FILE_NAME];
          JavaLangThrowable *__primaryException1 = nil;
          @try {
            if ([rnd nextIntWithInt:10] == 0) {
              if ([rnd nextBoolean]) {
                verifyLF = create_OrgApacheLuceneStoreVerifyingLockFactory_initWithOrgApacheLuceneStoreLockFactory_withJavaIoInputStream_withJavaIoOutputStream_(OrgApacheLuceneStoreLockStressTest_getNewLockFactoryWithNSString_(lockFactoryClassName), in, out);
              }
              @try {
                OrgApacheLuceneStoreLock *secondLock = [verifyLF obtainLockWithOrgApacheLuceneStoreDirectory:lockDir withNSString:OrgApacheLuceneStoreLockStressTest_LOCK_FILE_NAME];
                JavaLangThrowable *__primaryException1 = nil;
                @try {
                  @throw create_JavaIoIOException_initWithNSString_(@"Double obtain");
                }
                @catch (JavaLangThrowable *e) {
                  __primaryException1 = e;
                  @throw e;
                }
                @finally {
                  if (secondLock != nil) {
                    if (__primaryException1 != nil) {
                      @try {
                        [secondLock close];
                      }
                      @catch (JavaLangThrowable *e) {
                        [__primaryException1 addSuppressedWithJavaLangThrowable:e];
                      }
                    }
                    else {
                      [secondLock close];
                    }
                  }
                }
              }
              @catch (OrgApacheLuceneStoreLockObtainFailedException *loe) {
              }
            }
            JavaLangThread_sleepWithLong_(sleepTimeMS);
          }
          @catch (JavaLangThrowable *e) {
            __primaryException1 = e;
            @throw e;
          }
          @finally {
            if (l != nil) {
              if (__primaryException1 != nil) {
                @try {
                  [l close];
                }
                @catch (JavaLangThrowable *e) {
                  [__primaryException1 addSuppressedWithJavaLangThrowable:e];
                }
              }
              else {
                [l close];
              }
            }
          }
        }
        @catch (OrgApacheLuceneStoreLockObtainFailedException *loe) {
        }
        if (JreIntMod(i, 500) == 0) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("D$", (i * 100. / count), @"% done.")];
        }
        JavaLangThread_sleepWithLong_(sleepTimeMS);
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (socket != nil) {
        if (__primaryException1 != nil) {
          @try {
            [socket close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [socket close];
        }
      }
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"Finished ", count, @" tries.")];
}

OrgApacheLuceneStoreFSLockFactory *OrgApacheLuceneStoreLockStressTest_getNewLockFactoryWithNSString_(NSString *lockFactoryClassName) {
  OrgApacheLuceneStoreLockStressTest_initialize();
  @try {
    return (OrgApacheLuceneStoreFSLockFactory *) cast_chk([((JavaLangReflectField *) nil_chk([((IOSClass *) nil_chk(IOSClass_forName_(lockFactoryClassName))) getField:@"INSTANCE"])) getWithId:nil], [OrgApacheLuceneStoreFSLockFactory class]);
  }
  @catch (JavaLangException *e) {
  }
  @try {
    return [((IOSClass *) nil_chk([((IOSClass *) nil_chk(IOSClass_forName_(lockFactoryClassName))) asSubclass:OrgApacheLuceneStoreFSLockFactory_class_()])) newInstance];
  }
  @catch (JavaLangException *e) {
  }
  @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"Cannot get lock factory singleton of ", lockFactoryClassName));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneStoreLockStressTest)
