//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/document/CompressionTools.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/util/zip/Deflater.h"
#include "java/util/zip/Inflater.h"
#include "org/apache/lucene/document/CompressionTools.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/UnicodeUtil.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/document/CompressionTools must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneDocumentCompressionTools ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneDocumentCompressionTools_init(OrgApacheLuceneDocumentCompressionTools *self);

__attribute__((unused)) static OrgApacheLuceneDocumentCompressionTools *new_OrgApacheLuceneDocumentCompressionTools_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneDocumentCompressionTools *create_OrgApacheLuceneDocumentCompressionTools_init(void);

@implementation OrgApacheLuceneDocumentCompressionTools

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneDocumentCompressionTools_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)value
                                withInt:(jint)offset
                                withInt:(jint)length
                                withInt:(jint)compressionLevel {
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(value, offset, length, compressionLevel);
}

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)value
                                withInt:(jint)offset
                                withInt:(jint)length {
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_(value, offset, length);
}

+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)value {
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_(value);
}

+ (IOSByteArray *)compressStringWithNSString:(NSString *)value {
  return OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_(value);
}

+ (IOSByteArray *)compressStringWithNSString:(NSString *)value
                                     withInt:(jint)compressionLevel {
  return OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_withInt_(value, compressionLevel);
}

+ (IOSByteArray *)decompressWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  return OrgApacheLuceneDocumentCompressionTools_decompressWithOrgApacheLuceneUtilBytesRef_(bytes);
}

+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)value {
  return OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_(value);
}

+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)value
                                  withInt:(jint)offset
                                  withInt:(jint)length {
  return OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(value, offset, length);
}

+ (NSString *)decompressStringWithByteArray:(IOSByteArray *)value {
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_(value);
}

+ (NSString *)decompressStringWithByteArray:(IOSByteArray *)value
                                    withInt:(jint)offset
                                    withInt:(jint)length {
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_withInt_withInt_(value, offset, length);
}

+ (NSString *)decompressStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithOrgApacheLuceneUtilBytesRef_(bytes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 8, 9, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 3, 9, -1, -1, -1 },
    { NULL, "[B", 0x9, 7, 2, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 3, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 2, 9, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 8, 9, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compressWithByteArray:withInt:withInt:withInt:);
  methods[2].selector = @selector(compressWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(compressWithByteArray:);
  methods[4].selector = @selector(compressStringWithNSString:);
  methods[5].selector = @selector(compressStringWithNSString:withInt:);
  methods[6].selector = @selector(decompressWithOrgApacheLuceneUtilBytesRef:);
  methods[7].selector = @selector(decompressWithByteArray:);
  methods[8].selector = @selector(decompressWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(decompressStringWithByteArray:);
  methods[10].selector = @selector(decompressStringWithByteArray:withInt:withInt:);
  methods[11].selector = @selector(decompressStringWithOrgApacheLuceneUtilBytesRef:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compress", "[BIII", "[BII", "[B", "compressString", "LNSString;", "LNSString;I", "decompress", "LOrgApacheLuceneUtilBytesRef;", "LJavaUtilZipDataFormatException;", "decompressString" };
  static const J2ObjcClassInfo _OrgApacheLuceneDocumentCompressionTools = { "CompressionTools", "org.apache.lucene.document", ptrTable, methods, NULL, 7, 0x1, 12, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneDocumentCompressionTools;
}

@end

void OrgApacheLuceneDocumentCompressionTools_init(OrgApacheLuceneDocumentCompressionTools *self) {
  NSObject_init(self);
}

OrgApacheLuceneDocumentCompressionTools *new_OrgApacheLuceneDocumentCompressionTools_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneDocumentCompressionTools, init)
}

OrgApacheLuceneDocumentCompressionTools *create_OrgApacheLuceneDocumentCompressionTools_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneDocumentCompressionTools, init)
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(IOSByteArray *value, jint offset, jint length, jint compressionLevel) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  JavaIoByteArrayOutputStream *bos = create_JavaIoByteArrayOutputStream_initWithInt_(length);
  JavaUtilZipDeflater *compressor = create_JavaUtilZipDeflater_init();
  @try {
    [compressor setLevelWithInt:compressionLevel];
    [compressor setInputWithByteArray:value withInt:offset withInt:length];
    [compressor finish];
    IOSByteArray *buf = [IOSByteArray arrayWithLength:1024];
    while (![compressor finished]) {
      jint count = [compressor deflateWithByteArray:buf];
      [bos writeWithByteArray:buf withInt:0 withInt:count];
    }
  }
  @finally {
    [compressor end];
  }
  return [bos toByteArray];
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(value, offset, length, JavaUtilZipDeflater_BEST_COMPRESSION);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_(IOSByteArray *value) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(value, 0, ((IOSByteArray *) nil_chk(value))->size_, JavaUtilZipDeflater_BEST_COMPRESSION);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_(NSString *value) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_withInt_(value, JavaUtilZipDeflater_BEST_COMPRESSION);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_withInt_(NSString *value, jint compressionLevel) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  IOSByteArray *b = [IOSByteArray arrayWithLength:OrgApacheLuceneUtilUnicodeUtil_MAX_UTF8_BYTES_PER_CHAR * [((NSString *) nil_chk(value)) java_length]];
  jint len = OrgApacheLuceneUtilUnicodeUtil_UTF16toUTF8WithJavaLangCharSequence_withInt_withInt_withByteArray_(value, 0, [value java_length], b);
  return OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(b, 0, len, compressionLevel);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_decompressWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *bytes) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->bytes_, bytes->offset_, bytes->length_);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_(IOSByteArray *value) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(value, 0, ((IOSByteArray *) nil_chk(value))->size_);
}

IOSByteArray *OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  JavaIoByteArrayOutputStream *bos = create_JavaIoByteArrayOutputStream_initWithInt_(length);
  JavaUtilZipInflater *decompressor = create_JavaUtilZipInflater_init();
  @try {
    [decompressor setInputWithByteArray:value withInt:offset withInt:length];
    IOSByteArray *buf = [IOSByteArray arrayWithLength:1024];
    while (![decompressor finished]) {
      jint count = [decompressor inflateWithByteArray:buf];
      [bos writeWithByteArray:buf withInt:0 withInt:count];
    }
  }
  @finally {
    [decompressor end];
  }
  return [bos toByteArray];
}

NSString *OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_(IOSByteArray *value) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_withInt_withInt_(value, 0, ((IOSByteArray *) nil_chk(value))->size_);
}

NSString *OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  IOSByteArray *bytes = OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(value, offset, length);
  IOSCharArray *result = [IOSCharArray arrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_];
  jint len = OrgApacheLuceneUtilUnicodeUtil_UTF8toUTF16WithByteArray_withInt_withInt_withCharArray_(bytes, 0, bytes->size_, result);
  return [NSString java_stringWithCharacters:result offset:0 length:len];
}

NSString *OrgApacheLuceneDocumentCompressionTools_decompressStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *bytes) {
  OrgApacheLuceneDocumentCompressionTools_initialize();
  return OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->bytes_, bytes->offset_, bytes->length_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneDocumentCompressionTools)
