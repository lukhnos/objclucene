//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/document/FieldType.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/util/NumericUtils.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/document/FieldType must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneDocumentFieldType () {
 @public
  jboolean stored_;
  jboolean tokenized_;
  jboolean storeTermVectors_;
  jboolean storeTermVectorOffsets_;
  jboolean storeTermVectorPositions_;
  jboolean storeTermVectorPayloads_;
  jboolean omitNorms_;
  OrgApacheLuceneIndexIndexOptions *indexOptions_;
  OrgApacheLuceneDocumentFieldType_NumericType *numericType_;
  jboolean frozen_;
  jint numericPrecisionStep_;
  OrgApacheLuceneIndexDocValuesType *docValuesType_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneDocumentFieldType, indexOptions_, OrgApacheLuceneIndexIndexOptions *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneDocumentFieldType, numericType_, OrgApacheLuceneDocumentFieldType_NumericType *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneDocumentFieldType, docValuesType_, OrgApacheLuceneIndexDocValuesType *)

__attribute__((unused)) static void OrgApacheLuceneDocumentFieldType_NumericType_initWithNSString_withInt_(OrgApacheLuceneDocumentFieldType_NumericType *self, NSString *__name, jint __ordinal);

@implementation OrgApacheLuceneDocumentFieldType

- (instancetype)initWithOrgApacheLuceneDocumentFieldType:(OrgApacheLuceneDocumentFieldType *)ref {
  OrgApacheLuceneDocumentFieldType_initWithOrgApacheLuceneDocumentFieldType_(self, ref);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneDocumentFieldType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)checkIfFrozen {
  if (frozen_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"this FieldType is already frozen and cannot be changed");
  }
}

- (void)freeze {
  self->frozen_ = true;
}

- (jboolean)stored {
  return self->stored_;
}

- (void)setStoredWithBoolean:(jboolean)value {
  [self checkIfFrozen];
  self->stored_ = value;
}

- (jboolean)tokenized {
  return self->tokenized_;
}

- (void)setTokenizedWithBoolean:(jboolean)value {
  [self checkIfFrozen];
  self->tokenized_ = value;
}

- (jboolean)storeTermVectors {
  return self->storeTermVectors_;
}

- (void)setStoreTermVectorsWithBoolean:(jboolean)value {
  [self checkIfFrozen];
  self->storeTermVectors_ = value;
}

- (jboolean)storeTermVectorOffsets {
  return self->storeTermVectorOffsets_;
}

- (void)setStoreTermVectorOffsetsWithBoolean:(jboolean)value {
  [self checkIfFrozen];
  self->storeTermVectorOffsets_ = value;
}

- (jboolean)storeTermVectorPositions {
  return self->storeTermVectorPositions_;
}

- (void)setStoreTermVectorPositionsWithBoolean:(jboolean)value {
  [self checkIfFrozen];
  self->storeTermVectorPositions_ = value;
}

- (jboolean)storeTermVectorPayloads {
  return self->storeTermVectorPayloads_;
}

- (void)setStoreTermVectorPayloadsWithBoolean:(jboolean)value {
  [self checkIfFrozen];
  self->storeTermVectorPayloads_ = value;
}

- (jboolean)omitNorms {
  return self->omitNorms_;
}

- (void)setOmitNormsWithBoolean:(jboolean)value {
  [self checkIfFrozen];
  self->omitNorms_ = value;
}

- (OrgApacheLuceneIndexIndexOptions *)indexOptions {
  return self->indexOptions_;
}

- (void)setIndexOptionsWithOrgApacheLuceneIndexIndexOptions:(OrgApacheLuceneIndexIndexOptions *)value {
  [self checkIfFrozen];
  if (value == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"IndexOptions cannot be null");
  }
  JreStrongAssign(&self->indexOptions_, value);
}

- (void)setNumericTypeWithOrgApacheLuceneDocumentFieldType_NumericType:(OrgApacheLuceneDocumentFieldType_NumericType *)type {
  [self checkIfFrozen];
  JreStrongAssign(&numericType_, type);
}

- (OrgApacheLuceneDocumentFieldType_NumericType *)numericType {
  return numericType_;
}

- (void)setNumericPrecisionStepWithInt:(jint)precisionStep {
  [self checkIfFrozen];
  if (precisionStep < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"precisionStep must be >= 1 (got ", precisionStep, ')'));
  }
  self->numericPrecisionStep_ = precisionStep;
}

- (jint)numericPrecisionStep {
  return numericPrecisionStep_;
}

- (NSString *)description {
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  if ([self stored]) {
    [result appendWithNSString:@"stored"];
  }
  if (indexOptions_ != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE)) {
    if ([result java_length] > 0) [result appendWithNSString:@","];
    [result appendWithNSString:@"indexed"];
    if ([self tokenized]) {
      [result appendWithNSString:@",tokenized"];
    }
    if ([self storeTermVectors]) {
      [result appendWithNSString:@",termVector"];
    }
    if ([self storeTermVectorOffsets]) {
      [result appendWithNSString:@",termVectorOffsets"];
    }
    if ([self storeTermVectorPositions]) {
      [result appendWithNSString:@",termVectorPosition"];
    }
    if ([self storeTermVectorPayloads]) {
      [result appendWithNSString:@",termVectorPayloads"];
    }
    if ([self omitNorms]) {
      [result appendWithNSString:@",omitNorms"];
    }
    if (indexOptions_ != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS)) {
      [result appendWithNSString:@",indexOptions="];
      [result appendWithId:indexOptions_];
    }
    if (numericType_ != nil) {
      [result appendWithNSString:@",numericType="];
      [result appendWithId:numericType_];
      [result appendWithNSString:@",numericPrecisionStep="];
      [result appendWithInt:numericPrecisionStep_];
    }
  }
  if (docValuesType_ != JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NONE)) {
    if ([result java_length] > 0) {
      [result appendWithNSString:@","];
    }
    [result appendWithNSString:@"docValuesType="];
    [result appendWithId:docValuesType_];
  }
  return [result description];
}

- (OrgApacheLuceneIndexDocValuesType *)docValuesType {
  return docValuesType_;
}

- (void)setDocValuesTypeWithOrgApacheLuceneIndexDocValuesType:(OrgApacheLuceneIndexDocValuesType *)type {
  [self checkIfFrozen];
  if (type == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"DocValuesType cannot be null");
  }
  JreStrongAssign(&docValuesType_, type);
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((docValuesType_ == nil) ? 0 : ((jint) [((OrgApacheLuceneIndexDocValuesType *) nil_chk(docValuesType_)) hash]));
  result = prime * result + ((jint) [((OrgApacheLuceneIndexIndexOptions *) nil_chk(indexOptions_)) hash]);
  result = prime * result + numericPrecisionStep_;
  result = prime * result + ((numericType_ == nil) ? 0 : ((jint) [((OrgApacheLuceneDocumentFieldType_NumericType *) nil_chk(numericType_)) hash]));
  result = prime * result + (omitNorms_ ? 1231 : 1237);
  result = prime * result + (storeTermVectorOffsets_ ? 1231 : 1237);
  result = prime * result + (storeTermVectorPayloads_ ? 1231 : 1237);
  result = prime * result + (storeTermVectorPositions_ ? 1231 : 1237);
  result = prime * result + (storeTermVectors_ ? 1231 : 1237);
  result = prime * result + (stored_ ? 1231 : 1237);
  result = prime * result + (tokenized_ ? 1231 : 1237);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (obj == nil) return false;
  if (!JreObjectEqualsEquals([self java_getClass], [obj java_getClass])) return false;
  OrgApacheLuceneDocumentFieldType *other = (OrgApacheLuceneDocumentFieldType *) cast_chk(obj, [OrgApacheLuceneDocumentFieldType class]);
  if (docValuesType_ != other->docValuesType_) return false;
  if (indexOptions_ != other->indexOptions_) return false;
  if (numericPrecisionStep_ != other->numericPrecisionStep_) return false;
  if (numericType_ != other->numericType_) return false;
  if (omitNorms_ != other->omitNorms_) return false;
  if (storeTermVectorOffsets_ != other->storeTermVectorOffsets_) return false;
  if (storeTermVectorPayloads_ != other->storeTermVectorPayloads_) return false;
  if (storeTermVectorPositions_ != other->storeTermVectorPositions_) return false;
  if (storeTermVectors_ != other->storeTermVectors_) return false;
  if (stored_ != other->stored_) return false;
  if (tokenized_ != other->tokenized_) return false;
  return true;
}

- (void)dealloc {
  RELEASE_(indexOptions_);
  RELEASE_(numericType_);
  RELEASE_(docValuesType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexOptions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentFieldType_NumericType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 15, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocValuesType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneDocumentFieldType:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(checkIfFrozen);
  methods[3].selector = @selector(freeze);
  methods[4].selector = @selector(stored);
  methods[5].selector = @selector(setStoredWithBoolean:);
  methods[6].selector = @selector(tokenized);
  methods[7].selector = @selector(setTokenizedWithBoolean:);
  methods[8].selector = @selector(storeTermVectors);
  methods[9].selector = @selector(setStoreTermVectorsWithBoolean:);
  methods[10].selector = @selector(storeTermVectorOffsets);
  methods[11].selector = @selector(setStoreTermVectorOffsetsWithBoolean:);
  methods[12].selector = @selector(storeTermVectorPositions);
  methods[13].selector = @selector(setStoreTermVectorPositionsWithBoolean:);
  methods[14].selector = @selector(storeTermVectorPayloads);
  methods[15].selector = @selector(setStoreTermVectorPayloadsWithBoolean:);
  methods[16].selector = @selector(omitNorms);
  methods[17].selector = @selector(setOmitNormsWithBoolean:);
  methods[18].selector = @selector(indexOptions);
  methods[19].selector = @selector(setIndexOptionsWithOrgApacheLuceneIndexIndexOptions:);
  methods[20].selector = @selector(setNumericTypeWithOrgApacheLuceneDocumentFieldType_NumericType:);
  methods[21].selector = @selector(numericType);
  methods[22].selector = @selector(setNumericPrecisionStepWithInt:);
  methods[23].selector = @selector(numericPrecisionStep);
  methods[24].selector = @selector(description);
  methods[25].selector = @selector(docValuesType);
  methods[26].selector = @selector(setDocValuesTypeWithOrgApacheLuceneIndexDocValuesType:);
  methods[27].selector = @selector(hash);
  methods[28].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stored_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokenized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storeTermVectors_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storeTermVectorOffsets_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storeTermVectorPositions_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storeTermVectorPayloads_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "omitNorms_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "indexOptions_", "LOrgApacheLuceneIndexIndexOptions;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numericType_", "LOrgApacheLuceneDocumentFieldType_NumericType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "frozen_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numericPrecisionStep_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docValuesType_", "LOrgApacheLuceneIndexDocValuesType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneDocumentFieldType;", "setStored", "Z", "setTokenized", "setStoreTermVectors", "setStoreTermVectorOffsets", "setStoreTermVectorPositions", "setStoreTermVectorPayloads", "setOmitNorms", "setIndexOptions", "LOrgApacheLuceneIndexIndexOptions;", "setNumericType", "LOrgApacheLuceneDocumentFieldType_NumericType;", "setNumericPrecisionStep", "I", "toString", "setDocValuesType", "LOrgApacheLuceneIndexDocValuesType;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _OrgApacheLuceneDocumentFieldType = { "FieldType", "org.apache.lucene.document", ptrTable, methods, fields, 7, 0x1, 29, 12, -1, 12, -1, -1, -1 };
  return &_OrgApacheLuceneDocumentFieldType;
}

@end

void OrgApacheLuceneDocumentFieldType_initWithOrgApacheLuceneDocumentFieldType_(OrgApacheLuceneDocumentFieldType *self, OrgApacheLuceneDocumentFieldType *ref) {
  NSObject_init(self);
  self->tokenized_ = true;
  JreStrongAssign(&self->indexOptions_, JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE));
  self->numericPrecisionStep_ = OrgApacheLuceneUtilNumericUtils_PRECISION_STEP_DEFAULT;
  JreStrongAssign(&self->docValuesType_, JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NONE));
  self->stored_ = [((OrgApacheLuceneDocumentFieldType *) nil_chk(ref)) stored];
  self->tokenized_ = [ref tokenized];
  self->storeTermVectors_ = [ref storeTermVectors];
  self->storeTermVectorOffsets_ = [ref storeTermVectorOffsets];
  self->storeTermVectorPositions_ = [ref storeTermVectorPositions];
  self->storeTermVectorPayloads_ = [ref storeTermVectorPayloads];
  self->omitNorms_ = [ref omitNorms];
  JreStrongAssign(&self->indexOptions_, [ref indexOptions]);
  JreStrongAssign(&self->numericType_, [ref numericType]);
  self->numericPrecisionStep_ = [ref numericPrecisionStep];
  JreStrongAssign(&self->docValuesType_, [ref docValuesType]);
}

OrgApacheLuceneDocumentFieldType *new_OrgApacheLuceneDocumentFieldType_initWithOrgApacheLuceneDocumentFieldType_(OrgApacheLuceneDocumentFieldType *ref) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneDocumentFieldType, initWithOrgApacheLuceneDocumentFieldType_, ref)
}

OrgApacheLuceneDocumentFieldType *create_OrgApacheLuceneDocumentFieldType_initWithOrgApacheLuceneDocumentFieldType_(OrgApacheLuceneDocumentFieldType *ref) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneDocumentFieldType, initWithOrgApacheLuceneDocumentFieldType_, ref)
}

void OrgApacheLuceneDocumentFieldType_init(OrgApacheLuceneDocumentFieldType *self) {
  NSObject_init(self);
  self->tokenized_ = true;
  JreStrongAssign(&self->indexOptions_, JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE));
  self->numericPrecisionStep_ = OrgApacheLuceneUtilNumericUtils_PRECISION_STEP_DEFAULT;
  JreStrongAssign(&self->docValuesType_, JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NONE));
}

OrgApacheLuceneDocumentFieldType *new_OrgApacheLuceneDocumentFieldType_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneDocumentFieldType, init)
}

OrgApacheLuceneDocumentFieldType *create_OrgApacheLuceneDocumentFieldType_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneDocumentFieldType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneDocumentFieldType)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneDocumentFieldType_NumericType)

OrgApacheLuceneDocumentFieldType_NumericType *OrgApacheLuceneDocumentFieldType_NumericType_values_[4];

@implementation OrgApacheLuceneDocumentFieldType_NumericType

+ (OrgApacheLuceneDocumentFieldType_NumericType *)INT {
  return JreEnum(OrgApacheLuceneDocumentFieldType_NumericType, INT);
}

+ (OrgApacheLuceneDocumentFieldType_NumericType *)LONG {
  return JreEnum(OrgApacheLuceneDocumentFieldType_NumericType, LONG);
}

+ (OrgApacheLuceneDocumentFieldType_NumericType *)FLOAT {
  return JreEnum(OrgApacheLuceneDocumentFieldType_NumericType, FLOAT);
}

+ (OrgApacheLuceneDocumentFieldType_NumericType *)DOUBLE {
  return JreEnum(OrgApacheLuceneDocumentFieldType_NumericType, DOUBLE);
}

+ (IOSObjectArray *)values {
  return OrgApacheLuceneDocumentFieldType_NumericType_values();
}

+ (OrgApacheLuceneDocumentFieldType_NumericType *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneDocumentFieldType_NumericType_valueOfWithNSString_(name);
}

- (OrgApacheLuceneDocumentFieldType_NumericType_Enum)toNSEnum {
  return (OrgApacheLuceneDocumentFieldType_NumericType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneDocumentFieldType_NumericType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentFieldType_NumericType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INT", "LOrgApacheLuceneDocumentFieldType_NumericType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "LONG", "LOrgApacheLuceneDocumentFieldType_NumericType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "FLOAT", "LOrgApacheLuceneDocumentFieldType_NumericType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "DOUBLE", "LOrgApacheLuceneDocumentFieldType_NumericType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneDocumentFieldType_NumericType, INT), &JreEnum(OrgApacheLuceneDocumentFieldType_NumericType, LONG), &JreEnum(OrgApacheLuceneDocumentFieldType_NumericType, FLOAT), &JreEnum(OrgApacheLuceneDocumentFieldType_NumericType, DOUBLE), "LOrgApacheLuceneDocumentFieldType;", "Ljava/lang/Enum<Lorg/apache/lucene/document/FieldType$NumericType;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneDocumentFieldType_NumericType = { "NumericType", "org.apache.lucene.document", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_OrgApacheLuceneDocumentFieldType_NumericType;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneDocumentFieldType_NumericType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(OrgApacheLuceneDocumentFieldType_NumericType_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      OrgApacheLuceneDocumentFieldType_NumericType_initWithNSString_withInt_(e, JreEnumConstantName(OrgApacheLuceneDocumentFieldType_NumericType_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneDocumentFieldType_NumericType)
  }
}

@end

void OrgApacheLuceneDocumentFieldType_NumericType_initWithNSString_withInt_(OrgApacheLuceneDocumentFieldType_NumericType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgApacheLuceneDocumentFieldType_NumericType_values() {
  OrgApacheLuceneDocumentFieldType_NumericType_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneDocumentFieldType_NumericType_values_ count:4 type:OrgApacheLuceneDocumentFieldType_NumericType_class_()];
}

OrgApacheLuceneDocumentFieldType_NumericType *OrgApacheLuceneDocumentFieldType_NumericType_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneDocumentFieldType_NumericType_initialize();
  for (int i = 0; i < 4; i++) {
    OrgApacheLuceneDocumentFieldType_NumericType *e = OrgApacheLuceneDocumentFieldType_NumericType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneDocumentFieldType_NumericType *OrgApacheLuceneDocumentFieldType_NumericType_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneDocumentFieldType_NumericType_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return OrgApacheLuceneDocumentFieldType_NumericType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneDocumentFieldType_NumericType)
