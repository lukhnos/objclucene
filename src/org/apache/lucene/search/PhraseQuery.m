//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/PhraseQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/ExactPhraseScorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/MatchNoDocsQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/SloppyPhraseScorer.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "org/lukhnos/portmobile/util/Objects.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/PhraseQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchPhraseQuery () {
 @public
  jboolean mutable__;
  jint slop_;
  NSString *field_;
  id<JavaUtilList> terms_;
  id<JavaUtilList> positions_;
}

- (instancetype)initWithInt:(jint)slop
withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms
               withIntArray:(IOSIntArray *)positions;

+ (IOSIntArray *)incrementalPositionsWithInt:(jint)length;

+ (IOSObjectArray *)toTermsWithNSString:(NSString *)field
                      withNSStringArray:(IOSObjectArray *)termStrings;

+ (IOSObjectArray *)toTermsWithNSString:(NSString *)field
   withOrgApacheLuceneUtilBytesRefArray:(IOSObjectArray *)termBytes;

- (void)ensureMutableWithNSString:(NSString *)method;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery, terms_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery, positions_, id<JavaUtilList>)

__attribute__((unused)) static void OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(OrgApacheLuceneSearchPhraseQuery *self, jint slop, IOSObjectArray *terms, IOSIntArray *positions);

__attribute__((unused)) static OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(jint slop, IOSObjectArray *terms, IOSIntArray *positions) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(jint slop, IOSObjectArray *terms, IOSIntArray *positions);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneSearchPhraseQuery_incrementalPositionsWithInt_(jint length);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchPhraseQuery_toTermsWithNSString_withNSStringArray_(NSString *field, IOSObjectArray *termStrings);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchPhraseQuery_toTermsWithNSString_withOrgApacheLuceneUtilBytesRefArray_(NSString *field, IOSObjectArray *termBytes);

__attribute__((unused)) static void OrgApacheLuceneSearchPhraseQuery_ensureMutableWithNSString_(OrgApacheLuceneSearchPhraseQuery *self, NSString *method);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchPhraseQuery__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchPhraseQuery__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchPhraseQuery__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchPhraseQuery__Annotations$3(void);

@interface OrgApacheLuceneSearchPhraseQuery_Builder () {
 @public
  jint slop_;
  id<JavaUtilList> terms_;
  id<JavaUtilList> positions_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_Builder, terms_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_Builder, positions_, id<JavaUtilList>)

@interface OrgApacheLuceneSearchPhraseQuery_PhraseWeight : OrgApacheLuceneSearchWeight {
 @public
  OrgApacheLuceneSearchPhraseQuery *this$0_;
  OrgApacheLuceneSearchSimilaritiesSimilarity *similarity_;
  OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *stats_;
  jboolean needsScores_;
  IOSObjectArray *states_;
  IOSObjectArray *terms_;
  IOSIntArray *positions_;
}

- (instancetype)initWithOrgApacheLuceneSearchPhraseQuery:(OrgApacheLuceneSearchPhraseQuery *)outer$
                  withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                             withBoolean:(jboolean)needsScores;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)queryTerms;

- (NSString *)description;

- (jfloat)getValueForNormalization;

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

- (jboolean)termNotInReaderWithOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader
                                 withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term;

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                               withInt:(jint)doc;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchPhraseQuery_PhraseWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, similarity_, OrgApacheLuceneSearchSimilaritiesSimilarity *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, stats_, OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, states_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, terms_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, positions_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery_PhraseWeight *self, OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores);

__attribute__((unused)) static OrgApacheLuceneSearchPhraseQuery_PhraseWeight *new_OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchPhraseQuery_PhraseWeight *create_OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchPhraseQuery_PhraseWeight_termNotInReaderWithOrgApacheLuceneIndexLeafReader_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchPhraseQuery_PhraseWeight *self, OrgApacheLuceneIndexLeafReader *reader, OrgApacheLuceneIndexTerm *term);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchPhraseQuery_PhraseWeight)

@implementation OrgApacheLuceneSearchPhraseQuery

- (instancetype)initWithInt:(jint)slop
withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms
               withIntArray:(IOSIntArray *)positions {
  OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(self, slop, terms, positions);
  return self;
}

+ (IOSIntArray *)incrementalPositionsWithInt:(jint)length {
  return OrgApacheLuceneSearchPhraseQuery_incrementalPositionsWithInt_(length);
}

+ (IOSObjectArray *)toTermsWithNSString:(NSString *)field
                      withNSStringArray:(IOSObjectArray *)termStrings {
  return OrgApacheLuceneSearchPhraseQuery_toTermsWithNSString_withNSStringArray_(field, termStrings);
}

+ (IOSObjectArray *)toTermsWithNSString:(NSString *)field
   withOrgApacheLuceneUtilBytesRefArray:(IOSObjectArray *)termBytes {
  return OrgApacheLuceneSearchPhraseQuery_toTermsWithNSString_withOrgApacheLuceneUtilBytesRefArray_(field, termBytes);
}

- (instancetype)initWithInt:(jint)slop
               withNSString:(NSString *)field
          withNSStringArray:(IOSObjectArray *)terms {
  OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withNSStringArray_(self, slop, field, terms);
  return self;
}

- (instancetype)initWithNSString:(NSString *)field
               withNSStringArray:(IOSObjectArray *)terms {
  OrgApacheLuceneSearchPhraseQuery_initWithNSString_withNSStringArray_(self, field, terms);
  return self;
}

- (instancetype)initWithInt:(jint)slop
               withNSString:(NSString *)field
withOrgApacheLuceneUtilBytesRefArray:(IOSObjectArray *)terms {
  OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_(self, slop, field, terms);
  return self;
}

- (instancetype)initWithNSString:(NSString *)field
withOrgApacheLuceneUtilBytesRefArray:(IOSObjectArray *)terms {
  OrgApacheLuceneSearchPhraseQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(self, field, terms);
  return self;
}

- (jint)getSlop {
  return slop_;
}

- (IOSObjectArray *)getTerms {
  return [((id<JavaUtilList>) nil_chk(terms_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]];
}

- (IOSIntArray *)getPositions {
  IOSIntArray *result = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(positions_)) size]];
  for (jint i = 0; i < [positions_ size]; i++) *IOSIntArray_GetRef(result, i) = [((JavaLangInteger *) nil_chk([positions_ getWithInt:i])) intValue];
  return result;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if ([((id<JavaUtilList>) nil_chk(terms_)) isEmpty]) {
    OrgApacheLuceneSearchMatchNoDocsQuery *q = create_OrgApacheLuceneSearchMatchNoDocsQuery_init();
    [q setBoostWithFloat:[self getBoost]];
    return q;
  }
  else if ([terms_ size] == 1) {
    OrgApacheLuceneSearchTermQuery *tq = create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_([terms_ getWithInt:0]);
    [tq setBoostWithFloat:[self getBoost]];
    return tq;
  }
  else if ([((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(positions_)) getWithInt:0])) intValue] != 0) {
    IOSIntArray *oldPositions = [self getPositions];
    IOSIntArray *newPositions = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(oldPositions))->size_];
    for (jint i = 0; i < oldPositions->size_; ++i) {
      *IOSIntArray_GetRef(newPositions, i) = IOSIntArray_Get(oldPositions, i) - IOSIntArray_Get(oldPositions, 0);
    }
    OrgApacheLuceneSearchPhraseQuery *rewritten = create_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(slop_, [self getTerms], newPositions);
    [rewritten setBoostWithFloat:[self getBoost]];
    return rewritten;
  }
  else {
    return [super rewriteWithOrgApacheLuceneIndexIndexReader:reader];
  }
}

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores {
  return create_OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, searcher, needsScores);
}

- (NSString *)toStringWithNSString:(NSString *)f {
  IOSObjectArray *terms = [self getTerms];
  IOSIntArray *positions = [self getPositions];
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  if (field_ != nil && ![field_ isEqual:f]) {
    [buffer appendWithNSString:field_];
    [buffer appendWithNSString:@":"];
  }
  [buffer appendWithNSString:@"\""];
  jint maxPosition;
  if (((IOSIntArray *) nil_chk(positions))->size_ == 0) {
    maxPosition = -1;
  }
  else {
    maxPosition = IOSIntArray_Get(positions, positions->size_ - 1);
  }
  IOSObjectArray *pieces = [IOSObjectArray arrayWithLength:maxPosition + 1 type:NSString_class_()];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; i++) {
    jint pos = IOSIntArray_Get(positions, i);
    NSString *s = IOSObjectArray_Get(pieces, pos);
    if (s == nil) {
      s = [((OrgApacheLuceneIndexTerm *) nil_chk((IOSObjectArray_Get(terms, i)))) text];
    }
    else {
      s = JreStrcat("$C$", s, '|', [((OrgApacheLuceneIndexTerm *) nil_chk((IOSObjectArray_Get(terms, i)))) text]);
    }
    IOSObjectArray_Set(pieces, pos, s);
  }
  for (jint i = 0; i < pieces->size_; i++) {
    if (i > 0) {
      [buffer appendWithChar:' '];
    }
    NSString *s = IOSObjectArray_Get(pieces, i);
    if (s == nil) {
      [buffer appendWithChar:'?'];
    }
    else {
      [buffer appendWithNSString:s];
    }
  }
  [buffer appendWithNSString:@"\""];
  if (slop_ != 0) {
    [buffer appendWithNSString:@"~"];
    [buffer appendWithInt:slop_];
  }
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (jboolean)isEqual:(id)o {
  if ([super isEqual:o] == false) {
    return false;
  }
  OrgApacheLuceneSearchPhraseQuery *that = (OrgApacheLuceneSearchPhraseQuery *) cast_chk(o, [OrgApacheLuceneSearchPhraseQuery class]);
  return slop_ == ((OrgApacheLuceneSearchPhraseQuery *) nil_chk(that))->slop_ && [((id<JavaUtilList>) nil_chk(terms_)) isEqual:that->terms_] && [((id<JavaUtilList>) nil_chk(positions_)) isEqual:that->positions_];
}

- (NSUInteger)hash {
  jint h = ((jint) [super hash]);
  h = 31 * h + slop_;
  h = 31 * h + ((jint) [((id<JavaUtilList>) nil_chk(terms_)) hash]);
  h = 31 * h + ((jint) [((id<JavaUtilList>) nil_chk(positions_)) hash]);
  return h;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchPhraseQuery_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)ensureMutableWithNSString:(NSString *)method {
  OrgApacheLuceneSearchPhraseQuery_ensureMutableWithNSString_(self, method);
}

- (void)setSlopWithInt:(jint)s {
  OrgApacheLuceneSearchPhraseQuery_ensureMutableWithNSString_(self, @"setSlop");
  if (s < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"slop value cannot be negative");
  }
  slop_ = s;
}

- (void)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  jint position = 0;
  if ([((id<JavaUtilList>) nil_chk(positions_)) size] > 0) {
    position = [((JavaLangInteger *) nil_chk([positions_ getWithInt:[positions_ size] - 1])) intValue] + 1;
  }
  [self addWithOrgApacheLuceneIndexTerm:term withInt:position];
}

- (void)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                withInt:(jint)position {
  OrgApacheLuceneSearchPhraseQuery_ensureMutableWithNSString_(self, @"add");
  OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_withNSString_(term, @"Term must not be null");
  if ([((id<JavaUtilList>) nil_chk(positions_)) size] > 0) {
    jint previousPosition = [((JavaLangInteger *) nil_chk([positions_ getWithInt:[positions_ size] - 1])) intValue];
    if (position < previousPosition) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Positions must be added in order. Got position=", position, @" while previous position was ", previousPosition));
    }
  }
  else if (position < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Positions must be positive, got ", position));
  }
  if ([((id<JavaUtilList>) nil_chk(terms_)) size] == 0) {
    JreStrongAssign(&field_, [((OrgApacheLuceneIndexTerm *) nil_chk(term)) field]);
  }
  else if (![((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(term)) field])) isEqual:field_]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"All phrase terms must be in the same field: ", term));
  }
  [terms_ addWithId:term];
  [positions_ addWithId:JavaLangInteger_valueOfWithInt_(position)];
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(terms_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexTerm;", 0x8a, 3, 4, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexTerm;", 0x8a, 3, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexTerm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchWeight;", 0x1, 11, 12, 10, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, 18, -1 },
    { NULL, "V", 0x2, 19, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, 21, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, 24, -1 },
    { NULL, "V", 0x1, 22, 25, -1, -1, 26, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgApacheLuceneIndexTermArray:withIntArray:);
  methods[1].selector = @selector(incrementalPositionsWithInt:);
  methods[2].selector = @selector(toTermsWithNSString:withNSStringArray:);
  methods[3].selector = @selector(toTermsWithNSString:withOrgApacheLuceneUtilBytesRefArray:);
  methods[4].selector = @selector(initWithInt:withNSString:withNSStringArray:);
  methods[5].selector = @selector(initWithNSString:withNSStringArray:);
  methods[6].selector = @selector(initWithInt:withNSString:withOrgApacheLuceneUtilBytesRefArray:);
  methods[7].selector = @selector(initWithNSString:withOrgApacheLuceneUtilBytesRefArray:);
  methods[8].selector = @selector(getSlop);
  methods[9].selector = @selector(getTerms);
  methods[10].selector = @selector(getPositions);
  methods[11].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[12].selector = @selector(createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  methods[13].selector = @selector(toStringWithNSString:);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(hash);
  methods[16].selector = @selector(init);
  methods[17].selector = @selector(ensureMutableWithNSString:);
  methods[18].selector = @selector(setSlopWithInt:);
  methods[19].selector = @selector(addWithOrgApacheLuceneIndexTerm:);
  methods[20].selector = @selector(addWithOrgApacheLuceneIndexTerm:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mutable__", "Z", .constantValue.asLong = 0, 0x12, 27, -1, -1, -1 },
    { "slop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "terms_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "positions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
  };
  static const void *ptrTable[] = { "I[LOrgApacheLuceneIndexTerm;[I", "incrementalPositions", "I", "toTerms", "LNSString;[LNSString;", "LNSString;[LOrgApacheLuceneUtilBytesRef;", "ILNSString;[LNSString;", "ILNSString;[LOrgApacheLuceneUtilBytesRef;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "createWeight", "LOrgApacheLuceneSearchIndexSearcher;Z", "toString", "LNSString;", "equals", "LNSObject;", "hashCode", (void *)&OrgApacheLuceneSearchPhraseQuery__Annotations$0, "ensureMutable", "setSlop", (void *)&OrgApacheLuceneSearchPhraseQuery__Annotations$1, "add", "LOrgApacheLuceneIndexTerm;", (void *)&OrgApacheLuceneSearchPhraseQuery__Annotations$2, "LOrgApacheLuceneIndexTerm;I", (void *)&OrgApacheLuceneSearchPhraseQuery__Annotations$3, "mutable", "Ljava/util/List<Lorg/apache/lucene/index/Term;>;", "Ljava/util/List<Ljava/lang/Integer;>;", "LOrgApacheLuceneSearchPhraseQuery_Builder;LOrgApacheLuceneSearchPhraseQuery_PostingsAndFreq;LOrgApacheLuceneSearchPhraseQuery_PhraseWeight;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPhraseQuery = { "PhraseQuery", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 21, 5, -1, 30, -1, -1, -1 };
  return &_OrgApacheLuceneSearchPhraseQuery;
}

@end

void OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(OrgApacheLuceneSearchPhraseQuery *self, jint slop, IOSObjectArray *terms, IOSIntArray *positions) {
  OrgApacheLuceneSearchQuery_init(self);
  if (((IOSObjectArray *) nil_chk(terms))->size_ != ((IOSIntArray *) nil_chk(positions))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Must have as many terms as positions");
  }
  if (slop < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Slop must be >= 0, got ", slop));
  }
  for (jint i = 1; i < terms->size_; ++i) {
    if ([((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, i - 1))) field])) isEqual:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, i))) field]] == false) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"All terms should have the same field");
    }
  }
  {
    IOSIntArray *a__ = positions;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint position = *b__++;
      if (position < 0) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Positions must be >= 0, got ", position));
      }
    }
  }
  for (jint i = 1; i < positions->size_; ++i) {
    if (IOSIntArray_Get(positions, i) < IOSIntArray_Get(positions, i - 1)) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Positions should not go backwards, got ", IOSIntArray_Get(positions, i - 1), @" before ", IOSIntArray_Get(positions, i)));
    }
  }
  self->slop_ = slop;
  JreStrongAssign(&self->terms_, JavaUtilArrays_asListWithNSObjectArray_(terms));
  JreStrongAssignAndConsume(&self->positions_, new_JavaUtilArrayList_initWithInt_(positions->size_));
  {
    IOSIntArray *a__ = positions;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint pos = *b__++;
      [self->positions_ addWithId:JavaLangInteger_valueOfWithInt_(pos)];
    }
  }
  JreStrongAssign(&self->field_, terms->size_ == 0 ? nil : [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, 0))) field]);
  self->mutable__ = false;
}

OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(jint slop, IOSObjectArray *terms, IOSIntArray *positions) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_, slop, terms, positions)
}

OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(jint slop, IOSObjectArray *terms, IOSIntArray *positions) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_, slop, terms, positions)
}

IOSIntArray *OrgApacheLuceneSearchPhraseQuery_incrementalPositionsWithInt_(jint length) {
  OrgApacheLuceneSearchPhraseQuery_initialize();
  IOSIntArray *positions = [IOSIntArray arrayWithLength:length];
  for (jint i = 0; i < length; ++i) {
    *IOSIntArray_GetRef(positions, i) = i;
  }
  return positions;
}

IOSObjectArray *OrgApacheLuceneSearchPhraseQuery_toTermsWithNSString_withNSStringArray_(NSString *field, IOSObjectArray *termStrings) {
  OrgApacheLuceneSearchPhraseQuery_initialize();
  IOSObjectArray *terms = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(termStrings))->size_ type:OrgApacheLuceneIndexTerm_class_()];
  for (jint i = 0; i < terms->size_; ++i) {
    IOSObjectArray_SetAndConsume(terms, i, new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, IOSObjectArray_Get(termStrings, i)));
  }
  return terms;
}

IOSObjectArray *OrgApacheLuceneSearchPhraseQuery_toTermsWithNSString_withOrgApacheLuceneUtilBytesRefArray_(NSString *field, IOSObjectArray *termBytes) {
  OrgApacheLuceneSearchPhraseQuery_initialize();
  IOSObjectArray *terms = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(termBytes))->size_ type:OrgApacheLuceneIndexTerm_class_()];
  for (jint i = 0; i < terms->size_; ++i) {
    IOSObjectArray_SetAndConsume(terms, i, new_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(field, OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(IOSObjectArray_Get(termBytes, i))));
  }
  return terms;
}

void OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withNSStringArray_(OrgApacheLuceneSearchPhraseQuery *self, jint slop, NSString *field, IOSObjectArray *terms) {
  OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(self, slop, OrgApacheLuceneSearchPhraseQuery_toTermsWithNSString_withNSStringArray_(field, terms), OrgApacheLuceneSearchPhraseQuery_incrementalPositionsWithInt_(((IOSObjectArray *) nil_chk(terms))->size_));
}

OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withNSStringArray_(jint slop, NSString *field, IOSObjectArray *terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithInt_withNSString_withNSStringArray_, slop, field, terms)
}

OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withNSStringArray_(jint slop, NSString *field, IOSObjectArray *terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithInt_withNSString_withNSStringArray_, slop, field, terms)
}

void OrgApacheLuceneSearchPhraseQuery_initWithNSString_withNSStringArray_(OrgApacheLuceneSearchPhraseQuery *self, NSString *field, IOSObjectArray *terms) {
  OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withNSStringArray_(self, 0, field, terms);
}

OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithNSString_withNSStringArray_(NSString *field, IOSObjectArray *terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithNSString_withNSStringArray_, field, terms)
}

OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithNSString_withNSStringArray_(NSString *field, IOSObjectArray *terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithNSString_withNSStringArray_, field, terms)
}

void OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_(OrgApacheLuceneSearchPhraseQuery *self, jint slop, NSString *field, IOSObjectArray *terms) {
  OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(self, slop, OrgApacheLuceneSearchPhraseQuery_toTermsWithNSString_withOrgApacheLuceneUtilBytesRefArray_(field, terms), OrgApacheLuceneSearchPhraseQuery_incrementalPositionsWithInt_(((IOSObjectArray *) nil_chk(terms))->size_));
}

OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_(jint slop, NSString *field, IOSObjectArray *terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_, slop, field, terms)
}

OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_(jint slop, NSString *field, IOSObjectArray *terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_, slop, field, terms)
}

void OrgApacheLuceneSearchPhraseQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(OrgApacheLuceneSearchPhraseQuery *self, NSString *field, IOSObjectArray *terms) {
  OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_(self, 0, field, terms);
}

OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(NSString *field, IOSObjectArray *terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithNSString_withOrgApacheLuceneUtilBytesRefArray_, field, terms)
}

OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(NSString *field, IOSObjectArray *terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPhraseQuery, initWithNSString_withOrgApacheLuceneUtilBytesRefArray_, field, terms)
}

void OrgApacheLuceneSearchPhraseQuery_init(OrgApacheLuceneSearchPhraseQuery *self) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssignAndConsume(&self->terms_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->positions_, new_JavaUtilArrayList_init());
  self->mutable__ = true;
}

OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPhraseQuery, init)
}

OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPhraseQuery, init)
}

void OrgApacheLuceneSearchPhraseQuery_ensureMutableWithNSString_(OrgApacheLuceneSearchPhraseQuery *self, NSString *method) {
  if (self->mutable__ == false) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"This PhraseQuery has been created with the new PhraseQuery.Builder API. It must not be modified afterwards. The ", method, @" method only exists for backward compatibility"));
  }
}

IOSObjectArray *OrgApacheLuceneSearchPhraseQuery__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneSearchPhraseQuery__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneSearchPhraseQuery__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneSearchPhraseQuery__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPhraseQuery)

@implementation OrgApacheLuceneSearchPhraseQuery_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchPhraseQuery_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneSearchPhraseQuery_Builder *)setSlopWithInt:(jint)slop {
  self->slop_ = slop;
  return self;
}

- (OrgApacheLuceneSearchPhraseQuery_Builder *)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  return [self addWithOrgApacheLuceneIndexTerm:term withInt:[((id<JavaUtilList>) nil_chk(positions_)) isEmpty] ? 0 : 1 + [((JavaLangInteger *) nil_chk([positions_ getWithInt:[positions_ size] - 1])) intValue]];
}

- (OrgApacheLuceneSearchPhraseQuery_Builder *)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                                      withInt:(jint)position {
  term = create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_([((OrgApacheLuceneIndexTerm *) nil_chk(term)) field], OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_([term bytes]));
  if (position < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Positions must be >= 0, got ", position));
  }
  if ([((id<JavaUtilList>) nil_chk(positions_)) isEmpty] == false) {
    jint lastPosition = [((JavaLangInteger *) nil_chk([positions_ getWithInt:[positions_ size] - 1])) intValue];
    if (position < lastPosition) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Positions must be added in order, got ", position, @" after ", lastPosition));
    }
  }
  if ([((id<JavaUtilList>) nil_chk(terms_)) isEmpty] == false && [((NSString *) nil_chk([term field])) isEqual:[((OrgApacheLuceneIndexTerm *) nil_chk([terms_ getWithInt:0])) field]] == false) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"All terms must be on the same field, got ", [term field], @" and ", [((OrgApacheLuceneIndexTerm *) nil_chk([terms_ getWithInt:0])) field]));
  }
  [terms_ addWithId:term];
  [positions_ addWithId:JavaLangInteger_valueOfWithInt_(position)];
  return self;
}

- (OrgApacheLuceneSearchPhraseQuery *)build {
  IOSObjectArray *terms = [((id<JavaUtilList>) nil_chk(self->terms_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[self->terms_ size] type:OrgApacheLuceneIndexTerm_class_()]];
  IOSIntArray *positions = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(self->positions_)) size]];
  for (jint i = 0; i < positions->size_; ++i) {
    *IOSIntArray_GetRef(positions, i) = [((JavaLangInteger *) nil_chk([self->positions_ getWithInt:i])) intValue];
  }
  return create_OrgApacheLuceneSearchPhraseQuery_initWithInt_withOrgApacheLuceneIndexTermArray_withIntArray_(slop_, terms, positions);
}

- (void)dealloc {
  RELEASE_(terms_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchPhraseQuery_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchPhraseQuery_Builder;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchPhraseQuery_Builder;", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchPhraseQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setSlopWithInt:);
  methods[2].selector = @selector(addWithOrgApacheLuceneIndexTerm:);
  methods[3].selector = @selector(addWithOrgApacheLuceneIndexTerm:withInt:);
  methods[4].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "slop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "terms_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "positions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "setSlop", "I", "add", "LOrgApacheLuceneIndexTerm;", "LOrgApacheLuceneIndexTerm;I", "Ljava/util/List<Lorg/apache/lucene/index/Term;>;", "Ljava/util/List<Ljava/lang/Integer;>;", "LOrgApacheLuceneSearchPhraseQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPhraseQuery_Builder = { "Builder", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x9, 5, 3, 7, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchPhraseQuery_Builder;
}

@end

void OrgApacheLuceneSearchPhraseQuery_Builder_init(OrgApacheLuceneSearchPhraseQuery_Builder *self) {
  NSObject_init(self);
  self->slop_ = 0;
  JreStrongAssignAndConsume(&self->terms_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->positions_, new_JavaUtilArrayList_init());
}

OrgApacheLuceneSearchPhraseQuery_Builder *new_OrgApacheLuceneSearchPhraseQuery_Builder_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPhraseQuery_Builder, init)
}

OrgApacheLuceneSearchPhraseQuery_Builder *create_OrgApacheLuceneSearchPhraseQuery_Builder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPhraseQuery_Builder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPhraseQuery_Builder)

@implementation OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq

- (instancetype)initWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)postings
                                                 withInt:(jint)position
                       withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(self, postings, position, terms);
  return self;
}

- (jint)compareToWithId:(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *)other {
  cast_chk(other, [OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq class]);
  if (position_ != ((OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *) nil_chk(other))->position_) {
    return position_ - other->position_;
  }
  if (nTerms_ != other->nTerms_) {
    return nTerms_ - other->nTerms_;
  }
  if (nTerms_ == 0) {
    return 0;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms_))->size_; i++) {
    jint res = [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms_, i))) compareToWithId:IOSObjectArray_Get(other->terms_, i)];
    if (res != 0) return res;
  }
  return 0;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + position_;
  for (jint i = 0; i < nTerms_; i++) {
    result = prime * result + ((jint) [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(nil_chk(terms_), i))) hash]);
  }
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (obj == nil) return false;
  if (!JreObjectEqualsEquals([self java_getClass], [obj java_getClass])) return false;
  OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *other = (OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *) cast_chk(obj, [OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq class]);
  if (position_ != other->position_) return false;
  if (terms_ == nil) return other->terms_ == nil;
  return JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(terms_, other->terms_);
}

- (void)dealloc {
  RELEASE_(postings_);
  RELEASE_(terms_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexPostingsEnum:withInt:withOrgApacheLuceneIndexTermArray:);
  methods[1].selector = @selector(compareToWithId:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "postings_", "LOrgApacheLuceneIndexPostingsEnum;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "terms_", "[LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nTerms_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexPostingsEnum;I[LOrgApacheLuceneIndexTerm;", "compareTo", "LOrgApacheLuceneSearchPhraseQuery_PostingsAndFreq;", "hashCode", "equals", "LNSObject;", "LOrgApacheLuceneSearchPhraseQuery;", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/search/PhraseQuery$PostingsAndFreq;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq = { "PostingsAndFreq", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x8, 4, 4, 6, -1, -1, 7, -1 };
  return &_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq;
}

@end

void OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *self, OrgApacheLuceneIndexPostingsEnum *postings, jint position, IOSObjectArray *terms) {
  NSObject_init(self);
  JreStrongAssign(&self->postings_, postings);
  self->position_ = position;
  self->nTerms_ = terms == nil ? 0 : terms->size_;
  if (self->nTerms_ > 0) {
    if (((IOSObjectArray *) nil_chk(terms))->size_ == 1) {
      JreStrongAssign(&self->terms_, terms);
    }
    else {
      IOSObjectArray *terms2 = [IOSObjectArray arrayWithLength:terms->size_ type:OrgApacheLuceneIndexTerm_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(terms, 0, terms2, 0, terms->size_);
      JavaUtilArrays_sortWithNSObjectArray_(terms2);
      JreStrongAssign(&self->terms_, terms2);
    }
  }
  else {
    JreStrongAssign(&self->terms_, nil);
  }
}

OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *new_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(OrgApacheLuceneIndexPostingsEnum *postings, jint position, IOSObjectArray *terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq, initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_, postings, position, terms)
}

OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *create_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(OrgApacheLuceneIndexPostingsEnum *postings, jint position, IOSObjectArray *terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq, initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_, postings, position, terms)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq)

@implementation OrgApacheLuceneSearchPhraseQuery_PhraseWeight

- (instancetype)initWithOrgApacheLuceneSearchPhraseQuery:(OrgApacheLuceneSearchPhraseQuery *)outer$
                  withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                             withBoolean:(jboolean)needsScores {
  OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, outer$, searcher, needsScores);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)queryTerms {
  JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(queryTerms, terms_);
}

- (NSString *)description {
  return JreStrcat("$@C", @"weight(", this$0_, ')');
}

- (jfloat)getValueForNormalization {
  return [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) getValueForNormalization];
}

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost {
  [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) normalizeWithFloat:queryNorm withFloat:topLevelBoost];
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  JreAssert(((IOSObjectArray *) nil_chk(terms_))->size_ > 0, @"org/apache/lucene/search/PhraseQuery.java:413 condition failed: assert terms.length > 0;");
  OrgApacheLuceneIndexLeafReader *reader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader];
  IOSObjectArray *postingsFreqs = [IOSObjectArray arrayWithLength:terms_->size_ type:OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_class_()];
  OrgApacheLuceneIndexTerms *fieldTerms = [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) termsWithNSString:this$0_->field_];
  if (fieldTerms == nil) {
    return nil;
  }
  if ([fieldTerms hasPositions] == false) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$@C", @"field \"", this$0_->field_, @"\" was indexed without position data; cannot run PhraseQuery (phrase=", [self getQuery], ')'));
  }
  OrgApacheLuceneIndexTermsEnum *te = [fieldTerms iterator];
  for (jint i = 0; i < terms_->size_; i++) {
    OrgApacheLuceneIndexTerm *t = IOSObjectArray_Get(terms_, i);
    OrgApacheLuceneIndexTermState *state = [((OrgApacheLuceneIndexTermContext *) nil_chk(IOSObjectArray_Get(nil_chk(states_), i))) getWithInt:context->ord_];
    if (state == nil) {
      JreAssert(OrgApacheLuceneSearchPhraseQuery_PhraseWeight_termNotInReaderWithOrgApacheLuceneIndexLeafReader_withOrgApacheLuceneIndexTerm_(self, reader, t), @"no termstate found but term exists in reader");
      return nil;
    }
    [((OrgApacheLuceneIndexTermsEnum *) nil_chk(te)) seekExactWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneIndexTerm *) nil_chk(t)) bytes] withOrgApacheLuceneIndexTermState:state];
    OrgApacheLuceneIndexPostingsEnum *postingsEnum = JreRetainedLocalValue([te postingsWithOrgApacheLuceneIndexPostingsEnum:nil withInt:OrgApacheLuceneIndexPostingsEnum_POSITIONS]);
    IOSObjectArray_SetAndConsume(postingsFreqs, i, new_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(postingsEnum, IOSIntArray_Get(nil_chk(positions_), i), [IOSObjectArray arrayWithObjects:(id[]){ t } count:1 type:OrgApacheLuceneIndexTerm_class_()]));
  }
  if (this$0_->slop_ == 0) {
    OrgApacheLuceneUtilArrayUtil_timSortWithJavaLangComparableArray_(postingsFreqs);
  }
  if (this$0_->slop_ == 0) {
    return create_OrgApacheLuceneSearchExactPhraseScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(self, postingsFreqs, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context], needsScores_);
  }
  else {
    return create_OrgApacheLuceneSearchSloppyPhraseScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(self, postingsFreqs, this$0_->slop_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context], needsScores_);
  }
}

- (jboolean)termNotInReaderWithOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader
                                 withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  return OrgApacheLuceneSearchPhraseQuery_PhraseWeight_termNotInReaderWithOrgApacheLuceneIndexLeafReader_withOrgApacheLuceneIndexTerm_(self, reader, term);
}

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                               withInt:(jint)doc {
  OrgApacheLuceneSearchScorer *scorer = JreRetainedLocalValue([self scorerWithOrgApacheLuceneIndexLeafReaderContext:context]);
  if (scorer != nil) {
    jint newDoc = [scorer advanceWithInt:doc];
    if (newDoc == doc) {
      jfloat freq = this$0_->slop_ == 0 ? [scorer freq] : [((OrgApacheLuceneSearchSloppyPhraseScorer *) cast_chk(scorer, [OrgApacheLuceneSearchSloppyPhraseScorer class])) sloppyFreq];
      OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer = JreRetainedLocalValue([((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context]);
      OrgApacheLuceneSearchExplanation *freqExplanation = OrgApacheLuceneSearchExplanation_matchWithFloat_withNSString_withOrgApacheLuceneSearchExplanationArray_(freq, JreStrcat("$F", @"phraseFreq=", freq), [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchExplanation_class_()]);
      OrgApacheLuceneSearchExplanation *scoreExplanation = JreRetainedLocalValue([((OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *) nil_chk(docScorer)) explainWithInt:doc withOrgApacheLuceneSearchExplanation:freqExplanation]);
      return OrgApacheLuceneSearchExplanation_matchWithFloat_withNSString_withOrgApacheLuceneSearchExplanationArray_([((OrgApacheLuceneSearchExplanation *) nil_chk(scoreExplanation)) getValue], JreStrcat("$@$I$$$", @"weight(", [self getQuery], @" in ", doc, @") [", [[similarity_ java_getClass] getSimpleName], @"], result of:"), [IOSObjectArray arrayWithObjects:(id[]){ scoreExplanation } count:1 type:OrgApacheLuceneSearchExplanation_class_()]);
    }
  }
  return OrgApacheLuceneSearchExplanation_noMatchWithNSString_withOrgApacheLuceneSearchExplanationArray_(@"no matching term", [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchExplanation_class_()]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(similarity_);
  RELEASE_(stats_);
  RELEASE_(states_);
  RELEASE_(terms_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchScorer;", 0x1, 8, 9, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 10, 11, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchExplanation;", 0x1, 12, 13, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchPhraseQuery:withOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  methods[1].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(getValueForNormalization);
  methods[4].selector = @selector(normalizeWithFloat:withFloat:);
  methods[5].selector = @selector(scorerWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[6].selector = @selector(termNotInReaderWithOrgApacheLuceneIndexLeafReader:withOrgApacheLuceneIndexTerm:);
  methods[7].selector = @selector(explainWithOrgApacheLuceneIndexLeafReaderContext:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchPhraseQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilaritiesSimilarity;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stats_", "LOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "needsScores_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "states_", "[LOrgApacheLuceneIndexTermContext;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
    { "terms_", "[LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "positions_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchPhraseQuery;LOrgApacheLuceneSearchIndexSearcher;Z", "LJavaIoIOException;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "toString", "normalize", "FF", "scorer", "LOrgApacheLuceneIndexLeafReaderContext;", "termNotInReader", "LOrgApacheLuceneIndexLeafReader;LOrgApacheLuceneIndexTerm;", "explain", "LOrgApacheLuceneIndexLeafReaderContext;I", "LOrgApacheLuceneSearchPhraseQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPhraseQuery_PhraseWeight = { "PhraseWeight", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x2, 8, 7, 14, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchPhraseQuery_PhraseWeight;
}

@end

void OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery_PhraseWeight *self, OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchWeight_initWithOrgApacheLuceneSearchQuery_(self, outer$);
  JreStrongAssign(&self->terms_, [outer$ getTerms]);
  JreStrongAssign(&self->positions_, [outer$ getPositions]);
  IOSIntArray *positions = [outer$ getPositions];
  if (((IOSIntArray *) nil_chk(positions))->size_ < 2) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"PhraseWeight does not support less than 2 terms, call rewrite first");
  }
  else if (IOSIntArray_Get(positions, 0) != 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"PhraseWeight requires that the first position is 0, call rewrite first");
  }
  self->needsScores_ = needsScores;
  JreStrongAssign(&self->similarity_, [((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher)) getSimilarityWithBoolean:needsScores]);
  OrgApacheLuceneIndexIndexReaderContext *context = [searcher getTopReaderContext];
  JreStrongAssignAndConsume(&self->states_, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->terms_))->size_ type:OrgApacheLuceneIndexTermContext_class_()]);
  IOSObjectArray *termStats = [IOSObjectArray arrayWithLength:self->terms_->size_ type:OrgApacheLuceneSearchTermStatistics_class_()];
  for (jint i = 0; i < self->terms_->size_; i++) {
    OrgApacheLuceneIndexTerm *term = IOSObjectArray_Get(self->terms_, i);
    IOSObjectArray_Set(nil_chk(self->states_), i, OrgApacheLuceneIndexTermContext_buildWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTerm_(context, term));
    IOSObjectArray_Set(termStats, i, [searcher termStatisticsWithOrgApacheLuceneIndexTerm:term withOrgApacheLuceneIndexTermContext:IOSObjectArray_Get(nil_chk(self->states_), i)]);
  }
  JreStrongAssign(&self->stats_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(self->similarity_)) computeWeightWithFloat:[outer$ getBoost] withOrgApacheLuceneSearchCollectionStatistics:[searcher collectionStatisticsWithNSString:outer$->field_] withOrgApacheLuceneSearchTermStatisticsArray:termStats]);
}

OrgApacheLuceneSearchPhraseQuery_PhraseWeight *new_OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_, outer$, searcher, needsScores)
}

OrgApacheLuceneSearchPhraseQuery_PhraseWeight *create_OrgApacheLuceneSearchPhraseQuery_PhraseWeight_initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPhraseQuery_PhraseWeight, initWithOrgApacheLuceneSearchPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_, outer$, searcher, needsScores)
}

jboolean OrgApacheLuceneSearchPhraseQuery_PhraseWeight_termNotInReaderWithOrgApacheLuceneIndexLeafReader_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchPhraseQuery_PhraseWeight *self, OrgApacheLuceneIndexLeafReader *reader, OrgApacheLuceneIndexTerm *term) {
  return [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) docFreqWithOrgApacheLuceneIndexTerm:term] == 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPhraseQuery_PhraseWeight)
