//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/ConjunctionDISI.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/apache/lucene/search/ConjunctionDISI.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/util/CollectionUtil.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/ConjunctionDISI must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheLuceneSearchConjunctionDISI ()

/*!
 @brief Adds the iterator, possibly splitting up into two phases or collapsing if it is another conjunction
 */
+ (void)addIteratorWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)disi
                                            withJavaUtilList:(id<JavaUtilList>)allIterators
                                            withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators;

- (jint)doNextWithInt:(jint)doc;

@end

__attribute__((unused)) static void OrgApacheLuceneSearchConjunctionDISI_addIteratorWithOrgApacheLuceneSearchDocIdSetIterator_withJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchDocIdSetIterator *disi, id<JavaUtilList> allIterators, id<JavaUtilList> twoPhaseIterators);

__attribute__((unused)) static jint OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(OrgApacheLuceneSearchConjunctionDISI *self, jint doc);

@interface OrgApacheLuceneSearchConjunctionDISI_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(OrgApacheLuceneSearchDocIdSetIterator *)o1
               withId:(OrgApacheLuceneSearchDocIdSetIterator *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchConjunctionDISI_1)

__attribute__((unused)) static void OrgApacheLuceneSearchConjunctionDISI_1_init(OrgApacheLuceneSearchConjunctionDISI_1 *self);

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_1 *new_OrgApacheLuceneSearchConjunctionDISI_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_1 *create_OrgApacheLuceneSearchConjunctionDISI_1_init(void);

/*!
 @brief <code>TwoPhaseIterator</code> view of a <code>TwoPhase</code> conjunction.
 */
@interface OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI : OrgApacheLuceneSearchTwoPhaseIterator {
 @public
  IOSObjectArray *twoPhaseIterators_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators
                    withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators;

- (jboolean)matches;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI, twoPhaseIterators_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *self, id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators);

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *new_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *create_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI)

/*!
 @brief A conjunction DISI built on top of approximations.This implementation
  verifies that documents actually match by consulting the provided 
 <code>TwoPhaseIterator</code>s.
 Another important difference with <code>ConjunctionDISI</code> is that this
  implementation supports approximations too: the approximation of this
  impl is the conjunction of the approximations of the wrapped iterators.
  This allows eg. <code>+"A B" +C</code> to be approximated as 
 <code>+(+A +B) +C</code>.
 */
@interface OrgApacheLuceneSearchConjunctionDISI_TwoPhase : OrgApacheLuceneSearchConjunctionDISI {
 @public
  OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *twoPhaseView_;
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators
                    withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators;

- (OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *)asTwoPhaseIterator;

- (jboolean)matches;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchConjunctionDISI_TwoPhase)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchConjunctionDISI_TwoPhase, twoPhaseView_, OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *)

__attribute__((unused)) static void OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI_TwoPhase *self, id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators);

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_TwoPhase *new_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchConjunctionDISI_TwoPhase *create_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchConjunctionDISI_TwoPhase)

@implementation OrgApacheLuceneSearchConjunctionDISI

+ (OrgApacheLuceneSearchConjunctionDISI *)intersectWithJavaUtilList:(id<JavaUtilList>)iterators {
  return OrgApacheLuceneSearchConjunctionDISI_intersectWithJavaUtilList_(iterators);
}

+ (void)addIteratorWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)disi
                                            withJavaUtilList:(id<JavaUtilList>)allIterators
                                            withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators {
  OrgApacheLuceneSearchConjunctionDISI_addIteratorWithOrgApacheLuceneSearchDocIdSetIterator_withJavaUtilList_withJavaUtilList_(disi, allIterators, twoPhaseIterators);
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators {
  OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(self, iterators);
  return self;
}

- (jboolean)matches {
  return true;
}

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator {
  return nil;
}

- (jint)doNextWithInt:(jint)doc {
  return OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(self, doc);
}

- (jint)advanceWithInt:(jint)target {
  return OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(self, [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(lead_)) advanceWithInt:target]);
}

- (jint)docID {
  return [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(lead_)) docID];
}

- (jint)nextDoc {
  return OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(self, [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(lead_)) nextDoc]);
}

- (jlong)cost {
  return [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(lead_)) cost];
}

- (void)dealloc {
  RELEASE_(lead_);
  RELEASE_(others_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneSearchConjunctionDISI;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0xa, 3, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, 6, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, 7, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchTwoPhaseIterator;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 8, 9, 7, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 9, 7, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 7, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(intersectWithJavaUtilList:);
  methods[1].selector = @selector(addIteratorWithOrgApacheLuceneSearchDocIdSetIterator:withJavaUtilList:withJavaUtilList:);
  methods[2].selector = @selector(initWithJavaUtilList:);
  methods[3].selector = @selector(matches);
  methods[4].selector = @selector(asTwoPhaseIterator);
  methods[5].selector = @selector(doNextWithInt:);
  methods[6].selector = @selector(advanceWithInt:);
  methods[7].selector = @selector(docID);
  methods[8].selector = @selector(nextDoc);
  methods[9].selector = @selector(cost);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lead_", "LOrgApacheLuceneSearchDocIdSetIterator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "others_", "[LOrgApacheLuceneSearchDocIdSetIterator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "intersect", "LJavaUtilList;", "(Ljava/util/List<+Lorg/apache/lucene/search/DocIdSetIterator;>;)Lorg/apache/lucene/search/ConjunctionDISI;", "addIterator", "LOrgApacheLuceneSearchDocIdSetIterator;LJavaUtilList;LJavaUtilList;", "(Lorg/apache/lucene/search/DocIdSetIterator;Ljava/util/List<Lorg/apache/lucene/search/DocIdSetIterator;>;Ljava/util/List<Lorg/apache/lucene/search/TwoPhaseIterator;>;)V", "(Ljava/util/List<+Lorg/apache/lucene/search/DocIdSetIterator;>;)V", "LJavaIoIOException;", "doNext", "I", "advance", "LOrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI;LOrgApacheLuceneSearchConjunctionDISI_TwoPhase;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchConjunctionDISI = { "ConjunctionDISI", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, 11, -1, -1, -1 };
  return &_OrgApacheLuceneSearchConjunctionDISI;
}

@end

OrgApacheLuceneSearchConjunctionDISI *OrgApacheLuceneSearchConjunctionDISI_intersectWithJavaUtilList_(id<JavaUtilList> iterators) {
  OrgApacheLuceneSearchConjunctionDISI_initialize();
  if ([((id<JavaUtilList>) nil_chk(iterators)) size] < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot make a ConjunctionDISI of less than 2 iterators");
  }
  id<JavaUtilList> allIterators = create_JavaUtilArrayList_init();
  id<JavaUtilList> twoPhaseIterators = create_JavaUtilArrayList_init();
  for (OrgApacheLuceneSearchDocIdSetIterator * __strong iter in iterators) {
    OrgApacheLuceneSearchConjunctionDISI_addIteratorWithOrgApacheLuceneSearchDocIdSetIterator_withJavaUtilList_withJavaUtilList_(iter, allIterators, twoPhaseIterators);
  }
  if ([twoPhaseIterators isEmpty]) {
    return create_OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(allIterators);
  }
  else {
    return create_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(allIterators, twoPhaseIterators);
  }
}

void OrgApacheLuceneSearchConjunctionDISI_addIteratorWithOrgApacheLuceneSearchDocIdSetIterator_withJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchDocIdSetIterator *disi, id<JavaUtilList> allIterators, id<JavaUtilList> twoPhaseIterators) {
  OrgApacheLuceneSearchConjunctionDISI_initialize();
  if (JreObjectEqualsEquals([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(disi)) java_getClass], OrgApacheLuceneSearchConjunctionDISI_class_()) || JreObjectEqualsEquals([disi java_getClass], OrgApacheLuceneSearchConjunctionDISI_TwoPhase_class_())) {
    OrgApacheLuceneSearchConjunctionDISI *conjunction = (OrgApacheLuceneSearchConjunctionDISI *) cast_chk(disi, [OrgApacheLuceneSearchConjunctionDISI class]);
    [((id<JavaUtilList>) nil_chk(allIterators)) addWithId:conjunction->lead_];
    JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(allIterators, conjunction->others_);
    if (JreObjectEqualsEquals([conjunction java_getClass], OrgApacheLuceneSearchConjunctionDISI_TwoPhase_class_())) {
      OrgApacheLuceneSearchConjunctionDISI_TwoPhase *twoPhase = (OrgApacheLuceneSearchConjunctionDISI_TwoPhase *) cast_chk(conjunction, [OrgApacheLuceneSearchConjunctionDISI_TwoPhase class]);
      JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(twoPhaseIterators, ((OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *) nil_chk(twoPhase->twoPhaseView_))->twoPhaseIterators_);
    }
  }
  else {
    OrgApacheLuceneSearchTwoPhaseIterator *twoPhaseIter = OrgApacheLuceneSearchTwoPhaseIterator_asTwoPhaseIteratorWithOrgApacheLuceneSearchDocIdSetIterator_(disi);
    if (twoPhaseIter != nil) {
      [((id<JavaUtilList>) nil_chk(allIterators)) addWithId:[twoPhaseIter approximation]];
      [((id<JavaUtilList>) nil_chk(twoPhaseIterators)) addWithId:twoPhaseIter];
    }
    else {
      [((id<JavaUtilList>) nil_chk(allIterators)) addWithId:disi];
    }
  }
}

void OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI *self, id<JavaUtilList> iterators) {
  OrgApacheLuceneSearchDocIdSetIterator_init(self);
  JreAssert([((id<JavaUtilList>) nil_chk(iterators)) size] >= 2, @"org/apache/lucene/search/ConjunctionDISI.java:82 condition failed: assert iterators.size() >= 2;");
  OrgApacheLuceneUtilCollectionUtil_timSortWithJavaUtilList_withJavaUtilComparator_(iterators, create_OrgApacheLuceneSearchConjunctionDISI_1_init());
  JreStrongAssign(&self->lead_, [iterators getWithInt:0]);
  JreStrongAssign(&self->others_, [((id<JavaUtilList>) nil_chk([iterators subListWithInt:1 withInt:[iterators size]])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchDocIdSetIterator_class_()]]);
}

OrgApacheLuceneSearchConjunctionDISI *new_OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(id<JavaUtilList> iterators) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchConjunctionDISI, initWithJavaUtilList_, iterators)
}

OrgApacheLuceneSearchConjunctionDISI *create_OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(id<JavaUtilList> iterators) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchConjunctionDISI, initWithJavaUtilList_, iterators)
}

jint OrgApacheLuceneSearchConjunctionDISI_doNextWithInt_(OrgApacheLuceneSearchConjunctionDISI *self, jint doc) {
  for (; ; ) {
    if (doc == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
      return OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
    }
    for (; ; ) {
      {
        IOSObjectArray *a__ = self->others_;
        OrgApacheLuceneSearchDocIdSetIterator * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheLuceneSearchDocIdSetIterator * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheLuceneSearchDocIdSetIterator *other = *b__++;
          if ([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(other)) docID] < doc) {
            jint next = [other advanceWithInt:doc];
            if (next > doc) {
              doc = [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(self->lead_)) advanceWithInt:next];
              goto break_advanceHead;
            }
          }
        }
      }
      if ([self matches]) {
        return doc;
      }
      else {
        doc = [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(self->lead_)) nextDoc];
        goto break_advanceHead;
      }
    }
    break_advanceHead: ;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchConjunctionDISI)

@implementation OrgApacheLuceneSearchConjunctionDISI_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchConjunctionDISI_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgApacheLuceneSearchDocIdSetIterator *)o1
               withId:(OrgApacheLuceneSearchDocIdSetIterator *)o2 {
  return JavaLangLong_compareWithLong_withLong_([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(o1)) cost], [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(o2)) cost]);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LOrgApacheLuceneSearchDocIdSetIterator;LOrgApacheLuceneSearchDocIdSetIterator;", "LOrgApacheLuceneSearchConjunctionDISI;", "initWithJavaUtilList:", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/search/DocIdSetIterator;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchConjunctionDISI_1 = { "", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 2, -1, 3, 4, -1 };
  return &_OrgApacheLuceneSearchConjunctionDISI_1;
}

@end

void OrgApacheLuceneSearchConjunctionDISI_1_init(OrgApacheLuceneSearchConjunctionDISI_1 *self) {
  NSObject_init(self);
}

OrgApacheLuceneSearchConjunctionDISI_1 *new_OrgApacheLuceneSearchConjunctionDISI_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchConjunctionDISI_1, init)
}

OrgApacheLuceneSearchConjunctionDISI_1 *create_OrgApacheLuceneSearchConjunctionDISI_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchConjunctionDISI_1, init)
}

@implementation OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators
                    withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators {
  OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(self, iterators, twoPhaseIterators);
  return self;
}

- (jboolean)matches {
  {
    IOSObjectArray *a__ = twoPhaseIterators_;
    OrgApacheLuceneSearchTwoPhaseIterator * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchTwoPhaseIterator * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchTwoPhaseIterator *twoPhaseIterator = *b__++;
      if ([((OrgApacheLuceneSearchTwoPhaseIterator *) nil_chk(twoPhaseIterator)) matches] == false) {
        return false;
      }
    }
  }
  return true;
}

- (void)dealloc {
  RELEASE_(twoPhaseIterators_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(matches);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "twoPhaseIterators_", "[LOrgApacheLuceneSearchTwoPhaseIterator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<+Lorg/apache/lucene/search/DocIdSetIterator;>;Ljava/util/List<Lorg/apache/lucene/search/TwoPhaseIterator;>;)V", "LJavaIoIOException;", "LOrgApacheLuceneSearchConjunctionDISI;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI = { "TwoPhaseConjunctionDISI", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0xa, 2, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI;
}

@end

void OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *self, id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  OrgApacheLuceneSearchTwoPhaseIterator_initWithOrgApacheLuceneSearchDocIdSetIterator_(self, create_OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(iterators));
  JreAssert([((id<JavaUtilList>) nil_chk(twoPhaseIterators)) size] > 0, @"org/apache/lucene/search/ConjunctionDISI.java:168 condition failed: assert twoPhaseIterators.size() > 0;");
  JreStrongAssign(&self->twoPhaseIterators_, [twoPhaseIterators toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[twoPhaseIterators size] type:OrgApacheLuceneSearchTwoPhaseIterator_class_()]]);
}

OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *new_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI, initWithJavaUtilList_withJavaUtilList_, iterators, twoPhaseIterators)
}

OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *create_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI, initWithJavaUtilList_withJavaUtilList_, iterators, twoPhaseIterators)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI)

@implementation OrgApacheLuceneSearchConjunctionDISI_TwoPhase

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)iterators
                    withJavaUtilList:(id<JavaUtilList>)twoPhaseIterators {
  OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(self, iterators, twoPhaseIterators);
  return self;
}

- (OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *)asTwoPhaseIterator {
  return twoPhaseView_;
}

- (jboolean)matches {
  return [((OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI *) nil_chk(twoPhaseView_)) matches];
}

- (void)dealloc {
  RELEASE_(twoPhaseView_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(asTwoPhaseIterator);
  methods[2].selector = @selector(matches);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "twoPhaseView_", "LOrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<+Lorg/apache/lucene/search/DocIdSetIterator;>;Ljava/util/List<Lorg/apache/lucene/search/TwoPhaseIterator;>;)V", "LJavaIoIOException;", "LOrgApacheLuceneSearchConjunctionDISI;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchConjunctionDISI_TwoPhase = { "TwoPhase", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0xa, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchConjunctionDISI_TwoPhase;
}

@end

void OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchConjunctionDISI_TwoPhase *self, id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  OrgApacheLuceneSearchConjunctionDISI_initWithJavaUtilList_(self, iterators);
  JreStrongAssignAndConsume(&self->twoPhaseView_, new_OrgApacheLuceneSearchConjunctionDISI_TwoPhaseConjunctionDISI_initWithJavaUtilList_withJavaUtilList_(iterators, twoPhaseIterators));
}

OrgApacheLuceneSearchConjunctionDISI_TwoPhase *new_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchConjunctionDISI_TwoPhase, initWithJavaUtilList_withJavaUtilList_, iterators, twoPhaseIterators)
}

OrgApacheLuceneSearchConjunctionDISI_TwoPhase *create_OrgApacheLuceneSearchConjunctionDISI_TwoPhase_initWithJavaUtilList_withJavaUtilList_(id<JavaUtilList> iterators, id<JavaUtilList> twoPhaseIterators) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchConjunctionDISI_TwoPhase, initWithJavaUtilList_withJavaUtilList_, iterators, twoPhaseIterators)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchConjunctionDISI_TwoPhase)
