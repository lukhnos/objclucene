//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/DisiPriorityQueue.h"
#include "org/apache/lucene/search/DisiWrapper.h"
#include "org/apache/lucene/search/MinShouldMatchSumScorer.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/util/PriorityQueue.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/MinShouldMatchSumScorer must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneSearchMinShouldMatchSumScorer ()

+ (jlong)costWithJavaUtilCollection:(id<JavaUtilCollection>)scorers
                            withInt:(jint)minShouldMatch;

- (void)addLeadWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)lead;

- (void)pushBackLeads;

- (void)advanceTailWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)top;

- (void)advanceTail;

/*!
 @brief Reinitializes head, freq and doc from 'head'
 */
- (void)setDocAndFreq;

/*!
 @brief Advance tail to the lead until there is a match.
 */
- (jint)doNext;

/*!
 @brief Advance all entries from the tail to know about all matches on the
   current doc.
 */
- (void)updateFreq;

/*!
 @brief Insert an entry in 'tail' and evict the least-costly scorer if full.
 */
- (OrgApacheLuceneSearchDisiWrapper *)insertTailWithOverFlowWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)s;

/*!
 @brief Add an entry to 'tail'.Fails if over capacity.
 */
- (void)addTailWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)s;

/*!
 @brief Pop the least-costly scorer from 'tail'.
 */
- (OrgApacheLuceneSearchDisiWrapper *)popTail;

/*!
 @brief Heap helpers
 */
+ (void)upHeapCostWithOrgApacheLuceneSearchDisiWrapperArray:(IOSObjectArray *)heap
                                                    withInt:(jint)i;

+ (void)downHeapCostWithOrgApacheLuceneSearchDisiWrapperArray:(IOSObjectArray *)heap
                                                      withInt:(jint)size;

@end

__attribute__((unused)) static jlong OrgApacheLuceneSearchMinShouldMatchSumScorer_costWithJavaUtilCollection_withInt_(id<JavaUtilCollection> scorers, jint minShouldMatch);

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_addLeadWithOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchMinShouldMatchSumScorer *self, OrgApacheLuceneSearchDisiWrapper *lead);

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_pushBackLeads(OrgApacheLuceneSearchMinShouldMatchSumScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_advanceTailWithOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchMinShouldMatchSumScorer *self, OrgApacheLuceneSearchDisiWrapper *top);

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_advanceTail(OrgApacheLuceneSearchMinShouldMatchSumScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_setDocAndFreq(OrgApacheLuceneSearchMinShouldMatchSumScorer *self);

__attribute__((unused)) static jint OrgApacheLuceneSearchMinShouldMatchSumScorer_doNext(OrgApacheLuceneSearchMinShouldMatchSumScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_updateFreq(OrgApacheLuceneSearchMinShouldMatchSumScorer *self);

__attribute__((unused)) static OrgApacheLuceneSearchDisiWrapper *OrgApacheLuceneSearchMinShouldMatchSumScorer_insertTailWithOverFlowWithOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchMinShouldMatchSumScorer *self, OrgApacheLuceneSearchDisiWrapper *s);

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_addTailWithOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchMinShouldMatchSumScorer *self, OrgApacheLuceneSearchDisiWrapper *s);

__attribute__((unused)) static OrgApacheLuceneSearchDisiWrapper *OrgApacheLuceneSearchMinShouldMatchSumScorer_popTail(OrgApacheLuceneSearchMinShouldMatchSumScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_upHeapCostWithOrgApacheLuceneSearchDisiWrapperArray_withInt_(IOSObjectArray *heap, jint i);

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_downHeapCostWithOrgApacheLuceneSearchDisiWrapperArray_withInt_(IOSObjectArray *heap, jint size);

@interface OrgApacheLuceneSearchMinShouldMatchSumScorer_1 : OrgApacheLuceneUtilPriorityQueue

- (instancetype)initWithInt:(jint)maxSize;

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchScorer *)a
                    withId:(OrgApacheLuceneSearchScorer *)b;

- (OrgApacheLuceneSearchScorer *)pop;

- (OrgApacheLuceneSearchScorer *)top;

- (OrgApacheLuceneSearchScorer *)insertWithOverflowWithId:(OrgApacheLuceneSearchScorer *)arg0;

- (OrgApacheLuceneSearchScorer *)addWithId:(OrgApacheLuceneSearchScorer *)arg0;

- (OrgApacheLuceneSearchScorer *)getSentinelObject;

- (OrgApacheLuceneSearchScorer *)updateTopWithId:(OrgApacheLuceneSearchScorer *)arg0;

- (OrgApacheLuceneSearchScorer *)updateTop;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMinShouldMatchSumScorer_1)

__attribute__((unused)) static void OrgApacheLuceneSearchMinShouldMatchSumScorer_1_initWithInt_(OrgApacheLuceneSearchMinShouldMatchSumScorer_1 *self, jint maxSize);

__attribute__((unused)) static OrgApacheLuceneSearchMinShouldMatchSumScorer_1 *new_OrgApacheLuceneSearchMinShouldMatchSumScorer_1_initWithInt_(jint maxSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchMinShouldMatchSumScorer_1 *create_OrgApacheLuceneSearchMinShouldMatchSumScorer_1_initWithInt_(jint maxSize);

@implementation OrgApacheLuceneSearchMinShouldMatchSumScorer

+ (jlong)costWithJavaUtilCollection:(id<JavaUtilCollection>)scorers
                            withInt:(jint)minShouldMatch {
  return OrgApacheLuceneSearchMinShouldMatchSumScorer_costWithJavaUtilCollection_withInt_(scorers, minShouldMatch);
}

- (instancetype)initPackagePrivateWithOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)weight
                                           withJavaUtilCollection:(id<JavaUtilCollection>)scorers
                                                          withInt:(jint)minShouldMatch
                                                   withFloatArray:(IOSFloatArray *)coord {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withJavaUtilCollection_withInt_withFloatArray_(self, weight, scorers, minShouldMatch, coord);
  return self;
}

- (jlong)cost {
  return cost_;
}

- (id<JavaUtilCollection>)getChildren {
  return childScorers_;
}

- (jint)nextDoc {
  for (OrgApacheLuceneSearchDisiWrapper *s = JreRetainedLocalValue(lead_); s != nil; s = s->next_) {
    OrgApacheLuceneSearchDisiWrapper *evicted = OrgApacheLuceneSearchMinShouldMatchSumScorer_insertTailWithOverFlowWithOrgApacheLuceneSearchDisiWrapper_(self, s);
    if (evicted != nil) {
      if (evicted->doc_ == doc_) {
        evicted->doc_ = [((OrgApacheLuceneSearchScorer *) nil_chk(evicted->iterator_)) nextDoc];
      }
      else {
        evicted->doc_ = [((OrgApacheLuceneSearchScorer *) nil_chk(evicted->iterator_)) advanceWithInt:doc_ + 1];
      }
      [((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(head_)) addWithOrgApacheLuceneSearchDisiWrapper:evicted];
    }
  }
  OrgApacheLuceneSearchMinShouldMatchSumScorer_setDocAndFreq(self);
  return OrgApacheLuceneSearchMinShouldMatchSumScorer_doNext(self);
}

- (jint)advanceWithInt:(jint)target {
  for (OrgApacheLuceneSearchDisiWrapper *s = JreRetainedLocalValue(lead_); s != nil; s = s->next_) {
    OrgApacheLuceneSearchDisiWrapper *evicted = OrgApacheLuceneSearchMinShouldMatchSumScorer_insertTailWithOverFlowWithOrgApacheLuceneSearchDisiWrapper_(self, s);
    if (evicted != nil) {
      evicted->doc_ = [((OrgApacheLuceneSearchScorer *) nil_chk(evicted->iterator_)) advanceWithInt:target];
      [((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(head_)) addWithOrgApacheLuceneSearchDisiWrapper:evicted];
    }
  }
  OrgApacheLuceneSearchDisiWrapper *headTop = JreRetainedLocalValue([((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(head_)) top]);
  while (((OrgApacheLuceneSearchDisiWrapper *) nil_chk(headTop))->doc_ < target) {
    OrgApacheLuceneSearchDisiWrapper *evicted = OrgApacheLuceneSearchMinShouldMatchSumScorer_insertTailWithOverFlowWithOrgApacheLuceneSearchDisiWrapper_(self, headTop);
    ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(evicted))->doc_ = [((OrgApacheLuceneSearchScorer *) nil_chk(evicted->iterator_)) advanceWithInt:target];
    headTop = [head_ updateTopWithOrgApacheLuceneSearchDisiWrapper:evicted];
  }
  OrgApacheLuceneSearchMinShouldMatchSumScorer_setDocAndFreq(self);
  return OrgApacheLuceneSearchMinShouldMatchSumScorer_doNext(self);
}

- (void)addLeadWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)lead {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_addLeadWithOrgApacheLuceneSearchDisiWrapper_(self, lead);
}

- (void)pushBackLeads {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_pushBackLeads(self);
}

- (void)advanceTailWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)top {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_advanceTailWithOrgApacheLuceneSearchDisiWrapper_(self, top);
}

- (void)advanceTail {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_advanceTail(self);
}

- (void)setDocAndFreq {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_setDocAndFreq(self);
}

- (jint)doNext {
  return OrgApacheLuceneSearchMinShouldMatchSumScorer_doNext(self);
}

- (void)updateFreq {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_updateFreq(self);
}

- (jint)freq {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_updateFreq(self);
  return freq_;
}

- (jfloat)score {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_updateFreq(self);
  jdouble score = 0;
  for (OrgApacheLuceneSearchDisiWrapper *s = JreRetainedLocalValue(lead_); s != nil; s = s->next_) {
    JrePlusAssignDoubleD(&score, [((OrgApacheLuceneSearchScorer *) nil_chk(s->iterator_)) score]);
  }
  return IOSFloatArray_Get(nil_chk(coord_), freq_) * (jfloat) score;
}

- (jint)docID {
  JreAssert(doc_ == ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(lead_))->doc_, @"org/apache/lucene/search/MinShouldMatchSumScorer.java:287 condition failed: assert doc == lead.doc;");
  return doc_;
}

- (OrgApacheLuceneSearchDisiWrapper *)insertTailWithOverFlowWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)s {
  return OrgApacheLuceneSearchMinShouldMatchSumScorer_insertTailWithOverFlowWithOrgApacheLuceneSearchDisiWrapper_(self, s);
}

- (void)addTailWithOrgApacheLuceneSearchDisiWrapper:(OrgApacheLuceneSearchDisiWrapper *)s {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_addTailWithOrgApacheLuceneSearchDisiWrapper_(self, s);
}

- (OrgApacheLuceneSearchDisiWrapper *)popTail {
  return OrgApacheLuceneSearchMinShouldMatchSumScorer_popTail(self);
}

+ (void)upHeapCostWithOrgApacheLuceneSearchDisiWrapperArray:(IOSObjectArray *)heap
                                                    withInt:(jint)i {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_upHeapCostWithOrgApacheLuceneSearchDisiWrapperArray_withInt_(heap, i);
}

+ (void)downHeapCostWithOrgApacheLuceneSearchDisiWrapperArray:(IOSObjectArray *)heap
                                                      withInt:(jint)size {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_downHeapCostWithOrgApacheLuceneSearchDisiWrapperArray_withInt_(heap, size);
}

- (void)dealloc {
  RELEASE_(coord_);
  RELEASE_(lead_);
  RELEASE_(head_);
  RELEASE_(tail_);
  RELEASE_(childScorers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, 4, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 10, 6, 11, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 6, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 6, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, 6, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDisiWrapper;", 0x2, 13, 10, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 15, 10, -1, 11, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDisiWrapper;", 0x2, -1, -1, -1, 16, -1, -1 },
    { NULL, "V", 0xa, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0xa, 20, 18, -1, 19, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(costWithJavaUtilCollection:withInt:);
  methods[1].selector = @selector(initPackagePrivateWithOrgApacheLuceneSearchWeight:withJavaUtilCollection:withInt:withFloatArray:);
  methods[2].selector = @selector(cost);
  methods[3].selector = @selector(getChildren);
  methods[4].selector = @selector(nextDoc);
  methods[5].selector = @selector(advanceWithInt:);
  methods[6].selector = @selector(addLeadWithOrgApacheLuceneSearchDisiWrapper:);
  methods[7].selector = @selector(pushBackLeads);
  methods[8].selector = @selector(advanceTailWithOrgApacheLuceneSearchDisiWrapper:);
  methods[9].selector = @selector(advanceTail);
  methods[10].selector = @selector(setDocAndFreq);
  methods[11].selector = @selector(doNext);
  methods[12].selector = @selector(updateFreq);
  methods[13].selector = @selector(freq);
  methods[14].selector = @selector(score);
  methods[15].selector = @selector(docID);
  methods[16].selector = @selector(insertTailWithOverFlowWithOrgApacheLuceneSearchDisiWrapper:);
  methods[17].selector = @selector(addTailWithOrgApacheLuceneSearchDisiWrapper:);
  methods[18].selector = @selector(popTail);
  methods[19].selector = @selector(upHeapCostWithOrgApacheLuceneSearchDisiWrapperArray:withInt:);
  methods[20].selector = @selector(downHeapCostWithOrgApacheLuceneSearchDisiWrapperArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "minShouldMatch_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "coord_", "[F", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lead_", "LOrgApacheLuceneSearchDisiWrapper;", .constantValue.asLong = 0, 0x0, -1, -1, 21, -1 },
    { "doc_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "freq_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "head_", "LOrgApacheLuceneSearchDisiPriorityQueue;", .constantValue.asLong = 0, 0x10, -1, -1, 22, -1 },
    { "tail_", "[LOrgApacheLuceneSearchDisiWrapper;", .constantValue.asLong = 0, 0x10, -1, -1, 23, -1 },
    { "tailSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "childScorers_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x10, -1, -1, 24, -1 },
    { "cost_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "cost", "LJavaUtilCollection;I", "(Ljava/util/Collection<Lorg/apache/lucene/search/Scorer;>;I)J", "LOrgApacheLuceneSearchWeight;LJavaUtilCollection;I[F", "(Lorg/apache/lucene/search/Weight;Ljava/util/Collection<Lorg/apache/lucene/search/Scorer;>;I[F)V", "()Ljava/util/Collection<Lorg/apache/lucene/search/Scorer$ChildScorer;>;", "LJavaIoIOException;", "advance", "I", "addLead", "LOrgApacheLuceneSearchDisiWrapper;", "(Lorg/apache/lucene/search/DisiWrapper<Lorg/apache/lucene/search/Scorer;>;)V", "advanceTail", "insertTailWithOverFlow", "(Lorg/apache/lucene/search/DisiWrapper<Lorg/apache/lucene/search/Scorer;>;)Lorg/apache/lucene/search/DisiWrapper<Lorg/apache/lucene/search/Scorer;>;", "addTail", "()Lorg/apache/lucene/search/DisiWrapper<Lorg/apache/lucene/search/Scorer;>;", "upHeapCost", "[LOrgApacheLuceneSearchDisiWrapper;I", "([Lorg/apache/lucene/search/DisiWrapper<Lorg/apache/lucene/search/Scorer;>;I)V", "downHeapCost", "Lorg/apache/lucene/search/DisiWrapper<Lorg/apache/lucene/search/Scorer;>;", "Lorg/apache/lucene/search/DisiPriorityQueue<Lorg/apache/lucene/search/Scorer;>;", "[Lorg/apache/lucene/search/DisiWrapper<Lorg/apache/lucene/search/Scorer;>;", "Ljava/util/Collection<Lorg/apache/lucene/search/Scorer$ChildScorer;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMinShouldMatchSumScorer = { "MinShouldMatchSumScorer", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x10, 21, 10, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMinShouldMatchSumScorer;
}

@end

jlong OrgApacheLuceneSearchMinShouldMatchSumScorer_costWithJavaUtilCollection_withInt_(id<JavaUtilCollection> scorers, jint minShouldMatch) {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_initialize();
  OrgApacheLuceneUtilPriorityQueue *pq = create_OrgApacheLuceneSearchMinShouldMatchSumScorer_1_initWithInt_([((id<JavaUtilCollection>) nil_chk(scorers)) size] - minShouldMatch + 1);
  for (OrgApacheLuceneSearchScorer * __strong scorer in scorers) {
    [pq insertWithOverflowWithId:scorer];
  }
  jlong cost = 0;
  for (OrgApacheLuceneSearchScorer *scorer = JreRetainedLocalValue([pq pop]); scorer != nil; scorer = [pq pop]) {
    cost += [scorer cost];
  }
  return cost;
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withJavaUtilCollection_withInt_withFloatArray_(OrgApacheLuceneSearchMinShouldMatchSumScorer *self, OrgApacheLuceneSearchWeight *weight, id<JavaUtilCollection> scorers, jint minShouldMatch, IOSFloatArray *coord) {
  OrgApacheLuceneSearchScorer_initWithOrgApacheLuceneSearchWeight_(self, weight);
  if (minShouldMatch > [((id<JavaUtilCollection>) nil_chk(scorers)) size]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"minShouldMatch should be <= the number of scorers");
  }
  if (minShouldMatch < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"minShouldMatch should be >= 1");
  }
  self->minShouldMatch_ = minShouldMatch;
  JreStrongAssign(&self->coord_, coord);
  self->doc_ = -1;
  JreStrongAssignAndConsume(&self->head_, new_OrgApacheLuceneSearchDisiPriorityQueue_initWithInt_([scorers size] - minShouldMatch + 1));
  JreStrongAssignAndConsume(&self->tail_, [IOSObjectArray newArrayWithLength:minShouldMatch - 1 type:OrgApacheLuceneSearchDisiWrapper_class_()]);
  for (OrgApacheLuceneSearchScorer * __strong scorer in scorers) {
    OrgApacheLuceneSearchMinShouldMatchSumScorer_addLeadWithOrgApacheLuceneSearchDisiWrapper_(self, create_OrgApacheLuceneSearchDisiWrapper_initWithOrgApacheLuceneSearchDocIdSetIterator_(scorer));
  }
  id<JavaUtilList> children = create_JavaUtilArrayList_init();
  for (OrgApacheLuceneSearchScorer * __strong scorer in scorers) {
    [children addWithId:create_OrgApacheLuceneSearchScorer_ChildScorer_initWithOrgApacheLuceneSearchScorer_withNSString_(scorer, @"SHOULD")];
  }
  JreStrongAssign(&self->childScorers_, JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(children));
  self->cost_ = OrgApacheLuceneSearchMinShouldMatchSumScorer_costWithJavaUtilCollection_withInt_(scorers, minShouldMatch);
}

OrgApacheLuceneSearchMinShouldMatchSumScorer *new_OrgApacheLuceneSearchMinShouldMatchSumScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withJavaUtilCollection_withInt_withFloatArray_(OrgApacheLuceneSearchWeight *weight, id<JavaUtilCollection> scorers, jint minShouldMatch, IOSFloatArray *coord) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMinShouldMatchSumScorer, initPackagePrivateWithOrgApacheLuceneSearchWeight_withJavaUtilCollection_withInt_withFloatArray_, weight, scorers, minShouldMatch, coord)
}

OrgApacheLuceneSearchMinShouldMatchSumScorer *create_OrgApacheLuceneSearchMinShouldMatchSumScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withJavaUtilCollection_withInt_withFloatArray_(OrgApacheLuceneSearchWeight *weight, id<JavaUtilCollection> scorers, jint minShouldMatch, IOSFloatArray *coord) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMinShouldMatchSumScorer, initPackagePrivateWithOrgApacheLuceneSearchWeight_withJavaUtilCollection_withInt_withFloatArray_, weight, scorers, minShouldMatch, coord)
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_addLeadWithOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchMinShouldMatchSumScorer *self, OrgApacheLuceneSearchDisiWrapper *lead) {
  JreStrongAssign(&((OrgApacheLuceneSearchDisiWrapper *) nil_chk(lead))->next_, self->lead_);
  JreStrongAssign(&self->lead_, lead);
  self->freq_ += 1;
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_pushBackLeads(OrgApacheLuceneSearchMinShouldMatchSumScorer *self) {
  for (OrgApacheLuceneSearchDisiWrapper *s = JreRetainedLocalValue(self->lead_); s != nil; s = s->next_) {
    OrgApacheLuceneSearchMinShouldMatchSumScorer_addTailWithOrgApacheLuceneSearchDisiWrapper_(self, s);
  }
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_advanceTailWithOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchMinShouldMatchSumScorer *self, OrgApacheLuceneSearchDisiWrapper *top) {
  ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(top))->doc_ = [((OrgApacheLuceneSearchScorer *) nil_chk(top->iterator_)) advanceWithInt:self->doc_];
  if (top->doc_ == self->doc_) {
    OrgApacheLuceneSearchMinShouldMatchSumScorer_addLeadWithOrgApacheLuceneSearchDisiWrapper_(self, top);
  }
  else {
    [((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(self->head_)) addWithOrgApacheLuceneSearchDisiWrapper:top];
  }
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_advanceTail(OrgApacheLuceneSearchMinShouldMatchSumScorer *self) {
  OrgApacheLuceneSearchDisiWrapper *top = OrgApacheLuceneSearchMinShouldMatchSumScorer_popTail(self);
  OrgApacheLuceneSearchMinShouldMatchSumScorer_advanceTailWithOrgApacheLuceneSearchDisiWrapper_(self, top);
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_setDocAndFreq(OrgApacheLuceneSearchMinShouldMatchSumScorer *self) {
  JreAssert([((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(self->head_)) size] > 0, @"org/apache/lucene/search/MinShouldMatchSumScorer.java:219 condition failed: assert head.size() > 0;");
  JreStrongAssign(&self->lead_, [self->head_ pop]);
  JreStrongAssign(&((OrgApacheLuceneSearchDisiWrapper *) nil_chk(self->lead_))->next_, nil);
  self->freq_ = 1;
  self->doc_ = self->lead_->doc_;
  while ([self->head_ size] > 0 && ((OrgApacheLuceneSearchDisiWrapper *) nil_chk([self->head_ top]))->doc_ == self->doc_) {
    OrgApacheLuceneSearchMinShouldMatchSumScorer_addLeadWithOrgApacheLuceneSearchDisiWrapper_(self, [self->head_ pop]);
  }
}

jint OrgApacheLuceneSearchMinShouldMatchSumScorer_doNext(OrgApacheLuceneSearchMinShouldMatchSumScorer *self) {
  while (self->freq_ < self->minShouldMatch_) {
    JreAssert(self->freq_ > 0, @"org/apache/lucene/search/MinShouldMatchSumScorer.java:235 condition failed: assert freq > 0;");
    if (self->freq_ + self->tailSize_ >= self->minShouldMatch_) {
      OrgApacheLuceneSearchMinShouldMatchSumScorer_advanceTail(self);
    }
    else {
      OrgApacheLuceneSearchMinShouldMatchSumScorer_pushBackLeads(self);
      OrgApacheLuceneSearchMinShouldMatchSumScorer_setDocAndFreq(self);
    }
  }
  return self->doc_;
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_updateFreq(OrgApacheLuceneSearchMinShouldMatchSumScorer *self) {
  JreAssert(self->freq_ >= self->minShouldMatch_, @"org/apache/lucene/search/MinShouldMatchSumScorer.java:253 condition failed: assert freq >= minShouldMatch;");
  for (jint i = self->tailSize_ - 1; i >= 0; --i) {
    OrgApacheLuceneSearchMinShouldMatchSumScorer_advanceTailWithOrgApacheLuceneSearchDisiWrapper_(self, IOSObjectArray_Get(nil_chk(self->tail_), i));
  }
  self->tailSize_ = 0;
}

OrgApacheLuceneSearchDisiWrapper *OrgApacheLuceneSearchMinShouldMatchSumScorer_insertTailWithOverFlowWithOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchMinShouldMatchSumScorer *self, OrgApacheLuceneSearchDisiWrapper *s) {
  if (self->tailSize_ < ((IOSObjectArray *) nil_chk(self->tail_))->size_) {
    OrgApacheLuceneSearchMinShouldMatchSumScorer_addTailWithOrgApacheLuceneSearchDisiWrapper_(self, s);
    return nil;
  }
  else if (self->tail_->size_ >= 1) {
    OrgApacheLuceneSearchDisiWrapper *top = IOSObjectArray_Get(self->tail_, 0);
    if (((OrgApacheLuceneSearchDisiWrapper *) nil_chk(top))->cost_ < ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(s))->cost_) {
      IOSObjectArray_Set(self->tail_, 0, s);
      OrgApacheLuceneSearchMinShouldMatchSumScorer_downHeapCostWithOrgApacheLuceneSearchDisiWrapperArray_withInt_(self->tail_, self->tailSize_);
      return top;
    }
  }
  return s;
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_addTailWithOrgApacheLuceneSearchDisiWrapper_(OrgApacheLuceneSearchMinShouldMatchSumScorer *self, OrgApacheLuceneSearchDisiWrapper *s) {
  IOSObjectArray_Set(nil_chk(self->tail_), self->tailSize_, s);
  OrgApacheLuceneSearchMinShouldMatchSumScorer_upHeapCostWithOrgApacheLuceneSearchDisiWrapperArray_withInt_(self->tail_, self->tailSize_);
  self->tailSize_ += 1;
}

OrgApacheLuceneSearchDisiWrapper *OrgApacheLuceneSearchMinShouldMatchSumScorer_popTail(OrgApacheLuceneSearchMinShouldMatchSumScorer *self) {
  JreAssert(self->tailSize_ > 0, @"org/apache/lucene/search/MinShouldMatchSumScorer.java:316 condition failed: assert tailSize > 0;");
  OrgApacheLuceneSearchDisiWrapper *result = IOSObjectArray_Get(nil_chk(self->tail_), 0);
  IOSObjectArray_Set(self->tail_, 0, IOSObjectArray_Get(self->tail_, --self->tailSize_));
  OrgApacheLuceneSearchMinShouldMatchSumScorer_downHeapCostWithOrgApacheLuceneSearchDisiWrapperArray_withInt_(self->tail_, self->tailSize_);
  return result;
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_upHeapCostWithOrgApacheLuceneSearchDisiWrapperArray_withInt_(IOSObjectArray *heap, jint i) {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_initialize();
  OrgApacheLuceneSearchDisiWrapper *node = IOSObjectArray_Get(nil_chk(heap), i);
  jlong nodeCost = ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(node))->cost_;
  jint j = OrgApacheLuceneSearchDisiPriorityQueue_parentNodeWithInt_(i);
  while (j >= 0 && nodeCost < ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap, j)))->cost_) {
    IOSObjectArray_Set(heap, i, IOSObjectArray_Get(heap, j));
    i = j;
    j = OrgApacheLuceneSearchDisiPriorityQueue_parentNodeWithInt_(j);
  }
  IOSObjectArray_Set(heap, i, node);
}

void OrgApacheLuceneSearchMinShouldMatchSumScorer_downHeapCostWithOrgApacheLuceneSearchDisiWrapperArray_withInt_(IOSObjectArray *heap, jint size) {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_initialize();
  jint i = 0;
  OrgApacheLuceneSearchDisiWrapper *node = IOSObjectArray_Get(nil_chk(heap), 0);
  jint j = OrgApacheLuceneSearchDisiPriorityQueue_leftNodeWithInt_(i);
  if (j < size) {
    jint k = OrgApacheLuceneSearchDisiPriorityQueue_rightNodeWithInt_(j);
    if (k < size && ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap, k)))->cost_ < ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap, j)))->cost_) {
      j = k;
    }
    if (((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap, j)))->cost_ < ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(node))->cost_) {
      do {
        IOSObjectArray_Set(heap, i, IOSObjectArray_Get(heap, j));
        i = j;
        j = OrgApacheLuceneSearchDisiPriorityQueue_leftNodeWithInt_(i);
        k = OrgApacheLuceneSearchDisiPriorityQueue_rightNodeWithInt_(j);
        if (k < size && ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap, k)))->cost_ < ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap, j)))->cost_) {
          j = k;
        }
      }
      while (j < size && ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(IOSObjectArray_Get(heap, j)))->cost_ < node->cost_);
      IOSObjectArray_Set(heap, i, node);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMinShouldMatchSumScorer)

@implementation OrgApacheLuceneSearchMinShouldMatchSumScorer_1

- (instancetype)initWithInt:(jint)maxSize {
  OrgApacheLuceneSearchMinShouldMatchSumScorer_1_initWithInt_(self, maxSize);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchScorer *)a
                    withId:(OrgApacheLuceneSearchScorer *)b {
  return [((OrgApacheLuceneSearchScorer *) nil_chk(a)) cost] > [((OrgApacheLuceneSearchScorer *) nil_chk(b)) cost];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(lessThanWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "lessThan", "LOrgApacheLuceneSearchScorer;LOrgApacheLuceneSearchScorer;", "LOrgApacheLuceneSearchMinShouldMatchSumScorer;", "costWithJavaUtilCollection:withInt:", "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/search/Scorer;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMinShouldMatchSumScorer_1 = { "", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, 4, 5, -1 };
  return &_OrgApacheLuceneSearchMinShouldMatchSumScorer_1;
}

@end

void OrgApacheLuceneSearchMinShouldMatchSumScorer_1_initWithInt_(OrgApacheLuceneSearchMinShouldMatchSumScorer_1 *self, jint maxSize) {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_(self, maxSize);
}

OrgApacheLuceneSearchMinShouldMatchSumScorer_1 *new_OrgApacheLuceneSearchMinShouldMatchSumScorer_1_initWithInt_(jint maxSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMinShouldMatchSumScorer_1, initWithInt_, maxSize)
}

OrgApacheLuceneSearchMinShouldMatchSumScorer_1 *create_OrgApacheLuceneSearchMinShouldMatchSumScorer_1_initWithInt_(jint maxSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMinShouldMatchSumScorer_1, initWithInt_, maxSize)
}
