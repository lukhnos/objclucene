//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/suggest/InMemorySorter.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/NoOutputs.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/suggest/fst/FSTCompletionBuilder must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder () {
 @public
  /*!
   @brief The number of separate buckets for weights (discretization).The more
  buckets, the more fine-grained term weights (priorities) can be assigned.
   The speed of lookup will not decrease for prefixes which have
  highly-weighted completions (because these are filled-in first), but will
  decrease significantly for low-weighted terms (but these should be
  infrequent, so it is all right).  
 <p>
  The number of buckets must be within [1, 255] range.
   */
  jint buckets_;
  /*!
   @brief FST construction require re-sorting the input.This is the class that
  collects all the input entries, their weights and then provides sorted
  order.
   */
  id<OrgApacheLuceneSearchSuggestFstBytesRefSorter> sorter_;
  /*!
   @brief Scratch buffer for <code>add(BytesRef, int)</code>.
   */
  OrgApacheLuceneUtilBytesRefBuilder *scratch_;
  /*!
   @brief Max tail sharing length.
   */
  jint shareMaxTailLength_;
}

/*!
 @brief Builds the final automaton from a list of entries.
 */
- (OrgApacheLuceneUtilFstFST *)buildAutomatonWithOrgApacheLuceneSearchSuggestFstBytesRefSorter:(id<OrgApacheLuceneSearchSuggestFstBytesRefSorter>)sorter;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder, sorter_, id<OrgApacheLuceneSearchSuggestFstBytesRefSorter>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder, scratch_, OrgApacheLuceneUtilBytesRefBuilder *)

__attribute__((unused)) static OrgApacheLuceneUtilFstFST *OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_buildAutomatonWithOrgApacheLuceneSearchSuggestFstBytesRefSorter_(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder *self, id<OrgApacheLuceneSearchSuggestFstBytesRefSorter> sorter);

@implementation OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder

+ (jint)DEFAULT_BUCKETS {
  return OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_DEFAULT_BUCKETS;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)buckets
withOrgApacheLuceneSearchSuggestFstBytesRefSorter:(id<OrgApacheLuceneSearchSuggestFstBytesRefSorter>)sorter
                    withInt:(jint)shareMaxTailLength {
  OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_initWithInt_withOrgApacheLuceneSearchSuggestFstBytesRefSorter_withInt_(self, buckets, sorter, shareMaxTailLength);
  return self;
}

- (void)addWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)utf8
                                   withInt:(jint)bucket {
  if (bucket < 0 || bucket >= buckets_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Bucket outside of the allowed range [0, ", buckets_, @"): ", bucket));
  }
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(scratch_)) growWithInt:((OrgApacheLuceneUtilBytesRef *) nil_chk(utf8))->length_ + 10];
  [scratch_ clear];
  [scratch_ appendWithByte:(jbyte) bucket];
  [scratch_ appendWithOrgApacheLuceneUtilBytesRef:utf8];
  [((id<OrgApacheLuceneSearchSuggestFstBytesRefSorter>) nil_chk(sorter_)) addWithOrgApacheLuceneUtilBytesRef:[scratch_ get]];
}

- (OrgApacheLuceneSearchSuggestFstFSTCompletion *)build {
  JreStrongAssign(&self->automaton_, OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_buildAutomatonWithOrgApacheLuceneSearchSuggestFstBytesRefSorter_(self, sorter_));
  if ([JavaIoCloseable_class_() isInstance:sorter_]) {
    [((id<JavaIoCloseable>) nil_chk(((id<JavaIoCloseable>) cast_check(sorter_, JavaIoCloseable_class_())))) close];
  }
  return create_OrgApacheLuceneSearchSuggestFstFSTCompletion_initWithOrgApacheLuceneUtilFstFST_(automaton_);
}

- (OrgApacheLuceneUtilFstFST *)buildAutomatonWithOrgApacheLuceneSearchSuggestFstBytesRefSorter:(id<OrgApacheLuceneSearchSuggestFstBytesRefSorter>)sorter {
  return OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_buildAutomatonWithOrgApacheLuceneSearchSuggestFstBytesRefSorter_(self, sorter);
}

- (void)dealloc {
  RELEASE_(automaton_);
  RELEASE_(sorter_);
  RELEASE_(scratch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSuggestFstFSTCompletion;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST;", 0x2, 4, 5, 3, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withOrgApacheLuceneSearchSuggestFstBytesRefSorter:withInt:);
  methods[2].selector = @selector(addWithOrgApacheLuceneUtilBytesRef:withInt:);
  methods[3].selector = @selector(build);
  methods[4].selector = @selector(buildAutomatonWithOrgApacheLuceneSearchSuggestFstBytesRefSorter:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BUCKETS", "I", .constantValue.asInt = OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_DEFAULT_BUCKETS, 0x19, -1, -1, -1, -1 },
    { "buckets_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "automaton_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
    { "sorter_", "LOrgApacheLuceneSearchSuggestFstBytesRefSorter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratch_", "LOrgApacheLuceneUtilBytesRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "shareMaxTailLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgApacheLuceneSearchSuggestFstBytesRefSorter;I", "add", "LOrgApacheLuceneUtilBytesRef;I", "LJavaIoIOException;", "buildAutomaton", "LOrgApacheLuceneSearchSuggestFstBytesRefSorter;", "(Lorg/apache/lucene/search/suggest/fst/BytesRefSorter;)Lorg/apache/lucene/util/fst/FST<Ljava/lang/Object;>;", "Lorg/apache/lucene/util/fst/FST<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder = { "FSTCompletionBuilder", "org.apache.lucene.search.suggest.fst", ptrTable, methods, fields, 7, 0x1, 5, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder;
}

@end

void OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_init(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder *self) {
  OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_initWithInt_withOrgApacheLuceneSearchSuggestFstBytesRefSorter_withInt_(self, OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_DEFAULT_BUCKETS, create_OrgApacheLuceneSearchSuggestInMemorySorter_initWithJavaUtilComparator_(OrgApacheLuceneUtilBytesRef_getUTF8SortedAsUnicodeComparator()), JavaLangInteger_MAX_VALUE);
}

OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder *new_OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder, init)
}

OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder *create_OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder, init)
}

void OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_initWithInt_withOrgApacheLuceneSearchSuggestFstBytesRefSorter_withInt_(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder *self, jint buckets, id<OrgApacheLuceneSearchSuggestFstBytesRefSorter> sorter, jint shareMaxTailLength) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->scratch_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  if (buckets < 1 || buckets > 255) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Buckets must be >= 1 and <= 255: ", buckets));
  }
  if (sorter == nil) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"BytesRefSorter must not be null.");
  JreStrongAssign(&self->sorter_, sorter);
  self->buckets_ = buckets;
  self->shareMaxTailLength_ = shareMaxTailLength;
}

OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder *new_OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_initWithInt_withOrgApacheLuceneSearchSuggestFstBytesRefSorter_withInt_(jint buckets, id<OrgApacheLuceneSearchSuggestFstBytesRefSorter> sorter, jint shareMaxTailLength) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder, initWithInt_withOrgApacheLuceneSearchSuggestFstBytesRefSorter_withInt_, buckets, sorter, shareMaxTailLength)
}

OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder *create_OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_initWithInt_withOrgApacheLuceneSearchSuggestFstBytesRefSorter_withInt_(jint buckets, id<OrgApacheLuceneSearchSuggestFstBytesRefSorter> sorter, jint shareMaxTailLength) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder, initWithInt_withOrgApacheLuceneSearchSuggestFstBytesRefSorter_withInt_, buckets, sorter, shareMaxTailLength)
}

OrgApacheLuceneUtilFstFST *OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder_buildAutomatonWithOrgApacheLuceneSearchSuggestFstBytesRefSorter_(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder *self, id<OrgApacheLuceneSearchSuggestFstBytesRefSorter> sorter) {
  OrgApacheLuceneUtilFstOutputs *outputs = OrgApacheLuceneUtilFstNoOutputs_getSingleton();
  id empty = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs)) getNoOutput];
  OrgApacheLuceneUtilFstBuilder *builder = create_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withInt_withInt_withBoolean_withBoolean_withInt_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withBoolean_withInt_(JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1), 0, 0, true, true, self->shareMaxTailLength_, outputs, false, OrgApacheLuceneUtilPackedPackedInts_DEFAULT, true, 15);
  OrgApacheLuceneUtilBytesRefBuilder *scratch = create_OrgApacheLuceneUtilBytesRefBuilder_init();
  OrgApacheLuceneUtilBytesRef *entry_;
  OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef = create_OrgApacheLuceneUtilIntsRefBuilder_init();
  jint count = 0;
  id<OrgApacheLuceneUtilBytesRefIterator> iter = JreRetainedLocalValue([((id<OrgApacheLuceneSearchSuggestFstBytesRefSorter>) nil_chk(sorter)) iterator]);
  while ((entry_ = [((id<OrgApacheLuceneUtilBytesRefIterator>) nil_chk(iter)) next]) != nil) {
    count++;
    if ([((OrgApacheLuceneUtilBytesRef *) nil_chk([scratch get])) compareToWithId:entry_] != 0) {
      [builder addWithOrgApacheLuceneUtilIntsRef:OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(entry_, scratchIntsRef) withId:empty];
      [scratch copyBytesWithOrgApacheLuceneUtilBytesRef:entry_];
    }
  }
  return count == 0 ? nil : [builder finish];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSuggestFstFSTCompletionBuilder)
