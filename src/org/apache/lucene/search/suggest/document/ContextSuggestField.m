//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/suggest/document/ContextSuggestField.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/search/suggest/document/CompletionTokenStream.h"
#include "org/apache/lucene/search/suggest/document/ContextSuggestField.h"
#include "org/apache/lucene/search/suggest/document/SuggestField.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/suggest/document/ContextSuggestField must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchSuggestDocumentContextSuggestField () {
 @public
  id<JavaUtilSet> contexts_;
}

- (void)validateWithJavaLangCharSequence:(id<JavaLangCharSequence>)value;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestDocumentContextSuggestField, contexts_, id<JavaUtilSet>)

__attribute__((unused)) static void OrgApacheLuceneSearchSuggestDocumentContextSuggestField_validateWithJavaLangCharSequence_(OrgApacheLuceneSearchSuggestDocumentContextSuggestField *self, id<JavaLangCharSequence> value);

/*!
 @brief The <code>PrefixTokenFilter</code> wraps a <code>TokenStream</code> and adds a set
  prefixes ahead.The position attribute will not be incremented for the prefixes.
 */
@interface OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter : OrgApacheLuceneAnalysisTokenFilter {
 @public
  jchar separator_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAttr_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posAttr_;
  id<JavaLangIterable> prefixes_;
  id<JavaUtilIterator> currentPrefix_;
}

/*!
 @brief Create a new <code>PrefixTokenFilter</code>
 @param input<code>TokenStream</code>  to wrap
 @param separator Character used separate prefixes from other tokens
 @param prefixes<code>Iterable</code>  of <code>CharSequence</code>  which keeps all prefixes
 */
- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                  withChar:(jchar)separator
                                      withJavaLangIterable:(id<JavaLangIterable>)prefixes;

- (jboolean)incrementToken;

- (void)reset;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter, termAttr_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter, posAttr_, id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter, prefixes_, id<JavaLangIterable>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter, currentPrefix_, id<JavaUtilIterator>)

__attribute__((unused)) static void OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jchar separator, id<JavaLangIterable> prefixes);

__attribute__((unused)) static OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter *new_OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_(OrgApacheLuceneAnalysisTokenStream *input, jchar separator, id<JavaLangIterable> prefixes) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter *create_OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_(OrgApacheLuceneAnalysisTokenStream *input, jchar separator, id<JavaLangIterable> prefixes);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter)

@implementation OrgApacheLuceneSearchSuggestDocumentContextSuggestField

+ (jint)CONTEXT_SEPARATOR {
  return OrgApacheLuceneSearchSuggestDocumentContextSuggestField_CONTEXT_SEPARATOR;
}

+ (jbyte)TYPE {
  return OrgApacheLuceneSearchSuggestDocumentContextSuggestField_TYPE;
}

- (instancetype)initWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                         withInt:(jint)weight
   withJavaLangCharSequenceArray:(IOSObjectArray *)contexts {
  OrgApacheLuceneSearchSuggestDocumentContextSuggestField_initWithNSString_withNSString_withInt_withJavaLangCharSequenceArray_(self, name, value, weight, contexts);
  return self;
}

- (id<JavaLangIterable>)contexts {
  return contexts_;
}

- (OrgApacheLuceneSearchSuggestDocumentCompletionTokenStream *)wrapTokenStreamWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)stream {
  for (id<JavaLangCharSequence> __strong context in nil_chk([self contexts])) {
    OrgApacheLuceneSearchSuggestDocumentContextSuggestField_validateWithJavaLangCharSequence_(self, context);
  }
  OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter *prefixTokenFilter = create_OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_(stream, (jchar) OrgApacheLuceneSearchSuggestDocumentContextSuggestField_CONTEXT_SEPARATOR, [self contexts]);
  OrgApacheLuceneSearchSuggestDocumentCompletionTokenStream *completionTokenStream;
  if ([stream isKindOfClass:[OrgApacheLuceneSearchSuggestDocumentCompletionTokenStream class]]) {
    completionTokenStream = (OrgApacheLuceneSearchSuggestDocumentCompletionTokenStream *) stream;
    completionTokenStream = create_OrgApacheLuceneSearchSuggestDocumentCompletionTokenStream_initWithOrgApacheLuceneAnalysisTokenStream_withBoolean_withBoolean_withInt_(prefixTokenFilter, ((OrgApacheLuceneSearchSuggestDocumentCompletionTokenStream *) nil_chk(completionTokenStream))->preserveSep_, completionTokenStream->preservePositionIncrements_, completionTokenStream->maxGraphExpansions_);
  }
  else {
    completionTokenStream = create_OrgApacheLuceneSearchSuggestDocumentCompletionTokenStream_initWithOrgApacheLuceneAnalysisTokenStream_(prefixTokenFilter);
  }
  return completionTokenStream;
}

- (jbyte)type {
  return OrgApacheLuceneSearchSuggestDocumentContextSuggestField_TYPE;
}

- (void)validateWithJavaLangCharSequence:(id<JavaLangCharSequence>)value {
  OrgApacheLuceneSearchSuggestDocumentContextSuggestField_validateWithJavaLangCharSequence_(self, value);
}

- (void)dealloc {
  RELEASE_(contexts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangIterable;", 0x4, -1, -1, -1, 1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSuggestDocumentCompletionTokenStream;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "B", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:withInt:withJavaLangCharSequenceArray:);
  methods[1].selector = @selector(contexts);
  methods[2].selector = @selector(wrapTokenStreamWithOrgApacheLuceneAnalysisTokenStream:);
  methods[3].selector = @selector(type);
  methods[4].selector = @selector(validateWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONTEXT_SEPARATOR", "I", .constantValue.asInt = OrgApacheLuceneSearchSuggestDocumentContextSuggestField_CONTEXT_SEPARATOR, 0x19, -1, -1, -1, -1 },
    { "TYPE", "B", .constantValue.asChar = OrgApacheLuceneSearchSuggestDocumentContextSuggestField_TYPE, 0x18, -1, -1, -1, -1 },
    { "contexts_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;I[LJavaLangCharSequence;", "()Ljava/lang/Iterable<Ljava/lang/CharSequence;>;", "wrapTokenStream", "LOrgApacheLuceneAnalysisTokenStream;", "validate", "LJavaLangCharSequence;", "Ljava/util/Set<Ljava/lang/CharSequence;>;", "LOrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSuggestDocumentContextSuggestField = { "ContextSuggestField", "org.apache.lucene.search.suggest.document", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, 7, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSuggestDocumentContextSuggestField;
}

@end

void OrgApacheLuceneSearchSuggestDocumentContextSuggestField_initWithNSString_withNSString_withInt_withJavaLangCharSequenceArray_(OrgApacheLuceneSearchSuggestDocumentContextSuggestField *self, NSString *name, NSString *value, jint weight, IOSObjectArray *contexts) {
  OrgApacheLuceneSearchSuggestDocumentSuggestField_initWithNSString_withNSString_withInt_(self, name, value, weight);
  OrgApacheLuceneSearchSuggestDocumentContextSuggestField_validateWithJavaLangCharSequence_(self, value);
  JreStrongAssignAndConsume(&self->contexts_, new_JavaUtilHashSet_initWithInt_((contexts != nil) ? ((IOSObjectArray *) nil_chk(contexts))->size_ : 0));
  if (contexts != nil) {
    JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(self->contexts_, contexts);
  }
}

OrgApacheLuceneSearchSuggestDocumentContextSuggestField *new_OrgApacheLuceneSearchSuggestDocumentContextSuggestField_initWithNSString_withNSString_withInt_withJavaLangCharSequenceArray_(NSString *name, NSString *value, jint weight, IOSObjectArray *contexts) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSuggestDocumentContextSuggestField, initWithNSString_withNSString_withInt_withJavaLangCharSequenceArray_, name, value, weight, contexts)
}

OrgApacheLuceneSearchSuggestDocumentContextSuggestField *create_OrgApacheLuceneSearchSuggestDocumentContextSuggestField_initWithNSString_withNSString_withInt_withJavaLangCharSequenceArray_(NSString *name, NSString *value, jint weight, IOSObjectArray *contexts) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSuggestDocumentContextSuggestField, initWithNSString_withNSString_withInt_withJavaLangCharSequenceArray_, name, value, weight, contexts)
}

void OrgApacheLuceneSearchSuggestDocumentContextSuggestField_validateWithJavaLangCharSequence_(OrgApacheLuceneSearchSuggestDocumentContextSuggestField *self, id<JavaLangCharSequence> value) {
  for (jint i = 0; i < [((id<JavaLangCharSequence>) nil_chk(value)) java_length]; i++) {
    if (OrgApacheLuceneSearchSuggestDocumentContextSuggestField_CONTEXT_SEPARATOR == [value charAtWithInt:i]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$$I$", @"Illegal value [", value, @"] UTF-16 codepoint [0x", JavaLangInteger_toHexStringWithInt_((jint) [value charAtWithInt:i]), @"] at position ", i, @" is a reserved character"));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSuggestDocumentContextSuggestField)

@implementation OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                  withChar:(jchar)separator
                                      withJavaLangIterable:(id<JavaLangIterable>)prefixes {
  OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_(self, input, separator, prefixes);
  return self;
}

- (jboolean)incrementToken {
  if (currentPrefix_ != nil) {
    if (![currentPrefix_ hasNext]) {
      return [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken];
    }
    else {
      [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posAttr_)) setPositionIncrementWithInt:0];
    }
  }
  else {
    JreStrongAssign(&currentPrefix_, [((id<JavaLangIterable>) nil_chk(prefixes_)) iterator]);
    [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAttr_)) setEmpty];
    [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posAttr_)) setPositionIncrementWithInt:1];
  }
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAttr_)) setEmpty];
  if ([((id<JavaUtilIterator>) nil_chk(currentPrefix_)) hasNext]) {
    [termAttr_ appendWithJavaLangCharSequence:[((id<JavaUtilIterator>) nil_chk(currentPrefix_)) next]];
  }
  [termAttr_ appendWithChar:separator_];
  return true;
}

- (void)reset {
  [super reset];
  JreStrongAssign(&currentPrefix_, nil);
}

- (void)dealloc {
  RELEASE_(termAttr_);
  RELEASE_(posAttr_);
  RELEASE_(prefixes_);
  RELEASE_(currentPrefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withChar:withJavaLangIterable:);
  methods[1].selector = @selector(incrementToken);
  methods[2].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "separator_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "termAttr_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posAttr_", "LOrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prefixes_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "currentPrefix_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;CLJavaLangIterable;", "(Lorg/apache/lucene/analysis/TokenStream;CLjava/lang/Iterable<Ljava/lang/CharSequence;>;)V", "LJavaIoIOException;", "Ljava/lang/Iterable<Ljava/lang/CharSequence;>;", "Ljava/util/Iterator<Ljava/lang/CharSequence;>;", "LOrgApacheLuceneSearchSuggestDocumentContextSuggestField;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter = { "PrefixTokenFilter", "org.apache.lucene.search.suggest.document", ptrTable, methods, fields, 7, 0x1a, 3, 5, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter;
}

@end

void OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jchar separator, id<JavaLangIterable> prefixes) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssign(&self->termAttr_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->posAttr_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  JreStrongAssign(&self->prefixes_, prefixes);
  JreStrongAssign(&self->currentPrefix_, nil);
  self->separator_ = separator;
}

OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter *new_OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_(OrgApacheLuceneAnalysisTokenStream *input, jchar separator, id<JavaLangIterable> prefixes) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_, input, separator, prefixes)
}

OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter *create_OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_(OrgApacheLuceneAnalysisTokenStream *input, jchar separator, id<JavaLangIterable> prefixes) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_withChar_withJavaLangIterable_, input, separator, prefixes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSuggestDocumentContextSuggestField_PrefixTokenFilter)
