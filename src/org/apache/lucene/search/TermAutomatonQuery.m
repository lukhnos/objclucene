//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/TermAutomatonQuery.h"
#include "org/apache/lucene/search/TermAutomatonScorer.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/Operations.h"
#include "org/apache/lucene/util/automaton/Transition.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/TermAutomatonQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchTermAutomatonQuery () {
 @public
  NSString *field_;
  OrgApacheLuceneUtilAutomatonAutomaton_Builder *builder_;
  id<JavaUtilMap> termToID_;
  id<JavaUtilMap> idToTerm_;
  jint anyTermID_;
}

- (jint)getTermIDWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery, builder_, OrgApacheLuceneUtilAutomatonAutomaton_Builder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery, termToID_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery, idToTerm_, id<JavaUtilMap>)

__attribute__((unused)) static jint OrgApacheLuceneSearchTermAutomatonQuery_getTermIDWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneSearchTermAutomatonQuery *self, OrgApacheLuceneUtilBytesRef *term);

@interface OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight () {
 @public
  OrgApacheLuceneSearchTermAutomatonQuery *this$0_;
  OrgApacheLuceneSearchIndexSearcher *searcher_;
  id<JavaUtilMap> termStates_;
  OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *stats_;
  OrgApacheLuceneSearchSimilaritiesSimilarity *similarity_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight, searcher_, OrgApacheLuceneSearchIndexSearcher *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight, termStates_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight, stats_, OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight, similarity_, OrgApacheLuceneSearchSimilaritiesSimilarity *)

@implementation OrgApacheLuceneSearchTermAutomatonQuery

- (instancetype)initWithNSString:(NSString *)field {
  OrgApacheLuceneSearchTermAutomatonQuery_initWithNSString_(self, field);
  return self;
}

- (jint)createState {
  return [((OrgApacheLuceneUtilAutomatonAutomaton_Builder *) nil_chk(builder_)) createState];
}

- (void)setAcceptWithInt:(jint)state
             withBoolean:(jboolean)accept {
  [((OrgApacheLuceneUtilAutomatonAutomaton_Builder *) nil_chk(builder_)) setAcceptWithInt:state withBoolean:accept];
}

- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                withNSString:(NSString *)term {
  [self addTransitionWithInt:source withInt:dest withOrgApacheLuceneUtilBytesRef:create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(term)];
}

- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  if (term == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"term should not be null");
  }
  [((OrgApacheLuceneUtilAutomatonAutomaton_Builder *) nil_chk(builder_)) addTransitionWithInt:source withInt:dest withInt:OrgApacheLuceneSearchTermAutomatonQuery_getTermIDWithOrgApacheLuceneUtilBytesRef_(self, term)];
}

- (void)addAnyTransitionWithInt:(jint)source
                        withInt:(jint)dest {
  [((OrgApacheLuceneUtilAutomatonAutomaton_Builder *) nil_chk(builder_)) addTransitionWithInt:source withInt:dest withInt:OrgApacheLuceneSearchTermAutomatonQuery_getTermIDWithOrgApacheLuceneUtilBytesRef_(self, nil)];
}

- (void)finish {
  [self finishWithInt:OrgApacheLuceneUtilAutomatonOperations_DEFAULT_MAX_DETERMINIZED_STATES];
}

- (void)finishWithInt:(jint)maxDeterminizedStates {
  OrgApacheLuceneUtilAutomatonAutomaton *automaton = JreRetainedLocalValue([((OrgApacheLuceneUtilAutomatonAutomaton_Builder *) nil_chk(builder_)) finish]);
  OrgApacheLuceneUtilAutomatonTransition *t = create_OrgApacheLuceneUtilAutomatonTransition_init();
  if (anyTermID_ != -1) {
    jint count = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(automaton)) initTransitionWithInt:0 withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint i = 0; i < count; i++) {
      [automaton getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      if (anyTermID_ >= t->min_ && anyTermID_ <= t->max_) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(@"automaton cannot lead with an ANY transition");
      }
    }
    jint numStates = [automaton getNumStates];
    for (jint i = 0; i < numStates; i++) {
      count = [automaton initTransitionWithInt:i withOrgApacheLuceneUtilAutomatonTransition:t];
      for (jint j = 0; j < count; j++) {
        [automaton getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
        if ([automaton isAcceptWithInt:t->dest_] && anyTermID_ >= t->min_ && anyTermID_ <= t->max_) {
          @throw create_JavaLangIllegalStateException_initWithNSString_(@"automaton cannot end with an ANY transition");
        }
      }
    }
    jint termCount = [((id<JavaUtilMap>) nil_chk(termToID_)) size];
    OrgApacheLuceneUtilAutomatonAutomaton *newAutomaton = create_OrgApacheLuceneUtilAutomatonAutomaton_init();
    for (jint i = 0; i < numStates; i++) {
      [newAutomaton createState];
      [newAutomaton setAcceptWithInt:i withBoolean:[automaton isAcceptWithInt:i]];
    }
    for (jint i = 0; i < numStates; i++) {
      count = [automaton initTransitionWithInt:i withOrgApacheLuceneUtilAutomatonTransition:t];
      for (jint j = 0; j < count; j++) {
        [automaton getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
        jint min;
        jint max;
        if (t->min_ <= anyTermID_ && anyTermID_ <= t->max_) {
          min = 0;
          max = termCount - 1;
        }
        else {
          min = t->min_;
          max = t->max_;
        }
        [newAutomaton addTransitionWithInt:t->source_ withInt:t->dest_ withInt:min withInt:max];
      }
    }
    [newAutomaton finishState];
    automaton = newAutomaton;
  }
  JreStrongAssign(&det_, OrgApacheLuceneUtilAutomatonOperations_removeDeadStatesWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonOperations_determinizeWithOrgApacheLuceneUtilAutomatonAutomaton_withInt_(automaton, maxDeterminizedStates)));
}

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores {
  OrgApacheLuceneIndexIndexReaderContext *context = JreRetainedLocalValue([((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher)) getTopReaderContext]);
  id<JavaUtilMap> termStates = create_JavaUtilHashMap_init();
  for (id<JavaUtilMap_Entry> __strong ent in nil_chk([((id<JavaUtilMap>) nil_chk(termToID_)) entrySet])) {
    if ([((id<JavaUtilMap_Entry>) nil_chk(ent)) getKey] != nil) {
      [termStates putWithId:[ent getValue] withId:OrgApacheLuceneIndexTermContext_buildWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTerm_(context, create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(field_, [ent getKey]))];
    }
  }
  return create_OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, det_, searcher, termStates);
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithNSString:@"TermAutomatonQuery(field="];
  [sb appendWithNSString:self->field_];
  if (det_ != nil) {
    [sb appendWithNSString:@" numStates="];
    [sb appendWithInt:[((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(det_)) getNumStates]];
  }
  [sb appendWithChar:')'];
  return [sb description];
}

- (jint)getTermIDWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  return OrgApacheLuceneSearchTermAutomatonQuery_getTermIDWithOrgApacheLuceneUtilBytesRef_(self, term);
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgApacheLuceneSearchTermAutomatonQuery class]])) {
    return false;
  }
  OrgApacheLuceneSearchTermAutomatonQuery *other = (OrgApacheLuceneSearchTermAutomatonQuery *) cast_chk(o, [OrgApacheLuceneSearchTermAutomatonQuery class]);
  if (det_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"please call finish first");
  }
  if (((OrgApacheLuceneSearchTermAutomatonQuery *) nil_chk(other))->det_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"please call other.finish first");
  }
  return [super isEqual:o] && [((id<JavaUtilMap>) nil_chk(self->termToID_)) isEqual:other->termToID_] && OrgApacheLuceneUtilAutomatonOperations_sameLanguageWithOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonAutomaton_(det_, other->det_);
}

- (NSUInteger)hash {
  if (det_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"please call finish first");
  }
  return ((jint) [super hash]) ^ ((jint) [((id<JavaUtilMap>) nil_chk(termToID_)) hash]) + ((jint) [((NSString *) nil_chk([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(det_)) toDot])) hash]);
}

- (NSString *)toDot {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  [b appendWithNSString:@"digraph Automaton {\n"];
  [b appendWithNSString:@"  rankdir = LR\n"];
  jint numStates = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(det_)) getNumStates];
  if (numStates > 0) {
    [b appendWithNSString:@"  initial [shape=plaintext,label=\"0\"]\n"];
    [b appendWithNSString:@"  initial -> 0\n"];
  }
  OrgApacheLuceneUtilAutomatonTransition *t = create_OrgApacheLuceneUtilAutomatonTransition_init();
  for (jint state = 0; state < numStates; state++) {
    [b appendWithNSString:@"  "];
    [b appendWithInt:state];
    if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(det_)) isAcceptWithInt:state]) {
      [b appendWithNSString:JreStrcat("$I$", @" [shape=doublecircle,label=\"", state, @"\"]\n")];
    }
    else {
      [b appendWithNSString:JreStrcat("$I$", @" [shape=circle,label=\"", state, @"\"]\n")];
    }
    jint numTransitions = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(det_)) initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:t];
    for (jint i = 0; i < numTransitions; i++) {
      [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(det_)) getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:t];
      JreAssert(t->max_ >= t->min_, @"org/apache/lucene/search/TermAutomatonQuery.java:292 condition failed: assert t.max >= t.min;");
      for (jint j = t->min_; j <= t->max_; j++) {
        [b appendWithNSString:@"  "];
        [b appendWithInt:state];
        [b appendWithNSString:@" -> "];
        [b appendWithInt:t->dest_];
        [b appendWithNSString:@" [label=\""];
        if (j == anyTermID_) {
          [b appendWithChar:'*'];
        }
        else {
          [b appendWithNSString:[((OrgApacheLuceneUtilBytesRef *) nil_chk([((id<JavaUtilMap>) nil_chk(idToTerm_)) getWithId:JavaLangInteger_valueOfWithInt_(j)])) utf8ToString]];
        }
        [b appendWithNSString:@"\"]\n"];
      }
    }
  }
  [b appendWithChar:'}'];
  return [b description];
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(builder_);
  RELEASE_(det_);
  RELEASE_(termToID_);
  RELEASE_(idToTerm_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchWeight;", 0x1, 10, 11, 12, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(createState);
  methods[2].selector = @selector(setAcceptWithInt:withBoolean:);
  methods[3].selector = @selector(addTransitionWithInt:withInt:withNSString:);
  methods[4].selector = @selector(addTransitionWithInt:withInt:withOrgApacheLuceneUtilBytesRef:);
  methods[5].selector = @selector(addAnyTransitionWithInt:withInt:);
  methods[6].selector = @selector(finish);
  methods[7].selector = @selector(finishWithInt:);
  methods[8].selector = @selector(createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  methods[9].selector = @selector(toStringWithNSString:);
  methods[10].selector = @selector(getTermIDWithOrgApacheLuceneUtilBytesRef:);
  methods[11].selector = @selector(isEqual:);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(toDot);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "builder_", "LOrgApacheLuceneUtilAutomatonAutomaton_Builder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "det_", "LOrgApacheLuceneUtilAutomatonAutomaton;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "termToID_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "idToTerm_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
    { "anyTermID_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setAccept", "IZ", "addTransition", "IILNSString;", "IILOrgApacheLuceneUtilBytesRef;", "addAnyTransition", "II", "finish", "I", "createWeight", "LOrgApacheLuceneSearchIndexSearcher;Z", "LJavaIoIOException;", "toString", "getTermID", "LOrgApacheLuceneUtilBytesRef;", "equals", "LNSObject;", "hashCode", "Ljava/util/Map<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/Integer;Lorg/apache/lucene/util/BytesRef;>;", "LOrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer;LOrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchTermAutomatonQuery = { "TermAutomatonQuery", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 14, 6, -1, 21, -1, -1, -1 };
  return &_OrgApacheLuceneSearchTermAutomatonQuery;
}

@end

void OrgApacheLuceneSearchTermAutomatonQuery_initWithNSString_(OrgApacheLuceneSearchTermAutomatonQuery *self, NSString *field) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssignAndConsume(&self->termToID_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->idToTerm_, new_JavaUtilHashMap_init());
  self->anyTermID_ = -1;
  JreStrongAssign(&self->field_, field);
  JreStrongAssignAndConsume(&self->builder_, new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init());
}

OrgApacheLuceneSearchTermAutomatonQuery *new_OrgApacheLuceneSearchTermAutomatonQuery_initWithNSString_(NSString *field) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchTermAutomatonQuery, initWithNSString_, field)
}

OrgApacheLuceneSearchTermAutomatonQuery *create_OrgApacheLuceneSearchTermAutomatonQuery_initWithNSString_(NSString *field) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchTermAutomatonQuery, initWithNSString_, field)
}

jint OrgApacheLuceneSearchTermAutomatonQuery_getTermIDWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneSearchTermAutomatonQuery *self, OrgApacheLuceneUtilBytesRef *term) {
  JavaLangInteger *id_ = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(self->termToID_)) getWithId:term]);
  if (id_ == nil) {
    id_ = JavaLangInteger_valueOfWithInt_([self->termToID_ size]);
    if (term != nil) {
      term = OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(term);
    }
    [self->termToID_ putWithId:term withId:id_];
    [((id<JavaUtilMap>) nil_chk(self->idToTerm_)) putWithId:id_ withId:term];
    if (term == nil) {
      self->anyTermID_ = [id_ intValue];
    }
  }
  return [id_ intValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchTermAutomatonQuery)

@implementation OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer

- (instancetype)initWithInt:(jint)termID
withOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)posEnum {
  OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_initWithInt_withOrgApacheLuceneIndexPostingsEnum_(self, termID, posEnum);
  return self;
}

- (void)dealloc {
  RELEASE_(posEnum_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgApacheLuceneIndexPostingsEnum:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termID_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "posEnum_", "LOrgApacheLuceneIndexPostingsEnum;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "posLeft_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgApacheLuceneIndexPostingsEnum;", "LOrgApacheLuceneSearchTermAutomatonQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer = { "EnumAndScorer", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x8, 1, 4, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer;
}

@end

void OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_initWithInt_withOrgApacheLuceneIndexPostingsEnum_(OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer *self, jint termID, OrgApacheLuceneIndexPostingsEnum *posEnum) {
  NSObject_init(self);
  self->termID_ = termID;
  JreStrongAssign(&self->posEnum_, posEnum);
}

OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer *new_OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_initWithInt_withOrgApacheLuceneIndexPostingsEnum_(jint termID, OrgApacheLuceneIndexPostingsEnum *posEnum) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer, initWithInt_withOrgApacheLuceneIndexPostingsEnum_, termID, posEnum)
}

OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer *create_OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_initWithInt_withOrgApacheLuceneIndexPostingsEnum_(jint termID, OrgApacheLuceneIndexPostingsEnum *posEnum) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer, initWithInt_withOrgApacheLuceneIndexPostingsEnum_, termID, posEnum)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer)

@implementation OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight

- (instancetype)initWithOrgApacheLuceneSearchTermAutomatonQuery:(OrgApacheLuceneSearchTermAutomatonQuery *)outer$
                      withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                         withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                withJavaUtilMap:(id<JavaUtilMap>)termStates {
  OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, automaton, searcher, termStates);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  for (OrgApacheLuceneUtilBytesRef * __strong text in nil_chk([((id<JavaUtilMap>) nil_chk(this$0_->termToID_)) keySet])) {
    if (text != nil) {
      [((id<JavaUtilSet>) nil_chk(terms)) addWithId:create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(this$0_->field_, text)];
    }
  }
}

- (NSString *)description {
  return JreStrcat("$@C", @"weight(", this$0_, ')');
}

- (jfloat)getValueForNormalization {
  return [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) getValueForNormalization];
}

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost {
  [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) normalizeWithFloat:queryNorm withFloat:topLevelBoost];
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  IOSObjectArray *enums = [IOSObjectArray arrayWithLength:[((id<JavaUtilMap>) nil_chk(this$0_->idToTerm_)) size] type:OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_class_()];
  jboolean any = false;
  for (id<JavaUtilMap_Entry> __strong ent in nil_chk([((id<JavaUtilMap>) nil_chk(termStates_)) entrySet])) {
    OrgApacheLuceneIndexTermContext *termContext = JreRetainedLocalValue([((id<JavaUtilMap_Entry>) nil_chk(ent)) getValue]);
    JreAssert(JreObjectEqualsEquals(((OrgApacheLuceneIndexTermContext *) nil_chk(termContext))->topReaderContext_, OrgApacheLuceneIndexReaderUtil_getTopLevelContextWithOrgApacheLuceneIndexIndexReaderContext_(context)), JreStrcat("$@$@", @"The top-reader used to create Weight (", termContext->topReaderContext_, @") is not the same as the current reader's top-reader (", OrgApacheLuceneIndexReaderUtil_getTopLevelContextWithOrgApacheLuceneIndexIndexReaderContext_(context)));
    OrgApacheLuceneUtilBytesRef *term = JreRetainedLocalValue([this$0_->idToTerm_ getWithId:[ent getKey]]);
    OrgApacheLuceneIndexTermState *state = JreRetainedLocalValue([termContext getWithInt:((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context))->ord_]);
    if (state != nil) {
      OrgApacheLuceneIndexTermsEnum *termsEnum = JreRetainedLocalValue([((OrgApacheLuceneIndexTerms *) nil_chk([((OrgApacheLuceneIndexLeafReader *) nil_chk([context reader])) termsWithNSString:this$0_->field_])) iterator]);
      [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekExactWithOrgApacheLuceneUtilBytesRef:term withOrgApacheLuceneIndexTermState:state];
      IOSObjectArray_SetAndConsume(enums, [((JavaLangInteger *) nil_chk([ent getKey])) intValue], new_OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_initWithInt_withOrgApacheLuceneIndexPostingsEnum_([((JavaLangInteger *) nil_chk([ent getKey])) intValue], [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:nil withInt:OrgApacheLuceneIndexPostingsEnum_POSITIONS]));
      any = true;
    }
  }
  if (any) {
    return create_OrgApacheLuceneSearchTermAutomatonScorer_initPackagePrivateWithOrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_withOrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorerArray_withInt_withJavaUtilMap_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_(self, enums, this$0_->anyTermID_, this$0_->idToTerm_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context]);
  }
  else {
    return nil;
  }
}

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                               withInt:(jint)doc {
  return nil;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(searcher_);
  RELEASE_(automaton_);
  RELEASE_(termStates_);
  RELEASE_(stats_);
  RELEASE_(similarity_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchScorer;", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchExplanation;", 0x1, 11, 12, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchTermAutomatonQuery:withOrgApacheLuceneUtilAutomatonAutomaton:withOrgApacheLuceneSearchIndexSearcher:withJavaUtilMap:);
  methods[1].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(getValueForNormalization);
  methods[4].selector = @selector(normalizeWithFloat:withFloat:);
  methods[5].selector = @selector(scorerWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[6].selector = @selector(explainWithOrgApacheLuceneIndexLeafReaderContext:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchTermAutomatonQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "searcher_", "LOrgApacheLuceneSearchIndexSearcher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "automaton_", "LOrgApacheLuceneUtilAutomatonAutomaton;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "termStates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
    { "stats_", "LOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilaritiesSimilarity;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchTermAutomatonQuery;LOrgApacheLuceneUtilAutomatonAutomaton;LOrgApacheLuceneSearchIndexSearcher;LJavaUtilMap;", "LJavaIoIOException;", "(Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map<Ljava/lang/Integer;Lorg/apache/lucene/index/TermContext;>;)V", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "toString", "normalize", "FF", "scorer", "LOrgApacheLuceneIndexLeafReaderContext;", "explain", "LOrgApacheLuceneIndexLeafReaderContext;I", "Ljava/util/Map<Ljava/lang/Integer;Lorg/apache/lucene/index/TermContext;>;", "LOrgApacheLuceneSearchTermAutomatonQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight = { "TermAutomatonWeight", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x10, 7, 6, 14, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight;
}

@end

void OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight *self, OrgApacheLuceneSearchTermAutomatonQuery *outer$, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> termStates) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchWeight_initWithOrgApacheLuceneSearchQuery_(self, outer$);
  JreStrongAssign(&self->automaton_, automaton);
  JreStrongAssign(&self->searcher_, searcher);
  JreStrongAssign(&self->termStates_, termStates);
  JreStrongAssign(&self->similarity_, [((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher)) getSimilarityWithBoolean:true]);
  id<JavaUtilList> allTermStats = create_JavaUtilArrayList_init();
  for (id<JavaUtilMap_Entry> __strong ent in nil_chk([((id<JavaUtilMap>) nil_chk(outer$->idToTerm_)) entrySet])) {
    JavaLangInteger *termID = JreRetainedLocalValue([((id<JavaUtilMap_Entry>) nil_chk(ent)) getKey]);
    if ([ent getValue] != nil) {
      [allTermStats addWithId:[searcher termStatisticsWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(outer$->field_, [ent getValue]) withOrgApacheLuceneIndexTermContext:[((id<JavaUtilMap>) nil_chk(termStates)) getWithId:termID]]];
    }
  }
  JreStrongAssign(&self->stats_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(self->similarity_)) computeWeightWithFloat:[outer$ getBoost] withOrgApacheLuceneSearchCollectionStatistics:[searcher collectionStatisticsWithNSString:outer$->field_] withOrgApacheLuceneSearchTermStatisticsArray:[allTermStats toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[allTermStats size] type:OrgApacheLuceneSearchTermStatistics_class_()]]]);
}

OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight *new_OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchTermAutomatonQuery *outer$, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> termStates) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight, initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_, outer$, automaton, searcher, termStates)
}

OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight *create_OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchTermAutomatonQuery *outer$, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> termStates) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight, initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_, outer$, automaton, searcher, termStates)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight)
