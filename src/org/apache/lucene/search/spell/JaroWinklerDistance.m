//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/spell/JaroWinklerDistance.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/search/spell/JaroWinklerDistance.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spell/JaroWinklerDistance must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchSpellJaroWinklerDistance () {
 @public
  jfloat threshold_;
}

- (IOSIntArray *)matchesWithNSString:(NSString *)s1
                        withNSString:(NSString *)s2;

@end

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneSearchSpellJaroWinklerDistance_matchesWithNSString_withNSString_(OrgApacheLuceneSearchSpellJaroWinklerDistance *self, NSString *s1, NSString *s2);

@implementation OrgApacheLuceneSearchSpellJaroWinklerDistance

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchSpellJaroWinklerDistance_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSIntArray *)matchesWithNSString:(NSString *)s1
                        withNSString:(NSString *)s2 {
  return OrgApacheLuceneSearchSpellJaroWinklerDistance_matchesWithNSString_withNSString_(self, s1, s2);
}

- (jfloat)getDistanceWithNSString:(NSString *)s1
                     withNSString:(NSString *)s2 {
  IOSIntArray *mtp = OrgApacheLuceneSearchSpellJaroWinklerDistance_matchesWithNSString_withNSString_(self, s1, s2);
  jfloat m = IOSIntArray_Get(nil_chk(mtp), 0);
  if (m == 0) {
    return 0.0f;
  }
  jfloat j = ((m / [((NSString *) nil_chk(s1)) java_length] + m / [((NSString *) nil_chk(s2)) java_length] + (m - IOSIntArray_Get(mtp, 1)) / m)) / 3;
  jfloat jw = j < [self getThreshold] ? j : j + JavaLangMath_minWithFloat_withFloat_(0.1f, 1.0f / IOSIntArray_Get(mtp, 3)) * IOSIntArray_Get(mtp, 2) * (1 - j);
  return jw;
}

- (void)setThresholdWithFloat:(jfloat)threshold {
  self->threshold_ = threshold;
}

- (jfloat)getThreshold {
  return threshold_;
}

- (NSUInteger)hash {
  return 113 * JavaLangFloat_floatToIntBitsWithFloat_(threshold_) * ((jint) [[self java_getClass] hash]);
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (nil == obj || !JreObjectEqualsEquals([self java_getClass], [obj java_getClass])) return false;
  OrgApacheLuceneSearchSpellJaroWinklerDistance *o = (OrgApacheLuceneSearchSpellJaroWinklerDistance *) cast_chk(obj, [OrgApacheLuceneSearchSpellJaroWinklerDistance class]);
  return JavaLangFloat_floatToIntBitsWithFloat_(o->threshold_) == JavaLangFloat_floatToIntBitsWithFloat_(self->threshold_);
}

- (NSString *)description {
  return JreStrcat("$FC", @"jarowinkler(", threshold_, ')');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(matchesWithNSString:withNSString:);
  methods[2].selector = @selector(getDistanceWithNSString:withNSString:);
  methods[3].selector = @selector(setThresholdWithFloat:);
  methods[4].selector = @selector(getThreshold);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "threshold_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "matches", "LNSString;LNSString;", "getDistance", "setThreshold", "F", "hashCode", "equals", "LNSObject;", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellJaroWinklerDistance = { "JaroWinklerDistance", "org.apache.lucene.search.spell", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpellJaroWinklerDistance;
}

@end

void OrgApacheLuceneSearchSpellJaroWinklerDistance_init(OrgApacheLuceneSearchSpellJaroWinklerDistance *self) {
  NSObject_init(self);
  self->threshold_ = 0.7f;
}

OrgApacheLuceneSearchSpellJaroWinklerDistance *new_OrgApacheLuceneSearchSpellJaroWinklerDistance_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellJaroWinklerDistance, init)
}

OrgApacheLuceneSearchSpellJaroWinklerDistance *create_OrgApacheLuceneSearchSpellJaroWinklerDistance_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellJaroWinklerDistance, init)
}

IOSIntArray *OrgApacheLuceneSearchSpellJaroWinklerDistance_matchesWithNSString_withNSString_(OrgApacheLuceneSearchSpellJaroWinklerDistance *self, NSString *s1, NSString *s2) {
  NSString *max;
  NSString *min;
  if ([((NSString *) nil_chk(s1)) java_length] > [((NSString *) nil_chk(s2)) java_length]) {
    max = s1;
    min = s2;
  }
  else {
    max = s2;
    min = s1;
  }
  jint range = JavaLangMath_maxWithInt_withInt_(JreIntDiv([max java_length], 2) - 1, 0);
  IOSIntArray *matchIndexes = [IOSIntArray arrayWithLength:[min java_length]];
  JavaUtilArrays_fillWithIntArray_withInt_(matchIndexes, -1);
  IOSBooleanArray *matchFlags = [IOSBooleanArray arrayWithLength:[max java_length]];
  jint matches = 0;
  for (jint mi = 0; mi < [min java_length]; mi++) {
    jchar c1 = [min charAtWithInt:mi];
    for (jint xi = JavaLangMath_maxWithInt_withInt_(mi - range, 0), xn = JavaLangMath_minWithInt_withInt_(mi + range + 1, [max java_length]); xi < xn; xi++) {
      if (!IOSBooleanArray_Get(matchFlags, xi) && c1 == [max charAtWithInt:xi]) {
        *IOSIntArray_GetRef(matchIndexes, mi) = xi;
        *IOSBooleanArray_GetRef(matchFlags, xi) = true;
        matches++;
        break;
      }
    }
  }
  IOSCharArray *ms1 = [IOSCharArray arrayWithLength:matches];
  IOSCharArray *ms2 = [IOSCharArray arrayWithLength:matches];
  for (jint i = 0, si = 0; i < [min java_length]; i++) {
    if (IOSIntArray_Get(matchIndexes, i) != -1) {
      *IOSCharArray_GetRef(ms1, si) = [min charAtWithInt:i];
      si++;
    }
  }
  for (jint i = 0, si = 0; i < [max java_length]; i++) {
    if (IOSBooleanArray_Get(matchFlags, i)) {
      *IOSCharArray_GetRef(ms2, si) = [max charAtWithInt:i];
      si++;
    }
  }
  jint transpositions = 0;
  for (jint mi = 0; mi < ms1->size_; mi++) {
    if (IOSCharArray_Get(ms1, mi) != IOSCharArray_Get(ms2, mi)) {
      transpositions++;
    }
  }
  jint prefix = 0;
  for (jint mi = 0; mi < [min java_length]; mi++) {
    if ([s1 charAtWithInt:mi] == [s2 charAtWithInt:mi]) {
      prefix++;
    }
    else {
      break;
    }
  }
  return [IOSIntArray arrayWithInts:(jint[]){ matches, JreIntDiv(transpositions, 2), prefix, [max java_length] } count:4];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellJaroWinklerDistance)
