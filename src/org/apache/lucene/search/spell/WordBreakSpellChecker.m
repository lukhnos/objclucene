//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Comparator.h"
#include "java/util/PriorityQueue.h"
#include "java/util/Queue.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker.h"

@class OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper;
@class OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper;

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spell/WordBreakSpellChecker must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheLuceneSearchSpellWordBreakSpellChecker () {
 @public
  jint minSuggestionFrequency_;
  jint minBreakWordLength_;
  jint maxCombineWordLength_;
  jint maxChanges_;
  jint maxEvaluations_;
}

- (jint)generateBreakUpSuggestionsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                           withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                                                       withInt:(jint)numberBreaks
                                                       withInt:(jint)maxSuggestions
                                                       withInt:(jint)useMinSuggestionFrequency
                withOrgApacheLuceneSearchSpellSuggestWordArray:(IOSObjectArray *)prefix
                                             withJavaUtilQueue:(id<JavaUtilQueue>)suggestions
                                                       withInt:(jint)totalEvaluations
withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *)sortMethod;

- (IOSObjectArray *)newPrefixWithOrgApacheLuceneSearchSpellSuggestWordArray:(IOSObjectArray *)oldPrefix
                                  withOrgApacheLuceneSearchSpellSuggestWord:(OrgApacheLuceneSearchSpellSuggestWord *)append OBJC_METHOD_FAMILY_NONE;

- (IOSObjectArray *)newSuggestionWithOrgApacheLuceneSearchSpellSuggestWordArray:(IOSObjectArray *)prefix
                                      withOrgApacheLuceneSearchSpellSuggestWord:(OrgApacheLuceneSearchSpellSuggestWord *)append1
                                      withOrgApacheLuceneSearchSpellSuggestWord:(OrgApacheLuceneSearchSpellSuggestWord *)append2 OBJC_METHOD_FAMILY_NONE;

- (OrgApacheLuceneSearchSpellSuggestWord *)generateSuggestWordWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                                                                                     withNSString:(NSString *)fieldname
                                                                                     withNSString:(NSString *)text;

@end

__attribute__((unused)) static jint OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateBreakUpSuggestionsWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexIndexReader_withInt_withInt_withInt_withOrgApacheLuceneSearchSpellSuggestWordArray_withJavaUtilQueue_withInt_withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self, OrgApacheLuceneIndexTerm *term, OrgApacheLuceneIndexIndexReader *ir, jint numberBreaks, jint maxSuggestions, jint useMinSuggestionFrequency, IOSObjectArray *prefix, id<JavaUtilQueue> suggestions, jint totalEvaluations, OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *sortMethod);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchSpellWordBreakSpellChecker_newPrefixWithOrgApacheLuceneSearchSpellSuggestWordArray_withOrgApacheLuceneSearchSpellSuggestWord_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self, IOSObjectArray *oldPrefix, OrgApacheLuceneSearchSpellSuggestWord *append);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchSpellWordBreakSpellChecker_newSuggestionWithOrgApacheLuceneSearchSpellSuggestWordArray_withOrgApacheLuceneSearchSpellSuggestWord_withOrgApacheLuceneSearchSpellSuggestWord_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self, IOSObjectArray *prefix, OrgApacheLuceneSearchSpellSuggestWord *append1, OrgApacheLuceneSearchSpellSuggestWord *append2);

__attribute__((unused)) static OrgApacheLuceneSearchSpellSuggestWord *OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateSuggestWordWithOrgApacheLuceneIndexIndexReader_withNSString_withNSString_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self, OrgApacheLuceneIndexIndexReader *ir, NSString *fieldname, NSString *text);

__attribute__((unused)) static void OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_initWithNSString_withInt_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *self, NSString *__name, jint __ordinal);

@interface OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator : NSObject < JavaUtilComparator >

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$;

- (jint)compareWithId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *)o1
               withId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator)

__attribute__((unused)) static void OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$);

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator)

@interface OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator : NSObject < JavaUtilComparator >

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$;

- (jint)compareWithId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *)o1
               withId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator)

__attribute__((unused)) static void OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$);

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator)

@interface OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator : NSObject < JavaUtilComparator >

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$;

- (jint)compareWithId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *)o1
               withId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator)

__attribute__((unused)) static void OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$);

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator)

@interface OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper : NSObject {
 @public
  IOSObjectArray *suggestWords_;
  jint freqMax_;
  jint freqSum_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$
                         withOrgApacheLuceneSearchSpellSuggestWordArray:(IOSObjectArray *)suggestWords;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper, suggestWords_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, IOSObjectArray *suggestWords);

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, IOSObjectArray *suggestWords) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, IOSObjectArray *suggestWords);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper)

@interface OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper : NSObject {
 @public
  OrgApacheLuceneSearchSpellCombineSuggestion *combineSuggestion_;
  jint numCombinations_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$
                        withOrgApacheLuceneSearchSpellCombineSuggestion:(OrgApacheLuceneSearchSpellCombineSuggestion *)combineSuggestion
                                                                withInt:(jint)numCombinations;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper, combineSuggestion_, OrgApacheLuceneSearchSpellCombineSuggestion *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, OrgApacheLuceneSearchSpellCombineSuggestion *combineSuggestion, jint numCombinations);

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, OrgApacheLuceneSearchSpellCombineSuggestion *combineSuggestion, jint numCombinations) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, OrgApacheLuceneSearchSpellCombineSuggestion *combineSuggestion, jint numCombinations);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchSpellWordBreakSpellChecker)

OrgApacheLuceneIndexTerm *OrgApacheLuceneSearchSpellWordBreakSpellChecker_SEPARATOR_TERM;

@implementation OrgApacheLuceneSearchSpellWordBreakSpellChecker

+ (OrgApacheLuceneIndexTerm *)SEPARATOR_TERM {
  return OrgApacheLuceneSearchSpellWordBreakSpellChecker_SEPARATOR_TERM;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSObjectArray *)suggestWordBreaksWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                          withInt:(jint)maxSuggestions
                              withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                        withOrgApacheLuceneSearchSpellSuggestMode:(OrgApacheLuceneSearchSpellSuggestMode *)suggestMode
withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *)sortMethod {
  if (maxSuggestions < 1) {
    return [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ 0, 0 } type:OrgApacheLuceneSearchSpellSuggestWord_class_()];
  }
  if (suggestMode == nil) {
    suggestMode = JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_WHEN_NOT_IN_INDEX);
  }
  if (sortMethod == nil) {
    sortMethod = JreLoadEnum(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod, NUM_CHANGES_THEN_MAX_FREQUENCY);
  }
  jint queueInitialCapacity = maxSuggestions > 10 ? 10 : maxSuggestions;
  id<JavaUtilComparator> queueComparator = sortMethod == JreLoadEnum(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod, NUM_CHANGES_THEN_MAX_FREQUENCY) ? create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(self) : (id) create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(self);
  id<JavaUtilQueue> suggestions = create_JavaUtilPriorityQueue_initWithInt_withJavaUtilComparator_(queueInitialCapacity, queueComparator);
  jint origFreq = [((OrgApacheLuceneIndexIndexReader *) nil_chk(ir)) docFreqWithOrgApacheLuceneIndexTerm:term];
  if (origFreq > 0 && suggestMode == JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_WHEN_NOT_IN_INDEX)) {
    return [IOSObjectArray arrayWithLength:0 type:IOSClass_arrayType(OrgApacheLuceneSearchSpellSuggestWord_class_(), 1)];
  }
  jint useMinSuggestionFrequency = minSuggestionFrequency_;
  if (suggestMode == JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_MORE_POPULAR)) {
    useMinSuggestionFrequency = (origFreq == 0 ? 1 : origFreq);
  }
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateBreakUpSuggestionsWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexIndexReader_withInt_withInt_withInt_withOrgApacheLuceneSearchSpellSuggestWordArray_withJavaUtilQueue_withInt_withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_(self, term, ir, 1, maxSuggestions, useMinSuggestionFrequency, [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchSpellSuggestWord_class_()], suggestions, 0, sortMethod);
  IOSObjectArray *suggestionArray = [IOSObjectArray arrayWithLength:[suggestions size] type:IOSClass_arrayType(OrgApacheLuceneSearchSpellSuggestWord_class_(), 1)];
  for (jint i = [suggestions size] - 1; i >= 0; i--) {
    IOSObjectArray_Set(suggestionArray, i, ((OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *) nil_chk([suggestions remove]))->suggestWords_);
  }
  return suggestionArray;
}

- (IOSObjectArray *)suggestWordCombinationsWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms
                                                                     withInt:(jint)maxSuggestions
                                         withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                                   withOrgApacheLuceneSearchSpellSuggestMode:(OrgApacheLuceneSearchSpellSuggestMode *)suggestMode {
  if (maxSuggestions < 1) {
    return [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchSpellCombineSuggestion_class_()];
  }
  IOSIntArray *origFreqs = nil;
  if (suggestMode != JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_ALWAYS)) {
    origFreqs = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(terms))->size_];
    for (jint i = 0; i < terms->size_; i++) {
      *IOSIntArray_GetRef(origFreqs, i) = [((OrgApacheLuceneIndexIndexReader *) nil_chk(ir)) docFreqWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(terms, i)];
    }
  }
  jint queueInitialCapacity = maxSuggestions > 10 ? 10 : maxSuggestions;
  id<JavaUtilComparator> queueComparator = create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(self);
  id<JavaUtilQueue> suggestions = create_JavaUtilPriorityQueue_initWithInt_withJavaUtilComparator_(queueInitialCapacity, queueComparator);
  jint thisTimeEvaluations = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_ - 1; i++) {
    if ([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, i))) isEqual:OrgApacheLuceneSearchSpellWordBreakSpellChecker_SEPARATOR_TERM]) {
      continue;
    }
    NSString *leftTermText = JreRetainedLocalValue([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, i))) text]);
    jint leftTermLength = [((NSString *) nil_chk(leftTermText)) java_codePointCount:0 endIndex:[leftTermText java_length]];
    if (leftTermLength > maxCombineWordLength_) {
      continue;
    }
    jint maxFreq = 0;
    jint minFreq = JavaLangInteger_MAX_VALUE;
    if (origFreqs != nil) {
      maxFreq = IOSIntArray_Get(origFreqs, i);
      minFreq = IOSIntArray_Get(origFreqs, i);
    }
    NSString *combinedTermText = JreRetainedLocalValue(leftTermText);
    jint combinedLength = leftTermLength;
    for (jint j = i + 1; j < terms->size_ && j - i <= maxChanges_; j++) {
      if ([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, j))) isEqual:OrgApacheLuceneSearchSpellWordBreakSpellChecker_SEPARATOR_TERM]) {
        break;
      }
      NSString *rightTermText = JreRetainedLocalValue([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, j))) text]);
      jint rightTermLength = [((NSString *) nil_chk(rightTermText)) java_codePointCount:0 endIndex:[rightTermText java_length]];
      JreStrAppend(&combinedTermText, "$", rightTermText);
      combinedLength += rightTermLength;
      if (combinedLength > maxCombineWordLength_) {
        break;
      }
      if (origFreqs != nil) {
        maxFreq = JavaLangMath_maxWithInt_withInt_(maxFreq, IOSIntArray_Get(origFreqs, j));
        minFreq = JavaLangMath_minWithInt_withInt_(minFreq, IOSIntArray_Get(origFreqs, j));
      }
      OrgApacheLuceneIndexTerm *combinedTerm = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, 0))) field], combinedTermText);
      jint combinedTermFreq = [((OrgApacheLuceneIndexIndexReader *) nil_chk(ir)) docFreqWithOrgApacheLuceneIndexTerm:combinedTerm];
      if (suggestMode != JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_MORE_POPULAR) || combinedTermFreq >= maxFreq) {
        if (suggestMode != JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_WHEN_NOT_IN_INDEX) || minFreq == 0) {
          if (combinedTermFreq >= minSuggestionFrequency_) {
            IOSIntArray *origIndexes = [IOSIntArray arrayWithLength:j - i + 1];
            *IOSIntArray_GetRef(origIndexes, 0) = i;
            for (jint k = 1; k < origIndexes->size_; k++) {
              *IOSIntArray_GetRef(origIndexes, k) = i + k;
            }
            OrgApacheLuceneSearchSpellSuggestWord *word = create_OrgApacheLuceneSearchSpellSuggestWord_init();
            word->freq_ = combinedTermFreq;
            word->score_ = origIndexes->size_ - 1;
            JreStrongAssign(&word->string_, [combinedTerm text]);
            OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *suggestion = create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_(self, create_OrgApacheLuceneSearchSpellCombineSuggestion_initWithOrgApacheLuceneSearchSpellSuggestWord_withIntArray_(word, origIndexes), (origIndexes->size_ - 1));
            [suggestions offerWithId:suggestion];
            if ([suggestions size] > maxSuggestions) {
              [suggestions poll];
            }
          }
        }
      }
      thisTimeEvaluations++;
      if (thisTimeEvaluations == maxEvaluations_) {
        break;
      }
    }
  }
  IOSObjectArray *combineSuggestions = [IOSObjectArray arrayWithLength:[suggestions size] type:OrgApacheLuceneSearchSpellCombineSuggestion_class_()];
  for (jint i = [suggestions size] - 1; i >= 0; i--) {
    IOSObjectArray_Set(combineSuggestions, i, ((OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *) nil_chk([suggestions remove]))->combineSuggestion_);
  }
  return combineSuggestions;
}

- (jint)generateBreakUpSuggestionsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                           withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                                                       withInt:(jint)numberBreaks
                                                       withInt:(jint)maxSuggestions
                                                       withInt:(jint)useMinSuggestionFrequency
                withOrgApacheLuceneSearchSpellSuggestWordArray:(IOSObjectArray *)prefix
                                             withJavaUtilQueue:(id<JavaUtilQueue>)suggestions
                                                       withInt:(jint)totalEvaluations
withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *)sortMethod {
  return OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateBreakUpSuggestionsWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexIndexReader_withInt_withInt_withInt_withOrgApacheLuceneSearchSpellSuggestWordArray_withJavaUtilQueue_withInt_withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_(self, term, ir, numberBreaks, maxSuggestions, useMinSuggestionFrequency, prefix, suggestions, totalEvaluations, sortMethod);
}

- (IOSObjectArray *)newPrefixWithOrgApacheLuceneSearchSpellSuggestWordArray:(IOSObjectArray *)oldPrefix
                                  withOrgApacheLuceneSearchSpellSuggestWord:(OrgApacheLuceneSearchSpellSuggestWord *)append {
  return OrgApacheLuceneSearchSpellWordBreakSpellChecker_newPrefixWithOrgApacheLuceneSearchSpellSuggestWordArray_withOrgApacheLuceneSearchSpellSuggestWord_(self, oldPrefix, append);
}

- (IOSObjectArray *)newSuggestionWithOrgApacheLuceneSearchSpellSuggestWordArray:(IOSObjectArray *)prefix
                                      withOrgApacheLuceneSearchSpellSuggestWord:(OrgApacheLuceneSearchSpellSuggestWord *)append1
                                      withOrgApacheLuceneSearchSpellSuggestWord:(OrgApacheLuceneSearchSpellSuggestWord *)append2 {
  return OrgApacheLuceneSearchSpellWordBreakSpellChecker_newSuggestionWithOrgApacheLuceneSearchSpellSuggestWordArray_withOrgApacheLuceneSearchSpellSuggestWord_withOrgApacheLuceneSearchSpellSuggestWord_(self, prefix, append1, append2);
}

- (OrgApacheLuceneSearchSpellSuggestWord *)generateSuggestWordWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                                                                                     withNSString:(NSString *)fieldname
                                                                                     withNSString:(NSString *)text {
  return OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateSuggestWordWithOrgApacheLuceneIndexIndexReader_withNSString_withNSString_(self, ir, fieldname, text);
}

- (jint)getMinSuggestionFrequency {
  return minSuggestionFrequency_;
}

- (jint)getMaxCombineWordLength {
  return maxCombineWordLength_;
}

- (jint)getMinBreakWordLength {
  return minBreakWordLength_;
}

- (jint)getMaxChanges {
  return maxChanges_;
}

- (jint)getMaxEvaluations {
  return maxEvaluations_;
}

- (void)setMinSuggestionFrequencyWithInt:(jint)minSuggestionFrequency {
  self->minSuggestionFrequency_ = minSuggestionFrequency;
}

- (void)setMaxCombineWordLengthWithInt:(jint)maxCombineWordLength {
  self->maxCombineWordLength_ = maxCombineWordLength;
}

- (void)setMinBreakWordLengthWithInt:(jint)minBreakWordLength {
  self->minBreakWordLength_ = minBreakWordLength;
}

- (void)setMaxChangesWithInt:(jint)maxChanges {
  self->maxChanges_ = maxChanges;
}

- (void)setMaxEvaluationsWithInt:(jint)maxEvaluations {
  self->maxEvaluations_ = maxEvaluations;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LOrgApacheLuceneSearchSpellSuggestWord;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchSpellCombineSuggestion;", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 6, 2, 7, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchSpellSuggestWord;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchSpellSuggestWord;", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpellSuggestWord;", 0x2, 12, 13, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(suggestWordBreaksWithOrgApacheLuceneIndexTerm:withInt:withOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneSearchSpellSuggestMode:withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod:);
  methods[2].selector = @selector(suggestWordCombinationsWithOrgApacheLuceneIndexTermArray:withInt:withOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneSearchSpellSuggestMode:);
  methods[3].selector = @selector(generateBreakUpSuggestionsWithOrgApacheLuceneIndexTerm:withOrgApacheLuceneIndexIndexReader:withInt:withInt:withInt:withOrgApacheLuceneSearchSpellSuggestWordArray:withJavaUtilQueue:withInt:withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod:);
  methods[4].selector = @selector(newPrefixWithOrgApacheLuceneSearchSpellSuggestWordArray:withOrgApacheLuceneSearchSpellSuggestWord:);
  methods[5].selector = @selector(newSuggestionWithOrgApacheLuceneSearchSpellSuggestWordArray:withOrgApacheLuceneSearchSpellSuggestWord:withOrgApacheLuceneSearchSpellSuggestWord:);
  methods[6].selector = @selector(generateSuggestWordWithOrgApacheLuceneIndexIndexReader:withNSString:withNSString:);
  methods[7].selector = @selector(getMinSuggestionFrequency);
  methods[8].selector = @selector(getMaxCombineWordLength);
  methods[9].selector = @selector(getMinBreakWordLength);
  methods[10].selector = @selector(getMaxChanges);
  methods[11].selector = @selector(getMaxEvaluations);
  methods[12].selector = @selector(setMinSuggestionFrequencyWithInt:);
  methods[13].selector = @selector(setMaxCombineWordLengthWithInt:);
  methods[14].selector = @selector(setMinBreakWordLengthWithInt:);
  methods[15].selector = @selector(setMaxChangesWithInt:);
  methods[16].selector = @selector(setMaxEvaluationsWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "minSuggestionFrequency_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minBreakWordLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxCombineWordLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxChanges_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxEvaluations_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SEPARATOR_TERM", "LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
  };
  static const void *ptrTable[] = { "suggestWordBreaks", "LOrgApacheLuceneIndexTerm;ILOrgApacheLuceneIndexIndexReader;LOrgApacheLuceneSearchSpellSuggestMode;LOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod;", "LJavaIoIOException;", "suggestWordCombinations", "[LOrgApacheLuceneIndexTerm;ILOrgApacheLuceneIndexIndexReader;LOrgApacheLuceneSearchSpellSuggestMode;", "generateBreakUpSuggestions", "LOrgApacheLuceneIndexTerm;LOrgApacheLuceneIndexIndexReader;III[LOrgApacheLuceneSearchSpellSuggestWord;LJavaUtilQueue;ILOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod;", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/IndexReader;III[Lorg/apache/lucene/search/spell/SuggestWord;Ljava/util/Queue<Lorg/apache/lucene/search/spell/WordBreakSpellChecker$SuggestWordArrayWrapper;>;ILorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;)I", "newPrefix", "[LOrgApacheLuceneSearchSpellSuggestWord;LOrgApacheLuceneSearchSpellSuggestWord;", "newSuggestion", "[LOrgApacheLuceneSearchSpellSuggestWord;LOrgApacheLuceneSearchSpellSuggestWord;LOrgApacheLuceneSearchSpellSuggestWord;", "generateSuggestWord", "LOrgApacheLuceneIndexIndexReader;LNSString;LNSString;", "setMinSuggestionFrequency", "I", "setMaxCombineWordLength", "setMinBreakWordLength", "setMaxChanges", "setMaxEvaluations", &OrgApacheLuceneSearchSpellWordBreakSpellChecker_SEPARATOR_TERM, "LOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod;LOrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator;LOrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator;LOrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator;LOrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper;LOrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellWordBreakSpellChecker = { "WordBreakSpellChecker", "org.apache.lucene.search.spell", ptrTable, methods, fields, 7, 0x1, 17, 6, -1, 21, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpellWordBreakSpellChecker;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchSpellWordBreakSpellChecker class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneSearchSpellWordBreakSpellChecker_SEPARATOR_TERM, new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(@"", @""));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchSpellWordBreakSpellChecker)
  }
}

@end

void OrgApacheLuceneSearchSpellWordBreakSpellChecker_init(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self) {
  NSObject_init(self);
  self->minSuggestionFrequency_ = 1;
  self->minBreakWordLength_ = 1;
  self->maxCombineWordLength_ = 20;
  self->maxChanges_ = 1;
  self->maxEvaluations_ = 1000;
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker, init)
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker, init)
}

jint OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateBreakUpSuggestionsWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexIndexReader_withInt_withInt_withInt_withOrgApacheLuceneSearchSpellSuggestWordArray_withJavaUtilQueue_withInt_withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self, OrgApacheLuceneIndexTerm *term, OrgApacheLuceneIndexIndexReader *ir, jint numberBreaks, jint maxSuggestions, jint useMinSuggestionFrequency, IOSObjectArray *prefix, id<JavaUtilQueue> suggestions, jint totalEvaluations, OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *sortMethod) {
  NSString *termText = JreRetainedLocalValue([((OrgApacheLuceneIndexTerm *) nil_chk(term)) text]);
  jint termLength = [((NSString *) nil_chk(termText)) java_codePointCount:0 endIndex:[termText java_length]];
  jint useMinBreakWordLength = self->minBreakWordLength_;
  if (useMinBreakWordLength < 1) {
    useMinBreakWordLength = 1;
  }
  if (termLength < (useMinBreakWordLength * 2)) {
    return 0;
  }
  jint thisTimeEvaluations = 0;
  for (jint i = useMinBreakWordLength; i <= (termLength - useMinBreakWordLength); i++) {
    jint end = [termText java_offsetByCodePoints:0 codePointOffset:i];
    NSString *leftText = [termText java_substring:0 endIndex:end];
    NSString *rightText = [termText java_substring:end];
    OrgApacheLuceneSearchSpellSuggestWord *leftWord = OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateSuggestWordWithOrgApacheLuceneIndexIndexReader_withNSString_withNSString_(self, ir, [term field], leftText);
    if (((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk(leftWord))->freq_ >= useMinSuggestionFrequency) {
      OrgApacheLuceneSearchSpellSuggestWord *rightWord = OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateSuggestWordWithOrgApacheLuceneIndexIndexReader_withNSString_withNSString_(self, ir, [term field], rightText);
      if (((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk(rightWord))->freq_ >= useMinSuggestionFrequency) {
        OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *suggestion = create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_(self, OrgApacheLuceneSearchSpellWordBreakSpellChecker_newSuggestionWithOrgApacheLuceneSearchSpellSuggestWordArray_withOrgApacheLuceneSearchSpellSuggestWord_withOrgApacheLuceneSearchSpellSuggestWord_(self, prefix, leftWord, rightWord));
        [((id<JavaUtilQueue>) nil_chk(suggestions)) offerWithId:suggestion];
        if ([suggestions size] > maxSuggestions) {
          [suggestions poll];
        }
      }
      jint newNumberBreaks = numberBreaks + 1;
      if (newNumberBreaks <= self->maxChanges_) {
        jint evaluations = OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateBreakUpSuggestionsWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexIndexReader_withInt_withInt_withInt_withOrgApacheLuceneSearchSpellSuggestWordArray_withJavaUtilQueue_withInt_withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_(self, create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_([term field], rightWord->string_), ir, newNumberBreaks, maxSuggestions, useMinSuggestionFrequency, OrgApacheLuceneSearchSpellWordBreakSpellChecker_newPrefixWithOrgApacheLuceneSearchSpellSuggestWordArray_withOrgApacheLuceneSearchSpellSuggestWord_(self, prefix, leftWord), suggestions, totalEvaluations, sortMethod);
        totalEvaluations += evaluations;
      }
    }
    thisTimeEvaluations++;
    totalEvaluations++;
    if (totalEvaluations >= self->maxEvaluations_) {
      break;
    }
  }
  return thisTimeEvaluations;
}

IOSObjectArray *OrgApacheLuceneSearchSpellWordBreakSpellChecker_newPrefixWithOrgApacheLuceneSearchSpellSuggestWordArray_withOrgApacheLuceneSearchSpellSuggestWord_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self, IOSObjectArray *oldPrefix, OrgApacheLuceneSearchSpellSuggestWord *append) {
  IOSObjectArray *newPrefix = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(oldPrefix))->size_ + 1 type:OrgApacheLuceneSearchSpellSuggestWord_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(oldPrefix, 0, newPrefix, 0, oldPrefix->size_);
  IOSObjectArray_Set(newPrefix, newPrefix->size_ - 1, append);
  return newPrefix;
}

IOSObjectArray *OrgApacheLuceneSearchSpellWordBreakSpellChecker_newSuggestionWithOrgApacheLuceneSearchSpellSuggestWordArray_withOrgApacheLuceneSearchSpellSuggestWord_withOrgApacheLuceneSearchSpellSuggestWord_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self, IOSObjectArray *prefix, OrgApacheLuceneSearchSpellSuggestWord *append1, OrgApacheLuceneSearchSpellSuggestWord *append2) {
  IOSObjectArray *newSuggestion = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(prefix))->size_ + 2 type:OrgApacheLuceneSearchSpellSuggestWord_class_()];
  jint score = prefix->size_ + 1;
  for (jint i = 0; i < prefix->size_; i++) {
    OrgApacheLuceneSearchSpellSuggestWord *word = create_OrgApacheLuceneSearchSpellSuggestWord_init();
    JreStrongAssign(&word->string_, ((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk(IOSObjectArray_Get(prefix, i)))->string_);
    word->freq_ = ((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk(IOSObjectArray_Get(prefix, i)))->freq_;
    word->score_ = score;
    IOSObjectArray_Set(newSuggestion, i, word);
  }
  ((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk(append1))->score_ = score;
  ((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk(append2))->score_ = score;
  IOSObjectArray_Set(newSuggestion, newSuggestion->size_ - 2, append1);
  IOSObjectArray_Set(newSuggestion, newSuggestion->size_ - 1, append2);
  return newSuggestion;
}

OrgApacheLuceneSearchSpellSuggestWord *OrgApacheLuceneSearchSpellWordBreakSpellChecker_generateSuggestWordWithOrgApacheLuceneIndexIndexReader_withNSString_withNSString_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self, OrgApacheLuceneIndexIndexReader *ir, NSString *fieldname, NSString *text) {
  OrgApacheLuceneIndexTerm *term = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(fieldname, text);
  jint freq = [((OrgApacheLuceneIndexIndexReader *) nil_chk(ir)) docFreqWithOrgApacheLuceneIndexTerm:term];
  OrgApacheLuceneSearchSpellSuggestWord *word = create_OrgApacheLuceneSearchSpellSuggestWord_init();
  word->freq_ = freq;
  word->score_ = 1;
  JreStrongAssign(&word->string_, text);
  return word;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellWordBreakSpellChecker)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod)

OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_values_[2];

@implementation OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod

+ (OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *)NUM_CHANGES_THEN_SUMMED_FREQUENCY {
  return JreEnum(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod, NUM_CHANGES_THEN_SUMMED_FREQUENCY);
}

+ (OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *)NUM_CHANGES_THEN_MAX_FREQUENCY {
  return JreEnum(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod, NUM_CHANGES_THEN_MAX_FREQUENCY);
}

+ (IOSObjectArray *)values {
  return OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_values();
}

+ (OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_valueOfWithNSString_(name);
}

- (OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_Enum)toNSEnum {
  return (OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUM_CHANGES_THEN_SUMMED_FREQUENCY", "LOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "NUM_CHANGES_THEN_MAX_FREQUENCY", "LOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod, NUM_CHANGES_THEN_SUMMED_FREQUENCY), &JreEnum(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod, NUM_CHANGES_THEN_MAX_FREQUENCY), "LOrgApacheLuceneSearchSpellWordBreakSpellChecker;", "Ljava/lang/Enum<Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod = { "BreakSuggestionSortMethod", "org.apache.lucene.search.spell", ptrTable, methods, fields, 7, 0x4019, 2, 2, 4, -1, -1, 5, -1 };
  return &_OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 2; i++) {
      ((void)(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_initWithNSString_withInt_(e, JreEnumConstantName(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod)
  }
}

@end

void OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_initWithNSString_withInt_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_values() {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_values_ count:2 type:OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_class_()];
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_initialize();
  for (int i = 0; i < 2; i++) {
    OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *e = OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod)

@implementation OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$ {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(self, outer$);
  return self;
}

- (jint)compareWithId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *)o1
               withId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *)o2 {
  if (((IOSObjectArray *) nil_chk(((OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *) nil_chk(o1))->suggestWords_))->size_ != ((OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *) nil_chk(o2))->suggestWords_->size_) {
    return o2->suggestWords_->size_ - o1->suggestWords_->size_;
  }
  if (o1->freqMax_ != o2->freqMax_) {
    return o1->freqMax_ - o2->freqMax_;
  }
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpellWordBreakSpellChecker;", "compare", "LOrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper;LOrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper;", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/search/spell/WordBreakSpellChecker$SuggestWordArrayWrapper;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator = { "LengthThenMaxFreqComparator", "org.apache.lucene.search.spell", ptrTable, methods, NULL, 7, 0x2, 2, 0, 0, -1, -1, 3, -1 };
  return &_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator;
}

@end

void OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) {
  NSObject_init(self);
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_, outer$)
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenMaxFreqComparator)

@implementation OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$ {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(self, outer$);
  return self;
}

- (jint)compareWithId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *)o1
               withId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *)o2 {
  if (((IOSObjectArray *) nil_chk(((OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *) nil_chk(o1))->suggestWords_))->size_ != ((OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *) nil_chk(o2))->suggestWords_->size_) {
    return o2->suggestWords_->size_ - o1->suggestWords_->size_;
  }
  if (o1->freqSum_ != o2->freqSum_) {
    return o1->freqSum_ - o2->freqSum_;
  }
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpellWordBreakSpellChecker;", "compare", "LOrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper;LOrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper;", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/search/spell/WordBreakSpellChecker$SuggestWordArrayWrapper;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator = { "LengthThenSumFreqComparator", "org.apache.lucene.search.spell", ptrTable, methods, NULL, 7, 0x2, 2, 0, 0, -1, -1, 3, -1 };
  return &_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator;
}

@end

void OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) {
  NSObject_init(self);
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_, outer$)
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellWordBreakSpellChecker_LengthThenSumFreqComparator)

@implementation OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$ {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(self, outer$);
  return self;
}

- (jint)compareWithId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *)o1
               withId:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *)o2 {
  if (((OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *) nil_chk(o1))->numCombinations_ != ((OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *) nil_chk(o2))->numCombinations_) {
    return o2->numCombinations_ - o1->numCombinations_;
  }
  if (((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk(((OrgApacheLuceneSearchSpellCombineSuggestion *) nil_chk(o1->combineSuggestion_))->suggestion_))->freq_ != o2->combineSuggestion_->suggestion_->freq_) {
    return o1->combineSuggestion_->suggestion_->freq_ - o2->combineSuggestion_->suggestion_->freq_;
  }
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpellWordBreakSpellChecker;", "compare", "LOrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper;LOrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper;", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/search/spell/WordBreakSpellChecker$CombineSuggestionWrapper;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator = { "CombinationsThenFreqComparator", "org.apache.lucene.search.spell", ptrTable, methods, NULL, 7, 0x2, 2, 0, 0, -1, -1, 3, -1 };
  return &_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator;
}

@end

void OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) {
  NSObject_init(self);
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_, outer$)
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombinationsThenFreqComparator)

@implementation OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$
                         withOrgApacheLuceneSearchSpellSuggestWordArray:(IOSObjectArray *)suggestWords {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_(self, outer$, suggestWords);
  return self;
}

- (void)dealloc {
  RELEASE_(suggestWords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:withOrgApacheLuceneSearchSpellSuggestWordArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "suggestWords_", "[LOrgApacheLuceneSearchSpellSuggestWord;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "freqMax_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "freqSum_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpellWordBreakSpellChecker;[LOrgApacheLuceneSearchSpellSuggestWord;", "LOrgApacheLuceneSearchSpellWordBreakSpellChecker;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper = { "SuggestWordArrayWrapper", "org.apache.lucene.search.spell", ptrTable, methods, fields, 7, 0x2, 1, 3, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper;
}

@end

void OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, IOSObjectArray *suggestWords) {
  NSObject_init(self);
  JreStrongAssign(&self->suggestWords_, suggestWords);
  jint aFreqSum = 0;
  jint aFreqMax = 0;
  {
    IOSObjectArray *a__ = suggestWords;
    OrgApacheLuceneSearchSpellSuggestWord * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchSpellSuggestWord * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchSpellSuggestWord *sw = *b__++;
      aFreqSum += ((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk(sw))->freq_;
      aFreqMax = JavaLangMath_maxWithInt_withInt_(aFreqMax, sw->freq_);
    }
  }
  self->freqSum_ = aFreqSum;
  self->freqMax_ = aFreqMax;
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, IOSObjectArray *suggestWords) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_, outer$, suggestWords)
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, IOSObjectArray *suggestWords) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellSuggestWordArray_, outer$, suggestWords)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellWordBreakSpellChecker_SuggestWordArrayWrapper)

@implementation OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper

- (instancetype)initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:(OrgApacheLuceneSearchSpellWordBreakSpellChecker *)outer$
                        withOrgApacheLuceneSearchSpellCombineSuggestion:(OrgApacheLuceneSearchSpellCombineSuggestion *)combineSuggestion
                                                                withInt:(jint)numCombinations {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_(self, outer$, combineSuggestion, numCombinations);
  return self;
}

- (void)dealloc {
  RELEASE_(combineSuggestion_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker:withOrgApacheLuceneSearchSpellCombineSuggestion:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "combineSuggestion_", "LOrgApacheLuceneSearchSpellCombineSuggestion;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "numCombinations_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpellWordBreakSpellChecker;LOrgApacheLuceneSearchSpellCombineSuggestion;I", "LOrgApacheLuceneSearchSpellWordBreakSpellChecker;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper = { "CombineSuggestionWrapper", "org.apache.lucene.search.spell", ptrTable, methods, fields, 7, 0x2, 1, 2, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper;
}

@end

void OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *self, OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, OrgApacheLuceneSearchSpellCombineSuggestion *combineSuggestion, jint numCombinations) {
  NSObject_init(self);
  JreStrongAssign(&self->combineSuggestion_, combineSuggestion);
  self->numCombinations_ = numCombinations;
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, OrgApacheLuceneSearchSpellCombineSuggestion *combineSuggestion, jint numCombinations) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_, outer$, combineSuggestion, numCombinations)
}

OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper_initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_(OrgApacheLuceneSearchSpellWordBreakSpellChecker *outer$, OrgApacheLuceneSearchSpellCombineSuggestion *combineSuggestion, jint numCombinations) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper, initWithOrgApacheLuceneSearchSpellWordBreakSpellChecker_withOrgApacheLuceneSearchSpellCombineSuggestion_withInt_, outer$, combineSuggestion, numCombinations)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellWordBreakSpellChecker_CombineSuggestionWrapper)
