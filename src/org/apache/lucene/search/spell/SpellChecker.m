//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/StringField.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/spell/LevensteinDistance.h"
#include "org/apache/lucene/search/spell/SpellChecker.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/search/spell/SuggestWordQueue.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefIterator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spell/SpellChecker must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchSpellSpellChecker () {
 @public
  /*!
   @brief Boost value for start and end grams
   */
  jfloat bStart_;
  jfloat bEnd_;
  OrgApacheLuceneSearchIndexSearcher *searcher_;
  id searcherLock_;
  id modifyCurrentIndexLock_;
  volatile_jboolean closed_;
  jfloat accuracy_;
  id<OrgApacheLuceneSearchSpellStringDistance> sd_;
  id<JavaUtilComparator> comparator_;
}

/*!
 @brief Add a clause to a boolean query.
 */
+ (void)addWithOrgApacheLuceneSearchBooleanQuery_Builder:(OrgApacheLuceneSearchBooleanQuery_Builder *)q
                                            withNSString:(NSString *)name
                                            withNSString:(NSString *)value
                                               withFloat:(jfloat)boost;

/*!
 @brief Add a clause to a boolean query.
 */
+ (void)addWithOrgApacheLuceneSearchBooleanQuery_Builder:(OrgApacheLuceneSearchBooleanQuery_Builder *)q
                                            withNSString:(NSString *)name
                                            withNSString:(NSString *)value;

/*!
 @brief Form all ngrams for a given word.
 @param text the word to parse
 @param ng the ngram length e.g. 3
 @return an array of all ngrams in the word and note that duplicates are not removed
 */
+ (IOSObjectArray *)formGramsWithNSString:(NSString *)text
                                  withInt:(jint)ng;

+ (jint)getMinWithInt:(jint)l;

+ (jint)getMaxWithInt:(jint)l;

+ (OrgApacheLuceneDocumentDocument *)createDocumentWithNSString:(NSString *)text
                                                        withInt:(jint)ng1
                                                        withInt:(jint)ng2;

+ (void)addGramWithNSString:(NSString *)text
withOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)doc
                    withInt:(jint)ng1
                    withInt:(jint)ng2;

- (OrgApacheLuceneSearchIndexSearcher *)obtainSearcher;

- (void)releaseSearcherWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)aSearcher;

- (void)ensureOpen;

- (void)swapSearcherWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpellSpellChecker, searcher_, OrgApacheLuceneSearchIndexSearcher *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpellSpellChecker, searcherLock_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpellSpellChecker, modifyCurrentIndexLock_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpellSpellChecker, sd_, id<OrgApacheLuceneSearchSpellStringDistance>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpellSpellChecker, comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void OrgApacheLuceneSearchSpellSpellChecker_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withNSString_withNSString_withFloat_(OrgApacheLuceneSearchBooleanQuery_Builder *q, NSString *name, NSString *value, jfloat boost);

__attribute__((unused)) static void OrgApacheLuceneSearchSpellSpellChecker_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withNSString_withNSString_(OrgApacheLuceneSearchBooleanQuery_Builder *q, NSString *name, NSString *value);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchSpellSpellChecker_formGramsWithNSString_withInt_(NSString *text, jint ng);

__attribute__((unused)) static jint OrgApacheLuceneSearchSpellSpellChecker_getMinWithInt_(jint l);

__attribute__((unused)) static jint OrgApacheLuceneSearchSpellSpellChecker_getMaxWithInt_(jint l);

__attribute__((unused)) static OrgApacheLuceneDocumentDocument *OrgApacheLuceneSearchSpellSpellChecker_createDocumentWithNSString_withInt_withInt_(NSString *text, jint ng1, jint ng2);

__attribute__((unused)) static void OrgApacheLuceneSearchSpellSpellChecker_addGramWithNSString_withOrgApacheLuceneDocumentDocument_withInt_withInt_(NSString *text, OrgApacheLuceneDocumentDocument *doc, jint ng1, jint ng2);

__attribute__((unused)) static OrgApacheLuceneSearchIndexSearcher *OrgApacheLuceneSearchSpellSpellChecker_obtainSearcher(OrgApacheLuceneSearchSpellSpellChecker *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSpellSpellChecker_releaseSearcherWithOrgApacheLuceneSearchIndexSearcher_(OrgApacheLuceneSearchSpellSpellChecker *self, OrgApacheLuceneSearchIndexSearcher *aSearcher);

__attribute__((unused)) static void OrgApacheLuceneSearchSpellSpellChecker_ensureOpen(OrgApacheLuceneSearchSpellSpellChecker *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSpellSpellChecker_swapSearcherWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneSearchSpellSpellChecker *self, OrgApacheLuceneStoreDirectory *dir);

NSString *OrgApacheLuceneSearchSpellSpellChecker_F_WORD = @"word";

@implementation OrgApacheLuceneSearchSpellSpellChecker

+ (jfloat)DEFAULT_ACCURACY {
  return OrgApacheLuceneSearchSpellSpellChecker_DEFAULT_ACCURACY;
}

+ (NSString *)F_WORD {
  return OrgApacheLuceneSearchSpellSpellChecker_F_WORD;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)spellIndex
         withOrgApacheLuceneSearchSpellStringDistance:(id<OrgApacheLuceneSearchSpellStringDistance>)sd {
  OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_(self, spellIndex, sd);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)spellIndex {
  OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_(self, spellIndex);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)spellIndex
         withOrgApacheLuceneSearchSpellStringDistance:(id<OrgApacheLuceneSearchSpellStringDistance>)sd
                               withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_withJavaUtilComparator_(self, spellIndex, sd, comparator);
  return self;
}

- (void)setSpellIndexWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)spellIndexDir {
  @synchronized(modifyCurrentIndexLock_) {
    OrgApacheLuceneSearchSpellSpellChecker_ensureOpen(self);
    if (!OrgApacheLuceneIndexDirectoryReader_indexExistsWithOrgApacheLuceneStoreDirectory_(spellIndexDir)) {
      OrgApacheLuceneIndexIndexWriter *writer = create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(spellIndexDir, create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(nil));
      [writer close];
    }
    OrgApacheLuceneSearchSpellSpellChecker_swapSearcherWithOrgApacheLuceneStoreDirectory_(self, spellIndexDir);
  }
}

- (void)setComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  JreStrongAssign(&self->comparator_, comparator);
}

- (id<JavaUtilComparator>)getComparator {
  return comparator_;
}

- (void)setStringDistanceWithOrgApacheLuceneSearchSpellStringDistance:(id<OrgApacheLuceneSearchSpellStringDistance>)sd {
  JreStrongAssign(&self->sd_, sd);
}

- (id<OrgApacheLuceneSearchSpellStringDistance>)getStringDistance {
  return sd_;
}

- (void)setAccuracyWithFloat:(jfloat)acc {
  self->accuracy_ = acc;
}

- (jfloat)getAccuracy {
  return accuracy_;
}

- (IOSObjectArray *)suggestSimilarWithNSString:(NSString *)word
                                       withInt:(jint)numSug {
  return [self suggestSimilarWithNSString:word withInt:numSug withOrgApacheLuceneIndexIndexReader:nil withNSString:nil withOrgApacheLuceneSearchSpellSuggestMode:JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_WHEN_NOT_IN_INDEX)];
}

- (IOSObjectArray *)suggestSimilarWithNSString:(NSString *)word
                                       withInt:(jint)numSug
                                     withFloat:(jfloat)accuracy {
  return [self suggestSimilarWithNSString:word withInt:numSug withOrgApacheLuceneIndexIndexReader:nil withNSString:nil withOrgApacheLuceneSearchSpellSuggestMode:JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_WHEN_NOT_IN_INDEX) withFloat:accuracy];
}

- (IOSObjectArray *)suggestSimilarWithNSString:(NSString *)word
                                       withInt:(jint)numSug
           withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                                  withNSString:(NSString *)field
     withOrgApacheLuceneSearchSpellSuggestMode:(OrgApacheLuceneSearchSpellSuggestMode *)suggestMode {
  return [self suggestSimilarWithNSString:word withInt:numSug withOrgApacheLuceneIndexIndexReader:ir withNSString:field withOrgApacheLuceneSearchSpellSuggestMode:suggestMode withFloat:self->accuracy_];
}

- (IOSObjectArray *)suggestSimilarWithNSString:(NSString *)word
                                       withInt:(jint)numSug
           withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                                  withNSString:(NSString *)field
     withOrgApacheLuceneSearchSpellSuggestMode:(OrgApacheLuceneSearchSpellSuggestMode *)suggestMode
                                     withFloat:(jfloat)accuracy {
  OrgApacheLuceneSearchIndexSearcher *indexSearcher = OrgApacheLuceneSearchSpellSpellChecker_obtainSearcher(self);
  @try {
    if (ir == nil || field == nil) {
      suggestMode = JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_ALWAYS);
    }
    if (suggestMode == JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_ALWAYS)) {
      ir = nil;
      field = nil;
    }
    jint lengthWord = [((NSString *) nil_chk(word)) java_length];
    jint freq = (ir != nil && field != nil) ? [((OrgApacheLuceneIndexIndexReader *) nil_chk(ir)) docFreqWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, word)] : 0;
    jint goalFreq = suggestMode == JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_MORE_POPULAR) ? freq : 0;
    if (suggestMode == JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_WHEN_NOT_IN_INDEX) && freq > 0) {
      return [IOSObjectArray arrayWithObjects:(id[]){ word } count:1 type:NSString_class_()];
    }
    OrgApacheLuceneSearchBooleanQuery_Builder *query = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
    IOSObjectArray *grams;
    NSString *key;
    for (jint ng = OrgApacheLuceneSearchSpellSpellChecker_getMinWithInt_(lengthWord); ng <= OrgApacheLuceneSearchSpellSpellChecker_getMaxWithInt_(lengthWord); ng++) {
      key = JreStrcat("$I", @"gram", ng);
      grams = OrgApacheLuceneSearchSpellSpellChecker_formGramsWithNSString_withInt_(word, ng);
      if (((IOSObjectArray *) nil_chk(grams))->size_ == 0) {
        continue;
      }
      if (bStart_ > 0) {
        OrgApacheLuceneSearchSpellSpellChecker_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withNSString_withNSString_withFloat_(query, JreStrcat("$I", @"start", ng), IOSObjectArray_Get(grams, 0), bStart_);
      }
      if (bEnd_ > 0) {
        OrgApacheLuceneSearchSpellSpellChecker_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withNSString_withNSString_withFloat_(query, JreStrcat("$I", @"end", ng), IOSObjectArray_Get(grams, grams->size_ - 1), bEnd_);
      }
      for (jint i = 0; i < grams->size_; i++) {
        OrgApacheLuceneSearchSpellSpellChecker_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withNSString_withNSString_(query, key, IOSObjectArray_Get(grams, i));
      }
    }
    jint maxHits = 10 * numSug;
    IOSObjectArray *hits = ((OrgApacheLuceneSearchTopDocs *) nil_chk([((OrgApacheLuceneSearchIndexSearcher *) nil_chk(indexSearcher)) searchWithOrgApacheLuceneSearchQuery:[query build] withInt:maxHits]))->scoreDocs_;
    OrgApacheLuceneSearchSpellSuggestWordQueue *sugQueue = create_OrgApacheLuceneSearchSpellSuggestWordQueue_initWithInt_withJavaUtilComparator_(numSug, comparator_);
    jint stop = JavaLangMath_minWithInt_withInt_(((IOSObjectArray *) nil_chk(hits))->size_, maxHits);
    OrgApacheLuceneSearchSpellSuggestWord *sugWord = create_OrgApacheLuceneSearchSpellSuggestWord_init();
    for (jint i = 0; i < stop; i++) {
      JreStrongAssign(&sugWord->string_, [((OrgApacheLuceneDocumentDocument *) nil_chk([indexSearcher docWithInt:((OrgApacheLuceneSearchScoreDoc *) nil_chk(IOSObjectArray_Get(hits, i)))->doc_])) getWithNSString:OrgApacheLuceneSearchSpellSpellChecker_F_WORD]);
      if ([((NSString *) nil_chk(sugWord->string_)) isEqual:word]) {
        continue;
      }
      sugWord->score_ = [((id<OrgApacheLuceneSearchSpellStringDistance>) nil_chk(sd_)) getDistanceWithNSString:word withNSString:sugWord->string_];
      if (sugWord->score_ < accuracy) {
        continue;
      }
      if (ir != nil && field != nil) {
        sugWord->freq_ = [ir docFreqWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, sugWord->string_)];
        if ((suggestMode == JreLoadEnum(OrgApacheLuceneSearchSpellSuggestMode, SUGGEST_MORE_POPULAR) && goalFreq > sugWord->freq_) || sugWord->freq_ < 1) {
          continue;
        }
      }
      [sugQueue insertWithOverflowWithId:sugWord];
      if ([sugQueue size] == numSug) {
        accuracy = ((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk([sugQueue top]))->score_;
      }
      sugWord = create_OrgApacheLuceneSearchSpellSuggestWord_init();
    }
    IOSObjectArray *list = [IOSObjectArray arrayWithLength:[sugQueue size] type:NSString_class_()];
    for (jint i = [sugQueue size] - 1; i >= 0; i--) {
      IOSObjectArray_Set(list, i, ((OrgApacheLuceneSearchSpellSuggestWord *) nil_chk([sugQueue pop]))->string_);
    }
    return list;
  }
  @finally {
    OrgApacheLuceneSearchSpellSpellChecker_releaseSearcherWithOrgApacheLuceneSearchIndexSearcher_(self, indexSearcher);
  }
}

+ (void)addWithOrgApacheLuceneSearchBooleanQuery_Builder:(OrgApacheLuceneSearchBooleanQuery_Builder *)q
                                            withNSString:(NSString *)name
                                            withNSString:(NSString *)value
                                               withFloat:(jfloat)boost {
  OrgApacheLuceneSearchSpellSpellChecker_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withNSString_withNSString_withFloat_(q, name, value, boost);
}

+ (void)addWithOrgApacheLuceneSearchBooleanQuery_Builder:(OrgApacheLuceneSearchBooleanQuery_Builder *)q
                                            withNSString:(NSString *)name
                                            withNSString:(NSString *)value {
  OrgApacheLuceneSearchSpellSpellChecker_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withNSString_withNSString_(q, name, value);
}

+ (IOSObjectArray *)formGramsWithNSString:(NSString *)text
                                  withInt:(jint)ng {
  return OrgApacheLuceneSearchSpellSpellChecker_formGramsWithNSString_withInt_(text, ng);
}

- (void)clearIndex {
  @synchronized(modifyCurrentIndexLock_) {
    OrgApacheLuceneSearchSpellSpellChecker_ensureOpen(self);
    OrgApacheLuceneStoreDirectory *dir = self->spellIndex_;
    OrgApacheLuceneIndexIndexWriter *writer = create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(dir, [create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(nil) setOpenModeWithOrgApacheLuceneIndexIndexWriterConfig_OpenMode:JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE)]);
    [writer close];
    OrgApacheLuceneSearchSpellSpellChecker_swapSearcherWithOrgApacheLuceneStoreDirectory_(self, dir);
  }
}

- (jboolean)existWithNSString:(NSString *)word {
  OrgApacheLuceneSearchIndexSearcher *indexSearcher = OrgApacheLuceneSearchSpellSpellChecker_obtainSearcher(self);
  @try {
    return [((OrgApacheLuceneIndexIndexReader *) nil_chk([((OrgApacheLuceneSearchIndexSearcher *) nil_chk(indexSearcher)) getIndexReader])) docFreqWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(OrgApacheLuceneSearchSpellSpellChecker_F_WORD, word)] > 0;
  }
  @finally {
    OrgApacheLuceneSearchSpellSpellChecker_releaseSearcherWithOrgApacheLuceneSearchIndexSearcher_(self, indexSearcher);
  }
}

- (void)indexDictionaryWithOrgApacheLuceneSearchSpellDictionary:(id<OrgApacheLuceneSearchSpellDictionary>)dict
                      withOrgApacheLuceneIndexIndexWriterConfig:(OrgApacheLuceneIndexIndexWriterConfig *)config
                                                    withBoolean:(jboolean)fullMerge {
  @synchronized(modifyCurrentIndexLock_) {
    OrgApacheLuceneSearchSpellSpellChecker_ensureOpen(self);
    OrgApacheLuceneStoreDirectory *dir = self->spellIndex_;
    OrgApacheLuceneIndexIndexWriter *writer = create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(dir, config);
    OrgApacheLuceneSearchIndexSearcher *indexSearcher = OrgApacheLuceneSearchSpellSpellChecker_obtainSearcher(self);
    id<JavaUtilList> termsEnums = create_JavaUtilArrayList_init();
    OrgApacheLuceneIndexIndexReader *reader = [((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher_)) getIndexReader];
    if ([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) maxDoc] > 0) {
      for (OrgApacheLuceneIndexLeafReaderContext * __strong ctx in nil_chk([reader leaves])) {
        OrgApacheLuceneIndexTerms *terms = JreRetainedLocalValue([((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(ctx)) reader])) termsWithNSString:OrgApacheLuceneSearchSpellSpellChecker_F_WORD]);
        if (terms != nil) [termsEnums addWithId:[terms iterator]];
      }
    }
    jboolean isEmpty = [termsEnums isEmpty];
    @try {
      id<OrgApacheLuceneUtilBytesRefIterator> iter = JreRetainedLocalValue([((id<OrgApacheLuceneSearchSpellDictionary>) nil_chk(dict)) getEntryIterator]);
      OrgApacheLuceneUtilBytesRef *currentTerm;
      while ((currentTerm = [((id<OrgApacheLuceneUtilBytesRefIterator>) nil_chk(iter)) next]) != nil) {
        {
          NSString *word = JreRetainedLocalValue([((OrgApacheLuceneUtilBytesRef *) nil_chk(currentTerm)) utf8ToString]);
          jint len = [((NSString *) nil_chk(word)) java_length];
          if (len < 3) {
            continue;
          }
          if (!isEmpty) {
            for (OrgApacheLuceneIndexTermsEnum * __strong te in termsEnums) {
              if ([((OrgApacheLuceneIndexTermsEnum *) nil_chk(te)) seekExactWithOrgApacheLuceneUtilBytesRef:currentTerm]) {
                goto continue_terms;
              }
            }
          }
          OrgApacheLuceneDocumentDocument *doc = OrgApacheLuceneSearchSpellSpellChecker_createDocumentWithNSString_withInt_withInt_(word, OrgApacheLuceneSearchSpellSpellChecker_getMinWithInt_(len), OrgApacheLuceneSearchSpellSpellChecker_getMaxWithInt_(len));
          [writer addDocumentWithJavaLangIterable:doc];
        }
        continue_terms: ;
      }
    }
    @finally {
      OrgApacheLuceneSearchSpellSpellChecker_releaseSearcherWithOrgApacheLuceneSearchIndexSearcher_(self, indexSearcher);
    }
    if (fullMerge) {
      [writer forceMergeWithInt:1];
    }
    [writer close];
    OrgApacheLuceneSearchSpellSpellChecker_swapSearcherWithOrgApacheLuceneStoreDirectory_(self, dir);
  }
}

+ (jint)getMinWithInt:(jint)l {
  return OrgApacheLuceneSearchSpellSpellChecker_getMinWithInt_(l);
}

+ (jint)getMaxWithInt:(jint)l {
  return OrgApacheLuceneSearchSpellSpellChecker_getMaxWithInt_(l);
}

+ (OrgApacheLuceneDocumentDocument *)createDocumentWithNSString:(NSString *)text
                                                        withInt:(jint)ng1
                                                        withInt:(jint)ng2 {
  return OrgApacheLuceneSearchSpellSpellChecker_createDocumentWithNSString_withInt_withInt_(text, ng1, ng2);
}

+ (void)addGramWithNSString:(NSString *)text
withOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)doc
                    withInt:(jint)ng1
                    withInt:(jint)ng2 {
  OrgApacheLuceneSearchSpellSpellChecker_addGramWithNSString_withOrgApacheLuceneDocumentDocument_withInt_withInt_(text, doc, ng1, ng2);
}

- (OrgApacheLuceneSearchIndexSearcher *)obtainSearcher {
  return OrgApacheLuceneSearchSpellSpellChecker_obtainSearcher(self);
}

- (void)releaseSearcherWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)aSearcher {
  OrgApacheLuceneSearchSpellSpellChecker_releaseSearcherWithOrgApacheLuceneSearchIndexSearcher_(self, aSearcher);
}

- (void)ensureOpen {
  OrgApacheLuceneSearchSpellSpellChecker_ensureOpen(self);
}

- (void)close {
  @synchronized(searcherLock_) {
    OrgApacheLuceneSearchSpellSpellChecker_ensureOpen(self);
    JreAssignVolatileBoolean(&closed_, true);
    if (searcher_ != nil) {
      [((OrgApacheLuceneIndexIndexReader *) nil_chk([searcher_ getIndexReader])) close];
    }
    JreStrongAssign(&searcher_, nil);
  }
}

- (void)swapSearcherWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneSearchSpellSpellChecker_swapSearcherWithOrgApacheLuceneStoreDirectory_(self, dir);
}

- (OrgApacheLuceneSearchIndexSearcher *)createSearcherWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  return create_OrgApacheLuceneSearchIndexSearcher_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneStoreDirectory_(dir));
}

- (jboolean)isClosed {
  return JreLoadVolatileBoolean(&closed_);
}

- (void)dealloc {
  RELEASE_(spellIndex_);
  RELEASE_(searcher_);
  RELEASE_(searcherLock_);
  RELEASE_(modifyCurrentIndexLock_);
  RELEASE_(sd_);
  RELEASE_(comparator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilComparator;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpellStringDistance;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 14, 15, 1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 14, 16, 1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 14, 17, 1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 14, 18, 1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 21, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 22, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 23, 24, 1, -1, -1, -1 },
    { NULL, "V", 0x11, 25, 26, 1, -1, -1, -1 },
    { NULL, "I", 0xa, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 29, 28, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentDocument;", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 32, 33, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchIndexSearcher;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 2, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchIndexSearcher;", 0x0, 37, 2, 1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneSearchSpellStringDistance:);
  methods[1].selector = @selector(initWithOrgApacheLuceneStoreDirectory:);
  methods[2].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneSearchSpellStringDistance:withJavaUtilComparator:);
  methods[3].selector = @selector(setSpellIndexWithOrgApacheLuceneStoreDirectory:);
  methods[4].selector = @selector(setComparatorWithJavaUtilComparator:);
  methods[5].selector = @selector(getComparator);
  methods[6].selector = @selector(setStringDistanceWithOrgApacheLuceneSearchSpellStringDistance:);
  methods[7].selector = @selector(getStringDistance);
  methods[8].selector = @selector(setAccuracyWithFloat:);
  methods[9].selector = @selector(getAccuracy);
  methods[10].selector = @selector(suggestSimilarWithNSString:withInt:);
  methods[11].selector = @selector(suggestSimilarWithNSString:withInt:withFloat:);
  methods[12].selector = @selector(suggestSimilarWithNSString:withInt:withOrgApacheLuceneIndexIndexReader:withNSString:withOrgApacheLuceneSearchSpellSuggestMode:);
  methods[13].selector = @selector(suggestSimilarWithNSString:withInt:withOrgApacheLuceneIndexIndexReader:withNSString:withOrgApacheLuceneSearchSpellSuggestMode:withFloat:);
  methods[14].selector = @selector(addWithOrgApacheLuceneSearchBooleanQuery_Builder:withNSString:withNSString:withFloat:);
  methods[15].selector = @selector(addWithOrgApacheLuceneSearchBooleanQuery_Builder:withNSString:withNSString:);
  methods[16].selector = @selector(formGramsWithNSString:withInt:);
  methods[17].selector = @selector(clearIndex);
  methods[18].selector = @selector(existWithNSString:);
  methods[19].selector = @selector(indexDictionaryWithOrgApacheLuceneSearchSpellDictionary:withOrgApacheLuceneIndexIndexWriterConfig:withBoolean:);
  methods[20].selector = @selector(getMinWithInt:);
  methods[21].selector = @selector(getMaxWithInt:);
  methods[22].selector = @selector(createDocumentWithNSString:withInt:withInt:);
  methods[23].selector = @selector(addGramWithNSString:withOrgApacheLuceneDocumentDocument:withInt:withInt:);
  methods[24].selector = @selector(obtainSearcher);
  methods[25].selector = @selector(releaseSearcherWithOrgApacheLuceneSearchIndexSearcher:);
  methods[26].selector = @selector(ensureOpen);
  methods[27].selector = @selector(close);
  methods[28].selector = @selector(swapSearcherWithOrgApacheLuceneStoreDirectory:);
  methods[29].selector = @selector(createSearcherWithOrgApacheLuceneStoreDirectory:);
  methods[30].selector = @selector(isClosed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_ACCURACY", "F", .constantValue.asFloat = OrgApacheLuceneSearchSpellSpellChecker_DEFAULT_ACCURACY, 0x19, -1, -1, -1, -1 },
    { "F_WORD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "spellIndex_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bStart_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bEnd_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "searcher_", "LOrgApacheLuceneSearchIndexSearcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "searcherLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "modifyCurrentIndexLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "accuracy_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sd_", "LOrgApacheLuceneSearchSpellStringDistance;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "comparator_", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneSearchSpellStringDistance;", "LJavaIoIOException;", "LOrgApacheLuceneStoreDirectory;", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneSearchSpellStringDistance;LJavaUtilComparator;", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;Ljava/util/Comparator<Lorg/apache/lucene/search/spell/SuggestWord;>;)V", "setSpellIndex", "setComparator", "LJavaUtilComparator;", "(Ljava/util/Comparator<Lorg/apache/lucene/search/spell/SuggestWord;>;)V", "()Ljava/util/Comparator<Lorg/apache/lucene/search/spell/SuggestWord;>;", "setStringDistance", "LOrgApacheLuceneSearchSpellStringDistance;", "setAccuracy", "F", "suggestSimilar", "LNSString;I", "LNSString;IF", "LNSString;ILOrgApacheLuceneIndexIndexReader;LNSString;LOrgApacheLuceneSearchSpellSuggestMode;", "LNSString;ILOrgApacheLuceneIndexIndexReader;LNSString;LOrgApacheLuceneSearchSpellSuggestMode;F", "add", "LOrgApacheLuceneSearchBooleanQuery_Builder;LNSString;LNSString;F", "LOrgApacheLuceneSearchBooleanQuery_Builder;LNSString;LNSString;", "formGrams", "exist", "LNSString;", "indexDictionary", "LOrgApacheLuceneSearchSpellDictionary;LOrgApacheLuceneIndexIndexWriterConfig;Z", "getMin", "I", "getMax", "createDocument", "LNSString;II", "addGram", "LNSString;LOrgApacheLuceneDocumentDocument;II", "releaseSearcher", "LOrgApacheLuceneSearchIndexSearcher;", "swapSearcher", "createSearcher", &OrgApacheLuceneSearchSpellSpellChecker_F_WORD, "Ljava/util/Comparator<Lorg/apache/lucene/search/spell/SuggestWord;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellSpellChecker = { "SpellChecker", "org.apache.lucene.search.spell", ptrTable, methods, fields, 7, 0x1, 31, 12, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpellSpellChecker;
}

@end

void OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_(OrgApacheLuceneSearchSpellSpellChecker *self, OrgApacheLuceneStoreDirectory *spellIndex, id<OrgApacheLuceneSearchSpellStringDistance> sd) {
  OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_withJavaUtilComparator_(self, spellIndex, sd, JreLoadStatic(OrgApacheLuceneSearchSpellSuggestWordQueue, DEFAULT_COMPARATOR));
}

OrgApacheLuceneSearchSpellSpellChecker *new_OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_(OrgApacheLuceneStoreDirectory *spellIndex, id<OrgApacheLuceneSearchSpellStringDistance> sd) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellSpellChecker, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_, spellIndex, sd)
}

OrgApacheLuceneSearchSpellSpellChecker *create_OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_(OrgApacheLuceneStoreDirectory *spellIndex, id<OrgApacheLuceneSearchSpellStringDistance> sd) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellSpellChecker, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_, spellIndex, sd)
}

void OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneSearchSpellSpellChecker *self, OrgApacheLuceneStoreDirectory *spellIndex) {
  OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_(self, spellIndex, create_OrgApacheLuceneSearchSpellLevensteinDistance_init());
}

OrgApacheLuceneSearchSpellSpellChecker *new_OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *spellIndex) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellSpellChecker, initWithOrgApacheLuceneStoreDirectory_, spellIndex)
}

OrgApacheLuceneSearchSpellSpellChecker *create_OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *spellIndex) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellSpellChecker, initWithOrgApacheLuceneStoreDirectory_, spellIndex)
}

void OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_withJavaUtilComparator_(OrgApacheLuceneSearchSpellSpellChecker *self, OrgApacheLuceneStoreDirectory *spellIndex, id<OrgApacheLuceneSearchSpellStringDistance> sd, id<JavaUtilComparator> comparator) {
  NSObject_init(self);
  self->bStart_ = 2.0f;
  self->bEnd_ = 1.0f;
  JreStrongAssignAndConsume(&self->searcherLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->modifyCurrentIndexLock_, new_NSObject_init());
  JreAssignVolatileBoolean(&self->closed_, false);
  self->accuracy_ = OrgApacheLuceneSearchSpellSpellChecker_DEFAULT_ACCURACY;
  [self setSpellIndexWithOrgApacheLuceneStoreDirectory:spellIndex];
  [self setStringDistanceWithOrgApacheLuceneSearchSpellStringDistance:sd];
  JreStrongAssign(&self->comparator_, comparator);
}

OrgApacheLuceneSearchSpellSpellChecker *new_OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_withJavaUtilComparator_(OrgApacheLuceneStoreDirectory *spellIndex, id<OrgApacheLuceneSearchSpellStringDistance> sd, id<JavaUtilComparator> comparator) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellSpellChecker, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_withJavaUtilComparator_, spellIndex, sd, comparator)
}

OrgApacheLuceneSearchSpellSpellChecker *create_OrgApacheLuceneSearchSpellSpellChecker_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_withJavaUtilComparator_(OrgApacheLuceneStoreDirectory *spellIndex, id<OrgApacheLuceneSearchSpellStringDistance> sd, id<JavaUtilComparator> comparator) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellSpellChecker, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneSearchSpellStringDistance_withJavaUtilComparator_, spellIndex, sd, comparator)
}

void OrgApacheLuceneSearchSpellSpellChecker_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withNSString_withNSString_withFloat_(OrgApacheLuceneSearchBooleanQuery_Builder *q, NSString *name, NSString *value, jfloat boost) {
  OrgApacheLuceneSearchSpellSpellChecker_initialize();
  OrgApacheLuceneSearchQuery *tq = create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(name, value));
  [tq setBoostWithFloat:boost];
  [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(q)) addWithOrgApacheLuceneSearchBooleanClause:create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(tq, JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD))];
}

void OrgApacheLuceneSearchSpellSpellChecker_addWithOrgApacheLuceneSearchBooleanQuery_Builder_withNSString_withNSString_(OrgApacheLuceneSearchBooleanQuery_Builder *q, NSString *name, NSString *value) {
  OrgApacheLuceneSearchSpellSpellChecker_initialize();
  [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(q)) addWithOrgApacheLuceneSearchBooleanClause:create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(name, value)), JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD))];
}

IOSObjectArray *OrgApacheLuceneSearchSpellSpellChecker_formGramsWithNSString_withInt_(NSString *text, jint ng) {
  OrgApacheLuceneSearchSpellSpellChecker_initialize();
  jint len = [((NSString *) nil_chk(text)) java_length];
  IOSObjectArray *res = [IOSObjectArray arrayWithLength:len - ng + 1 type:NSString_class_()];
  for (jint i = 0; i < len - ng + 1; i++) {
    IOSObjectArray_Set(res, i, [text java_substring:i endIndex:i + ng]);
  }
  return res;
}

jint OrgApacheLuceneSearchSpellSpellChecker_getMinWithInt_(jint l) {
  OrgApacheLuceneSearchSpellSpellChecker_initialize();
  if (l > 5) {
    return 3;
  }
  if (l == 5) {
    return 2;
  }
  return 1;
}

jint OrgApacheLuceneSearchSpellSpellChecker_getMaxWithInt_(jint l) {
  OrgApacheLuceneSearchSpellSpellChecker_initialize();
  if (l > 5) {
    return 4;
  }
  if (l == 5) {
    return 3;
  }
  return 2;
}

OrgApacheLuceneDocumentDocument *OrgApacheLuceneSearchSpellSpellChecker_createDocumentWithNSString_withInt_withInt_(NSString *text, jint ng1, jint ng2) {
  OrgApacheLuceneSearchSpellSpellChecker_initialize();
  OrgApacheLuceneDocumentDocument *doc = create_OrgApacheLuceneDocumentDocument_init();
  OrgApacheLuceneDocumentField *f = create_OrgApacheLuceneDocumentStringField_initWithNSString_withNSString_withOrgApacheLuceneDocumentField_Store_(OrgApacheLuceneSearchSpellSpellChecker_F_WORD, text, JreLoadEnum(OrgApacheLuceneDocumentField_Store, YES));
  [doc addWithOrgApacheLuceneIndexIndexableField:f];
  OrgApacheLuceneSearchSpellSpellChecker_addGramWithNSString_withOrgApacheLuceneDocumentDocument_withInt_withInt_(text, doc, ng1, ng2);
  return doc;
}

void OrgApacheLuceneSearchSpellSpellChecker_addGramWithNSString_withOrgApacheLuceneDocumentDocument_withInt_withInt_(NSString *text, OrgApacheLuceneDocumentDocument *doc, jint ng1, jint ng2) {
  OrgApacheLuceneSearchSpellSpellChecker_initialize();
  jint len = [((NSString *) nil_chk(text)) java_length];
  for (jint ng = ng1; ng <= ng2; ng++) {
    NSString *key = JreStrcat("$I", @"gram", ng);
    NSString *end = nil;
    for (jint i = 0; i < len - ng + 1; i++) {
      NSString *gram = [text java_substring:i endIndex:i + ng];
      OrgApacheLuceneDocumentFieldType *ft = create_OrgApacheLuceneDocumentFieldType_initWithOrgApacheLuceneDocumentFieldType_(JreLoadStatic(OrgApacheLuceneDocumentStringField, TYPE_NOT_STORED));
      [ft setIndexOptionsWithOrgApacheLuceneIndexIndexOptions:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS)];
      OrgApacheLuceneDocumentField *ngramField = create_OrgApacheLuceneDocumentField_initWithNSString_withNSString_withOrgApacheLuceneDocumentFieldType_(key, gram, ft);
      [((OrgApacheLuceneDocumentDocument *) nil_chk(doc)) addWithOrgApacheLuceneIndexIndexableField:ngramField];
      if (i == 0) {
        OrgApacheLuceneDocumentField *startField = create_OrgApacheLuceneDocumentStringField_initWithNSString_withNSString_withOrgApacheLuceneDocumentField_Store_(JreStrcat("$I", @"start", ng), gram, JreLoadEnum(OrgApacheLuceneDocumentField_Store, NO));
        [doc addWithOrgApacheLuceneIndexIndexableField:startField];
      }
      end = gram;
    }
    if (end != nil) {
      OrgApacheLuceneDocumentField *endField = create_OrgApacheLuceneDocumentStringField_initWithNSString_withNSString_withOrgApacheLuceneDocumentField_Store_(JreStrcat("$I", @"end", ng), end, JreLoadEnum(OrgApacheLuceneDocumentField_Store, NO));
      [((OrgApacheLuceneDocumentDocument *) nil_chk(doc)) addWithOrgApacheLuceneIndexIndexableField:endField];
    }
  }
}

OrgApacheLuceneSearchIndexSearcher *OrgApacheLuceneSearchSpellSpellChecker_obtainSearcher(OrgApacheLuceneSearchSpellSpellChecker *self) {
  @synchronized(self->searcherLock_) {
    OrgApacheLuceneSearchSpellSpellChecker_ensureOpen(self);
    [((OrgApacheLuceneIndexIndexReader *) nil_chk([((OrgApacheLuceneSearchIndexSearcher *) nil_chk(self->searcher_)) getIndexReader])) incRef];
    return JreRetainedLocalValue(self->searcher_);
  }
}

void OrgApacheLuceneSearchSpellSpellChecker_releaseSearcherWithOrgApacheLuceneSearchIndexSearcher_(OrgApacheLuceneSearchSpellSpellChecker *self, OrgApacheLuceneSearchIndexSearcher *aSearcher) {
  [((OrgApacheLuceneIndexIndexReader *) nil_chk([((OrgApacheLuceneSearchIndexSearcher *) nil_chk(aSearcher)) getIndexReader])) decRef];
}

void OrgApacheLuceneSearchSpellSpellChecker_ensureOpen(OrgApacheLuceneSearchSpellSpellChecker *self) {
  if (JreLoadVolatileBoolean(&self->closed_)) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"Spellchecker has been closed");
  }
}

void OrgApacheLuceneSearchSpellSpellChecker_swapSearcherWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneSearchSpellSpellChecker *self, OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneSearchIndexSearcher *indexSearcher = [self createSearcherWithOrgApacheLuceneStoreDirectory:dir];
  @synchronized(self->searcherLock_) {
    if (JreLoadVolatileBoolean(&self->closed_)) {
      [((OrgApacheLuceneIndexIndexReader *) nil_chk([((OrgApacheLuceneSearchIndexSearcher *) nil_chk(indexSearcher)) getIndexReader])) close];
      @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"Spellchecker has been closed");
    }
    if (self->searcher_ != nil) {
      [((OrgApacheLuceneIndexIndexReader *) nil_chk([self->searcher_ getIndexReader])) close];
    }
    JreStrongAssign(&self->searcher_, indexSearcher);
    JreStrongAssign(&self->spellIndex_, dir);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellSpellChecker)
