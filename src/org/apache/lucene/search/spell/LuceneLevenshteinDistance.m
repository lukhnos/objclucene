//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/search/spell/LuceneLevenshteinDistance.h"
#include "org/apache/lucene/util/IntsRef.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spell/LuceneLevenshteinDistance must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchSpellLuceneLevenshteinDistance ()

+ (OrgApacheLuceneUtilIntsRef *)toIntsRefWithNSString:(NSString *)s;

@end

__attribute__((unused)) static OrgApacheLuceneUtilIntsRef *OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_toIntsRefWithNSString_(NSString *s);

@implementation OrgApacheLuceneSearchSpellLuceneLevenshteinDistance

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jfloat)getDistanceWithNSString:(NSString *)target
                     withNSString:(NSString *)other {
  OrgApacheLuceneUtilIntsRef *targetPoints;
  OrgApacheLuceneUtilIntsRef *otherPoints;
  jint n;
  IOSObjectArray *d;
  targetPoints = OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_toIntsRefWithNSString_(target);
  otherPoints = OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_toIntsRefWithNSString_(other);
  n = ((OrgApacheLuceneUtilIntsRef *) nil_chk(targetPoints))->length_;
  jint m = ((OrgApacheLuceneUtilIntsRef *) nil_chk(otherPoints))->length_;
  d = [IOSIntArray arrayWithDimensions:2 lengths:(jint[]){ n + 1, m + 1 }];
  if (n == 0 || m == 0) {
    if (n == m) {
      return 0;
    }
    else {
      return JavaLangMath_maxWithInt_withInt_(n, m);
    }
  }
  jint i;
  jint j;
  jint t_j;
  jint cost;
  for (i = 0; i <= n; i++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), 0) = i;
  }
  for (j = 0; j <= m; j++) {
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, 0)), j) = j;
  }
  for (j = 1; j <= m; j++) {
    t_j = IOSIntArray_Get(nil_chk(otherPoints->ints_), j - 1);
    for (i = 1; i <= n; i++) {
      cost = IOSIntArray_Get(nil_chk(targetPoints->ints_), i - 1) == t_j ? 0 : 1;
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), j) = JavaLangMath_minWithInt_withInt_(JavaLangMath_minWithInt_withInt_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i - 1)), j) + 1, IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i)), j - 1) + 1), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i - 1)), j - 1) + cost);
      if (i > 1 && j > 1 && IOSIntArray_Get(nil_chk(targetPoints->ints_), i - 1) == IOSIntArray_Get(otherPoints->ints_, j - 2) && IOSIntArray_Get(targetPoints->ints_, i - 2) == IOSIntArray_Get(otherPoints->ints_, j - 1)) {
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), j) = JavaLangMath_minWithInt_withInt_(IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i)), j), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, i - 2)), j - 2) + cost);
      }
    }
  }
  return 1.0f - ((jfloat) IOSIntArray_Get(nil_chk(IOSObjectArray_Get(d, n)), m) / JavaLangMath_minWithInt_withInt_(m, n));
}

+ (OrgApacheLuceneUtilIntsRef *)toIntsRefWithNSString:(NSString *)s {
  return OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_toIntsRefWithNSString_(s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0xa, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDistanceWithNSString:withNSString:);
  methods[2].selector = @selector(toIntsRefWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getDistance", "LNSString;LNSString;", "toIntsRef", "LNSString;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpellLuceneLevenshteinDistance = { "LuceneLevenshteinDistance", "org.apache.lucene.search.spell", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpellLuceneLevenshteinDistance;
}

@end

void OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_init(OrgApacheLuceneSearchSpellLuceneLevenshteinDistance *self) {
  NSObject_init(self);
}

OrgApacheLuceneSearchSpellLuceneLevenshteinDistance *new_OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpellLuceneLevenshteinDistance, init)
}

OrgApacheLuceneSearchSpellLuceneLevenshteinDistance *create_OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpellLuceneLevenshteinDistance, init)
}

OrgApacheLuceneUtilIntsRef *OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_toIntsRefWithNSString_(NSString *s) {
  OrgApacheLuceneSearchSpellLuceneLevenshteinDistance_initialize();
  OrgApacheLuceneUtilIntsRef *ref = create_OrgApacheLuceneUtilIntsRef_initWithInt_([((NSString *) nil_chk(s)) java_length]);
  jint utf16Len = [s java_length];
  for (jint i = 0, cp = 0; i < utf16Len; i += JavaLangCharacter_charCountWithInt_(cp)) {
    cp = *IOSIntArray_GetRef(nil_chk(ref->ints_), ref->length_++) = JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(s, i);
  }
  return ref;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpellLuceneLevenshteinDistance)
