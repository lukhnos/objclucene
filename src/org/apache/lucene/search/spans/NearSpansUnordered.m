//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/spans/NearSpans.h"
#include "org/apache/lucene/search/spans/NearSpansUnordered.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/PriorityQueue.h"

@class OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue;
@class OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spans/NearSpansUnordered must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneSearchSpansNearSpansUnordered () {
 @public
  id<JavaUtilList> subSpanCells_;
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *spanPositionQueue_;
  /*!
   @brief SpansCell wraps a sub Spans to maintain totalSpanLength and maxEndPositionCell
   */
  jint totalSpanLength_;
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *maxEndPositionCell_;
}

- (void)singleCellToPositionQueue;

- (void)subSpanCellsToPositionQueue;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)minPositionCell;

- (jboolean)atMatch;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, subSpanCells_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, spanPositionQueue_, OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered, maxEndPositionCell_, OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_singleCellToPositionQueue(OrgApacheLuceneSearchSpansNearSpansUnordered *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_subSpanCellsToPositionQueue(OrgApacheLuceneSearchSpansNearSpansUnordered *self);

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(OrgApacheLuceneSearchSpansNearSpansUnordered *self);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(OrgApacheLuceneSearchSpansNearSpansUnordered *self);

@interface OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell : OrgApacheLuceneSearchSpansSpans {
 @public
  OrgApacheLuceneSearchSpansNearSpansUnordered *this$0_;
  jint spanLength_;
  OrgApacheLuceneSearchSpansSpans *in_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansNearSpansUnordered:(OrgApacheLuceneSearchSpansNearSpansUnordered *)outer$
                                 withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans;

- (jint)nextStartPosition;

- (void)adjustLength;

- (void)adjustMax;

- (jint)startPosition;

- (jint)endPosition;

- (jint)width;

- (void)collectWithOrgApacheLuceneSearchSpansSpanCollector:(id<OrgApacheLuceneSearchSpansSpanCollector>)collector;

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator;

- (jint)docID;

- (jint)nextDoc;

- (jint)advanceWithInt:(jint)target;

- (jlong)cost;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell, in_, OrgApacheLuceneSearchSpansSpans *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self, OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans);

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *new_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *create_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustLength(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustMax(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell)

@interface OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue : OrgApacheLuceneUtilPriorityQueue

- (instancetype)initWithInt:(jint)size;

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)spans1
                    withId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)spans2;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)pop;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)top;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)insertWithOverflowWithId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)arg0;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)addWithId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)arg0;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)getSentinelObject;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)updateTopWithId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)arg0;

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)updateTop;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue_initWithInt_(OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *self, jint size);

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *new_OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue_initWithInt_(jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *create_OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue_initWithInt_(jint size);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue)

@implementation OrgApacheLuceneSearchSpansNearSpansUnordered

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNearQuery:(OrgApacheLuceneSearchSpansSpanNearQuery *)query
                                               withJavaUtilList:(id<JavaUtilList>)subSpans {
  OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(self, query, subSpans);
  return self;
}

- (void)singleCellToPositionQueue {
  OrgApacheLuceneSearchSpansNearSpansUnordered_singleCellToPositionQueue(self);
}

- (void)subSpanCellsToPositionQueue {
  OrgApacheLuceneSearchSpansNearSpansUnordered_subSpanCellsToPositionQueue(self);
}

+ (jboolean)positionsOrderedWithOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans1
                            withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans2 {
  return OrgApacheLuceneSearchSpansNearSpansUnordered_positionsOrderedWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpans_(spans1, spans2);
}

- (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)minPositionCell {
  return OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self);
}

- (jboolean)atMatch {
  return OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(self);
}

- (jboolean)twoPhaseCurrentDocMatches {
  OrgApacheLuceneSearchSpansNearSpansUnordered_subSpanCellsToPositionQueue(self);
  while (true) {
    if (OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(self)) {
      atFirstInCurrentDoc_ = true;
      oneExhaustedInCurrentDoc_ = false;
      return true;
    }
    JreAssert([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) startPosition] != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, @"org/apache/lucene/search/spans/NearSpansUnordered.java:201 condition failed: assert minPositionCell().startPosition() != NO_MORE_POSITIONS;");
    if ([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) nextStartPosition] != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS) {
      [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *) nil_chk(spanPositionQueue_)) updateTop];
    }
    else {
      return false;
    }
  }
}

- (jint)nextStartPosition {
  if (atFirstInCurrentDoc_) {
    atFirstInCurrentDoc_ = false;
    return [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) startPosition];
  }
  while ([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) startPosition] == -1) {
    [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) nextStartPosition];
    [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *) nil_chk(spanPositionQueue_)) updateTop];
  }
  JreAssert([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) startPosition] != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, @"org/apache/lucene/search/spans/NearSpansUnordered.java:221 condition failed: assert minPositionCell().startPosition() != NO_MORE_POSITIONS;");
  while (true) {
    if ([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) nextStartPosition] == OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS) {
      oneExhaustedInCurrentDoc_ = true;
      return OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS;
    }
    [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *) nil_chk(spanPositionQueue_)) updateTop];
    if (OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(self)) {
      return [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) startPosition];
    }
  }
}

- (jint)startPosition {
  JreAssert(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self) != nil, @"org/apache/lucene/search/spans/NearSpansUnordered.java:236 condition failed: assert minPositionCell() != null;");
  return atFirstInCurrentDoc_ ? -1 : oneExhaustedInCurrentDoc_ ? OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS : [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) startPosition];
}

- (jint)endPosition {
  return atFirstInCurrentDoc_ ? -1 : oneExhaustedInCurrentDoc_ ? OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS : [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(maxEndPositionCell_)) endPosition];
}

- (jint)width {
  return [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(maxEndPositionCell_)) startPosition] - [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) startPosition];
}

- (void)collectWithOrgApacheLuceneSearchSpansSpanCollector:(id<OrgApacheLuceneSearchSpansSpanCollector>)collector {
  for (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell * __strong cell in nil_chk(subSpanCells_)) {
    [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(cell)) collectWithOrgApacheLuceneSearchSpansSpanCollector:collector];
  }
}

- (NSString *)description {
  if (OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self) != nil) {
    return JreStrcat("$C$$$", [[self java_getClass] getName], '(', [((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(query_)) description], @")@", (JreStrcat("ICICI", [self docID], ':', [self startPosition], '-', [self endPosition])));
  }
  else {
    return JreStrcat("$C$$", [[self java_getClass] getName], '(', [((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(query_)) description], @")@ ?START?");
  }
}

- (void)dealloc {
  RELEASE_(subSpanCells_);
  RELEASE_(spanPositionQueue_);
  RELEASE_(maxEndPositionCell_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x18, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanNearQuery:withJavaUtilList:);
  methods[1].selector = @selector(singleCellToPositionQueue);
  methods[2].selector = @selector(subSpanCellsToPositionQueue);
  methods[3].selector = @selector(positionsOrderedWithOrgApacheLuceneSearchSpansSpans:withOrgApacheLuceneSearchSpansSpans:);
  methods[4].selector = @selector(minPositionCell);
  methods[5].selector = @selector(atMatch);
  methods[6].selector = @selector(twoPhaseCurrentDocMatches);
  methods[7].selector = @selector(nextStartPosition);
  methods[8].selector = @selector(startPosition);
  methods[9].selector = @selector(endPosition);
  methods[10].selector = @selector(width);
  methods[11].selector = @selector(collectWithOrgApacheLuceneSearchSpansSpanCollector:);
  methods[12].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subSpanCells_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "spanPositionQueue_", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalSpanLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxEndPositionCell_", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanNearQuery;LJavaUtilList;", "LJavaIoIOException;", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Ljava/util/List<Lorg/apache/lucene/search/spans/Spans;>;)V", "positionsOrdered", "LOrgApacheLuceneSearchSpansSpans;LOrgApacheLuceneSearchSpansSpans;", "collect", "LOrgApacheLuceneSearchSpansSpanCollector;", "toString", "Ljava/util/List<Lorg/apache/lucene/search/spans/NearSpansUnordered$SpansCell;>;", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;LOrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansNearSpansUnordered = { "NearSpansUnordered", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 13, 4, -1, 9, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansNearSpansUnordered;
}

@end

void OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(OrgApacheLuceneSearchSpansNearSpansUnordered *self, OrgApacheLuceneSearchSpansSpanNearQuery *query, id<JavaUtilList> subSpans) {
  OrgApacheLuceneSearchSpansNearSpans_initPackagePrivateWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(self, query, subSpans);
  JreStrongAssignAndConsume(&self->subSpanCells_, new_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(subSpans)) size]));
  for (OrgApacheLuceneSearchSpansSpans * __strong subSpan in subSpans) {
    [((id<JavaUtilList>) nil_chk(self->subSpanCells_)) addWithId:create_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_(self, subSpan)];
  }
  JreStrongAssignAndConsume(&self->spanPositionQueue_, new_OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue_initWithInt_([subSpans size]));
  OrgApacheLuceneSearchSpansNearSpansUnordered_singleCellToPositionQueue(self);
}

OrgApacheLuceneSearchSpansNearSpansUnordered *new_OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(OrgApacheLuceneSearchSpansSpanNearQuery *query, id<JavaUtilList> subSpans) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered, initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_, query, subSpans)
}

OrgApacheLuceneSearchSpansNearSpansUnordered *create_OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(OrgApacheLuceneSearchSpansSpanNearQuery *query, id<JavaUtilList> subSpans) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered, initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_, query, subSpans)
}

void OrgApacheLuceneSearchSpansNearSpansUnordered_singleCellToPositionQueue(OrgApacheLuceneSearchSpansNearSpansUnordered *self) {
  JreStrongAssign(&self->maxEndPositionCell_, [((id<JavaUtilList>) nil_chk(self->subSpanCells_)) getWithInt:0]);
  JreAssert([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->maxEndPositionCell_)) docID] == -1, @"org/apache/lucene/search/spans/NearSpansUnordered.java:53 condition failed: assert maxEndPositionCell.docID() == -1;");
  JreAssert([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->maxEndPositionCell_)) startPosition] == -1, @"org/apache/lucene/search/spans/NearSpansUnordered.java:54 condition failed: assert maxEndPositionCell.startPosition() == -1;");
  [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *) nil_chk(self->spanPositionQueue_)) addWithId:self->maxEndPositionCell_];
}

void OrgApacheLuceneSearchSpansNearSpansUnordered_subSpanCellsToPositionQueue(OrgApacheLuceneSearchSpansNearSpansUnordered *self) {
  [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *) nil_chk(self->spanPositionQueue_)) clear];
  for (OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell * __strong cell in nil_chk(self->subSpanCells_)) {
    JreAssert([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(cell)) startPosition] == -1, @"org/apache/lucene/search/spans/NearSpansUnordered.java:61 condition failed: assert cell.startPosition() == -1;");
    [cell nextStartPosition];
    JreAssert([cell startPosition] != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, @"org/apache/lucene/search/spans/NearSpansUnordered.java:63 condition failed: assert cell.startPosition() != NO_MORE_POSITIONS;");
    [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *) nil_chk(self->spanPositionQueue_)) addWithId:cell];
  }
}

jboolean OrgApacheLuceneSearchSpansNearSpansUnordered_positionsOrderedWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansSpans *spans1, OrgApacheLuceneSearchSpansSpans *spans2) {
  OrgApacheLuceneSearchSpansNearSpansUnordered_initialize();
  JreAssert([((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans1)) docID] == [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans2)) docID], JreStrcat("$I$I", @"doc1 ", [spans1 docID], @" != doc2 ", [spans2 docID]));
  jint start1 = [spans1 startPosition];
  jint start2 = [spans2 startPosition];
  return (start1 == start2) ? ([spans1 endPosition] < [spans2 endPosition]) : (start1 < start2);
}

OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(OrgApacheLuceneSearchSpansNearSpansUnordered *self) {
  return [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *) nil_chk(self->spanPositionQueue_)) top];
}

jboolean OrgApacheLuceneSearchSpansNearSpansUnordered_atMatch(OrgApacheLuceneSearchSpansNearSpansUnordered *self) {
  JreAssert([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) docID] == [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->maxEndPositionCell_)) docID], @"org/apache/lucene/search/spans/NearSpansUnordered.java:187 condition failed: assert minPositionCell().docID() == maxEndPositionCell.docID();");
  return ([((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->maxEndPositionCell_)) endPosition] - [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(OrgApacheLuceneSearchSpansNearSpansUnordered_minPositionCell(self))) startPosition] - self->totalSpanLength_) <= self->allowedSlop_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansNearSpansUnordered)

@implementation OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell

- (instancetype)initWithOrgApacheLuceneSearchSpansNearSpansUnordered:(OrgApacheLuceneSearchSpansNearSpansUnordered *)outer$
                                 withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans {
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_(self, outer$, spans);
  return self;
}

- (jint)nextStartPosition {
  jint res = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) nextStartPosition];
  if (res != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS) {
    OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustLength(self);
  }
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustMax(self);
  return res;
}

- (void)adjustLength {
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustLength(self);
}

- (void)adjustMax {
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustMax(self);
}

- (jint)startPosition {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) startPosition];
}

- (jint)endPosition {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) endPosition];
}

- (jint)width {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) width];
}

- (void)collectWithOrgApacheLuceneSearchSpansSpanCollector:(id<OrgApacheLuceneSearchSpansSpanCollector>)collector {
  [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) collectWithOrgApacheLuceneSearchSpansSpanCollector:collector];
}

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) asTwoPhaseIterator];
}

- (jint)docID {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) docID];
}

- (jint)nextDoc {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) nextDoc];
}

- (jint)advanceWithInt:(jint)target {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) advanceWithInt:target];
}

- (jlong)cost {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) cost];
}

- (NSString *)description {
  return JreStrcat("$$C", @"NearSpansUnordered.SpansCell(", [((OrgApacheLuceneSearchSpansSpans *) nil_chk(in_)) description], ')');
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(in_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchTwoPhaseIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansNearSpansUnordered:withOrgApacheLuceneSearchSpansSpans:);
  methods[1].selector = @selector(nextStartPosition);
  methods[2].selector = @selector(adjustLength);
  methods[3].selector = @selector(adjustMax);
  methods[4].selector = @selector(startPosition);
  methods[5].selector = @selector(endPosition);
  methods[6].selector = @selector(width);
  methods[7].selector = @selector(collectWithOrgApacheLuceneSearchSpansSpanCollector:);
  methods[8].selector = @selector(asTwoPhaseIterator);
  methods[9].selector = @selector(docID);
  methods[10].selector = @selector(nextDoc);
  methods[11].selector = @selector(advanceWithInt:);
  methods[12].selector = @selector(cost);
  methods[13].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansNearSpansUnordered;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "spanLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "in_", "LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansNearSpansUnordered;LOrgApacheLuceneSearchSpansSpans;", "LJavaIoIOException;", "collect", "LOrgApacheLuceneSearchSpansSpanCollector;", "advance", "I", "toString", "LOrgApacheLuceneSearchSpansNearSpansUnordered;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell = { "SpansCell", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x2, 14, 3, 7, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;
}

@end

void OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self, OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchSpansSpans_init(self);
  self->spanLength_ = -1;
  JreStrongAssign(&self->in_, spans);
}

OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *new_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell, initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_, outer$, spans)
}

OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *create_OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansNearSpansUnordered *outer$, OrgApacheLuceneSearchSpansSpans *spans) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell, initWithOrgApacheLuceneSearchSpansNearSpansUnordered_withOrgApacheLuceneSearchSpansSpans_, outer$, spans)
}

void OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustLength(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self) {
  if (self->spanLength_ != -1) {
    self->this$0_->totalSpanLength_ -= self->spanLength_;
  }
  JreAssert([((OrgApacheLuceneSearchSpansSpans *) nil_chk(self->in_)) startPosition] != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, @"org/apache/lucene/search/spans/NearSpansUnordered.java:94 condition failed: assert in.startPosition() != NO_MORE_POSITIONS;");
  self->spanLength_ = [self endPosition] - [self startPosition];
  JreAssert(self->spanLength_ >= 0, @"org/apache/lucene/search/spans/NearSpansUnordered.java:96 condition failed: assert spanLength >= 0;");
  self->this$0_->totalSpanLength_ += self->spanLength_;
}

void OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell_adjustMax(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *self) {
  JreAssert([self docID] == [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->this$0_->maxEndPositionCell_)) docID], @"org/apache/lucene/search/spans/NearSpansUnordered.java:101 condition failed: assert docID() == maxEndPositionCell.docID();");
  if ([self endPosition] > [((OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *) nil_chk(self->this$0_->maxEndPositionCell_)) endPosition]) {
    JreStrongAssign(&self->this$0_->maxEndPositionCell_, self);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell)

@implementation OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue_initWithInt_(self, size);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)spans1
                    withId:(OrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell *)spans2 {
  return OrgApacheLuceneSearchSpansNearSpansUnordered_positionsOrderedWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpans_(spans1, spans2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x14, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(lessThanWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "lessThan", "LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;LOrgApacheLuceneSearchSpansNearSpansUnordered_SpansCell;", "LOrgApacheLuceneSearchSpansNearSpansUnordered;", "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/search/spans/NearSpansUnordered$SpansCell;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue = { "SpanPositionQueue", "org.apache.lucene.search.spans", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue;
}

@end

void OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue_initWithInt_(OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *self, jint size) {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_(self, size);
}

OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *new_OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue, initWithInt_, size)
}

OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue *create_OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue, initWithInt_, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansNearSpansUnordered_SpanPositionQueue)
