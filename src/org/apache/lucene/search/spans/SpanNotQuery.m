//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/spans/FilterSpans.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "org/lukhnos/portmobile/util/Objects.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spans/SpanNotQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchSpansSpanNotQuery () {
 @public
  OrgApacheLuceneSearchSpansSpanQuery *include_;
  OrgApacheLuceneSearchSpansSpanQuery *exclude_;
  jint pre_;
  jint post_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNotQuery, include_, OrgApacheLuceneSearchSpansSpanQuery *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNotQuery, exclude_, OrgApacheLuceneSearchSpansSpanQuery *)

@interface OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight () {
 @public
  OrgApacheLuceneSearchSpansSpanNotQuery *this$0_;
}

@end

@interface OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1 : OrgApacheLuceneSearchSpansFilterSpans {
 @public
  OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *this$0_;
  OrgApacheLuceneSearchSpansSpans *val$excludeSpans_;
  OrgApacheLuceneSearchTwoPhaseIterator *val$excludeTwoPhase_;
  OrgApacheLuceneSearchDocIdSetIterator *val$excludeApproximation_;
  jint lastApproxDoc_;
  jboolean lastApproxResult_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight:(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *)outer$
                                         withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)capture$0
                                   withOrgApacheLuceneSearchTwoPhaseIterator:(OrgApacheLuceneSearchTwoPhaseIterator *)capture$1
                                   withOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)capture$2
                                         withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)inArg;

- (OrgApacheLuceneSearchSpansFilterSpans_AcceptStatus *)acceptWithOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)candidate;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1 *self, OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *outer$, OrgApacheLuceneSearchSpansSpans *capture$0, OrgApacheLuceneSearchTwoPhaseIterator *capture$1, OrgApacheLuceneSearchDocIdSetIterator *capture$2, OrgApacheLuceneSearchSpansSpans *inArg);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1 *new_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *outer$, OrgApacheLuceneSearchSpansSpans *capture$0, OrgApacheLuceneSearchTwoPhaseIterator *capture$1, OrgApacheLuceneSearchDocIdSetIterator *capture$2, OrgApacheLuceneSearchSpansSpans *inArg) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1 *create_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *outer$, OrgApacheLuceneSearchSpansSpans *capture$0, OrgApacheLuceneSearchTwoPhaseIterator *capture$1, OrgApacheLuceneSearchDocIdSetIterator *capture$2, OrgApacheLuceneSearchSpansSpans *inArg);

@implementation OrgApacheLuceneSearchSpansSpanNotQuery

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)include
                    withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)exclude {
  OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(self, include, exclude);
  return self;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)include
                    withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)exclude
                                                    withInt:(jint)dist {
  OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_(self, include, exclude, dist);
  return self;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)include
                    withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)exclude
                                                    withInt:(jint)pre
                                                    withInt:(jint)post {
  OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(self, include, exclude, pre, post);
  return self;
}

- (OrgApacheLuceneSearchSpansSpanQuery *)getInclude {
  return include_;
}

- (OrgApacheLuceneSearchSpansSpanQuery *)getExclude {
  return exclude_;
}

- (NSString *)getField {
  return [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) getField];
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:@"spanNot("];
  [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) toStringWithNSString:field]];
  [buffer appendWithNSString:@", "];
  [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude_)) toStringWithNSString:field]];
  [buffer appendWithNSString:@", "];
  [buffer appendWithNSString:JavaLangInteger_toStringWithInt_(pre_)];
  [buffer appendWithNSString:@", "];
  [buffer appendWithNSString:JavaLangInteger_toStringWithInt_(post_)];
  [buffer appendWithNSString:@")"];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (OrgApacheLuceneSearchSpansSpanNotQuery *)java_clone {
  OrgApacheLuceneSearchSpansSpanNotQuery *spanNotQuery = create_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_((OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) java_clone], [OrgApacheLuceneSearchSpansSpanQuery class]), (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude_)) java_clone], [OrgApacheLuceneSearchSpansSpanQuery class]), pre_, post_);
  [spanNotQuery setBoostWithFloat:[self getBoost]];
  return spanNotQuery;
}

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores {
  OrgApacheLuceneSearchSpansSpanWeight *includeWeight = JreRetainedLocalValue([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) createWeightWithOrgApacheLuceneSearchIndexSearcher:searcher withBoolean:false]);
  OrgApacheLuceneSearchSpansSpanWeight *excludeWeight = JreRetainedLocalValue([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude_)) createWeightWithOrgApacheLuceneSearchIndexSearcher:searcher withBoolean:false]);
  return create_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(self, searcher, needsScores ? OrgApacheLuceneSearchSpansSpanQuery_getTermContextsWithOrgApacheLuceneSearchSpansSpanWeightArray_([IOSObjectArray arrayWithObjects:(id[]){ includeWeight, excludeWeight } count:2 type:OrgApacheLuceneSearchSpansSpanWeight_class_()]) : nil, includeWeight, excludeWeight);
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneSearchSpansSpanNotQuery *clone = nil;
  OrgApacheLuceneSearchSpansSpanQuery *rewrittenInclude = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchSpansSpanQuery class]);
  if (!JreObjectEqualsEquals(rewrittenInclude, include_)) {
    clone = [self java_clone];
    JreStrongAssign(&((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(clone))->include_, rewrittenInclude);
  }
  OrgApacheLuceneSearchSpansSpanQuery *rewrittenExclude = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchSpansSpanQuery class]);
  if (!JreObjectEqualsEquals(rewrittenExclude, exclude_)) {
    if (clone == nil) clone = [self java_clone];
    JreStrongAssign(&((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(clone))->exclude_, rewrittenExclude);
  }
  if (clone != nil) {
    return clone;
  }
  else {
    return self;
  }
}

- (jboolean)isEqual:(id)o {
  if (![super isEqual:o]) return false;
  OrgApacheLuceneSearchSpansSpanNotQuery *other = (OrgApacheLuceneSearchSpansSpanNotQuery *) cast_chk(o, [OrgApacheLuceneSearchSpansSpanNotQuery class]);
  return [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(self->include_)) isEqual:((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(other))->include_] && [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(self->exclude_)) isEqual:other->exclude_] && self->pre_ == other->pre_ && self->post_ == other->post_;
}

- (NSUInteger)hash {
  jint h = ((jint) [super hash]);
  h = JavaLangInteger_rotateLeftWithInt_withInt_(h, 1);
  h ^= ((jint) [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include_)) hash]);
  h = JavaLangInteger_rotateLeftWithInt_withInt_(h, 1);
  h ^= ((jint) [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude_)) hash]);
  h = JavaLangInteger_rotateLeftWithInt_withInt_(h, 1);
  h ^= pre_;
  h = JavaLangInteger_rotateLeftWithInt_withInt_(h, 1);
  h ^= post_;
  return h;
}

- (void)dealloc {
  RELEASE_(include_);
  RELEASE_(exclude_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanNotQuery;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanWeight;", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 9, 10, 8, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanQuery:withOrgApacheLuceneSearchSpansSpanQuery:);
  methods[1].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanQuery:withOrgApacheLuceneSearchSpansSpanQuery:withInt:);
  methods[2].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanQuery:withOrgApacheLuceneSearchSpansSpanQuery:withInt:withInt:);
  methods[3].selector = @selector(getInclude);
  methods[4].selector = @selector(getExclude);
  methods[5].selector = @selector(getField);
  methods[6].selector = @selector(toStringWithNSString:);
  methods[7].selector = @selector(java_clone);
  methods[8].selector = @selector(createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  methods[9].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "include_", "LOrgApacheLuceneSearchSpansSpanQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "exclude_", "LOrgApacheLuceneSearchSpansSpanQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pre_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "post_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanQuery;LOrgApacheLuceneSearchSpansSpanQuery;", "LOrgApacheLuceneSearchSpansSpanQuery;LOrgApacheLuceneSearchSpansSpanQuery;I", "LOrgApacheLuceneSearchSpansSpanQuery;LOrgApacheLuceneSearchSpansSpanQuery;II", "toString", "LNSString;", "clone", "createWeight", "LOrgApacheLuceneSearchIndexSearcher;Z", "LJavaIoIOException;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "equals", "LNSObject;", "hashCode", "LOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNotQuery = { "SpanNotQuery", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 12, 4, -1, 14, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNotQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanNotQuery *self, OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude) {
  OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(self, include, exclude, 0, 0);
}

OrgApacheLuceneSearchSpansSpanNotQuery *new_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_, include, exclude)
}

OrgApacheLuceneSearchSpansSpanNotQuery *create_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_, include, exclude)
}

void OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_(OrgApacheLuceneSearchSpansSpanNotQuery *self, OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint dist) {
  OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(self, include, exclude, dist, dist);
}

OrgApacheLuceneSearchSpansSpanNotQuery *new_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint dist) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_, include, exclude, dist)
}

OrgApacheLuceneSearchSpansSpanNotQuery *create_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint dist) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_, include, exclude, dist)
}

void OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(OrgApacheLuceneSearchSpansSpanNotQuery *self, OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint pre, jint post) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssign(&self->include_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(include));
  JreStrongAssign(&self->exclude_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(exclude));
  self->pre_ = (pre >= 0) ? pre : 0;
  self->post_ = (post >= 0) ? post : 0;
  if ([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(include)) getField] != nil && [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(exclude)) getField] != nil && ![((NSString *) nil_chk([include getField])) isEqual:[exclude getField]]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Clauses must have same field.");
}

OrgApacheLuceneSearchSpansSpanNotQuery *new_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint pre, jint post) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_, include, exclude, pre, post)
}

OrgApacheLuceneSearchSpansSpanNotQuery *create_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint pre, jint post) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery, initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_, include, exclude, pre, post)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanNotQuery)

@implementation OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNotQuery:(OrgApacheLuceneSearchSpansSpanNotQuery *)outer$
                        withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                               withJavaUtilMap:(id<JavaUtilMap>)terms
                      withOrgApacheLuceneSearchSpansSpanWeight:(OrgApacheLuceneSearchSpansSpanWeight *)includeWeight
                      withOrgApacheLuceneSearchSpansSpanWeight:(OrgApacheLuceneSearchSpansSpanWeight *)excludeWeight {
  OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(self, outer$, searcher, terms, includeWeight, excludeWeight);
  return self;
}

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts {
  [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(includeWeight_)) extractTermContextsWithJavaUtilMap:contexts];
}

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                     withOrgApacheLuceneSearchSpansSpanWeight_Postings:(OrgApacheLuceneSearchSpansSpanWeight_Postings *)requiredPostings {
  OrgApacheLuceneSearchSpansSpans *includeSpans = JreRetainedLocalValue([((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(includeWeight_)) getSpansWithOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchSpansSpanWeight_Postings:requiredPostings]);
  if (includeSpans == nil) {
    return nil;
  }
  OrgApacheLuceneSearchSpansSpans *excludeSpans = [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(excludeWeight_)) getSpansWithOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchSpansSpanWeight_Postings:requiredPostings];
  if (excludeSpans == nil) {
    return includeSpans;
  }
  OrgApacheLuceneSearchTwoPhaseIterator *excludeTwoPhase = [excludeSpans asTwoPhaseIterator];
  OrgApacheLuceneSearchDocIdSetIterator *excludeApproximation = excludeTwoPhase == nil ? nil : [excludeTwoPhase approximation];
  return create_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_(self, excludeSpans, excludeTwoPhase, excludeApproximation, includeSpans);
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(includeWeight_)) extractTermsWithJavaUtilSet:terms];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(includeWeight_);
  RELEASE_(excludeWeight_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpans;", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanNotQuery:withOrgApacheLuceneSearchIndexSearcher:withJavaUtilMap:withOrgApacheLuceneSearchSpansSpanWeight:withOrgApacheLuceneSearchSpansSpanWeight:);
  methods[1].selector = @selector(extractTermContextsWithJavaUtilMap:);
  methods[2].selector = @selector(getSpansWithOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchSpansSpanWeight_Postings:);
  methods[3].selector = @selector(extractTermsWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansSpanNotQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "includeWeight_", "LOrgApacheLuceneSearchSpansSpanWeight;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "excludeWeight_", "LOrgApacheLuceneSearchSpansSpanWeight;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanNotQuery;LOrgApacheLuceneSearchIndexSearcher;LJavaUtilMap;LOrgApacheLuceneSearchSpansSpanWeight;LOrgApacheLuceneSearchSpansSpanWeight;", "LJavaIoIOException;", "(Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;Lorg/apache/lucene/search/spans/SpanWeight;Lorg/apache/lucene/search/spans/SpanWeight;)V", "extractTermContexts", "LJavaUtilMap;", "(Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;)V", "getSpans", "LOrgApacheLuceneIndexLeafReaderContext;LOrgApacheLuceneSearchSpansSpanWeight_Postings;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "LOrgApacheLuceneSearchSpansSpanNotQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight = { "SpanNotWeight", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 4, 3, 11, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight;
}

@end

void OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *self, OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, OrgApacheLuceneSearchSpansSpanWeight *includeWeight, OrgApacheLuceneSearchSpansSpanWeight *excludeWeight) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchSpansSpanWeight_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, searcher, terms);
  JreStrongAssign(&self->includeWeight_, includeWeight);
  JreStrongAssign(&self->excludeWeight_, excludeWeight);
}

OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *new_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, OrgApacheLuceneSearchSpansSpanWeight *includeWeight, OrgApacheLuceneSearchSpansSpanWeight *excludeWeight) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight, initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_, outer$, searcher, terms, includeWeight, excludeWeight)
}

OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *create_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, OrgApacheLuceneSearchSpansSpanWeight *includeWeight, OrgApacheLuceneSearchSpansSpanWeight *excludeWeight) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight, initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_, outer$, searcher, terms, includeWeight, excludeWeight)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight)

@implementation OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight:(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *)outer$
                                         withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)capture$0
                                   withOrgApacheLuceneSearchTwoPhaseIterator:(OrgApacheLuceneSearchTwoPhaseIterator *)capture$1
                                   withOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)capture$2
                                         withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)inArg {
  OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_(self, outer$, capture$0, capture$1, capture$2, inArg);
  return self;
}

- (OrgApacheLuceneSearchSpansFilterSpans_AcceptStatus *)acceptWithOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)candidate {
  jint doc = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(candidate)) docID];
  if (doc > [((OrgApacheLuceneSearchSpansSpans *) nil_chk(val$excludeSpans_)) docID]) {
    if (val$excludeTwoPhase_ != nil) {
      if ([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(val$excludeApproximation_)) advanceWithInt:doc] == doc) {
        lastApproxDoc_ = doc;
        lastApproxResult_ = [val$excludeTwoPhase_ matches];
      }
    }
    else {
      [val$excludeSpans_ advanceWithInt:doc];
    }
  }
  else if (val$excludeTwoPhase_ != nil && doc == [val$excludeSpans_ docID] && doc != lastApproxDoc_) {
    lastApproxDoc_ = doc;
    lastApproxResult_ = [val$excludeTwoPhase_ matches];
  }
  if (doc != [val$excludeSpans_ docID] || (doc == lastApproxDoc_ && lastApproxResult_ == false)) {
    return JreRetainedLocalValue(JreLoadEnum(OrgApacheLuceneSearchSpansFilterSpans_AcceptStatus, YES));
  }
  if ([val$excludeSpans_ startPosition] == -1) {
    [val$excludeSpans_ nextStartPosition];
  }
  while ([val$excludeSpans_ endPosition] <= [candidate startPosition] - this$0_->this$0_->pre_) {
    if ([val$excludeSpans_ nextStartPosition] == OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS) {
      return JreRetainedLocalValue(JreLoadEnum(OrgApacheLuceneSearchSpansFilterSpans_AcceptStatus, YES));
    }
  }
  if ([candidate endPosition] + this$0_->this$0_->post_ <= [val$excludeSpans_ startPosition]) {
    return JreRetainedLocalValue(JreLoadEnum(OrgApacheLuceneSearchSpansFilterSpans_AcceptStatus, YES));
  }
  else {
    return JreRetainedLocalValue(JreLoadEnum(OrgApacheLuceneSearchSpansFilterSpans_AcceptStatus, NO));
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$excludeSpans_);
  RELEASE_(val$excludeTwoPhase_);
  RELEASE_(val$excludeApproximation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansFilterSpans_AcceptStatus;", 0x4, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight:withOrgApacheLuceneSearchSpansSpans:withOrgApacheLuceneSearchTwoPhaseIterator:withOrgApacheLuceneSearchDocIdSetIterator:withOrgApacheLuceneSearchSpansSpans:);
  methods[1].selector = @selector(acceptWithOrgApacheLuceneSearchSpansSpans:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$excludeSpans_", "LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$excludeTwoPhase_", "LOrgApacheLuceneSearchTwoPhaseIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$excludeApproximation_", "LOrgApacheLuceneSearchDocIdSetIterator;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "lastApproxDoc_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastApproxResult_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight;LOrgApacheLuceneSearchSpansSpans;LOrgApacheLuceneSearchTwoPhaseIterator;LOrgApacheLuceneSearchDocIdSetIterator;LOrgApacheLuceneSearchSpansSpans;", "accept", "LOrgApacheLuceneSearchSpansSpans;", "LJavaIoIOException;", "LOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight;", "getSpansWithOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchSpansSpanWeight_Postings:" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1 = { "", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x8010, 2, 6, 4, -1, 5, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1;
}

@end

void OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1 *self, OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *outer$, OrgApacheLuceneSearchSpansSpans *capture$0, OrgApacheLuceneSearchTwoPhaseIterator *capture$1, OrgApacheLuceneSearchDocIdSetIterator *capture$2, OrgApacheLuceneSearchSpansSpans *inArg) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$excludeSpans_, capture$0);
  JreStrongAssign(&self->val$excludeTwoPhase_, capture$1);
  JreStrongAssign(&self->val$excludeApproximation_, capture$2);
  OrgApacheLuceneSearchSpansFilterSpans_initWithOrgApacheLuceneSearchSpansSpans_(self, inArg);
  self->lastApproxDoc_ = -1;
  self->lastApproxResult_ = false;
}

OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1 *new_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *outer$, OrgApacheLuceneSearchSpansSpans *capture$0, OrgApacheLuceneSearchTwoPhaseIterator *capture$1, OrgApacheLuceneSearchDocIdSetIterator *capture$2, OrgApacheLuceneSearchSpansSpans *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1, initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_, outer$, capture$0, capture$1, capture$2, inArg)
}

OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1 *create_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1_initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *outer$, OrgApacheLuceneSearchSpansSpans *capture$0, OrgApacheLuceneSearchTwoPhaseIterator *capture$1, OrgApacheLuceneSearchDocIdSetIterator *capture$2, OrgApacheLuceneSearchSpansSpans *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_1, initWithOrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_withOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchTwoPhaseIterator_withOrgApacheLuceneSearchDocIdSetIterator_withOrgApacheLuceneSearchSpansSpans_, outer$, capture$0, capture$1, capture$2, inArg)
}
