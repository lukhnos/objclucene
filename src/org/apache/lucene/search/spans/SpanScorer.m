//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanScorer.java
//

#include "J2ObjC_source.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/lukhnos/portmobile/util/Objects.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spans/SpanScorer must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchSpansSpanScorer () {
 @public
  jint lastScoredDoc_;
}

/*!
 @brief Ensure setFreqCurrentDoc is called, if not already called for the current doc.
 */
- (void)ensureFreq;

@end

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(OrgApacheLuceneSearchSpansSpanScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanScorer_setFreqCurrentDoc(OrgApacheLuceneSearchSpansSpanScorer *self);

@implementation OrgApacheLuceneSearchSpansSpanScorer

- (instancetype)initWithOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans
               withOrgApacheLuceneSearchSpansSpanWeight:(OrgApacheLuceneSearchSpansSpanWeight *)weight
withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer:(OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *)docScorer {
  OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_(self, spans, weight, docScorer);
  return self;
}

- (jint)nextDoc {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) nextDoc];
}

- (jint)advanceWithInt:(jint)target {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) advanceWithInt:target];
}

- (void)ensureFreq {
  OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(self);
}

- (void)setFreqCurrentDoc {
  OrgApacheLuceneSearchSpansSpanScorer_setFreqCurrentDoc(self);
}

- (void)doStartCurrentDoc {
}

- (void)doCurrentSpans {
}

- (jfloat)scoreCurrentDoc {
  return [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *) nil_chk(docScorer_)) scoreWithInt:[((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) docID] withFloat:freq_];
}

- (jint)docID {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) docID];
}

- (jfloat)score {
  OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(self);
  return [self scoreCurrentDoc];
}

- (jint)freq {
  OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(self);
  return numMatches_;
}

- (jfloat)sloppyFreq {
  OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(self);
  return freq_;
}

- (jlong)cost {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) cost];
}

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans_)) asTwoPhaseIterator];
}

- (void)dealloc {
  RELEASE_(spans_);
  RELEASE_(docScorer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x11, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "F", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "F", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchTwoPhaseIterator;", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpans:withOrgApacheLuceneSearchSpansSpanWeight:withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer:);
  methods[1].selector = @selector(nextDoc);
  methods[2].selector = @selector(advanceWithInt:);
  methods[3].selector = @selector(ensureFreq);
  methods[4].selector = @selector(setFreqCurrentDoc);
  methods[5].selector = @selector(doStartCurrentDoc);
  methods[6].selector = @selector(doCurrentSpans);
  methods[7].selector = @selector(scoreCurrentDoc);
  methods[8].selector = @selector(docID);
  methods[9].selector = @selector(score);
  methods[10].selector = @selector(freq);
  methods[11].selector = @selector(sloppyFreq);
  methods[12].selector = @selector(cost);
  methods[13].selector = @selector(asTwoPhaseIterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "spans_", "LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "docScorer_", "LOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "freq_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "numMatches_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lastScoredDoc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpans;LOrgApacheLuceneSearchSpansSpanWeight;LOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer;", "LJavaIoIOException;", "advance", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanScorer = { "SpanScorer", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 14, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanScorer;
}

@end

void OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_(OrgApacheLuceneSearchSpansSpanScorer *self, OrgApacheLuceneSearchSpansSpans *spans, OrgApacheLuceneSearchSpansSpanWeight *weight, OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer) {
  OrgApacheLuceneSearchScorer_initWithOrgApacheLuceneSearchWeight_(self, weight);
  self->lastScoredDoc_ = -1;
  JreStrongAssign(&self->docScorer_, docScorer);
  JreStrongAssign(&self->spans_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(spans));
}

OrgApacheLuceneSearchSpansSpanScorer *new_OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_(OrgApacheLuceneSearchSpansSpans *spans, OrgApacheLuceneSearchSpansSpanWeight *weight, OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanScorer, initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_, spans, weight, docScorer)
}

OrgApacheLuceneSearchSpansSpanScorer *create_OrgApacheLuceneSearchSpansSpanScorer_initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_(OrgApacheLuceneSearchSpansSpans *spans, OrgApacheLuceneSearchSpansSpanWeight *weight, OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanScorer, initWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_, spans, weight, docScorer)
}

void OrgApacheLuceneSearchSpansSpanScorer_ensureFreq(OrgApacheLuceneSearchSpansSpanScorer *self) {
  jint currentDoc = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(self->spans_)) docID];
  if (self->lastScoredDoc_ != currentDoc) {
    OrgApacheLuceneSearchSpansSpanScorer_setFreqCurrentDoc(self);
    self->lastScoredDoc_ = currentDoc;
  }
}

void OrgApacheLuceneSearchSpansSpanScorer_setFreqCurrentDoc(OrgApacheLuceneSearchSpansSpanScorer *self) {
  self->freq_ = 0.0f;
  self->numMatches_ = 0;
  [self doStartCurrentDoc];
  JreAssert([((OrgApacheLuceneSearchSpansSpans *) nil_chk(self->spans_)) startPosition] == -1, JreStrcat("$@", @"incorrect initial start position, spans=", self->spans_));
  JreAssert([self->spans_ endPosition] == -1, JreStrcat("$@", @"incorrect initial end position, spans=", self->spans_));
  jint prevStartPos = -1;
  jint prevEndPos = -1;
  jint startPos = [self->spans_ nextStartPosition];
  JreAssert(startPos != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, JreStrcat("$@", @"initial startPos NO_MORE_POSITIONS, spans=", self->spans_));
  do {
    JreAssert(startPos >= prevStartPos, @"org/apache/lucene/search/spans/SpanScorer.java:93 condition failed: assert startPos >= prevStartPos;");
    jint endPos = [self->spans_ endPosition];
    JreAssert(endPos != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, @"org/apache/lucene/search/spans/SpanScorer.java:95 condition failed: assert endPos != Spans.NO_MORE_POSITIONS;");
    JreAssert((startPos != prevStartPos) || (endPos >= prevEndPos), JreStrcat("$I", @"decreased endPos=", endPos));
    self->numMatches_++;
    if (self->docScorer_ == nil) {
      self->freq_ = 1;
      return;
    }
    JrePlusAssignFloatF(&self->freq_, [self->docScorer_ computeSlopFactorWithInt:[self->spans_ width]]);
    [self doCurrentSpans];
    prevStartPos = startPos;
    prevEndPos = endPos;
    startPos = [self->spans_ nextStartPosition];
  }
  while (startPos != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS);
  JreAssert([self->spans_ startPosition] == OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, JreStrcat("$@", @"incorrect final start position, spans=", self->spans_));
  JreAssert([self->spans_ endPosition] == OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, JreStrcat("$@", @"incorrect final end position, spans=", self->spans_));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanScorer)
