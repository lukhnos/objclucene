//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/spans/NearSpansOrdered.h"
#include "org/apache/lucene/search/spans/NearSpansUnordered.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "org/lukhnos/portmobile/util/Objects.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spans/SpanNearQuery must not be compiled with ARC (-fobjc-arc)"
#endif

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchSpansSpanNearQuery__Annotations$0(void);

@interface OrgApacheLuceneSearchSpansSpanNearQuery_Builder () {
 @public
  jboolean ordered_;
  NSString *field_;
  id<JavaUtilList> clauses_;
  jint slop_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNearQuery_Builder, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNearQuery_Builder, clauses_, id<JavaUtilList>)

@interface OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight () {
 @public
  OrgApacheLuceneSearchSpansSpanNearQuery *this$0_;
}

@end

@interface OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery : OrgApacheLuceneSearchSpansSpanQuery {
 @public
  NSString *field_;
  jint width_;
}

- (instancetype)initWithNSString:(NSString *)field
                         withInt:(jint)width;

- (NSString *)getField;

- (NSString *)toStringWithNSString:(NSString *)field;

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery, field_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_initWithNSString_withInt_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *self, NSString *field, jint width);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *new_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_initWithNSString_withInt_(NSString *field, jint width) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *create_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_initWithNSString_withInt_(NSString *field, jint width);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery)

@interface OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight : OrgApacheLuceneSearchSpansSpanWeight {
 @public
  OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *this$0_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery:(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *)outer$
                                      withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher;

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts;

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)ctx
                                     withOrgApacheLuceneSearchSpansSpanWeight_Postings:(OrgApacheLuceneSearchSpansSpanWeight_Postings *)requiredPostings;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight *self, OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight *new_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight *create_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight)

@implementation OrgApacheLuceneSearchSpansSpanNearQuery

+ (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)newOrderedNearQueryWithNSString:(NSString *)field {
  return OrgApacheLuceneSearchSpansSpanNearQuery_newOrderedNearQueryWithNSString_(field);
}

+ (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)newUnorderedNearQueryWithNSString:(NSString *)field {
  return OrgApacheLuceneSearchSpansSpanNearQuery_newUnorderedNearQueryWithNSString_(field);
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQueryArray:(IOSObjectArray *)clauses
                                                         withInt:(jint)slop
                                                     withBoolean:(jboolean)inOrder {
  OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(self, clauses, slop, inOrder);
  return self;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQueryArray:(IOSObjectArray *)clausesIn
                                                         withInt:(jint)slop
                                                     withBoolean:(jboolean)inOrder
                                                     withBoolean:(jboolean)collectPayloads {
  OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(self, clausesIn, slop, inOrder, collectPayloads);
  return self;
}

- (IOSObjectArray *)getClauses {
  return [((id<JavaUtilList>) nil_chk(clauses_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[clauses_ size] type:OrgApacheLuceneSearchSpansSpanQuery_class_()]];
}

- (jint)getSlop {
  return slop_;
}

- (jboolean)isInOrder {
  return inOrder_;
}

- (NSString *)getField {
  return field_;
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:@"spanNear(["];
  id<JavaUtilIterator> i = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(clauses_)) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    OrgApacheLuceneSearchSpansSpanQuery *clause = JreRetainedLocalValue([i next]);
    [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) toStringWithNSString:field]];
    if ([i hasNext]) {
      [buffer appendWithNSString:@", "];
    }
  }
  [buffer appendWithNSString:@"], "];
  [buffer appendWithInt:slop_];
  [buffer appendWithNSString:@", "];
  [buffer appendWithBoolean:inOrder_];
  [buffer appendWithNSString:@")"];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores {
  id<JavaUtilList> subWeights = create_JavaUtilArrayList_init();
  for (OrgApacheLuceneSearchSpansSpanQuery * __strong q in nil_chk(clauses_)) {
    [subWeights addWithId:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(q)) createWeightWithOrgApacheLuceneSearchIndexSearcher:searcher withBoolean:false]];
  }
  return create_OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, subWeights, searcher, needsScores ? OrgApacheLuceneSearchSpansSpanQuery_getTermContextsWithJavaUtilCollection_(subWeights) : nil);
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneSearchSpansSpanNearQuery *clone = nil;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(clauses_)) size]; i++) {
    OrgApacheLuceneSearchSpansSpanQuery *c = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(clauses_)) getWithInt:i]);
    OrgApacheLuceneSearchSpansSpanQuery *query = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(c)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchSpansSpanQuery class]);
    if (!JreObjectEqualsEquals(query, c)) {
      if (clone == nil) clone = [self java_clone];
      [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(clone))->clauses_)) setWithInt:i withId:query];
    }
  }
  if (clone != nil) {
    return clone;
  }
  else {
    return self;
  }
}

- (OrgApacheLuceneSearchSpansSpanNearQuery *)java_clone {
  jint sz = [((id<JavaUtilList>) nil_chk(clauses_)) size];
  IOSObjectArray *newClauses = [IOSObjectArray arrayWithLength:sz type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
  for (jint i = 0; i < sz; i++) {
    IOSObjectArray_Set(newClauses, i, (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk([((id<JavaUtilList>) nil_chk(clauses_)) getWithInt:i])) java_clone], [OrgApacheLuceneSearchSpansSpanQuery class]));
  }
  OrgApacheLuceneSearchSpansSpanNearQuery *spanNearQuery = create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(newClauses, slop_, inOrder_);
  [spanNearQuery setBoostWithFloat:[self getBoost]];
  return spanNearQuery;
}

- (jboolean)isEqual:(id)o {
  if (![super isEqual:o]) {
    return false;
  }
  OrgApacheLuceneSearchSpansSpanNearQuery *spanNearQuery = (OrgApacheLuceneSearchSpansSpanNearQuery *) cast_chk(o, [OrgApacheLuceneSearchSpansSpanNearQuery class]);
  return (inOrder_ == ((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(spanNearQuery))->inOrder_) && (slop_ == spanNearQuery->slop_) && [((id<JavaUtilList>) nil_chk(clauses_)) isEqual:spanNearQuery->clauses_];
}

- (NSUInteger)hash {
  jint result = ((jint) [super hash]);
  result ^= ((jint) [((id<JavaUtilList>) nil_chk(clauses_)) hash]);
  result += slop_;
  jint fac = 1 + (inOrder_ ? 8 : 4);
  return fac * result;
}

- (void)dealloc {
  RELEASE_(clauses_);
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneSearchSpansSpanNearQuery_Builder;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanNearQuery_Builder;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, 5, -1 },
    { NULL, "[LOrgApacheLuceneSearchSpansSpanQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanWeight;", 0x1, 7, 8, 9, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 10, 11, 9, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanNearQuery;", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newOrderedNearQueryWithNSString:);
  methods[1].selector = @selector(newUnorderedNearQueryWithNSString:);
  methods[2].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanQueryArray:withInt:withBoolean:);
  methods[3].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanQueryArray:withInt:withBoolean:withBoolean:);
  methods[4].selector = @selector(getClauses);
  methods[5].selector = @selector(getSlop);
  methods[6].selector = @selector(isInOrder);
  methods[7].selector = @selector(getField);
  methods[8].selector = @selector(toStringWithNSString:);
  methods[9].selector = @selector(createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  methods[10].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[11].selector = @selector(java_clone);
  methods[12].selector = @selector(isEqual:);
  methods[13].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clauses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 16, -1 },
    { "slop_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "inOrder_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newOrderedNearQuery", "LNSString;", "newUnorderedNearQuery", "[LOrgApacheLuceneSearchSpansSpanQuery;IZ", "[LOrgApacheLuceneSearchSpansSpanQuery;IZZ", (void *)&OrgApacheLuceneSearchSpansSpanNearQuery__Annotations$0, "toString", "createWeight", "LOrgApacheLuceneSearchIndexSearcher;Z", "LJavaIoIOException;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "clone", "equals", "LNSObject;", "hashCode", "Ljava/util/List<Lorg/apache/lucene/search/spans/SpanQuery;>;", "LOrgApacheLuceneSearchSpansSpanNearQuery_Builder;LOrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight;LOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery;LOrgApacheLuceneSearchSpansSpanNearQuery_GapSpans;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNearQuery = { "SpanNearQuery", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 14, 4, -1, 17, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNearQuery;
}

@end

OrgApacheLuceneSearchSpansSpanNearQuery_Builder *OrgApacheLuceneSearchSpansSpanNearQuery_newOrderedNearQueryWithNSString_(NSString *field) {
  OrgApacheLuceneSearchSpansSpanNearQuery_initialize();
  return create_OrgApacheLuceneSearchSpansSpanNearQuery_Builder_initWithNSString_withBoolean_(field, true);
}

OrgApacheLuceneSearchSpansSpanNearQuery_Builder *OrgApacheLuceneSearchSpansSpanNearQuery_newUnorderedNearQueryWithNSString_(NSString *field) {
  OrgApacheLuceneSearchSpansSpanNearQuery_initialize();
  return create_OrgApacheLuceneSearchSpansSpanNearQuery_Builder_initWithNSString_withBoolean_(field, false);
}

void OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(OrgApacheLuceneSearchSpansSpanNearQuery *self, IOSObjectArray *clauses, jint slop, jboolean inOrder) {
  OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(self, clauses, slop, inOrder, true);
}

OrgApacheLuceneSearchSpansSpanNearQuery *new_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(IOSObjectArray *clauses, jint slop, jboolean inOrder) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery, initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_, clauses, slop, inOrder)
}

OrgApacheLuceneSearchSpansSpanNearQuery *create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(IOSObjectArray *clauses, jint slop, jboolean inOrder) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery, initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_, clauses, slop, inOrder)
}

void OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(OrgApacheLuceneSearchSpansSpanNearQuery *self, IOSObjectArray *clausesIn, jint slop, jboolean inOrder, jboolean collectPayloads) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssignAndConsume(&self->clauses_, new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(clausesIn))->size_));
  {
    IOSObjectArray *a__ = clausesIn;
    OrgApacheLuceneSearchSpansSpanQuery * const *b__ = a__->buffer_;
    OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchSpansSpanQuery *clause = *b__++;
      if (self->field_ == nil) {
        JreStrongAssign(&self->field_, [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) getField]);
      }
      else if ([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) getField] != nil && ![((NSString *) nil_chk([clause getField])) isEqual:self->field_]) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Clauses must have same field.");
      }
      [((id<JavaUtilList>) nil_chk(self->clauses_)) addWithId:clause];
    }
  }
  self->slop_ = slop;
  self->inOrder_ = inOrder;
}

OrgApacheLuceneSearchSpansSpanNearQuery *new_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(IOSObjectArray *clausesIn, jint slop, jboolean inOrder, jboolean collectPayloads) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery, initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_, clausesIn, slop, inOrder, collectPayloads)
}

OrgApacheLuceneSearchSpansSpanNearQuery *create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(IOSObjectArray *clausesIn, jint slop, jboolean inOrder, jboolean collectPayloads) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery, initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_, clausesIn, slop, inOrder, collectPayloads)
}

IOSObjectArray *OrgApacheLuceneSearchSpansSpanNearQuery__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanNearQuery)

@implementation OrgApacheLuceneSearchSpansSpanNearQuery_Builder

- (instancetype)initWithNSString:(NSString *)field
                     withBoolean:(jboolean)ordered {
  OrgApacheLuceneSearchSpansSpanNearQuery_Builder_initWithNSString_withBoolean_(self, field, ordered);
  return self;
}

- (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)addClauseWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)clause {
  if (OrgLukhnosPortmobileUtilObjects_equalsWithId_withId_([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) getField], field_) == false) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"Cannot add clause ", clause, @" to SpanNearQuery for field ", field_));
  [((id<JavaUtilList>) nil_chk(self->clauses_)) addWithId:clause];
  return self;
}

- (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)addGapWithInt:(jint)width {
  if (!ordered_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Gaps can only be added to ordered near queries");
  [((id<JavaUtilList>) nil_chk(self->clauses_)) addWithId:create_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_initWithNSString_withInt_(field_, width)];
  return self;
}

- (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)setSlopWithInt:(jint)slop {
  self->slop_ = slop;
  return self;
}

- (OrgApacheLuceneSearchSpansSpanNearQuery *)build {
  return create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_([((id<JavaUtilList>) nil_chk(clauses_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[clauses_ size] type:OrgApacheLuceneSearchSpansSpanQuery_class_()]], slop_, ordered_);
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(clauses_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanNearQuery_Builder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanNearQuery_Builder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanNearQuery_Builder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanNearQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withBoolean:);
  methods[1].selector = @selector(addClauseWithOrgApacheLuceneSearchSpansSpanQuery:);
  methods[2].selector = @selector(addGapWithInt:);
  methods[3].selector = @selector(setSlopWithInt:);
  methods[4].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ordered_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "clauses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "slop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;Z", "addClause", "LOrgApacheLuceneSearchSpansSpanQuery;", "addGap", "I", "setSlop", "Ljava/util/List<Lorg/apache/lucene/search/spans/SpanQuery;>;", "LOrgApacheLuceneSearchSpansSpanNearQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNearQuery_Builder = { "Builder", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x9, 5, 4, 7, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNearQuery_Builder;
}

@end

void OrgApacheLuceneSearchSpansSpanNearQuery_Builder_initWithNSString_withBoolean_(OrgApacheLuceneSearchSpansSpanNearQuery_Builder *self, NSString *field, jboolean ordered) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->clauses_, new_JavaUtilLinkedList_init());
  JreStrongAssign(&self->field_, field);
  self->ordered_ = ordered;
}

OrgApacheLuceneSearchSpansSpanNearQuery_Builder *new_OrgApacheLuceneSearchSpansSpanNearQuery_Builder_initWithNSString_withBoolean_(NSString *field, jboolean ordered) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_Builder, initWithNSString_withBoolean_, field, ordered)
}

OrgApacheLuceneSearchSpansSpanNearQuery_Builder *create_OrgApacheLuceneSearchSpansSpanNearQuery_Builder_initWithNSString_withBoolean_(NSString *field, jboolean ordered) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_Builder, initWithNSString_withBoolean_, field, ordered)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanNearQuery_Builder)

@implementation OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNearQuery:(OrgApacheLuceneSearchSpansSpanNearQuery *)outer$
                                               withJavaUtilList:(id<JavaUtilList>)subWeights
                         withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                withJavaUtilMap:(id<JavaUtilMap>)terms {
  OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, subWeights, searcher, terms);
  return self;
}

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts {
  for (OrgApacheLuceneSearchSpansSpanWeight * __strong w in nil_chk(subWeights_)) {
    [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(w)) extractTermContextsWithJavaUtilMap:contexts];
  }
}

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                     withOrgApacheLuceneSearchSpansSpanWeight_Postings:(OrgApacheLuceneSearchSpansSpanWeight_Postings *)requiredPostings {
  OrgApacheLuceneIndexTerms *terms = JreRetainedLocalValue([((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader])) termsWithNSString:field_]);
  if (terms == nil) {
    return nil;
  }
  JavaUtilArrayList *subSpans = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(this$0_->clauses_)) size]);
  for (OrgApacheLuceneSearchSpansSpanWeight * __strong w in nil_chk(subWeights_)) {
    OrgApacheLuceneSearchSpansSpans *subSpan = JreRetainedLocalValue([((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(w)) getSpansWithOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchSpansSpanWeight_Postings:requiredPostings]);
    if (subSpan != nil) {
      [subSpans addWithId:subSpan];
    }
    else {
      return nil;
    }
  }
  return (!this$0_->inOrder_) ? create_OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(this$0_, subSpans) : (id) create_OrgApacheLuceneSearchSpansNearSpansOrdered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(this$0_, subSpans);
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  for (OrgApacheLuceneSearchSpansSpanWeight * __strong w in nil_chk(subWeights_)) {
    [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(w)) extractTermsWithJavaUtilSet:terms];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(subWeights_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpans;", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanNearQuery:withJavaUtilList:withOrgApacheLuceneSearchIndexSearcher:withJavaUtilMap:);
  methods[1].selector = @selector(extractTermContextsWithJavaUtilMap:);
  methods[2].selector = @selector(getSpansWithOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchSpansSpanWeight_Postings:);
  methods[3].selector = @selector(extractTermsWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansSpanNearQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "subWeights_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanNearQuery;LJavaUtilList;LOrgApacheLuceneSearchIndexSearcher;LJavaUtilMap;", "LJavaIoIOException;", "(Ljava/util/List<Lorg/apache/lucene/search/spans/SpanWeight;>;Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;)V", "extractTermContexts", "LJavaUtilMap;", "(Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;)V", "getSpans", "LOrgApacheLuceneIndexLeafReaderContext;LOrgApacheLuceneSearchSpansSpanWeight_Postings;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "Ljava/util/List<Lorg/apache/lucene/search/spans/SpanWeight;>;", "LOrgApacheLuceneSearchSpansSpanNearQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight = { "SpanNearWeight", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 4, 2, 12, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight;
}

@end

void OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight *self, OrgApacheLuceneSearchSpansSpanNearQuery *outer$, id<JavaUtilList> subWeights, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchSpansSpanWeight_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, searcher, terms);
  JreStrongAssign(&self->subWeights_, subWeights);
}

OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight *new_OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanNearQuery *outer$, id<JavaUtilList> subWeights, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight, initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_, outer$, subWeights, searcher, terms)
}

OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight *create_OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanNearQuery *outer$, id<JavaUtilList> subWeights, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight, initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_, outer$, subWeights, searcher, terms)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight)

@implementation OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery

- (instancetype)initWithNSString:(NSString *)field
                         withInt:(jint)width {
  OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_initWithNSString_withInt_(self, field, width);
  return self;
}

- (NSString *)getField {
  return field_;
}

- (NSString *)toStringWithNSString:(NSString *)field {
  return JreStrcat("$$CIC", @"SpanGap(", field, ':', width_, ')');
}

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores {
  return create_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_(self, searcher);
}

- (void)dealloc {
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanWeight;", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:);
  methods[1].selector = @selector(getField);
  methods[2].selector = @selector(toStringWithNSString:);
  methods[3].selector = @selector(createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;I", "toString", "LNSString;", "createWeight", "LOrgApacheLuceneSearchIndexSearcher;Z", "LJavaIoIOException;", "LOrgApacheLuceneSearchSpansSpanNearQuery;", "LOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery = { "SpanGapQuery", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0xa, 4, 2, 6, 7, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_initWithNSString_withInt_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *self, NSString *field, jint width) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssign(&self->field_, field);
  self->width_ = width;
}

OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *new_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_initWithNSString_withInt_(NSString *field, jint width) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery, initWithNSString_withInt_, field, width)
}

OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *create_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_initWithNSString_withInt_(NSString *field, jint width) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery, initWithNSString_withInt_, field, width)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery)

@implementation OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery:(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *)outer$
                                      withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher {
  OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_(self, outer$, searcher);
  return self;
}

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts {
}

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)ctx
                                     withOrgApacheLuceneSearchSpansSpanWeight_Postings:(OrgApacheLuceneSearchSpansSpanWeight_Postings *)requiredPostings {
  return create_OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_initWithInt_(this$0_->width_);
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpans;", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery:withOrgApacheLuceneSearchIndexSearcher:);
  methods[1].selector = @selector(extractTermContextsWithJavaUtilMap:);
  methods[2].selector = @selector(getSpansWithOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchSpansSpanWeight_Postings:);
  methods[3].selector = @selector(extractTermsWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery;LOrgApacheLuceneSearchIndexSearcher;", "LJavaIoIOException;", "extractTermContexts", "LJavaUtilMap;", "(Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;)V", "getSpans", "LOrgApacheLuceneIndexLeafReaderContext;LOrgApacheLuceneSearchSpansSpanWeight_Postings;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "LOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight = { "SpanGapWeight", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x2, 4, 1, 10, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight;
}

@end

void OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight *self, OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchSpansSpanWeight_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, searcher, nil);
}

OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight *new_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight, initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_, outer$, searcher)
}

OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight *create_OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight, initWithOrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_withOrgApacheLuceneSearchIndexSearcher_, outer$, searcher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanNearQuery_SpanGapQuery_SpanGapWeight)

@implementation OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans

- (instancetype)initWithInt:(jint)width {
  OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_initWithInt_(self, width);
  return self;
}

- (jint)nextStartPosition {
  return ++pos_;
}

- (jint)skipToPositionWithInt:(jint)position {
  return pos_ = position;
}

- (jint)startPosition {
  return pos_;
}

- (jint)endPosition {
  return pos_ + width_;
}

- (jint)width {
  return width_;
}

- (void)collectWithOrgApacheLuceneSearchSpansSpanCollector:(id<OrgApacheLuceneSearchSpansSpanCollector>)collector {
}

- (jint)docID {
  return doc_;
}

- (jint)nextDoc {
  pos_ = -1;
  return ++doc_;
}

- (jint)advanceWithInt:(jint)target {
  pos_ = -1;
  return doc_ = target;
}

- (jlong)cost {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 0, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 0, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(nextStartPosition);
  methods[2].selector = @selector(skipToPositionWithInt:);
  methods[3].selector = @selector(startPosition);
  methods[4].selector = @selector(endPosition);
  methods[5].selector = @selector(width);
  methods[6].selector = @selector(collectWithOrgApacheLuceneSearchSpansSpanCollector:);
  methods[7].selector = @selector(docID);
  methods[8].selector = @selector(nextDoc);
  methods[9].selector = @selector(advanceWithInt:);
  methods[10].selector = @selector(cost);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "doc_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LJavaIoIOException;", "skipToPosition", "collect", "LOrgApacheLuceneSearchSpansSpanCollector;", "advance", "LOrgApacheLuceneSearchSpansSpanNearQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans = { "GapSpans", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x8, 11, 3, 6, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans;
}

@end

void OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_initWithInt_(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans *self, jint width) {
  OrgApacheLuceneSearchSpansSpans_init(self);
  self->doc_ = -1;
  self->pos_ = -1;
  self->width_ = width;
}

OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans *new_OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_initWithInt_(jint width) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans, initWithInt_, width)
}

OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans *create_OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_initWithInt_(jint width) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans, initWithInt_, width)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans)
