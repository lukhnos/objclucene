//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/ConjunctionSpans.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/ConjunctionDISI.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/spans/ConjunctionSpans.h"
#include "org/apache/lucene/search/spans/Spans.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spans/ConjunctionSpans must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchSpansConjunctionSpans_1 : OrgApacheLuceneSearchTwoPhaseIterator {
 @public
  OrgApacheLuceneSearchSpansConjunctionSpans *this$0_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansConjunctionSpans:(OrgApacheLuceneSearchSpansConjunctionSpans *)outer$
                         withOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)approximation;

- (jboolean)matches;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansConjunctionSpans_1)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansConjunctionSpans_1_initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansConjunctionSpans_1 *self, OrgApacheLuceneSearchSpansConjunctionSpans *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation);

__attribute__((unused)) static OrgApacheLuceneSearchSpansConjunctionSpans_1 *new_OrgApacheLuceneSearchSpansConjunctionSpans_1_initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansConjunctionSpans *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansConjunctionSpans_1 *create_OrgApacheLuceneSearchSpansConjunctionSpans_1_initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansConjunctionSpans *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation);

@implementation OrgApacheLuceneSearchSpansConjunctionSpans

- (instancetype)initPackagePrivateWithJavaUtilList:(id<JavaUtilList>)subSpans {
  OrgApacheLuceneSearchSpansConjunctionSpans_initPackagePrivateWithJavaUtilList_(self, subSpans);
  return self;
}

- (jint)docID {
  return [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(conjunction_)) docID];
}

- (jlong)cost {
  return [((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(conjunction_)) cost];
}

- (jint)nextDoc {
  return ([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(conjunction_)) nextDoc] == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) ? OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS : [self toMatchDoc];
}

- (jint)advanceWithInt:(jint)target {
  return ([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(conjunction_)) advanceWithInt:target] == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) ? OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS : [self toMatchDoc];
}

- (jint)toMatchDoc {
  oneExhaustedInCurrentDoc_ = false;
  while (true) {
    if ([self twoPhaseCurrentDocMatches]) {
      return [self docID];
    }
    if ([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk(conjunction_)) nextDoc] == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
      return OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
    }
  }
}

- (jboolean)twoPhaseCurrentDocMatches {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator {
  OrgApacheLuceneSearchTwoPhaseIterator *res = create_OrgApacheLuceneSearchSpansConjunctionSpans_1_initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_(self, conjunction_);
  return res;
}

- (IOSObjectArray *)getSubSpans {
  return subSpans_;
}

- (void)dealloc {
  RELEASE_(subSpans_);
  RELEASE_(conjunction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x400, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchTwoPhaseIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchSpansSpans;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithJavaUtilList:);
  methods[1].selector = @selector(docID);
  methods[2].selector = @selector(cost);
  methods[3].selector = @selector(nextDoc);
  methods[4].selector = @selector(advanceWithInt:);
  methods[5].selector = @selector(toMatchDoc);
  methods[6].selector = @selector(twoPhaseCurrentDocMatches);
  methods[7].selector = @selector(asTwoPhaseIterator);
  methods[8].selector = @selector(getSubSpans);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subSpans_", "[LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "conjunction_", "LOrgApacheLuceneSearchDocIdSetIterator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "atFirstInCurrentDoc_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "oneExhaustedInCurrentDoc_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/search/spans/Spans;>;)V", "LJavaIoIOException;", "advance", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansConjunctionSpans = { "ConjunctionSpans", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x400, 9, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansConjunctionSpans;
}

@end

void OrgApacheLuceneSearchSpansConjunctionSpans_initPackagePrivateWithJavaUtilList_(OrgApacheLuceneSearchSpansConjunctionSpans *self, id<JavaUtilList> subSpans) {
  OrgApacheLuceneSearchSpansSpans_init(self);
  if ([((id<JavaUtilList>) nil_chk(subSpans)) size] < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Less than 2 subSpans.size():", [subSpans size]));
  }
  JreStrongAssign(&self->subSpans_, [subSpans toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[subSpans size] type:OrgApacheLuceneSearchSpansSpans_class_()]]);
  JreStrongAssign(&self->conjunction_, OrgApacheLuceneSearchConjunctionDISI_intersectWithJavaUtilList_(subSpans));
  self->atFirstInCurrentDoc_ = true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansConjunctionSpans)

@implementation OrgApacheLuceneSearchSpansConjunctionSpans_1

- (instancetype)initWithOrgApacheLuceneSearchSpansConjunctionSpans:(OrgApacheLuceneSearchSpansConjunctionSpans *)outer$
                         withOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)approximation {
  OrgApacheLuceneSearchSpansConjunctionSpans_1_initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_(self, outer$, approximation);
  return self;
}

- (jboolean)matches {
  return [this$0_ twoPhaseCurrentDocMatches];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansConjunctionSpans:withOrgApacheLuceneSearchDocIdSetIterator:);
  methods[1].selector = @selector(matches);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansConjunctionSpans;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansConjunctionSpans;LOrgApacheLuceneSearchDocIdSetIterator;", "LJavaIoIOException;", "LOrgApacheLuceneSearchSpansConjunctionSpans;", "asTwoPhaseIterator" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansConjunctionSpans_1 = { "", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x8010, 2, 1, 2, -1, 3, -1, -1 };
  return &_OrgApacheLuceneSearchSpansConjunctionSpans_1;
}

@end

void OrgApacheLuceneSearchSpansConjunctionSpans_1_initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansConjunctionSpans_1 *self, OrgApacheLuceneSearchSpansConjunctionSpans *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchTwoPhaseIterator_initWithOrgApacheLuceneSearchDocIdSetIterator_(self, approximation);
}

OrgApacheLuceneSearchSpansConjunctionSpans_1 *new_OrgApacheLuceneSearchSpansConjunctionSpans_1_initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansConjunctionSpans *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansConjunctionSpans_1, initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_, outer$, approximation)
}

OrgApacheLuceneSearchSpansConjunctionSpans_1 *create_OrgApacheLuceneSearchSpansConjunctionSpans_1_initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansConjunctionSpans *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansConjunctionSpans_1, initWithOrgApacheLuceneSearchSpansConjunctionSpans_withOrgApacheLuceneSearchDocIdSetIterator_, outer$, approximation)
}
