//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/DisiPriorityQueue.h"
#include "org/apache/lucene/search/DisiWrapper.h"
#include "org/apache/lucene/search/DisjunctionDISIApproximation.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/search/spans/SpanPositionQueue.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/ToStringUtils.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spans/SpanOrQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchSpansSpanOrQuery () {
 @public
  id<JavaUtilList> clauses_;
  NSString *field_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanOrQuery, clauses_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanOrQuery, field_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanOrQuery_addClauseWithOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanOrQuery *self, OrgApacheLuceneSearchSpansSpanQuery *clause);

@interface OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight () {
 @public
  OrgApacheLuceneSearchSpansSpanOrQuery *this$0_;
}

@end

@interface OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 : OrgApacheLuceneSearchSpansSpans {
 @public
  OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *this$0_;
  OrgApacheLuceneSearchDisiPriorityQueue *val$byDocQueue_;
  OrgApacheLuceneSearchSpansSpanPositionQueue *val$byPositionQueue_;
  JavaUtilArrayList *val$subSpans_;
  OrgApacheLuceneSearchSpansSpans *topPositionSpans_;
  jint lastDocTwoPhaseMatched_;
  jlong cost_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight:(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *)outer$
                                withOrgApacheLuceneSearchDisiPriorityQueue:(OrgApacheLuceneSearchDisiPriorityQueue *)capture$0
                           withOrgApacheLuceneSearchSpansSpanPositionQueue:(OrgApacheLuceneSearchSpansSpanPositionQueue *)capture$1
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)capture$2;

- (jint)nextDoc;

- (jint)advanceWithInt:(jint)target;

- (jint)docID;

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator;

- (jboolean)twoPhaseCurrentDocMatches;

- (void)fillPositionQueue;

- (jint)nextStartPosition;

- (jint)startPosition;

- (jint)endPosition;

- (jint)width;

- (void)collectWithOrgApacheLuceneSearchSpansSpanCollector:(id<OrgApacheLuceneSearchSpansSpanCollector>)collector;

- (NSString *)description;

- (jlong)cost;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1, topPositionSpans_, OrgApacheLuceneSearchSpansSpans *)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *self, OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *outer$, OrgApacheLuceneSearchDisiPriorityQueue *capture$0, OrgApacheLuceneSearchSpansSpanPositionQueue *capture$1, JavaUtilArrayList *capture$2);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *new_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *outer$, OrgApacheLuceneSearchDisiPriorityQueue *capture$0, OrgApacheLuceneSearchSpansSpanPositionQueue *capture$1, JavaUtilArrayList *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *outer$, OrgApacheLuceneSearchDisiPriorityQueue *capture$0, OrgApacheLuceneSearchSpansSpanPositionQueue *capture$1, JavaUtilArrayList *capture$2);

@interface OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1 : OrgApacheLuceneSearchTwoPhaseIterator {
 @public
  OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *this$0_;
}

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1:(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *)outer$
                                   withOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)approximation;

- (jboolean)matches;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1)

__attribute__((unused)) static void OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1 *self, OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation);

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1 *new_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1 *create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation);

@implementation OrgApacheLuceneSearchSpansSpanOrQuery

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanQueryArray:(IOSObjectArray *)clauses {
  OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(self, clauses);
  return self;
}

- (void)addClauseWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)clause {
  OrgApacheLuceneSearchSpansSpanOrQuery_addClauseWithOrgApacheLuceneSearchSpansSpanQuery_(self, clause);
}

- (IOSObjectArray *)getClauses {
  return [((id<JavaUtilList>) nil_chk(clauses_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[clauses_ size] type:OrgApacheLuceneSearchSpansSpanQuery_class_()]];
}

- (NSString *)getField {
  return field_;
}

- (OrgApacheLuceneSearchSpansSpanOrQuery *)java_clone {
  jint sz = [((id<JavaUtilList>) nil_chk(clauses_)) size];
  IOSObjectArray *newClauses = [IOSObjectArray arrayWithLength:sz type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
  for (jint i = 0; i < sz; i++) {
    IOSObjectArray_Set(newClauses, i, (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk([((id<JavaUtilList>) nil_chk(clauses_)) getWithInt:i])) java_clone], [OrgApacheLuceneSearchSpansSpanQuery class]));
  }
  OrgApacheLuceneSearchSpansSpanOrQuery *soq = create_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(newClauses);
  [soq setBoostWithFloat:[self getBoost]];
  return soq;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneSearchSpansSpanOrQuery *clone = nil;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(clauses_)) size]; i++) {
    OrgApacheLuceneSearchSpansSpanQuery *c = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(clauses_)) getWithInt:i]);
    OrgApacheLuceneSearchSpansSpanQuery *query = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(c)) rewriteWithOrgApacheLuceneIndexIndexReader:reader], [OrgApacheLuceneSearchSpansSpanQuery class]);
    if (!JreObjectEqualsEquals(query, c)) {
      if (clone == nil) clone = [self java_clone];
      [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneSearchSpansSpanOrQuery *) nil_chk(clone))->clauses_)) setWithInt:i withId:query];
    }
  }
  if (clone != nil) {
    return clone;
  }
  else {
    return self;
  }
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:@"spanOr(["];
  id<JavaUtilIterator> i = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(clauses_)) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    OrgApacheLuceneSearchSpansSpanQuery *clause = JreRetainedLocalValue([i next]);
    [buffer appendWithNSString:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) toStringWithNSString:field]];
    if ([i hasNext]) {
      [buffer appendWithNSString:@", "];
    }
  }
  [buffer appendWithNSString:@"])"];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (jboolean)isEqual:(id)o {
  if (![super isEqual:o]) {
    return false;
  }
  OrgApacheLuceneSearchSpansSpanOrQuery *that = (OrgApacheLuceneSearchSpansSpanOrQuery *) cast_chk(o, [OrgApacheLuceneSearchSpansSpanOrQuery class]);
  return [((id<JavaUtilList>) nil_chk(clauses_)) isEqual:((OrgApacheLuceneSearchSpansSpanOrQuery *) nil_chk(that))->clauses_];
}

- (NSUInteger)hash {
  jint h = ((jint) [super hash]);
  h = (h * 7) ^ ((jint) [((id<JavaUtilList>) nil_chk(clauses_)) hash]);
  return h;
}

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores {
  id<JavaUtilList> subWeights = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(clauses_)) size]);
  for (OrgApacheLuceneSearchSpansSpanQuery * __strong q in nil_chk(clauses_)) {
    [subWeights addWithId:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(q)) createWeightWithOrgApacheLuceneSearchIndexSearcher:searcher withBoolean:false]];
  }
  return create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withJavaUtilList_(self, searcher, needsScores ? OrgApacheLuceneSearchSpansSpanQuery_getTermContextsWithJavaUtilCollection_(subWeights) : nil, subWeights);
}

- (void)dealloc {
  RELEASE_(clauses_);
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchSpansSpanQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanOrQuery;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanWeight;", 0x1, 12, 13, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanQueryArray:);
  methods[1].selector = @selector(addClauseWithOrgApacheLuceneSearchSpansSpanQuery:);
  methods[2].selector = @selector(getClauses);
  methods[3].selector = @selector(getField);
  methods[4].selector = @selector(java_clone);
  methods[5].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[6].selector = @selector(toStringWithNSString:);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clauses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 14, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LOrgApacheLuceneSearchSpansSpanQuery;", "addClause", "LOrgApacheLuceneSearchSpansSpanQuery;", "clone", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "toString", "LNSString;", "equals", "LNSObject;", "hashCode", "createWeight", "LOrgApacheLuceneSearchIndexSearcher;Z", "Ljava/util/List<Lorg/apache/lucene/search/spans/SpanQuery;>;", "LOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanOrQuery = { "SpanOrQuery", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 10, 2, -1, 15, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanOrQuery;
}

@end

void OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(OrgApacheLuceneSearchSpansSpanOrQuery *self, IOSObjectArray *clauses) {
  OrgApacheLuceneSearchSpansSpanQuery_init(self);
  JreStrongAssignAndConsume(&self->clauses_, new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(clauses))->size_));
  {
    IOSObjectArray *a__ = clauses;
    OrgApacheLuceneSearchSpansSpanQuery * const *b__ = a__->buffer_;
    OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchSpansSpanQuery *seq = *b__++;
      OrgApacheLuceneSearchSpansSpanOrQuery_addClauseWithOrgApacheLuceneSearchSpansSpanQuery_(self, seq);
    }
  }
}

OrgApacheLuceneSearchSpansSpanOrQuery *new_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(IOSObjectArray *clauses) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery, initWithOrgApacheLuceneSearchSpansSpanQueryArray_, clauses)
}

OrgApacheLuceneSearchSpansSpanOrQuery *create_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(IOSObjectArray *clauses) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery, initWithOrgApacheLuceneSearchSpansSpanQueryArray_, clauses)
}

void OrgApacheLuceneSearchSpansSpanOrQuery_addClauseWithOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanOrQuery *self, OrgApacheLuceneSearchSpansSpanQuery *clause) {
  if (self->field_ == nil) {
    JreStrongAssign(&self->field_, [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) getField]);
  }
  else if ([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(clause)) getField] != nil && ![((NSString *) nil_chk([clause getField])) isEqual:self->field_]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Clauses must have same field.");
  }
  [((id<JavaUtilList>) nil_chk(self->clauses_)) addWithId:clause];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanOrQuery)

@implementation OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanOrQuery:(OrgApacheLuceneSearchSpansSpanOrQuery *)outer$
                       withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                              withJavaUtilMap:(id<JavaUtilMap>)terms
                                             withJavaUtilList:(id<JavaUtilList>)subWeights {
  OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withJavaUtilList_(self, outer$, searcher, terms, subWeights);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  for (OrgApacheLuceneSearchSpansSpanWeight * __strong w in nil_chk(subWeights_)) {
    [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(w)) extractTermsWithJavaUtilSet:terms];
  }
}

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts {
  for (OrgApacheLuceneSearchSpansSpanWeight * __strong w in nil_chk(subWeights_)) {
    [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(w)) extractTermContextsWithJavaUtilMap:contexts];
  }
}

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                     withOrgApacheLuceneSearchSpansSpanWeight_Postings:(OrgApacheLuceneSearchSpansSpanWeight_Postings *)requiredPostings {
  JavaUtilArrayList *subSpans = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(this$0_->clauses_)) size]);
  for (OrgApacheLuceneSearchSpansSpanWeight * __strong w in nil_chk(subWeights_)) {
    OrgApacheLuceneSearchSpansSpans *spans = JreRetainedLocalValue([((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(w)) getSpansWithOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchSpansSpanWeight_Postings:requiredPostings]);
    if (spans != nil) {
      [subSpans addWithId:spans];
    }
  }
  if ([subSpans size] == 0) {
    return nil;
  }
  else if ([subSpans size] == 1) {
    return [subSpans getWithInt:0];
  }
  OrgApacheLuceneSearchDisiPriorityQueue *byDocQueue = create_OrgApacheLuceneSearchDisiPriorityQueue_initWithInt_([subSpans size]);
  for (OrgApacheLuceneSearchSpansSpans * __strong spans in subSpans) {
    [byDocQueue addWithOrgApacheLuceneSearchDisiWrapper:create_OrgApacheLuceneSearchDisiWrapper_initWithOrgApacheLuceneSearchDocIdSetIterator_(spans)];
  }
  OrgApacheLuceneSearchSpansSpanPositionQueue *byPositionQueue = create_OrgApacheLuceneSearchSpansSpanPositionQueue_initPackagePrivateWithInt_([subSpans size]);
  return create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_(self, byDocQueue, byPositionQueue, subSpans);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(subWeights_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpans;", 0x1, 9, 10, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanOrQuery:withOrgApacheLuceneSearchIndexSearcher:withJavaUtilMap:withJavaUtilList:);
  methods[1].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[2].selector = @selector(extractTermContextsWithJavaUtilMap:);
  methods[3].selector = @selector(getSpansWithOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchSpansSpanWeight_Postings:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansSpanOrQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "subWeights_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanOrQuery;LOrgApacheLuceneSearchIndexSearcher;LJavaUtilMap;LJavaUtilList;", "LJavaIoIOException;", "(Lorg/apache/lucene/search/IndexSearcher;Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;Ljava/util/List<Lorg/apache/lucene/search/spans/SpanWeight;>;)V", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "extractTermContexts", "LJavaUtilMap;", "(Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;)V", "getSpans", "LOrgApacheLuceneIndexLeafReaderContext;LOrgApacheLuceneSearchSpansSpanWeight_Postings;", "Ljava/util/List<Lorg/apache/lucene/search/spans/SpanWeight;>;", "LOrgApacheLuceneSearchSpansSpanOrQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight = { "SpanOrWeight", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 4, 2, 12, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight;
}

@end

void OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withJavaUtilList_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *self, OrgApacheLuceneSearchSpansSpanOrQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, id<JavaUtilList> subWeights) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchSpansSpanWeight_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(self, outer$, searcher, terms);
  JreStrongAssign(&self->subWeights_, subWeights);
}

OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *new_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withJavaUtilList_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, id<JavaUtilList> subWeights) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight, initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withJavaUtilList_, outer$, searcher, terms, subWeights)
}

OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withJavaUtilList_(OrgApacheLuceneSearchSpansSpanOrQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, id<JavaUtilList> subWeights) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight, initWithOrgApacheLuceneSearchSpansSpanOrQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withJavaUtilList_, outer$, searcher, terms, subWeights)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight)

@implementation OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight:(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *)outer$
                                withOrgApacheLuceneSearchDisiPriorityQueue:(OrgApacheLuceneSearchDisiPriorityQueue *)capture$0
                           withOrgApacheLuceneSearchSpansSpanPositionQueue:(OrgApacheLuceneSearchSpansSpanPositionQueue *)capture$1
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)capture$2 {
  OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (jint)nextDoc {
  JreStrongAssign(&topPositionSpans_, nil);
  OrgApacheLuceneSearchDisiWrapper *topDocSpans = JreRetainedLocalValue([((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(val$byDocQueue_)) top]);
  jint currentDoc = ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(topDocSpans))->doc_;
  do {
    topDocSpans->doc_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(topDocSpans->iterator_)) nextDoc];
    topDocSpans = [val$byDocQueue_ updateTop];
  }
  while (((OrgApacheLuceneSearchDisiWrapper *) nil_chk(topDocSpans))->doc_ == currentDoc);
  return topDocSpans->doc_;
}

- (jint)advanceWithInt:(jint)target {
  JreStrongAssign(&topPositionSpans_, nil);
  OrgApacheLuceneSearchDisiWrapper *topDocSpans = JreRetainedLocalValue([((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(val$byDocQueue_)) top]);
  do {
    ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(topDocSpans))->doc_ = [((OrgApacheLuceneSearchSpansSpans *) nil_chk(topDocSpans->iterator_)) advanceWithInt:target];
    topDocSpans = [val$byDocQueue_ updateTop];
  }
  while (((OrgApacheLuceneSearchDisiWrapper *) nil_chk(topDocSpans))->doc_ < target);
  return topDocSpans->doc_;
}

- (jint)docID {
  OrgApacheLuceneSearchDisiWrapper *topDocSpans = JreRetainedLocalValue([((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(val$byDocQueue_)) top]);
  return ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(topDocSpans))->doc_;
}

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator {
  jboolean hasApproximation = false;
  for (OrgApacheLuceneSearchDisiWrapper * __strong w in nil_chk(val$byDocQueue_)) {
    if (((OrgApacheLuceneSearchDisiWrapper *) nil_chk(w))->twoPhaseView_ != nil) {
      hasApproximation = true;
      break;
    }
  }
  if (!hasApproximation) {
    return JreRetainedLocalValue(nil);
  }
  return create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_(self, create_OrgApacheLuceneSearchDisjunctionDISIApproximation_initWithOrgApacheLuceneSearchDisiPriorityQueue_(val$byDocQueue_));
}

- (jboolean)twoPhaseCurrentDocMatches {
  OrgApacheLuceneSearchDisiWrapper *listAtCurrentDoc = JreRetainedLocalValue([((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(val$byDocQueue_)) topList]);
  jint currentDoc = ((OrgApacheLuceneSearchDisiWrapper *) nil_chk(listAtCurrentDoc))->doc_;
  while (listAtCurrentDoc->twoPhaseView_ != nil) {
    if ([listAtCurrentDoc->twoPhaseView_ matches]) {
      listAtCurrentDoc->lastApproxMatchDoc_ = currentDoc;
      break;
    }
    listAtCurrentDoc->lastApproxNonMatchDoc_ = currentDoc;
    listAtCurrentDoc = listAtCurrentDoc->next_;
    if (listAtCurrentDoc == nil) {
      return false;
    }
  }
  lastDocTwoPhaseMatched_ = currentDoc;
  JreStrongAssign(&topPositionSpans_, nil);
  return true;
}

- (void)fillPositionQueue {
  JreAssert([((OrgApacheLuceneSearchSpansSpanPositionQueue *) nil_chk(val$byPositionQueue_)) size] == 0, @"org/apache/lucene/search/spans/SpanOrQuery.java:275 condition failed: assert byPositionQueue.size() == 0;");
  OrgApacheLuceneSearchDisiWrapper *listAtCurrentDoc = JreRetainedLocalValue([((OrgApacheLuceneSearchDisiPriorityQueue *) nil_chk(val$byDocQueue_)) topList]);
  while (listAtCurrentDoc != nil) {
    OrgApacheLuceneSearchSpansSpans *spansAtDoc = JreRetainedLocalValue(listAtCurrentDoc->iterator_);
    if (lastDocTwoPhaseMatched_ == listAtCurrentDoc->doc_) {
      if (listAtCurrentDoc->twoPhaseView_ != nil) {
        if (listAtCurrentDoc->lastApproxNonMatchDoc_ == listAtCurrentDoc->doc_) {
          spansAtDoc = nil;
        }
        else {
          if (listAtCurrentDoc->lastApproxMatchDoc_ != listAtCurrentDoc->doc_) {
            if (![listAtCurrentDoc->twoPhaseView_ matches]) {
              spansAtDoc = nil;
            }
          }
        }
      }
    }
    if (spansAtDoc != nil) {
      JreAssert([spansAtDoc docID] == listAtCurrentDoc->doc_, @"org/apache/lucene/search/spans/SpanOrQuery.java:295 condition failed: assert spansAtDoc.docID() == listAtCurrentDoc.doc;");
      JreAssert([spansAtDoc startPosition] == -1, @"org/apache/lucene/search/spans/SpanOrQuery.java:296 condition failed: assert spansAtDoc.startPosition() == -1;");
      [spansAtDoc nextStartPosition];
      JreAssert([spansAtDoc startPosition] != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, @"org/apache/lucene/search/spans/SpanOrQuery.java:298 condition failed: assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;");
      [val$byPositionQueue_ addWithId:spansAtDoc];
    }
    listAtCurrentDoc = listAtCurrentDoc->next_;
  }
  JreAssert([val$byPositionQueue_ size] > 0, @"org/apache/lucene/search/spans/SpanOrQuery.java:303 condition failed: assert byPositionQueue.size() > 0;");
}

- (jint)nextStartPosition {
  if (topPositionSpans_ == nil) {
    [((OrgApacheLuceneSearchSpansSpanPositionQueue *) nil_chk(val$byPositionQueue_)) clear];
    [self fillPositionQueue];
    JreStrongAssign(&topPositionSpans_, [val$byPositionQueue_ top]);
  }
  else {
    [topPositionSpans_ nextStartPosition];
    JreStrongAssign(&topPositionSpans_, [((OrgApacheLuceneSearchSpansSpanPositionQueue *) nil_chk(val$byPositionQueue_)) updateTop]);
  }
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(topPositionSpans_)) startPosition];
}

- (jint)startPosition {
  return topPositionSpans_ == nil ? -1 : [topPositionSpans_ startPosition];
}

- (jint)endPosition {
  return topPositionSpans_ == nil ? -1 : [topPositionSpans_ endPosition];
}

- (jint)width {
  return [((OrgApacheLuceneSearchSpansSpans *) nil_chk(topPositionSpans_)) width];
}

- (void)collectWithOrgApacheLuceneSearchSpansSpanCollector:(id<OrgApacheLuceneSearchSpansSpanCollector>)collector {
  [((OrgApacheLuceneSearchSpansSpans *) nil_chk(topPositionSpans_)) collectWithOrgApacheLuceneSearchSpansSpanCollector:collector];
}

- (NSString *)description {
  return JreStrcat("$@$I$I$I", @"spanOr(", this$0_->this$0_, @")@", [self docID], @": ", [self startPosition], @" - ", [self endPosition]);
}

- (jlong)cost {
  if (cost_ == -1) {
    cost_ = 0;
    for (OrgApacheLuceneSearchSpansSpans * __strong spans in nil_chk(val$subSpans_)) {
      cost_ += [((OrgApacheLuceneSearchSpansSpans *) nil_chk(spans)) cost];
    }
  }
  return cost_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$byDocQueue_);
  RELEASE_(val$byPositionQueue_);
  RELEASE_(val$subSpans_);
  RELEASE_(topPositionSpans_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchTwoPhaseIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight:withOrgApacheLuceneSearchDisiPriorityQueue:withOrgApacheLuceneSearchSpansSpanPositionQueue:withJavaUtilArrayList:);
  methods[1].selector = @selector(nextDoc);
  methods[2].selector = @selector(advanceWithInt:);
  methods[3].selector = @selector(docID);
  methods[4].selector = @selector(asTwoPhaseIterator);
  methods[5].selector = @selector(twoPhaseCurrentDocMatches);
  methods[6].selector = @selector(fillPositionQueue);
  methods[7].selector = @selector(nextStartPosition);
  methods[8].selector = @selector(startPosition);
  methods[9].selector = @selector(endPosition);
  methods[10].selector = @selector(width);
  methods[11].selector = @selector(collectWithOrgApacheLuceneSearchSpansSpanCollector:);
  methods[12].selector = @selector(description);
  methods[13].selector = @selector(cost);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$byDocQueue_", "LOrgApacheLuceneSearchDisiPriorityQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, 7, -1 },
    { "val$byPositionQueue_", "LOrgApacheLuceneSearchSpansSpanPositionQueue;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$subSpans_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
    { "topPositionSpans_", "LOrgApacheLuceneSearchSpansSpans;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastDocTwoPhaseMatched_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cost_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight;LOrgApacheLuceneSearchDisiPriorityQueue;LOrgApacheLuceneSearchSpansSpanPositionQueue;LJavaUtilArrayList;", "LJavaIoIOException;", "advance", "I", "collect", "LOrgApacheLuceneSearchSpansSpanCollector;", "toString", "Lorg/apache/lucene/search/DisiPriorityQueue<Lorg/apache/lucene/search/spans/Spans;>;", "Ljava/util/ArrayList<Lorg/apache/lucene/search/spans/Spans;>;", "LOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight;", "getSpansWithOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchSpansSpanWeight_Postings:" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 = { "", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x8010, 14, 7, 9, -1, 10, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1;
}

@end

void OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *self, OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *outer$, OrgApacheLuceneSearchDisiPriorityQueue *capture$0, OrgApacheLuceneSearchSpansSpanPositionQueue *capture$1, JavaUtilArrayList *capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$byDocQueue_, capture$0);
  JreStrongAssign(&self->val$byPositionQueue_, capture$1);
  JreStrongAssign(&self->val$subSpans_, capture$2);
  OrgApacheLuceneSearchSpansSpans_init(self);
  JreStrongAssign(&self->topPositionSpans_, nil);
  self->lastDocTwoPhaseMatched_ = -1;
  self->cost_ = -1;
}

OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *new_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *outer$, OrgApacheLuceneSearchDisiPriorityQueue *capture$0, OrgApacheLuceneSearchSpansSpanPositionQueue *capture$1, JavaUtilArrayList *capture$2) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1, initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_, outer$, capture$0, capture$1, capture$2)
}

OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight *outer$, OrgApacheLuceneSearchDisiPriorityQueue *capture$0, OrgApacheLuceneSearchSpansSpanPositionQueue *capture$1, JavaUtilArrayList *capture$2) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1, initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_withOrgApacheLuceneSearchDisiPriorityQueue_withOrgApacheLuceneSearchSpansSpanPositionQueue_withJavaUtilArrayList_, outer$, capture$0, capture$1, capture$2)
}

@implementation OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1

- (instancetype)initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1:(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *)outer$
                                   withOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)approximation {
  OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_(self, outer$, approximation);
  return self;
}

- (jboolean)matches {
  return [this$0_ twoPhaseCurrentDocMatches];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1:withOrgApacheLuceneSearchDocIdSetIterator:);
  methods[1].selector = @selector(matches);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1;LOrgApacheLuceneSearchDocIdSetIterator;", "LJavaIoIOException;", "LOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1;", "asTwoPhaseIterator" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1 = { "", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x8010, 2, 1, 2, -1, 3, -1, -1 };
  return &_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1;
}

@end

void OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1 *self, OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchTwoPhaseIterator_initWithOrgApacheLuceneSearchDocIdSetIterator_(self, approximation);
}

OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1 *new_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1, initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_, outer$, approximation)
}

OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1 *create_OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1_initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1 *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_1, initWithOrgApacheLuceneSearchSpansSpanOrQuery_SpanOrWeight_1_withOrgApacheLuceneSearchDocIdSetIterator_, outer$, approximation)
}
