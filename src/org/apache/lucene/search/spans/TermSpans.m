//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/TermSpans.java
//

#include "J2ObjC_source.h"
#include "java/io/Serializable.h"
#include "java/lang/Comparable.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/spans/SpanCollector.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/search/spans/TermSpans.h"
#include "org/lukhnos/portmobile/util/Objects.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/spans/TermSpans must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneSearchSpansTermSpans

- (instancetype)initWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)postings
                            withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexPostingsEnum_withOrgApacheLuceneIndexTerm_(self, postings, term);
  return self;
}

- (jint)nextDoc {
  doc_ = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postings_)) nextDoc];
  if (doc_ != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
    freq_ = [postings_ freq];
    JreAssert(freq_ >= 1, @"org/apache/lucene/search/spans/TermSpans.java:52 condition failed: assert freq >= 1;");
    count_ = 0;
  }
  position_ = -1;
  return doc_;
}

- (jint)advanceWithInt:(jint)target {
  JreAssert(target > doc_, @"org/apache/lucene/search/spans/TermSpans.java:61 condition failed: assert target > doc;");
  doc_ = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postings_)) advanceWithInt:target];
  if (doc_ != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
    freq_ = [postings_ freq];
    JreAssert(freq_ >= 1, @"org/apache/lucene/search/spans/TermSpans.java:65 condition failed: assert freq >= 1;");
    count_ = 0;
  }
  position_ = -1;
  return doc_;
}

- (jint)docID {
  return doc_;
}

- (jint)nextStartPosition {
  if (count_ == freq_) {
    JreAssert(position_ != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, @"org/apache/lucene/search/spans/TermSpans.java:80 condition failed: assert position != NO_MORE_POSITIONS;");
    return position_ = OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS;
  }
  jint prevPosition = position_;
  position_ = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postings_)) nextPosition];
  JreAssert(position_ >= prevPosition, JreStrcat("$I$I", @"prevPosition=", prevPosition, @" > position=", position_));
  JreAssert(position_ != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS, @"org/apache/lucene/search/spans/TermSpans.java:86 condition failed: assert position != NO_MORE_POSITIONS;");
  count_++;
  readPayload_ = false;
  return position_;
}

- (jint)startPosition {
  return position_;
}

- (jint)endPosition {
  return (position_ == -1) ? -1 : (position_ != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS) ? position_ + 1 : OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS;
}

- (jint)width {
  return 0;
}

- (jlong)cost {
  return [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postings_)) cost];
}

- (void)collectWithOrgApacheLuceneSearchSpansSpanCollector:(id<OrgApacheLuceneSearchSpansSpanCollector>)collector {
  [((id<OrgApacheLuceneSearchSpansSpanCollector>) nil_chk(collector)) collectLeafWithOrgApacheLuceneIndexPostingsEnum:postings_ withInt:position_ withOrgApacheLuceneIndexTerm:term_];
}

- (NSString *)description {
  return JreStrcat("$$$$", @"spans(", [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) description], @")@", (doc_ == -1 ? @"START" : (doc_ == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) ? @"ENDDOC" : JreStrcat("I$@", doc_, @" - ", (position_ == OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS ? @"ENDPOS" : (id) JavaLangInteger_valueOfWithInt_(position_)))));
}

- (OrgApacheLuceneIndexPostingsEnum *)getPostings {
  return postings_;
}

- (void)dealloc {
  RELEASE_(postings_);
  RELEASE_(term_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexPostingsEnum:withOrgApacheLuceneIndexTerm:);
  methods[1].selector = @selector(nextDoc);
  methods[2].selector = @selector(advanceWithInt:);
  methods[3].selector = @selector(docID);
  methods[4].selector = @selector(nextStartPosition);
  methods[5].selector = @selector(startPosition);
  methods[6].selector = @selector(endPosition);
  methods[7].selector = @selector(width);
  methods[8].selector = @selector(cost);
  methods[9].selector = @selector(collectWithOrgApacheLuceneSearchSpansSpanCollector:);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(getPostings);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "postings_", "LOrgApacheLuceneIndexPostingsEnum;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "term_", "LOrgApacheLuceneIndexTerm;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "doc_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "freq_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "readPayload_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexPostingsEnum;LOrgApacheLuceneIndexTerm;", "LJavaIoIOException;", "advance", "I", "collect", "LOrgApacheLuceneSearchSpansSpanCollector;", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSpansTermSpans = { "TermSpans", "org.apache.lucene.search.spans", ptrTable, methods, fields, 7, 0x1, 12, 7, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSpansTermSpans;
}

@end

void OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexPostingsEnum_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchSpansTermSpans *self, OrgApacheLuceneIndexPostingsEnum *postings, OrgApacheLuceneIndexTerm *term) {
  OrgApacheLuceneSearchSpansSpans_init(self);
  JreStrongAssign(&self->postings_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(postings));
  JreStrongAssign(&self->term_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(term));
  self->doc_ = -1;
  self->position_ = -1;
}

OrgApacheLuceneSearchSpansTermSpans *new_OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexPostingsEnum_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexPostingsEnum *postings, OrgApacheLuceneIndexTerm *term) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSpansTermSpans, initWithOrgApacheLuceneIndexPostingsEnum_withOrgApacheLuceneIndexTerm_, postings, term)
}

OrgApacheLuceneSearchSpansTermSpans *create_OrgApacheLuceneSearchSpansTermSpans_initWithOrgApacheLuceneIndexPostingsEnum_withOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexPostingsEnum *postings, OrgApacheLuceneIndexTerm *term) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSpansTermSpans, initWithOrgApacheLuceneIndexPostingsEnum_withOrgApacheLuceneIndexTerm_, postings, term)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSpansTermSpans)
