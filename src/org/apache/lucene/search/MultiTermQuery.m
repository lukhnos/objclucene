//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/MultiTermQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Float.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/BlendedTermQuery.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/ConstantScoreQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/ScoringRewrite.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/TopTermsRewrite.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/lukhnos/portmobile/util/Objects.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/MultiTermQuery must not be compiled with ARC (-fobjc-arc)"
#endif

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchMultiTermQuery__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchMultiTermQuery__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchMultiTermQuery__Annotations$2(void);

@interface OrgApacheLuceneSearchMultiTermQuery_1 : OrgApacheLuceneSearchMultiTermQuery_RewriteMethod

- (instancetype)init;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                   withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiTermQuery_1)

__attribute__((unused)) static void OrgApacheLuceneSearchMultiTermQuery_1_init(OrgApacheLuceneSearchMultiTermQuery_1 *self);

__attribute__((unused)) static OrgApacheLuceneSearchMultiTermQuery_1 *new_OrgApacheLuceneSearchMultiTermQuery_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchMultiTermQuery_1 *create_OrgApacheLuceneSearchMultiTermQuery_1_init(void);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchMultiTermQuery)

OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_REWRITE;
OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_FILTER_REWRITE;
OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_REWRITE;
OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_QUERY_REWRITE;
OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_REWRITE;
OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE;

@implementation OrgApacheLuceneSearchMultiTermQuery

+ (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)CONSTANT_SCORE_REWRITE {
  return OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_REWRITE;
}

+ (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)CONSTANT_SCORE_FILTER_REWRITE {
  return OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_FILTER_REWRITE;
}

+ (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)SCORING_BOOLEAN_REWRITE {
  return OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_REWRITE;
}

+ (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)SCORING_BOOLEAN_QUERY_REWRITE {
  return OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_QUERY_REWRITE;
}

+ (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)CONSTANT_SCORE_BOOLEAN_REWRITE {
  return OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_REWRITE;
}

+ (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE {
  return OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE;
}

- (instancetype)initWithNSString:(NSString *)field {
  OrgApacheLuceneSearchMultiTermQuery_initWithNSString_(self, field);
  return self;
}

- (NSString *)getField {
  return field_;
}

- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                                      withOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)atts {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms {
  return [self getTermsEnumWithOrgApacheLuceneIndexTerms:terms withOrgApacheLuceneUtilAttributeSource:create_OrgApacheLuceneUtilAttributeSource_init()];
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return [((OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *) nil_chk(rewriteMethod_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader withOrgApacheLuceneSearchMultiTermQuery:self];
}

- (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)getRewriteMethod {
  return rewriteMethod_;
}

- (void)setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)method {
  JreStrongAssign(&rewriteMethod_, method);
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + JavaLangFloat_floatToIntBitsWithFloat_([self getBoost]);
  result = prime * result + ((jint) [((OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *) nil_chk(rewriteMethod_)) hash]);
  if (field_ != nil) result = prime * result + ((jint) [field_ hash]);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (obj == nil) return false;
  if (!JreObjectEqualsEquals([self java_getClass], [obj java_getClass])) return false;
  OrgApacheLuceneSearchMultiTermQuery *other = (OrgApacheLuceneSearchMultiTermQuery *) cast_chk(obj, [OrgApacheLuceneSearchMultiTermQuery class]);
  if (![super isEqual:obj]) return false;
  if (![((OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *) nil_chk(rewriteMethod_)) isEqual:other->rewriteMethod_]) {
    return false;
  }
  return (other->field_ == nil ? field_ == nil : [other->field_ isEqual:field_]);
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(rewriteMethod_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x404, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x14, 1, 4, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x11, 5, 6, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getField);
  methods[2].selector = @selector(getTermsEnumWithOrgApacheLuceneIndexTerms:withOrgApacheLuceneUtilAttributeSource:);
  methods[3].selector = @selector(getTermsEnumWithOrgApacheLuceneIndexTerms:);
  methods[4].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[5].selector = @selector(getRewriteMethod);
  methods[6].selector = @selector(setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "rewriteMethod_", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "CONSTANT_SCORE_REWRITE", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "CONSTANT_SCORE_FILTER_REWRITE", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", .constantValue.asLong = 0, 0x19, -1, 13, -1, 14 },
    { "SCORING_BOOLEAN_REWRITE", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "SCORING_BOOLEAN_QUERY_REWRITE", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", .constantValue.asLong = 0, 0x19, -1, 16, -1, 17 },
    { "CONSTANT_SCORE_BOOLEAN_REWRITE", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", .constantValue.asLong = 0, 0x19, -1, 19, -1, 20 },
  };
  static const void *ptrTable[] = { "LNSString;", "getTermsEnum", "LOrgApacheLuceneIndexTerms;LOrgApacheLuceneUtilAttributeSource;", "LJavaIoIOException;", "LOrgApacheLuceneIndexTerms;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "setRewriteMethod", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", "hashCode", "equals", "LNSObject;", &OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_REWRITE, &OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_FILTER_REWRITE, (void *)&OrgApacheLuceneSearchMultiTermQuery__Annotations$0, &OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_REWRITE, &OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_QUERY_REWRITE, (void *)&OrgApacheLuceneSearchMultiTermQuery__Annotations$1, &OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_REWRITE, &OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE, (void *)&OrgApacheLuceneSearchMultiTermQuery__Annotations$2, "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;LOrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite;LOrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite;LOrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiTermQuery = { "MultiTermQuery", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x401, 9, 8, -1, 21, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMultiTermQuery;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchMultiTermQuery class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_REWRITE, new_OrgApacheLuceneSearchMultiTermQuery_1_init());
    JreStrongAssign(&OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_FILTER_REWRITE, OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_REWRITE);
    JreStrongAssign(&OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_REWRITE, JreLoadStatic(OrgApacheLuceneSearchScoringRewrite, SCORING_BOOLEAN_REWRITE));
    JreStrongAssign(&OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_QUERY_REWRITE, OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_REWRITE);
    JreStrongAssign(&OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_REWRITE, JreLoadStatic(OrgApacheLuceneSearchScoringRewrite, CONSTANT_SCORE_BOOLEAN_REWRITE));
    JreStrongAssign(&OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE, OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_REWRITE);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchMultiTermQuery)
  }
}

@end

void OrgApacheLuceneSearchMultiTermQuery_initWithNSString_(OrgApacheLuceneSearchMultiTermQuery *self, NSString *field) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssign(&self->rewriteMethod_, OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_REWRITE);
  JreStrongAssign(&self->field_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_withNSString_(field, @"field must not be null"));
}

IOSObjectArray *OrgApacheLuceneSearchMultiTermQuery__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneSearchMultiTermQuery__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneSearchMultiTermQuery__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiTermQuery)

@implementation OrgApacheLuceneSearchMultiTermQuery_RewriteMethod

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchMultiTermQuery_RewriteMethod_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                   withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query
                                                         withOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                                                withOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)atts {
  return [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query)) getTermsEnumWithOrgApacheLuceneIndexTerms:terms withOrgApacheLuceneUtilAttributeSource:atts];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x401, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x4, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneSearchMultiTermQuery:);
  methods[2].selector = @selector(getTermsEnumWithOrgApacheLuceneSearchMultiTermQuery:withOrgApacheLuceneIndexTerms:withOrgApacheLuceneUtilAttributeSource:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "rewrite", "LOrgApacheLuceneIndexIndexReader;LOrgApacheLuceneSearchMultiTermQuery;", "LJavaIoIOException;", "getTermsEnum", "LOrgApacheLuceneSearchMultiTermQuery;LOrgApacheLuceneIndexTerms;LOrgApacheLuceneUtilAttributeSource;", "LOrgApacheLuceneSearchMultiTermQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiTermQuery_RewriteMethod = { "RewriteMethod", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x409, 3, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMultiTermQuery_RewriteMethod;
}

@end

void OrgApacheLuceneSearchMultiTermQuery_RewriteMethod_init(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod)

@implementation OrgApacheLuceneSearchMultiTermQuery_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchMultiTermQuery_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                   withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query {
  OrgApacheLuceneSearchQuery *result = create_OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper_initPackagePrivateWithOrgApacheLuceneSearchMultiTermQuery_(query);
  [result setBoostWithFloat:[((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(query)) getBoost]];
  return JreRetainedLocalValue(result);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneSearchMultiTermQuery:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "rewrite", "LOrgApacheLuceneIndexIndexReader;LOrgApacheLuceneSearchMultiTermQuery;", "LOrgApacheLuceneSearchMultiTermQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiTermQuery_1 = { "", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMultiTermQuery_1;
}

@end

void OrgApacheLuceneSearchMultiTermQuery_1_init(OrgApacheLuceneSearchMultiTermQuery_1 *self) {
  OrgApacheLuceneSearchMultiTermQuery_RewriteMethod_init(self);
}

OrgApacheLuceneSearchMultiTermQuery_1 *new_OrgApacheLuceneSearchMultiTermQuery_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiTermQuery_1, init)
}

OrgApacheLuceneSearchMultiTermQuery_1 *create_OrgApacheLuceneSearchMultiTermQuery_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiTermQuery_1, init)
}

@implementation OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_initWithInt_(self, size);
  return self;
}

- (jint)getMaxSize {
  return OrgApacheLuceneSearchBooleanQuery_getMaxClauseCount();
}

- (OrgApacheLuceneSearchBooleanQuery_Builder *)getTopLevelBuilder {
  OrgApacheLuceneSearchBooleanQuery_Builder *builder = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [builder setDisableCoordWithBoolean:true];
  return builder;
}

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchBooleanQuery_Builder *)builder {
  return [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(builder)) build];
}

- (void)addClauseWithId:(OrgApacheLuceneSearchBooleanQuery_Builder *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docCount
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states {
  OrgApacheLuceneSearchTermQuery *tq = create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(term, states);
  [tq setBoostWithFloat:boost];
  [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(topLevel)) addWithOrgApacheLuceneSearchQuery:tq withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBooleanQuery_Builder;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getMaxSize);
  methods[2].selector = @selector(getTopLevelBuilder);
  methods[3].selector = @selector(buildWithId:);
  methods[4].selector = @selector(addClauseWithId:withOrgApacheLuceneIndexTerm:withInt:withFloat:withOrgApacheLuceneIndexTermContext:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "build", "LOrgApacheLuceneSearchBooleanQuery_Builder;", "addClause", "LOrgApacheLuceneSearchBooleanQuery_Builder;LOrgApacheLuceneIndexTerm;IFLOrgApacheLuceneIndexTermContext;", "LOrgApacheLuceneSearchMultiTermQuery;", "Lorg/apache/lucene/search/TopTermsRewrite<Lorg/apache/lucene/search/BooleanQuery$Builder;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite = { "TopTermsScoringBooleanQueryRewrite", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x19, 5, 0, 5, -1, -1, 6, -1 };
  return &_OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite;
}

@end

void OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_initWithInt_(OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite *self, jint size) {
  OrgApacheLuceneSearchTopTermsRewrite_initWithInt_(self, size);
}

OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite *new_OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite, initWithInt_, size)
}

OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite *create_OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite, initWithInt_, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite)

@implementation OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite_initWithInt_(self, size);
  return self;
}

- (jint)getMaxSize {
  return OrgApacheLuceneSearchBooleanQuery_getMaxClauseCount();
}

- (OrgApacheLuceneSearchBlendedTermQuery_Builder *)getTopLevelBuilder {
  OrgApacheLuceneSearchBlendedTermQuery_Builder *builder = create_OrgApacheLuceneSearchBlendedTermQuery_Builder_init();
  [builder setRewriteMethodWithOrgApacheLuceneSearchBlendedTermQuery_RewriteMethod:JreLoadStatic(OrgApacheLuceneSearchBlendedTermQuery, BOOLEAN_REWRITE)];
  return builder;
}

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchBlendedTermQuery_Builder *)builder {
  return [((OrgApacheLuceneSearchBlendedTermQuery_Builder *) nil_chk(builder)) build];
}

- (void)addClauseWithId:(OrgApacheLuceneSearchBlendedTermQuery_Builder *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docCount
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states {
  [((OrgApacheLuceneSearchBlendedTermQuery_Builder *) nil_chk(topLevel)) addWithOrgApacheLuceneIndexTerm:term withFloat:boost withOrgApacheLuceneIndexTermContext:states];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBlendedTermQuery_Builder;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getMaxSize);
  methods[2].selector = @selector(getTopLevelBuilder);
  methods[3].selector = @selector(buildWithId:);
  methods[4].selector = @selector(addClauseWithId:withOrgApacheLuceneIndexTerm:withInt:withFloat:withOrgApacheLuceneIndexTermContext:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "build", "LOrgApacheLuceneSearchBlendedTermQuery_Builder;", "addClause", "LOrgApacheLuceneSearchBlendedTermQuery_Builder;LOrgApacheLuceneIndexTerm;IFLOrgApacheLuceneIndexTermContext;", "LOrgApacheLuceneSearchMultiTermQuery;", "Lorg/apache/lucene/search/TopTermsRewrite<Lorg/apache/lucene/search/BlendedTermQuery$Builder;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite = { "TopTermsBlendedFreqScoringRewrite", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x19, 5, 0, 5, -1, -1, 6, -1 };
  return &_OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite;
}

@end

void OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite_initWithInt_(OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite *self, jint size) {
  OrgApacheLuceneSearchTopTermsRewrite_initWithInt_(self, size);
}

OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite *new_OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite, initWithInt_, size)
}

OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite *create_OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite, initWithInt_, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite)

@implementation OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite_initWithInt_(self, size);
  return self;
}

- (jint)getMaxSize {
  return OrgApacheLuceneSearchBooleanQuery_getMaxClauseCount();
}

- (OrgApacheLuceneSearchBooleanQuery_Builder *)getTopLevelBuilder {
  OrgApacheLuceneSearchBooleanQuery_Builder *builder = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [builder setDisableCoordWithBoolean:true];
  return builder;
}

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchBooleanQuery_Builder *)builder {
  return [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(builder)) build];
}

- (void)addClauseWithId:(OrgApacheLuceneSearchBooleanQuery_Builder *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docFreq
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states {
  OrgApacheLuceneSearchQuery *q = create_OrgApacheLuceneSearchConstantScoreQuery_initWithOrgApacheLuceneSearchQuery_(create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(term, states));
  [q setBoostWithFloat:boost];
  [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(topLevel)) addWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBooleanQuery_Builder;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getMaxSize);
  methods[2].selector = @selector(getTopLevelBuilder);
  methods[3].selector = @selector(buildWithId:);
  methods[4].selector = @selector(addClauseWithId:withOrgApacheLuceneIndexTerm:withInt:withFloat:withOrgApacheLuceneIndexTermContext:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "build", "LOrgApacheLuceneSearchBooleanQuery_Builder;", "addClause", "LOrgApacheLuceneSearchBooleanQuery_Builder;LOrgApacheLuceneIndexTerm;IFLOrgApacheLuceneIndexTermContext;", "LOrgApacheLuceneSearchMultiTermQuery;", "Lorg/apache/lucene/search/TopTermsRewrite<Lorg/apache/lucene/search/BooleanQuery$Builder;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite = { "TopTermsBoostOnlyBooleanQueryRewrite", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x19, 5, 0, 5, -1, -1, 6, -1 };
  return &_OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite;
}

@end

void OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite_initWithInt_(OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite *self, jint size) {
  OrgApacheLuceneSearchTopTermsRewrite_initWithInt_(self, size);
}

OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite *new_OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite, initWithInt_, size)
}

OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite *create_OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite, initWithInt_, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite)
