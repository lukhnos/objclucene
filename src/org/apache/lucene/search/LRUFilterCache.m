//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/LRUFilterCache.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/BitsFilteredDocIdSet.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/FilterCachingPolicy.h"
#include "org/apache/lucene/search/LRUFilterCache.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/RoaringDocIdSet.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/LRUFilterCache must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchLRUFilterCache () {
 @public
  jint maxSize_;
  jlong maxRamBytesUsed_;
  id<JavaUtilMap> uniqueFilters_;
  id<JavaUtilSet> mostRecentlyUsedFilters_;
  id<JavaUtilMap> cache_;
  volatile_jlong ramBytesUsed_;
  volatile_jlong hitCount_;
  volatile_jlong missCount_;
  volatile_jlong cacheCount_;
  volatile_jlong cacheSize_;
}

- (void)onEvictionWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)singleton;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUFilterCache, uniqueFilters_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUFilterCache, mostRecentlyUsedFilters_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUFilterCache, cache_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneSearchLRUFilterCache_onEvictionWithOrgApacheLuceneSearchFilter_(OrgApacheLuceneSearchLRUFilterCache *self, OrgApacheLuceneSearchFilter *singleton);

__attribute__((unused)) static jlong OrgApacheLuceneSearchLRUFilterCache_getHitCount(OrgApacheLuceneSearchLRUFilterCache *self);

__attribute__((unused)) static jlong OrgApacheLuceneSearchLRUFilterCache_getMissCount(OrgApacheLuceneSearchLRUFilterCache *self);

__attribute__((unused)) static jlong OrgApacheLuceneSearchLRUFilterCache_getCacheSize(OrgApacheLuceneSearchLRUFilterCache *self);

__attribute__((unused)) static jlong OrgApacheLuceneSearchLRUFilterCache_getCacheCount(OrgApacheLuceneSearchLRUFilterCache *self);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchLRUFilterCache__Annotations$0(void);

@interface OrgApacheLuceneSearchLRUFilterCache_1 : NSObject < OrgApacheLuceneIndexLeafReader_CoreClosedListener > {
 @public
  OrgApacheLuceneSearchLRUFilterCache *this$0_;
}

- (instancetype)initWithOrgApacheLuceneSearchLRUFilterCache:(OrgApacheLuceneSearchLRUFilterCache *)outer$;

- (void)onCloseWithId:(id)ownerCoreCacheKey;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchLRUFilterCache_1)

__attribute__((unused)) static void OrgApacheLuceneSearchLRUFilterCache_1_initWithOrgApacheLuceneSearchLRUFilterCache_(OrgApacheLuceneSearchLRUFilterCache_1 *self, OrgApacheLuceneSearchLRUFilterCache *outer$);

__attribute__((unused)) static OrgApacheLuceneSearchLRUFilterCache_1 *new_OrgApacheLuceneSearchLRUFilterCache_1_initWithOrgApacheLuceneSearchLRUFilterCache_(OrgApacheLuceneSearchLRUFilterCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchLRUFilterCache_1 *create_OrgApacheLuceneSearchLRUFilterCache_1_initWithOrgApacheLuceneSearchLRUFilterCache_(OrgApacheLuceneSearchLRUFilterCache *outer$);

@interface OrgApacheLuceneSearchLRUFilterCache_LeafCache : NSObject < OrgApacheLuceneUtilAccountable > {
 @public
  OrgApacheLuceneSearchLRUFilterCache *this$0_;
  id key_;
  id<JavaUtilMap> cache_;
  volatile_jlong ramBytesUsed_;
}

- (instancetype)initWithOrgApacheLuceneSearchLRUFilterCache:(OrgApacheLuceneSearchLRUFilterCache *)outer$
                                                     withId:(id)key;

- (void)onDocIdSetCacheWithLong:(jlong)ramBytesUsed;

- (void)onDocIdSetEvictionWithLong:(jlong)ramBytesUsed;

- (OrgApacheLuceneSearchDocIdSet *)getWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter;

- (void)putIfAbsentWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter
                 withOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set;

- (void)removeWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter;

- (jlong)ramBytesUsed;

- (id<JavaUtilCollection>)getChildResources;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchLRUFilterCache_LeafCache)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUFilterCache_LeafCache, key_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUFilterCache_LeafCache, cache_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneSearchLRUFilterCache_LeafCache_initWithOrgApacheLuceneSearchLRUFilterCache_withId_(OrgApacheLuceneSearchLRUFilterCache_LeafCache *self, OrgApacheLuceneSearchLRUFilterCache *outer$, id key);

__attribute__((unused)) static OrgApacheLuceneSearchLRUFilterCache_LeafCache *new_OrgApacheLuceneSearchLRUFilterCache_LeafCache_initWithOrgApacheLuceneSearchLRUFilterCache_withId_(OrgApacheLuceneSearchLRUFilterCache *outer$, id key) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchLRUFilterCache_LeafCache *create_OrgApacheLuceneSearchLRUFilterCache_LeafCache_initWithOrgApacheLuceneSearchLRUFilterCache_withId_(OrgApacheLuceneSearchLRUFilterCache *outer$, id key);

__attribute__((unused)) static void OrgApacheLuceneSearchLRUFilterCache_LeafCache_onDocIdSetCacheWithLong_(OrgApacheLuceneSearchLRUFilterCache_LeafCache *self, jlong ramBytesUsed);

__attribute__((unused)) static void OrgApacheLuceneSearchLRUFilterCache_LeafCache_onDocIdSetEvictionWithLong_(OrgApacheLuceneSearchLRUFilterCache_LeafCache *self, jlong ramBytesUsed);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchLRUFilterCache_LeafCache)

@interface OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter : OrgApacheLuceneSearchFilter {
 @public
  OrgApacheLuceneSearchLRUFilterCache *this$0_;
  OrgApacheLuceneSearchFilter *in_;
  id<OrgApacheLuceneSearchFilterCachingPolicy> policy_;
}

- (instancetype)initWithOrgApacheLuceneSearchLRUFilterCache:(OrgApacheLuceneSearchLRUFilterCache *)outer$
                            withOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)inArg
               withOrgApacheLuceneSearchFilterCachingPolicy:(id<OrgApacheLuceneSearchFilterCachingPolicy>)policy;

- (OrgApacheLuceneSearchDocIdSet *)getDocIdSetWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                            withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)acceptDocs;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

- (NSString *)toStringWithNSString:(NSString *)field;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter, in_, OrgApacheLuceneSearchFilter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter, policy_, id<OrgApacheLuceneSearchFilterCachingPolicy>)

__attribute__((unused)) static void OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter_initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_(OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *self, OrgApacheLuceneSearchLRUFilterCache *outer$, OrgApacheLuceneSearchFilter *inArg, id<OrgApacheLuceneSearchFilterCachingPolicy> policy);

__attribute__((unused)) static OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *new_OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter_initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_(OrgApacheLuceneSearchLRUFilterCache *outer$, OrgApacheLuceneSearchFilter *inArg, id<OrgApacheLuceneSearchFilterCachingPolicy> policy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *create_OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter_initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_(OrgApacheLuceneSearchLRUFilterCache *outer$, OrgApacheLuceneSearchFilter *inArg, id<OrgApacheLuceneSearchFilterCachingPolicy> policy);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchLRUFilterCache)

jlong OrgApacheLuceneSearchLRUFilterCache_HASHTABLE_RAM_BYTES_PER_ENTRY;
jlong OrgApacheLuceneSearchLRUFilterCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;

@implementation OrgApacheLuceneSearchLRUFilterCache

+ (jlong)FILTER_DEFAULT_RAM_BYTES_USED {
  return OrgApacheLuceneSearchLRUFilterCache_FILTER_DEFAULT_RAM_BYTES_USED;
}

+ (jlong)HASHTABLE_RAM_BYTES_PER_ENTRY {
  return OrgApacheLuceneSearchLRUFilterCache_HASHTABLE_RAM_BYTES_PER_ENTRY;
}

+ (jlong)LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY {
  return OrgApacheLuceneSearchLRUFilterCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;
}

- (instancetype)initWithInt:(jint)maxSize
                   withLong:(jlong)maxRamBytesUsed {
  OrgApacheLuceneSearchLRUFilterCache_initWithInt_withLong_(self, maxSize, maxRamBytesUsed);
  return self;
}

- (void)onHitWithId:(id)readerCoreKey
withOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter {
  JrePlusAssignVolatileLongJ(&hitCount_, 1);
}

- (void)onMissWithId:(id)readerCoreKey
withOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter {
  JreAssert(filter != nil, @"org/apache/lucene/search/LRUFilterCache.java:150 condition failed: assert filter != null;");
  JrePlusAssignVolatileLongJ(&missCount_, 1);
}

- (void)onFilterCacheWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter
                                            withLong:(jlong)ramBytesUsed {
  JrePlusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
}

- (void)onFilterEvictionWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter
                                               withLong:(jlong)ramBytesUsed {
  JreMinusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
}

- (void)onDocIdSetCacheWithId:(id)readerCoreKey
                     withLong:(jlong)ramBytesUsed {
  JrePlusAssignVolatileLongJ(&cacheSize_, 1);
  JrePlusAssignVolatileLongJ(&cacheCount_, 1);
  JrePlusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
}

- (void)onDocIdSetEvictionWithId:(id)readerCoreKey
                         withInt:(jint)numEntries
                        withLong:(jlong)sumRamBytesUsed {
  JreMinusAssignVolatileLongJ(&self->ramBytesUsed_, sumRamBytesUsed);
  JreMinusAssignVolatileLongJ(&cacheSize_, numEntries);
}

- (void)onClear {
  JreAssignVolatileLong(&ramBytesUsed_, 0);
  JreAssignVolatileLong(&cacheSize_, 0);
}

- (jboolean)requiresEviction {
  jint size = [((id<JavaUtilSet>) nil_chk(mostRecentlyUsedFilters_)) size];
  if (size == 0) {
    return false;
  }
  else {
    return size > maxSize_ || [self ramBytesUsed] > maxRamBytesUsed_;
  }
}

- (OrgApacheLuceneSearchDocIdSet *)getWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter
                            withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  @synchronized(self) {
    id readerKey = [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader])) getCoreCacheKey];
    OrgApacheLuceneSearchLRUFilterCache_LeafCache *leafCache = [((id<JavaUtilMap>) nil_chk(cache_)) getWithId:readerKey];
    if (leafCache == nil) {
      [self onMissWithId:readerKey withOrgApacheLuceneSearchFilter:filter];
      return JreRetainedLocalValue(nil);
    }
    OrgApacheLuceneSearchFilter *singleton = [((id<JavaUtilMap>) nil_chk(uniqueFilters_)) getWithId:filter];
    if (singleton == nil) {
      [self onMissWithId:readerKey withOrgApacheLuceneSearchFilter:filter];
      return JreRetainedLocalValue(nil);
    }
    OrgApacheLuceneSearchDocIdSet *cached = [leafCache getWithOrgApacheLuceneSearchFilter:singleton];
    if (cached == nil) {
      [self onMissWithId:readerKey withOrgApacheLuceneSearchFilter:singleton];
    }
    else {
      [self onHitWithId:readerKey withOrgApacheLuceneSearchFilter:singleton];
    }
    return JreRetainedLocalValue(cached);
  }
}

- (void)putIfAbsentWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter
         withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                 withOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set {
  @synchronized(self) {
    JreAssert([((OrgApacheLuceneSearchDocIdSet *) nil_chk(set)) isCacheable], @"org/apache/lucene/search/LRUFilterCache.java:241 condition failed: assert set.isCacheable();");
    OrgApacheLuceneSearchFilter *singleton = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(uniqueFilters_)) getWithId:filter]);
    if (singleton == nil) {
      [uniqueFilters_ putWithId:filter withId:filter];
      [self onFilterCacheWithOrgApacheLuceneSearchFilter:singleton withLong:OrgApacheLuceneSearchLRUFilterCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + [self ramBytesUsedWithOrgApacheLuceneSearchFilter:filter]];
    }
    else {
      filter = JreRetainedLocalValue(singleton);
    }
    id key = [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader])) getCoreCacheKey];
    OrgApacheLuceneSearchLRUFilterCache_LeafCache *leafCache = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(cache_)) getWithId:key]);
    if (leafCache == nil) {
      leafCache = create_OrgApacheLuceneSearchLRUFilterCache_LeafCache_initWithOrgApacheLuceneSearchLRUFilterCache_withId_(self, key);
      OrgApacheLuceneSearchLRUFilterCache_LeafCache *previous = [cache_ putWithId:[((OrgApacheLuceneIndexLeafReader *) nil_chk([context reader])) getCoreCacheKey] withId:leafCache];
      JrePlusAssignVolatileLongJ(&ramBytesUsed_, OrgApacheLuceneSearchLRUFilterCache_HASHTABLE_RAM_BYTES_PER_ENTRY);
      JreAssert(previous == nil, @"org/apache/lucene/search/LRUFilterCache.java:255 condition failed: assert previous == null;");
      [((OrgApacheLuceneIndexLeafReader *) nil_chk([context reader])) addCoreClosedListenerWithOrgApacheLuceneIndexLeafReader_CoreClosedListener:create_OrgApacheLuceneSearchLRUFilterCache_1_initWithOrgApacheLuceneSearchLRUFilterCache_(self)];
    }
    [leafCache putIfAbsentWithOrgApacheLuceneSearchFilter:filter withOrgApacheLuceneSearchDocIdSet:set];
    [self evictIfNecessary];
  }
}

- (void)evictIfNecessary {
  @synchronized(self) {
    if ([self requiresEviction]) {
      id<JavaUtilIterator> iterator = JreRetainedLocalValue([((id<JavaUtilSet>) nil_chk(mostRecentlyUsedFilters_)) iterator]);
      do {
        OrgApacheLuceneSearchFilter *filter = [((id<JavaUtilIterator>) nil_chk(iterator)) next];
        [iterator remove];
        OrgApacheLuceneSearchLRUFilterCache_onEvictionWithOrgApacheLuceneSearchFilter_(self, filter);
      }
      while ([iterator hasNext] && [self requiresEviction]);
    }
  }
}

- (void)clearCoreCacheKeyWithId:(id)coreKey {
  @synchronized(self) {
    OrgApacheLuceneSearchLRUFilterCache_LeafCache *leafCache = [((id<JavaUtilMap>) nil_chk(cache_)) removeWithId:coreKey];
    if (leafCache != nil) {
      JreMinusAssignVolatileLongJ(&ramBytesUsed_, OrgApacheLuceneSearchLRUFilterCache_HASHTABLE_RAM_BYTES_PER_ENTRY);
      [self onDocIdSetEvictionWithId:coreKey withInt:[((id<JavaUtilMap>) nil_chk(leafCache->cache_)) size] withLong:JreLoadVolatileLong(&leafCache->ramBytesUsed_)];
    }
  }
}

- (void)clearFilterWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter {
  @synchronized(self) {
    OrgApacheLuceneSearchFilter *singleton = [((id<JavaUtilMap>) nil_chk(uniqueFilters_)) removeWithId:filter];
    if (singleton != nil) {
      OrgApacheLuceneSearchLRUFilterCache_onEvictionWithOrgApacheLuceneSearchFilter_(self, singleton);
    }
  }
}

- (void)onEvictionWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)singleton {
  OrgApacheLuceneSearchLRUFilterCache_onEvictionWithOrgApacheLuceneSearchFilter_(self, singleton);
}

- (void)clear {
  @synchronized(self) {
    [((id<JavaUtilMap>) nil_chk(cache_)) clear];
    [((id<JavaUtilSet>) nil_chk(mostRecentlyUsedFilters_)) clear];
    [self onClear];
  }
}

- (void)assertConsistent {
  @synchronized(self) {
    if ([self requiresEviction]) {
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$I$I$J$J", @"requires evictions: size=", [((id<JavaUtilSet>) nil_chk(mostRecentlyUsedFilters_)) size], @", maxSize=", maxSize_, @", ramBytesUsed=", [self ramBytesUsed], @", maxRamBytesUsed=", maxRamBytesUsed_));
    }
    for (OrgApacheLuceneSearchLRUFilterCache_LeafCache * __strong leafCache in nil_chk([((id<JavaUtilMap>) nil_chk(cache_)) values])) {
      id<JavaUtilSet> keys = JavaUtilCollections_newSetFromMapWithJavaUtilMap_(create_JavaUtilIdentityHashMap_init());
      [((id<JavaUtilSet>) nil_chk(keys)) addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(((OrgApacheLuceneSearchLRUFilterCache_LeafCache *) nil_chk(leafCache))->cache_)) keySet]];
      [keys removeAllWithJavaUtilCollection:mostRecentlyUsedFilters_];
      if (![keys isEmpty]) {
        @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"One leaf cache contains more keys than the top-level cache: ", keys));
      }
    }
    jlong recomputedRamBytesUsed = OrgApacheLuceneSearchLRUFilterCache_HASHTABLE_RAM_BYTES_PER_ENTRY * [cache_ size] + OrgApacheLuceneSearchLRUFilterCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * [((id<JavaUtilMap>) nil_chk(uniqueFilters_)) size];
    for (OrgApacheLuceneSearchFilter * __strong filter in nil_chk(mostRecentlyUsedFilters_)) {
      recomputedRamBytesUsed += [self ramBytesUsedWithOrgApacheLuceneSearchFilter:filter];
    }
    for (OrgApacheLuceneSearchLRUFilterCache_LeafCache * __strong leafCache in nil_chk([cache_ values])) {
      recomputedRamBytesUsed += OrgApacheLuceneSearchLRUFilterCache_HASHTABLE_RAM_BYTES_PER_ENTRY * [((id<JavaUtilMap>) nil_chk(((OrgApacheLuceneSearchLRUFilterCache_LeafCache *) nil_chk(leafCache))->cache_)) size];
      for (OrgApacheLuceneSearchDocIdSet * __strong set in nil_chk([leafCache->cache_ values])) {
        recomputedRamBytesUsed += [((OrgApacheLuceneSearchDocIdSet *) nil_chk(set)) ramBytesUsed];
      }
    }
    if (recomputedRamBytesUsed != JreLoadVolatileLong(&ramBytesUsed_)) {
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$J$J", @"ramBytesUsed mismatch : ", JreLoadVolatileLong(&ramBytesUsed_), @" != ", recomputedRamBytesUsed));
    }
    jlong recomputedCacheSize = 0;
    for (OrgApacheLuceneSearchLRUFilterCache_LeafCache * __strong leafCache in nil_chk([cache_ values])) {
      recomputedCacheSize += [((id<JavaUtilMap>) nil_chk(((OrgApacheLuceneSearchLRUFilterCache_LeafCache *) nil_chk(leafCache))->cache_)) size];
    }
    if (recomputedCacheSize != OrgApacheLuceneSearchLRUFilterCache_getCacheSize(self)) {
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$J$J", @"cacheSize mismatch : ", OrgApacheLuceneSearchLRUFilterCache_getCacheSize(self), @" != ", recomputedCacheSize));
    }
  }
}

- (id<JavaUtilList>)cachedFilters {
  @synchronized(self) {
    return create_JavaUtilArrayList_initWithJavaUtilCollection_(mostRecentlyUsedFilters_);
  }
}

- (OrgApacheLuceneSearchFilter *)doCacheWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter
                           withOrgApacheLuceneSearchFilterCachingPolicy:(id<OrgApacheLuceneSearchFilterCachingPolicy>)policy {
  while ([filter isKindOfClass:[OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter class]]) {
    filter = ((OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *) nil_chk(((OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *) cast_chk(filter, [OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter class]))))->in_;
  }
  return create_OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter_initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_(self, filter, policy);
}

- (OrgApacheLuceneSearchDocIdSet *)docIdSetToCacheWithOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)docIdSet
                                                 withOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader {
  if (docIdSet == nil || [docIdSet isCacheable]) {
    return docIdSet;
  }
  else {
    OrgApacheLuceneSearchDocIdSetIterator *it = [docIdSet iterator];
    if (it == nil) {
      return nil;
    }
    else {
      return [self cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:it withOrgApacheLuceneIndexLeafReader:reader];
    }
  }
}

- (jlong)ramBytesUsed {
  return JreLoadVolatileLong(&ramBytesUsed_);
}

- (id<JavaUtilCollection>)getChildResources {
  @synchronized(self) {
    return OrgApacheLuceneUtilAccountables_namedAccountablesWithNSString_withJavaUtilMap_(@"segment", cache_);
  }
}

- (jlong)ramBytesUsedWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter {
  if ([OrgApacheLuceneUtilAccountable_class_() isInstance:filter]) {
    return [((id<OrgApacheLuceneUtilAccountable>) nil_chk(((id<OrgApacheLuceneUtilAccountable>) cast_check(filter, OrgApacheLuceneUtilAccountable_class_())))) ramBytesUsed];
  }
  return OrgApacheLuceneSearchLRUFilterCache_FILTER_DEFAULT_RAM_BYTES_USED;
}

- (OrgApacheLuceneSearchDocIdSet *)cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iterator
                                                   withOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader {
  return [((OrgApacheLuceneUtilRoaringDocIdSet_Builder *) nil_chk([create_OrgApacheLuceneUtilRoaringDocIdSet_Builder_initWithInt_([((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) maxDoc]) addWithOrgApacheLuceneSearchDocIdSetIterator:iterator])) build];
}

- (jlong)getTotalCount {
  return OrgApacheLuceneSearchLRUFilterCache_getHitCount(self) + OrgApacheLuceneSearchLRUFilterCache_getMissCount(self);
}

- (jlong)getHitCount {
  return OrgApacheLuceneSearchLRUFilterCache_getHitCount(self);
}

- (jlong)getMissCount {
  return OrgApacheLuceneSearchLRUFilterCache_getMissCount(self);
}

- (jlong)getCacheSize {
  return OrgApacheLuceneSearchLRUFilterCache_getCacheSize(self);
}

- (jlong)getCacheCount {
  return OrgApacheLuceneSearchLRUFilterCache_getCacheCount(self);
}

- (jlong)getEvictionCount {
  return OrgApacheLuceneSearchLRUFilterCache_getCacheCount(self) - OrgApacheLuceneSearchLRUFilterCache_getCacheSize(self);
}

- (void)dealloc {
  RELEASE_(uniqueFilters_);
  RELEASE_(mostRecentlyUsedFilters_);
  RELEASE_(cache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x20, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x20, -1, -1, -1, 20, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchFilter;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x4, 23, 24, 25, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 26, -1, -1 },
    { NULL, "J", 0x4, 27, 18, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x4, 28, 29, 25, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withLong:);
  methods[1].selector = @selector(onHitWithId:withOrgApacheLuceneSearchFilter:);
  methods[2].selector = @selector(onMissWithId:withOrgApacheLuceneSearchFilter:);
  methods[3].selector = @selector(onFilterCacheWithOrgApacheLuceneSearchFilter:withLong:);
  methods[4].selector = @selector(onFilterEvictionWithOrgApacheLuceneSearchFilter:withLong:);
  methods[5].selector = @selector(onDocIdSetCacheWithId:withLong:);
  methods[6].selector = @selector(onDocIdSetEvictionWithId:withInt:withLong:);
  methods[7].selector = @selector(onClear);
  methods[8].selector = @selector(requiresEviction);
  methods[9].selector = @selector(getWithOrgApacheLuceneSearchFilter:withOrgApacheLuceneIndexLeafReaderContext:);
  methods[10].selector = @selector(putIfAbsentWithOrgApacheLuceneSearchFilter:withOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchDocIdSet:);
  methods[11].selector = @selector(evictIfNecessary);
  methods[12].selector = @selector(clearCoreCacheKeyWithId:);
  methods[13].selector = @selector(clearFilterWithOrgApacheLuceneSearchFilter:);
  methods[14].selector = @selector(onEvictionWithOrgApacheLuceneSearchFilter:);
  methods[15].selector = @selector(clear);
  methods[16].selector = @selector(assertConsistent);
  methods[17].selector = @selector(cachedFilters);
  methods[18].selector = @selector(doCacheWithOrgApacheLuceneSearchFilter:withOrgApacheLuceneSearchFilterCachingPolicy:);
  methods[19].selector = @selector(docIdSetToCacheWithOrgApacheLuceneSearchDocIdSet:withOrgApacheLuceneIndexLeafReader:);
  methods[20].selector = @selector(ramBytesUsed);
  methods[21].selector = @selector(getChildResources);
  methods[22].selector = @selector(ramBytesUsedWithOrgApacheLuceneSearchFilter:);
  methods[23].selector = @selector(cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:withOrgApacheLuceneIndexLeafReader:);
  methods[24].selector = @selector(getTotalCount);
  methods[25].selector = @selector(getHitCount);
  methods[26].selector = @selector(getMissCount);
  methods[27].selector = @selector(getCacheSize);
  methods[28].selector = @selector(getCacheCount);
  methods[29].selector = @selector(getEvictionCount);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FILTER_DEFAULT_RAM_BYTES_USED", "J", .constantValue.asLong = OrgApacheLuceneSearchLRUFilterCache_FILTER_DEFAULT_RAM_BYTES_USED, 0x18, -1, -1, -1, -1 },
    { "HASHTABLE_RAM_BYTES_PER_ENTRY", "J", .constantValue.asLong = 0, 0x18, -1, 30, -1, -1 },
    { "LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY", "J", .constantValue.asLong = 0, 0x18, -1, 31, -1, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxRamBytesUsed_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "uniqueFilters_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 32, -1 },
    { "mostRecentlyUsedFilters_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 33, -1 },
    { "cache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 34, -1 },
    { "ramBytesUsed_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "hitCount_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "missCount_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "cacheCount_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "cacheSize_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJ", "onHit", "LNSObject;LOrgApacheLuceneSearchFilter;", "onMiss", "onFilterCache", "LOrgApacheLuceneSearchFilter;J", "onFilterEviction", "onDocIdSetCache", "LNSObject;J", "onDocIdSetEviction", "LNSObject;IJ", "get", "LOrgApacheLuceneSearchFilter;LOrgApacheLuceneIndexLeafReaderContext;", "putIfAbsent", "LOrgApacheLuceneSearchFilter;LOrgApacheLuceneIndexLeafReaderContext;LOrgApacheLuceneSearchDocIdSet;", "clearCoreCacheKey", "LNSObject;", "clearFilter", "LOrgApacheLuceneSearchFilter;", "onEviction", "()Ljava/util/List<Lorg/apache/lucene/search/Filter;>;", "doCache", "LOrgApacheLuceneSearchFilter;LOrgApacheLuceneSearchFilterCachingPolicy;", "docIdSetToCache", "LOrgApacheLuceneSearchDocIdSet;LOrgApacheLuceneIndexLeafReader;", "LJavaIoIOException;", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "ramBytesUsed", "cacheImpl", "LOrgApacheLuceneSearchDocIdSetIterator;LOrgApacheLuceneIndexLeafReader;", &OrgApacheLuceneSearchLRUFilterCache_HASHTABLE_RAM_BYTES_PER_ENTRY, &OrgApacheLuceneSearchLRUFilterCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, "Ljava/util/Map<Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;>;", "Ljava/util/Set<Lorg/apache/lucene/search/Filter;>;", "Ljava/util/Map<Ljava/lang/Object;Lorg/apache/lucene/search/LRUFilterCache$LeafCache;>;", "LOrgApacheLuceneSearchLRUFilterCache_LeafCache;LOrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter;", (void *)&OrgApacheLuceneSearchLRUFilterCache__Annotations$0 };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchLRUFilterCache = { "LRUFilterCache", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 30, 13, -1, 35, -1, -1, 36 };
  return &_OrgApacheLuceneSearchLRUFilterCache;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchLRUFilterCache class]) {
    OrgApacheLuceneSearchLRUFilterCache_HASHTABLE_RAM_BYTES_PER_ENTRY = 2 * JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF) * 2;
    OrgApacheLuceneSearchLRUFilterCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY = OrgApacheLuceneSearchLRUFilterCache_HASHTABLE_RAM_BYTES_PER_ENTRY + 2 * JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchLRUFilterCache)
  }
}

@end

void OrgApacheLuceneSearchLRUFilterCache_initWithInt_withLong_(OrgApacheLuceneSearchLRUFilterCache *self, jint maxSize, jlong maxRamBytesUsed) {
  NSObject_init(self);
  self->maxSize_ = maxSize;
  self->maxRamBytesUsed_ = maxRamBytesUsed;
  JreStrongAssignAndConsume(&self->uniqueFilters_, new_JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(16, 0.75f, true));
  JreStrongAssign(&self->mostRecentlyUsedFilters_, [self->uniqueFilters_ keySet]);
  JreStrongAssignAndConsume(&self->cache_, new_JavaUtilIdentityHashMap_init());
  JreAssignVolatileLong(&self->ramBytesUsed_, 0);
}

OrgApacheLuceneSearchLRUFilterCache *new_OrgApacheLuceneSearchLRUFilterCache_initWithInt_withLong_(jint maxSize, jlong maxRamBytesUsed) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchLRUFilterCache, initWithInt_withLong_, maxSize, maxRamBytesUsed)
}

OrgApacheLuceneSearchLRUFilterCache *create_OrgApacheLuceneSearchLRUFilterCache_initWithInt_withLong_(jint maxSize, jlong maxRamBytesUsed) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchLRUFilterCache, initWithInt_withLong_, maxSize, maxRamBytesUsed)
}

void OrgApacheLuceneSearchLRUFilterCache_onEvictionWithOrgApacheLuceneSearchFilter_(OrgApacheLuceneSearchLRUFilterCache *self, OrgApacheLuceneSearchFilter *singleton) {
  [self onFilterEvictionWithOrgApacheLuceneSearchFilter:singleton withLong:OrgApacheLuceneSearchLRUFilterCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + [self ramBytesUsedWithOrgApacheLuceneSearchFilter:singleton]];
  for (OrgApacheLuceneSearchLRUFilterCache_LeafCache * __strong leafCache in nil_chk([((id<JavaUtilMap>) nil_chk(self->cache_)) values])) {
    [((OrgApacheLuceneSearchLRUFilterCache_LeafCache *) nil_chk(leafCache)) removeWithOrgApacheLuceneSearchFilter:singleton];
  }
}

jlong OrgApacheLuceneSearchLRUFilterCache_getHitCount(OrgApacheLuceneSearchLRUFilterCache *self) {
  return JreLoadVolatileLong(&self->hitCount_);
}

jlong OrgApacheLuceneSearchLRUFilterCache_getMissCount(OrgApacheLuceneSearchLRUFilterCache *self) {
  return JreLoadVolatileLong(&self->missCount_);
}

jlong OrgApacheLuceneSearchLRUFilterCache_getCacheSize(OrgApacheLuceneSearchLRUFilterCache *self) {
  return JreLoadVolatileLong(&self->cacheSize_);
}

jlong OrgApacheLuceneSearchLRUFilterCache_getCacheCount(OrgApacheLuceneSearchLRUFilterCache *self) {
  return JreLoadVolatileLong(&self->cacheCount_);
}

IOSObjectArray *OrgApacheLuceneSearchLRUFilterCache__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchLRUFilterCache)

@implementation OrgApacheLuceneSearchLRUFilterCache_1

- (instancetype)initWithOrgApacheLuceneSearchLRUFilterCache:(OrgApacheLuceneSearchLRUFilterCache *)outer$ {
  OrgApacheLuceneSearchLRUFilterCache_1_initWithOrgApacheLuceneSearchLRUFilterCache_(self, outer$);
  return self;
}

- (void)onCloseWithId:(id)ownerCoreCacheKey {
  [this$0_ clearCoreCacheKeyWithId:ownerCoreCacheKey];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchLRUFilterCache:);
  methods[1].selector = @selector(onCloseWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchLRUFilterCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchLRUFilterCache;", "onClose", "LNSObject;", "putIfAbsentWithOrgApacheLuceneSearchFilter:withOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchDocIdSet:" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchLRUFilterCache_1 = { "", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_OrgApacheLuceneSearchLRUFilterCache_1;
}

@end

void OrgApacheLuceneSearchLRUFilterCache_1_initWithOrgApacheLuceneSearchLRUFilterCache_(OrgApacheLuceneSearchLRUFilterCache_1 *self, OrgApacheLuceneSearchLRUFilterCache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

OrgApacheLuceneSearchLRUFilterCache_1 *new_OrgApacheLuceneSearchLRUFilterCache_1_initWithOrgApacheLuceneSearchLRUFilterCache_(OrgApacheLuceneSearchLRUFilterCache *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchLRUFilterCache_1, initWithOrgApacheLuceneSearchLRUFilterCache_, outer$)
}

OrgApacheLuceneSearchLRUFilterCache_1 *create_OrgApacheLuceneSearchLRUFilterCache_1_initWithOrgApacheLuceneSearchLRUFilterCache_(OrgApacheLuceneSearchLRUFilterCache *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchLRUFilterCache_1, initWithOrgApacheLuceneSearchLRUFilterCache_, outer$)
}

@implementation OrgApacheLuceneSearchLRUFilterCache_LeafCache

- (instancetype)initWithOrgApacheLuceneSearchLRUFilterCache:(OrgApacheLuceneSearchLRUFilterCache *)outer$
                                                     withId:(id)key {
  OrgApacheLuceneSearchLRUFilterCache_LeafCache_initWithOrgApacheLuceneSearchLRUFilterCache_withId_(self, outer$, key);
  return self;
}

- (void)onDocIdSetCacheWithLong:(jlong)ramBytesUsed {
  OrgApacheLuceneSearchLRUFilterCache_LeafCache_onDocIdSetCacheWithLong_(self, ramBytesUsed);
}

- (void)onDocIdSetEvictionWithLong:(jlong)ramBytesUsed {
  OrgApacheLuceneSearchLRUFilterCache_LeafCache_onDocIdSetEvictionWithLong_(self, ramBytesUsed);
}

- (OrgApacheLuceneSearchDocIdSet *)getWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter {
  return [((id<JavaUtilMap>) nil_chk(cache_)) getWithId:filter];
}

- (void)putIfAbsentWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter
                 withOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set {
  if ([((id<JavaUtilMap>) nil_chk(cache_)) containsKeyWithId:filter] == false) {
    [cache_ putWithId:filter withId:set];
    OrgApacheLuceneSearchLRUFilterCache_LeafCache_onDocIdSetCacheWithLong_(self, JreLoadStatic(OrgApacheLuceneSearchLRUFilterCache, HASHTABLE_RAM_BYTES_PER_ENTRY) + [((OrgApacheLuceneSearchDocIdSet *) nil_chk(set)) ramBytesUsed]);
  }
}

- (void)removeWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter {
  OrgApacheLuceneSearchDocIdSet *removed = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(cache_)) removeWithId:filter]);
  if (removed != nil) {
    OrgApacheLuceneSearchLRUFilterCache_LeafCache_onDocIdSetEvictionWithLong_(self, JreLoadStatic(OrgApacheLuceneSearchLRUFilterCache, HASHTABLE_RAM_BYTES_PER_ENTRY) + [removed ramBytesUsed]);
  }
}

- (jlong)ramBytesUsed {
  return JreLoadVolatileLong(&ramBytesUsed_);
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(key_);
  RELEASE_(cache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchLRUFilterCache:withId:);
  methods[1].selector = @selector(onDocIdSetCacheWithLong:);
  methods[2].selector = @selector(onDocIdSetEvictionWithLong:);
  methods[3].selector = @selector(getWithOrgApacheLuceneSearchFilter:);
  methods[4].selector = @selector(putIfAbsentWithOrgApacheLuceneSearchFilter:withOrgApacheLuceneSearchDocIdSet:);
  methods[5].selector = @selector(removeWithOrgApacheLuceneSearchFilter:);
  methods[6].selector = @selector(ramBytesUsed);
  methods[7].selector = @selector(getChildResources);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchLRUFilterCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "ramBytesUsed_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchLRUFilterCache;LNSObject;", "onDocIdSetCache", "J", "onDocIdSetEviction", "get", "LOrgApacheLuceneSearchFilter;", "putIfAbsent", "LOrgApacheLuceneSearchFilter;LOrgApacheLuceneSearchDocIdSet;", "remove", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "Ljava/util/Map<Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/DocIdSet;>;", "LOrgApacheLuceneSearchLRUFilterCache;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchLRUFilterCache_LeafCache = { "LeafCache", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x2, 8, 4, 11, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchLRUFilterCache_LeafCache;
}

@end

void OrgApacheLuceneSearchLRUFilterCache_LeafCache_initWithOrgApacheLuceneSearchLRUFilterCache_withId_(OrgApacheLuceneSearchLRUFilterCache_LeafCache *self, OrgApacheLuceneSearchLRUFilterCache *outer$, id key) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->key_, key);
  JreStrongAssignAndConsume(&self->cache_, new_JavaUtilIdentityHashMap_init());
  JreAssignVolatileLong(&self->ramBytesUsed_, 0);
}

OrgApacheLuceneSearchLRUFilterCache_LeafCache *new_OrgApacheLuceneSearchLRUFilterCache_LeafCache_initWithOrgApacheLuceneSearchLRUFilterCache_withId_(OrgApacheLuceneSearchLRUFilterCache *outer$, id key) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchLRUFilterCache_LeafCache, initWithOrgApacheLuceneSearchLRUFilterCache_withId_, outer$, key)
}

OrgApacheLuceneSearchLRUFilterCache_LeafCache *create_OrgApacheLuceneSearchLRUFilterCache_LeafCache_initWithOrgApacheLuceneSearchLRUFilterCache_withId_(OrgApacheLuceneSearchLRUFilterCache *outer$, id key) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchLRUFilterCache_LeafCache, initWithOrgApacheLuceneSearchLRUFilterCache_withId_, outer$, key)
}

void OrgApacheLuceneSearchLRUFilterCache_LeafCache_onDocIdSetCacheWithLong_(OrgApacheLuceneSearchLRUFilterCache_LeafCache *self, jlong ramBytesUsed) {
  JrePlusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
  [self->this$0_ onDocIdSetCacheWithId:self->key_ withLong:ramBytesUsed];
}

void OrgApacheLuceneSearchLRUFilterCache_LeafCache_onDocIdSetEvictionWithLong_(OrgApacheLuceneSearchLRUFilterCache_LeafCache *self, jlong ramBytesUsed) {
  JreMinusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
  [self->this$0_ onDocIdSetEvictionWithId:self->key_ withInt:1 withLong:ramBytesUsed];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchLRUFilterCache_LeafCache)

@implementation OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter

- (instancetype)initWithOrgApacheLuceneSearchLRUFilterCache:(OrgApacheLuceneSearchLRUFilterCache *)outer$
                            withOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)inArg
               withOrgApacheLuceneSearchFilterCachingPolicy:(id<OrgApacheLuceneSearchFilterCachingPolicy>)policy {
  OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter_initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_(self, outer$, inArg, policy);
  return self;
}

- (OrgApacheLuceneSearchDocIdSet *)getDocIdSetWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                            withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)acceptDocs {
  if (((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context))->ord_ == 0) {
    [((id<OrgApacheLuceneSearchFilterCachingPolicy>) nil_chk(policy_)) onUseWithOrgApacheLuceneSearchFilter:in_];
  }
  OrgApacheLuceneSearchDocIdSet *set = JreRetainedLocalValue([this$0_ getWithOrgApacheLuceneSearchFilter:in_ withOrgApacheLuceneIndexLeafReaderContext:context]);
  if (set == nil) {
    set = [((OrgApacheLuceneSearchFilter *) nil_chk(in_)) getDocIdSetWithOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneUtilBits:nil];
    if ([((id<OrgApacheLuceneSearchFilterCachingPolicy>) nil_chk(policy_)) shouldCacheWithOrgApacheLuceneSearchFilter:in_ withOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchDocIdSet:set]) {
      set = [this$0_ docIdSetToCacheWithOrgApacheLuceneSearchDocIdSet:set withOrgApacheLuceneIndexLeafReader:[context reader]];
      if (set == nil) {
        set = JreLoadStatic(OrgApacheLuceneSearchDocIdSet, EMPTY);
      }
      [this$0_ putIfAbsentWithOrgApacheLuceneSearchFilter:in_ withOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchDocIdSet:set];
    }
  }
  return JreObjectEqualsEquals(set, JreLoadStatic(OrgApacheLuceneSearchDocIdSet, EMPTY)) ? nil : OrgApacheLuceneSearchBitsFilteredDocIdSet_wrapWithOrgApacheLuceneSearchDocIdSet_withOrgApacheLuceneUtilBits_(set, acceptDocs);
}

- (jboolean)isEqual:(id)obj {
  return [super isEqual:obj] && [((OrgApacheLuceneSearchFilter *) nil_chk(in_)) isEqual:((OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *) nil_chk(((OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *) cast_chk(obj, [OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter class]))))->in_];
}

- (NSUInteger)hash {
  return 31 * ((jint) [super hash]) + ((jint) [((OrgApacheLuceneSearchFilter *) nil_chk(in_)) hash]);
}

- (NSString *)toStringWithNSString:(NSString *)field {
  return JreStrcat("$$C", @"CachingWrapperFilter(", [((OrgApacheLuceneSearchFilter *) nil_chk(in_)) toStringWithNSString:field], ')');
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(in_);
  RELEASE_(policy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchLRUFilterCache:withOrgApacheLuceneSearchFilter:withOrgApacheLuceneSearchFilterCachingPolicy:);
  methods[1].selector = @selector(getDocIdSetWithOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneUtilBits:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(toStringWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchLRUFilterCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "in_", "LOrgApacheLuceneSearchFilter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "policy_", "LOrgApacheLuceneSearchFilterCachingPolicy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchLRUFilterCache;LOrgApacheLuceneSearchFilter;LOrgApacheLuceneSearchFilterCachingPolicy;", "getDocIdSet", "LOrgApacheLuceneIndexLeafReaderContext;LOrgApacheLuceneUtilBits;", "LJavaIoIOException;", "equals", "LNSObject;", "hashCode", "toString", "LNSString;", "LOrgApacheLuceneSearchLRUFilterCache;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter = { "CachingWrapperFilter", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x2, 5, 3, 9, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter;
}

@end

void OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter_initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_(OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *self, OrgApacheLuceneSearchLRUFilterCache *outer$, OrgApacheLuceneSearchFilter *inArg, id<OrgApacheLuceneSearchFilterCachingPolicy> policy) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchFilter_init(self);
  JreStrongAssign(&self->in_, inArg);
  JreStrongAssign(&self->policy_, policy);
}

OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *new_OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter_initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_(OrgApacheLuceneSearchLRUFilterCache *outer$, OrgApacheLuceneSearchFilter *inArg, id<OrgApacheLuceneSearchFilterCachingPolicy> policy) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter, initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_, outer$, inArg, policy)
}

OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter *create_OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter_initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_(OrgApacheLuceneSearchLRUFilterCache *outer$, OrgApacheLuceneSearchFilter *inArg, id<OrgApacheLuceneSearchFilterCachingPolicy> policy) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter, initWithOrgApacheLuceneSearchLRUFilterCache_withOrgApacheLuceneSearchFilter_withOrgApacheLuceneSearchFilterCachingPolicy_, outer$, inArg, policy)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchLRUFilterCache_CachingWrapperFilter)
