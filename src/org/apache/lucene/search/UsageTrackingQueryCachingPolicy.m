//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy.java
//

#include "J2ObjC_source.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/MultiTermQueryConstantScoreWrapper.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/QueryCachingPolicy.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/UsageTrackingQueryCachingPolicy.h"
#include "org/apache/lucene/util/FrequencyTrackingRingBuffer.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/UsageTrackingQueryCachingPolicy must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy () {
 @public
  OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *segmentPolicy_;
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer *recentlyUsedFilters_;
}

+ (OrgApacheLuceneSearchQuery *)cacheKeyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (instancetype)initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments:(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *)segmentPolicy
                                                                             withInt:(jint)historySize;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy, segmentPolicy_, OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy, recentlyUsedFilters_, OrgApacheLuceneUtilFrequencyTrackingRingBuffer *)

inline jint OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_get_SENTINEL(void);
#define OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_SENTINEL ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy, SENTINEL, jint)

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_cacheKeyWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query);

__attribute__((unused)) static void OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *self, OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize);

__attribute__((unused)) static OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize);

@implementation OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy

+ (OrgApacheLuceneSearchQuery *)cacheKeyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  return OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_cacheKeyWithOrgApacheLuceneSearchQuery_(query);
}

+ (jboolean)isCostlyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  return OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCostlyWithOrgApacheLuceneSearchQuery_(query);
}

+ (jboolean)isCheapWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  return OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCheapWithOrgApacheLuceneSearchQuery_(query);
}

- (instancetype)initWithInt:(jint)minIndexSize
                  withFloat:(jfloat)minSizeRatio
                    withInt:(jint)historySize {
  OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithInt_withFloat_withInt_(self, minIndexSize, minSizeRatio, historySize);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments:(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *)segmentPolicy
                                                                             withInt:(jint)historySize {
  OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_(self, segmentPolicy, historySize);
  return self;
}

- (jint)minFrequencyToCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  if (OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCostlyWithOrgApacheLuceneSearchQuery_(query)) {
    return 2;
  }
  else if (OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCheapWithOrgApacheLuceneSearchQuery_(query)) {
    return 20;
  }
  else {
    return 5;
  }
}

- (void)onUseWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  jint hashCode = ((jint) [((OrgApacheLuceneSearchQuery *) nil_chk(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_cacheKeyWithOrgApacheLuceneSearchQuery_(query))) hash]);
  @synchronized(self) {
    [((OrgApacheLuceneUtilFrequencyTrackingRingBuffer *) nil_chk(recentlyUsedFilters_)) addWithInt:hashCode];
  }
}

- (jint)frequencyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  jint hashCode = ((jint) [((OrgApacheLuceneSearchQuery *) nil_chk(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_cacheKeyWithOrgApacheLuceneSearchQuery_(query))) hash]);
  @synchronized(self) {
    return [((OrgApacheLuceneUtilFrequencyTrackingRingBuffer *) nil_chk(recentlyUsedFilters_)) frequencyWithInt:hashCode];
  }
}

- (jboolean)shouldCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
            withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  if ([((OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *) nil_chk(segmentPolicy_)) shouldCacheWithOrgApacheLuceneSearchQuery:query withOrgApacheLuceneIndexLeafReaderContext:context] == false) {
    return false;
  }
  jint frequency = [self frequencyWithOrgApacheLuceneSearchQuery:query];
  jint minFrequency = [self minFrequencyToCacheWithOrgApacheLuceneSearchQuery:query];
  return frequency >= minFrequency;
}

- (void)dealloc {
  RELEASE_(segmentPolicy_);
  RELEASE_(recentlyUsedFilters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneSearchQuery;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 3, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 8, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(cacheKeyWithOrgApacheLuceneSearchQuery:);
  methods[1].selector = @selector(isCostlyWithOrgApacheLuceneSearchQuery:);
  methods[2].selector = @selector(isCheapWithOrgApacheLuceneSearchQuery:);
  methods[3].selector = @selector(initWithInt:withFloat:withInt:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments:withInt:);
  methods[6].selector = @selector(minFrequencyToCacheWithOrgApacheLuceneSearchQuery:);
  methods[7].selector = @selector(onUseWithOrgApacheLuceneSearchQuery:);
  methods[8].selector = @selector(frequencyWithOrgApacheLuceneSearchQuery:);
  methods[9].selector = @selector(shouldCacheWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexLeafReaderContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SENTINEL", "I", .constantValue.asInt = OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_SENTINEL, 0x1a, -1, -1, -1, -1 },
    { "segmentPolicy_", "LOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "recentlyUsedFilters_", "LOrgApacheLuceneUtilFrequencyTrackingRingBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "cacheKey", "LOrgApacheLuceneSearchQuery;", "isCostly", "isCheap", "IFI", "LOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments;I", "minFrequencyToCache", "onUse", "frequency", "shouldCache", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneIndexLeafReaderContext;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy = { "UsageTrackingQueryCachingPolicy", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x11, 10, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy;
}

@end

OrgApacheLuceneSearchQuery *OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_cacheKeyWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query) {
  OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initialize();
  if ([((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost] == 1.0f) {
    return query;
  }
  else {
    OrgApacheLuceneSearchQuery *key = JreRetainedLocalValue([query java_clone]);
    [((OrgApacheLuceneSearchQuery *) nil_chk(key)) setBoostWithFloat:1.0f];
    JreAssert(JreObjectEqualsEquals(key, OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_cacheKeyWithOrgApacheLuceneSearchQuery_(key)), @"org/apache/lucene/search/UsageTrackingQueryCachingPolicy.java:44 condition failed: assert key == cacheKey(key);");
    return key;
  }
}

jboolean OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCostlyWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query) {
  OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initialize();
  return [query isKindOfClass:[OrgApacheLuceneSearchMultiTermQuery class]] || [query isKindOfClass:[OrgApacheLuceneSearchMultiTermQueryConstantScoreWrapper class]];
}

jboolean OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCheapWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query) {
  OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initialize();
  return [query isKindOfClass:[OrgApacheLuceneSearchTermQuery class]];
}

void OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithInt_withFloat_withInt_(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *self, jint minIndexSize, jfloat minSizeRatio, jint historySize) {
  OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_(self, create_OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_initWithInt_withFloat_(minIndexSize, minSizeRatio), historySize);
}

OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithInt_withFloat_withInt_(jint minIndexSize, jfloat minSizeRatio, jint historySize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy, initWithInt_withFloat_withInt_, minIndexSize, minSizeRatio, historySize)
}

OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithInt_withFloat_withInt_(jint minIndexSize, jfloat minSizeRatio, jint historySize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy, initWithInt_withFloat_withInt_, minIndexSize, minSizeRatio, historySize)
}

void OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_init(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *self) {
  OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_(self, JreLoadStatic(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments, DEFAULT), 256);
}

OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy, init)
}

OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy, init)
}

void OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *self, OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize) {
  NSObject_init(self);
  JreStrongAssign(&self->segmentPolicy_, segmentPolicy);
  JreStrongAssignAndConsume(&self->recentlyUsedFilters_, new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(historySize, OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_SENTINEL));
}

OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy, initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_, segmentPolicy, historySize)
}

OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy, initWithOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_withInt_, segmentPolicy, historySize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy)
