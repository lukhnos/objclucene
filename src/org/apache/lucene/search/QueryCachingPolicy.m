//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/QueryCachingPolicy.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/QueryCachingPolicy.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/QueryCachingPolicy must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchQueryCachingPolicy_1 : NSObject < OrgApacheLuceneSearchQueryCachingPolicy >

- (instancetype)init;

- (void)onUseWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (jboolean)shouldCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
            withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchQueryCachingPolicy_1)

__attribute__((unused)) static void OrgApacheLuceneSearchQueryCachingPolicy_1_init(OrgApacheLuceneSearchQueryCachingPolicy_1 *self);

__attribute__((unused)) static OrgApacheLuceneSearchQueryCachingPolicy_1 *new_OrgApacheLuceneSearchQueryCachingPolicy_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchQueryCachingPolicy_1 *create_OrgApacheLuceneSearchQueryCachingPolicy_1_init(void);

@interface OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments () {
 @public
  jint minIndexSize_;
  jfloat minSizeRatio_;
}

@end

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchQueryCachingPolicy)

id<OrgApacheLuceneSearchQueryCachingPolicy> OrgApacheLuceneSearchQueryCachingPolicy_ALWAYS_CACHE;

@implementation OrgApacheLuceneSearchQueryCachingPolicy

+ (id<OrgApacheLuceneSearchQueryCachingPolicy>)ALWAYS_CACHE {
  return OrgApacheLuceneSearchQueryCachingPolicy_ALWAYS_CACHE;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onUseWithOrgApacheLuceneSearchQuery:);
  methods[1].selector = @selector(shouldCacheWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexLeafReaderContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALWAYS_CACHE", "LOrgApacheLuceneSearchQueryCachingPolicy;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "onUse", "LOrgApacheLuceneSearchQuery;", "shouldCache", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneIndexLeafReaderContext;", "LJavaIoIOException;", &OrgApacheLuceneSearchQueryCachingPolicy_ALWAYS_CACHE, "LOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchQueryCachingPolicy = { "QueryCachingPolicy", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x609, 2, 1, -1, 6, -1, -1, -1 };
  return &_OrgApacheLuceneSearchQueryCachingPolicy;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchQueryCachingPolicy class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneSearchQueryCachingPolicy_ALWAYS_CACHE, new_OrgApacheLuceneSearchQueryCachingPolicy_1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchQueryCachingPolicy)
  }
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchQueryCachingPolicy)

@implementation OrgApacheLuceneSearchQueryCachingPolicy_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchQueryCachingPolicy_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onUseWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
}

- (jboolean)shouldCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
            withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onUseWithOrgApacheLuceneSearchQuery:);
  methods[2].selector = @selector(shouldCacheWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexLeafReaderContext:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onUse", "LOrgApacheLuceneSearchQuery;", "shouldCache", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneIndexLeafReaderContext;", "LJavaIoIOException;", "LOrgApacheLuceneSearchQueryCachingPolicy;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchQueryCachingPolicy_1 = { "", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchQueryCachingPolicy_1;
}

@end

void OrgApacheLuceneSearchQueryCachingPolicy_1_init(OrgApacheLuceneSearchQueryCachingPolicy_1 *self) {
  NSObject_init(self);
}

OrgApacheLuceneSearchQueryCachingPolicy_1 *new_OrgApacheLuceneSearchQueryCachingPolicy_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchQueryCachingPolicy_1, init)
}

OrgApacheLuceneSearchQueryCachingPolicy_1 *create_OrgApacheLuceneSearchQueryCachingPolicy_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchQueryCachingPolicy_1, init)
}

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments)

OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_DEFAULT;

@implementation OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments

+ (OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *)DEFAULT {
  return OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_DEFAULT;
}

- (instancetype)initWithInt:(jint)minIndexSize
                  withFloat:(jfloat)minSizeRatio {
  OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_initWithInt_withFloat_(self, minIndexSize, minSizeRatio);
  return self;
}

- (void)onUseWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
}

- (jboolean)shouldCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
            withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  OrgApacheLuceneIndexIndexReaderContext *topLevelContext = OrgApacheLuceneIndexReaderUtil_getTopLevelContextWithOrgApacheLuceneIndexIndexReaderContext_(context);
  if ([((OrgApacheLuceneIndexIndexReader *) nil_chk([((OrgApacheLuceneIndexIndexReaderContext *) nil_chk(topLevelContext)) reader])) maxDoc] < minIndexSize_) {
    return false;
  }
  jfloat sizeRatio = (jfloat) [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader])) maxDoc] / [((OrgApacheLuceneIndexIndexReader *) nil_chk([topLevelContext reader])) maxDoc];
  return sizeRatio >= minSizeRatio_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withFloat:);
  methods[1].selector = @selector(onUseWithOrgApacheLuceneSearchQuery:);
  methods[2].selector = @selector(shouldCacheWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexLeafReaderContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT", "LOrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "minIndexSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minSizeRatio_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IF", "onUse", "LOrgApacheLuceneSearchQuery;", "shouldCache", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneIndexLeafReaderContext;", "LJavaIoIOException;", &OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_DEFAULT, "LOrgApacheLuceneSearchQueryCachingPolicy;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments = { "CacheOnLargeSegments", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x9, 3, 3, 7, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_DEFAULT, new_OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_initWithInt_withFloat_(10000, 0.03f));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments)
  }
}

@end

void OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_initWithInt_withFloat_(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *self, jint minIndexSize, jfloat minSizeRatio) {
  NSObject_init(self);
  if (minSizeRatio <= 0 || minSizeRatio >= 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$F", @"minSizeRatio must be in ]0, 1[, got ", minSizeRatio));
  }
  self->minIndexSize_ = minIndexSize;
  self->minSizeRatio_ = minSizeRatio;
}

OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *new_OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_initWithInt_withFloat_(jint minIndexSize, jfloat minSizeRatio) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments, initWithInt_withFloat_, minIndexSize, minSizeRatio)
}

OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments *create_OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments_initWithInt_withFloat_(jint minIndexSize, jfloat minSizeRatio) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments, initWithInt_withFloat_, minIndexSize, minSizeRatio)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments)
