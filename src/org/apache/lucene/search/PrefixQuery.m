//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/PrefixQuery.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/AutomatonQuery.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "org/apache/lucene/util/automaton/Automaton.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/PrefixQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneSearchPrefixQuery

- (instancetype)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)prefix {
  OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(self, prefix);
  return self;
}

+ (OrgApacheLuceneUtilAutomatonAutomaton *)toAutomatonWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix {
  return OrgApacheLuceneSearchPrefixQuery_toAutomatonWithOrgApacheLuceneUtilBytesRef_(prefix);
}

- (OrgApacheLuceneIndexTerm *)getPrefix {
  return term_;
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  if (![((NSString *) nil_chk([self getField])) isEqual:field]) {
    [buffer appendWithNSString:[self getField]];
    [buffer appendWithNSString:@":"];
  }
  [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(term_)) text]];
  [buffer appendWithChar:'*'];
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = ((jint) [super hash]);
  result = prime * result + ((jint) [((OrgApacheLuceneIndexTerm *) nil_chk(term_)) hash]);
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) {
    return true;
  }
  if (![super isEqual:obj]) {
    return false;
  }
  OrgApacheLuceneSearchPrefixQuery *other = (OrgApacheLuceneSearchPrefixQuery *) cast_chk(obj, [OrgApacheLuceneSearchPrefixQuery class]);
  if (![((OrgApacheLuceneIndexTerm *) nil_chk(term_)) isEqual:((OrgApacheLuceneSearchPrefixQuery *) nil_chk(other))->term_]) {
    return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilAutomatonAutomaton;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexTerm:);
  methods[1].selector = @selector(toAutomatonWithOrgApacheLuceneUtilBytesRef:);
  methods[2].selector = @selector(getPrefix);
  methods[3].selector = @selector(toStringWithNSString:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexTerm;", "toAutomaton", "LOrgApacheLuceneUtilBytesRef;", "toString", "LNSString;", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPrefixQuery = { "PrefixQuery", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchPrefixQuery;
}

@end

void OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchPrefixQuery *self, OrgApacheLuceneIndexTerm *prefix) {
  OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_(self, prefix, OrgApacheLuceneSearchPrefixQuery_toAutomatonWithOrgApacheLuceneUtilBytesRef_([((OrgApacheLuceneIndexTerm *) nil_chk(prefix)) bytes]), JavaLangInteger_MAX_VALUE, true);
  if (prefix == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"prefix cannot be null");
  }
}

OrgApacheLuceneSearchPrefixQuery *new_OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *prefix) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPrefixQuery, initWithOrgApacheLuceneIndexTerm_, prefix)
}

OrgApacheLuceneSearchPrefixQuery *create_OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *prefix) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPrefixQuery, initWithOrgApacheLuceneIndexTerm_, prefix)
}

OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneSearchPrefixQuery_toAutomatonWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *prefix) {
  OrgApacheLuceneSearchPrefixQuery_initialize();
  OrgApacheLuceneUtilAutomatonAutomaton *automaton = create_OrgApacheLuceneUtilAutomatonAutomaton_init();
  jint lastState = [automaton createState];
  for (jint i = 0; i < ((OrgApacheLuceneUtilBytesRef *) nil_chk(prefix))->length_; i++) {
    jint state = [automaton createState];
    [automaton addTransitionWithInt:lastState withInt:state withInt:IOSByteArray_Get(nil_chk(prefix->bytes_), prefix->offset_ + i) & (jint) 0xff];
    lastState = state;
  }
  [automaton setAcceptWithInt:lastState withBoolean:true];
  [automaton addTransitionWithInt:lastState withInt:lastState withInt:0 withInt:255];
  [automaton finishState];
  JreAssert([automaton isDeterministic], @"org/apache/lucene/search/PrefixQuery.java:55 condition failed: assert automaton.isDeterministic();");
  return automaton;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPrefixQuery)
