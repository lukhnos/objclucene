//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/FilterCachingPolicy.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/QueryWrapperFilter.h"
#include "org/apache/lucene/search/UsageTrackingFilterCachingPolicy.h"
#include "org/apache/lucene/util/FrequencyTrackingRingBuffer.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/UsageTrackingFilterCachingPolicy must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy () {
 @public
  OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *segmentPolicy_;
  OrgApacheLuceneUtilFrequencyTrackingRingBuffer *recentlyUsedFilters_;
  jint minFrequencyCostlyFilters_;
  jint minFrequencyCheapFilters_;
  jint minFrequencyOtherFilters_;
}

- (instancetype)initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments:(OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *)segmentPolicy
                                                                              withInt:(jint)historySize
                                                                              withInt:(jint)minFrequencyCostlyFilters
                                                                              withInt:(jint)minFrequencyCheapFilters
                                                                              withInt:(jint)minFrequencyOtherFilters;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy, segmentPolicy_, OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy, recentlyUsedFilters_, OrgApacheLuceneUtilFrequencyTrackingRingBuffer *)

inline jint OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_get_SENTINEL(void);
#define OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_SENTINEL ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy, SENTINEL, jint)

__attribute__((unused)) static void OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *self, OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters);

__attribute__((unused)) static OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_(OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_(OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters);

@implementation OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy

+ (jboolean)isCostlyWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter {
  return OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_isCostlyWithOrgApacheLuceneSearchFilter_(filter);
}

+ (jboolean)isCheapToCacheWithOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set {
  return OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_isCheapToCacheWithOrgApacheLuceneSearchDocIdSet_(set);
}

- (instancetype)initWithFloat:(jfloat)minSizeRatio
                      withInt:(jint)historySize
                      withInt:(jint)minFrequencyCostlyFilters
                      withInt:(jint)minFrequencyCheapFilters
                      withInt:(jint)minFrequencyOtherFilters {
  OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithFloat_withInt_withInt_withInt_withInt_(self, minSizeRatio, historySize, minFrequencyCostlyFilters, minFrequencyCheapFilters, minFrequencyOtherFilters);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments:(OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *)segmentPolicy
                                                                              withInt:(jint)historySize
                                                                              withInt:(jint)minFrequencyCostlyFilters
                                                                              withInt:(jint)minFrequencyCheapFilters
                                                                              withInt:(jint)minFrequencyOtherFilters {
  OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_(self, segmentPolicy, historySize, minFrequencyCostlyFilters, minFrequencyCheapFilters, minFrequencyOtherFilters);
  return self;
}

- (void)onUseWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter {
  @synchronized(self) {
    [((OrgApacheLuceneUtilFrequencyTrackingRingBuffer *) nil_chk(recentlyUsedFilters_)) addWithInt:((jint) [((OrgApacheLuceneSearchFilter *) nil_chk(filter)) hash])];
  }
}

- (jboolean)shouldCacheWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter
             withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                     withOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set {
  if ([((OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *) nil_chk(segmentPolicy_)) shouldCacheWithOrgApacheLuceneSearchFilter:filter withOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchDocIdSet:set] == false) {
    return false;
  }
  jint frequency;
  @synchronized(self) {
    frequency = [((OrgApacheLuceneUtilFrequencyTrackingRingBuffer *) nil_chk(recentlyUsedFilters_)) frequencyWithInt:((jint) [((OrgApacheLuceneSearchFilter *) nil_chk(filter)) hash])];
  }
  if (frequency >= minFrequencyOtherFilters_) {
    return true;
  }
  else if (OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_isCostlyWithOrgApacheLuceneSearchFilter_(filter) && frequency >= minFrequencyCostlyFilters_) {
    return true;
  }
  else if (OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_isCheapToCacheWithOrgApacheLuceneSearchDocIdSet_(set) && frequency >= minFrequencyCheapFilters_) {
    return true;
  }
  return false;
}

- (void)dealloc {
  RELEASE_(segmentPolicy_);
  RELEASE_(recentlyUsedFilters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, 9, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isCostlyWithOrgApacheLuceneSearchFilter:);
  methods[1].selector = @selector(isCheapToCacheWithOrgApacheLuceneSearchDocIdSet:);
  methods[2].selector = @selector(initWithFloat:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments:withInt:withInt:withInt:withInt:);
  methods[5].selector = @selector(onUseWithOrgApacheLuceneSearchFilter:);
  methods[6].selector = @selector(shouldCacheWithOrgApacheLuceneSearchFilter:withOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchDocIdSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SENTINEL", "I", .constantValue.asInt = OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_SENTINEL, 0x1a, -1, -1, -1, -1 },
    { "segmentPolicy_", "LOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "recentlyUsedFilters_", "LOrgApacheLuceneUtilFrequencyTrackingRingBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minFrequencyCostlyFilters_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minFrequencyCheapFilters_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minFrequencyOtherFilters_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isCostly", "LOrgApacheLuceneSearchFilter;", "isCheapToCache", "LOrgApacheLuceneSearchDocIdSet;", "FIIII", "LOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments;IIII", "onUse", "shouldCache", "LOrgApacheLuceneSearchFilter;LOrgApacheLuceneIndexLeafReaderContext;LOrgApacheLuceneSearchDocIdSet;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy = { "UsageTrackingFilterCachingPolicy", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x11, 7, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy;
}

@end

jboolean OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_isCostlyWithOrgApacheLuceneSearchFilter_(OrgApacheLuceneSearchFilter *filter) {
  OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initialize();
  return [filter isKindOfClass:[OrgApacheLuceneSearchQueryWrapperFilter class]] && [[((OrgApacheLuceneSearchQueryWrapperFilter *) nil_chk(((OrgApacheLuceneSearchQueryWrapperFilter *) cast_chk(filter, [OrgApacheLuceneSearchQueryWrapperFilter class])))) getQuery] isKindOfClass:[OrgApacheLuceneSearchMultiTermQuery class]];
}

jboolean OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_isCheapToCacheWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneSearchDocIdSet *set) {
  OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initialize();
  return set == nil || [set isCacheable];
}

void OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithFloat_withInt_withInt_withInt_withInt_(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *self, jfloat minSizeRatio, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters) {
  OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_(self, create_OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_initWithFloat_(minSizeRatio), historySize, minFrequencyCostlyFilters, minFrequencyCheapFilters, minFrequencyOtherFilters);
}

OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithFloat_withInt_withInt_withInt_withInt_(jfloat minSizeRatio, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy, initWithFloat_withInt_withInt_withInt_withInt_, minSizeRatio, historySize, minFrequencyCostlyFilters, minFrequencyCheapFilters, minFrequencyOtherFilters)
}

OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithFloat_withInt_withInt_withInt_withInt_(jfloat minSizeRatio, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy, initWithFloat_withInt_withInt_withInt_withInt_, minSizeRatio, historySize, minFrequencyCostlyFilters, minFrequencyCheapFilters, minFrequencyOtherFilters)
}

void OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_init(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *self) {
  OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_(self, JreLoadStatic(OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments, DEFAULT), 256, 2, 2, 5);
}

OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy, init)
}

OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy, init)
}

void OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *self, OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters) {
  NSObject_init(self);
  JreStrongAssign(&self->segmentPolicy_, segmentPolicy);
  if (minFrequencyOtherFilters < minFrequencyCheapFilters || minFrequencyOtherFilters < minFrequencyCheapFilters) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"it does not make sense to cache regular filters more aggressively than filters that are costly to produce or cheap to cache");
  }
  if (minFrequencyCheapFilters > historySize || minFrequencyCostlyFilters > historySize || minFrequencyOtherFilters > historySize) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The minimum frequencies should be less than the size of the history of filters that are being tracked");
  }
  JreStrongAssignAndConsume(&self->recentlyUsedFilters_, new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(historySize, OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_SENTINEL));
  self->minFrequencyCostlyFilters_ = minFrequencyCostlyFilters;
  self->minFrequencyCheapFilters_ = minFrequencyCheapFilters;
  self->minFrequencyOtherFilters_ = minFrequencyOtherFilters;
}

OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_(OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy, initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_, segmentPolicy, historySize, minFrequencyCostlyFilters, minFrequencyCheapFilters, minFrequencyOtherFilters)
}

OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_(OrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments *segmentPolicy, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy, initWithOrgApacheLuceneSearchFilterCachingPolicy_CacheOnLargeSegments_withInt_withInt_withInt_withInt_, segmentPolicy, historySize, minFrequencyCostlyFilters, minFrequencyCheapFilters, minFrequencyOtherFilters)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy)
