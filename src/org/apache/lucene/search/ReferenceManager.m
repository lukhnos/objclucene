//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/ReferenceManager.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/concurrent/locks/Lock.h"
#include "java/util/concurrent/locks/ReentrantLock.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/ReferenceManager must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchReferenceManager () {
 @public
  id<JavaUtilConcurrentLocksLock> refreshLock_;
  id<JavaUtilList> refreshListeners_;
}

- (void)ensureOpen;

- (void)swapReferenceWithId:(id)newReference;

- (void)doMaybeRefresh;

- (void)notifyRefreshListenersBefore;

- (void)notifyRefreshListenersRefreshedWithBoolean:(jboolean)didRefresh;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchReferenceManager, refreshLock_, id<JavaUtilConcurrentLocksLock>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchReferenceManager, refreshListeners_, id<JavaUtilList>)

inline NSString *OrgApacheLuceneSearchReferenceManager_get_REFERENCE_MANAGER_IS_CLOSED_MSG(void);
static NSString *OrgApacheLuceneSearchReferenceManager_REFERENCE_MANAGER_IS_CLOSED_MSG = @"this ReferenceManager is closed";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchReferenceManager, REFERENCE_MANAGER_IS_CLOSED_MSG, NSString *)

__attribute__((unused)) static void OrgApacheLuceneSearchReferenceManager_ensureOpen(OrgApacheLuceneSearchReferenceManager *self);

__attribute__((unused)) static void OrgApacheLuceneSearchReferenceManager_swapReferenceWithId_(OrgApacheLuceneSearchReferenceManager *self, id newReference);

__attribute__((unused)) static id OrgApacheLuceneSearchReferenceManager_acquire(OrgApacheLuceneSearchReferenceManager *self);

__attribute__((unused)) static void OrgApacheLuceneSearchReferenceManager_doMaybeRefresh(OrgApacheLuceneSearchReferenceManager *self);

__attribute__((unused)) static void OrgApacheLuceneSearchReferenceManager_release__WithId_(OrgApacheLuceneSearchReferenceManager *self, id reference);

__attribute__((unused)) static void OrgApacheLuceneSearchReferenceManager_notifyRefreshListenersBefore(OrgApacheLuceneSearchReferenceManager *self);

__attribute__((unused)) static void OrgApacheLuceneSearchReferenceManager_notifyRefreshListenersRefreshedWithBoolean_(OrgApacheLuceneSearchReferenceManager *self, jboolean didRefresh);

@interface OrgApacheLuceneSearchReferenceManager_RefreshListener : NSObject

@end

@implementation OrgApacheLuceneSearchReferenceManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchReferenceManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)ensureOpen {
  OrgApacheLuceneSearchReferenceManager_ensureOpen(self);
}

- (void)swapReferenceWithId:(id)newReference {
  OrgApacheLuceneSearchReferenceManager_swapReferenceWithId_(self, newReference);
}

- (void)decRefWithId:(id)reference {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)refreshIfNeededWithId:(id)referenceToRefresh {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)tryIncRefWithId:(id)reference {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)acquire {
  return OrgApacheLuceneSearchReferenceManager_acquire(self);
}

- (void)close {
  @synchronized(self) {
    if (JreLoadVolatileId(&current_) != nil) {
      OrgApacheLuceneSearchReferenceManager_swapReferenceWithId_(self, nil);
      [self afterClose];
    }
  }
}

- (jint)getRefCountWithId:(id)reference {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)afterClose {
}

- (void)doMaybeRefresh {
  OrgApacheLuceneSearchReferenceManager_doMaybeRefresh(self);
}

- (jboolean)maybeRefresh {
  OrgApacheLuceneSearchReferenceManager_ensureOpen(self);
  jboolean doTryRefresh = [((id<JavaUtilConcurrentLocksLock>) nil_chk(refreshLock_)) tryLock];
  if (doTryRefresh) {
    @try {
      OrgApacheLuceneSearchReferenceManager_doMaybeRefresh(self);
    }
    @finally {
      [refreshLock_ unlock];
    }
  }
  return doTryRefresh;
}

- (void)maybeRefreshBlocking {
  OrgApacheLuceneSearchReferenceManager_ensureOpen(self);
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(refreshLock_)) lock];
  @try {
    OrgApacheLuceneSearchReferenceManager_doMaybeRefresh(self);
  }
  @finally {
    [refreshLock_ unlock];
  }
}

- (void)afterMaybeRefresh {
}

- (void)release__WithId:(id)reference {
  OrgApacheLuceneSearchReferenceManager_release__WithId_(self, reference);
}

- (void)notifyRefreshListenersBefore {
  OrgApacheLuceneSearchReferenceManager_notifyRefreshListenersBefore(self);
}

- (void)notifyRefreshListenersRefreshedWithBoolean:(jboolean)didRefresh {
  OrgApacheLuceneSearchReferenceManager_notifyRefreshListenersRefreshedWithBoolean_(self, didRefresh);
}

- (void)addListenerWithOrgApacheLuceneSearchReferenceManager_RefreshListener:(id<OrgApacheLuceneSearchReferenceManager_RefreshListener>)listener {
  if (listener == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Listener cannot be null");
  }
  [((id<JavaUtilList>) nil_chk(refreshListeners_)) addWithId:listener];
}

- (void)removeListenerWithOrgApacheLuceneSearchReferenceManager_RefreshListener:(id<OrgApacheLuceneSearchReferenceManager_RefreshListener>)listener {
  if (listener == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Listener cannot be null");
  }
  [((id<JavaUtilList>) nil_chk(refreshListeners_)) removeWithId:listener];
}

- (void)__javaClone:(OrgApacheLuceneSearchReferenceManager *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&current_, &original->current_);
}

- (void)dealloc {
  JreReleaseVolatile(&current_);
  RELEASE_(refreshLock_);
  RELEASE_(refreshListeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 0, 1, 2, 3, -1, -1 },
    { NULL, "V", 0x404, 4, 1, 2, 3, -1, -1 },
    { NULL, "LNSObject;", 0x404, 5, 1, 2, 6, -1, -1 },
    { NULL, "Z", 0x404, 7, 1, 2, 8, -1, -1 },
    { NULL, "LNSObject;", 0x11, -1, -1, 2, 9, -1, -1 },
    { NULL, "V", 0x31, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x404, 10, 1, -1, 11, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x11, 12, 1, 2, 3, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ensureOpen);
  methods[2].selector = @selector(swapReferenceWithId:);
  methods[3].selector = @selector(decRefWithId:);
  methods[4].selector = @selector(refreshIfNeededWithId:);
  methods[5].selector = @selector(tryIncRefWithId:);
  methods[6].selector = @selector(acquire);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(getRefCountWithId:);
  methods[9].selector = @selector(afterClose);
  methods[10].selector = @selector(doMaybeRefresh);
  methods[11].selector = @selector(maybeRefresh);
  methods[12].selector = @selector(maybeRefreshBlocking);
  methods[13].selector = @selector(afterMaybeRefresh);
  methods[14].selector = @selector(release__WithId:);
  methods[15].selector = @selector(notifyRefreshListenersBefore);
  methods[16].selector = @selector(notifyRefreshListenersRefreshedWithBoolean:);
  methods[17].selector = @selector(addListenerWithOrgApacheLuceneSearchReferenceManager_RefreshListener:);
  methods[18].selector = @selector(removeListenerWithOrgApacheLuceneSearchReferenceManager_RefreshListener:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "REFERENCE_MANAGER_IS_CLOSED_MSG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "current_", "LNSObject;", .constantValue.asLong = 0, 0x44, -1, -1, 19, -1 },
    { "refreshLock_", "LJavaUtilConcurrentLocksLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "refreshListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
  };
  static const void *ptrTable[] = { "swapReference", "LNSObject;", "LJavaIoIOException;", "(TG;)V", "decRef", "refreshIfNeeded", "(TG;)TG;", "tryIncRef", "(TG;)Z", "()TG;", "getRefCount", "(TG;)I", "release", "notifyRefreshListenersRefreshed", "Z", "addListener", "LOrgApacheLuceneSearchReferenceManager_RefreshListener;", "removeListener", &OrgApacheLuceneSearchReferenceManager_REFERENCE_MANAGER_IS_CLOSED_MSG, "TG;", "Ljava/util/List<Lorg/apache/lucene/search/ReferenceManager$RefreshListener;>;", "<G:Ljava/lang/Object;>Ljava/lang/Object;Ljava/io/Closeable;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchReferenceManager = { "ReferenceManager", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x401, 19, 4, -1, 16, -1, 21, -1 };
  return &_OrgApacheLuceneSearchReferenceManager;
}

@end

void OrgApacheLuceneSearchReferenceManager_init(OrgApacheLuceneSearchReferenceManager *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->refreshLock_, new_JavaUtilConcurrentLocksReentrantLock_init());
  JreStrongAssignAndConsume(&self->refreshListeners_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
}

void OrgApacheLuceneSearchReferenceManager_ensureOpen(OrgApacheLuceneSearchReferenceManager *self) {
  if (JreLoadVolatileId(&self->current_) == nil) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(OrgApacheLuceneSearchReferenceManager_REFERENCE_MANAGER_IS_CLOSED_MSG);
  }
}

void OrgApacheLuceneSearchReferenceManager_swapReferenceWithId_(OrgApacheLuceneSearchReferenceManager *self, id newReference) {
  @synchronized(self) {
    OrgApacheLuceneSearchReferenceManager_ensureOpen(self);
    id oldReference = JreLoadVolatileId(&self->current_);
    JreVolatileStrongAssign(&self->current_, newReference);
    OrgApacheLuceneSearchReferenceManager_release__WithId_(self, oldReference);
  }
}

id OrgApacheLuceneSearchReferenceManager_acquire(OrgApacheLuceneSearchReferenceManager *self) {
  id ref;
  do {
    if ((ref = JreLoadVolatileId(&self->current_)) == nil) {
      @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(OrgApacheLuceneSearchReferenceManager_REFERENCE_MANAGER_IS_CLOSED_MSG);
    }
    if ([self tryIncRefWithId:ref]) {
      return ref;
    }
    if ([self getRefCountWithId:ref] == 0 && JreObjectEqualsEquals(JreLoadVolatileId(&self->current_), ref)) {
      JreAssert(ref != nil, @"org/apache/lucene/search/ReferenceManager.java:104 condition failed: assert ref != null;");
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"The managed reference has already closed - this is likely a bug when the reference count is modified outside of the ReferenceManager");
    }
  }
  while (true);
}

void OrgApacheLuceneSearchReferenceManager_doMaybeRefresh(OrgApacheLuceneSearchReferenceManager *self) {
  [((id<JavaUtilConcurrentLocksLock>) nil_chk(self->refreshLock_)) lock];
  jboolean refreshed = false;
  @try {
    id reference = OrgApacheLuceneSearchReferenceManager_acquire(self);
    @try {
      OrgApacheLuceneSearchReferenceManager_notifyRefreshListenersBefore(self);
      id newReference = JreRetainedLocalValue([self refreshIfNeededWithId:reference]);
      if (newReference != nil) {
        JreAssert(!JreObjectEqualsEquals(newReference, reference), @"refreshIfNeeded should return null if refresh wasn't needed");
        @try {
          OrgApacheLuceneSearchReferenceManager_swapReferenceWithId_(self, newReference);
          refreshed = true;
        }
        @finally {
          if (!refreshed) {
            OrgApacheLuceneSearchReferenceManager_release__WithId_(self, newReference);
          }
        }
      }
    }
    @finally {
      OrgApacheLuceneSearchReferenceManager_release__WithId_(self, reference);
      OrgApacheLuceneSearchReferenceManager_notifyRefreshListenersRefreshedWithBoolean_(self, refreshed);
    }
    [self afterMaybeRefresh];
  }
  @finally {
    [self->refreshLock_ unlock];
  }
}

void OrgApacheLuceneSearchReferenceManager_release__WithId_(OrgApacheLuceneSearchReferenceManager *self, id reference) {
  JreAssert(reference != nil, @"org/apache/lucene/search/ReferenceManager.java:273 condition failed: assert reference != null;");
  [self decRefWithId:reference];
}

void OrgApacheLuceneSearchReferenceManager_notifyRefreshListenersBefore(OrgApacheLuceneSearchReferenceManager *self) {
  for (id<OrgApacheLuceneSearchReferenceManager_RefreshListener> __strong refreshListener in nil_chk(self->refreshListeners_)) {
    [((id<OrgApacheLuceneSearchReferenceManager_RefreshListener>) nil_chk(refreshListener)) beforeRefresh];
  }
}

void OrgApacheLuceneSearchReferenceManager_notifyRefreshListenersRefreshedWithBoolean_(OrgApacheLuceneSearchReferenceManager *self, jboolean didRefresh) {
  for (id<OrgApacheLuceneSearchReferenceManager_RefreshListener> __strong refreshListener in nil_chk(self->refreshListeners_)) {
    [((id<OrgApacheLuceneSearchReferenceManager_RefreshListener>) nil_chk(refreshListener)) afterRefreshWithBoolean:didRefresh];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchReferenceManager)

@implementation OrgApacheLuceneSearchReferenceManager_RefreshListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x401, 1, 2, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(beforeRefresh);
  methods[1].selector = @selector(afterRefreshWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaIoIOException;", "afterRefresh", "Z", "LOrgApacheLuceneSearchReferenceManager;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchReferenceManager_RefreshListener = { "RefreshListener", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x609, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchReferenceManager_RefreshListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchReferenceManager_RefreshListener)
