//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/similarities/DefaultSimilarity.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/similarities/DefaultSimilarity.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/SmallFloat.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/similarities/DefaultSimilarity must not be compiled with ARC (-fobjc-arc)"
#endif

/*!
 @brief Cache of decoded bytes.
 */
inline IOSFloatArray *OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_get_NORM_TABLE(void);
static IOSFloatArray *OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_NORM_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchSimilaritiesDefaultSimilarity, NORM_TABLE, IOSFloatArray *)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchSimilaritiesDefaultSimilarity)

@implementation OrgApacheLuceneSearchSimilaritiesDefaultSimilarity

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jfloat)coordWithInt:(jint)overlap
               withInt:(jint)maxOverlap {
  return overlap / (jfloat) maxOverlap;
}

- (jfloat)queryNormWithFloat:(jfloat)sumOfSquaredWeights {
  return (jfloat) (1.0 / JavaLangMath_sqrtWithDouble_(sumOfSquaredWeights));
}

- (jlong)encodeNormValueWithFloat:(jfloat)f {
  return OrgApacheLuceneUtilSmallFloat_floatToByte315WithFloat_(f);
}

- (jfloat)decodeNormValueWithLong:(jlong)norm {
  return IOSFloatArray_Get(nil_chk(OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_NORM_TABLE), (jint) (norm & (jint) 0xFF));
}

- (jfloat)lengthNormWithOrgApacheLuceneIndexFieldInvertState:(OrgApacheLuceneIndexFieldInvertState *)state {
  jint numTerms;
  if (discountOverlaps_) numTerms = [((OrgApacheLuceneIndexFieldInvertState *) nil_chk(state)) getLength] - [state getNumOverlap];
  else numTerms = [((OrgApacheLuceneIndexFieldInvertState *) nil_chk(state)) getLength];
  return [state getBoost] * ((jfloat) (1.0 / JavaLangMath_sqrtWithDouble_(numTerms)));
}

- (jfloat)tfWithFloat:(jfloat)freq {
  return (jfloat) JavaLangMath_sqrtWithDouble_(freq);
}

- (jfloat)sloppyFreqWithInt:(jint)distance {
  return 1.0f / (distance + 1);
}

- (jfloat)scorePayloadWithInt:(jint)doc
                      withInt:(jint)start
                      withInt:(jint)end
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payload {
  return 1;
}

- (jfloat)idfWithLong:(jlong)docFreq
             withLong:(jlong)numDocs {
  return (jfloat) (JavaLangMath_logWithDouble_(numDocs / (jdouble) (docFreq + 1)) + 1.0);
}

- (void)setDiscountOverlapsWithBoolean:(jboolean)v {
  discountOverlaps_ = v;
}

- (jboolean)getDiscountOverlaps {
  return discountOverlaps_;
}

- (NSString *)description {
  return @"DefaultSimilarity";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x11, 4, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x11, 5, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(coordWithInt:withInt:);
  methods[2].selector = @selector(queryNormWithFloat:);
  methods[3].selector = @selector(encodeNormValueWithFloat:);
  methods[4].selector = @selector(decodeNormValueWithLong:);
  methods[5].selector = @selector(lengthNormWithOrgApacheLuceneIndexFieldInvertState:);
  methods[6].selector = @selector(tfWithFloat:);
  methods[7].selector = @selector(sloppyFreqWithInt:);
  methods[8].selector = @selector(scorePayloadWithInt:withInt:withInt:withOrgApacheLuceneUtilBytesRef:);
  methods[9].selector = @selector(idfWithLong:withLong:);
  methods[10].selector = @selector(setDiscountOverlapsWithBoolean:);
  methods[11].selector = @selector(getDiscountOverlaps);
  methods[12].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NORM_TABLE", "[F", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "discountOverlaps_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "coord", "II", "queryNorm", "F", "encodeNormValue", "decodeNormValue", "J", "lengthNorm", "LOrgApacheLuceneIndexFieldInvertState;", "tf", "sloppyFreq", "I", "scorePayload", "IIILOrgApacheLuceneUtilBytesRef;", "idf", "JJ", "setDiscountOverlaps", "Z", "toString", &OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_NORM_TABLE };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSimilaritiesDefaultSimilarity = { "DefaultSimilarity", "org.apache.lucene.search.similarities", ptrTable, methods, fields, 7, 0x1, 13, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSimilaritiesDefaultSimilarity;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchSimilaritiesDefaultSimilarity class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_NORM_TABLE, [IOSFloatArray newArrayWithLength:256]);
    {
      for (jint i = 0; i < 256; i++) {
        *IOSFloatArray_GetRef(OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_NORM_TABLE, i) = OrgApacheLuceneUtilSmallFloat_byte315ToFloatWithByte_((jbyte) i);
      }
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchSimilaritiesDefaultSimilarity)
  }
}

@end

void OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_init(OrgApacheLuceneSearchSimilaritiesDefaultSimilarity *self) {
  OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity_init(self);
  self->discountOverlaps_ = true;
}

OrgApacheLuceneSearchSimilaritiesDefaultSimilarity *new_OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSimilaritiesDefaultSimilarity, init)
}

OrgApacheLuceneSearchSimilaritiesDefaultSimilarity *create_OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSimilaritiesDefaultSimilarity, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSimilaritiesDefaultSimilarity)
