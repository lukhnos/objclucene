//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/FieldComparator.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/DocValues.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/LeafFieldComparator.h"
#include "org/apache/lucene/search/ScoreCachingWrappingScorer.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/SimpleFieldComparator.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/FieldComparator must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneSearchFieldComparator_DoubleComparator () {
 @public
  IOSDoubleArray *values_;
  jdouble bottom_;
  jdouble topValue_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_DoubleComparator, values_, IOSDoubleArray *)

@interface OrgApacheLuceneSearchFieldComparator_FloatComparator () {
 @public
  IOSFloatArray *values_;
  jfloat bottom_;
  jfloat topValue_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_FloatComparator, values_, IOSFloatArray *)

@interface OrgApacheLuceneSearchFieldComparator_IntComparator () {
 @public
  IOSIntArray *values_;
  jint bottom_;
  jint topValue_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_IntComparator, values_, IOSIntArray *)

@interface OrgApacheLuceneSearchFieldComparator_LongComparator () {
 @public
  IOSLongArray *values_;
  jlong bottom_;
  jlong topValue_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_LongComparator, values_, IOSLongArray *)

@interface OrgApacheLuceneSearchFieldComparator_RelevanceComparator () {
 @public
  IOSFloatArray *scores_;
  jfloat bottom_;
  OrgApacheLuceneSearchScorer *scorer_;
  jfloat topValue_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_RelevanceComparator, scores_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_RelevanceComparator, scorer_, OrgApacheLuceneSearchScorer *)

@interface OrgApacheLuceneSearchFieldComparator_DocComparator () {
 @public
  IOSIntArray *docIDs_;
  jint docBase_;
  jint bottom_;
  jint topValue_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_DocComparator, docIDs_, IOSIntArray *)

@interface OrgApacheLuceneSearchFieldComparator_TermOrdValComparator () {
 @public
  IOSObjectArray *tempBRs_;
  NSString *field_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_TermOrdValComparator, tempBRs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_TermOrdValComparator, field_, NSString *)

@interface OrgApacheLuceneSearchFieldComparator_TermValComparator () {
 @public
  IOSObjectArray *values_;
  IOSObjectArray *tempBRs_;
  OrgApacheLuceneIndexBinaryDocValues *docTerms_;
  id<OrgApacheLuceneUtilBits> docsWithField_;
  NSString *field_;
  OrgApacheLuceneUtilBytesRef *bottom_;
  OrgApacheLuceneUtilBytesRef *topValue_;
  jint missingSortCmp_;
}

/*!
 @brief Given a document and a term, return the term itself if it exists or 
 <tt>null</tt> otherwise.
 */
- (OrgApacheLuceneUtilBytesRef *)getComparableBytesWithInt:(jint)doc
                           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_TermValComparator, values_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_TermValComparator, tempBRs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_TermValComparator, docTerms_, OrgApacheLuceneIndexBinaryDocValues *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_TermValComparator, docsWithField_, id<OrgApacheLuceneUtilBits>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_TermValComparator, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_TermValComparator, bottom_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchFieldComparator_TermValComparator, topValue_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static OrgApacheLuceneUtilBytesRef *OrgApacheLuceneSearchFieldComparator_TermValComparator_getComparableBytesWithInt_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneSearchFieldComparator_TermValComparator *self, jint doc, OrgApacheLuceneUtilBytesRef *term);

@implementation OrgApacheLuceneSearchFieldComparator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchFieldComparator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setTopValueWithId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)valueWithInt:(jint)slot {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgApacheLuceneSearchLeafFieldComparator>)getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)compareValuesWithId:(id)first
                     withId:(id)second {
  if (first == nil) {
    if (second == nil) {
      return 0;
    }
    else {
      return -1;
    }
  }
  else if (second == nil) {
    return 1;
  }
  else {
    return [((id<JavaLangComparable>) cast_check(first, JavaLangComparable_class_())) compareToWithId:second];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x401, 5, 6, -1, 7, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchLeafFieldComparator;", 0x401, 8, 9, 10, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(setTopValueWithId:);
  methods[3].selector = @selector(valueWithInt:);
  methods[4].selector = @selector(getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[5].selector = @selector(compareValuesWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "II", "setTopValue", "LNSObject;", "(TT;)V", "value", "I", "(I)TT;", "getLeafComparator", "LOrgApacheLuceneIndexLeafReaderContext;", "LJavaIoIOException;", "compareValues", "LNSObject;LNSObject;", "(TT;TT;)I", "LOrgApacheLuceneSearchFieldComparator_NumericComparator;LOrgApacheLuceneSearchFieldComparator_DoubleComparator;LOrgApacheLuceneSearchFieldComparator_FloatComparator;LOrgApacheLuceneSearchFieldComparator_IntComparator;LOrgApacheLuceneSearchFieldComparator_LongComparator;LOrgApacheLuceneSearchFieldComparator_RelevanceComparator;LOrgApacheLuceneSearchFieldComparator_DocComparator;LOrgApacheLuceneSearchFieldComparator_TermOrdValComparator;LOrgApacheLuceneSearchFieldComparator_TermValComparator;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator = { "FieldComparator", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x401, 6, 0, -1, 14, -1, 15, -1 };
  return &_OrgApacheLuceneSearchFieldComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_init(OrgApacheLuceneSearchFieldComparator *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator)

@implementation OrgApacheLuceneSearchFieldComparator_NumericComparator

- (instancetype)initWithNSString:(NSString *)field
                    withNSNumber:(NSNumber *)missingValue {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  return self;
}

- (void)doSetNextReaderWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  JreStrongAssign(&currentReaderValues_, [self getNumericDocValuesWithOrgApacheLuceneIndexLeafReaderContext:context withNSString:field_]);
  if (missingValue_ != nil) {
    JreStrongAssign(&docsWithField_, [self getDocsWithValueWithOrgApacheLuceneIndexLeafReaderContext:context withNSString:field_]);
    if ([docsWithField_ isKindOfClass:[OrgApacheLuceneUtilBits_MatchAllBits class]]) {
      JreStrongAssign(&docsWithField_, nil);
    }
  }
  else {
    JreStrongAssign(&docsWithField_, nil);
  }
}

- (OrgApacheLuceneIndexNumericDocValues *)getNumericDocValuesWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                                          withNSString:(NSString *)field {
  return OrgApacheLuceneIndexDocValues_getNumericWithOrgApacheLuceneIndexLeafReader_withNSString_([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader], field);
}

- (id<OrgApacheLuceneUtilBits>)getDocsWithValueWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                            withNSString:(NSString *)field {
  return OrgApacheLuceneIndexDocValues_getDocsWithFieldWithOrgApacheLuceneIndexLeafReader_withNSString_([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader], field);
}

- (void)dealloc {
  RELEASE_(missingValue_);
  RELEASE_(field_);
  RELEASE_(docsWithField_);
  RELEASE_(currentReaderValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexNumericDocValues;", 0x4, 5, 6, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBits;", 0x4, 7, 6, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSNumber:);
  methods[1].selector = @selector(doSetNextReaderWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[2].selector = @selector(getNumericDocValuesWithOrgApacheLuceneIndexLeafReaderContext:withNSString:);
  methods[3].selector = @selector(getDocsWithValueWithOrgApacheLuceneIndexLeafReaderContext:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "missingValue_", "LNSNumber;", .constantValue.asLong = 0, 0x14, -1, -1, 8, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "docsWithField_", "LOrgApacheLuceneUtilBits;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "currentReaderValues_", "LOrgApacheLuceneIndexNumericDocValues;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSNumber;", "(Ljava/lang/String;TT;)V", "doSetNextReader", "LOrgApacheLuceneIndexLeafReaderContext;", "LJavaIoIOException;", "getNumericDocValues", "LOrgApacheLuceneIndexLeafReaderContext;LNSString;", "getDocsWithValue", "TT;", "LOrgApacheLuceneSearchFieldComparator;", "<T:Ljava/lang/Number;>Lorg/apache/lucene/search/SimpleFieldComparator<TT;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_NumericComparator = { "NumericComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x409, 4, 4, 9, -1, -1, 10, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_NumericComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(OrgApacheLuceneSearchFieldComparator_NumericComparator *self, NSString *field, NSNumber *missingValue) {
  OrgApacheLuceneSearchSimpleFieldComparator_init(self);
  JreStrongAssign(&self->field_, field);
  JreStrongAssign(&self->missingValue_, missingValue);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_NumericComparator)

@implementation OrgApacheLuceneSearchFieldComparator_DoubleComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
         withJavaLangDouble:(JavaLangDouble *)missingValue {
  OrgApacheLuceneSearchFieldComparator_DoubleComparator_initWithInt_withNSString_withJavaLangDouble_(self, numHits, field, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  return JavaLangDouble_compareWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(values_), slot1), IOSDoubleArray_Get(values_, slot2));
}

- (jint)compareBottomWithInt:(jint)doc {
  jdouble v2 = JavaLangDouble_longBitsToDoubleWithLong_([((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc]);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangDouble *) nil_chk(missingValue_)) doubleValue];
  }
  return JavaLangDouble_compareWithDouble_withDouble_(bottom_, v2);
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jdouble v2 = JavaLangDouble_longBitsToDoubleWithLong_([((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc]);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangDouble *) nil_chk(missingValue_)) doubleValue];
  }
  *IOSDoubleArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSDoubleArray_Get(nil_chk(values_), bottom);
}

- (void)setTopValueWithId:(JavaLangDouble *)value {
  topValue_ = [((JavaLangDouble *) nil_chk(value)) doubleValue];
}

- (JavaLangDouble *)valueWithInt:(jint)slot {
  return JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(nil_chk(values_), slot));
}

- (jint)compareTopWithInt:(jint)doc {
  jdouble docValue = JavaLangDouble_longBitsToDoubleWithLong_([((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc]);
  if (docsWithField_ != nil && docValue == 0 && ![docsWithField_ getWithInt:doc]) {
    docValue = [((JavaLangDouble *) nil_chk(missingValue_)) doubleValue];
  }
  return JavaLangDouble_compareWithDouble_withDouble_(topValue_, docValue);
}

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:withJavaLangDouble:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setBottomWithInt:);
  methods[5].selector = @selector(setTopValueWithId:);
  methods[6].selector = @selector(valueWithInt:);
  methods[7].selector = @selector(compareTopWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottom_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topValue_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LJavaLangDouble;", "compare", "II", "compareBottom", "I", "copy", "setBottom", "setTopValue", "LJavaLangDouble;", "value", "compareTop", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_DoubleComparator = { "DoubleComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x9, 8, 3, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_DoubleComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_DoubleComparator_initWithInt_withNSString_withJavaLangDouble_(OrgApacheLuceneSearchFieldComparator_DoubleComparator *self, jint numHits, NSString *field, JavaLangDouble *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSDoubleArray newArrayWithLength:numHits]);
}

OrgApacheLuceneSearchFieldComparator_DoubleComparator *new_OrgApacheLuceneSearchFieldComparator_DoubleComparator_initWithInt_withNSString_withJavaLangDouble_(jint numHits, NSString *field, JavaLangDouble *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_DoubleComparator, initWithInt_withNSString_withJavaLangDouble_, numHits, field, missingValue)
}

OrgApacheLuceneSearchFieldComparator_DoubleComparator *create_OrgApacheLuceneSearchFieldComparator_DoubleComparator_initWithInt_withNSString_withJavaLangDouble_(jint numHits, NSString *field, JavaLangDouble *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_DoubleComparator, initWithInt_withNSString_withJavaLangDouble_, numHits, field, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_DoubleComparator)

@implementation OrgApacheLuceneSearchFieldComparator_FloatComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
          withJavaLangFloat:(JavaLangFloat *)missingValue {
  OrgApacheLuceneSearchFieldComparator_FloatComparator_initWithInt_withNSString_withJavaLangFloat_(self, numHits, field, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  return JavaLangFloat_compareWithFloat_withFloat_(IOSFloatArray_Get(nil_chk(values_), slot1), IOSFloatArray_Get(values_, slot2));
}

- (jint)compareBottomWithInt:(jint)doc {
  jfloat v2 = JavaLangFloat_intBitsToFloatWithInt_((jint) [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc]);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangFloat *) nil_chk(missingValue_)) floatValue];
  }
  return JavaLangFloat_compareWithFloat_withFloat_(bottom_, v2);
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jfloat v2 = JavaLangFloat_intBitsToFloatWithInt_((jint) [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc]);
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangFloat *) nil_chk(missingValue_)) floatValue];
  }
  *IOSFloatArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSFloatArray_Get(nil_chk(values_), bottom);
}

- (void)setTopValueWithId:(JavaLangFloat *)value {
  topValue_ = [((JavaLangFloat *) nil_chk(value)) floatValue];
}

- (JavaLangFloat *)valueWithInt:(jint)slot {
  return JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(nil_chk(values_), slot));
}

- (jint)compareTopWithInt:(jint)doc {
  jfloat docValue = JavaLangFloat_intBitsToFloatWithInt_((jint) [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc]);
  if (docsWithField_ != nil && docValue == 0 && ![docsWithField_ getWithInt:doc]) {
    docValue = [((JavaLangFloat *) nil_chk(missingValue_)) floatValue];
  }
  return JavaLangFloat_compareWithFloat_withFloat_(topValue_, docValue);
}

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:withJavaLangFloat:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setBottomWithInt:);
  methods[5].selector = @selector(setTopValueWithId:);
  methods[6].selector = @selector(valueWithInt:);
  methods[7].selector = @selector(compareTopWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LJavaLangFloat;", "compare", "II", "compareBottom", "I", "copy", "setBottom", "setTopValue", "LJavaLangFloat;", "value", "compareTop", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_FloatComparator = { "FloatComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x9, 8, 3, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_FloatComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_FloatComparator_initWithInt_withNSString_withJavaLangFloat_(OrgApacheLuceneSearchFieldComparator_FloatComparator *self, jint numHits, NSString *field, JavaLangFloat *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSFloatArray newArrayWithLength:numHits]);
}

OrgApacheLuceneSearchFieldComparator_FloatComparator *new_OrgApacheLuceneSearchFieldComparator_FloatComparator_initWithInt_withNSString_withJavaLangFloat_(jint numHits, NSString *field, JavaLangFloat *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_FloatComparator, initWithInt_withNSString_withJavaLangFloat_, numHits, field, missingValue)
}

OrgApacheLuceneSearchFieldComparator_FloatComparator *create_OrgApacheLuceneSearchFieldComparator_FloatComparator_initWithInt_withNSString_withJavaLangFloat_(jint numHits, NSString *field, JavaLangFloat *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_FloatComparator, initWithInt_withNSString_withJavaLangFloat_, numHits, field, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_FloatComparator)

@implementation OrgApacheLuceneSearchFieldComparator_IntComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
        withJavaLangInteger:(JavaLangInteger *)missingValue {
  OrgApacheLuceneSearchFieldComparator_IntComparator_initWithInt_withNSString_withJavaLangInteger_(self, numHits, field, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  return JavaLangInteger_compareWithInt_withInt_(IOSIntArray_Get(nil_chk(values_), slot1), IOSIntArray_Get(values_, slot2));
}

- (jint)compareBottomWithInt:(jint)doc {
  jint v2 = (jint) [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc];
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangInteger *) nil_chk(missingValue_)) intValue];
  }
  return JavaLangInteger_compareWithInt_withInt_(bottom_, v2);
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jint v2 = (jint) [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc];
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangInteger *) nil_chk(missingValue_)) intValue];
  }
  *IOSIntArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSIntArray_Get(nil_chk(values_), bottom);
}

- (void)setTopValueWithId:(JavaLangInteger *)value {
  topValue_ = [((JavaLangInteger *) nil_chk(value)) intValue];
}

- (JavaLangInteger *)valueWithInt:(jint)slot {
  return JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(values_), slot));
}

- (jint)compareTopWithInt:(jint)doc {
  jint docValue = (jint) [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc];
  if (docsWithField_ != nil && docValue == 0 && ![docsWithField_ getWithInt:doc]) {
    docValue = [((JavaLangInteger *) nil_chk(missingValue_)) intValue];
  }
  return JavaLangInteger_compareWithInt_withInt_(topValue_, docValue);
}

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:withJavaLangInteger:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setBottomWithInt:);
  methods[5].selector = @selector(setTopValueWithId:);
  methods[6].selector = @selector(valueWithInt:);
  methods[7].selector = @selector(compareTopWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LJavaLangInteger;", "compare", "II", "compareBottom", "I", "copy", "setBottom", "setTopValue", "LJavaLangInteger;", "value", "compareTop", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_IntComparator = { "IntComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x9, 8, 3, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_IntComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_IntComparator_initWithInt_withNSString_withJavaLangInteger_(OrgApacheLuceneSearchFieldComparator_IntComparator *self, jint numHits, NSString *field, JavaLangInteger *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSIntArray newArrayWithLength:numHits]);
}

OrgApacheLuceneSearchFieldComparator_IntComparator *new_OrgApacheLuceneSearchFieldComparator_IntComparator_initWithInt_withNSString_withJavaLangInteger_(jint numHits, NSString *field, JavaLangInteger *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_IntComparator, initWithInt_withNSString_withJavaLangInteger_, numHits, field, missingValue)
}

OrgApacheLuceneSearchFieldComparator_IntComparator *create_OrgApacheLuceneSearchFieldComparator_IntComparator_initWithInt_withNSString_withJavaLangInteger_(jint numHits, NSString *field, JavaLangInteger *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_IntComparator, initWithInt_withNSString_withJavaLangInteger_, numHits, field, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_IntComparator)

@implementation OrgApacheLuceneSearchFieldComparator_LongComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
           withJavaLangLong:(JavaLangLong *)missingValue {
  OrgApacheLuceneSearchFieldComparator_LongComparator_initWithInt_withNSString_withJavaLangLong_(self, numHits, field, missingValue);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  return JavaLangLong_compareWithLong_withLong_(IOSLongArray_Get(nil_chk(values_), slot1), IOSLongArray_Get(values_, slot2));
}

- (jint)compareBottomWithInt:(jint)doc {
  jlong v2 = [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc];
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangLong *) nil_chk(missingValue_)) longLongValue];
  }
  return JavaLangLong_compareWithLong_withLong_(bottom_, v2);
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jlong v2 = [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc];
  if (docsWithField_ != nil && v2 == 0 && ![docsWithField_ getWithInt:doc]) {
    v2 = [((JavaLangLong *) nil_chk(missingValue_)) longLongValue];
  }
  *IOSLongArray_GetRef(nil_chk(values_), slot) = v2;
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSLongArray_Get(nil_chk(values_), bottom);
}

- (void)setTopValueWithId:(JavaLangLong *)value {
  topValue_ = [((JavaLangLong *) nil_chk(value)) longLongValue];
}

- (JavaLangLong *)valueWithInt:(jint)slot {
  return JavaLangLong_valueOfWithLong_(IOSLongArray_Get(nil_chk(values_), slot));
}

- (jint)compareTopWithInt:(jint)doc {
  jlong docValue = [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(currentReaderValues_)) getWithInt:doc];
  if (docsWithField_ != nil && docValue == 0 && ![docsWithField_ getWithInt:doc]) {
    docValue = [((JavaLangLong *) nil_chk(missingValue_)) longLongValue];
  }
  return JavaLangLong_compareWithLong_withLong_(topValue_, docValue);
}

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:withJavaLangLong:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(setBottomWithInt:);
  methods[5].selector = @selector(setTopValueWithId:);
  methods[6].selector = @selector(valueWithInt:);
  methods[7].selector = @selector(compareTopWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottom_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topValue_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;LJavaLangLong;", "compare", "II", "compareBottom", "I", "copy", "setBottom", "setTopValue", "LJavaLangLong;", "value", "compareTop", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator$NumericComparator<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_LongComparator = { "LongComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x9, 8, 3, 11, -1, -1, 12, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_LongComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_LongComparator_initWithInt_withNSString_withJavaLangLong_(OrgApacheLuceneSearchFieldComparator_LongComparator *self, jint numHits, NSString *field, JavaLangLong *missingValue) {
  OrgApacheLuceneSearchFieldComparator_NumericComparator_initWithNSString_withNSNumber_(self, field, missingValue);
  JreStrongAssignAndConsume(&self->values_, [IOSLongArray newArrayWithLength:numHits]);
}

OrgApacheLuceneSearchFieldComparator_LongComparator *new_OrgApacheLuceneSearchFieldComparator_LongComparator_initWithInt_withNSString_withJavaLangLong_(jint numHits, NSString *field, JavaLangLong *missingValue) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_LongComparator, initWithInt_withNSString_withJavaLangLong_, numHits, field, missingValue)
}

OrgApacheLuceneSearchFieldComparator_LongComparator *create_OrgApacheLuceneSearchFieldComparator_LongComparator_initWithInt_withNSString_withJavaLangLong_(jint numHits, NSString *field, JavaLangLong *missingValue) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_LongComparator, initWithInt_withNSString_withJavaLangLong_, numHits, field, missingValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_LongComparator)

@implementation OrgApacheLuceneSearchFieldComparator_RelevanceComparator

- (instancetype)initWithInt:(jint)numHits {
  OrgApacheLuceneSearchFieldComparator_RelevanceComparator_initWithInt_(self, numHits);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  return JavaLangFloat_compareWithFloat_withFloat_(IOSFloatArray_Get(nil_chk(scores_), slot2), IOSFloatArray_Get(scores_, slot1));
}

- (jint)compareBottomWithInt:(jint)doc {
  jfloat score = [((OrgApacheLuceneSearchScorer *) nil_chk(scorer_)) score];
  JreAssert(!JavaLangFloat_isNaNWithFloat_(score), @"org/apache/lucene/search/FieldComparator.java:492 condition failed: assert !Float.isNaN(score);");
  return JavaLangFloat_compareWithFloat_withFloat_(score, bottom_);
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  *IOSFloatArray_GetRef(nil_chk(scores_), slot) = [((OrgApacheLuceneSearchScorer *) nil_chk(scorer_)) score];
  JreAssert(!JavaLangFloat_isNaNWithFloat_(IOSFloatArray_Get(scores_, slot)), @"org/apache/lucene/search/FieldComparator.java:499 condition failed: assert !Float.isNaN(scores[slot]);");
}

- (id<OrgApacheLuceneSearchLeafFieldComparator>)getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  return self;
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSFloatArray_Get(nil_chk(scores_), bottom);
}

- (void)setTopValueWithId:(JavaLangFloat *)value {
  topValue_ = [((JavaLangFloat *) nil_chk(value)) floatValue];
}

- (void)setScorerWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)scorer {
  if (!([scorer isKindOfClass:[OrgApacheLuceneSearchScoreCachingWrappingScorer class]])) {
    JreStrongAssignAndConsume(&self->scorer_, new_OrgApacheLuceneSearchScoreCachingWrappingScorer_initWithOrgApacheLuceneSearchScorer_(scorer));
  }
  else {
    JreStrongAssign(&self->scorer_, scorer);
  }
}

- (JavaLangFloat *)valueWithInt:(jint)slot {
  return JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(nil_chk(scores_), slot));
}

- (jint)compareValuesWithId:(JavaLangFloat *)first
                     withId:(JavaLangFloat *)second {
  return [((JavaLangFloat *) nil_chk(second)) compareToWithId:first];
}

- (jint)compareTopWithInt:(jint)doc {
  jfloat docValue = [((OrgApacheLuceneSearchScorer *) nil_chk(scorer_)) score];
  JreAssert(!JavaLangFloat_isNaNWithFloat_(docValue), @"org/apache/lucene/search/FieldComparator.java:545 condition failed: assert !Float.isNaN(docValue);");
  return JavaLangFloat_compareWithFloat_withFloat_(docValue, topValue_);
}

- (void)dealloc {
  RELEASE_(scores_);
  RELEASE_(scorer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 0, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchLeafFieldComparator;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 13, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 0, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(setTopValueWithId:);
  methods[7].selector = @selector(setScorerWithOrgApacheLuceneSearchScorer:);
  methods[8].selector = @selector(valueWithInt:);
  methods[9].selector = @selector(compareValuesWithId:withId:);
  methods[10].selector = @selector(compareTopWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scores_", "[F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scorer_", "LOrgApacheLuceneSearchScorer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "compare", "II", "compareBottom", "LJavaIoIOException;", "copy", "getLeafComparator", "LOrgApacheLuceneIndexLeafReaderContext;", "setBottom", "setTopValue", "LJavaLangFloat;", "setScorer", "LOrgApacheLuceneSearchScorer;", "value", "compareValues", "LJavaLangFloat;LJavaLangFloat;", "compareTop", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator<Ljava/lang/Float;>;Lorg/apache/lucene/search/LeafFieldComparator;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_RelevanceComparator = { "RelevanceComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 11, 4, 17, -1, -1, 18, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_RelevanceComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_RelevanceComparator_initWithInt_(OrgApacheLuceneSearchFieldComparator_RelevanceComparator *self, jint numHits) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  JreStrongAssignAndConsume(&self->scores_, [IOSFloatArray newArrayWithLength:numHits]);
}

OrgApacheLuceneSearchFieldComparator_RelevanceComparator *new_OrgApacheLuceneSearchFieldComparator_RelevanceComparator_initWithInt_(jint numHits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_RelevanceComparator, initWithInt_, numHits)
}

OrgApacheLuceneSearchFieldComparator_RelevanceComparator *create_OrgApacheLuceneSearchFieldComparator_RelevanceComparator_initWithInt_(jint numHits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_RelevanceComparator, initWithInt_, numHits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_RelevanceComparator)

@implementation OrgApacheLuceneSearchFieldComparator_DocComparator

- (instancetype)initWithInt:(jint)numHits {
  OrgApacheLuceneSearchFieldComparator_DocComparator_initWithInt_(self, numHits);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  return IOSIntArray_Get(nil_chk(docIDs_), slot1) - IOSIntArray_Get(docIDs_, slot2);
}

- (jint)compareBottomWithInt:(jint)doc {
  return bottom_ - (docBase_ + doc);
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  *IOSIntArray_GetRef(nil_chk(docIDs_), slot) = docBase_ + doc;
}

- (id<OrgApacheLuceneSearchLeafFieldComparator>)getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  self->docBase_ = ((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context))->docBase_;
  return self;
}

- (void)setBottomWithInt:(jint)bottom {
  self->bottom_ = IOSIntArray_Get(nil_chk(docIDs_), bottom);
}

- (void)setTopValueWithId:(JavaLangInteger *)value {
  topValue_ = [((JavaLangInteger *) nil_chk(value)) intValue];
}

- (JavaLangInteger *)valueWithInt:(jint)slot {
  return JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(docIDs_), slot));
}

- (jint)compareTopWithInt:(jint)doc {
  jint docValue = docBase_ + doc;
  return JavaLangInteger_compareWithInt_withInt_(topValue_, docValue);
}

- (void)setScorerWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)scorer {
}

- (void)dealloc {
  RELEASE_(docIDs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchLeafFieldComparator;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 10, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[5].selector = @selector(setBottomWithInt:);
  methods[6].selector = @selector(setTopValueWithId:);
  methods[7].selector = @selector(valueWithInt:);
  methods[8].selector = @selector(compareTopWithInt:);
  methods[9].selector = @selector(setScorerWithOrgApacheLuceneSearchScorer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docIDs_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "docBase_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "compare", "II", "compareBottom", "copy", "getLeafComparator", "LOrgApacheLuceneIndexLeafReaderContext;", "setBottom", "setTopValue", "LJavaLangInteger;", "value", "compareTop", "setScorer", "LOrgApacheLuceneSearchScorer;", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator<Ljava/lang/Integer;>;Lorg/apache/lucene/search/LeafFieldComparator;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_DocComparator = { "DocComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x19, 10, 4, 14, -1, -1, 15, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_DocComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_DocComparator_initWithInt_(OrgApacheLuceneSearchFieldComparator_DocComparator *self, jint numHits) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  JreStrongAssignAndConsume(&self->docIDs_, [IOSIntArray newArrayWithLength:numHits]);
}

OrgApacheLuceneSearchFieldComparator_DocComparator *new_OrgApacheLuceneSearchFieldComparator_DocComparator_initWithInt_(jint numHits) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_DocComparator, initWithInt_, numHits)
}

OrgApacheLuceneSearchFieldComparator_DocComparator *create_OrgApacheLuceneSearchFieldComparator_DocComparator_initWithInt_(jint numHits) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_DocComparator, initWithInt_, numHits)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_DocComparator)

@implementation OrgApacheLuceneSearchFieldComparator_TermOrdValComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field {
  OrgApacheLuceneSearchFieldComparator_TermOrdValComparator_initWithInt_withNSString_(self, numHits, field);
  return self;
}

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
                withBoolean:(jboolean)sortMissingLast {
  OrgApacheLuceneSearchFieldComparator_TermOrdValComparator_initWithInt_withNSString_withBoolean_(self, numHits, field, sortMissingLast);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  if (IOSIntArray_Get(nil_chk(readerGen_), slot1) == IOSIntArray_Get(readerGen_, slot2)) {
    return IOSIntArray_Get(nil_chk(ords_), slot1) - IOSIntArray_Get(ords_, slot2);
  }
  OrgApacheLuceneUtilBytesRef *val1 = IOSObjectArray_Get(nil_chk(values_), slot1);
  OrgApacheLuceneUtilBytesRef *val2 = IOSObjectArray_Get(values_, slot2);
  if (val1 == nil) {
    if (val2 == nil) {
      return 0;
    }
    return missingSortCmp_;
  }
  else if (val2 == nil) {
    return -missingSortCmp_;
  }
  return [val1 compareToWithId:val2];
}

- (jint)compareBottomWithInt:(jint)doc {
  JreAssert(bottomSlot_ != -1, @"org/apache/lucene/search/FieldComparator.java:724 condition failed: assert bottomSlot != -1;");
  jint docOrd = [((OrgApacheLuceneIndexSortedDocValues *) nil_chk(termsIndex_)) getOrdWithInt:doc];
  if (docOrd == -1) {
    docOrd = missingOrd_;
  }
  if (bottomSameReader_) {
    return bottomOrd_ - docOrd;
  }
  else if (bottomOrd_ >= docOrd) {
    return 1;
  }
  else {
    return -1;
  }
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  jint ord = [((OrgApacheLuceneIndexSortedDocValues *) nil_chk(termsIndex_)) getOrdWithInt:doc];
  if (ord == -1) {
    ord = missingOrd_;
    IOSObjectArray_Set(nil_chk(values_), slot, nil);
  }
  else {
    JreAssert(ord >= 0, @"org/apache/lucene/search/FieldComparator.java:749 condition failed: assert ord >= 0;");
    if (IOSObjectArray_Get(nil_chk(tempBRs_), slot) == nil) {
      IOSObjectArray_SetAndConsume(tempBRs_, slot, new_OrgApacheLuceneUtilBytesRefBuilder_init());
    }
    [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(IOSObjectArray_Get(tempBRs_, slot))) copyBytesWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneIndexSortedDocValues *) nil_chk(termsIndex_)) lookupOrdWithInt:ord]];
    IOSObjectArray_Set(nil_chk(values_), slot, [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(IOSObjectArray_Get(tempBRs_, slot))) get]);
  }
  *IOSIntArray_GetRef(nil_chk(ords_), slot) = ord;
  *IOSIntArray_GetRef(nil_chk(readerGen_), slot) = currentReaderGen_;
}

- (OrgApacheLuceneIndexSortedDocValues *)getSortedDocValuesWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                                        withNSString:(NSString *)field {
  return OrgApacheLuceneIndexDocValues_getSortedWithOrgApacheLuceneIndexLeafReader_withNSString_([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader], field);
}

- (id<OrgApacheLuceneSearchLeafFieldComparator>)getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  JreStrongAssign(&termsIndex_, [self getSortedDocValuesWithOrgApacheLuceneIndexLeafReaderContext:context withNSString:field_]);
  currentReaderGen_++;
  if (topValue_ != nil) {
    jint ord = [((OrgApacheLuceneIndexSortedDocValues *) nil_chk(termsIndex_)) lookupTermWithOrgApacheLuceneUtilBytesRef:topValue_];
    if (ord >= 0) {
      topSameReader_ = true;
      topOrd_ = ord;
    }
    else {
      topSameReader_ = false;
      topOrd_ = -ord - 2;
    }
  }
  else {
    topOrd_ = missingOrd_;
    topSameReader_ = true;
  }
  if (bottomSlot_ != -1) {
    [self setBottomWithInt:bottomSlot_];
  }
  return self;
}

- (void)setBottomWithInt:(jint)bottom {
  bottomSlot_ = bottom;
  JreStrongAssign(&bottomValue_, IOSObjectArray_Get(nil_chk(values_), bottomSlot_));
  if (currentReaderGen_ == IOSIntArray_Get(nil_chk(readerGen_), bottomSlot_)) {
    bottomOrd_ = IOSIntArray_Get(nil_chk(ords_), bottomSlot_);
    bottomSameReader_ = true;
  }
  else {
    if (bottomValue_ == nil) {
      JreAssert(IOSIntArray_Get(nil_chk(ords_), bottomSlot_) == missingOrd_, @"org/apache/lucene/search/FieldComparator.java:805 condition failed: assert ords[bottomSlot] == missingOrd;");
      bottomOrd_ = missingOrd_;
      bottomSameReader_ = true;
      *IOSIntArray_GetRef(readerGen_, bottomSlot_) = currentReaderGen_;
    }
    else {
      jint ord = [((OrgApacheLuceneIndexSortedDocValues *) nil_chk(termsIndex_)) lookupTermWithOrgApacheLuceneUtilBytesRef:bottomValue_];
      if (ord < 0) {
        bottomOrd_ = -ord - 2;
        bottomSameReader_ = false;
      }
      else {
        bottomOrd_ = ord;
        bottomSameReader_ = true;
        *IOSIntArray_GetRef(readerGen_, bottomSlot_) = currentReaderGen_;
        *IOSIntArray_GetRef(nil_chk(ords_), bottomSlot_) = bottomOrd_;
      }
    }
  }
}

- (void)setTopValueWithId:(OrgApacheLuceneUtilBytesRef *)value {
  JreStrongAssign(&topValue_, value);
}

- (OrgApacheLuceneUtilBytesRef *)valueWithInt:(jint)slot {
  return IOSObjectArray_Get(nil_chk(values_), slot);
}

- (jint)compareTopWithInt:(jint)doc {
  jint ord = [((OrgApacheLuceneIndexSortedDocValues *) nil_chk(termsIndex_)) getOrdWithInt:doc];
  if (ord == -1) {
    ord = missingOrd_;
  }
  if (topSameReader_) {
    return topOrd_ - ord;
  }
  else if (ord <= topOrd_) {
    return 1;
  }
  else {
    return -1;
  }
}

- (jint)compareValuesWithId:(OrgApacheLuceneUtilBytesRef *)val1
                     withId:(OrgApacheLuceneUtilBytesRef *)val2 {
  if (val1 == nil) {
    if (val2 == nil) {
      return 0;
    }
    return missingSortCmp_;
  }
  else if (val2 == nil) {
    return -missingSortCmp_;
  }
  return [val1 compareToWithId:val2];
}

- (void)setScorerWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)scorer {
}

- (void)dealloc {
  RELEASE_(ords_);
  RELEASE_(values_);
  RELEASE_(tempBRs_);
  RELEASE_(readerGen_);
  RELEASE_(termsIndex_);
  RELEASE_(field_);
  RELEASE_(bottomValue_);
  RELEASE_(topValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSortedDocValues;", 0x4, 7, 8, 9, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchLeafFieldComparator;", 0x1, 10, 11, 9, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, 15, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:);
  methods[1].selector = @selector(initWithInt:withNSString:withBoolean:);
  methods[2].selector = @selector(compareWithInt:withInt:);
  methods[3].selector = @selector(compareBottomWithInt:);
  methods[4].selector = @selector(copy__WithInt:withInt:);
  methods[5].selector = @selector(getSortedDocValuesWithOrgApacheLuceneIndexLeafReaderContext:withNSString:);
  methods[6].selector = @selector(getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[7].selector = @selector(setBottomWithInt:);
  methods[8].selector = @selector(setTopValueWithId:);
  methods[9].selector = @selector(valueWithInt:);
  methods[10].selector = @selector(compareTopWithInt:);
  methods[11].selector = @selector(compareValuesWithId:withId:);
  methods[12].selector = @selector(setScorerWithOrgApacheLuceneSearchScorer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ords_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "values_", "[LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "tempBRs_", "[LOrgApacheLuceneUtilBytesRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readerGen_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "currentReaderGen_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "termsIndex_", "LOrgApacheLuceneIndexSortedDocValues;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottomSlot_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bottomOrd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bottomSameReader_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bottomValue_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "topValue_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "topSameReader_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "topOrd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "missingSortCmp_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "missingOrd_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;", "ILNSString;Z", "compare", "II", "compareBottom", "I", "copy", "getSortedDocValues", "LOrgApacheLuceneIndexLeafReaderContext;LNSString;", "LJavaIoIOException;", "getLeafComparator", "LOrgApacheLuceneIndexLeafReaderContext;", "setBottom", "setTopValue", "LOrgApacheLuceneUtilBytesRef;", "value", "compareTop", "compareValues", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;", "setScorer", "LOrgApacheLuceneSearchScorer;", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator<Lorg/apache/lucene/util/BytesRef;>;Lorg/apache/lucene/search/LeafFieldComparator;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_TermOrdValComparator = { "TermOrdValComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x9, 13, 16, 21, -1, -1, 22, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_TermOrdValComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_TermOrdValComparator_initWithInt_withNSString_(OrgApacheLuceneSearchFieldComparator_TermOrdValComparator *self, jint numHits, NSString *field) {
  OrgApacheLuceneSearchFieldComparator_TermOrdValComparator_initWithInt_withNSString_withBoolean_(self, numHits, field, false);
}

OrgApacheLuceneSearchFieldComparator_TermOrdValComparator *new_OrgApacheLuceneSearchFieldComparator_TermOrdValComparator_initWithInt_withNSString_(jint numHits, NSString *field) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_TermOrdValComparator, initWithInt_withNSString_, numHits, field)
}

OrgApacheLuceneSearchFieldComparator_TermOrdValComparator *create_OrgApacheLuceneSearchFieldComparator_TermOrdValComparator_initWithInt_withNSString_(jint numHits, NSString *field) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_TermOrdValComparator, initWithInt_withNSString_, numHits, field)
}

void OrgApacheLuceneSearchFieldComparator_TermOrdValComparator_initWithInt_withNSString_withBoolean_(OrgApacheLuceneSearchFieldComparator_TermOrdValComparator *self, jint numHits, NSString *field, jboolean sortMissingLast) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  self->currentReaderGen_ = -1;
  self->bottomSlot_ = -1;
  JreStrongAssignAndConsume(&self->ords_, [IOSIntArray newArrayWithLength:numHits]);
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:numHits type:OrgApacheLuceneUtilBytesRef_class_()]);
  JreStrongAssignAndConsume(&self->tempBRs_, [IOSObjectArray newArrayWithLength:numHits type:OrgApacheLuceneUtilBytesRefBuilder_class_()]);
  JreStrongAssignAndConsume(&self->readerGen_, [IOSIntArray newArrayWithLength:numHits]);
  JreStrongAssign(&self->field_, field);
  if (sortMissingLast) {
    self->missingSortCmp_ = 1;
    self->missingOrd_ = JavaLangInteger_MAX_VALUE;
  }
  else {
    self->missingSortCmp_ = -1;
    self->missingOrd_ = -1;
  }
}

OrgApacheLuceneSearchFieldComparator_TermOrdValComparator *new_OrgApacheLuceneSearchFieldComparator_TermOrdValComparator_initWithInt_withNSString_withBoolean_(jint numHits, NSString *field, jboolean sortMissingLast) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_TermOrdValComparator, initWithInt_withNSString_withBoolean_, numHits, field, sortMissingLast)
}

OrgApacheLuceneSearchFieldComparator_TermOrdValComparator *create_OrgApacheLuceneSearchFieldComparator_TermOrdValComparator_initWithInt_withNSString_withBoolean_(jint numHits, NSString *field, jboolean sortMissingLast) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_TermOrdValComparator, initWithInt_withNSString_withBoolean_, numHits, field, sortMissingLast)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_TermOrdValComparator)

@implementation OrgApacheLuceneSearchFieldComparator_TermValComparator

- (instancetype)initWithInt:(jint)numHits
               withNSString:(NSString *)field
                withBoolean:(jboolean)sortMissingLast {
  OrgApacheLuceneSearchFieldComparator_TermValComparator_initWithInt_withNSString_withBoolean_(self, numHits, field, sortMissingLast);
  return self;
}

- (jint)compareWithInt:(jint)slot1
               withInt:(jint)slot2 {
  OrgApacheLuceneUtilBytesRef *val1 = IOSObjectArray_Get(nil_chk(values_), slot1);
  OrgApacheLuceneUtilBytesRef *val2 = IOSObjectArray_Get(values_, slot2);
  return [self compareValuesWithId:val1 withId:val2];
}

- (jint)compareBottomWithInt:(jint)doc {
  OrgApacheLuceneUtilBytesRef *comparableBytes = OrgApacheLuceneSearchFieldComparator_TermValComparator_getComparableBytesWithInt_withOrgApacheLuceneUtilBytesRef_(self, doc, [((OrgApacheLuceneIndexBinaryDocValues *) nil_chk(docTerms_)) getWithInt:doc]);
  return [self compareValuesWithId:bottom_ withId:comparableBytes];
}

- (void)copy__WithInt:(jint)slot
              withInt:(jint)doc {
  OrgApacheLuceneUtilBytesRef *comparableBytes = OrgApacheLuceneSearchFieldComparator_TermValComparator_getComparableBytesWithInt_withOrgApacheLuceneUtilBytesRef_(self, doc, [((OrgApacheLuceneIndexBinaryDocValues *) nil_chk(docTerms_)) getWithInt:doc]);
  if (comparableBytes == nil) {
    IOSObjectArray_Set(nil_chk(values_), slot, nil);
  }
  else {
    if (IOSObjectArray_Get(nil_chk(tempBRs_), slot) == nil) {
      IOSObjectArray_SetAndConsume(tempBRs_, slot, new_OrgApacheLuceneUtilBytesRefBuilder_init());
    }
    [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(IOSObjectArray_Get(tempBRs_, slot))) copyBytesWithOrgApacheLuceneUtilBytesRef:comparableBytes];
    IOSObjectArray_Set(nil_chk(values_), slot, [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(IOSObjectArray_Get(tempBRs_, slot))) get]);
  }
}

- (OrgApacheLuceneIndexBinaryDocValues *)getBinaryDocValuesWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                                        withNSString:(NSString *)field {
  return OrgApacheLuceneIndexDocValues_getBinaryWithOrgApacheLuceneIndexLeafReader_withNSString_([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader], field);
}

- (id<OrgApacheLuceneUtilBits>)getDocsWithFieldWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                            withNSString:(NSString *)field {
  return OrgApacheLuceneIndexDocValues_getDocsWithFieldWithOrgApacheLuceneIndexLeafReader_withNSString_([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader], field);
}

- (jboolean)isNullWithInt:(jint)doc
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  return docsWithField_ != nil && [docsWithField_ getWithInt:doc] == false;
}

- (id<OrgApacheLuceneSearchLeafFieldComparator>)getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  JreStrongAssign(&docTerms_, [self getBinaryDocValuesWithOrgApacheLuceneIndexLeafReaderContext:context withNSString:field_]);
  JreStrongAssign(&docsWithField_, [self getDocsWithFieldWithOrgApacheLuceneIndexLeafReaderContext:context withNSString:field_]);
  if ([docsWithField_ isKindOfClass:[OrgApacheLuceneUtilBits_MatchAllBits class]]) {
    JreStrongAssign(&docsWithField_, nil);
  }
  return self;
}

- (void)setBottomWithInt:(jint)bottom {
  JreStrongAssign(&self->bottom_, IOSObjectArray_Get(nil_chk(values_), bottom));
}

- (void)setTopValueWithId:(OrgApacheLuceneUtilBytesRef *)value {
  JreStrongAssign(&topValue_, value);
}

- (OrgApacheLuceneUtilBytesRef *)valueWithInt:(jint)slot {
  return IOSObjectArray_Get(nil_chk(values_), slot);
}

- (jint)compareValuesWithId:(OrgApacheLuceneUtilBytesRef *)val1
                     withId:(OrgApacheLuceneUtilBytesRef *)val2 {
  if (val1 == nil) {
    if (val2 == nil) {
      return 0;
    }
    return missingSortCmp_;
  }
  else if (val2 == nil) {
    return -missingSortCmp_;
  }
  return [val1 compareToWithId:val2];
}

- (jint)compareTopWithInt:(jint)doc {
  OrgApacheLuceneUtilBytesRef *comparableBytes = OrgApacheLuceneSearchFieldComparator_TermValComparator_getComparableBytesWithInt_withOrgApacheLuceneUtilBytesRef_(self, doc, [((OrgApacheLuceneIndexBinaryDocValues *) nil_chk(docTerms_)) getWithInt:doc]);
  return [self compareValuesWithId:topValue_ withId:comparableBytes];
}

- (OrgApacheLuceneUtilBytesRef *)getComparableBytesWithInt:(jint)doc
                           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  return OrgApacheLuceneSearchFieldComparator_TermValComparator_getComparableBytesWithInt_withOrgApacheLuceneUtilBytesRef_(self, doc, term);
}

- (void)setScorerWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)scorer {
}

- (void)dealloc {
  RELEASE_(values_);
  RELEASE_(tempBRs_);
  RELEASE_(docTerms_);
  RELEASE_(docsWithField_);
  RELEASE_(field_);
  RELEASE_(bottom_);
  RELEASE_(topValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexBinaryDocValues;", 0x4, 6, 7, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBits;", 0x4, 9, 7, 8, -1, -1, -1 },
    { NULL, "Z", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchLeafFieldComparator;", 0x1, 12, 13, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x2, 21, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:withBoolean:);
  methods[1].selector = @selector(compareWithInt:withInt:);
  methods[2].selector = @selector(compareBottomWithInt:);
  methods[3].selector = @selector(copy__WithInt:withInt:);
  methods[4].selector = @selector(getBinaryDocValuesWithOrgApacheLuceneIndexLeafReaderContext:withNSString:);
  methods[5].selector = @selector(getDocsWithFieldWithOrgApacheLuceneIndexLeafReaderContext:withNSString:);
  methods[6].selector = @selector(isNullWithInt:withOrgApacheLuceneUtilBytesRef:);
  methods[7].selector = @selector(getLeafComparatorWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[8].selector = @selector(setBottomWithInt:);
  methods[9].selector = @selector(setTopValueWithId:);
  methods[10].selector = @selector(valueWithInt:);
  methods[11].selector = @selector(compareValuesWithId:withId:);
  methods[12].selector = @selector(compareTopWithInt:);
  methods[13].selector = @selector(getComparableBytesWithInt:withOrgApacheLuceneUtilBytesRef:);
  methods[14].selector = @selector(setScorerWithOrgApacheLuceneSearchScorer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "[LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tempBRs_", "[LOrgApacheLuceneUtilBytesRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "docTerms_", "LOrgApacheLuceneIndexBinaryDocValues;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docsWithField_", "LOrgApacheLuceneUtilBits;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bottom_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topValue_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "missingSortCmp_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;Z", "compare", "II", "compareBottom", "I", "copy", "getBinaryDocValues", "LOrgApacheLuceneIndexLeafReaderContext;LNSString;", "LJavaIoIOException;", "getDocsWithField", "isNull", "ILOrgApacheLuceneUtilBytesRef;", "getLeafComparator", "LOrgApacheLuceneIndexLeafReaderContext;", "setBottom", "setTopValue", "LOrgApacheLuceneUtilBytesRef;", "value", "compareValues", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;", "compareTop", "getComparableBytes", "setScorer", "LOrgApacheLuceneSearchScorer;", "LOrgApacheLuceneSearchFieldComparator;", "Lorg/apache/lucene/search/FieldComparator<Lorg/apache/lucene/util/BytesRef;>;Lorg/apache/lucene/search/LeafFieldComparator;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchFieldComparator_TermValComparator = { "TermValComparator", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x9, 15, 8, 24, -1, -1, 25, -1 };
  return &_OrgApacheLuceneSearchFieldComparator_TermValComparator;
}

@end

void OrgApacheLuceneSearchFieldComparator_TermValComparator_initWithInt_withNSString_withBoolean_(OrgApacheLuceneSearchFieldComparator_TermValComparator *self, jint numHits, NSString *field, jboolean sortMissingLast) {
  OrgApacheLuceneSearchFieldComparator_init(self);
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:numHits type:OrgApacheLuceneUtilBytesRef_class_()]);
  JreStrongAssignAndConsume(&self->tempBRs_, [IOSObjectArray newArrayWithLength:numHits type:OrgApacheLuceneUtilBytesRefBuilder_class_()]);
  JreStrongAssign(&self->field_, field);
  self->missingSortCmp_ = sortMissingLast ? 1 : -1;
}

OrgApacheLuceneSearchFieldComparator_TermValComparator *new_OrgApacheLuceneSearchFieldComparator_TermValComparator_initWithInt_withNSString_withBoolean_(jint numHits, NSString *field, jboolean sortMissingLast) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchFieldComparator_TermValComparator, initWithInt_withNSString_withBoolean_, numHits, field, sortMissingLast)
}

OrgApacheLuceneSearchFieldComparator_TermValComparator *create_OrgApacheLuceneSearchFieldComparator_TermValComparator_initWithInt_withNSString_withBoolean_(jint numHits, NSString *field, jboolean sortMissingLast) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchFieldComparator_TermValComparator, initWithInt_withNSString_withBoolean_, numHits, field, sortMissingLast)
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneSearchFieldComparator_TermValComparator_getComparableBytesWithInt_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneSearchFieldComparator_TermValComparator *self, jint doc, OrgApacheLuceneUtilBytesRef *term) {
  if (((OrgApacheLuceneUtilBytesRef *) nil_chk(term))->length_ == 0 && [self isNullWithInt:doc withOrgApacheLuceneUtilBytesRef:term]) {
    return nil;
  }
  return term;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchFieldComparator_TermValComparator)
