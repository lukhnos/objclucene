//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/DisjunctionMaxQuery.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/FilteredQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/payloads/PayloadSpanCollector.h"
#include "org/apache/lucene/search/payloads/PayloadSpanUtil.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/payloads/PayloadSpanUtil must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchPayloadsPayloadSpanUtil () {
 @public
  OrgApacheLuceneIndexIndexReaderContext *context_;
}

- (void)queryToSpanQueryWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                withJavaUtilCollection:(id<JavaUtilCollection>)payloads;

- (void)getPayloadsWithJavaUtilCollection:(id<JavaUtilCollection>)payloads
  withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)query;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPayloadsPayloadSpanUtil, context_, OrgApacheLuceneIndexIndexReaderContext *)

__attribute__((unused)) static void OrgApacheLuceneSearchPayloadsPayloadSpanUtil_queryToSpanQueryWithOrgApacheLuceneSearchQuery_withJavaUtilCollection_(OrgApacheLuceneSearchPayloadsPayloadSpanUtil *self, OrgApacheLuceneSearchQuery *query, id<JavaUtilCollection> payloads);

__attribute__((unused)) static void OrgApacheLuceneSearchPayloadsPayloadSpanUtil_getPayloadsWithJavaUtilCollection_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchPayloadsPayloadSpanUtil *self, id<JavaUtilCollection> payloads, OrgApacheLuceneSearchSpansSpanQuery *query);

@implementation OrgApacheLuceneSearchPayloadsPayloadSpanUtil

- (instancetype)initWithOrgApacheLuceneIndexIndexReaderContext:(OrgApacheLuceneIndexIndexReaderContext *)context {
  OrgApacheLuceneSearchPayloadsPayloadSpanUtil_initWithOrgApacheLuceneIndexIndexReaderContext_(self, context);
  return self;
}

- (id<JavaUtilCollection>)getPayloadsForQueryWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  id<JavaUtilCollection> payloads = create_JavaUtilArrayList_init();
  OrgApacheLuceneSearchPayloadsPayloadSpanUtil_queryToSpanQueryWithOrgApacheLuceneSearchQuery_withJavaUtilCollection_(self, query, payloads);
  return payloads;
}

- (void)queryToSpanQueryWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                withJavaUtilCollection:(id<JavaUtilCollection>)payloads {
  OrgApacheLuceneSearchPayloadsPayloadSpanUtil_queryToSpanQueryWithOrgApacheLuceneSearchQuery_withJavaUtilCollection_(self, query, payloads);
}

- (void)getPayloadsWithJavaUtilCollection:(id<JavaUtilCollection>)payloads
  withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)query {
  OrgApacheLuceneSearchPayloadsPayloadSpanUtil_getPayloadsWithJavaUtilCollection_withOrgApacheLuceneSearchSpansSpanQuery_(self, payloads, query);
}

- (void)dealloc {
  RELEASE_(context_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, 1, 2, 3, 4, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 3, 7, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 3, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexReaderContext:);
  methods[1].selector = @selector(getPayloadsForQueryWithOrgApacheLuceneSearchQuery:);
  methods[2].selector = @selector(queryToSpanQueryWithOrgApacheLuceneSearchQuery:withJavaUtilCollection:);
  methods[3].selector = @selector(getPayloadsWithJavaUtilCollection:withOrgApacheLuceneSearchSpansSpanQuery:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "context_", "LOrgApacheLuceneIndexIndexReaderContext;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexReaderContext;", "getPayloadsForQuery", "LOrgApacheLuceneSearchQuery;", "LJavaIoIOException;", "(Lorg/apache/lucene/search/Query;)Ljava/util/Collection<[B>;", "queryToSpanQuery", "LOrgApacheLuceneSearchQuery;LJavaUtilCollection;", "(Lorg/apache/lucene/search/Query;Ljava/util/Collection<[B>;)V", "getPayloads", "LJavaUtilCollection;LOrgApacheLuceneSearchSpansSpanQuery;", "(Ljava/util/Collection<[B>;Lorg/apache/lucene/search/spans/SpanQuery;)V" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchPayloadsPayloadSpanUtil = { "PayloadSpanUtil", "org.apache.lucene.search.payloads", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchPayloadsPayloadSpanUtil;
}

@end

void OrgApacheLuceneSearchPayloadsPayloadSpanUtil_initWithOrgApacheLuceneIndexIndexReaderContext_(OrgApacheLuceneSearchPayloadsPayloadSpanUtil *self, OrgApacheLuceneIndexIndexReaderContext *context) {
  NSObject_init(self);
  JreStrongAssign(&self->context_, context);
}

OrgApacheLuceneSearchPayloadsPayloadSpanUtil *new_OrgApacheLuceneSearchPayloadsPayloadSpanUtil_initWithOrgApacheLuceneIndexIndexReaderContext_(OrgApacheLuceneIndexIndexReaderContext *context) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchPayloadsPayloadSpanUtil, initWithOrgApacheLuceneIndexIndexReaderContext_, context)
}

OrgApacheLuceneSearchPayloadsPayloadSpanUtil *create_OrgApacheLuceneSearchPayloadsPayloadSpanUtil_initWithOrgApacheLuceneIndexIndexReaderContext_(OrgApacheLuceneIndexIndexReaderContext *context) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchPayloadsPayloadSpanUtil, initWithOrgApacheLuceneIndexIndexReaderContext_, context)
}

void OrgApacheLuceneSearchPayloadsPayloadSpanUtil_queryToSpanQueryWithOrgApacheLuceneSearchQuery_withJavaUtilCollection_(OrgApacheLuceneSearchPayloadsPayloadSpanUtil *self, OrgApacheLuceneSearchQuery *query, id<JavaUtilCollection> payloads) {
  if ([query isKindOfClass:[OrgApacheLuceneSearchBooleanQuery class]]) {
    for (OrgApacheLuceneSearchBooleanClause * __strong clause in nil_chk((OrgApacheLuceneSearchBooleanQuery *) query)) {
      if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(clause)) isProhibited]) {
        OrgApacheLuceneSearchPayloadsPayloadSpanUtil_queryToSpanQueryWithOrgApacheLuceneSearchQuery_withJavaUtilCollection_(self, [clause getQuery], payloads);
      }
    }
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
    IOSObjectArray *phraseQueryTerms = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(((OrgApacheLuceneSearchPhraseQuery *) query))) getTerms];
    IOSObjectArray *clauses = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(phraseQueryTerms))->size_ type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
    for (jint i = 0; i < phraseQueryTerms->size_; i++) {
      IOSObjectArray_SetAndConsume(clauses, i, new_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(IOSObjectArray_Get(phraseQueryTerms, i)));
    }
    jint slop = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(((OrgApacheLuceneSearchPhraseQuery *) query))) getSlop];
    jboolean inorder = false;
    if (slop == 0) {
      inorder = true;
    }
    OrgApacheLuceneSearchSpansSpanNearQuery *sp = create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(clauses, slop, inorder);
    [sp setBoostWithFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost]];
    OrgApacheLuceneSearchPayloadsPayloadSpanUtil_getPayloadsWithJavaUtilCollection_withOrgApacheLuceneSearchSpansSpanQuery_(self, payloads, sp);
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchTermQuery class]]) {
    OrgApacheLuceneSearchSpansSpanTermQuery *stq = create_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_([((OrgApacheLuceneSearchTermQuery *) nil_chk(((OrgApacheLuceneSearchTermQuery *) query))) getTerm]);
    [stq setBoostWithFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost]];
    OrgApacheLuceneSearchPayloadsPayloadSpanUtil_getPayloadsWithJavaUtilCollection_withOrgApacheLuceneSearchSpansSpanQuery_(self, payloads, stq);
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchSpansSpanQuery class]]) {
    OrgApacheLuceneSearchPayloadsPayloadSpanUtil_getPayloadsWithJavaUtilCollection_withOrgApacheLuceneSearchSpansSpanQuery_(self, payloads, (OrgApacheLuceneSearchSpansSpanQuery *) query);
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchFilteredQuery class]]) {
    OrgApacheLuceneSearchPayloadsPayloadSpanUtil_queryToSpanQueryWithOrgApacheLuceneSearchQuery_withJavaUtilCollection_(self, [((OrgApacheLuceneSearchFilteredQuery *) nil_chk(((OrgApacheLuceneSearchFilteredQuery *) query))) getQuery], payloads);
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchDisjunctionMaxQuery class]]) {
    for (id<JavaUtilIterator> iterator = JreRetainedLocalValue([((OrgApacheLuceneSearchDisjunctionMaxQuery *) nil_chk(((OrgApacheLuceneSearchDisjunctionMaxQuery *) query))) iterator]); [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
      OrgApacheLuceneSearchPayloadsPayloadSpanUtil_queryToSpanQueryWithOrgApacheLuceneSearchQuery_withJavaUtilCollection_(self, [iterator next], payloads);
    }
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchMultiPhraseQuery class]]) {
    OrgApacheLuceneSearchMultiPhraseQuery *mpq = (OrgApacheLuceneSearchMultiPhraseQuery *) query;
    id<JavaUtilList> termArrays = [((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(mpq)) getTermArrays];
    IOSIntArray *positions = [mpq getPositions];
    if (((IOSIntArray *) nil_chk(positions))->size_ > 0) {
      jint maxPosition = IOSIntArray_Get(positions, positions->size_ - 1);
      for (jint i = 0; i < positions->size_ - 1; ++i) {
        if (IOSIntArray_Get(positions, i) > maxPosition) {
          maxPosition = IOSIntArray_Get(positions, i);
        }
      }
      IOSObjectArray *disjunctLists = [IOSObjectArray arrayWithLength:maxPosition + 1 type:JavaUtilList_class_()];
      jint distinctPositions = 0;
      for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(termArrays)) size]; ++i) {
        IOSObjectArray *termArray = [termArrays getWithInt:i];
        id<JavaUtilList> disjuncts = IOSObjectArray_Get(disjunctLists, IOSIntArray_Get(positions, i));
        if (disjuncts == nil) {
          disjuncts = (IOSObjectArray_SetAndConsume(disjunctLists, IOSIntArray_Get(positions, i), new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(termArray))->size_)));
          ++distinctPositions;
        }
        {
          IOSObjectArray *a__ = termArray;
          OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            OrgApacheLuceneIndexTerm *term = *b__++;
            [disjuncts addWithId:create_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(term)];
          }
        }
      }
      jint positionGaps = 0;
      jint position = 0;
      IOSObjectArray *clauses = [IOSObjectArray arrayWithLength:distinctPositions type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
      for (jint i = 0; i < disjunctLists->size_; ++i) {
        id<JavaUtilList> disjuncts = IOSObjectArray_Get(disjunctLists, i);
        if (disjuncts != nil) {
          IOSObjectArray_SetAndConsume(clauses, position++, new_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_([disjuncts toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[disjuncts size] type:OrgApacheLuceneSearchSpansSpanQuery_class_()]]));
        }
        else {
          ++positionGaps;
        }
      }
      jint slop = [mpq getSlop];
      jboolean inorder = slop == 0;
      OrgApacheLuceneSearchSpansSpanNearQuery *sp = create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(clauses, slop + positionGaps, inorder);
      [sp setBoostWithFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost]];
      OrgApacheLuceneSearchPayloadsPayloadSpanUtil_getPayloadsWithJavaUtilCollection_withOrgApacheLuceneSearchSpansSpanQuery_(self, payloads, sp);
    }
  }
}

void OrgApacheLuceneSearchPayloadsPayloadSpanUtil_getPayloadsWithJavaUtilCollection_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchPayloadsPayloadSpanUtil *self, id<JavaUtilCollection> payloads, OrgApacheLuceneSearchSpansSpanQuery *query) {
  OrgApacheLuceneSearchIndexSearcher *searcher = create_OrgApacheLuceneSearchIndexSearcher_initWithOrgApacheLuceneIndexIndexReaderContext_(self->context_);
  [searcher setQueryCacheWithOrgApacheLuceneSearchQueryCache:nil];
  OrgApacheLuceneSearchSpansSpanWeight *w = (OrgApacheLuceneSearchSpansSpanWeight *) cast_chk([searcher createNormalizedWeightWithOrgApacheLuceneSearchQuery:query withBoolean:false], [OrgApacheLuceneSearchSpansSpanWeight class]);
  OrgApacheLuceneSearchPayloadsPayloadSpanCollector *collector = create_OrgApacheLuceneSearchPayloadsPayloadSpanCollector_init();
  for (OrgApacheLuceneIndexLeafReaderContext * __strong leafReaderContext in nil_chk([((OrgApacheLuceneIndexIndexReaderContext *) nil_chk(self->context_)) leaves])) {
    OrgApacheLuceneSearchSpansSpans *spans = [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(w)) getSpansWithOrgApacheLuceneIndexLeafReaderContext:leafReaderContext withOrgApacheLuceneSearchSpansSpanWeight_Postings:JreLoadEnum(OrgApacheLuceneSearchSpansSpanWeight_Postings, PAYLOADS)];
    if (spans != nil) {
      while ([spans nextDoc] != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
        while ([spans nextStartPosition] != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS) {
          [collector reset];
          [spans collectWithOrgApacheLuceneSearchSpansSpanCollector:collector];
          [((id<JavaUtilCollection>) nil_chk(payloads)) addAllWithJavaUtilCollection:[collector getPayloads]];
        }
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchPayloadsPayloadSpanUtil)
