//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/MultiPhraseQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Objects.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/ExactPhraseScorer.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/MatchNoDocsQuery.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/SloppyPhraseScorer.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/PriorityQueue.h"
#include "org/apache/lucene/util/ToStringUtils.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/MultiPhraseQuery must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneSearchMultiPhraseQuery () {
 @public
  NSString *field_;
  JavaUtilArrayList *termArrays_;
  JavaUtilArrayList *positions_;
  jint slop_;
}

- (jint)termArraysHashCode;

- (jboolean)termArraysEqualsWithJavaUtilList:(id<JavaUtilList>)termArrays1
                            withJavaUtilList:(id<JavaUtilList>)termArrays2;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery, termArrays_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery, positions_, JavaUtilArrayList *)

__attribute__((unused)) static jint OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(OrgApacheLuceneSearchMultiPhraseQuery *self);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchMultiPhraseQuery *self, id<JavaUtilList> termArrays1, id<JavaUtilList> termArrays2);

@interface OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight : OrgApacheLuceneSearchWeight {
 @public
  OrgApacheLuceneSearchMultiPhraseQuery *this$0_;
  OrgApacheLuceneSearchSimilaritiesSimilarity *similarity_;
  OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *stats_;
  id<JavaUtilMap> termContexts_;
  jboolean needsScores_;
}

- (instancetype)initWithOrgApacheLuceneSearchMultiPhraseQuery:(OrgApacheLuceneSearchMultiPhraseQuery *)outer$
                       withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                  withBoolean:(jboolean)needsScores;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

- (jfloat)getValueForNormalization;

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                               withInt:(jint)doc;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, similarity_, OrgApacheLuceneSearchSimilaritiesSimilarity *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, stats_, OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, termContexts_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *self, OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores);

__attribute__((unused)) static OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *new_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *create_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight)

@interface OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue () {
 @public
  jint arraySize_;
  jint index_;
  jint size_;
  IOSIntArray *array_;
}

- (void)growArray;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue, array_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_growArray(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *self);

@implementation OrgApacheLuceneSearchMultiPhraseQuery

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchMultiPhraseQuery_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setSlopWithInt:(jint)s {
  if (s < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"slop value cannot be negative");
  }
  slop_ = s;
}

- (jint)getSlop {
  return slop_;
}

- (void)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [self addWithOrgApacheLuceneIndexTermArray:[IOSObjectArray arrayWithObjects:(id[]){ term } count:1 type:OrgApacheLuceneIndexTerm_class_()]];
}

- (void)addWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  jint position = 0;
  if ([((JavaUtilArrayList *) nil_chk(positions_)) size] > 0) position = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(positions_)) getWithInt:[positions_ size] - 1])) intValue] + 1;
  [self addWithOrgApacheLuceneIndexTermArray:terms withInt:position];
}

- (void)addWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms
                                     withInt:(jint)position {
  JavaUtilObjects_requireNonNullWithId_withNSString_(terms, @"Term array must not be null");
  if ([((JavaUtilArrayList *) nil_chk(termArrays_)) size] == 0) JreStrongAssign(&field_, [((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(nil_chk(terms), 0))) field]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; i++) {
    if (![((NSString *) nil_chk([((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, i))) field])) isEqual:field_]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$@", @"All phrase terms must be in the same field (", field_, @"): ", IOSObjectArray_Get(terms, i)));
    }
  }
  [((JavaUtilArrayList *) nil_chk(termArrays_)) addWithId:terms];
  [((JavaUtilArrayList *) nil_chk(positions_)) addWithId:JavaLangInteger_valueOfWithInt_(position)];
}

- (id<JavaUtilList>)getTermArrays {
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(termArrays_);
}

- (IOSIntArray *)getPositions {
  IOSIntArray *result = [IOSIntArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(positions_)) size]];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(positions_)) size]; i++) *IOSIntArray_GetRef(result, i) = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(positions_)) getWithInt:i])) intValue];
  return result;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if ([((JavaUtilArrayList *) nil_chk(termArrays_)) isEmpty]) {
    OrgApacheLuceneSearchMatchNoDocsQuery *rewritten = create_OrgApacheLuceneSearchMatchNoDocsQuery_init();
    [rewritten setBoostWithFloat:[self getBoost]];
    return rewritten;
  }
  else if ([((JavaUtilArrayList *) nil_chk(termArrays_)) size] == 1) {
    IOSObjectArray *terms = [((JavaUtilArrayList *) nil_chk(termArrays_)) getWithInt:0];
    OrgApacheLuceneSearchBooleanQuery_Builder *builder = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
    [builder setDisableCoordWithBoolean:true];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; i++) {
      [builder addWithOrgApacheLuceneSearchQuery:create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(IOSObjectArray_Get(terms, i)) withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
    }
    OrgApacheLuceneSearchBooleanQuery *boq = JreRetainedLocalValue([builder build]);
    [((OrgApacheLuceneSearchBooleanQuery *) nil_chk(boq)) setBoostWithFloat:[self getBoost]];
    return boq;
  }
  else {
    return self;
  }
}

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores {
  return create_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, searcher, needsScores);
}

- (NSString *)toStringWithNSString:(NSString *)f {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  if (field_ == nil || ![field_ isEqual:f]) {
    [buffer appendWithNSString:field_];
    [buffer appendWithNSString:@":"];
  }
  [buffer appendWithNSString:@"\""];
  jint k = 0;
  id<JavaUtilIterator> i = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(termArrays_)) iterator]);
  jint lastPos = -1;
  jboolean first = true;
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    IOSObjectArray *terms = [i next];
    jint position = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(positions_)) getWithInt:k])) intValue];
    if (first) {
      first = false;
    }
    else {
      [buffer appendWithNSString:@" "];
      for (jint j = 1; j < (position - lastPos); j++) {
        [buffer appendWithNSString:@"? "];
      }
    }
    if (((IOSObjectArray *) nil_chk(terms))->size_ > 1) {
      [buffer appendWithNSString:@"("];
      for (jint j = 0; j < terms->size_; j++) {
        [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, j))) text]];
        if (j < terms->size_ - 1) [buffer appendWithNSString:@" "];
      }
      [buffer appendWithNSString:@")"];
    }
    else {
      [buffer appendWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(IOSObjectArray_Get(terms, 0))) text]];
    }
    lastPos = position;
    ++k;
  }
  [buffer appendWithNSString:@"\""];
  if (slop_ != 0) {
    [buffer appendWithNSString:@"~"];
    [buffer appendWithInt:slop_];
  }
  [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [buffer description];
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[OrgApacheLuceneSearchMultiPhraseQuery class]])) return false;
  OrgApacheLuceneSearchMultiPhraseQuery *other = (OrgApacheLuceneSearchMultiPhraseQuery *) cast_chk(o, [OrgApacheLuceneSearchMultiPhraseQuery class]);
  return [super isEqual:o] && self->slop_ == ((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(other))->slop_ && OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(self, self->termArrays_, other->termArrays_) && [((JavaUtilArrayList *) nil_chk(self->positions_)) isEqual:other->positions_];
}

- (NSUInteger)hash {
  return ((jint) [super hash]) ^ slop_ ^ OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(self) ^ ((jint) [((JavaUtilArrayList *) nil_chk(positions_)) hash]);
}

- (jint)termArraysHashCode {
  return OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(self);
}

- (jboolean)termArraysEqualsWithJavaUtilList:(id<JavaUtilList>)termArrays1
                            withJavaUtilList:(id<JavaUtilList>)termArrays2 {
  return OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(self, termArrays1, termArrays2);
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(termArrays_);
  RELEASE_(positions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchWeight;", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 17, 18, -1, 19, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setSlopWithInt:);
  methods[2].selector = @selector(getSlop);
  methods[3].selector = @selector(addWithOrgApacheLuceneIndexTerm:);
  methods[4].selector = @selector(addWithOrgApacheLuceneIndexTermArray:);
  methods[5].selector = @selector(addWithOrgApacheLuceneIndexTermArray:withInt:);
  methods[6].selector = @selector(getTermArrays);
  methods[7].selector = @selector(getPositions);
  methods[8].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[9].selector = @selector(createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  methods[10].selector = @selector(toStringWithNSString:);
  methods[11].selector = @selector(isEqual:);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(termArraysHashCode);
  methods[14].selector = @selector(termArraysEqualsWithJavaUtilList:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termArrays_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 20, -1 },
    { "positions_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "slop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setSlop", "I", "add", "LOrgApacheLuceneIndexTerm;", "[LOrgApacheLuceneIndexTerm;", "[LOrgApacheLuceneIndexTerm;I", "()Ljava/util/List<[Lorg/apache/lucene/index/Term;>;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "createWeight", "LOrgApacheLuceneSearchIndexSearcher;Z", "LJavaIoIOException;", "toString", "LNSString;", "equals", "LNSObject;", "hashCode", "termArraysEquals", "LJavaUtilList;LJavaUtilList;", "(Ljava/util/List<[Lorg/apache/lucene/index/Term;>;Ljava/util/List<[Lorg/apache/lucene/index/Term;>;)Z", "Ljava/util/ArrayList<[Lorg/apache/lucene/index/Term;>;", "Ljava/util/ArrayList<Ljava/lang/Integer;>;", "LOrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight;LOrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery = { "MultiPhraseQuery", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 15, 4, -1, 22, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMultiPhraseQuery;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_init(OrgApacheLuceneSearchMultiPhraseQuery *self) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssignAndConsume(&self->termArrays_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->positions_, new_JavaUtilArrayList_init());
  self->slop_ = 0;
}

OrgApacheLuceneSearchMultiPhraseQuery *new_OrgApacheLuceneSearchMultiPhraseQuery_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiPhraseQuery, init)
}

OrgApacheLuceneSearchMultiPhraseQuery *create_OrgApacheLuceneSearchMultiPhraseQuery_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiPhraseQuery, init)
}

jint OrgApacheLuceneSearchMultiPhraseQuery_termArraysHashCode(OrgApacheLuceneSearchMultiPhraseQuery *self) {
  jint hashCode = 1;
  for (IOSObjectArray * __strong termArray in nil_chk(self->termArrays_)) {
    hashCode = 31 * hashCode + (termArray == nil ? 0 : JavaUtilArrays_hashCodeWithNSObjectArray_(termArray));
  }
  return hashCode;
}

jboolean OrgApacheLuceneSearchMultiPhraseQuery_termArraysEqualsWithJavaUtilList_withJavaUtilList_(OrgApacheLuceneSearchMultiPhraseQuery *self, id<JavaUtilList> termArrays1, id<JavaUtilList> termArrays2) {
  if ([((id<JavaUtilList>) nil_chk(termArrays1)) size] != [((id<JavaUtilList>) nil_chk(termArrays2)) size]) {
    return false;
  }
  id<JavaUtilListIterator> iterator1 = JreRetainedLocalValue([termArrays1 listIterator]);
  id<JavaUtilListIterator> iterator2 = JreRetainedLocalValue([termArrays2 listIterator]);
  while ([((id<JavaUtilListIterator>) nil_chk(iterator1)) hasNext]) {
    IOSObjectArray *termArray1 = [iterator1 next];
    IOSObjectArray *termArray2 = [((id<JavaUtilListIterator>) nil_chk(iterator2)) next];
    if (!(termArray1 == nil ? termArray2 == nil : JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(termArray1, termArray2))) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery)

@implementation OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight

- (instancetype)initWithOrgApacheLuceneSearchMultiPhraseQuery:(OrgApacheLuceneSearchMultiPhraseQuery *)outer$
                       withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                  withBoolean:(jboolean)needsScores {
  OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(self, outer$, searcher, needsScores);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  for (IOSObjectArray * __strong arr in nil_chk(this$0_->termArrays_)) {
    {
      IOSObjectArray *a__ = arr;
      OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        [((id<JavaUtilSet>) nil_chk(terms)) addWithId:term];
      }
    }
  }
}

- (jfloat)getValueForNormalization {
  return [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) getValueForNormalization];
}

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost {
  [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *) nil_chk(stats_)) normalizeWithFloat:queryNorm withFloat:topLevelBoost];
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  JreAssert(![((JavaUtilArrayList *) nil_chk(this$0_->termArrays_)) isEmpty], @"org/apache/lucene/search/MultiPhraseQuery.java:176 condition failed: assert !termArrays.isEmpty();");
  OrgApacheLuceneIndexLeafReader *reader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader];
  IOSObjectArray *postingsFreqs = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(this$0_->termArrays_)) size] type:OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_class_()];
  OrgApacheLuceneIndexTerms *fieldTerms = [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) termsWithNSString:this$0_->field_];
  if (fieldTerms == nil) {
    return nil;
  }
  if ([fieldTerms hasPositions] == false) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$@C", @"field \"", this$0_->field_, @"\" was indexed without position data; cannot run MultiPhraseQuery (phrase=", [self getQuery], ')'));
  }
  OrgApacheLuceneIndexTermsEnum *termsEnum = [fieldTerms iterator];
  for (jint pos = 0; pos < postingsFreqs->size_; pos++) {
    IOSObjectArray *terms = [((JavaUtilArrayList *) nil_chk(this$0_->termArrays_)) getWithInt:pos];
    id<JavaUtilList> postings = create_JavaUtilArrayList_init();
    {
      IOSObjectArray *a__ = terms;
      OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        OrgApacheLuceneIndexTermState *termState = JreRetainedLocalValue([((OrgApacheLuceneIndexTermContext *) nil_chk([((id<JavaUtilMap>) nil_chk(termContexts_)) getWithId:term])) getWithInt:context->ord_]);
        if (termState != nil) {
          [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekExactWithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneIndexTerm *) nil_chk(term)) bytes] withOrgApacheLuceneIndexTermState:termState];
          [postings addWithId:[termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:nil withInt:OrgApacheLuceneIndexPostingsEnum_POSITIONS]];
        }
      }
    }
    if ([postings isEmpty]) {
      return nil;
    }
    OrgApacheLuceneIndexPostingsEnum *postingsEnum;
    if ([postings size] == 1) {
      postingsEnum = [postings getWithInt:0];
    }
    else {
      postingsEnum = create_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(postings);
    }
    IOSObjectArray_SetAndConsume(postingsFreqs, pos, new_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(postingsEnum, [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(this$0_->positions_)) getWithInt:pos])) intValue], terms));
  }
  if (this$0_->slop_ == 0) {
    OrgApacheLuceneUtilArrayUtil_timSortWithJavaLangComparableArray_(postingsFreqs);
  }
  if (this$0_->slop_ == 0) {
    return create_OrgApacheLuceneSearchExactPhraseScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(self, postingsFreqs, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context], needsScores_);
  }
  else {
    return create_OrgApacheLuceneSearchSloppyPhraseScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(self, postingsFreqs, this$0_->slop_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context], needsScores_);
  }
}

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                               withInt:(jint)doc {
  OrgApacheLuceneSearchScorer *scorer = JreRetainedLocalValue([self scorerWithOrgApacheLuceneIndexLeafReaderContext:context]);
  if (scorer != nil) {
    jint newDoc = [scorer advanceWithInt:doc];
    if (newDoc == doc) {
      jfloat freq = this$0_->slop_ == 0 ? [scorer freq] : [((OrgApacheLuceneSearchSloppyPhraseScorer *) cast_chk(scorer, [OrgApacheLuceneSearchSloppyPhraseScorer class])) sloppyFreq];
      OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer = JreRetainedLocalValue([((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:stats_ withOrgApacheLuceneIndexLeafReaderContext:context]);
      OrgApacheLuceneSearchExplanation *freqExplanation = OrgApacheLuceneSearchExplanation_matchWithFloat_withNSString_withOrgApacheLuceneSearchExplanationArray_(freq, JreStrcat("$F", @"phraseFreq=", freq), [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchExplanation_class_()]);
      OrgApacheLuceneSearchExplanation *scoreExplanation = JreRetainedLocalValue([((OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *) nil_chk(docScorer)) explainWithInt:doc withOrgApacheLuceneSearchExplanation:freqExplanation]);
      return OrgApacheLuceneSearchExplanation_matchWithFloat_withNSString_withOrgApacheLuceneSearchExplanationArray_([((OrgApacheLuceneSearchExplanation *) nil_chk(scoreExplanation)) getValue], JreStrcat("$@$I$$$", @"weight(", [self getQuery], @" in ", doc, @") [", [[similarity_ java_getClass] getSimpleName], @"], result of:"), [IOSObjectArray arrayWithObjects:(id[]){ scoreExplanation } count:1 type:OrgApacheLuceneSearchExplanation_class_()]);
    }
  }
  return OrgApacheLuceneSearchExplanation_noMatchWithNSString_withOrgApacheLuceneSearchExplanationArray_(@"no matching term", [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchExplanation_class_()]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(similarity_);
  RELEASE_(stats_);
  RELEASE_(termContexts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchScorer;", 0x1, 7, 8, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchExplanation;", 0x1, 9, 10, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchMultiPhraseQuery:withOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  methods[1].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[2].selector = @selector(getValueForNormalization);
  methods[3].selector = @selector(normalizeWithFloat:withFloat:);
  methods[4].selector = @selector(scorerWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[5].selector = @selector(explainWithOrgApacheLuceneIndexLeafReaderContext:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchMultiPhraseQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilaritiesSimilarity;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stats_", "LOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "termContexts_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "needsScores_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchMultiPhraseQuery;LOrgApacheLuceneSearchIndexSearcher;Z", "LJavaIoIOException;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "normalize", "FF", "scorer", "LOrgApacheLuceneIndexLeafReaderContext;", "explain", "LOrgApacheLuceneIndexLeafReaderContext;I", "Ljava/util/Map<Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;>;", "LOrgApacheLuceneSearchMultiPhraseQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight = { "MultiPhraseWeight", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x2, 6, 5, 12, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *self, OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchWeight_initWithOrgApacheLuceneSearchQuery_(self, outer$);
  JreStrongAssignAndConsume(&self->termContexts_, new_JavaUtilHashMap_init());
  self->needsScores_ = needsScores;
  JreStrongAssign(&self->similarity_, [((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher)) getSimilarityWithBoolean:needsScores]);
  OrgApacheLuceneIndexIndexReaderContext *context = [searcher getTopReaderContext];
  JavaUtilArrayList *allTermStats = create_JavaUtilArrayList_init();
  for (IOSObjectArray * __strong terms in nil_chk(outer$->termArrays_)) {
    {
      IOSObjectArray *a__ = terms;
      OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexTerm *term = *b__++;
        OrgApacheLuceneIndexTermContext *termContext = JreRetainedLocalValue([self->termContexts_ getWithId:term]);
        if (termContext == nil) {
          termContext = OrgApacheLuceneIndexTermContext_buildWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTerm_(context, term);
          [self->termContexts_ putWithId:term withId:termContext];
        }
        [allTermStats addWithId:[searcher termStatisticsWithOrgApacheLuceneIndexTerm:term withOrgApacheLuceneIndexTermContext:termContext]];
      }
    }
  }
  JreStrongAssign(&self->stats_, [((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(self->similarity_)) computeWeightWithFloat:[outer$ getBoost] withOrgApacheLuceneSearchCollectionStatistics:[searcher collectionStatisticsWithNSString:outer$->field_] withOrgApacheLuceneSearchTermStatisticsArray:[allTermStats toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[allTermStats size] type:OrgApacheLuceneSearchTermStatistics_class_()]]]);
}

OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *new_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_, outer$, searcher, needsScores)
}

OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight *create_OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight_initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_(OrgApacheLuceneSearchMultiPhraseQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, jboolean needsScores) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight, initWithOrgApacheLuceneSearchMultiPhraseQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_, outer$, searcher, needsScores)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery_MultiPhraseWeight)

@implementation OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)subs {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(self, subs);
  return self;
}

- (jint)freq {
  jint doc = [self docID];
  if (doc != posQueueDoc_) {
    [((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *) nil_chk(posQueue_)) clear];
    {
      IOSObjectArray *a__ = subs_;
      OrgApacheLuceneIndexPostingsEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexPostingsEnum * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexPostingsEnum *sub = *b__++;
        if ([((OrgApacheLuceneIndexPostingsEnum *) nil_chk(sub)) docID] == doc) {
          jint freq = [sub freq];
          for (jint i = 0; i < freq; i++) {
            [posQueue_ addWithInt:[sub nextPosition]];
          }
        }
      }
    }
    [posQueue_ sort];
    posQueueDoc_ = doc;
  }
  return [((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *) nil_chk(posQueue_)) size];
}

- (jint)nextPosition {
  return [((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *) nil_chk(posQueue_)) next];
}

- (jint)docID {
  return [((OrgApacheLuceneIndexPostingsEnum *) nil_chk([((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *) nil_chk(docsQueue_)) top])) docID];
}

- (jint)nextDoc {
  OrgApacheLuceneIndexPostingsEnum *top = JreRetainedLocalValue([((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *) nil_chk(docsQueue_)) top]);
  jint doc = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) docID];
  do {
    [top nextDoc];
    top = [docsQueue_ updateTop];
  }
  while ([((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) docID] == doc);
  return [top docID];
}

- (jint)advanceWithInt:(jint)target {
  OrgApacheLuceneIndexPostingsEnum *top = JreRetainedLocalValue([((OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *) nil_chk(docsQueue_)) top]);
  do {
    [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) advanceWithInt:target];
    top = [docsQueue_ updateTop];
  }
  while ([((OrgApacheLuceneIndexPostingsEnum *) nil_chk(top)) docID] < target);
  return [top docID];
}

- (jlong)cost {
  return cost_;
}

- (jint)startOffset {
  return -1;
}

- (jint)endOffset {
  return -1;
}

- (OrgApacheLuceneUtilBytesRef *)getPayload {
  return nil;
}

- (void)dealloc {
  RELEASE_(docsQueue_);
  RELEASE_(posQueue_);
  RELEASE_(subs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilCollection:);
  methods[1].selector = @selector(freq);
  methods[2].selector = @selector(nextPosition);
  methods[3].selector = @selector(docID);
  methods[4].selector = @selector(nextDoc);
  methods[5].selector = @selector(advanceWithInt:);
  methods[6].selector = @selector(cost);
  methods[7].selector = @selector(startOffset);
  methods[8].selector = @selector(endOffset);
  methods[9].selector = @selector(getPayload);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docsQueue_", "LOrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "cost_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "posQueue_", "LOrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "posQueueDoc_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subs_", "[LOrgApacheLuceneIndexPostingsEnum;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;", "(Ljava/util/Collection<Lorg/apache/lucene/index/PostingsEnum;>;)V", "LJavaIoIOException;", "advance", "I", "LOrgApacheLuceneSearchMultiPhraseQuery;", "LOrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue;LOrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum = { "UnionPostingsEnum", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x8, 10, 5, 5, 6, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum *self, id<JavaUtilCollection> subs) {
  OrgApacheLuceneIndexPostingsEnum_init(self);
  JreStrongAssignAndConsume(&self->posQueue_, new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init());
  self->posQueueDoc_ = -2;
  JreStrongAssignAndConsume(&self->docsQueue_, new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_([((id<JavaUtilCollection>) nil_chk(subs)) size]));
  jlong cost = 0;
  for (OrgApacheLuceneIndexPostingsEnum * __strong sub in subs) {
    [self->docsQueue_ addWithId:sub];
    cost += [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(sub)) cost];
  }
  self->cost_ = cost;
  JreStrongAssign(&self->subs_, [subs toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[subs size] type:OrgApacheLuceneIndexPostingsEnum_class_()]]);
}

OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum *new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(id<JavaUtilCollection> subs) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum, initWithJavaUtilCollection_, subs)
}

OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum *create_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_initWithJavaUtilCollection_(id<JavaUtilCollection> subs) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum, initWithJavaUtilCollection_, subs)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum)

@implementation OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_(self, size);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneIndexPostingsEnum *)a
                    withId:(OrgApacheLuceneIndexPostingsEnum *)b {
  return [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(a)) docID] < [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(b)) docID];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(lessThanWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "lessThan", "LOrgApacheLuceneIndexPostingsEnum;LOrgApacheLuceneIndexPostingsEnum;", "LOrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum;", "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/index/PostingsEnum;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue = { "DocsQueue", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x8, 2, 0, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *self, jint size) {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_(self, size);
}

OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue, initWithInt_, size)
}

OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue *create_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue, initWithInt_, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_DocsQueue)

@implementation OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithInt:(jint)i {
  if (size_ == arraySize_) OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_growArray(self);
  *IOSIntArray_GetRef(nil_chk(array_), size_++) = i;
}

- (jint)next {
  return IOSIntArray_Get(nil_chk(array_), index_++);
}

- (void)sort {
  JavaUtilArrays_sortWithIntArray_withInt_withInt_(array_, index_, size_);
}

- (void)clear {
  index_ = 0;
  size_ = 0;
}

- (jint)size {
  return size_;
}

- (void)growArray {
  OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_growArray(self);
}

- (void)dealloc {
  RELEASE_(array_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithInt:);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(sort);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(size);
  methods[6].selector = @selector(growArray);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "arraySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "array_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "I", "LOrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue = { "PositionsQueue", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x8, 7, 4, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue;
}

@end

void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *self) {
  NSObject_init(self);
  self->arraySize_ = 16;
  self->index_ = 0;
  self->size_ = 0;
  JreStrongAssignAndConsume(&self->array_, [IOSIntArray newArrayWithLength:self->arraySize_]);
}

OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *new_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue, init)
}

OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *create_OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue, init)
}

void OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue_growArray(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue *self) {
  IOSIntArray *newArray = [IOSIntArray arrayWithLength:self->arraySize_ * 2];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->array_, 0, newArray, 0, self->arraySize_);
  JreStrongAssign(&self->array_, newArray);
  self->arraySize_ *= 2;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchMultiPhraseQuery_UnionPostingsEnum_PositionsQueue)
