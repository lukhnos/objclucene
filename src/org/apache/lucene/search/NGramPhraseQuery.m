//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/NGramPhraseQuery.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/NGramPhraseQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/lukhnos/portmobile/util/Objects.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/NGramPhraseQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchNGramPhraseQuery () {
 @public
  jint n_;
  OrgApacheLuceneSearchPhraseQuery *phraseQuery_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchNGramPhraseQuery, phraseQuery_, OrgApacheLuceneSearchPhraseQuery *)

@implementation OrgApacheLuceneSearchNGramPhraseQuery

- (instancetype)initWithInt:(jint)n
withOrgApacheLuceneSearchPhraseQuery:(OrgApacheLuceneSearchPhraseQuery *)query {
  OrgApacheLuceneSearchNGramPhraseQuery_initWithInt_withOrgApacheLuceneSearchPhraseQuery_(self, n, query);
  return self;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  IOSObjectArray *terms = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery_)) getTerms];
  IOSIntArray *positions = [phraseQuery_ getPositions];
  jboolean isOptimizable = [phraseQuery_ getSlop] == 0 && n_ >= 2 && ((IOSObjectArray *) nil_chk(terms))->size_ >= 3;
  if (isOptimizable) {
    for (jint i = 1; i < ((IOSIntArray *) nil_chk(positions))->size_; ++i) {
      if (IOSIntArray_Get(positions, i) != IOSIntArray_Get(positions, i - 1) + 1) {
        isOptimizable = false;
        break;
      }
    }
  }
  if (isOptimizable == false) {
    return [phraseQuery_ rewriteWithOrgApacheLuceneIndexIndexReader:reader];
  }
  OrgApacheLuceneSearchPhraseQuery_Builder *builder = create_OrgApacheLuceneSearchPhraseQuery_Builder_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; ++i) {
    if (JreIntMod(i, n_) == 0 || i == terms->size_ - 1) {
      [builder addWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(terms, i) withInt:i];
    }
  }
  OrgApacheLuceneSearchPhraseQuery *rewritten = JreRetainedLocalValue([builder build]);
  [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(rewritten)) setBoostWithFloat:[phraseQuery_ getBoost]];
  return rewritten;
}

- (jboolean)isEqual:(id)o {
  if ([super isEqual:o] == false) {
    return false;
  }
  OrgApacheLuceneSearchNGramPhraseQuery *other = (OrgApacheLuceneSearchNGramPhraseQuery *) cast_chk(o, [OrgApacheLuceneSearchNGramPhraseQuery class]);
  return n_ == ((OrgApacheLuceneSearchNGramPhraseQuery *) nil_chk(other))->n_ && [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery_)) isEqual:other->phraseQuery_];
}

- (NSUInteger)hash {
  jint h = ((jint) [super hash]);
  h = 31 * h + ((jint) [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery_)) hash]);
  h = 31 * h + n_;
  return h;
}

- (IOSObjectArray *)getTerms {
  return [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery_)) getTerms];
}

- (IOSIntArray *)getPositions {
  return [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery_)) getPositions];
}

- (jfloat)getBoost {
  return [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery_)) getBoost];
}

- (void)setBoostWithFloat:(jfloat)b {
  [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery_)) setBoostWithFloat:b];
}

- (NSString *)toStringWithNSString:(NSString *)field {
  return [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery_)) toStringWithNSString:field];
}

- (void)dealloc {
  RELEASE_(phraseQuery_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexTerm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgApacheLuceneSearchPhraseQuery:);
  methods[1].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(getTerms);
  methods[5].selector = @selector(getPositions);
  methods[6].selector = @selector(getBoost);
  methods[7].selector = @selector(setBoostWithFloat:);
  methods[8].selector = @selector(toStringWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "n_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "phraseQuery_", "LOrgApacheLuceneSearchPhraseQuery;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgApacheLuceneSearchPhraseQuery;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "equals", "LNSObject;", "hashCode", "setBoost", "F", "toString", "LNSString;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchNGramPhraseQuery = { "NGramPhraseQuery", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchNGramPhraseQuery;
}

@end

void OrgApacheLuceneSearchNGramPhraseQuery_initWithInt_withOrgApacheLuceneSearchPhraseQuery_(OrgApacheLuceneSearchNGramPhraseQuery *self, jint n, OrgApacheLuceneSearchPhraseQuery *query) {
  OrgApacheLuceneSearchQuery_init(self);
  self->n_ = n;
  JreStrongAssign(&self->phraseQuery_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(query));
}

OrgApacheLuceneSearchNGramPhraseQuery *new_OrgApacheLuceneSearchNGramPhraseQuery_initWithInt_withOrgApacheLuceneSearchPhraseQuery_(jint n, OrgApacheLuceneSearchPhraseQuery *query) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchNGramPhraseQuery, initWithInt_withOrgApacheLuceneSearchPhraseQuery_, n, query)
}

OrgApacheLuceneSearchNGramPhraseQuery *create_OrgApacheLuceneSearchNGramPhraseQuery_initWithInt_withOrgApacheLuceneSearchPhraseQuery_(jint n, OrgApacheLuceneSearchPhraseQuery *query) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchNGramPhraseQuery, initWithInt_withOrgApacheLuceneSearchPhraseQuery_, n, query)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchNGramPhraseQuery)
