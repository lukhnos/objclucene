//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/ConstantScoreWeight.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/ConstantScoreWeight.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/Weight.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/ConstantScoreWeight must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchConstantScoreWeight () {
 @public
  jfloat queryNorm_;
  jfloat queryWeight_;
}

@end

@implementation OrgApacheLuceneSearchConstantScoreWeight

- (instancetype)initWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  OrgApacheLuceneSearchConstantScoreWeight_initWithOrgApacheLuceneSearchQuery_(self, query);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
}

- (jfloat)getValueForNormalization {
  return queryWeight_ * queryWeight_;
}

- (void)normalizeWithFloat:(jfloat)norm
                 withFloat:(jfloat)topLevelBoost {
  queryNorm_ = norm * topLevelBoost;
  JreTimesAssignFloatF(&queryWeight_, queryNorm_);
}

- (jfloat)score {
  return queryWeight_;
}

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                               withInt:(jint)doc {
  OrgApacheLuceneSearchScorer *s = [self scorerWithOrgApacheLuceneIndexLeafReaderContext:context];
  jboolean exists;
  if (s == nil) {
    exists = false;
  }
  else {
    OrgApacheLuceneSearchTwoPhaseIterator *twoPhase = [s asTwoPhaseIterator];
    if (twoPhase == nil) {
      exists = ([s advanceWithInt:doc] == doc);
    }
    else {
      exists = ([((OrgApacheLuceneSearchDocIdSetIterator *) nil_chk([twoPhase approximation])) advanceWithInt:doc] == doc && [twoPhase matches]);
    }
  }
  if (exists) {
    return OrgApacheLuceneSearchExplanation_matchWithFloat_withNSString_withOrgApacheLuceneSearchExplanationArray_(queryWeight_, JreStrcat("$$", [((OrgApacheLuceneSearchQuery *) nil_chk([self getQuery])) description], @", product of:"), [IOSObjectArray arrayWithObjects:(id[]){ OrgApacheLuceneSearchExplanation_matchWithFloat_withNSString_withOrgApacheLuceneSearchExplanationArray_([((OrgApacheLuceneSearchQuery *) nil_chk([self getQuery])) getBoost], @"boost", [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchExplanation_class_()]), OrgApacheLuceneSearchExplanation_matchWithFloat_withNSString_withOrgApacheLuceneSearchExplanationArray_(queryNorm_, @"queryNorm", [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchExplanation_class_()]) } count:2 type:OrgApacheLuceneSearchExplanation_class_()]);
  }
  else {
    return OrgApacheLuceneSearchExplanation_noMatchWithNSString_withOrgApacheLuceneSearchExplanationArray_(JreStrcat("$$I", [((OrgApacheLuceneSearchQuery *) nil_chk([self getQuery])) description], @" doesn't match id ", doc), [IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchExplanation_class_()]);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "F", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x14, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchExplanation;", 0x11, 7, 8, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchQuery:);
  methods[1].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[2].selector = @selector(getValueForNormalization);
  methods[3].selector = @selector(normalizeWithFloat:withFloat:);
  methods[4].selector = @selector(score);
  methods[5].selector = @selector(explainWithOrgApacheLuceneIndexLeafReaderContext:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "queryNorm_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "queryWeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchQuery;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "LJavaIoIOException;", "normalize", "FF", "explain", "LOrgApacheLuceneIndexLeafReaderContext;I" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchConstantScoreWeight = { "ConstantScoreWeight", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x401, 6, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchConstantScoreWeight;
}

@end

void OrgApacheLuceneSearchConstantScoreWeight_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchConstantScoreWeight *self, OrgApacheLuceneSearchQuery *query) {
  OrgApacheLuceneSearchWeight_initWithOrgApacheLuceneSearchQuery_(self, query);
  self->queryWeight_ = [((OrgApacheLuceneSearchQuery *) nil_chk([self getQuery])) getBoost];
  self->queryNorm_ = 1.0f;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchConstantScoreWeight)
