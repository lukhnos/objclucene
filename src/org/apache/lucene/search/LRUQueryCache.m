//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/LRUQueryCache.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/search/ConstantScoreScorer.h"
#include "org/apache/lucene/search/ConstantScoreWeight.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/LRUQueryCache.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/QueryCachingPolicy.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/RoaringDocIdSet.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/LRUQueryCache must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchLRUQueryCache () {
 @public
  jint maxSize_;
  jlong maxRamBytesUsed_;
  id<JavaUtilMap> uniqueQueries_;
  id<JavaUtilSet> mostRecentlyUsedQueries_;
  id<JavaUtilMap> cache_;
  volatile_jlong ramBytesUsed_;
  volatile_jlong hitCount_;
  volatile_jlong missCount_;
  volatile_jlong cacheCount_;
  volatile_jlong cacheSize_;
}

+ (OrgApacheLuceneSearchQuery *)cacheKeyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (void)onEvictionWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)singleton;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUQueryCache, uniqueQueries_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUQueryCache, mostRecentlyUsedQueries_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUQueryCache, cache_, id<JavaUtilMap>)

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query);

__attribute__((unused)) static void OrgApacheLuceneSearchLRUQueryCache_onEvictionWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchLRUQueryCache *self, OrgApacheLuceneSearchQuery *singleton);

__attribute__((unused)) static jlong OrgApacheLuceneSearchLRUQueryCache_getHitCount(OrgApacheLuceneSearchLRUQueryCache *self);

__attribute__((unused)) static jlong OrgApacheLuceneSearchLRUQueryCache_getMissCount(OrgApacheLuceneSearchLRUQueryCache *self);

__attribute__((unused)) static jlong OrgApacheLuceneSearchLRUQueryCache_getCacheSize(OrgApacheLuceneSearchLRUQueryCache *self);

__attribute__((unused)) static jlong OrgApacheLuceneSearchLRUQueryCache_getCacheCount(OrgApacheLuceneSearchLRUQueryCache *self);

@interface OrgApacheLuceneSearchLRUQueryCache_1 : NSObject < OrgApacheLuceneIndexLeafReader_CoreClosedListener > {
 @public
  OrgApacheLuceneSearchLRUQueryCache *this$0_;
}

- (instancetype)initWithOrgApacheLuceneSearchLRUQueryCache:(OrgApacheLuceneSearchLRUQueryCache *)outer$;

- (void)onCloseWithId:(id)ownerCoreCacheKey;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchLRUQueryCache_1)

__attribute__((unused)) static void OrgApacheLuceneSearchLRUQueryCache_1_initWithOrgApacheLuceneSearchLRUQueryCache_(OrgApacheLuceneSearchLRUQueryCache_1 *self, OrgApacheLuceneSearchLRUQueryCache *outer$);

__attribute__((unused)) static OrgApacheLuceneSearchLRUQueryCache_1 *new_OrgApacheLuceneSearchLRUQueryCache_1_initWithOrgApacheLuceneSearchLRUQueryCache_(OrgApacheLuceneSearchLRUQueryCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchLRUQueryCache_1 *create_OrgApacheLuceneSearchLRUQueryCache_1_initWithOrgApacheLuceneSearchLRUQueryCache_(OrgApacheLuceneSearchLRUQueryCache *outer$);

@interface OrgApacheLuceneSearchLRUQueryCache_LeafCache : NSObject < OrgApacheLuceneUtilAccountable > {
 @public
  OrgApacheLuceneSearchLRUQueryCache *this$0_;
  id key_;
  id<JavaUtilMap> cache_;
  volatile_jlong ramBytesUsed_;
}

- (instancetype)initWithOrgApacheLuceneSearchLRUQueryCache:(OrgApacheLuceneSearchLRUQueryCache *)outer$
                                                    withId:(id)key;

- (void)onDocIdSetCacheWithLong:(jlong)ramBytesUsed;

- (void)onDocIdSetEvictionWithLong:(jlong)ramBytesUsed;

- (OrgApacheLuceneSearchDocIdSet *)getWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (void)putIfAbsentWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                withOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set;

- (void)removeWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (jlong)ramBytesUsed;

- (id<JavaUtilCollection>)getChildResources;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchLRUQueryCache_LeafCache)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUQueryCache_LeafCache, key_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUQueryCache_LeafCache, cache_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheLuceneSearchLRUQueryCache_LeafCache_initWithOrgApacheLuceneSearchLRUQueryCache_withId_(OrgApacheLuceneSearchLRUQueryCache_LeafCache *self, OrgApacheLuceneSearchLRUQueryCache *outer$, id key);

__attribute__((unused)) static OrgApacheLuceneSearchLRUQueryCache_LeafCache *new_OrgApacheLuceneSearchLRUQueryCache_LeafCache_initWithOrgApacheLuceneSearchLRUQueryCache_withId_(OrgApacheLuceneSearchLRUQueryCache *outer$, id key) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchLRUQueryCache_LeafCache *create_OrgApacheLuceneSearchLRUQueryCache_LeafCache_initWithOrgApacheLuceneSearchLRUQueryCache_withId_(OrgApacheLuceneSearchLRUQueryCache *outer$, id key);

__attribute__((unused)) static void OrgApacheLuceneSearchLRUQueryCache_LeafCache_onDocIdSetCacheWithLong_(OrgApacheLuceneSearchLRUQueryCache_LeafCache *self, jlong ramBytesUsed);

__attribute__((unused)) static void OrgApacheLuceneSearchLRUQueryCache_LeafCache_onDocIdSetEvictionWithLong_(OrgApacheLuceneSearchLRUQueryCache_LeafCache *self, jlong ramBytesUsed);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchLRUQueryCache_LeafCache)

@interface OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight : OrgApacheLuceneSearchConstantScoreWeight {
 @public
  OrgApacheLuceneSearchLRUQueryCache *this$0_;
  OrgApacheLuceneSearchWeight *in_;
  id<OrgApacheLuceneSearchQueryCachingPolicy> policy_;
  JavaUtilConcurrentAtomicAtomicBoolean *used_;
}

- (instancetype)initWithOrgApacheLuceneSearchLRUQueryCache:(OrgApacheLuceneSearchLRUQueryCache *)outer$
                           withOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)inArg
               withOrgApacheLuceneSearchQueryCachingPolicy:(id<OrgApacheLuceneSearchQueryCachingPolicy>)policy;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

- (jboolean)cacheEntryHasReasonableWorstCaseSizeWithInt:(jint)maxDoc;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight, in_, OrgApacheLuceneSearchWeight *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight, policy_, id<OrgApacheLuceneSearchQueryCachingPolicy>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight, used_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *self, OrgApacheLuceneSearchLRUQueryCache *outer$, OrgApacheLuceneSearchWeight *inArg, id<OrgApacheLuceneSearchQueryCachingPolicy> policy);

__attribute__((unused)) static OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *new_OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchLRUQueryCache *outer$, OrgApacheLuceneSearchWeight *inArg, id<OrgApacheLuceneSearchQueryCachingPolicy> policy) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *create_OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchLRUQueryCache *outer$, OrgApacheLuceneSearchWeight *inArg, id<OrgApacheLuceneSearchQueryCachingPolicy> policy);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_cacheEntryHasReasonableWorstCaseSizeWithInt_(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *self, jint maxDoc);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneSearchLRUQueryCache)

jlong OrgApacheLuceneSearchLRUQueryCache_HASHTABLE_RAM_BYTES_PER_ENTRY;
jlong OrgApacheLuceneSearchLRUQueryCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;

@implementation OrgApacheLuceneSearchLRUQueryCache

+ (jlong)QUERY_DEFAULT_RAM_BYTES_USED {
  return OrgApacheLuceneSearchLRUQueryCache_QUERY_DEFAULT_RAM_BYTES_USED;
}

+ (jlong)HASHTABLE_RAM_BYTES_PER_ENTRY {
  return OrgApacheLuceneSearchLRUQueryCache_HASHTABLE_RAM_BYTES_PER_ENTRY;
}

+ (jlong)LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY {
  return OrgApacheLuceneSearchLRUQueryCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY;
}

+ (OrgApacheLuceneSearchQuery *)cacheKeyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  return OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(query);
}

- (instancetype)initWithInt:(jint)maxSize
                   withLong:(jlong)maxRamBytesUsed {
  OrgApacheLuceneSearchLRUQueryCache_initWithInt_withLong_(self, maxSize, maxRamBytesUsed);
  return self;
}

- (void)onHitWithId:(id)readerCoreKey
withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  JrePlusAssignVolatileLongJ(&hitCount_, 1);
}

- (void)onMissWithId:(id)readerCoreKey
withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  JreAssert(query != nil, @"org/apache/lucene/search/LRUQueryCache.java:162 condition failed: assert query != null;");
  JrePlusAssignVolatileLongJ(&missCount_, 1);
}

- (void)onQueryCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                          withLong:(jlong)ramBytesUsed {
  JrePlusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
}

- (void)onQueryEvictionWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                             withLong:(jlong)ramBytesUsed {
  JreMinusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
}

- (void)onDocIdSetCacheWithId:(id)readerCoreKey
                     withLong:(jlong)ramBytesUsed {
  JrePlusAssignVolatileLongJ(&cacheSize_, 1);
  JrePlusAssignVolatileLongJ(&cacheCount_, 1);
  JrePlusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
}

- (void)onDocIdSetEvictionWithId:(id)readerCoreKey
                         withInt:(jint)numEntries
                        withLong:(jlong)sumRamBytesUsed {
  JreMinusAssignVolatileLongJ(&self->ramBytesUsed_, sumRamBytesUsed);
  JreMinusAssignVolatileLongJ(&cacheSize_, numEntries);
}

- (void)onClear {
  JreAssignVolatileLong(&ramBytesUsed_, 0);
  JreAssignVolatileLong(&cacheSize_, 0);
}

- (jboolean)requiresEviction {
  jint size = [((id<JavaUtilSet>) nil_chk(mostRecentlyUsedQueries_)) size];
  if (size == 0) {
    return false;
  }
  else {
    return size > maxSize_ || [self ramBytesUsed] > maxRamBytesUsed_;
  }
}

- (OrgApacheLuceneSearchDocIdSet *)getWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)key
                           withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  @synchronized(self) {
    key = OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(key);
    id readerKey = [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader])) getCoreCacheKey];
    OrgApacheLuceneSearchLRUQueryCache_LeafCache *leafCache = [((id<JavaUtilMap>) nil_chk(cache_)) getWithId:readerKey];
    if (leafCache == nil) {
      [self onMissWithId:readerKey withOrgApacheLuceneSearchQuery:key];
      return JreRetainedLocalValue(nil);
    }
    OrgApacheLuceneSearchQuery *singleton = [((id<JavaUtilMap>) nil_chk(uniqueQueries_)) getWithId:key];
    if (singleton == nil) {
      [self onMissWithId:readerKey withOrgApacheLuceneSearchQuery:key];
      return JreRetainedLocalValue(nil);
    }
    OrgApacheLuceneSearchDocIdSet *cached = [leafCache getWithOrgApacheLuceneSearchQuery:singleton];
    if (cached == nil) {
      [self onMissWithId:readerKey withOrgApacheLuceneSearchQuery:singleton];
    }
    else {
      [self onHitWithId:readerKey withOrgApacheLuceneSearchQuery:singleton];
    }
    return JreRetainedLocalValue(cached);
  }
}

- (void)putIfAbsentWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
        withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                withOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set {
  @synchronized(self) {
    query = JreRetainedLocalValue([((OrgApacheLuceneSearchQuery *) nil_chk(query)) java_clone]);
    [((OrgApacheLuceneSearchQuery *) nil_chk(query)) setBoostWithFloat:1.0f];
    JreAssert(JreObjectEqualsEquals(query, OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(query)), @"org/apache/lucene/search/LRUQueryCache.java:257 condition failed: assert query == cacheKey(query);");
    OrgApacheLuceneSearchQuery *singleton = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(uniqueQueries_)) getWithId:query]);
    if (singleton == nil) {
      [uniqueQueries_ putWithId:query withId:query];
      [self onQueryCacheWithOrgApacheLuceneSearchQuery:singleton withLong:OrgApacheLuceneSearchLRUQueryCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + [self ramBytesUsedWithOrgApacheLuceneSearchQuery:query]];
    }
    else {
      query = JreRetainedLocalValue(singleton);
    }
    id key = [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader])) getCoreCacheKey];
    OrgApacheLuceneSearchLRUQueryCache_LeafCache *leafCache = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(cache_)) getWithId:key]);
    if (leafCache == nil) {
      leafCache = create_OrgApacheLuceneSearchLRUQueryCache_LeafCache_initWithOrgApacheLuceneSearchLRUQueryCache_withId_(self, key);
      OrgApacheLuceneSearchLRUQueryCache_LeafCache *previous = [cache_ putWithId:[((OrgApacheLuceneIndexLeafReader *) nil_chk([context reader])) getCoreCacheKey] withId:leafCache];
      JrePlusAssignVolatileLongJ(&ramBytesUsed_, OrgApacheLuceneSearchLRUQueryCache_HASHTABLE_RAM_BYTES_PER_ENTRY);
      JreAssert(previous == nil, @"org/apache/lucene/search/LRUQueryCache.java:271 condition failed: assert previous == null;");
      [((OrgApacheLuceneIndexLeafReader *) nil_chk([context reader])) addCoreClosedListenerWithOrgApacheLuceneIndexLeafReader_CoreClosedListener:create_OrgApacheLuceneSearchLRUQueryCache_1_initWithOrgApacheLuceneSearchLRUQueryCache_(self)];
    }
    [leafCache putIfAbsentWithOrgApacheLuceneSearchQuery:query withOrgApacheLuceneSearchDocIdSet:set];
    [self evictIfNecessary];
  }
}

- (void)evictIfNecessary {
  @synchronized(self) {
    if ([self requiresEviction]) {
      id<JavaUtilIterator> iterator = JreRetainedLocalValue([((id<JavaUtilSet>) nil_chk(mostRecentlyUsedQueries_)) iterator]);
      do {
        OrgApacheLuceneSearchQuery *query = [((id<JavaUtilIterator>) nil_chk(iterator)) next];
        jint size = [mostRecentlyUsedQueries_ size];
        [iterator remove];
        if (size == [mostRecentlyUsedQueries_ size]) {
          @throw create_JavaUtilConcurrentModificationException_initWithNSString_(JreStrcat("$@$@C", @"Removal from the cache failed! This is probably due to a query which has been modified after having been put into  the cache or a badly implemented clone(). Query class: [", [((OrgApacheLuceneSearchQuery *) nil_chk(query)) java_getClass], @"], query: [", query, ']'));
        }
        OrgApacheLuceneSearchLRUQueryCache_onEvictionWithOrgApacheLuceneSearchQuery_(self, query);
      }
      while ([iterator hasNext] && [self requiresEviction]);
    }
  }
}

- (void)clearCoreCacheKeyWithId:(id)coreKey {
  @synchronized(self) {
    OrgApacheLuceneSearchLRUQueryCache_LeafCache *leafCache = [((id<JavaUtilMap>) nil_chk(cache_)) removeWithId:coreKey];
    if (leafCache != nil) {
      JreMinusAssignVolatileLongJ(&ramBytesUsed_, OrgApacheLuceneSearchLRUQueryCache_HASHTABLE_RAM_BYTES_PER_ENTRY);
      [self onDocIdSetEvictionWithId:coreKey withInt:[((id<JavaUtilMap>) nil_chk(leafCache->cache_)) size] withLong:JreLoadVolatileLong(&leafCache->ramBytesUsed_)];
    }
  }
}

- (void)clearQueryWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  @synchronized(self) {
    OrgApacheLuceneSearchQuery *singleton = [((id<JavaUtilMap>) nil_chk(uniqueQueries_)) removeWithId:OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(query)];
    if (singleton != nil) {
      OrgApacheLuceneSearchLRUQueryCache_onEvictionWithOrgApacheLuceneSearchQuery_(self, singleton);
    }
  }
}

- (void)onEvictionWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)singleton {
  OrgApacheLuceneSearchLRUQueryCache_onEvictionWithOrgApacheLuceneSearchQuery_(self, singleton);
}

- (void)clear {
  @synchronized(self) {
    [((id<JavaUtilMap>) nil_chk(cache_)) clear];
    [((id<JavaUtilSet>) nil_chk(mostRecentlyUsedQueries_)) clear];
    [self onClear];
  }
}

- (void)assertConsistent {
  @synchronized(self) {
    if ([self requiresEviction]) {
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$I$I$J$J", @"requires evictions: size=", [((id<JavaUtilSet>) nil_chk(mostRecentlyUsedQueries_)) size], @", maxSize=", maxSize_, @", ramBytesUsed=", [self ramBytesUsed], @", maxRamBytesUsed=", maxRamBytesUsed_));
    }
    for (OrgApacheLuceneSearchLRUQueryCache_LeafCache * __strong leafCache in nil_chk([((id<JavaUtilMap>) nil_chk(cache_)) values])) {
      id<JavaUtilSet> keys = JavaUtilCollections_newSetFromMapWithJavaUtilMap_(create_JavaUtilIdentityHashMap_init());
      [((id<JavaUtilSet>) nil_chk(keys)) addAllWithJavaUtilCollection:[((id<JavaUtilMap>) nil_chk(((OrgApacheLuceneSearchLRUQueryCache_LeafCache *) nil_chk(leafCache))->cache_)) keySet]];
      [keys removeAllWithJavaUtilCollection:mostRecentlyUsedQueries_];
      if (![keys isEmpty]) {
        @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"One leaf cache contains more keys than the top-level cache: ", keys));
      }
    }
    jlong recomputedRamBytesUsed = OrgApacheLuceneSearchLRUQueryCache_HASHTABLE_RAM_BYTES_PER_ENTRY * [cache_ size] + OrgApacheLuceneSearchLRUQueryCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * [((id<JavaUtilMap>) nil_chk(uniqueQueries_)) size];
    for (OrgApacheLuceneSearchQuery * __strong query in nil_chk(mostRecentlyUsedQueries_)) {
      recomputedRamBytesUsed += [self ramBytesUsedWithOrgApacheLuceneSearchQuery:query];
    }
    for (OrgApacheLuceneSearchLRUQueryCache_LeafCache * __strong leafCache in nil_chk([cache_ values])) {
      recomputedRamBytesUsed += OrgApacheLuceneSearchLRUQueryCache_HASHTABLE_RAM_BYTES_PER_ENTRY * [((id<JavaUtilMap>) nil_chk(((OrgApacheLuceneSearchLRUQueryCache_LeafCache *) nil_chk(leafCache))->cache_)) size];
      for (OrgApacheLuceneSearchDocIdSet * __strong set in nil_chk([leafCache->cache_ values])) {
        recomputedRamBytesUsed += [((OrgApacheLuceneSearchDocIdSet *) nil_chk(set)) ramBytesUsed];
      }
    }
    if (recomputedRamBytesUsed != JreLoadVolatileLong(&ramBytesUsed_)) {
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$J$J", @"ramBytesUsed mismatch : ", JreLoadVolatileLong(&ramBytesUsed_), @" != ", recomputedRamBytesUsed));
    }
    jlong recomputedCacheSize = 0;
    for (OrgApacheLuceneSearchLRUQueryCache_LeafCache * __strong leafCache in nil_chk([cache_ values])) {
      recomputedCacheSize += [((id<JavaUtilMap>) nil_chk(((OrgApacheLuceneSearchLRUQueryCache_LeafCache *) nil_chk(leafCache))->cache_)) size];
    }
    if (recomputedCacheSize != OrgApacheLuceneSearchLRUQueryCache_getCacheSize(self)) {
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$J$J", @"cacheSize mismatch : ", OrgApacheLuceneSearchLRUQueryCache_getCacheSize(self), @" != ", recomputedCacheSize));
    }
  }
}

- (id<JavaUtilList>)cachedQueries {
  @synchronized(self) {
    return create_JavaUtilArrayList_initWithJavaUtilCollection_(mostRecentlyUsedQueries_);
  }
}

- (OrgApacheLuceneSearchWeight *)doCacheWithOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)weight
                            withOrgApacheLuceneSearchQueryCachingPolicy:(id<OrgApacheLuceneSearchQueryCachingPolicy>)policy {
  while ([weight isKindOfClass:[OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight class]]) {
    weight = ((OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *) nil_chk(((OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *) cast_chk(weight, [OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight class]))))->in_;
  }
  return create_OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_(self, weight, policy);
}

- (jlong)ramBytesUsed {
  return JreLoadVolatileLong(&ramBytesUsed_);
}

- (id<JavaUtilCollection>)getChildResources {
  @synchronized(self) {
    return OrgApacheLuceneUtilAccountables_namedAccountablesWithNSString_withJavaUtilMap_(@"segment", cache_);
  }
}

- (jlong)ramBytesUsedWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  if ([OrgApacheLuceneUtilAccountable_class_() isInstance:query]) {
    return [((id<OrgApacheLuceneUtilAccountable>) nil_chk(((id<OrgApacheLuceneUtilAccountable>) cast_check(query, OrgApacheLuceneUtilAccountable_class_())))) ramBytesUsed];
  }
  return OrgApacheLuceneSearchLRUQueryCache_QUERY_DEFAULT_RAM_BYTES_USED;
}

- (OrgApacheLuceneSearchDocIdSet *)cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iterator
                                                   withOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader {
  return [((OrgApacheLuceneUtilRoaringDocIdSet_Builder *) nil_chk([create_OrgApacheLuceneUtilRoaringDocIdSet_Builder_initWithInt_([((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) maxDoc]) addWithOrgApacheLuceneSearchDocIdSetIterator:iterator])) build];
}

- (jlong)getTotalCount {
  return OrgApacheLuceneSearchLRUQueryCache_getHitCount(self) + OrgApacheLuceneSearchLRUQueryCache_getMissCount(self);
}

- (jlong)getHitCount {
  return OrgApacheLuceneSearchLRUQueryCache_getHitCount(self);
}

- (jlong)getMissCount {
  return OrgApacheLuceneSearchLRUQueryCache_getMissCount(self);
}

- (jlong)getCacheSize {
  return OrgApacheLuceneSearchLRUQueryCache_getCacheSize(self);
}

- (jlong)getCacheCount {
  return OrgApacheLuceneSearchLRUQueryCache_getCacheCount(self);
}

- (jlong)getEvictionCount {
  return OrgApacheLuceneSearchLRUQueryCache_getCacheCount(self) - OrgApacheLuceneSearchLRUQueryCache_getCacheSize(self);
}

- (void)dealloc {
  RELEASE_(uniqueQueries_);
  RELEASE_(mostRecentlyUsedQueries_);
  RELEASE_(cache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneSearchQuery;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x20, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x20, -1, -1, -1, 21, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchWeight;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "J", 0x4, 25, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x4, 26, 27, 28, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(cacheKeyWithOrgApacheLuceneSearchQuery:);
  methods[1].selector = @selector(initWithInt:withLong:);
  methods[2].selector = @selector(onHitWithId:withOrgApacheLuceneSearchQuery:);
  methods[3].selector = @selector(onMissWithId:withOrgApacheLuceneSearchQuery:);
  methods[4].selector = @selector(onQueryCacheWithOrgApacheLuceneSearchQuery:withLong:);
  methods[5].selector = @selector(onQueryEvictionWithOrgApacheLuceneSearchQuery:withLong:);
  methods[6].selector = @selector(onDocIdSetCacheWithId:withLong:);
  methods[7].selector = @selector(onDocIdSetEvictionWithId:withInt:withLong:);
  methods[8].selector = @selector(onClear);
  methods[9].selector = @selector(requiresEviction);
  methods[10].selector = @selector(getWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexLeafReaderContext:);
  methods[11].selector = @selector(putIfAbsentWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchDocIdSet:);
  methods[12].selector = @selector(evictIfNecessary);
  methods[13].selector = @selector(clearCoreCacheKeyWithId:);
  methods[14].selector = @selector(clearQueryWithOrgApacheLuceneSearchQuery:);
  methods[15].selector = @selector(onEvictionWithOrgApacheLuceneSearchQuery:);
  methods[16].selector = @selector(clear);
  methods[17].selector = @selector(assertConsistent);
  methods[18].selector = @selector(cachedQueries);
  methods[19].selector = @selector(doCacheWithOrgApacheLuceneSearchWeight:withOrgApacheLuceneSearchQueryCachingPolicy:);
  methods[20].selector = @selector(ramBytesUsed);
  methods[21].selector = @selector(getChildResources);
  methods[22].selector = @selector(ramBytesUsedWithOrgApacheLuceneSearchQuery:);
  methods[23].selector = @selector(cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:withOrgApacheLuceneIndexLeafReader:);
  methods[24].selector = @selector(getTotalCount);
  methods[25].selector = @selector(getHitCount);
  methods[26].selector = @selector(getMissCount);
  methods[27].selector = @selector(getCacheSize);
  methods[28].selector = @selector(getCacheCount);
  methods[29].selector = @selector(getEvictionCount);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "QUERY_DEFAULT_RAM_BYTES_USED", "J", .constantValue.asLong = OrgApacheLuceneSearchLRUQueryCache_QUERY_DEFAULT_RAM_BYTES_USED, 0x18, -1, -1, -1, -1 },
    { "HASHTABLE_RAM_BYTES_PER_ENTRY", "J", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY", "J", .constantValue.asLong = 0, 0x18, -1, 30, -1, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxRamBytesUsed_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "uniqueQueries_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "mostRecentlyUsedQueries_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 32, -1 },
    { "cache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 33, -1 },
    { "ramBytesUsed_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "hitCount_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "missCount_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "cacheCount_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "cacheSize_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "cacheKey", "LOrgApacheLuceneSearchQuery;", "IJ", "onHit", "LNSObject;LOrgApacheLuceneSearchQuery;", "onMiss", "onQueryCache", "LOrgApacheLuceneSearchQuery;J", "onQueryEviction", "onDocIdSetCache", "LNSObject;J", "onDocIdSetEviction", "LNSObject;IJ", "get", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneIndexLeafReaderContext;", "putIfAbsent", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneIndexLeafReaderContext;LOrgApacheLuceneSearchDocIdSet;", "clearCoreCacheKey", "LNSObject;", "clearQuery", "onEviction", "()Ljava/util/List<Lorg/apache/lucene/search/Query;>;", "doCache", "LOrgApacheLuceneSearchWeight;LOrgApacheLuceneSearchQueryCachingPolicy;", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "ramBytesUsed", "cacheImpl", "LOrgApacheLuceneSearchDocIdSetIterator;LOrgApacheLuceneIndexLeafReader;", "LJavaIoIOException;", &OrgApacheLuceneSearchLRUQueryCache_HASHTABLE_RAM_BYTES_PER_ENTRY, &OrgApacheLuceneSearchLRUQueryCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY, "Ljava/util/Map<Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Query;>;", "Ljava/util/Set<Lorg/apache/lucene/search/Query;>;", "Ljava/util/Map<Ljava/lang/Object;Lorg/apache/lucene/search/LRUQueryCache$LeafCache;>;", "LOrgApacheLuceneSearchLRUQueryCache_LeafCache;LOrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchLRUQueryCache = { "LRUQueryCache", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 30, 13, -1, 34, -1, -1, -1 };
  return &_OrgApacheLuceneSearchLRUQueryCache;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneSearchLRUQueryCache class]) {
    OrgApacheLuceneSearchLRUQueryCache_HASHTABLE_RAM_BYTES_PER_ENTRY = 2 * JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF) * 2;
    OrgApacheLuceneSearchLRUQueryCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY = OrgApacheLuceneSearchLRUQueryCache_HASHTABLE_RAM_BYTES_PER_ENTRY + 2 * JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneSearchLRUQueryCache)
  }
}

@end

OrgApacheLuceneSearchQuery *OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query) {
  OrgApacheLuceneSearchLRUQueryCache_initialize();
  if ([((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost] == 1.0f) {
    return query;
  }
  else {
    OrgApacheLuceneSearchQuery *key = JreRetainedLocalValue([query java_clone]);
    [((OrgApacheLuceneSearchQuery *) nil_chk(key)) setBoostWithFloat:1.0f];
    JreAssert(JreObjectEqualsEquals(key, OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(key)), @"org/apache/lucene/search/LRUQueryCache.java:97 condition failed: assert key == cacheKey(key);");
    return key;
  }
}

void OrgApacheLuceneSearchLRUQueryCache_initWithInt_withLong_(OrgApacheLuceneSearchLRUQueryCache *self, jint maxSize, jlong maxRamBytesUsed) {
  NSObject_init(self);
  self->maxSize_ = maxSize;
  self->maxRamBytesUsed_ = maxRamBytesUsed;
  JreStrongAssignAndConsume(&self->uniqueQueries_, new_JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(16, 0.75f, true));
  JreStrongAssign(&self->mostRecentlyUsedQueries_, [self->uniqueQueries_ keySet]);
  JreStrongAssignAndConsume(&self->cache_, new_JavaUtilIdentityHashMap_init());
  JreAssignVolatileLong(&self->ramBytesUsed_, 0);
}

OrgApacheLuceneSearchLRUQueryCache *new_OrgApacheLuceneSearchLRUQueryCache_initWithInt_withLong_(jint maxSize, jlong maxRamBytesUsed) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchLRUQueryCache, initWithInt_withLong_, maxSize, maxRamBytesUsed)
}

OrgApacheLuceneSearchLRUQueryCache *create_OrgApacheLuceneSearchLRUQueryCache_initWithInt_withLong_(jint maxSize, jlong maxRamBytesUsed) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchLRUQueryCache, initWithInt_withLong_, maxSize, maxRamBytesUsed)
}

void OrgApacheLuceneSearchLRUQueryCache_onEvictionWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchLRUQueryCache *self, OrgApacheLuceneSearchQuery *singleton) {
  [self onQueryEvictionWithOrgApacheLuceneSearchQuery:singleton withLong:OrgApacheLuceneSearchLRUQueryCache_LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY + [self ramBytesUsedWithOrgApacheLuceneSearchQuery:singleton]];
  for (OrgApacheLuceneSearchLRUQueryCache_LeafCache * __strong leafCache in nil_chk([((id<JavaUtilMap>) nil_chk(self->cache_)) values])) {
    [((OrgApacheLuceneSearchLRUQueryCache_LeafCache *) nil_chk(leafCache)) removeWithOrgApacheLuceneSearchQuery:singleton];
  }
}

jlong OrgApacheLuceneSearchLRUQueryCache_getHitCount(OrgApacheLuceneSearchLRUQueryCache *self) {
  return JreLoadVolatileLong(&self->hitCount_);
}

jlong OrgApacheLuceneSearchLRUQueryCache_getMissCount(OrgApacheLuceneSearchLRUQueryCache *self) {
  return JreLoadVolatileLong(&self->missCount_);
}

jlong OrgApacheLuceneSearchLRUQueryCache_getCacheSize(OrgApacheLuceneSearchLRUQueryCache *self) {
  return JreLoadVolatileLong(&self->cacheSize_);
}

jlong OrgApacheLuceneSearchLRUQueryCache_getCacheCount(OrgApacheLuceneSearchLRUQueryCache *self) {
  return JreLoadVolatileLong(&self->cacheCount_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchLRUQueryCache)

@implementation OrgApacheLuceneSearchLRUQueryCache_1

- (instancetype)initWithOrgApacheLuceneSearchLRUQueryCache:(OrgApacheLuceneSearchLRUQueryCache *)outer$ {
  OrgApacheLuceneSearchLRUQueryCache_1_initWithOrgApacheLuceneSearchLRUQueryCache_(self, outer$);
  return self;
}

- (void)onCloseWithId:(id)ownerCoreCacheKey {
  [this$0_ clearCoreCacheKeyWithId:ownerCoreCacheKey];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchLRUQueryCache:);
  methods[1].selector = @selector(onCloseWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchLRUQueryCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchLRUQueryCache;", "onClose", "LNSObject;", "putIfAbsentWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneIndexLeafReaderContext:withOrgApacheLuceneSearchDocIdSet:" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchLRUQueryCache_1 = { "", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_OrgApacheLuceneSearchLRUQueryCache_1;
}

@end

void OrgApacheLuceneSearchLRUQueryCache_1_initWithOrgApacheLuceneSearchLRUQueryCache_(OrgApacheLuceneSearchLRUQueryCache_1 *self, OrgApacheLuceneSearchLRUQueryCache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

OrgApacheLuceneSearchLRUQueryCache_1 *new_OrgApacheLuceneSearchLRUQueryCache_1_initWithOrgApacheLuceneSearchLRUQueryCache_(OrgApacheLuceneSearchLRUQueryCache *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchLRUQueryCache_1, initWithOrgApacheLuceneSearchLRUQueryCache_, outer$)
}

OrgApacheLuceneSearchLRUQueryCache_1 *create_OrgApacheLuceneSearchLRUQueryCache_1_initWithOrgApacheLuceneSearchLRUQueryCache_(OrgApacheLuceneSearchLRUQueryCache *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchLRUQueryCache_1, initWithOrgApacheLuceneSearchLRUQueryCache_, outer$)
}

@implementation OrgApacheLuceneSearchLRUQueryCache_LeafCache

- (instancetype)initWithOrgApacheLuceneSearchLRUQueryCache:(OrgApacheLuceneSearchLRUQueryCache *)outer$
                                                    withId:(id)key {
  OrgApacheLuceneSearchLRUQueryCache_LeafCache_initWithOrgApacheLuceneSearchLRUQueryCache_withId_(self, outer$, key);
  return self;
}

- (void)onDocIdSetCacheWithLong:(jlong)ramBytesUsed {
  OrgApacheLuceneSearchLRUQueryCache_LeafCache_onDocIdSetCacheWithLong_(self, ramBytesUsed);
}

- (void)onDocIdSetEvictionWithLong:(jlong)ramBytesUsed {
  OrgApacheLuceneSearchLRUQueryCache_LeafCache_onDocIdSetEvictionWithLong_(self, ramBytesUsed);
}

- (OrgApacheLuceneSearchDocIdSet *)getWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  JreAssert(JreObjectEqualsEquals(query, OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(query)), @"org/apache/lucene/search/LRUQueryCache.java:525 condition failed: assert query == cacheKey(query);");
  return [((id<JavaUtilMap>) nil_chk(cache_)) getWithId:query];
}

- (void)putIfAbsentWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                withOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set {
  JreAssert(JreObjectEqualsEquals(query, OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(query)), @"org/apache/lucene/search/LRUQueryCache.java:530 condition failed: assert query == cacheKey(query);");
  if ([((id<JavaUtilMap>) nil_chk(cache_)) containsKeyWithId:query] == false) {
    [cache_ putWithId:query withId:set];
    OrgApacheLuceneSearchLRUQueryCache_LeafCache_onDocIdSetCacheWithLong_(self, JreLoadStatic(OrgApacheLuceneSearchLRUQueryCache, HASHTABLE_RAM_BYTES_PER_ENTRY) + [((OrgApacheLuceneSearchDocIdSet *) nil_chk(set)) ramBytesUsed]);
  }
}

- (void)removeWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  JreAssert(JreObjectEqualsEquals(query, OrgApacheLuceneSearchLRUQueryCache_cacheKeyWithOrgApacheLuceneSearchQuery_(query)), @"org/apache/lucene/search/LRUQueryCache.java:538 condition failed: assert query == cacheKey(query);");
  OrgApacheLuceneSearchDocIdSet *removed = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(cache_)) removeWithId:query]);
  if (removed != nil) {
    OrgApacheLuceneSearchLRUQueryCache_LeafCache_onDocIdSetEvictionWithLong_(self, JreLoadStatic(OrgApacheLuceneSearchLRUQueryCache, HASHTABLE_RAM_BYTES_PER_ENTRY) + [removed ramBytesUsed]);
  }
}

- (jlong)ramBytesUsed {
  return JreLoadVolatileLong(&ramBytesUsed_);
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(key_);
  RELEASE_(cache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 5, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchLRUQueryCache:withId:);
  methods[1].selector = @selector(onDocIdSetCacheWithLong:);
  methods[2].selector = @selector(onDocIdSetEvictionWithLong:);
  methods[3].selector = @selector(getWithOrgApacheLuceneSearchQuery:);
  methods[4].selector = @selector(putIfAbsentWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneSearchDocIdSet:);
  methods[5].selector = @selector(removeWithOrgApacheLuceneSearchQuery:);
  methods[6].selector = @selector(ramBytesUsed);
  methods[7].selector = @selector(getChildResources);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchLRUQueryCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "ramBytesUsed_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchLRUQueryCache;LNSObject;", "onDocIdSetCache", "J", "onDocIdSetEviction", "get", "LOrgApacheLuceneSearchQuery;", "putIfAbsent", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneSearchDocIdSet;", "remove", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "Ljava/util/Map<Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/DocIdSet;>;", "LOrgApacheLuceneSearchLRUQueryCache;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchLRUQueryCache_LeafCache = { "LeafCache", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x2, 8, 4, 11, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchLRUQueryCache_LeafCache;
}

@end

void OrgApacheLuceneSearchLRUQueryCache_LeafCache_initWithOrgApacheLuceneSearchLRUQueryCache_withId_(OrgApacheLuceneSearchLRUQueryCache_LeafCache *self, OrgApacheLuceneSearchLRUQueryCache *outer$, id key) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->key_, key);
  JreStrongAssignAndConsume(&self->cache_, new_JavaUtilIdentityHashMap_init());
  JreAssignVolatileLong(&self->ramBytesUsed_, 0);
}

OrgApacheLuceneSearchLRUQueryCache_LeafCache *new_OrgApacheLuceneSearchLRUQueryCache_LeafCache_initWithOrgApacheLuceneSearchLRUQueryCache_withId_(OrgApacheLuceneSearchLRUQueryCache *outer$, id key) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchLRUQueryCache_LeafCache, initWithOrgApacheLuceneSearchLRUQueryCache_withId_, outer$, key)
}

OrgApacheLuceneSearchLRUQueryCache_LeafCache *create_OrgApacheLuceneSearchLRUQueryCache_LeafCache_initWithOrgApacheLuceneSearchLRUQueryCache_withId_(OrgApacheLuceneSearchLRUQueryCache *outer$, id key) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchLRUQueryCache_LeafCache, initWithOrgApacheLuceneSearchLRUQueryCache_withId_, outer$, key)
}

void OrgApacheLuceneSearchLRUQueryCache_LeafCache_onDocIdSetCacheWithLong_(OrgApacheLuceneSearchLRUQueryCache_LeafCache *self, jlong ramBytesUsed) {
  JrePlusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
  [self->this$0_ onDocIdSetCacheWithId:self->key_ withLong:ramBytesUsed];
}

void OrgApacheLuceneSearchLRUQueryCache_LeafCache_onDocIdSetEvictionWithLong_(OrgApacheLuceneSearchLRUQueryCache_LeafCache *self, jlong ramBytesUsed) {
  JreMinusAssignVolatileLongJ(&self->ramBytesUsed_, ramBytesUsed);
  [self->this$0_ onDocIdSetEvictionWithId:self->key_ withInt:1 withLong:ramBytesUsed];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchLRUQueryCache_LeafCache)

@implementation OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight

- (instancetype)initWithOrgApacheLuceneSearchLRUQueryCache:(OrgApacheLuceneSearchLRUQueryCache *)outer$
                           withOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)inArg
               withOrgApacheLuceneSearchQueryCachingPolicy:(id<OrgApacheLuceneSearchQueryCachingPolicy>)policy {
  OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_(self, outer$, inArg, policy);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  [((OrgApacheLuceneSearchWeight *) nil_chk(in_)) extractTermsWithJavaUtilSet:terms];
}

- (jboolean)cacheEntryHasReasonableWorstCaseSizeWithInt:(jint)maxDoc {
  return OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_cacheEntryHasReasonableWorstCaseSizeWithInt_(self, maxDoc);
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(used_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<OrgApacheLuceneSearchQueryCachingPolicy>) nil_chk(policy_)) onUseWithOrgApacheLuceneSearchQuery:[self getQuery]];
  }
  OrgApacheLuceneSearchDocIdSet *docIdSet = JreRetainedLocalValue([this$0_ getWithOrgApacheLuceneSearchQuery:[((OrgApacheLuceneSearchWeight *) nil_chk(in_)) getQuery] withOrgApacheLuceneIndexLeafReaderContext:context]);
  if (docIdSet == nil) {
    if (OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_cacheEntryHasReasonableWorstCaseSizeWithInt_(self, [((OrgApacheLuceneIndexIndexReader *) nil_chk([((OrgApacheLuceneIndexIndexReaderContext *) nil_chk(OrgApacheLuceneIndexReaderUtil_getTopLevelContextWithOrgApacheLuceneIndexIndexReaderContext_(context))) reader])) maxDoc]) && [((id<OrgApacheLuceneSearchQueryCachingPolicy>) nil_chk(policy_)) shouldCacheWithOrgApacheLuceneSearchQuery:[in_ getQuery] withOrgApacheLuceneIndexLeafReaderContext:context]) {
      OrgApacheLuceneSearchScorer *scorer = [in_ scorerWithOrgApacheLuceneIndexLeafReaderContext:context];
      if (scorer == nil) {
        docIdSet = JreLoadStatic(OrgApacheLuceneSearchDocIdSet, EMPTY);
      }
      else {
        docIdSet = [this$0_ cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:scorer withOrgApacheLuceneIndexLeafReader:[((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader]];
      }
      [this$0_ putIfAbsentWithOrgApacheLuceneSearchQuery:[in_ getQuery] withOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchDocIdSet:docIdSet];
    }
    else {
      return [in_ scorerWithOrgApacheLuceneIndexLeafReaderContext:context];
    }
  }
  JreAssert(docIdSet != nil, @"org/apache/lucene/search/LRUQueryCache.java:609 condition failed: assert docIdSet != null;");
  if (JreObjectEqualsEquals(docIdSet, JreLoadStatic(OrgApacheLuceneSearchDocIdSet, EMPTY))) {
    return nil;
  }
  OrgApacheLuceneSearchDocIdSetIterator *disi = [((OrgApacheLuceneSearchDocIdSet *) nil_chk(docIdSet)) iterator];
  if (disi == nil) {
    return nil;
  }
  return create_OrgApacheLuceneSearchConstantScoreScorer_initWithOrgApacheLuceneSearchWeight_withFloat_withOrgApacheLuceneSearchDocIdSetIterator_(self, 0.0f, disi);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(in_);
  RELEASE_(policy_);
  RELEASE_(used_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchScorer;", 0x1, 6, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchLRUQueryCache:withOrgApacheLuceneSearchWeight:withOrgApacheLuceneSearchQueryCachingPolicy:);
  methods[1].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[2].selector = @selector(cacheEntryHasReasonableWorstCaseSizeWithInt:);
  methods[3].selector = @selector(scorerWithOrgApacheLuceneIndexLeafReaderContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchLRUQueryCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "in_", "LOrgApacheLuceneSearchWeight;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "policy_", "LOrgApacheLuceneSearchQueryCachingPolicy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "used_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchLRUQueryCache;LOrgApacheLuceneSearchWeight;LOrgApacheLuceneSearchQueryCachingPolicy;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "cacheEntryHasReasonableWorstCaseSize", "I", "scorer", "LOrgApacheLuceneIndexLeafReaderContext;", "LJavaIoIOException;", "LOrgApacheLuceneSearchLRUQueryCache;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight = { "CachingWrapperWeight", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x2, 4, 4, 9, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight;
}

@end

void OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *self, OrgApacheLuceneSearchLRUQueryCache *outer$, OrgApacheLuceneSearchWeight *inArg, id<OrgApacheLuceneSearchQueryCachingPolicy> policy) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchConstantScoreWeight_initWithOrgApacheLuceneSearchQuery_(self, [((OrgApacheLuceneSearchWeight *) nil_chk(inArg)) getQuery]);
  JreStrongAssign(&self->in_, inArg);
  JreStrongAssign(&self->policy_, policy);
  JreStrongAssignAndConsume(&self->used_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
}

OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *new_OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchLRUQueryCache *outer$, OrgApacheLuceneSearchWeight *inArg, id<OrgApacheLuceneSearchQueryCachingPolicy> policy) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight, initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_, outer$, inArg, policy)
}

OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *create_OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchLRUQueryCache *outer$, OrgApacheLuceneSearchWeight *inArg, id<OrgApacheLuceneSearchQueryCachingPolicy> policy) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight, initWithOrgApacheLuceneSearchLRUQueryCache_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQueryCachingPolicy_, outer$, inArg, policy)
}

jboolean OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight_cacheEntryHasReasonableWorstCaseSizeWithInt_(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight *self, jint maxDoc) {
  jlong worstCaseRamUsage = JreIntDiv(maxDoc, 8);
  jlong totalRamAvailable = self->this$0_->maxRamBytesUsed_;
  return worstCaseRamUsage * 5 < totalRamAvailable;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchLRUQueryCache_CachingWrapperWeight)
