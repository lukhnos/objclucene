//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/SloppyPhraseScorer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/ConjunctionDISI.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/PhrasePositions.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/PhraseQueue.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/SloppyPhraseScorer.h"
#include "org/apache/lucene/search/TwoPhaseIterator.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/util/FixedBitSet.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/SloppyPhraseScorer must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheLuceneSearchSloppyPhraseScorer () {
 @public
  OrgApacheLuceneSearchConjunctionDISI *conjunction_;
  IOSObjectArray *phrasePositions_;
  jfloat sloppyFreq_;
  OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer_;
  jint slop_;
  jint numPostings_;
  OrgApacheLuceneSearchPhraseQueue *pq_;
  jint end_;
  jboolean hasRpts_;
  jboolean checkedRpts_;
  jboolean hasMultiTermRpts_;
  IOSObjectArray *rptGroups_;
  IOSObjectArray *rptStack_;
  jint numMatches_;
}

/*!
 @brief Score a candidate doc for all slop-valid position-combinations (matches) 
  encountered while traversing/hopping the PhrasePositions.
 <br> The score contribution of a match depends on the distance:  
 <br> - highest score for distance=0 (exact match). 
 <br> - score gets lower as distance gets higher. 
 <br>Example: for query "a b"~2, a document "x a b a y" can be scored twice: 
  once for "a b" (distance=0), and once for "b a" (distance=2). 
 <br>Possibly not all valid combinations are encountered, because for efficiency  
  we always propagate the least PhrasePosition. This allows to base on 
  PriorityQueue and move forward faster. 
  As result, for example, document "a b c b a"
  would score differently for queries "a b c"~4 and "c b a"~4, although 
  they really are equivalent. 
  Similarly, for doc "a b c b a f g", query "c b"~2 
  would get same score as "g f"~2, although "c b"~2 could be matched twice.
  We may want to fix this in the future (currently not, for performance reasons).
 */
- (jfloat)phraseFreq;

/*!
 @brief advance a PhrasePosition and update 'end', return false if exhausted
 */
- (jboolean)advancePPWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp;

/*!
 @brief pp was just advanced.If that caused a repeater collision, resolve by advancing the lesser
  of the two colliding pps.
 Note that there can only be one collision, as by the initialization
  there were no collisions before pp was advanced.
 */
- (jboolean)advanceRptsWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp;

/*!
 @brief compare two pps, but only by position and offset
 */
- (OrgApacheLuceneSearchPhrasePositions *)lesserWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp
                                                withOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp2;

/*!
 @brief index of a pp2 colliding with pp, or -1 if none
 */
- (jint)collideWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp;

/*!
 @brief Initialize PhrasePositions in place.
 A one time initialization for this scorer (on first doc matching all terms): 
 <ul>
   <li>Check if there are repetitions
   <li>If there are, find groups of repetitions. 
 </ul>
  Examples: 
 <ol>
   <li>no repetitions: <b>"ho my"~2</b>
   <li>repetitions: <b>"ho my my"~2</b>
   <li>repetitions: <b>"my ho my"~2</b>
  </ol>
 @return false if PPs are exhausted (and so current doc will not be a match)
 */
- (jboolean)initPhrasePositions OBJC_METHOD_FAMILY_NONE;

/*!
 @brief no repeats: simplest case, and most common.It is important to keep this piece of the code simple and efficient
 */
- (void)initSimple OBJC_METHOD_FAMILY_NONE;

/*!
 @brief with repeats: not so simple.
 */
- (jboolean)initComplex OBJC_METHOD_FAMILY_NONE;

/*!
 @brief move all PPs to their first position
 */
- (void)placeFirstPositions;

/*!
 @brief Fill the queue (all pps are already placed
 */
- (void)fillQueue;

/*!
 @brief At initialization (each doc), each repetition group is sorted by (query) offset.
 This provides the start condition: no collisions. 
 <p>Case 1: no multi-term repeats<br>
  It is sufficient to advance each pp in the group by one less than its group index.
  So lesser pp is not advanced, 2nd one advance once, 3rd one advanced twice, etc. 
 <p>Case 2: multi-term repeats<br>
 @return false if PPs are exhausted.
 */
- (jboolean)advanceRepeatGroups;

/*!
 @brief initialize with checking for repeats.Heavy work, but done only for the first candidate doc.
 <p>
  If there are repetitions, check if multi-term postings (MTP) are involved.<p>
  Without MTP, once PPs are placed in the first candidate doc, repeats (and groups) are visible.<br>
  With MTP, a more complex check is needed, up-front, as there may be "hidden collisions".<br>
  For example P1 has {A,B}, P1 has {B,C}, and the first doc is: "A C B". At start, P1 would point
  to "A", p2 to "C", and it will not be identified that P1 and P2 are repetitions of each other.<p>
  The more complex initialization has two parts:<br>
  (1) identification of repetition groups.<br>
  (2) advancing repeat groups at the start of the doc.<br>
  For (1), a possible solution is to just create a single repetition group, 
  made of all repeating pps. But this would slow down the check for collisions, 
  as all pps would need to be checked. Instead, we compute "connected regions" 
  on the bipartite graph of postings and terms.
 */
- (jboolean)initFirstTime OBJC_METHOD_FAMILY_NONE;

/*!
 @brief sort each repetition group by (query) offset.
 Done only once (at first doc) and allows to initialize faster for each doc.
 */
- (void)sortRptGroupsWithJavaUtilArrayList:(JavaUtilArrayList *)rgs;

/*!
 @brief Detect repetition groups.Done once - for first doc
 */
- (JavaUtilArrayList *)gatherRptGroupsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)rptTerms;

/*!
 @brief Actual position in doc of a PhrasePosition, relies on that position = tpPos - offset)
 */
- (jint)tpPosWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp;

/*!
 @brief find repeating terms and assign them ordinal values
 */
- (JavaUtilLinkedHashMap *)repeatingTerms;

/*!
 @brief find repeating pps, and for each, if has multi-terms, update this.hasMultiTermRpts
 */
- (IOSObjectArray *)repeatingPPsWithJavaUtilHashMap:(JavaUtilHashMap *)rptTerms;

/*!
 @brief bit-sets - for each repeating pp, for each of its repeating terms, the term ordinal values is set
 */
- (JavaUtilArrayList *)ppTermsBitSetsWithOrgApacheLuceneSearchPhrasePositionsArray:(IOSObjectArray *)rpp
                                                               withJavaUtilHashMap:(JavaUtilHashMap *)tord;

/*!
 @brief union (term group) bit-sets until they are disjoint (O(n^^2)), and each group have different terms
 */
- (void)unionTermGroupsWithJavaUtilArrayList:(JavaUtilArrayList *)bb;

/*!
 @brief map each term to the single group that contains it
 */
- (JavaUtilHashMap *)termGroupsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)tord
                                   withJavaUtilArrayList:(JavaUtilArrayList *)bb;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSloppyPhraseScorer, conjunction_, OrgApacheLuceneSearchConjunctionDISI *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSloppyPhraseScorer, phrasePositions_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSloppyPhraseScorer, docScorer_, OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSloppyPhraseScorer, pq_, OrgApacheLuceneSearchPhraseQueue *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSloppyPhraseScorer, rptGroups_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSloppyPhraseScorer, rptStack_, IOSObjectArray *)

__attribute__((unused)) static jfloat OrgApacheLuceneSearchSloppyPhraseScorer_phraseFreq(OrgApacheLuceneSearchSloppyPhraseScorer *self);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSloppyPhraseScorer_advancePPWithOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSloppyPhraseScorer_advanceRptsWithOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp);

__attribute__((unused)) static OrgApacheLuceneSearchPhrasePositions *OrgApacheLuceneSearchSloppyPhraseScorer_lesserWithOrgApacheLuceneSearchPhrasePositions_withOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp, OrgApacheLuceneSearchPhrasePositions *pp2);

__attribute__((unused)) static jint OrgApacheLuceneSearchSloppyPhraseScorer_collideWithOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSloppyPhraseScorer_initPhrasePositions(OrgApacheLuceneSearchSloppyPhraseScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSloppyPhraseScorer_initSimple(OrgApacheLuceneSearchSloppyPhraseScorer *self);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSloppyPhraseScorer_initComplex(OrgApacheLuceneSearchSloppyPhraseScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSloppyPhraseScorer_placeFirstPositions(OrgApacheLuceneSearchSloppyPhraseScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSloppyPhraseScorer_fillQueue(OrgApacheLuceneSearchSloppyPhraseScorer *self);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSloppyPhraseScorer_advanceRepeatGroups(OrgApacheLuceneSearchSloppyPhraseScorer *self);

__attribute__((unused)) static jboolean OrgApacheLuceneSearchSloppyPhraseScorer_initFirstTime(OrgApacheLuceneSearchSloppyPhraseScorer *self);

__attribute__((unused)) static void OrgApacheLuceneSearchSloppyPhraseScorer_sortRptGroupsWithJavaUtilArrayList_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilArrayList *rgs);

__attribute__((unused)) static JavaUtilArrayList *OrgApacheLuceneSearchSloppyPhraseScorer_gatherRptGroupsWithJavaUtilLinkedHashMap_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilLinkedHashMap *rptTerms);

__attribute__((unused)) static jint OrgApacheLuceneSearchSloppyPhraseScorer_tpPosWithOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp);

__attribute__((unused)) static JavaUtilLinkedHashMap *OrgApacheLuceneSearchSloppyPhraseScorer_repeatingTerms(OrgApacheLuceneSearchSloppyPhraseScorer *self);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneSearchSloppyPhraseScorer_repeatingPPsWithJavaUtilHashMap_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilHashMap *rptTerms);

__attribute__((unused)) static JavaUtilArrayList *OrgApacheLuceneSearchSloppyPhraseScorer_ppTermsBitSetsWithOrgApacheLuceneSearchPhrasePositionsArray_withJavaUtilHashMap_(OrgApacheLuceneSearchSloppyPhraseScorer *self, IOSObjectArray *rpp, JavaUtilHashMap *tord);

__attribute__((unused)) static void OrgApacheLuceneSearchSloppyPhraseScorer_unionTermGroupsWithJavaUtilArrayList_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilArrayList *bb);

__attribute__((unused)) static JavaUtilHashMap *OrgApacheLuceneSearchSloppyPhraseScorer_termGroupsWithJavaUtilLinkedHashMap_withJavaUtilArrayList_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilLinkedHashMap *tord, JavaUtilArrayList *bb);

@interface OrgApacheLuceneSearchSloppyPhraseScorer_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(OrgApacheLuceneSearchPhrasePositions *)pp1
               withId:(OrgApacheLuceneSearchPhrasePositions *)pp2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSloppyPhraseScorer_1)

__attribute__((unused)) static void OrgApacheLuceneSearchSloppyPhraseScorer_1_init(OrgApacheLuceneSearchSloppyPhraseScorer_1 *self);

__attribute__((unused)) static OrgApacheLuceneSearchSloppyPhraseScorer_1 *new_OrgApacheLuceneSearchSloppyPhraseScorer_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSloppyPhraseScorer_1 *create_OrgApacheLuceneSearchSloppyPhraseScorer_1_init(void);

@interface OrgApacheLuceneSearchSloppyPhraseScorer_2 : OrgApacheLuceneSearchTwoPhaseIterator {
 @public
  OrgApacheLuceneSearchSloppyPhraseScorer *this$0_;
}

- (instancetype)initWithOrgApacheLuceneSearchSloppyPhraseScorer:(OrgApacheLuceneSearchSloppyPhraseScorer *)outer$
                      withOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)approximation;

- (jboolean)matches;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSloppyPhraseScorer_2)

__attribute__((unused)) static void OrgApacheLuceneSearchSloppyPhraseScorer_2_initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSloppyPhraseScorer_2 *self, OrgApacheLuceneSearchSloppyPhraseScorer *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation);

__attribute__((unused)) static OrgApacheLuceneSearchSloppyPhraseScorer_2 *new_OrgApacheLuceneSearchSloppyPhraseScorer_2_initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSloppyPhraseScorer *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchSloppyPhraseScorer_2 *create_OrgApacheLuceneSearchSloppyPhraseScorer_2_initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSloppyPhraseScorer *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation);

@implementation OrgApacheLuceneSearchSloppyPhraseScorer

- (instancetype)initPackagePrivateWithOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)weight
        withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray:(IOSObjectArray *)postings
                                                          withInt:(jint)slop
        withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer:(OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *)docScorer
                                                      withBoolean:(jboolean)needsScores {
  OrgApacheLuceneSearchSloppyPhraseScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(self, weight, postings, slop, docScorer, needsScores);
  return self;
}

- (jfloat)phraseFreq {
  return OrgApacheLuceneSearchSloppyPhraseScorer_phraseFreq(self);
}

- (jboolean)advancePPWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp {
  return OrgApacheLuceneSearchSloppyPhraseScorer_advancePPWithOrgApacheLuceneSearchPhrasePositions_(self, pp);
}

- (jboolean)advanceRptsWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp {
  return OrgApacheLuceneSearchSloppyPhraseScorer_advanceRptsWithOrgApacheLuceneSearchPhrasePositions_(self, pp);
}

- (OrgApacheLuceneSearchPhrasePositions *)lesserWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp
                                                withOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp2 {
  return OrgApacheLuceneSearchSloppyPhraseScorer_lesserWithOrgApacheLuceneSearchPhrasePositions_withOrgApacheLuceneSearchPhrasePositions_(self, pp, pp2);
}

- (jint)collideWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp {
  return OrgApacheLuceneSearchSloppyPhraseScorer_collideWithOrgApacheLuceneSearchPhrasePositions_(self, pp);
}

- (jboolean)initPhrasePositions {
  return OrgApacheLuceneSearchSloppyPhraseScorer_initPhrasePositions(self);
}

- (void)initSimple {
  OrgApacheLuceneSearchSloppyPhraseScorer_initSimple(self);
}

- (jboolean)initComplex {
  return OrgApacheLuceneSearchSloppyPhraseScorer_initComplex(self);
}

- (void)placeFirstPositions {
  OrgApacheLuceneSearchSloppyPhraseScorer_placeFirstPositions(self);
}

- (void)fillQueue {
  OrgApacheLuceneSearchSloppyPhraseScorer_fillQueue(self);
}

- (jboolean)advanceRepeatGroups {
  return OrgApacheLuceneSearchSloppyPhraseScorer_advanceRepeatGroups(self);
}

- (jboolean)initFirstTime {
  return OrgApacheLuceneSearchSloppyPhraseScorer_initFirstTime(self);
}

- (void)sortRptGroupsWithJavaUtilArrayList:(JavaUtilArrayList *)rgs {
  OrgApacheLuceneSearchSloppyPhraseScorer_sortRptGroupsWithJavaUtilArrayList_(self, rgs);
}

- (JavaUtilArrayList *)gatherRptGroupsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)rptTerms {
  return OrgApacheLuceneSearchSloppyPhraseScorer_gatherRptGroupsWithJavaUtilLinkedHashMap_(self, rptTerms);
}

- (jint)tpPosWithOrgApacheLuceneSearchPhrasePositions:(OrgApacheLuceneSearchPhrasePositions *)pp {
  return OrgApacheLuceneSearchSloppyPhraseScorer_tpPosWithOrgApacheLuceneSearchPhrasePositions_(self, pp);
}

- (JavaUtilLinkedHashMap *)repeatingTerms {
  return OrgApacheLuceneSearchSloppyPhraseScorer_repeatingTerms(self);
}

- (IOSObjectArray *)repeatingPPsWithJavaUtilHashMap:(JavaUtilHashMap *)rptTerms {
  return OrgApacheLuceneSearchSloppyPhraseScorer_repeatingPPsWithJavaUtilHashMap_(self, rptTerms);
}

- (JavaUtilArrayList *)ppTermsBitSetsWithOrgApacheLuceneSearchPhrasePositionsArray:(IOSObjectArray *)rpp
                                                               withJavaUtilHashMap:(JavaUtilHashMap *)tord {
  return OrgApacheLuceneSearchSloppyPhraseScorer_ppTermsBitSetsWithOrgApacheLuceneSearchPhrasePositionsArray_withJavaUtilHashMap_(self, rpp, tord);
}

- (void)unionTermGroupsWithJavaUtilArrayList:(JavaUtilArrayList *)bb {
  OrgApacheLuceneSearchSloppyPhraseScorer_unionTermGroupsWithJavaUtilArrayList_(self, bb);
}

- (JavaUtilHashMap *)termGroupsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)tord
                                   withJavaUtilArrayList:(JavaUtilArrayList *)bb {
  return OrgApacheLuceneSearchSloppyPhraseScorer_termGroupsWithJavaUtilLinkedHashMap_withJavaUtilArrayList_(self, tord, bb);
}

- (jint)freq {
  return numMatches_;
}

- (jfloat)sloppyFreq {
  return sloppyFreq_;
}

- (jint)docID {
  return [((OrgApacheLuceneSearchConjunctionDISI *) nil_chk(conjunction_)) docID];
}

- (jint)nextDoc {
  jint doc;
  for (doc = [((OrgApacheLuceneSearchConjunctionDISI *) nil_chk(conjunction_)) nextDoc]; doc != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS; doc = [conjunction_ nextDoc]) {
    sloppyFreq_ = OrgApacheLuceneSearchSloppyPhraseScorer_phraseFreq(self);
    if (sloppyFreq_ != 0.0f) {
      break;
    }
  }
  return doc;
}

- (jfloat)score {
  return [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *) nil_chk(docScorer_)) scoreWithInt:[self docID] withFloat:sloppyFreq_];
}

- (jint)advanceWithInt:(jint)target {
  JreAssert(target > [self docID], @"org/apache/lucene/search/SloppyPhraseScorer.java:571 condition failed: assert target > docID();");
  jint doc;
  for (doc = [((OrgApacheLuceneSearchConjunctionDISI *) nil_chk(conjunction_)) advanceWithInt:target]; doc != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS; doc = [conjunction_ nextDoc]) {
    sloppyFreq_ = OrgApacheLuceneSearchSloppyPhraseScorer_phraseFreq(self);
    if (sloppyFreq_ != 0.0f) {
      break;
    }
  }
  return doc;
}

- (jlong)cost {
  return [((OrgApacheLuceneSearchConjunctionDISI *) nil_chk(conjunction_)) cost];
}

- (NSString *)description {
  return JreStrcat("$@C", @"scorer(", weight_, ')');
}

- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator {
  return create_OrgApacheLuceneSearchSloppyPhraseScorer_2_initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_(self, conjunction_);
}

- (void)dealloc {
  RELEASE_(conjunction_);
  RELEASE_(phrasePositions_);
  RELEASE_(docScorer_);
  RELEASE_(pq_);
  RELEASE_(rptGroups_);
  RELEASE_(rptStack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 3, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchPhrasePositions;", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x2, 11, 12, 1, 13, -1, -1 },
    { NULL, "I", 0x12, 14, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLinkedHashMap;", 0x2, -1, -1, -1, 15, -1, -1 },
    { NULL, "[LOrgApacheLuceneSearchPhrasePositions;", 0x2, 16, 17, -1, 18, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x2, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x2, 22, 9, -1, 23, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x2, 24, 25, 1, 26, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 28, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 29, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchTwoPhaseIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneSearchWeight:withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray:withInt:withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer:withBoolean:);
  methods[1].selector = @selector(phraseFreq);
  methods[2].selector = @selector(advancePPWithOrgApacheLuceneSearchPhrasePositions:);
  methods[3].selector = @selector(advanceRptsWithOrgApacheLuceneSearchPhrasePositions:);
  methods[4].selector = @selector(lesserWithOrgApacheLuceneSearchPhrasePositions:withOrgApacheLuceneSearchPhrasePositions:);
  methods[5].selector = @selector(collideWithOrgApacheLuceneSearchPhrasePositions:);
  methods[6].selector = @selector(initPhrasePositions);
  methods[7].selector = @selector(initSimple);
  methods[8].selector = @selector(initComplex);
  methods[9].selector = @selector(placeFirstPositions);
  methods[10].selector = @selector(fillQueue);
  methods[11].selector = @selector(advanceRepeatGroups);
  methods[12].selector = @selector(initFirstTime);
  methods[13].selector = @selector(sortRptGroupsWithJavaUtilArrayList:);
  methods[14].selector = @selector(gatherRptGroupsWithJavaUtilLinkedHashMap:);
  methods[15].selector = @selector(tpPosWithOrgApacheLuceneSearchPhrasePositions:);
  methods[16].selector = @selector(repeatingTerms);
  methods[17].selector = @selector(repeatingPPsWithJavaUtilHashMap:);
  methods[18].selector = @selector(ppTermsBitSetsWithOrgApacheLuceneSearchPhrasePositionsArray:withJavaUtilHashMap:);
  methods[19].selector = @selector(unionTermGroupsWithJavaUtilArrayList:);
  methods[20].selector = @selector(termGroupsWithJavaUtilLinkedHashMap:withJavaUtilArrayList:);
  methods[21].selector = @selector(freq);
  methods[22].selector = @selector(sloppyFreq);
  methods[23].selector = @selector(docID);
  methods[24].selector = @selector(nextDoc);
  methods[25].selector = @selector(score);
  methods[26].selector = @selector(advanceWithInt:);
  methods[27].selector = @selector(cost);
  methods[28].selector = @selector(description);
  methods[29].selector = @selector(asTwoPhaseIterator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "conjunction_", "LOrgApacheLuceneSearchConjunctionDISI;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "phrasePositions_", "[LOrgApacheLuceneSearchPhrasePositions;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sloppyFreq_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docScorer_", "LOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "slop_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numPostings_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pq_", "LOrgApacheLuceneSearchPhraseQueue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasRpts_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "checkedRpts_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasMultiTermRpts_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rptGroups_", "[[LOrgApacheLuceneSearchPhrasePositions;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rptStack_", "[LOrgApacheLuceneSearchPhrasePositions;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numMatches_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "needsScores_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchWeight;[LOrgApacheLuceneSearchPhraseQuery_PostingsAndFreq;ILOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer;Z", "LJavaIoIOException;", "advancePP", "LOrgApacheLuceneSearchPhrasePositions;", "advanceRpts", "lesser", "LOrgApacheLuceneSearchPhrasePositions;LOrgApacheLuceneSearchPhrasePositions;", "collide", "sortRptGroups", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Ljava/util/ArrayList<Lorg/apache/lucene/search/PhrasePositions;>;>;)V", "gatherRptGroups", "LJavaUtilLinkedHashMap;", "(Ljava/util/LinkedHashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Integer;>;)Ljava/util/ArrayList<Ljava/util/ArrayList<Lorg/apache/lucene/search/PhrasePositions;>;>;", "tpPos", "()Ljava/util/LinkedHashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Integer;>;", "repeatingPPs", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Integer;>;)[Lorg/apache/lucene/search/PhrasePositions;", "ppTermsBitSets", "[LOrgApacheLuceneSearchPhrasePositions;LJavaUtilHashMap;", "([Lorg/apache/lucene/search/PhrasePositions;Ljava/util/HashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Integer;>;)Ljava/util/ArrayList<Lorg/apache/lucene/util/FixedBitSet;>;", "unionTermGroups", "(Ljava/util/ArrayList<Lorg/apache/lucene/util/FixedBitSet;>;)V", "termGroups", "LJavaUtilLinkedHashMap;LJavaUtilArrayList;", "(Ljava/util/LinkedHashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Integer;>;Ljava/util/ArrayList<Lorg/apache/lucene/util/FixedBitSet;>;)Ljava/util/HashMap<Lorg/apache/lucene/index/Term;Ljava/lang/Integer;>;", "advance", "I", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSloppyPhraseScorer = { "SloppyPhraseScorer", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x10, 30, 15, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchSloppyPhraseScorer;
}

@end

void OrgApacheLuceneSearchSloppyPhraseScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchWeight *weight, IOSObjectArray *postings, jint slop, OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer, jboolean needsScores) {
  OrgApacheLuceneSearchScorer_initWithOrgApacheLuceneSearchWeight_(self, weight);
  JreStrongAssign(&self->docScorer_, docScorer);
  self->needsScores_ = needsScores;
  self->slop_ = slop;
  self->numPostings_ = postings == nil ? 0 : postings->size_;
  JreStrongAssignAndConsume(&self->pq_, new_OrgApacheLuceneSearchPhraseQueue_initPackagePrivateWithInt_(((IOSObjectArray *) nil_chk(postings))->size_));
  IOSObjectArray *iterators = [IOSObjectArray arrayWithLength:postings->size_ type:OrgApacheLuceneSearchDocIdSetIterator_class_()];
  JreStrongAssignAndConsume(&self->phrasePositions_, [IOSObjectArray newArrayWithLength:postings->size_ type:OrgApacheLuceneSearchPhrasePositions_class_()]);
  for (jint i = 0; i < postings->size_; ++i) {
    IOSObjectArray_Set(iterators, i, ((OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *) nil_chk(IOSObjectArray_Get(postings, i)))->postings_);
    IOSObjectArray_SetAndConsume(self->phrasePositions_, i, new_OrgApacheLuceneSearchPhrasePositions_initPackagePrivateWithOrgApacheLuceneIndexPostingsEnum_withInt_withInt_withOrgApacheLuceneIndexTermArray_(((OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *) nil_chk(IOSObjectArray_Get(postings, i)))->postings_, ((OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *) nil_chk(IOSObjectArray_Get(postings, i)))->position_, i, ((OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *) nil_chk(IOSObjectArray_Get(postings, i)))->terms_));
  }
  JreStrongAssign(&self->conjunction_, OrgApacheLuceneSearchConjunctionDISI_intersectWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_(iterators)));
}

OrgApacheLuceneSearchSloppyPhraseScorer *new_OrgApacheLuceneSearchSloppyPhraseScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(OrgApacheLuceneSearchWeight *weight, IOSObjectArray *postings, jint slop, OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer, jboolean needsScores) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSloppyPhraseScorer, initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_, weight, postings, slop, docScorer, needsScores)
}

OrgApacheLuceneSearchSloppyPhraseScorer *create_OrgApacheLuceneSearchSloppyPhraseScorer_initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_(OrgApacheLuceneSearchWeight *weight, IOSObjectArray *postings, jint slop, OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *docScorer, jboolean needsScores) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSloppyPhraseScorer, initPackagePrivateWithOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchPhraseQuery_PostingsAndFreqArray_withInt_withOrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer_withBoolean_, weight, postings, slop, docScorer, needsScores)
}

jfloat OrgApacheLuceneSearchSloppyPhraseScorer_phraseFreq(OrgApacheLuceneSearchSloppyPhraseScorer *self) {
  if (!OrgApacheLuceneSearchSloppyPhraseScorer_initPhrasePositions(self)) {
    return 0.0f;
  }
  jfloat freq = 0.0f;
  self->numMatches_ = 0;
  OrgApacheLuceneSearchPhrasePositions *pp = JreRetainedLocalValue([((OrgApacheLuceneSearchPhraseQueue *) nil_chk(self->pq_)) pop]);
  jint matchLength = self->end_ - ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->position_;
  jint next = ((OrgApacheLuceneSearchPhrasePositions *) nil_chk([self->pq_ top]))->position_;
  while (OrgApacheLuceneSearchSloppyPhraseScorer_advancePPWithOrgApacheLuceneSearchPhrasePositions_(self, pp)) {
    if (self->hasRpts_ && !OrgApacheLuceneSearchSloppyPhraseScorer_advanceRptsWithOrgApacheLuceneSearchPhrasePositions_(self, pp)) {
      break;
    }
    if (pp->position_ > next) {
      if (matchLength <= self->slop_) {
        JrePlusAssignFloatF(&freq, [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *) nil_chk(self->docScorer_)) computeSlopFactorWithInt:matchLength]);
        self->numMatches_++;
        if (!self->needsScores_) {
          return freq;
        }
      }
      [self->pq_ addWithId:pp];
      pp = [self->pq_ pop];
      next = ((OrgApacheLuceneSearchPhrasePositions *) nil_chk([self->pq_ top]))->position_;
      matchLength = self->end_ - ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->position_;
    }
    else {
      jint matchLength2 = self->end_ - pp->position_;
      if (matchLength2 < matchLength) {
        matchLength = matchLength2;
      }
    }
  }
  if (matchLength <= self->slop_) {
    JrePlusAssignFloatF(&freq, [((OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *) nil_chk(self->docScorer_)) computeSlopFactorWithInt:matchLength]);
    self->numMatches_++;
  }
  return freq;
}

jboolean OrgApacheLuceneSearchSloppyPhraseScorer_advancePPWithOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp) {
  if (![((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp)) nextPosition]) {
    return false;
  }
  if (pp->position_ > self->end_) {
    self->end_ = pp->position_;
  }
  return true;
}

jboolean OrgApacheLuceneSearchSloppyPhraseScorer_advanceRptsWithOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp) {
  if (((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->rptGroup_ < 0) {
    return true;
  }
  IOSObjectArray *rg = IOSObjectArray_Get(nil_chk(self->rptGroups_), pp->rptGroup_);
  OrgApacheLuceneUtilFixedBitSet *bits = create_OrgApacheLuceneUtilFixedBitSet_initWithInt_(((IOSObjectArray *) nil_chk(rg))->size_);
  jint k0 = pp->rptInd_;
  jint k;
  while ((k = OrgApacheLuceneSearchSloppyPhraseScorer_collideWithOrgApacheLuceneSearchPhrasePositions_(self, pp)) >= 0) {
    pp = OrgApacheLuceneSearchSloppyPhraseScorer_lesserWithOrgApacheLuceneSearchPhrasePositions_withOrgApacheLuceneSearchPhrasePositions_(self, pp, IOSObjectArray_Get(rg, k));
    if (!OrgApacheLuceneSearchSloppyPhraseScorer_advancePPWithOrgApacheLuceneSearchPhrasePositions_(self, pp)) {
      return false;
    }
    if (k != k0) {
      bits = OrgApacheLuceneUtilFixedBitSet_ensureCapacityWithOrgApacheLuceneUtilFixedBitSet_withInt_(bits, k);
      [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(bits)) setWithInt:k];
    }
  }
  jint n = 0;
  jint numBits = [bits length];
  while ([bits cardinality] > 0) {
    OrgApacheLuceneSearchPhrasePositions *pp2 = JreRetainedLocalValue([((OrgApacheLuceneSearchPhraseQueue *) nil_chk(self->pq_)) pop]);
    IOSObjectArray_Set(nil_chk(self->rptStack_), n++, pp2);
    if (((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp2))->rptGroup_ >= 0 && pp2->rptInd_ < numBits && [bits getWithInt:pp2->rptInd_]) {
      [bits clearWithInt:pp2->rptInd_];
    }
  }
  for (jint i = n - 1; i >= 0; i--) {
    [((OrgApacheLuceneSearchPhraseQueue *) nil_chk(self->pq_)) addWithId:IOSObjectArray_Get(nil_chk(self->rptStack_), i)];
  }
  return true;
}

OrgApacheLuceneSearchPhrasePositions *OrgApacheLuceneSearchSloppyPhraseScorer_lesserWithOrgApacheLuceneSearchPhrasePositions_withOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp, OrgApacheLuceneSearchPhrasePositions *pp2) {
  if (((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->position_ < ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp2))->position_ || (pp->position_ == pp2->position_ && pp->offset_ < pp2->offset_)) {
    return pp;
  }
  return pp2;
}

jint OrgApacheLuceneSearchSloppyPhraseScorer_collideWithOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp) {
  jint tpPos = OrgApacheLuceneSearchSloppyPhraseScorer_tpPosWithOrgApacheLuceneSearchPhrasePositions_(self, pp);
  IOSObjectArray *rg = IOSObjectArray_Get(nil_chk(self->rptGroups_), ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->rptGroup_);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rg))->size_; i++) {
    OrgApacheLuceneSearchPhrasePositions *pp2 = IOSObjectArray_Get(rg, i);
    if (!JreObjectEqualsEquals(pp2, pp) && OrgApacheLuceneSearchSloppyPhraseScorer_tpPosWithOrgApacheLuceneSearchPhrasePositions_(self, pp2) == tpPos) {
      return ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp2))->rptInd_;
    }
  }
  return -1;
}

jboolean OrgApacheLuceneSearchSloppyPhraseScorer_initPhrasePositions(OrgApacheLuceneSearchSloppyPhraseScorer *self) {
  self->end_ = JavaLangInteger_MIN_VALUE;
  if (!self->checkedRpts_) {
    return OrgApacheLuceneSearchSloppyPhraseScorer_initFirstTime(self);
  }
  if (!self->hasRpts_) {
    OrgApacheLuceneSearchSloppyPhraseScorer_initSimple(self);
    return true;
  }
  return OrgApacheLuceneSearchSloppyPhraseScorer_initComplex(self);
}

void OrgApacheLuceneSearchSloppyPhraseScorer_initSimple(OrgApacheLuceneSearchSloppyPhraseScorer *self) {
  [((OrgApacheLuceneSearchPhraseQueue *) nil_chk(self->pq_)) clear];
  {
    IOSObjectArray *a__ = self->phrasePositions_;
    OrgApacheLuceneSearchPhrasePositions * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchPhrasePositions * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchPhrasePositions *pp = *b__++;
      [((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp)) firstPosition];
      if (pp->position_ > self->end_) {
        self->end_ = pp->position_;
      }
      [self->pq_ addWithId:pp];
    }
  }
}

jboolean OrgApacheLuceneSearchSloppyPhraseScorer_initComplex(OrgApacheLuceneSearchSloppyPhraseScorer *self) {
  OrgApacheLuceneSearchSloppyPhraseScorer_placeFirstPositions(self);
  if (!OrgApacheLuceneSearchSloppyPhraseScorer_advanceRepeatGroups(self)) {
    return false;
  }
  OrgApacheLuceneSearchSloppyPhraseScorer_fillQueue(self);
  return true;
}

void OrgApacheLuceneSearchSloppyPhraseScorer_placeFirstPositions(OrgApacheLuceneSearchSloppyPhraseScorer *self) {
  {
    IOSObjectArray *a__ = self->phrasePositions_;
    OrgApacheLuceneSearchPhrasePositions * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchPhrasePositions * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchPhrasePositions *pp = *b__++;
      [((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp)) firstPosition];
    }
  }
}

void OrgApacheLuceneSearchSloppyPhraseScorer_fillQueue(OrgApacheLuceneSearchSloppyPhraseScorer *self) {
  [((OrgApacheLuceneSearchPhraseQueue *) nil_chk(self->pq_)) clear];
  {
    IOSObjectArray *a__ = self->phrasePositions_;
    OrgApacheLuceneSearchPhrasePositions * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchPhrasePositions * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchPhrasePositions *pp = *b__++;
      if (((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->position_ > self->end_) {
        self->end_ = pp->position_;
      }
      [self->pq_ addWithId:pp];
    }
  }
}

jboolean OrgApacheLuceneSearchSloppyPhraseScorer_advanceRepeatGroups(OrgApacheLuceneSearchSloppyPhraseScorer *self) {
  {
    IOSObjectArray *a__ = self->rptGroups_;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *rg = *b__++;
      if (self->hasMultiTermRpts_) {
        jint incr;
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rg))->size_; i += incr) {
          incr = 1;
          OrgApacheLuceneSearchPhrasePositions *pp = IOSObjectArray_Get(rg, i);
          jint k;
          while ((k = OrgApacheLuceneSearchSloppyPhraseScorer_collideWithOrgApacheLuceneSearchPhrasePositions_(self, pp)) >= 0) {
            OrgApacheLuceneSearchPhrasePositions *pp2 = OrgApacheLuceneSearchSloppyPhraseScorer_lesserWithOrgApacheLuceneSearchPhrasePositions_withOrgApacheLuceneSearchPhrasePositions_(self, pp, IOSObjectArray_Get(rg, k));
            if (!OrgApacheLuceneSearchSloppyPhraseScorer_advancePPWithOrgApacheLuceneSearchPhrasePositions_(self, pp2)) {
              return false;
            }
            if (((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp2))->rptInd_ < i) {
              incr = 0;
              break;
            }
          }
        }
      }
      else {
        for (jint j = 1; j < ((IOSObjectArray *) nil_chk(rg))->size_; j++) {
          for (jint k = 0; k < j; k++) {
            if (![((OrgApacheLuceneSearchPhrasePositions *) nil_chk(IOSObjectArray_Get(rg, j))) nextPosition]) {
              return false;
            }
          }
        }
      }
    }
  }
  return true;
}

jboolean OrgApacheLuceneSearchSloppyPhraseScorer_initFirstTime(OrgApacheLuceneSearchSloppyPhraseScorer *self) {
  self->checkedRpts_ = true;
  OrgApacheLuceneSearchSloppyPhraseScorer_placeFirstPositions(self);
  JavaUtilLinkedHashMap *rptTerms = OrgApacheLuceneSearchSloppyPhraseScorer_repeatingTerms(self);
  self->hasRpts_ = ![((JavaUtilLinkedHashMap *) nil_chk(rptTerms)) isEmpty];
  if (self->hasRpts_) {
    JreStrongAssignAndConsume(&self->rptStack_, [IOSObjectArray newArrayWithLength:self->numPostings_ type:OrgApacheLuceneSearchPhrasePositions_class_()]);
    JavaUtilArrayList *rgs = OrgApacheLuceneSearchSloppyPhraseScorer_gatherRptGroupsWithJavaUtilLinkedHashMap_(self, rptTerms);
    OrgApacheLuceneSearchSloppyPhraseScorer_sortRptGroupsWithJavaUtilArrayList_(self, rgs);
    if (!OrgApacheLuceneSearchSloppyPhraseScorer_advanceRepeatGroups(self)) {
      return false;
    }
  }
  OrgApacheLuceneSearchSloppyPhraseScorer_fillQueue(self);
  return true;
}

void OrgApacheLuceneSearchSloppyPhraseScorer_sortRptGroupsWithJavaUtilArrayList_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilArrayList *rgs) {
  JreStrongAssignAndConsume(&self->rptGroups_, [IOSObjectArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(rgs)) size] type:IOSClass_arrayType(OrgApacheLuceneSearchPhrasePositions_class_(), 1)]);
  id<JavaUtilComparator> cmprtr = create_OrgApacheLuceneSearchSloppyPhraseScorer_1_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->rptGroups_))->size_; i++) {
    IOSObjectArray *rg = [((JavaUtilArrayList *) nil_chk([rgs getWithInt:i])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchPhrasePositions_class_()]];
    JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(rg, cmprtr);
    IOSObjectArray_Set(nil_chk(self->rptGroups_), i, rg);
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(rg))->size_; j++) {
      ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(IOSObjectArray_Get(rg, j)))->rptInd_ = j;
    }
  }
}

JavaUtilArrayList *OrgApacheLuceneSearchSloppyPhraseScorer_gatherRptGroupsWithJavaUtilLinkedHashMap_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilLinkedHashMap *rptTerms) {
  IOSObjectArray *rpp = OrgApacheLuceneSearchSloppyPhraseScorer_repeatingPPsWithJavaUtilHashMap_(self, rptTerms);
  JavaUtilArrayList *res = create_JavaUtilArrayList_init();
  if (!self->hasMultiTermRpts_) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rpp))->size_; i++) {
      OrgApacheLuceneSearchPhrasePositions *pp = IOSObjectArray_Get(rpp, i);
      if (((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->rptGroup_ >= 0) continue;
      jint tpPos = OrgApacheLuceneSearchSloppyPhraseScorer_tpPosWithOrgApacheLuceneSearchPhrasePositions_(self, pp);
      for (jint j = i + 1; j < rpp->size_; j++) {
        OrgApacheLuceneSearchPhrasePositions *pp2 = IOSObjectArray_Get(rpp, j);
        if (((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp2))->rptGroup_ >= 0 || pp2->offset_ == pp->offset_ || OrgApacheLuceneSearchSloppyPhraseScorer_tpPosWithOrgApacheLuceneSearchPhrasePositions_(self, pp2) != tpPos) {
          continue;
        }
        jint g = pp->rptGroup_;
        if (g < 0) {
          g = [res size];
          pp->rptGroup_ = g;
          JavaUtilArrayList *rl = create_JavaUtilArrayList_initWithInt_(2);
          [rl addWithId:pp];
          [res addWithId:rl];
        }
        pp2->rptGroup_ = g;
        [((JavaUtilArrayList *) nil_chk([res getWithInt:g])) addWithId:pp2];
      }
    }
  }
  else {
    JavaUtilArrayList *tmp = create_JavaUtilArrayList_init();
    JavaUtilArrayList *bb = OrgApacheLuceneSearchSloppyPhraseScorer_ppTermsBitSetsWithOrgApacheLuceneSearchPhrasePositionsArray_withJavaUtilHashMap_(self, rpp, rptTerms);
    OrgApacheLuceneSearchSloppyPhraseScorer_unionTermGroupsWithJavaUtilArrayList_(self, bb);
    JavaUtilHashMap *tg = OrgApacheLuceneSearchSloppyPhraseScorer_termGroupsWithJavaUtilLinkedHashMap_withJavaUtilArrayList_(self, rptTerms, bb);
    JavaUtilHashSet *distinctGroupIDs = create_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(tg)) values]);
    for (jint i = 0; i < [distinctGroupIDs size]; i++) {
      [tmp addWithId:create_JavaUtilHashSet_init()];
    }
    {
      IOSObjectArray *a__ = rpp;
      OrgApacheLuceneSearchPhrasePositions * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchPhrasePositions * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchPhrasePositions *pp = *b__++;
        {
          IOSObjectArray *a__ = ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->terms_;
          OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            OrgApacheLuceneIndexTerm *t = *b__++;
            if ([((JavaUtilLinkedHashMap *) nil_chk(rptTerms)) containsKeyWithId:t]) {
              jint g = [((JavaLangInteger *) nil_chk([tg getWithId:t])) intValue];
              [((JavaUtilHashSet *) nil_chk([tmp getWithInt:g])) addWithId:pp];
              JreAssert(pp->rptGroup_ == -1 || pp->rptGroup_ == g, @"org/apache/lucene/search/SloppyPhraseScorer.java:419 condition failed: assert pp.rptGroup==-1 || pp.rptGroup==g;");
              pp->rptGroup_ = g;
            }
          }
        }
      }
    }
    for (JavaUtilHashSet * __strong hs in tmp) {
      [res addWithId:create_JavaUtilArrayList_initWithJavaUtilCollection_(hs)];
    }
  }
  return res;
}

jint OrgApacheLuceneSearchSloppyPhraseScorer_tpPosWithOrgApacheLuceneSearchPhrasePositions_(OrgApacheLuceneSearchSloppyPhraseScorer *self, OrgApacheLuceneSearchPhrasePositions *pp) {
  return ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->position_ + pp->offset_;
}

JavaUtilLinkedHashMap *OrgApacheLuceneSearchSloppyPhraseScorer_repeatingTerms(OrgApacheLuceneSearchSloppyPhraseScorer *self) {
  JavaUtilLinkedHashMap *tord = create_JavaUtilLinkedHashMap_init();
  JavaUtilHashMap *tcnt = create_JavaUtilHashMap_init();
  {
    IOSObjectArray *a__ = self->phrasePositions_;
    OrgApacheLuceneSearchPhrasePositions * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchPhrasePositions * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchPhrasePositions *pp = *b__++;
      {
        IOSObjectArray *a__ = ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->terms_;
        OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheLuceneIndexTerm *t = *b__++;
          JavaLangInteger *cnt0 = JreRetainedLocalValue([tcnt getWithId:t]);
          JavaLangInteger *cnt = cnt0 == nil ? create_JavaLangInteger_initWithInt_(1) : create_JavaLangInteger_initWithInt_(1 + [cnt0 intValue]);
          [tcnt putWithId:t withId:cnt];
          if ([cnt intValue] == 2) {
            [tord putWithId:t withId:JavaLangInteger_valueOfWithInt_([tord size])];
          }
        }
      }
    }
  }
  return tord;
}

IOSObjectArray *OrgApacheLuceneSearchSloppyPhraseScorer_repeatingPPsWithJavaUtilHashMap_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilHashMap *rptTerms) {
  JavaUtilArrayList *rp = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = self->phrasePositions_;
    OrgApacheLuceneSearchPhrasePositions * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchPhrasePositions * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchPhrasePositions *pp = *b__++;
      {
        IOSObjectArray *a__ = ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->terms_;
        OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheLuceneIndexTerm *t = *b__++;
          if ([((JavaUtilHashMap *) nil_chk(rptTerms)) containsKeyWithId:t]) {
            [rp addWithId:pp];
            self->hasMultiTermRpts_ |= (((IOSObjectArray *) nil_chk(pp->terms_))->size_ > 1);
            break;
          }
        }
      }
    }
  }
  return [rp toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneSearchPhrasePositions_class_()]];
}

JavaUtilArrayList *OrgApacheLuceneSearchSloppyPhraseScorer_ppTermsBitSetsWithOrgApacheLuceneSearchPhrasePositionsArray_withJavaUtilHashMap_(OrgApacheLuceneSearchSloppyPhraseScorer *self, IOSObjectArray *rpp, JavaUtilHashMap *tord) {
  JavaUtilArrayList *bb = create_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(rpp))->size_);
  {
    IOSObjectArray *a__ = rpp;
    OrgApacheLuceneSearchPhrasePositions * const *b__ = a__->buffer_;
    OrgApacheLuceneSearchPhrasePositions * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchPhrasePositions *pp = *b__++;
      OrgApacheLuceneUtilFixedBitSet *b = create_OrgApacheLuceneUtilFixedBitSet_initWithInt_([((JavaUtilHashMap *) nil_chk(tord)) size]);
      JavaLangInteger *ord;
      {
        IOSObjectArray *a__ = ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp))->terms_;
        OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          OrgApacheLuceneIndexTerm *t = *b__++;
          if ((ord = [tord getWithId:t]) != nil) {
            [b setWithInt:[((JavaLangInteger *) nil_chk(ord)) intValue]];
          }
        }
      }
      [bb addWithId:b];
    }
  }
  return bb;
}

void OrgApacheLuceneSearchSloppyPhraseScorer_unionTermGroupsWithJavaUtilArrayList_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilArrayList *bb) {
  jint incr;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(bb)) size] - 1; i += incr) {
    incr = 1;
    jint j = i + 1;
    while (j < [bb size]) {
      if ([((OrgApacheLuceneUtilFixedBitSet *) nil_chk([bb getWithInt:i])) intersectsWithOrgApacheLuceneUtilFixedBitSet:[bb getWithInt:j]]) {
        [((OrgApacheLuceneUtilFixedBitSet *) nil_chk([bb getWithInt:i])) or__WithOrgApacheLuceneUtilFixedBitSet:[bb getWithInt:j]];
        [bb removeWithInt:j];
        incr = 0;
      }
      else {
        ++j;
      }
    }
  }
}

JavaUtilHashMap *OrgApacheLuceneSearchSloppyPhraseScorer_termGroupsWithJavaUtilLinkedHashMap_withJavaUtilArrayList_(OrgApacheLuceneSearchSloppyPhraseScorer *self, JavaUtilLinkedHashMap *tord, JavaUtilArrayList *bb) {
  JavaUtilHashMap *tg = create_JavaUtilHashMap_init();
  IOSObjectArray *t = [((id<JavaUtilSet>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(tord)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(bb)) size]; i++) {
    OrgApacheLuceneUtilFixedBitSet *bits = JreRetainedLocalValue([bb getWithInt:i]);
    for (jint ord = [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(bits)) nextSetBitWithInt:0]; ord != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS; ord = ord + 1 >= [bits length] ? OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS : [bits nextSetBitWithInt:ord + 1]) {
      [tg putWithId:IOSObjectArray_Get(nil_chk(t), ord) withId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  return tg;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchSloppyPhraseScorer)

@implementation OrgApacheLuceneSearchSloppyPhraseScorer_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchSloppyPhraseScorer_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgApacheLuceneSearchPhrasePositions *)pp1
               withId:(OrgApacheLuceneSearchPhrasePositions *)pp2 {
  return ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp1))->offset_ - ((OrgApacheLuceneSearchPhrasePositions *) nil_chk(pp2))->offset_;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LOrgApacheLuceneSearchPhrasePositions;LOrgApacheLuceneSearchPhrasePositions;", "LOrgApacheLuceneSearchSloppyPhraseScorer;", "sortRptGroupsWithJavaUtilArrayList:", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/search/PhrasePositions;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSloppyPhraseScorer_1 = { "", "org.apache.lucene.search", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 2, -1, 3, 4, -1 };
  return &_OrgApacheLuceneSearchSloppyPhraseScorer_1;
}

@end

void OrgApacheLuceneSearchSloppyPhraseScorer_1_init(OrgApacheLuceneSearchSloppyPhraseScorer_1 *self) {
  NSObject_init(self);
}

OrgApacheLuceneSearchSloppyPhraseScorer_1 *new_OrgApacheLuceneSearchSloppyPhraseScorer_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSloppyPhraseScorer_1, init)
}

OrgApacheLuceneSearchSloppyPhraseScorer_1 *create_OrgApacheLuceneSearchSloppyPhraseScorer_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSloppyPhraseScorer_1, init)
}

@implementation OrgApacheLuceneSearchSloppyPhraseScorer_2

- (instancetype)initWithOrgApacheLuceneSearchSloppyPhraseScorer:(OrgApacheLuceneSearchSloppyPhraseScorer *)outer$
                      withOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)approximation {
  OrgApacheLuceneSearchSloppyPhraseScorer_2_initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_(self, outer$, approximation);
  return self;
}

- (jboolean)matches {
  this$0_->sloppyFreq_ = OrgApacheLuceneSearchSloppyPhraseScorer_phraseFreq(this$0_);
  return this$0_->sloppyFreq_ != 0.0f;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchSloppyPhraseScorer:withOrgApacheLuceneSearchDocIdSetIterator:);
  methods[1].selector = @selector(matches);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchSloppyPhraseScorer;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchSloppyPhraseScorer;LOrgApacheLuceneSearchDocIdSetIterator;", "LJavaIoIOException;", "LOrgApacheLuceneSearchSloppyPhraseScorer;", "asTwoPhaseIterator" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchSloppyPhraseScorer_2 = { "", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x8010, 2, 1, 2, -1, 3, -1, -1 };
  return &_OrgApacheLuceneSearchSloppyPhraseScorer_2;
}

@end

void OrgApacheLuceneSearchSloppyPhraseScorer_2_initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSloppyPhraseScorer_2 *self, OrgApacheLuceneSearchSloppyPhraseScorer *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneSearchTwoPhaseIterator_initWithOrgApacheLuceneSearchDocIdSetIterator_(self, approximation);
}

OrgApacheLuceneSearchSloppyPhraseScorer_2 *new_OrgApacheLuceneSearchSloppyPhraseScorer_2_initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSloppyPhraseScorer *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchSloppyPhraseScorer_2, initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_, outer$, approximation)
}

OrgApacheLuceneSearchSloppyPhraseScorer_2 *create_OrgApacheLuceneSearchSloppyPhraseScorer_2_initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_(OrgApacheLuceneSearchSloppyPhraseScorer *outer$, OrgApacheLuceneSearchDocIdSetIterator *approximation) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchSloppyPhraseScorer_2, initWithOrgApacheLuceneSearchSloppyPhraseScorer_withOrgApacheLuceneSearchDocIdSetIterator_, outer$, approximation)
}
