//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLEncoder.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/search/highlight/SimpleHTMLEncoder.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/highlight/SimpleHTMLEncoder must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneSearchHighlightSimpleHTMLEncoder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchHighlightSimpleHTMLEncoder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)encodeTextWithNSString:(NSString *)originalText {
  return OrgApacheLuceneSearchHighlightSimpleHTMLEncoder_htmlEncodeWithNSString_(originalText);
}

+ (NSString *)htmlEncodeWithNSString:(NSString *)plainText {
  return OrgApacheLuceneSearchHighlightSimpleHTMLEncoder_htmlEncodeWithNSString_(plainText);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(encodeTextWithNSString:);
  methods[2].selector = @selector(htmlEncodeWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "encodeText", "LNSString;", "htmlEncode" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightSimpleHTMLEncoder = { "SimpleHTMLEncoder", "org.apache.lucene.search.highlight", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchHighlightSimpleHTMLEncoder;
}

@end

void OrgApacheLuceneSearchHighlightSimpleHTMLEncoder_init(OrgApacheLuceneSearchHighlightSimpleHTMLEncoder *self) {
  NSObject_init(self);
}

OrgApacheLuceneSearchHighlightSimpleHTMLEncoder *new_OrgApacheLuceneSearchHighlightSimpleHTMLEncoder_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightSimpleHTMLEncoder, init)
}

OrgApacheLuceneSearchHighlightSimpleHTMLEncoder *create_OrgApacheLuceneSearchHighlightSimpleHTMLEncoder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightSimpleHTMLEncoder, init)
}

NSString *OrgApacheLuceneSearchHighlightSimpleHTMLEncoder_htmlEncodeWithNSString_(NSString *plainText) {
  OrgApacheLuceneSearchHighlightSimpleHTMLEncoder_initialize();
  if (plainText == nil || [plainText java_length] == 0) {
    return @"";
  }
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_initWithInt_([plainText java_length]);
  for (jint index = 0; index < [plainText java_length]; index++) {
    jchar ch = [plainText charAtWithInt:index];
    switch (ch) {
      case '"':
      [result appendWithNSString:@"&quot;"];
      break;
      case '&':
      [result appendWithNSString:@"&amp;"];
      break;
      case '<':
      [result appendWithNSString:@"&lt;"];
      break;
      case '>':
      [result appendWithNSString:@"&gt;"];
      break;
      case '\'':
      [result appendWithNSString:@"&#x27;"];
      break;
      case '/':
      [result appendWithNSString:@"&#x2F;"];
      break;
      default:
      [result appendWithChar:ch];
    }
  }
  return [result description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchHighlightSimpleHTMLEncoder)
