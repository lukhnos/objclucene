//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/FilterLeafReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/memory/MemoryIndex.h"
#include "org/apache/lucene/queries/CommonTermsQuery.h"
#include "org/apache/lucene/queries/CustomScoreQuery.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/ConstantScoreQuery.h"
#include "org/apache/lucene/search/DisjunctionMaxQuery.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/FilteredQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/highlight/OffsetLimitTokenFilter.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "org/apache/lucene/search/highlight/TermVectorLeafReader.h"
#include "org/apache/lucene/search/highlight/TokenStreamFromTermVector.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTermExtractor.h"
#include "org/apache/lucene/search/join/ToChildBlockJoinQuery.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "org/apache/lucene/search/spans/FieldMaskingSpanQuery.h"
#include "org/apache/lucene/search/spans/SpanFirstQuery.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "org/apache/lucene/search/spans/SpanWeight.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/IOUtils.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/highlight/WeightedSpanTermExtractor must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor () {
 @public
  NSString *fieldName_;
  OrgApacheLuceneAnalysisTokenStream *tokenStream_;
  NSString *defaultField_;
  jboolean expandMultiTermQuery_;
  jboolean cachedTokenStream_;
  jboolean wrapToCaching_;
  jint maxDocCharsToAnalyze_;
  jboolean usePayloads_;
  OrgApacheLuceneIndexLeafReader *internalReader_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, fieldName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, tokenStream_, OrgApacheLuceneAnalysisTokenStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, defaultField_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, internalReader_, OrgApacheLuceneIndexLeafReader *)

inline NSString *OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_get_FIELD_NAME(void);
static NSString *OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME = @"shadowed_field";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader, FIELD_NAME, NSString *)

@interface OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1 : OrgApacheLuceneIndexFilterLeafReader_FilterFields

- (instancetype)initWithOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)inArg;

- (OrgApacheLuceneIndexTerms *)termsWithNSString:(NSString *)field;

- (id<JavaUtilIterator>)iterator;

- (jint)size;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1)

__attribute__((unused)) static void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1_initWithOrgApacheLuceneIndexFields_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1 *self, OrgApacheLuceneIndexFields *inArg);

__attribute__((unused)) static OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1 *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1_initWithOrgApacheLuceneIndexFields_(OrgApacheLuceneIndexFields *inArg) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1 *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1_initWithOrgApacheLuceneIndexFields_(OrgApacheLuceneIndexFields *inArg);

@implementation OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)defaultField {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_initWithNSString_(self, defaultField);
  return self;
}

- (void)extractWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                              withJavaUtilMap:(id<JavaUtilMap>)terms {
  if ([query isKindOfClass:[OrgApacheLuceneSearchBooleanQuery class]]) {
    for (OrgApacheLuceneSearchBooleanClause * __strong clause in nil_chk((OrgApacheLuceneSearchBooleanQuery *) query)) {
      if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(clause)) isProhibited]) {
        [self extractWithOrgApacheLuceneSearchQuery:[clause getQuery] withJavaUtilMap:terms];
      }
    }
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
    OrgApacheLuceneSearchPhraseQuery *phraseQuery = ((OrgApacheLuceneSearchPhraseQuery *) query);
    IOSObjectArray *phraseQueryTerms = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(phraseQuery)) getTerms];
    IOSObjectArray *clauses = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(phraseQueryTerms))->size_ type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
    for (jint i = 0; i < phraseQueryTerms->size_; i++) {
      IOSObjectArray_SetAndConsume(clauses, i, new_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(IOSObjectArray_Get(phraseQueryTerms, i)));
    }
    jint slop = [phraseQuery getSlop];
    IOSIntArray *positions = [phraseQuery getPositions];
    if (((IOSIntArray *) nil_chk(positions))->size_ > 0) {
      jint lastPos = IOSIntArray_Get(positions, 0);
      jint largestInc = 0;
      jint sz = positions->size_;
      for (jint i = 1; i < sz; i++) {
        jint pos = IOSIntArray_Get(positions, i);
        jint inc = pos - lastPos;
        if (inc > largestInc) {
          largestInc = inc;
        }
        lastPos = pos;
      }
      if (largestInc > 1) {
        slop += largestInc;
      }
    }
    jboolean inorder = false;
    if (slop == 0) {
      inorder = true;
    }
    OrgApacheLuceneSearchSpansSpanNearQuery *sp = create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(clauses, slop, inorder);
    [sp setBoostWithFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost]];
    [self extractWeightedSpanTermsWithJavaUtilMap:terms withOrgApacheLuceneSearchSpansSpanQuery:sp];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchTermQuery class]]) {
    [self extractWeightedTermsWithJavaUtilMap:terms withOrgApacheLuceneSearchQuery:query];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchSpansSpanQuery class]]) {
    [self extractWeightedSpanTermsWithJavaUtilMap:terms withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *) query];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchFilteredQuery class]]) {
    [self extractWithOrgApacheLuceneSearchQuery:[((OrgApacheLuceneSearchFilteredQuery *) nil_chk(((OrgApacheLuceneSearchFilteredQuery *) query))) getQuery] withJavaUtilMap:terms];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchConstantScoreQuery class]]) {
    OrgApacheLuceneSearchQuery *q = [((OrgApacheLuceneSearchConstantScoreQuery *) nil_chk(((OrgApacheLuceneSearchConstantScoreQuery *) query))) getQuery];
    if (q != nil) {
      [self extractWithOrgApacheLuceneSearchQuery:q withJavaUtilMap:terms];
    }
  }
  else if ([query isKindOfClass:[OrgApacheLuceneQueriesCommonTermsQuery class]]) {
    [self extractWeightedTermsWithJavaUtilMap:terms withOrgApacheLuceneSearchQuery:query];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchDisjunctionMaxQuery class]]) {
    for (id<JavaUtilIterator> iterator = JreRetainedLocalValue([((OrgApacheLuceneSearchDisjunctionMaxQuery *) nil_chk(((OrgApacheLuceneSearchDisjunctionMaxQuery *) query))) iterator]); [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
      [self extractWithOrgApacheLuceneSearchQuery:[iterator next] withJavaUtilMap:terms];
    }
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchJoinToParentBlockJoinQuery class]]) {
    [self extractWithOrgApacheLuceneSearchQuery:[((OrgApacheLuceneSearchJoinToParentBlockJoinQuery *) nil_chk(((OrgApacheLuceneSearchJoinToParentBlockJoinQuery *) query))) getChildQuery] withJavaUtilMap:terms];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchJoinToChildBlockJoinQuery class]]) {
    [self extractWithOrgApacheLuceneSearchQuery:[((OrgApacheLuceneSearchJoinToChildBlockJoinQuery *) nil_chk(((OrgApacheLuceneSearchJoinToChildBlockJoinQuery *) query))) getParentQuery] withJavaUtilMap:terms];
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchMultiPhraseQuery class]]) {
    OrgApacheLuceneSearchMultiPhraseQuery *mpq = (OrgApacheLuceneSearchMultiPhraseQuery *) query;
    id<JavaUtilList> termArrays = [((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(mpq)) getTermArrays];
    IOSIntArray *positions = [mpq getPositions];
    if (((IOSIntArray *) nil_chk(positions))->size_ > 0) {
      jint maxPosition = IOSIntArray_Get(positions, positions->size_ - 1);
      for (jint i = 0; i < positions->size_ - 1; ++i) {
        if (IOSIntArray_Get(positions, i) > maxPosition) {
          maxPosition = IOSIntArray_Get(positions, i);
        }
      }
      IOSObjectArray *disjunctLists = [IOSObjectArray arrayWithLength:maxPosition + 1 type:JavaUtilList_class_()];
      jint distinctPositions = 0;
      for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(termArrays)) size]; ++i) {
        IOSObjectArray *termArray = [termArrays getWithInt:i];
        id<JavaUtilList> disjuncts = IOSObjectArray_Get(disjunctLists, IOSIntArray_Get(positions, i));
        if (disjuncts == nil) {
          disjuncts = (IOSObjectArray_SetAndConsume(disjunctLists, IOSIntArray_Get(positions, i), new_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(termArray))->size_)));
          ++distinctPositions;
        }
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(termArray))->size_; ++j) {
          [disjuncts addWithId:create_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(IOSObjectArray_Get(termArray, j))];
        }
      }
      jint positionGaps = 0;
      jint position = 0;
      IOSObjectArray *clauses = [IOSObjectArray arrayWithLength:distinctPositions type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
      for (jint i = 0; i < disjunctLists->size_; ++i) {
        id<JavaUtilList> disjuncts = IOSObjectArray_Get(disjunctLists, i);
        if (disjuncts != nil) {
          IOSObjectArray_SetAndConsume(clauses, position++, new_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_([disjuncts toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[disjuncts size] type:OrgApacheLuceneSearchSpansSpanQuery_class_()]]));
        }
        else {
          ++positionGaps;
        }
      }
      jint slop = [mpq getSlop];
      jboolean inorder = slop == 0;
      OrgApacheLuceneSearchSpansSpanNearQuery *sp = create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(clauses, slop + positionGaps, inorder);
      [sp setBoostWithFloat:[((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost]];
      [self extractWeightedSpanTermsWithJavaUtilMap:terms withOrgApacheLuceneSearchSpansSpanQuery:sp];
    }
  }
  else if ([query isKindOfClass:[OrgApacheLuceneSearchMatchAllDocsQuery class]]) {
  }
  else if ([query isKindOfClass:[OrgApacheLuceneQueriesCustomScoreQuery class]]) {
    [self extractWithOrgApacheLuceneSearchQuery:[((OrgApacheLuceneQueriesCustomScoreQuery *) nil_chk(((OrgApacheLuceneQueriesCustomScoreQuery *) query))) getSubQuery] withJavaUtilMap:terms];
  }
  else {
    OrgApacheLuceneSearchQuery *origQuery = JreRetainedLocalValue(query);
    if ([query isKindOfClass:[OrgApacheLuceneSearchMultiTermQuery class]]) {
      if (!expandMultiTermQuery_) {
        return;
      }
      OrgApacheLuceneSearchMultiTermQuery *copy_ = (OrgApacheLuceneSearchMultiTermQuery *) cast_chk([((OrgApacheLuceneSearchQuery *) nil_chk(query)) java_clone], [OrgApacheLuceneSearchMultiTermQuery class]);
      [((OrgApacheLuceneSearchMultiTermQuery *) nil_chk(copy_)) setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:JreLoadStatic(OrgApacheLuceneSearchMultiTermQuery, SCORING_BOOLEAN_REWRITE)];
      origQuery = copy_;
    }
    OrgApacheLuceneIndexIndexReader *reader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk([self getLeafContext])) reader];
    OrgApacheLuceneSearchQuery *rewritten = JreRetainedLocalValue([((OrgApacheLuceneSearchQuery *) nil_chk(origQuery)) rewriteWithOrgApacheLuceneIndexIndexReader:reader]);
    if (!JreObjectEqualsEquals(rewritten, origQuery)) {
      [self extractWithOrgApacheLuceneSearchQuery:rewritten withJavaUtilMap:terms];
    }
  }
  [self extractUnknownQueryWithOrgApacheLuceneSearchQuery:query withJavaUtilMap:terms];
}

- (void)extractUnknownQueryWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                          withJavaUtilMap:(id<JavaUtilMap>)terms {
}

- (void)extractWeightedSpanTermsWithJavaUtilMap:(id<JavaUtilMap>)terms
        withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)spanQuery {
  id<JavaUtilSet> fieldNames;
  if (fieldName_ == nil) {
    fieldNames = create_JavaUtilHashSet_init();
    [self collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:spanQuery withJavaUtilSet:fieldNames];
  }
  else {
    fieldNames = create_JavaUtilHashSet_initWithInt_(1);
    [fieldNames addWithId:fieldName_];
  }
  if (defaultField_ != nil) {
    [fieldNames addWithId:defaultField_];
  }
  id<JavaUtilMap> queries = create_JavaUtilHashMap_init();
  id<JavaUtilSet> nonWeightedTerms = create_JavaUtilHashSet_init();
  jboolean mustRewriteQuery = [self mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:spanQuery];
  OrgApacheLuceneSearchIndexSearcher *searcher = create_OrgApacheLuceneSearchIndexSearcher_initWithOrgApacheLuceneIndexIndexReaderContext_([self getLeafContext]);
  [searcher setQueryCacheWithOrgApacheLuceneSearchQueryCache:nil];
  if (mustRewriteQuery) {
    for (NSString * __strong field in fieldNames) {
      OrgApacheLuceneSearchSpansSpanQuery *rewrittenQuery = (OrgApacheLuceneSearchSpansSpanQuery *) cast_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(spanQuery)) rewriteWithOrgApacheLuceneIndexIndexReader:[((OrgApacheLuceneIndexLeafReaderContext *) nil_chk([self getLeafContext])) reader]], [OrgApacheLuceneSearchSpansSpanQuery class]);
      [queries putWithId:field withId:rewrittenQuery];
      [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(rewrittenQuery)) createWeightWithOrgApacheLuceneSearchIndexSearcher:searcher withBoolean:false])) extractTermsWithJavaUtilSet:nonWeightedTerms];
    }
  }
  else {
    [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(spanQuery)) createWeightWithOrgApacheLuceneSearchIndexSearcher:searcher withBoolean:false])) extractTermsWithJavaUtilSet:nonWeightedTerms];
  }
  id<JavaUtilList> spanPositions = create_JavaUtilArrayList_init();
  for (NSString * __strong field in fieldNames) {
    OrgApacheLuceneSearchSpansSpanQuery *q;
    if (mustRewriteQuery) {
      q = [queries getWithId:field];
    }
    else {
      q = spanQuery;
    }
    OrgApacheLuceneIndexLeafReaderContext *context = JreRetainedLocalValue([self getLeafContext]);
    OrgApacheLuceneSearchSpansSpanWeight *w = (OrgApacheLuceneSearchSpansSpanWeight *) cast_chk([searcher createNormalizedWeightWithOrgApacheLuceneSearchQuery:q withBoolean:false], [OrgApacheLuceneSearchSpansSpanWeight class]);
    id<OrgApacheLuceneUtilBits> acceptDocs = JreRetainedLocalValue([((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader])) getLiveDocs]);
    OrgApacheLuceneSearchSpansSpans *spans = [((OrgApacheLuceneSearchSpansSpanWeight *) nil_chk(w)) getSpansWithOrgApacheLuceneIndexLeafReaderContext:context withOrgApacheLuceneSearchSpansSpanWeight_Postings:JreLoadEnum(OrgApacheLuceneSearchSpansSpanWeight_Postings, POSITIONS)];
    if (spans == nil) {
      return;
    }
    while ([spans nextDoc] != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
      if (acceptDocs != nil && [acceptDocs getWithInt:[spans docID]] == false) {
        continue;
      }
      while ([spans nextStartPosition] != OrgApacheLuceneSearchSpansSpans_NO_MORE_POSITIONS) {
        [spanPositions addWithId:create_OrgApacheLuceneSearchHighlightPositionSpan_initWithInt_withInt_([spans startPosition], [spans endPosition] - 1)];
      }
    }
  }
  if ([spanPositions size] == 0) {
    return;
  }
  for (OrgApacheLuceneIndexTerm * __strong queryTerm in nonWeightedTerms) {
    if ([self fieldNameComparatorWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(queryTerm)) field]]) {
      OrgApacheLuceneSearchHighlightWeightedSpanTerm *weightedSpanTerm = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(terms)) getWithId:[queryTerm text]]);
      if (weightedSpanTerm == nil) {
        weightedSpanTerm = create_OrgApacheLuceneSearchHighlightWeightedSpanTerm_initWithFloat_withNSString_([((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(spanQuery)) getBoost], [queryTerm text]);
        [weightedSpanTerm addPositionSpansWithJavaUtilList:spanPositions];
        weightedSpanTerm->positionSensitive_ = true;
        [terms putWithId:[queryTerm text] withId:weightedSpanTerm];
      }
      else {
        if ([spanPositions size] > 0) {
          [weightedSpanTerm addPositionSpansWithJavaUtilList:spanPositions];
        }
      }
    }
  }
}

- (void)extractWeightedTermsWithJavaUtilMap:(id<JavaUtilMap>)terms
             withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  id<JavaUtilSet> nonWeightedTerms = create_JavaUtilHashSet_init();
  OrgApacheLuceneSearchIndexSearcher *searcher = create_OrgApacheLuceneSearchIndexSearcher_initWithOrgApacheLuceneIndexIndexReaderContext_([self getLeafContext]);
  [((OrgApacheLuceneSearchWeight *) nil_chk([searcher createNormalizedWeightWithOrgApacheLuceneSearchQuery:query withBoolean:false])) extractTermsWithJavaUtilSet:nonWeightedTerms];
  for (OrgApacheLuceneIndexTerm * __strong queryTerm in nonWeightedTerms) {
    if ([self fieldNameComparatorWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(queryTerm)) field]]) {
      OrgApacheLuceneSearchHighlightWeightedSpanTerm *weightedSpanTerm = create_OrgApacheLuceneSearchHighlightWeightedSpanTerm_initWithFloat_withNSString_([((OrgApacheLuceneSearchQuery *) nil_chk(query)) getBoost], [queryTerm text]);
      [((id<JavaUtilMap>) nil_chk(terms)) putWithId:[queryTerm text] withId:weightedSpanTerm];
    }
  }
}

- (jboolean)fieldNameComparatorWithNSString:(NSString *)fieldNameToCheck {
  jboolean rv = fieldName_ == nil || [fieldName_ isEqual:fieldNameToCheck] || (defaultField_ != nil && [defaultField_ isEqual:fieldNameToCheck]);
  return rv;
}

- (OrgApacheLuceneIndexLeafReaderContext *)getLeafContext {
  if (internalReader_ == nil) {
    jboolean cacheIt = wrapToCaching_ && !([tokenStream_ isKindOfClass:[OrgApacheLuceneAnalysisCachingTokenFilter class]]);
    if ([tokenStream_ isKindOfClass:[OrgApacheLuceneSearchHighlightTokenStreamFromTermVector class]]) {
      cacheIt = false;
      OrgApacheLuceneIndexTerms *termVectorTerms = JreRetainedLocalValue([((OrgApacheLuceneSearchHighlightTokenStreamFromTermVector *) nil_chk(((OrgApacheLuceneSearchHighlightTokenStreamFromTermVector *) tokenStream_))) getTermVectorTerms]);
      if ([((OrgApacheLuceneIndexTerms *) nil_chk(termVectorTerms)) hasPositions] && [termVectorTerms hasOffsets]) {
        JreStrongAssignAndConsume(&internalReader_, new_OrgApacheLuceneSearchHighlightTermVectorLeafReader_initWithNSString_withOrgApacheLuceneIndexTerms_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME, termVectorTerms));
      }
    }
    if (internalReader_ == nil) {
      OrgApacheLuceneIndexMemoryMemoryIndex *indexer = create_OrgApacheLuceneIndexMemoryMemoryIndex_initWithBoolean_withBoolean_(true, usePayloads_);
      if (cacheIt) {
        JreAssert(!cachedTokenStream_, @"org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java:393 condition failed: assert !cachedTokenStream;");
        JreStrongAssignAndConsume(&tokenStream_, new_OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(create_OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(tokenStream_, maxDocCharsToAnalyze_)));
        cachedTokenStream_ = true;
        [indexer addFieldWithNSString:OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME withOrgApacheLuceneAnalysisTokenStream:tokenStream_];
      }
      else {
        [indexer addFieldWithNSString:OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME withOrgApacheLuceneAnalysisTokenStream:create_OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(tokenStream_, maxDocCharsToAnalyze_)];
      }
      OrgApacheLuceneSearchIndexSearcher *searcher = [indexer createSearcher];
      JreStrongAssign(&internalReader_, [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(((OrgApacheLuceneIndexLeafReaderContext *) cast_chk([((OrgApacheLuceneSearchIndexSearcher *) nil_chk(searcher)) getTopReaderContext], [OrgApacheLuceneIndexLeafReaderContext class])))) reader]);
    }
    JreStrongAssignAndConsume(&self->internalReader_, new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_initWithOrgApacheLuceneIndexLeafReader_(internalReader_));
  }
  return [internalReader_ getContext];
}

- (id<JavaUtilMap>)getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                               withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)tokenStream {
  return [self getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:query withOrgApacheLuceneAnalysisTokenStream:tokenStream withNSString:nil];
}

- (id<JavaUtilMap>)getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                               withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)tokenStream
                                                         withNSString:(NSString *)fieldName {
  if (fieldName != nil) {
    JreStrongAssign(&self->fieldName_, fieldName);
  }
  else {
    JreStrongAssign(&self->fieldName_, nil);
  }
  id<JavaUtilMap> terms = create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init();
  JreStrongAssign(&self->tokenStream_, tokenStream);
  @try {
    [self extractWithOrgApacheLuceneSearchQuery:query withJavaUtilMap:terms];
  }
  @finally {
    OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ internalReader_ } count:1 type:JavaIoCloseable_class_()]);
  }
  return terms;
}

- (id<JavaUtilMap>)getWeightedSpanTermsWithScoresWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                         withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)tokenStream
                                                                   withNSString:(NSString *)fieldName
                                            withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if (fieldName != nil) {
    JreStrongAssign(&self->fieldName_, fieldName);
  }
  else {
    JreStrongAssign(&self->fieldName_, nil);
  }
  JreStrongAssign(&self->tokenStream_, tokenStream);
  id<JavaUtilMap> terms = create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init();
  [self extractWithOrgApacheLuceneSearchQuery:query withJavaUtilMap:terms];
  jint totalNumDocs = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) maxDoc];
  id<JavaUtilSet> weightedTerms = JreRetainedLocalValue([terms keySet]);
  id<JavaUtilIterator> it = JreRetainedLocalValue([((id<JavaUtilSet>) nil_chk(weightedTerms)) iterator]);
  @try {
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgApacheLuceneSearchHighlightWeightedSpanTerm *weightedSpanTerm = JreRetainedLocalValue([terms getWithId:[it next]]);
      jint docFreq = [reader docFreqWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(fieldName, ((OrgApacheLuceneSearchHighlightWeightedSpanTerm *) nil_chk(weightedSpanTerm))->term_)];
      jfloat idf = (jfloat) (JavaLangMath_logWithDouble_(totalNumDocs / (jdouble) (docFreq + 1)) + 1.0);
      JreTimesAssignFloatF(&weightedSpanTerm->weight_, idf);
    }
  }
  @finally {
    OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ internalReader_ } count:1 type:JavaIoCloseable_class_()]);
  }
  return terms;
}

- (void)collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)spanQuery
                                                      withJavaUtilSet:(id<JavaUtilSet>)fieldNames {
  if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansFieldMaskingSpanQuery class]]) {
    [self collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:[((OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *) nil_chk(((OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *) spanQuery))) getMaskedQuery] withJavaUtilSet:fieldNames];
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanFirstQuery class]]) {
    [self collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:[((OrgApacheLuceneSearchSpansSpanFirstQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanFirstQuery *) spanQuery))) getMatch] withJavaUtilSet:fieldNames];
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanNearQuery class]]) {
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanNearQuery *) spanQuery))) getClauses];
      OrgApacheLuceneSearchSpansSpanQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchSpansSpanQuery *clause = *b__++;
        [self collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:clause withJavaUtilSet:fieldNames];
      }
    }
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanNotQuery class]]) {
    [self collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:[((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanNotQuery *) spanQuery))) getInclude] withJavaUtilSet:fieldNames];
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanOrQuery class]]) {
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneSearchSpansSpanOrQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanOrQuery *) spanQuery))) getClauses];
      OrgApacheLuceneSearchSpansSpanQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchSpansSpanQuery *clause = *b__++;
        [self collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:clause withJavaUtilSet:fieldNames];
      }
    }
  }
  else {
    [((id<JavaUtilSet>) nil_chk(fieldNames)) addWithId:[((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(spanQuery)) getField]];
  }
}

- (jboolean)mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)spanQuery {
  if (!expandMultiTermQuery_) {
    return false;
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansFieldMaskingSpanQuery class]]) {
    return [self mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:[((OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *) nil_chk(((OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *) spanQuery))) getMaskedQuery]];
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanFirstQuery class]]) {
    return [self mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:[((OrgApacheLuceneSearchSpansSpanFirstQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanFirstQuery *) spanQuery))) getMatch]];
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanNearQuery class]]) {
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneSearchSpansSpanNearQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanNearQuery *) spanQuery))) getClauses];
      OrgApacheLuceneSearchSpansSpanQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchSpansSpanQuery *clause = *b__++;
        if ([self mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:clause]) {
          return true;
        }
      }
    }
    return false;
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanNotQuery class]]) {
    OrgApacheLuceneSearchSpansSpanNotQuery *spanNotQuery = (OrgApacheLuceneSearchSpansSpanNotQuery *) spanQuery;
    return [self mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:[((OrgApacheLuceneSearchSpansSpanNotQuery *) nil_chk(spanNotQuery)) getInclude]] || [self mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:[spanNotQuery getExclude]];
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanOrQuery class]]) {
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneSearchSpansSpanOrQuery *) nil_chk(((OrgApacheLuceneSearchSpansSpanOrQuery *) spanQuery))) getClauses];
      OrgApacheLuceneSearchSpansSpanQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneSearchSpansSpanQuery * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneSearchSpansSpanQuery *clause = *b__++;
        if ([self mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:clause]) {
          return true;
        }
      }
    }
    return false;
  }
  else if ([spanQuery isKindOfClass:[OrgApacheLuceneSearchSpansSpanTermQuery class]]) {
    return false;
  }
  else {
    return true;
  }
}

- (jboolean)getExpandMultiTermQuery {
  return expandMultiTermQuery_;
}

- (void)setExpandMultiTermQueryWithBoolean:(jboolean)expandMultiTermQuery {
  self->expandMultiTermQuery_ = expandMultiTermQuery;
}

- (jboolean)isUsePayloads {
  return usePayloads_;
}

- (void)setUsePayloadsWithBoolean:(jboolean)usePayloads {
  self->usePayloads_ = usePayloads;
}

- (jboolean)isCachedTokenStream {
  return cachedTokenStream_;
}

- (OrgApacheLuceneAnalysisTokenStream *)getTokenStream {
  JreAssert(tokenStream_ != nil, @"org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java:675 condition failed: assert tokenStream != null;");
  return tokenStream_;
}

- (void)setWrapIfNotCachingTokenFilterWithBoolean:(jboolean)wrap {
  self->wrapToCaching_ = wrap;
}

- (void)setMaxDocCharsToAnalyzeWithInt:(jint)maxDocCharsToAnalyze {
  self->maxDocCharsToAnalyze_ = maxDocCharsToAnalyze;
}

- (void)dealloc {
  RELEASE_(fieldName_);
  RELEASE_(tokenStream_);
  RELEASE_(defaultField_);
  RELEASE_(internalReader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, 4, -1, -1 },
    { NULL, "V", 0x4, 5, 2, 3, 4, -1, -1 },
    { NULL, "V", 0x4, 6, 7, 3, 8, -1, -1 },
    { NULL, "V", 0x4, 9, 10, 3, 11, -1, -1 },
    { NULL, "Z", 0x4, 12, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLeafReaderContext;", 0x4, -1, -1, 3, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 13, 14, 3, 15, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 13, 16, 3, 17, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 18, 19, 3, 20, -1, -1 },
    { NULL, "V", 0x4, 21, 22, -1, 23, -1, -1 },
    { NULL, "Z", 0x4, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 30, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(extractWithOrgApacheLuceneSearchQuery:withJavaUtilMap:);
  methods[3].selector = @selector(extractUnknownQueryWithOrgApacheLuceneSearchQuery:withJavaUtilMap:);
  methods[4].selector = @selector(extractWeightedSpanTermsWithJavaUtilMap:withOrgApacheLuceneSearchSpansSpanQuery:);
  methods[5].selector = @selector(extractWeightedTermsWithJavaUtilMap:withOrgApacheLuceneSearchQuery:);
  methods[6].selector = @selector(fieldNameComparatorWithNSString:);
  methods[7].selector = @selector(getLeafContext);
  methods[8].selector = @selector(getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneAnalysisTokenStream:);
  methods[9].selector = @selector(getWeightedSpanTermsWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneAnalysisTokenStream:withNSString:);
  methods[10].selector = @selector(getWeightedSpanTermsWithScoresWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneAnalysisTokenStream:withNSString:withOrgApacheLuceneIndexIndexReader:);
  methods[11].selector = @selector(collectSpanQueryFieldsWithOrgApacheLuceneSearchSpansSpanQuery:withJavaUtilSet:);
  methods[12].selector = @selector(mustRewriteQueryWithOrgApacheLuceneSearchSpansSpanQuery:);
  methods[13].selector = @selector(getExpandMultiTermQuery);
  methods[14].selector = @selector(setExpandMultiTermQueryWithBoolean:);
  methods[15].selector = @selector(isUsePayloads);
  methods[16].selector = @selector(setUsePayloadsWithBoolean:);
  methods[17].selector = @selector(isCachedTokenStream);
  methods[18].selector = @selector(getTokenStream);
  methods[19].selector = @selector(setWrapIfNotCachingTokenFilterWithBoolean:);
  methods[20].selector = @selector(setMaxDocCharsToAnalyzeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tokenStream_", "LOrgApacheLuceneAnalysisTokenStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultField_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "expandMultiTermQuery_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cachedTokenStream_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wrapToCaching_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxDocCharsToAnalyze_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "usePayloads_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "internalReader_", "LOrgApacheLuceneIndexLeafReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "extract", "LOrgApacheLuceneSearchQuery;LJavaUtilMap;", "LJavaIoIOException;", "(Lorg/apache/lucene/search/Query;Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;)V", "extractUnknownQuery", "extractWeightedSpanTerms", "LJavaUtilMap;LOrgApacheLuceneSearchSpansSpanQuery;", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;Lorg/apache/lucene/search/spans/SpanQuery;)V", "extractWeightedTerms", "LJavaUtilMap;LOrgApacheLuceneSearchQuery;", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;Lorg/apache/lucene/search/Query;)V", "fieldNameComparator", "getWeightedSpanTerms", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneAnalysisTokenStream;", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;)Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneAnalysisTokenStream;LNSString;", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;", "getWeightedSpanTermsWithScores", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneAnalysisTokenStream;LNSString;LOrgApacheLuceneIndexIndexReader;", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;Lorg/apache/lucene/index/IndexReader;)Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;", "collectSpanQueryFields", "LOrgApacheLuceneSearchSpansSpanQuery;LJavaUtilSet;", "(Lorg/apache/lucene/search/spans/SpanQuery;Ljava/util/Set<Ljava/lang/String;>;)V", "mustRewriteQuery", "LOrgApacheLuceneSearchSpansSpanQuery;", "setExpandMultiTermQuery", "Z", "setUsePayloads", "setWrapIfNotCachingTokenFilter", "setMaxDocCharsToAnalyze", "I", "LOrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader;LOrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor = { "WeightedSpanTermExtractor", "org.apache.lucene.search.highlight", ptrTable, methods, fields, 7, 0x1, 21, 9, -1, 32, -1, -1, -1 };
  return &_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor;
}

@end

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_init(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self) {
  NSObject_init(self);
  self->wrapToCaching_ = true;
  self->usePayloads_ = false;
  JreStrongAssign(&self->internalReader_, nil);
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, init)
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, init)
}

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_initWithNSString_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *self, NSString *defaultField) {
  NSObject_init(self);
  self->wrapToCaching_ = true;
  self->usePayloads_ = false;
  JreStrongAssign(&self->internalReader_, nil);
  if (defaultField != nil) {
    JreStrongAssign(&self->defaultField_, defaultField);
  }
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_initWithNSString_(NSString *defaultField) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, initWithNSString_, defaultField)
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_initWithNSString_(NSString *defaultField) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor, initWithNSString_, defaultField)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor)

@implementation OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader

- (instancetype)initWithOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)inArg {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_initWithOrgApacheLuceneIndexLeafReader_(self, inArg);
  return self;
}

- (OrgApacheLuceneIndexFieldInfos *)getFieldInfos {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (OrgApacheLuceneIndexFields *)fields {
  return create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1_initWithOrgApacheLuceneIndexFields_([super fields]);
}

- (OrgApacheLuceneIndexNumericDocValues *)getNumericDocValuesWithNSString:(NSString *)field {
  return [super getNumericDocValuesWithNSString:OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME];
}

- (OrgApacheLuceneIndexBinaryDocValues *)getBinaryDocValuesWithNSString:(NSString *)field {
  return [super getBinaryDocValuesWithNSString:OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME];
}

- (OrgApacheLuceneIndexSortedDocValues *)getSortedDocValuesWithNSString:(NSString *)field {
  return [super getSortedDocValuesWithNSString:OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME];
}

- (OrgApacheLuceneIndexNumericDocValues *)getNormValuesWithNSString:(NSString *)field {
  return [super getNormValuesWithNSString:OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME];
}

- (id<OrgApacheLuceneUtilBits>)getDocsWithFieldWithNSString:(NSString *)field {
  return [super getDocsWithFieldWithNSString:OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldInfos;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFields;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexNumericDocValues;", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexBinaryDocValues;", 0x1, 4, 3, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSortedDocValues;", 0x1, 5, 3, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexNumericDocValues;", 0x1, 6, 3, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBits;", 0x1, 7, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexLeafReader:);
  methods[1].selector = @selector(getFieldInfos);
  methods[2].selector = @selector(fields);
  methods[3].selector = @selector(getNumericDocValuesWithNSString:);
  methods[4].selector = @selector(getBinaryDocValuesWithNSString:);
  methods[5].selector = @selector(getSortedDocValuesWithNSString:);
  methods[6].selector = @selector(getNormValuesWithNSString:);
  methods[7].selector = @selector(getDocsWithFieldWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIELD_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexLeafReader;", "LJavaIoIOException;", "getNumericDocValues", "LNSString;", "getBinaryDocValues", "getSortedDocValues", "getNormValues", "getDocsWithField", &OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME, "LOrgApacheLuceneSearchHighlightWeightedSpanTermExtractor;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader = { "DelegatingLeafReader", "org.apache.lucene.search.highlight", ptrTable, methods, fields, 7, 0x18, 8, 1, 9, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader;
}

@end

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_initWithOrgApacheLuceneIndexLeafReader_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader *self, OrgApacheLuceneIndexLeafReader *inArg) {
  OrgApacheLuceneIndexFilterLeafReader_initWithOrgApacheLuceneIndexLeafReader_(self, inArg);
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_initWithOrgApacheLuceneIndexLeafReader_(OrgApacheLuceneIndexLeafReader *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader, initWithOrgApacheLuceneIndexLeafReader_, inArg)
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_initWithOrgApacheLuceneIndexLeafReader_(OrgApacheLuceneIndexLeafReader *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader, initWithOrgApacheLuceneIndexLeafReader_, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader)

@implementation OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1

- (instancetype)initWithOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)inArg {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1_initWithOrgApacheLuceneIndexFields_(self, inArg);
  return self;
}

- (OrgApacheLuceneIndexTerms *)termsWithNSString:(NSString *)field {
  return JreRetainedLocalValue([super termsWithNSString:OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME]);
}

- (id<JavaUtilIterator>)iterator {
  return JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(JavaUtilCollections_singletonListWithId_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_FIELD_NAME))) iterator]);
}

- (jint)size {
  return 1;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerms;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexFields:);
  methods[1].selector = @selector(termsWithNSString:);
  methods[2].selector = @selector(iterator);
  methods[3].selector = @selector(size);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexFields;", "terms", "LNSString;", "LJavaIoIOException;", "()Ljava/util/Iterator<Ljava/lang/String;>;", "LOrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader;", "fields" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1 = { "", "org.apache.lucene.search.highlight", ptrTable, methods, NULL, 7, 0x8010, 4, 0, 5, -1, 6, -1, -1 };
  return &_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1;
}

@end

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1_initWithOrgApacheLuceneIndexFields_(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1 *self, OrgApacheLuceneIndexFields *inArg) {
  OrgApacheLuceneIndexFilterLeafReader_FilterFields_initWithOrgApacheLuceneIndexFields_(self, inArg);
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1 *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1_initWithOrgApacheLuceneIndexFields_(OrgApacheLuceneIndexFields *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1, initWithOrgApacheLuceneIndexFields_, inArg)
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1 *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1_initWithOrgApacheLuceneIndexFields_(OrgApacheLuceneIndexFields *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_DelegatingLeafReader_1, initWithOrgApacheLuceneIndexFields_, inArg)
}

@implementation OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)m {
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(m)) entrySet])) [self putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
}

- (OrgApacheLuceneSearchHighlightWeightedSpanTerm *)putWithId:(id)key
                                                       withId:(OrgApacheLuceneSearchHighlightWeightedSpanTerm *)value {
  OrgApacheLuceneSearchHighlightWeightedSpanTerm *prev = [super putWithId:key withId:value];
  if (prev == nil) return prev;
  OrgApacheLuceneSearchHighlightWeightedSpanTerm *prevTerm = JreRetainedLocalValue(prev);
  OrgApacheLuceneSearchHighlightWeightedSpanTerm *newTerm = JreRetainedLocalValue(value);
  if (!prevTerm->positionSensitive_) {
    ((OrgApacheLuceneSearchHighlightWeightedSpanTerm *) nil_chk(newTerm))->positionSensitive_ = false;
  }
  return prev;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchHighlightWeightedSpanTerm;", 0x1, 3, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putAllWithJavaUtilMap:);
  methods[2].selector = @selector(putWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "putAll", "LJavaUtilMap;", "(Ljava/util/Map<+TK;+Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;)V", "put", "LNSObject;LOrgApacheLuceneSearchHighlightWeightedSpanTerm;", "(TK;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;)Lorg/apache/lucene/search/highlight/WeightedSpanTerm;", "LOrgApacheLuceneSearchHighlightWeightedSpanTermExtractor;", "<K:Ljava/lang/Object;>Ljava/util/HashMap<TK;Lorg/apache/lucene/search/highlight/WeightedSpanTerm;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap = { "PositionCheckingMap", "org.apache.lucene.search.highlight", ptrTable, methods, NULL, 7, 0xc, 3, 0, 6, -1, -1, 7, -1 };
  return &_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap;
}

@end

void OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap *self) {
  JavaUtilHashMap_init(self);
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap *new_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap, init)
}

OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap *create_OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchHighlightWeightedSpanTermExtractor_PositionCheckingMap)
