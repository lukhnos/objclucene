//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./highlighter/src/java/org/apache/lucene/search/highlight/OffsetLimitTokenFilter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/search/highlight/OffsetLimitTokenFilter.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/highlight/OffsetLimitTokenFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter () {
 @public
  jint offsetCount_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAttrib_;
  jint offsetLimit_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter, offsetAttrib_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)

@implementation OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                   withInt:(jint)offsetLimit {
  OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(self, input, offsetLimit);
  return self;
}

- (jboolean)incrementToken {
  if (offsetCount_ < offsetLimit_ && [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
    jint offsetLength = [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAttrib_)) endOffset] - [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAttrib_)) startOffset];
    offsetCount_ += offsetLength;
    return true;
  }
  return false;
}

- (void)reset {
  [super reset];
  offsetCount_ = 0;
}

- (void)dealloc {
  RELEASE_(offsetAttrib_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withInt:);
  methods[1].selector = @selector(incrementToken);
  methods[2].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "offsetCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsetAttrib_", "LOrgApacheLuceneAnalysisTokenattributesOffsetAttribute;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsetLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;I", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter = { "OffsetLimitTokenFilter", "org.apache.lucene.search.highlight", ptrTable, methods, fields, 7, 0x11, 3, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter;
}

@end

void OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jint offsetLimit) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssign(&self->offsetAttrib_, [self getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  self->offsetLimit_ = offsetLimit;
}

OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter *new_OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint offsetLimit) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_, input, offsetLimit)
}

OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter *create_OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint offsetLimit) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_, input, offsetLimit)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchHighlightOffsetLimitTokenFilter)
