//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/CachingWrapperQuery.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/search/CachingWrapperQuery.h"
#include "org/apache/lucene/search/ConstantScoreScorer.h"
#include "org/apache/lucene/search/ConstantScoreWeight.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/QueryCachingPolicy.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/RoaringDocIdSet.h"
#include "org/lukhnos/portmobile/util/Objects.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/search/CachingWrapperQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneSearchCachingWrapperQuery () {
 @public
  OrgApacheLuceneSearchQuery *query_;
  id<OrgApacheLuceneSearchQueryCachingPolicy> policy_;
  id<JavaUtilMap> cache_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchCachingWrapperQuery, query_, OrgApacheLuceneSearchQuery *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchCachingWrapperQuery, policy_, id<OrgApacheLuceneSearchQueryCachingPolicy>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchCachingWrapperQuery, cache_, id<JavaUtilMap>)

@interface OrgApacheLuceneSearchCachingWrapperQuery_1 : OrgApacheLuceneSearchConstantScoreWeight {
 @public
  OrgApacheLuceneSearchCachingWrapperQuery *this$0_;
  OrgApacheLuceneSearchWeight *val$weight_;
  JavaUtilConcurrentAtomicAtomicBoolean *used_;
}

- (instancetype)initWithOrgApacheLuceneSearchCachingWrapperQuery:(OrgApacheLuceneSearchCachingWrapperQuery *)outer$
                                 withOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)capture$0
                                  withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchCachingWrapperQuery_1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchCachingWrapperQuery_1, used_, JavaUtilConcurrentAtomicAtomicBoolean *)

__attribute__((unused)) static void OrgApacheLuceneSearchCachingWrapperQuery_1_initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchCachingWrapperQuery_1 *self, OrgApacheLuceneSearchCachingWrapperQuery *outer$, OrgApacheLuceneSearchWeight *capture$0, OrgApacheLuceneSearchQuery *query);

__attribute__((unused)) static OrgApacheLuceneSearchCachingWrapperQuery_1 *new_OrgApacheLuceneSearchCachingWrapperQuery_1_initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchCachingWrapperQuery *outer$, OrgApacheLuceneSearchWeight *capture$0, OrgApacheLuceneSearchQuery *query) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneSearchCachingWrapperQuery_1 *create_OrgApacheLuceneSearchCachingWrapperQuery_1_initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchCachingWrapperQuery *outer$, OrgApacheLuceneSearchWeight *capture$0, OrgApacheLuceneSearchQuery *query);

@implementation OrgApacheLuceneSearchCachingWrapperQuery

- (instancetype)initWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
       withOrgApacheLuceneSearchQueryCachingPolicy:(id<OrgApacheLuceneSearchQueryCachingPolicy>)policy {
  OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_(self, query, policy);
  return self;
}

- (instancetype)initWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_(self, query);
  return self;
}

- (OrgApacheLuceneSearchCachingWrapperQuery *)java_clone {
  OrgApacheLuceneSearchCachingWrapperQuery *clone = (OrgApacheLuceneSearchCachingWrapperQuery *) cast_chk([super java_clone], [OrgApacheLuceneSearchCachingWrapperQuery class]);
  JreStrongAssign(&((OrgApacheLuceneSearchCachingWrapperQuery *) nil_chk(clone))->query_, [((OrgApacheLuceneSearchQuery *) nil_chk(query_)) java_clone]);
  return clone;
}

- (OrgApacheLuceneSearchQuery *)getQuery {
  return query_;
}

- (jfloat)getBoost {
  return [((OrgApacheLuceneSearchQuery *) nil_chk(query_)) getBoost];
}

- (void)setBoostWithFloat:(jfloat)b {
  [((OrgApacheLuceneSearchQuery *) nil_chk(query_)) setBoostWithFloat:b];
}

- (OrgApacheLuceneSearchDocIdSet *)cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:(OrgApacheLuceneSearchDocIdSetIterator *)iterator
                                                   withOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader {
  return [((OrgApacheLuceneUtilRoaringDocIdSet_Builder *) nil_chk([create_OrgApacheLuceneUtilRoaringDocIdSet_Builder_initWithInt_([((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) maxDoc]) addWithOrgApacheLuceneSearchDocIdSetIterator:iterator])) build];
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneSearchQuery *rewritten = [((OrgApacheLuceneSearchQuery *) nil_chk(query_)) rewriteWithOrgApacheLuceneIndexIndexReader:reader];
  if (JreObjectEqualsEquals(query_, rewritten)) {
    return self;
  }
  else {
    OrgApacheLuceneSearchCachingWrapperQuery *clone = JreRetainedLocalValue([self java_clone]);
    JreStrongAssign(&((OrgApacheLuceneSearchCachingWrapperQuery *) nil_chk(clone))->query_, rewritten);
    return clone;
  }
}

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores {
  OrgApacheLuceneSearchWeight *weight = [((OrgApacheLuceneSearchQuery *) nil_chk(query_)) createWeightWithOrgApacheLuceneSearchIndexSearcher:searcher withBoolean:needsScores];
  if (needsScores) {
    return weight;
  }
  return create_OrgApacheLuceneSearchCachingWrapperQuery_1_initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_(self, weight, [((OrgApacheLuceneSearchWeight *) nil_chk(weight)) getQuery]);
}

- (NSString *)toStringWithNSString:(NSString *)field {
  return JreStrcat("$C$C", [[self java_getClass] getSimpleName], '(', [((OrgApacheLuceneSearchQuery *) nil_chk(query_)) toStringWithNSString:field], ')');
}

- (jboolean)isEqual:(id)o {
  if (o == nil || ![[self java_getClass] isEqual:[o java_getClass]]) return false;
  OrgApacheLuceneSearchCachingWrapperQuery *other = (OrgApacheLuceneSearchCachingWrapperQuery *) cast_chk(o, [OrgApacheLuceneSearchCachingWrapperQuery class]);
  return [((OrgApacheLuceneSearchQuery *) nil_chk(self->query_)) isEqual:other->query_];
}

- (NSUInteger)hash {
  return (((jint) [((OrgApacheLuceneSearchQuery *) nil_chk(query_)) hash]) ^ ((jint) [[self java_getClass] hash]));
}

- (jlong)ramBytesUsed {
  id<JavaUtilList> docIdSets;
  @synchronized(cache_) {
    docIdSets = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(cache_)) values]);
  }
  jlong total = 0;
  for (OrgApacheLuceneSearchDocIdSet * __strong dis in docIdSets) {
    total += [((OrgApacheLuceneSearchDocIdSet *) nil_chk(dis)) ramBytesUsed];
  }
  return total;
}

- (id<JavaUtilCollection>)getChildResources {
  @synchronized(cache_) {
    return OrgApacheLuceneUtilAccountables_namedAccountablesWithNSString_withJavaUtilMap_(@"segment", cache_);
  }
}

- (void)dealloc {
  RELEASE_(query_);
  RELEASE_(policy_);
  RELEASE_(cache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchCachingWrapperQuery;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchDocIdSet;", 0x4, 5, 6, 7, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 8, 9, 7, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchWeight;", 0x1, 10, 11, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 17, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneSearchQueryCachingPolicy:);
  methods[1].selector = @selector(initWithOrgApacheLuceneSearchQuery:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(getQuery);
  methods[4].selector = @selector(getBoost);
  methods[5].selector = @selector(setBoostWithFloat:);
  methods[6].selector = @selector(cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:withOrgApacheLuceneIndexLeafReader:);
  methods[7].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[8].selector = @selector(createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  methods[9].selector = @selector(toStringWithNSString:);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(hash);
  methods[12].selector = @selector(ramBytesUsed);
  methods[13].selector = @selector(getChildResources);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "query_", "LOrgApacheLuceneSearchQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "policy_", "LOrgApacheLuceneSearchQueryCachingPolicy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "hitCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "missCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneSearchQueryCachingPolicy;", "LOrgApacheLuceneSearchQuery;", "clone", "setBoost", "F", "cacheImpl", "LOrgApacheLuceneSearchDocIdSetIterator;LOrgApacheLuceneIndexLeafReader;", "LJavaIoIOException;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "createWeight", "LOrgApacheLuceneSearchIndexSearcher;Z", "toString", "LNSString;", "equals", "LNSObject;", "hashCode", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "Ljava/util/Map<Ljava/lang/Object;Lorg/apache/lucene/search/DocIdSet;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchCachingWrapperQuery = { "CachingWrapperQuery", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x1, 14, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneSearchCachingWrapperQuery;
}

@end

void OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchCachingWrapperQuery *self, OrgApacheLuceneSearchQuery *query, id<OrgApacheLuceneSearchQueryCachingPolicy> policy) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssign(&self->cache_, JavaUtilCollections_synchronizedMapWithJavaUtilMap_(create_JavaUtilWeakHashMap_init()));
  JreStrongAssign(&self->query_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_withNSString_(query, @"Query must not be null"));
  JreStrongAssign(&self->policy_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_withNSString_(policy, @"QueryCachingPolicy must not be null"));
}

OrgApacheLuceneSearchCachingWrapperQuery *new_OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchQuery *query, id<OrgApacheLuceneSearchQueryCachingPolicy> policy) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchCachingWrapperQuery, initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_, query, policy)
}

OrgApacheLuceneSearchCachingWrapperQuery *create_OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_(OrgApacheLuceneSearchQuery *query, id<OrgApacheLuceneSearchQueryCachingPolicy> policy) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchCachingWrapperQuery, initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_, query, policy)
}

void OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchCachingWrapperQuery *self, OrgApacheLuceneSearchQuery *query) {
  OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchQueryCachingPolicy_(self, query, JreLoadStatic(OrgApacheLuceneSearchQueryCachingPolicy_CacheOnLargeSegments, DEFAULT));
}

OrgApacheLuceneSearchCachingWrapperQuery *new_OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchCachingWrapperQuery, initWithOrgApacheLuceneSearchQuery_, query)
}

OrgApacheLuceneSearchCachingWrapperQuery *create_OrgApacheLuceneSearchCachingWrapperQuery_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchCachingWrapperQuery, initWithOrgApacheLuceneSearchQuery_, query)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneSearchCachingWrapperQuery)

@implementation OrgApacheLuceneSearchCachingWrapperQuery_1

- (instancetype)initWithOrgApacheLuceneSearchCachingWrapperQuery:(OrgApacheLuceneSearchCachingWrapperQuery *)outer$
                                 withOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)capture$0
                                  withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  OrgApacheLuceneSearchCachingWrapperQuery_1_initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_(self, outer$, capture$0, query);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
  [((OrgApacheLuceneSearchWeight *) nil_chk(val$weight_)) extractTermsWithJavaUtilSet:terms];
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  if ([((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(used_)) compareAndSetWithBoolean:false withBoolean:true]) {
    [((id<OrgApacheLuceneSearchQueryCachingPolicy>) nil_chk(this$0_->policy_)) onUseWithOrgApacheLuceneSearchQuery:[self getQuery]];
  }
  OrgApacheLuceneIndexLeafReader *reader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader];
  id key = [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) getCoreCacheKey];
  OrgApacheLuceneSearchDocIdSet *docIdSet = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(this$0_->cache_)) getWithId:key]);
  if (docIdSet != nil) {
    this$0_->hitCount_++;
  }
  else if ([((id<OrgApacheLuceneSearchQueryCachingPolicy>) nil_chk(this$0_->policy_)) shouldCacheWithOrgApacheLuceneSearchQuery:this$0_->query_ withOrgApacheLuceneIndexLeafReaderContext:context]) {
    this$0_->missCount_++;
    OrgApacheLuceneSearchScorer *scorer = [((OrgApacheLuceneSearchWeight *) nil_chk(val$weight_)) scorerWithOrgApacheLuceneIndexLeafReaderContext:context];
    if (scorer == nil) {
      docIdSet = JreLoadStatic(OrgApacheLuceneSearchDocIdSet, EMPTY);
    }
    else {
      docIdSet = [this$0_ cacheImplWithOrgApacheLuceneSearchDocIdSetIterator:scorer withOrgApacheLuceneIndexLeafReader:[context reader]];
    }
    [this$0_->cache_ putWithId:key withId:docIdSet];
  }
  else {
    return JreRetainedLocalValue([((OrgApacheLuceneSearchWeight *) nil_chk(val$weight_)) scorerWithOrgApacheLuceneIndexLeafReaderContext:context]);
  }
  JreAssert(docIdSet != nil, @"org/apache/lucene/search/CachingWrapperQuery.java:154 condition failed: assert docIdSet != null;");
  if (JreObjectEqualsEquals(docIdSet, JreLoadStatic(OrgApacheLuceneSearchDocIdSet, EMPTY))) {
    return JreRetainedLocalValue(nil);
  }
  OrgApacheLuceneSearchDocIdSetIterator *disi = [((OrgApacheLuceneSearchDocIdSet *) nil_chk(docIdSet)) iterator];
  if (disi == nil) {
    return JreRetainedLocalValue(nil);
  }
  return create_OrgApacheLuceneSearchConstantScoreScorer_initWithOrgApacheLuceneSearchWeight_withFloat_withOrgApacheLuceneSearchDocIdSetIterator_(self, 0.0f, disi);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$weight_);
  RELEASE_(used_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchScorer;", 0x1, 4, 5, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchCachingWrapperQuery:withOrgApacheLuceneSearchWeight:withOrgApacheLuceneSearchQuery:);
  methods[1].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[2].selector = @selector(scorerWithOrgApacheLuceneIndexLeafReaderContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneSearchCachingWrapperQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$weight_", "LOrgApacheLuceneSearchWeight;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "used_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchCachingWrapperQuery;LOrgApacheLuceneSearchWeight;LOrgApacheLuceneSearchQuery;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "scorer", "LOrgApacheLuceneIndexLeafReaderContext;", "LJavaIoIOException;", "LOrgApacheLuceneSearchCachingWrapperQuery;", "createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:" };
  static const J2ObjcClassInfo _OrgApacheLuceneSearchCachingWrapperQuery_1 = { "", "org.apache.lucene.search", ptrTable, methods, fields, 7, 0x8010, 3, 3, 7, -1, 8, -1, -1 };
  return &_OrgApacheLuceneSearchCachingWrapperQuery_1;
}

@end

void OrgApacheLuceneSearchCachingWrapperQuery_1_initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchCachingWrapperQuery_1 *self, OrgApacheLuceneSearchCachingWrapperQuery *outer$, OrgApacheLuceneSearchWeight *capture$0, OrgApacheLuceneSearchQuery *query) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$weight_, capture$0);
  OrgApacheLuceneSearchConstantScoreWeight_initWithOrgApacheLuceneSearchQuery_(self, query);
  JreStrongAssignAndConsume(&self->used_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
}

OrgApacheLuceneSearchCachingWrapperQuery_1 *new_OrgApacheLuceneSearchCachingWrapperQuery_1_initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchCachingWrapperQuery *outer$, OrgApacheLuceneSearchWeight *capture$0, OrgApacheLuceneSearchQuery *query) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneSearchCachingWrapperQuery_1, initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_, outer$, capture$0, query)
}

OrgApacheLuceneSearchCachingWrapperQuery_1 *create_OrgApacheLuceneSearchCachingWrapperQuery_1_initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchCachingWrapperQuery *outer$, OrgApacheLuceneSearchWeight *capture$0, OrgApacheLuceneSearchQuery *query) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneSearchCachingWrapperQuery_1, initWithOrgApacheLuceneSearchCachingWrapperQuery_withOrgApacheLuceneSearchWeight_withOrgApacheLuceneSearchQuery_, outer$, capture$0, query)
}
