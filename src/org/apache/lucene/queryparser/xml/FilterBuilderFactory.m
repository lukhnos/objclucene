//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilderFactory.java
//

#include "J2ObjC_source.h"
#include "java/util/HashMap.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/w3c/dom/Element.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/xml/FilterBuilderFactory must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneQueryparserXmlFilterBuilderFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserXmlFilterBuilderFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneSearchFilter *)getFilterWithOrgW3cDomElement:(id<OrgW3cDomElement>)n {
  id<OrgApacheLuceneQueryparserXmlFilterBuilder> builder = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(builders_)) getWithId:[((id<OrgW3cDomElement>) nil_chk(n)) getNodeName]]);
  if (builder == nil) {
    @throw create_OrgApacheLuceneQueryparserXmlParserException_initWithNSString_(JreStrcat("$$", @"No FilterBuilder defined for node ", [n getNodeName]));
  }
  return [builder getFilterWithOrgW3cDomElement:n];
}

- (void)addBuilderWithNSString:(NSString *)nodeName
withOrgApacheLuceneQueryparserXmlFilterBuilder:(id<OrgApacheLuceneQueryparserXmlFilterBuilder>)builder {
  [((JavaUtilHashMap *) nil_chk(builders_)) putWithId:nodeName withId:builder];
}

- (id<OrgApacheLuceneQueryparserXmlFilterBuilder>)getFilterBuilderWithNSString:(NSString *)nodeName {
  return [((JavaUtilHashMap *) nil_chk(builders_)) getWithId:nodeName];
}

- (void)dealloc {
  RELEASE_(builders_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchFilter;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserXmlFilterBuilder;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getFilterWithOrgW3cDomElement:);
  methods[2].selector = @selector(addBuilderWithNSString:withOrgApacheLuceneQueryparserXmlFilterBuilder:);
  methods[3].selector = @selector(getFilterBuilderWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "builders_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "getFilter", "LOrgW3cDomElement;", "LOrgApacheLuceneQueryparserXmlParserException;", "addBuilder", "LNSString;LOrgApacheLuceneQueryparserXmlFilterBuilder;", "getFilterBuilder", "LNSString;", "Ljava/util/HashMap<Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/FilterBuilder;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserXmlFilterBuilderFactory = { "FilterBuilderFactory", "org.apache.lucene.queryparser.xml", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserXmlFilterBuilderFactory;
}

@end

void OrgApacheLuceneQueryparserXmlFilterBuilderFactory_init(OrgApacheLuceneQueryparserXmlFilterBuilderFactory *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->builders_, new_JavaUtilHashMap_init());
}

OrgApacheLuceneQueryparserXmlFilterBuilderFactory *new_OrgApacheLuceneQueryparserXmlFilterBuilderFactory_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserXmlFilterBuilderFactory, init)
}

OrgApacheLuceneQueryparserXmlFilterBuilderFactory *create_OrgApacheLuceneQueryparserXmlFilterBuilderFactory_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserXmlFilterBuilderFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserXmlFilterBuilderFactory)
