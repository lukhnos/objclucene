//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/surround/query/BasicQueryFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/surround/query/BasicQueryFactory must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory () {
 @public
  jint maxBasicQueries_;
  jint queriesMade_;
}

- (jboolean)atMax;

@end

__attribute__((unused)) static jboolean OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_atMax(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *self);

@implementation OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory

- (instancetype)initWithInt:(jint)maxBasicQueries {
  OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_initWithInt_(self, maxBasicQueries);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getNrQueriesMade {
  return queriesMade_;
}

- (jint)getMaxBasicQueries {
  return maxBasicQueries_;
}

- (NSString *)description {
  return JreStrcat("$$I$IC", [[self java_getClass] getName], @"(maxBasicQueries: ", maxBasicQueries_, @", queriesMade: ", queriesMade_, ')');
}

- (jboolean)atMax {
  return OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_atMax(self);
}

- (void)checkMax {
  @synchronized(self) {
    if (OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_atMax(self)) @throw create_OrgApacheLuceneQueryparserSurroundQueryTooManyBasicQueries_initWithInt_([self getMaxBasicQueries]);
    queriesMade_++;
  }
}

- (OrgApacheLuceneSearchTermQuery *)newTermQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [self checkMax];
  return create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(term);
}

- (OrgApacheLuceneSearchSpansSpanTermQuery *)newSpanTermQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [self checkMax];
  return create_OrgApacheLuceneSearchSpansSpanTermQuery_initWithOrgApacheLuceneIndexTerm_(term);
}

- (NSUInteger)hash {
  return ((jint) [[self java_getClass] hash]) ^ (OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_atMax(self) ? 7 : 31 * 32);
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory class]])) return false;
  OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *other = (OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *) cast_chk(obj, [OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory class]);
  return OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_atMax(self) == OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_atMax(nil_chk(other));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x24, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchTermQuery;", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanTermQuery;", 0x1, 5, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getNrQueriesMade);
  methods[3].selector = @selector(getMaxBasicQueries);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(atMax);
  methods[6].selector = @selector(checkMax);
  methods[7].selector = @selector(newTermQueryWithOrgApacheLuceneIndexTerm:);
  methods[8].selector = @selector(newSpanTermQueryWithOrgApacheLuceneIndexTerm:);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxBasicQueries_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "queriesMade_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "toString", "LOrgApacheLuceneQueryparserSurroundQueryTooManyBasicQueries;", "newTermQuery", "LOrgApacheLuceneIndexTerm;", "newSpanTermQuery", "hashCode", "equals", "LNSObject;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory = { "BasicQueryFactory", "org.apache.lucene.queryparser.surround.query", ptrTable, methods, fields, 7, 0x1, 11, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory;
}

@end

void OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_initWithInt_(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *self, jint maxBasicQueries) {
  NSObject_init(self);
  self->maxBasicQueries_ = maxBasicQueries;
  self->queriesMade_ = 0;
}

OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *new_OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_initWithInt_(jint maxBasicQueries) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory, initWithInt_, maxBasicQueries)
}

OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *create_OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_initWithInt_(jint maxBasicQueries) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory, initWithInt_, maxBasicQueries)
}

void OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_init(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *self) {
  OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_initWithInt_(self, 1024);
}

OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *new_OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory, init)
}

OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *create_OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory, init)
}

jboolean OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_atMax(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *self) {
  return self->queriesMade_ >= self->maxBasicQueries_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory)
