//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/surround/query/OrQuery.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/ComposedQuery.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/queryparser/surround/query/OrQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/queryparser/surround/query/SrndBooleanQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/Query.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/surround/query/OrQuery must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgApacheLuceneQueryparserSurroundQueryOrQuery

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)queries
                         withBoolean:(jboolean)infix
                        withNSString:(NSString *)opName {
  OrgApacheLuceneQueryparserSurroundQueryOrQuery_initWithJavaUtilList_withBoolean_withNSString_(self, queries, infix, opName);
  return self;
}

- (OrgApacheLuceneSearchQuery *)makeLuceneQueryFieldNoBoostWithNSString:(NSString *)fieldName
           withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *)qf {
  return OrgApacheLuceneQueryparserSurroundQuerySrndBooleanQuery_makeBooleanQueryWithJavaUtilList_withOrgApacheLuceneSearchBooleanClause_Occur_([self makeLuceneSubQueriesFieldWithNSString:fieldName withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:qf], JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD));
}

- (NSString *)distanceSubQueryNotAllowed {
  id<JavaUtilIterator> sqi = JreRetainedLocalValue([self getSubQueriesIterator]);
  while ([((id<JavaUtilIterator>) nil_chk(sqi)) hasNext]) {
    OrgApacheLuceneQueryparserSurroundQuerySrndQuery *leq = (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) cast_chk([sqi next], [OrgApacheLuceneQueryparserSurroundQuerySrndQuery class]);
    if ([OrgApacheLuceneQueryparserSurroundQueryDistanceSubQuery_class_() isInstance:leq]) {
      NSString *m = JreRetainedLocalValue([((id<OrgApacheLuceneQueryparserSurroundQueryDistanceSubQuery>) nil_chk(((id<OrgApacheLuceneQueryparserSurroundQueryDistanceSubQuery>) cast_check(leq, OrgApacheLuceneQueryparserSurroundQueryDistanceSubQuery_class_())))) distanceSubQueryNotAllowed]);
      if (m != nil) {
        return m;
      }
    }
    else {
      return JreStrcat("$$", @"subquery not allowed: ", [((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk(leq)) description]);
    }
  }
  return nil;
}

- (void)addSpanQueriesWithOrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory:(OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory *)sncf {
  id<JavaUtilIterator> sqi = JreRetainedLocalValue([self getSubQueriesIterator]);
  while ([((id<JavaUtilIterator>) nil_chk(sqi)) hasNext]) {
    [((id<OrgApacheLuceneQueryparserSurroundQueryDistanceSubQuery>) nil_chk(((id<OrgApacheLuceneQueryparserSurroundQueryDistanceSubQuery>) cast_check([sqi next], OrgApacheLuceneQueryparserSurroundQueryDistanceSubQuery_class_())))) addSpanQueriesWithOrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory:sncf];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withBoolean:withNSString:);
  methods[1].selector = @selector(makeLuceneQueryFieldNoBoostWithNSString:withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:);
  methods[2].selector = @selector(distanceSubQueryNotAllowed);
  methods[3].selector = @selector(addSpanQueriesWithOrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaUtilList;ZLNSString;", "(Ljava/util/List<Lorg/apache/lucene/queryparser/surround/query/SrndQuery;>;ZLjava/lang/String;)V", "makeLuceneQueryFieldNoBoost", "LNSString;LOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory;", "addSpanQueries", "LOrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserSurroundQueryOrQuery = { "OrQuery", "org.apache.lucene.queryparser.surround.query", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserSurroundQueryOrQuery;
}

@end

void OrgApacheLuceneQueryparserSurroundQueryOrQuery_initWithJavaUtilList_withBoolean_withNSString_(OrgApacheLuceneQueryparserSurroundQueryOrQuery *self, id<JavaUtilList> queries, jboolean infix, NSString *opName) {
  OrgApacheLuceneQueryparserSurroundQueryComposedQuery_initWithJavaUtilList_withBoolean_withNSString_(self, queries, infix, opName);
}

OrgApacheLuceneQueryparserSurroundQueryOrQuery *new_OrgApacheLuceneQueryparserSurroundQueryOrQuery_initWithJavaUtilList_withBoolean_withNSString_(id<JavaUtilList> queries, jboolean infix, NSString *opName) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSurroundQueryOrQuery, initWithJavaUtilList_withBoolean_withNSString_, queries, infix, opName)
}

OrgApacheLuceneQueryparserSurroundQueryOrQuery *create_OrgApacheLuceneQueryparserSurroundQueryOrQuery_initWithJavaUtilList_withBoolean_withNSString_(id<JavaUtilList> queries, jboolean infix, NSString *opName) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSurroundQueryOrQuery, initWithJavaUtilList_withBoolean_withNSString_, queries, infix, opName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserSurroundQueryOrQuery)
