//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/MultiFields.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm.h"
#include "org/apache/lucene/queryparser/surround/query/SrndPrefixQuery.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/StringHelper.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/surround/query/SrndPrefixQuery must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery () {
 @public
  OrgApacheLuceneUtilBytesRef *prefixRef_;
  NSString *prefix_;
  jchar truncator_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery, prefixRef_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery, prefix_, NSString *)

@implementation OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery

- (instancetype)initWithNSString:(NSString *)prefix
                     withBoolean:(jboolean)quoted
                        withChar:(jchar)truncator {
  OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery_initWithNSString_withBoolean_withChar_(self, prefix, quoted, truncator);
  return self;
}

- (NSString *)getPrefix {
  return prefix_;
}

- (jchar)getSuffixOperator {
  return truncator_;
}

- (OrgApacheLuceneIndexTerm *)getLucenePrefixTermWithNSString:(NSString *)fieldName {
  return create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(fieldName, [self getPrefix]);
}

- (NSString *)toStringUnquoted {
  return [self getPrefix];
}

- (void)suffixToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)r {
  [((JavaLangStringBuilder *) nil_chk(r)) appendWithChar:[self getSuffixOperator]];
}

- (void)visitMatchingTermsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                 withNSString:(NSString *)fieldName
withOrgApacheLuceneQueryparserSurroundQuerySimpleTerm_MatchingTermVisitor:(id<OrgApacheLuceneQueryparserSurroundQuerySimpleTerm_MatchingTermVisitor>)mtv {
  OrgApacheLuceneIndexTerms *terms = OrgApacheLuceneIndexMultiFields_getTermsWithOrgApacheLuceneIndexIndexReader_withNSString_(reader, fieldName);
  if (terms != nil) {
    OrgApacheLuceneIndexTermsEnum *termsEnum = JreRetainedLocalValue([terms iterator]);
    jboolean skip = false;
    OrgApacheLuceneIndexTermsEnum_SeekStatus *status = JreRetainedLocalValue([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekCeilWithOrgApacheLuceneUtilBytesRef:create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_([self getPrefix])]);
    if (status == JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND)) {
      [((id<OrgApacheLuceneQueryparserSurroundQuerySimpleTerm_MatchingTermVisitor>) nil_chk(mtv)) visitMatchingTermWithOrgApacheLuceneIndexTerm:[self getLucenePrefixTermWithNSString:fieldName]];
    }
    else if (status == JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, NOT_FOUND)) {
      if (OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_([termsEnum term], prefixRef_)) {
        [((id<OrgApacheLuceneQueryparserSurroundQuerySimpleTerm_MatchingTermVisitor>) nil_chk(mtv)) visitMatchingTermWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(fieldName, [((OrgApacheLuceneUtilBytesRef *) nil_chk([termsEnum term])) utf8ToString])];
      }
      else {
        skip = true;
      }
    }
    else {
      skip = true;
    }
    if (!skip) {
      while (true) {
        OrgApacheLuceneUtilBytesRef *text = JreRetainedLocalValue([termsEnum next]);
        if (text != nil && OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(text, prefixRef_)) {
          [((id<OrgApacheLuceneQueryparserSurroundQuerySimpleTerm_MatchingTermVisitor>) nil_chk(mtv)) visitMatchingTermWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(fieldName, [text utf8ToString])];
        }
        else {
          break;
        }
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(prefixRef_);
  RELEASE_(prefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerm;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withBoolean:withChar:);
  methods[1].selector = @selector(getPrefix);
  methods[2].selector = @selector(getSuffixOperator);
  methods[3].selector = @selector(getLucenePrefixTermWithNSString:);
  methods[4].selector = @selector(toStringUnquoted);
  methods[5].selector = @selector(suffixToStringWithJavaLangStringBuilder:);
  methods[6].selector = @selector(visitMatchingTermsWithOrgApacheLuceneIndexIndexReader:withNSString:withOrgApacheLuceneQueryparserSurroundQuerySimpleTerm_MatchingTermVisitor:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "prefixRef_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prefix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "truncator_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ZC", "getLucenePrefixTerm", "LNSString;", "suffixToString", "LJavaLangStringBuilder;", "visitMatchingTerms", "LOrgApacheLuceneIndexIndexReader;LNSString;LOrgApacheLuceneQueryparserSurroundQuerySimpleTerm_MatchingTermVisitor;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery = { "SrndPrefixQuery", "org.apache.lucene.queryparser.surround.query", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery;
}

@end

void OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery_initWithNSString_withBoolean_withChar_(OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery *self, NSString *prefix, jboolean quoted, jchar truncator) {
  OrgApacheLuceneQueryparserSurroundQuerySimpleTerm_initWithBoolean_(self, quoted);
  JreStrongAssign(&self->prefix_, prefix);
  JreStrongAssignAndConsume(&self->prefixRef_, new_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(prefix));
  self->truncator_ = truncator;
}

OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery *new_OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery_initWithNSString_withBoolean_withChar_(NSString *prefix, jboolean quoted, jchar truncator) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery, initWithNSString_withBoolean_withChar_, prefix, quoted, truncator)
}

OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery *create_OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery_initWithNSString_withBoolean_withChar_(NSString *prefix, jboolean quoted, jchar truncator) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery, initWithNSString_withBoolean_withChar_, prefix, quoted, truncator)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserSurroundQuerySrndPrefixQuery)
