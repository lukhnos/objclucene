//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/surround/query/ComposedQuery.java
//

#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/ComposedQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/search/Query.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/surround/query/ComposedQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserSurroundQueryComposedQuery () {
 @public
  jboolean operatorInfix_;
}

@end

@implementation OrgApacheLuceneQueryparserSurroundQueryComposedQuery

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)qs
                         withBoolean:(jboolean)operatorInfix
                        withNSString:(NSString *)opName {
  OrgApacheLuceneQueryparserSurroundQueryComposedQuery_initWithJavaUtilList_withBoolean_withNSString_(self, qs, operatorInfix, opName);
  return self;
}

- (void)recomposeWithJavaUtilList:(id<JavaUtilList>)queries {
  if ([((id<JavaUtilList>) nil_chk(queries)) size] < 2) @throw create_JavaLangAssertionError_initWithId_(@"Too few subqueries");
  JreStrongAssign(&self->queries_, queries);
}

- (NSString *)getOperatorName {
  return opName_;
}

- (id<JavaUtilIterator>)getSubQueriesIterator {
  return [((id<JavaUtilList>) nil_chk(queries_)) listIterator];
}

- (jint)getNrSubQueries {
  return [((id<JavaUtilList>) nil_chk(queries_)) size];
}

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)getSubQueryWithInt:(jint)qn {
  return [((id<JavaUtilList>) nil_chk(queries_)) getWithInt:qn];
}

- (jboolean)isOperatorInfix {
  return operatorInfix_;
}

- (id<JavaUtilList>)makeLuceneSubQueriesFieldWithNSString:(NSString *)fn
withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *)qf {
  id<JavaUtilList> luceneSubQueries = create_JavaUtilArrayList_init();
  id<JavaUtilIterator> sqi = JreRetainedLocalValue([self getSubQueriesIterator]);
  while ([((id<JavaUtilIterator>) nil_chk(sqi)) hasNext]) {
    [luceneSubQueries addWithId:[((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk(([sqi next]))) makeLuceneQueryFieldWithNSString:fn withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:qf]];
  }
  return luceneSubQueries;
}

- (NSString *)description {
  JavaLangStringBuilder *r = create_JavaLangStringBuilder_init();
  if ([self isOperatorInfix]) {
    [self infixToStringWithJavaLangStringBuilder:r];
  }
  else {
    [self prefixToStringWithJavaLangStringBuilder:r];
  }
  [self weightToStringWithJavaLangStringBuilder:r];
  return [r description];
}

- (NSString *)getPrefixSeparator {
  return @", ";
}

- (NSString *)getBracketOpen {
  return @"(";
}

- (NSString *)getBracketClose {
  return @")";
}

- (void)infixToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)r {
  id<JavaUtilIterator> sqi = JreRetainedLocalValue([self getSubQueriesIterator]);
  [((JavaLangStringBuilder *) nil_chk(r)) appendWithNSString:[self getBracketOpen]];
  if ([((id<JavaUtilIterator>) nil_chk(sqi)) hasNext]) {
    [r appendWithNSString:[((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk([sqi next])) description]];
    while ([sqi hasNext]) {
      [r appendWithNSString:@" "];
      [r appendWithNSString:[self getOperatorName]];
      [r appendWithNSString:@" "];
      [r appendWithNSString:[((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk([sqi next])) description]];
    }
  }
  [r appendWithNSString:[self getBracketClose]];
}

- (void)prefixToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)r {
  id<JavaUtilIterator> sqi = JreRetainedLocalValue([self getSubQueriesIterator]);
  [((JavaLangStringBuilder *) nil_chk(r)) appendWithNSString:[self getOperatorName]];
  [r appendWithNSString:[self getBracketOpen]];
  if ([((id<JavaUtilIterator>) nil_chk(sqi)) hasNext]) {
    [r appendWithNSString:[((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk([sqi next])) description]];
    while ([sqi hasNext]) {
      [r appendWithNSString:[self getPrefixSeparator]];
      [r appendWithNSString:[((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk([sqi next])) description]];
    }
  }
  [r appendWithNSString:[self getBracketClose]];
}

- (jboolean)isFieldsSubQueryAcceptable {
  id<JavaUtilIterator> sqi = JreRetainedLocalValue([self getSubQueriesIterator]);
  while ([((id<JavaUtilIterator>) nil_chk(sqi)) hasNext]) {
    if ([((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk(([sqi next]))) isFieldsSubQueryAcceptable]) {
      return true;
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(opName_);
  RELEASE_(queries_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserSurroundQuerySrndQuery;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withBoolean:withNSString:);
  methods[1].selector = @selector(recomposeWithJavaUtilList:);
  methods[2].selector = @selector(getOperatorName);
  methods[3].selector = @selector(getSubQueriesIterator);
  methods[4].selector = @selector(getNrSubQueries);
  methods[5].selector = @selector(getSubQueryWithInt:);
  methods[6].selector = @selector(isOperatorInfix);
  methods[7].selector = @selector(makeLuceneSubQueriesFieldWithNSString:withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(getPrefixSeparator);
  methods[10].selector = @selector(getBracketOpen);
  methods[11].selector = @selector(getBracketClose);
  methods[12].selector = @selector(infixToStringWithJavaLangStringBuilder:);
  methods[13].selector = @selector(prefixToStringWithJavaLangStringBuilder:);
  methods[14].selector = @selector(isFieldsSubQueryAcceptable);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "opName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "queries_", "LJavaUtilList;", .constantValue.asLong = 0, 0x4, -1, -1, 15, -1 },
    { "operatorInfix_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;ZLNSString;", "(Ljava/util/List<Lorg/apache/lucene/queryparser/surround/query/SrndQuery;>;ZLjava/lang/String;)V", "recompose", "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/queryparser/surround/query/SrndQuery;>;)V", "()Ljava/util/Iterator<Lorg/apache/lucene/queryparser/surround/query/SrndQuery;>;", "getSubQuery", "I", "makeLuceneSubQueriesField", "LNSString;LOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory;", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Ljava/util/List<Lorg/apache/lucene/search/Query;>;", "toString", "infixToString", "LJavaLangStringBuilder;", "prefixToString", "Ljava/util/List<Lorg/apache/lucene/queryparser/surround/query/SrndQuery;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserSurroundQueryComposedQuery = { "ComposedQuery", "org.apache.lucene.queryparser.surround.query", ptrTable, methods, fields, 7, 0x401, 15, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserSurroundQueryComposedQuery;
}

@end

void OrgApacheLuceneQueryparserSurroundQueryComposedQuery_initWithJavaUtilList_withBoolean_withNSString_(OrgApacheLuceneQueryparserSurroundQueryComposedQuery *self, id<JavaUtilList> qs, jboolean operatorInfix, NSString *opName) {
  OrgApacheLuceneQueryparserSurroundQuerySrndQuery_init(self);
  [self recomposeWithJavaUtilList:qs];
  self->operatorInfix_ = operatorInfix;
  JreStrongAssign(&self->opName_, opName);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserSurroundQueryComposedQuery)
