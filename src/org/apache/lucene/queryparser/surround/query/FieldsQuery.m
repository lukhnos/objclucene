//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/surround/query/FieldsQuery.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/FieldsQuery.h"
#include "org/apache/lucene/queryparser/surround/query/OrQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/search/Query.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/surround/query/FieldsQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserSurroundQueryFieldsQuery () {
 @public
  OrgApacheLuceneQueryparserSurroundQuerySrndQuery *q_;
  id<JavaUtilList> fieldNames_;
  jchar fieldOp_;
  NSString *OrOperatorName_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery, q_, OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery, fieldNames_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery, OrOperatorName_, NSString *)

@implementation OrgApacheLuceneQueryparserSurroundQueryFieldsQuery

- (instancetype)initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery:(OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)q
                                                        withJavaUtilList:(id<JavaUtilList>)fieldNames
                                                                withChar:(jchar)fieldOp {
  OrgApacheLuceneQueryparserSurroundQueryFieldsQuery_initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withJavaUtilList_withChar_(self, q, fieldNames, fieldOp);
  return self;
}

- (instancetype)initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery:(OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)q
                                                            withNSString:(NSString *)fieldName
                                                                withChar:(jchar)fieldOp {
  OrgApacheLuceneQueryparserSurroundQueryFieldsQuery_initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withNSString_withChar_(self, q, fieldName, fieldOp);
  return self;
}

- (jboolean)isFieldsSubQueryAcceptable {
  return false;
}

- (OrgApacheLuceneSearchQuery *)makeLuceneQueryNoBoostWithOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *)qf {
  if ([((id<JavaUtilList>) nil_chk(fieldNames_)) size] == 1) {
    return [((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk(q_)) makeLuceneQueryFieldNoBoostWithNSString:[((id<JavaUtilList>) nil_chk(fieldNames_)) getWithInt:0] withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:qf];
  }
  else {
    id<JavaUtilList> queries = create_JavaUtilArrayList_init();
    id<JavaUtilIterator> fni = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk([self getFieldNames])) listIterator]);
    OrgApacheLuceneQueryparserSurroundQuerySrndQuery *qc;
    while ([((id<JavaUtilIterator>) nil_chk(fni)) hasNext]) {
      qc = [((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk(q_)) java_clone];
      [queries addWithId:create_OrgApacheLuceneQueryparserSurroundQueryFieldsQuery_initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withNSString_withChar_(qc, [fni next], fieldOp_)];
    }
    OrgApacheLuceneQueryparserSurroundQueryOrQuery *oq = create_OrgApacheLuceneQueryparserSurroundQueryOrQuery_initWithJavaUtilList_withBoolean_withNSString_(queries, true, OrOperatorName_);
    return [oq makeLuceneQueryFieldWithNSString:nil withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:qf];
  }
}

- (OrgApacheLuceneSearchQuery *)makeLuceneQueryFieldNoBoostWithNSString:(NSString *)fieldName
           withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *)qf {
  return [self makeLuceneQueryNoBoostWithOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:qf];
}

- (id<JavaUtilList>)getFieldNames {
  return fieldNames_;
}

- (jchar)getFieldOperator {
  return fieldOp_;
}

- (NSString *)description {
  JavaLangStringBuilder *r = create_JavaLangStringBuilder_init();
  [r appendWithNSString:@"("];
  [self fieldNamesToStringWithJavaLangStringBuilder:r];
  [r appendWithNSString:[((OrgApacheLuceneQueryparserSurroundQuerySrndQuery *) nil_chk(q_)) description]];
  [r appendWithNSString:@")"];
  return [r description];
}

- (void)fieldNamesToStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)r {
  id<JavaUtilIterator> fni = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk([self getFieldNames])) listIterator]);
  while ([((id<JavaUtilIterator>) nil_chk(fni)) hasNext]) {
    [((JavaLangStringBuilder *) nil_chk(r)) appendWithNSString:[fni next]];
    [r appendWithChar:[self getFieldOperator]];
  }
}

- (void)dealloc {
  RELEASE_(q_);
  RELEASE_(fieldNames_);
  RELEASE_(OrOperatorName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery:withJavaUtilList:withChar:);
  methods[1].selector = @selector(initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery:withNSString:withChar:);
  methods[2].selector = @selector(isFieldsSubQueryAcceptable);
  methods[3].selector = @selector(makeLuceneQueryNoBoostWithOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:);
  methods[4].selector = @selector(makeLuceneQueryFieldNoBoostWithNSString:withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:);
  methods[5].selector = @selector(getFieldNames);
  methods[6].selector = @selector(getFieldOperator);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(fieldNamesToStringWithJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "q_", "LOrgApacheLuceneQueryparserSurroundQuerySrndQuery;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldNames_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
    { "fieldOp_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "OrOperatorName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneQueryparserSurroundQuerySrndQuery;LJavaUtilList;C", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/List<Ljava/lang/String;>;C)V", "LOrgApacheLuceneQueryparserSurroundQuerySrndQuery;LNSString;C", "makeLuceneQueryNoBoost", "LOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory;", "makeLuceneQueryFieldNoBoost", "LNSString;LOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory;", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "fieldNamesToString", "LJavaLangStringBuilder;", "Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserSurroundQueryFieldsQuery = { "FieldsQuery", "org.apache.lucene.queryparser.surround.query", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserSurroundQueryFieldsQuery;
}

@end

void OrgApacheLuceneQueryparserSurroundQueryFieldsQuery_initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withJavaUtilList_withChar_(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery *self, OrgApacheLuceneQueryparserSurroundQuerySrndQuery *q, id<JavaUtilList> fieldNames, jchar fieldOp) {
  OrgApacheLuceneQueryparserSurroundQuerySrndQuery_init(self);
  JreStrongAssign(&self->OrOperatorName_, @"OR");
  JreStrongAssign(&self->q_, q);
  JreStrongAssign(&self->fieldNames_, fieldNames);
  self->fieldOp_ = fieldOp;
}

OrgApacheLuceneQueryparserSurroundQueryFieldsQuery *new_OrgApacheLuceneQueryparserSurroundQueryFieldsQuery_initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withJavaUtilList_withChar_(OrgApacheLuceneQueryparserSurroundQuerySrndQuery *q, id<JavaUtilList> fieldNames, jchar fieldOp) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery, initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withJavaUtilList_withChar_, q, fieldNames, fieldOp)
}

OrgApacheLuceneQueryparserSurroundQueryFieldsQuery *create_OrgApacheLuceneQueryparserSurroundQueryFieldsQuery_initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withJavaUtilList_withChar_(OrgApacheLuceneQueryparserSurroundQuerySrndQuery *q, id<JavaUtilList> fieldNames, jchar fieldOp) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery, initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withJavaUtilList_withChar_, q, fieldNames, fieldOp)
}

void OrgApacheLuceneQueryparserSurroundQueryFieldsQuery_initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withNSString_withChar_(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery *self, OrgApacheLuceneQueryparserSurroundQuerySrndQuery *q, NSString *fieldName, jchar fieldOp) {
  OrgApacheLuceneQueryparserSurroundQuerySrndQuery_init(self);
  JreStrongAssign(&self->OrOperatorName_, @"OR");
  JreStrongAssign(&self->q_, q);
  JreStrongAssignAndConsume(&self->fieldNames_, new_JavaUtilArrayList_init());
  [self->fieldNames_ addWithId:fieldName];
  self->fieldOp_ = fieldOp;
}

OrgApacheLuceneQueryparserSurroundQueryFieldsQuery *new_OrgApacheLuceneQueryparserSurroundQueryFieldsQuery_initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withNSString_withChar_(OrgApacheLuceneQueryparserSurroundQuerySrndQuery *q, NSString *fieldName, jchar fieldOp) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery, initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withNSString_withChar_, q, fieldName, fieldOp)
}

OrgApacheLuceneQueryparserSurroundQueryFieldsQuery *create_OrgApacheLuceneQueryparserSurroundQueryFieldsQuery_initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withNSString_withChar_(OrgApacheLuceneQueryparserSurroundQuerySrndQuery *q, NSString *fieldName, jchar fieldOp) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery, initWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery_withNSString_withChar_, q, fieldName, fieldOp)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserSurroundQueryFieldsQuery)
