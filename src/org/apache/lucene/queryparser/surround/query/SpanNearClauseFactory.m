//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Float.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/search/MatchNoDocsQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/spans/SpanOrQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory () {
 @public
  OrgApacheLuceneIndexIndexReader *reader_;
  NSString *fieldName_;
  JavaUtilHashMap *weightBySpanQuery_;
  OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *qf_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory, reader_, OrgApacheLuceneIndexIndexReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory, fieldName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory, weightBySpanQuery_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory, qf_, OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *)

@implementation OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory

- (instancetype)initWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                           withNSString:(NSString *)fieldName
withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:(OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *)qf {
  OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory_initWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_(self, reader, fieldName, qf);
  return self;
}

- (OrgApacheLuceneIndexIndexReader *)getIndexReader {
  return reader_;
}

- (NSString *)getFieldName {
  return fieldName_;
}

- (OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *)getBasicQueryFactory {
  return qf_;
}

- (jint)size {
  return [((JavaUtilHashMap *) nil_chk(weightBySpanQuery_)) size];
}

- (void)clear {
  [((JavaUtilHashMap *) nil_chk(weightBySpanQuery_)) clear];
}

- (void)addSpanQueryWeightedWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)sq
                                                          withFloat:(jfloat)weight {
  JavaLangFloat *w = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(weightBySpanQuery_)) getWithId:sq]);
  if (w != nil) w = JavaLangFloat_valueOfWithFloat_([w floatValue] + weight);
  else w = JavaLangFloat_valueOfWithFloat_(weight);
  [((JavaUtilHashMap *) nil_chk(weightBySpanQuery_)) putWithId:sq withId:w];
}

- (void)addTermWeightedWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t
                                          withFloat:(jfloat)weight {
  OrgApacheLuceneSearchSpansSpanTermQuery *stq = JreRetainedLocalValue([((OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *) nil_chk(qf_)) newSpanTermQueryWithOrgApacheLuceneIndexTerm:t]);
  [self addSpanQueryWeightedWithOrgApacheLuceneSearchSpansSpanQuery:stq withFloat:weight];
}

- (void)addSpanQueryWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)q {
  if (JreObjectEqualsEquals([((OrgApacheLuceneSearchQuery *) nil_chk(q)) java_getClass], OrgApacheLuceneSearchMatchNoDocsQuery_class_())) return;
  if (!([q isKindOfClass:[OrgApacheLuceneSearchSpansSpanQuery class]])) @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$$", @"Expected SpanQuery: ", [q toStringWithNSString:[self getFieldName]]));
  [self addSpanQueryWeightedWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *) cast_chk(q, [OrgApacheLuceneSearchSpansSpanQuery class]) withFloat:[q getBoost]];
}

- (OrgApacheLuceneSearchSpansSpanQuery *)makeSpanClause {
  IOSObjectArray *spanQueries = [IOSObjectArray arrayWithLength:[self size] type:OrgApacheLuceneSearchSpansSpanQuery_class_()];
  id<JavaUtilIterator> sqi = JreRetainedLocalValue([((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(weightBySpanQuery_)) keySet])) iterator]);
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(sqi)) hasNext]) {
    OrgApacheLuceneSearchSpansSpanQuery *sq = JreRetainedLocalValue([sqi next]);
    [((OrgApacheLuceneSearchSpansSpanQuery *) nil_chk(sq)) setBoostWithFloat:[((JavaLangFloat *) nil_chk([((JavaUtilHashMap *) nil_chk(weightBySpanQuery_)) getWithId:sq])) floatValue]];
    IOSObjectArray_Set(spanQueries, i++, sq);
  }
  if (spanQueries->size_ == 1) return IOSObjectArray_Get(spanQueries, 0);
  else return create_OrgApacheLuceneSearchSpansSpanOrQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_(spanQueries);
}

- (void)dealloc {
  RELEASE_(reader_);
  RELEASE_(fieldName_);
  RELEASE_(weightBySpanQuery_);
  RELEASE_(qf_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSpansSpanQuery;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexReader:withNSString:withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory:);
  methods[1].selector = @selector(getIndexReader);
  methods[2].selector = @selector(getFieldName);
  methods[3].selector = @selector(getBasicQueryFactory);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(clear);
  methods[6].selector = @selector(addSpanQueryWeightedWithOrgApacheLuceneSearchSpansSpanQuery:withFloat:);
  methods[7].selector = @selector(addTermWeightedWithOrgApacheLuceneIndexTerm:withFloat:);
  methods[8].selector = @selector(addSpanQueryWithOrgApacheLuceneSearchQuery:);
  methods[9].selector = @selector(makeSpanClause);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LOrgApacheLuceneIndexIndexReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "weightBySpanQuery_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "qf_", "LOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexReader;LNSString;LOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory;", "addSpanQueryWeighted", "LOrgApacheLuceneSearchSpansSpanQuery;F", "addTermWeighted", "LOrgApacheLuceneIndexTerm;F", "LJavaIoIOException;", "addSpanQuery", "LOrgApacheLuceneSearchQuery;", "Ljava/util/HashMap<Lorg/apache/lucene/search/spans/SpanQuery;Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory = { "SpanNearClauseFactory", "org.apache.lucene.queryparser.surround.query", ptrTable, methods, fields, 7, 0x1, 10, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory;
}

@end

void OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory_initWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_(OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory *self, OrgApacheLuceneIndexIndexReader *reader, NSString *fieldName, OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *qf) {
  NSObject_init(self);
  JreStrongAssign(&self->reader_, reader);
  JreStrongAssign(&self->fieldName_, fieldName);
  JreStrongAssignAndConsume(&self->weightBySpanQuery_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->qf_, qf);
}

OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory *new_OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory_initWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_(OrgApacheLuceneIndexIndexReader *reader, NSString *fieldName, OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *qf) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory, initWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_, reader, fieldName, qf)
}

OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory *create_OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory_initWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_(OrgApacheLuceneIndexIndexReader *reader, NSString *fieldName, OrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory *qf) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory, initWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneQueryparserSurroundQueryBasicQueryFactory_, reader, fieldName, qf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserSurroundQuerySpanNearClauseFactory)
