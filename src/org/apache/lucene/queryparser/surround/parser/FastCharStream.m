//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/System.h"
#include "org/apache/lucene/queryparser/surround/parser/FastCharStream.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/surround/parser/FastCharStream must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserSurroundParserFastCharStream ()

- (void)refill;

@end

__attribute__((unused)) static jchar OrgApacheLuceneQueryparserSurroundParserFastCharStream_readChar(OrgApacheLuceneQueryparserSurroundParserFastCharStream *self);

__attribute__((unused)) static void OrgApacheLuceneQueryparserSurroundParserFastCharStream_refill(OrgApacheLuceneQueryparserSurroundParserFastCharStream *self);

@implementation OrgApacheLuceneQueryparserSurroundParserFastCharStream

- (instancetype)initWithJavaIoReader:(JavaIoReader *)r {
  OrgApacheLuceneQueryparserSurroundParserFastCharStream_initWithJavaIoReader_(self, r);
  return self;
}

- (jchar)readChar {
  return OrgApacheLuceneQueryparserSurroundParserFastCharStream_readChar(self);
}

- (void)refill {
  OrgApacheLuceneQueryparserSurroundParserFastCharStream_refill(self);
}

- (jchar)BeginToken {
  tokenStart_ = bufferPosition_;
  return OrgApacheLuceneQueryparserSurroundParserFastCharStream_readChar(self);
}

- (void)backupWithInt:(jint)amount {
  bufferPosition_ -= amount;
}

- (NSString *)GetImage {
  return [NSString java_stringWithCharacters:buffer_ offset:tokenStart_ length:bufferPosition_ - tokenStart_];
}

- (IOSCharArray *)GetSuffixWithInt:(jint)len {
  IOSCharArray *value = [IOSCharArray arrayWithLength:len];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer_, bufferPosition_ - len, value, 0, len);
  return value;
}

- (void)Done {
  @try {
    [((JavaIoReader *) nil_chk(input_)) close];
  }
  @catch (JavaIoIOException *e) {
  }
}

- (jint)getColumn {
  return bufferStart_ + bufferPosition_;
}

- (jint)getLine {
  return 1;
}

- (jint)getEndColumn {
  return bufferStart_ + bufferPosition_;
}

- (jint)getEndLine {
  return 1;
}

- (jint)getBeginColumn {
  return bufferStart_ + tokenStart_;
}

- (jint)getBeginLine {
  return 1;
}

- (void)dealloc {
  RELEASE_(buffer_);
  RELEASE_(input_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "C", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 1, -1, -1, -1 },
    { NULL, "C", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x11, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoReader:);
  methods[1].selector = @selector(readChar);
  methods[2].selector = @selector(refill);
  methods[3].selector = @selector(BeginToken);
  methods[4].selector = @selector(backupWithInt:);
  methods[5].selector = @selector(GetImage);
  methods[6].selector = @selector(GetSuffixWithInt:);
  methods[7].selector = @selector(Done);
  methods[8].selector = @selector(getColumn);
  methods[9].selector = @selector(getLine);
  methods[10].selector = @selector(getEndColumn);
  methods[11].selector = @selector(getEndLine);
  methods[12].selector = @selector(getBeginColumn);
  methods[13].selector = @selector(getBeginLine);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "buffer_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufferLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufferPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tokenStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufferStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "input_", "LJavaIoReader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoReader;", "LJavaIoIOException;", "backup", "I", "GetSuffix" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserSurroundParserFastCharStream = { "FastCharStream", "org.apache.lucene.queryparser.surround.parser", ptrTable, methods, fields, 7, 0x11, 14, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserSurroundParserFastCharStream;
}

@end

void OrgApacheLuceneQueryparserSurroundParserFastCharStream_initWithJavaIoReader_(OrgApacheLuceneQueryparserSurroundParserFastCharStream *self, JavaIoReader *r) {
  NSObject_init(self);
  JreStrongAssign(&self->buffer_, nil);
  self->bufferLength_ = 0;
  self->bufferPosition_ = 0;
  self->tokenStart_ = 0;
  self->bufferStart_ = 0;
  JreStrongAssign(&self->input_, r);
}

OrgApacheLuceneQueryparserSurroundParserFastCharStream *new_OrgApacheLuceneQueryparserSurroundParserFastCharStream_initWithJavaIoReader_(JavaIoReader *r) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSurroundParserFastCharStream, initWithJavaIoReader_, r)
}

OrgApacheLuceneQueryparserSurroundParserFastCharStream *create_OrgApacheLuceneQueryparserSurroundParserFastCharStream_initWithJavaIoReader_(JavaIoReader *r) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSurroundParserFastCharStream, initWithJavaIoReader_, r)
}

jchar OrgApacheLuceneQueryparserSurroundParserFastCharStream_readChar(OrgApacheLuceneQueryparserSurroundParserFastCharStream *self) {
  if (self->bufferPosition_ >= self->bufferLength_) OrgApacheLuceneQueryparserSurroundParserFastCharStream_refill(self);
  return IOSCharArray_Get(nil_chk(self->buffer_), self->bufferPosition_++);
}

void OrgApacheLuceneQueryparserSurroundParserFastCharStream_refill(OrgApacheLuceneQueryparserSurroundParserFastCharStream *self) {
  jint newPosition = self->bufferLength_ - self->tokenStart_;
  if (self->tokenStart_ == 0) {
    if (self->buffer_ == nil) {
      JreStrongAssignAndConsume(&self->buffer_, [IOSCharArray newArrayWithLength:2048]);
    }
    else if (self->bufferLength_ == self->buffer_->size_) {
      IOSCharArray *newBuffer = [IOSCharArray arrayWithLength:self->buffer_->size_ * 2];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, 0, newBuffer, 0, self->bufferLength_);
      JreStrongAssign(&self->buffer_, newBuffer);
    }
  }
  else {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buffer_, self->tokenStart_, self->buffer_, 0, newPosition);
  }
  self->bufferLength_ = newPosition;
  self->bufferPosition_ = newPosition;
  self->bufferStart_ += self->tokenStart_;
  self->tokenStart_ = 0;
  jint charsRead = [((JavaIoReader *) nil_chk(self->input_)) readWithCharArray:self->buffer_ withInt:newPosition withInt:((IOSCharArray *) nil_chk(self->buffer_))->size_ - newPosition];
  if (charsRead == -1) @throw create_JavaIoIOException_initWithNSString_(@"read past eof");
  else self->bufferLength_ += charsRead;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserSurroundParserFastCharStream)
