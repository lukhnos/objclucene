//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/text/DateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/TimeZone.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/document/DateTools.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/queryparser/classic/FastCharStream.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "org/apache/lucene/queryparser/classic/TokenMgrError.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/QueryBuilder.h"
#include "org/apache/lucene/util/automaton/Operations.h"
#include "org/apache/lucene/util/automaton/RegExp.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/classic/QueryParserBase must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserClassicQueryParserBase ()

- (OrgApacheLuceneUtilBytesRef *)analyzeMultitermTermWithNSString:(NSString *)field
                                                     withNSString:(NSString *)part;

@end

__attribute__((unused)) static void OrgApacheLuceneQueryparserClassicQueryParserBase_setAutoGeneratePhraseQueriesWithBoolean_(OrgApacheLuceneQueryparserClassicQueryParserBase *self, jboolean value);

__attribute__((unused)) static OrgApacheLuceneUtilBytesRef *OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(OrgApacheLuceneQueryparserClassicQueryParserBase *self, NSString *field, NSString *part);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneQueryparserClassicQueryParserBase)

OrgApacheLuceneQueryparserClassicQueryParser_Operator *OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR;
OrgApacheLuceneQueryparserClassicQueryParser_Operator *OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR;

@implementation OrgApacheLuceneQueryparserClassicQueryParserBase

+ (jint)CONJ_NONE {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_NONE;
}

+ (jint)CONJ_AND {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_AND;
}

+ (jint)CONJ_OR {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_OR;
}

+ (jint)MOD_NONE {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NONE;
}

+ (jint)MOD_NOT {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NOT;
}

+ (jint)MOD_REQ {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_REQ;
}

+ (OrgApacheLuceneQueryparserClassicQueryParser_Operator *)AND_OPERATOR {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR;
}

+ (OrgApacheLuceneQueryparserClassicQueryParser_Operator *)OR_OPERATOR {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserClassicQueryParserBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithNSString:(NSString *)f
withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)a {
  [self setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:a];
  JreStrongAssign(&field_, f);
  OrgApacheLuceneQueryparserClassicQueryParserBase_setAutoGeneratePhraseQueriesWithBoolean_(self, false);
}

- (void)ReInitWithOrgApacheLuceneQueryparserClassicCharStream:(id<OrgApacheLuceneQueryparserClassicCharStream>)stream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgApacheLuceneSearchQuery *)TopLevelQueryWithNSString:(NSString *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneSearchQuery *)parseWithNSString:(NSString *)query {
  [self ReInitWithOrgApacheLuceneQueryparserClassicCharStream:create_OrgApacheLuceneQueryparserClassicFastCharStream_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_(query))];
  @try {
    OrgApacheLuceneSearchQuery *res = JreRetainedLocalValue([self TopLevelQueryWithNSString:field_]);
    return res != nil ? res : [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk([self newBooleanQueryWithBoolean:false])) build];
  }
  @catch (OrgApacheLuceneQueryparserClassicParseException *tme) {
    OrgApacheLuceneQueryparserClassicParseException *e = create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(JreStrcat("$$$$", @"Cannot parse '", query, @"': ", [tme getMessage]));
    [e initCauseWithJavaLangThrowable:tme];
    @throw e;
  }
  @catch (OrgApacheLuceneQueryparserClassicTokenMgrError *tme) {
    OrgApacheLuceneQueryparserClassicParseException *e = create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(JreStrcat("$$$$", @"Cannot parse '", query, @"': ", [tme getMessage]));
    [e initCauseWithJavaLangThrowable:tme];
    @throw e;
  }
  @catch (OrgApacheLuceneSearchBooleanQuery_TooManyClauses *tmc) {
    OrgApacheLuceneQueryparserClassicParseException *e = create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(JreStrcat("$$$", @"Cannot parse '", query, @"': too many boolean clauses"));
    [e initCauseWithJavaLangThrowable:tmc];
    @throw e;
  }
}

- (NSString *)getField {
  return field_;
}

- (jboolean)getAutoGeneratePhraseQueries {
  return autoGeneratePhraseQueries_;
}

- (void)setAutoGeneratePhraseQueriesWithBoolean:(jboolean)value {
  OrgApacheLuceneQueryparserClassicQueryParserBase_setAutoGeneratePhraseQueriesWithBoolean_(self, value);
}

- (jfloat)getFuzzyMinSim {
  return fuzzyMinSim_;
}

- (void)setFuzzyMinSimWithFloat:(jfloat)fuzzyMinSim {
  self->fuzzyMinSim_ = fuzzyMinSim;
}

- (jint)getFuzzyPrefixLength {
  return fuzzyPrefixLength_;
}

- (void)setFuzzyPrefixLengthWithInt:(jint)fuzzyPrefixLength {
  self->fuzzyPrefixLength_ = fuzzyPrefixLength;
}

- (void)setPhraseSlopWithInt:(jint)phraseSlop {
  self->phraseSlop_ = phraseSlop;
}

- (jint)getPhraseSlop {
  return phraseSlop_;
}

- (void)setAllowLeadingWildcardWithBoolean:(jboolean)allowLeadingWildcard {
  self->allowLeadingWildcard_ = allowLeadingWildcard;
}

- (jboolean)getAllowLeadingWildcard {
  return allowLeadingWildcard_;
}

- (void)setDefaultOperatorWithOrgApacheLuceneQueryparserClassicQueryParser_Operator:(OrgApacheLuceneQueryparserClassicQueryParser_Operator *)op {
  JreStrongAssign(&self->operator__, op);
}

- (OrgApacheLuceneQueryparserClassicQueryParser_Operator *)getDefaultOperator {
  return operator__;
}

- (void)setLowercaseExpandedTermsWithBoolean:(jboolean)lowercaseExpandedTerms {
  self->lowercaseExpandedTerms_ = lowercaseExpandedTerms;
}

- (jboolean)getLowercaseExpandedTerms {
  return lowercaseExpandedTerms_;
}

- (void)setMultiTermRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)method {
  JreStrongAssign(&multiTermRewriteMethod_, method);
}

- (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)getMultiTermRewriteMethod {
  return multiTermRewriteMethod_;
}

- (void)setLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  JreStrongAssign(&self->locale_, locale);
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  JreStrongAssign(&self->timeZone_, timeZone);
}

- (JavaUtilTimeZone *)getTimeZone {
  return timeZone_;
}

- (void)setDateResolutionWithOrgApacheLuceneDocumentDateTools_Resolution:(OrgApacheLuceneDocumentDateTools_Resolution *)dateResolution {
  JreStrongAssign(&self->dateResolution_, dateResolution);
}

- (void)setDateResolutionWithNSString:(NSString *)fieldName
withOrgApacheLuceneDocumentDateTools_Resolution:(OrgApacheLuceneDocumentDateTools_Resolution *)dateResolution {
  if (fieldName == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Field cannot be null.");
  }
  if (fieldToDateResolution_ == nil) {
    JreStrongAssignAndConsume(&fieldToDateResolution_, new_JavaUtilHashMap_init());
  }
  [fieldToDateResolution_ putWithId:fieldName withId:dateResolution];
}

- (OrgApacheLuceneDocumentDateTools_Resolution *)getDateResolutionWithNSString:(NSString *)fieldName {
  if (fieldName == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Field cannot be null.");
  }
  if (fieldToDateResolution_ == nil) {
    return self->dateResolution_;
  }
  OrgApacheLuceneDocumentDateTools_Resolution *resolution = JreRetainedLocalValue([fieldToDateResolution_ getWithId:fieldName]);
  if (resolution == nil) {
    resolution = self->dateResolution_;
  }
  return resolution;
}

- (void)setAnalyzeRangeTermsWithBoolean:(jboolean)analyzeRangeTerms {
  self->analyzeRangeTerms_ = analyzeRangeTerms;
}

- (jboolean)getAnalyzeRangeTerms {
  return analyzeRangeTerms_;
}

- (void)setMaxDeterminizedStatesWithInt:(jint)maxDeterminizedStates {
  self->maxDeterminizedStates_ = maxDeterminizedStates;
}

- (jint)getMaxDeterminizedStates {
  return maxDeterminizedStates_;
}

- (void)addClauseWithJavaUtilList:(id<JavaUtilList>)clauses
                          withInt:(jint)conj
                          withInt:(jint)mods
   withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)q {
  jboolean required;
  jboolean prohibited;
  if ([((id<JavaUtilList>) nil_chk(clauses)) size] > 0 && conj == OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_AND) {
    OrgApacheLuceneSearchBooleanClause *c = JreRetainedLocalValue([clauses getWithInt:[clauses size] - 1]);
    if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isProhibited]) [clauses setWithInt:[clauses size] - 1 withId:create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_([c getQuery], JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST))];
  }
  if ([clauses size] > 0 && operator__ == OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR && conj == OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_OR) {
    OrgApacheLuceneSearchBooleanClause *c = JreRetainedLocalValue([clauses getWithInt:[clauses size] - 1]);
    if (![((OrgApacheLuceneSearchBooleanClause *) nil_chk(c)) isProhibited]) [clauses setWithInt:[clauses size] - 1 withId:create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_([c getQuery], JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD))];
  }
  if (q == nil) return;
  if (operator__ == OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR) {
    prohibited = (mods == OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NOT);
    required = (mods == OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_REQ);
    if (conj == OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_AND && !prohibited) {
      required = true;
    }
  }
  else {
    prohibited = (mods == OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NOT);
    required = (!prohibited && conj != OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_OR);
  }
  if (required && !prohibited) [clauses addWithId:[self newBooleanClauseWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST)]];
  else if (!required && !prohibited) [clauses addWithId:[self newBooleanClauseWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)]];
  else if (!required && prohibited) [clauses addWithId:[self newBooleanClauseWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST_NOT)]];
  else @throw create_JavaLangRuntimeException_initWithNSString_(@"Clause cannot be both required and prohibited");
}

- (OrgApacheLuceneSearchQuery *)getFieldQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)queryText
                                              withBoolean:(jboolean)quoted {
  return [self newFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:[self getAnalyzer] withNSString:field withNSString:queryText withBoolean:quoted];
}

- (OrgApacheLuceneSearchQuery *)newFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                                                    withNSString:(NSString *)field
                                                                    withNSString:(NSString *)queryText
                                                                     withBoolean:(jboolean)quoted {
  OrgApacheLuceneSearchBooleanClause_Occur *occur = operator__ == JreLoadEnum(OrgApacheLuceneQueryparserClassicQueryParser_Operator, AND) ? JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST) : JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD);
  return [self createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:analyzer withOrgApacheLuceneSearchBooleanClause_Occur:occur withNSString:field withNSString:queryText withBoolean:quoted || autoGeneratePhraseQueries_ withInt:phraseSlop_];
}

- (OrgApacheLuceneSearchQuery *)getFieldQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)queryText
                                                  withInt:(jint)slop {
  OrgApacheLuceneSearchQuery *query = JreRetainedLocalValue([self getFieldQueryWithNSString:field withNSString:queryText withBoolean:true]);
  if ([query isKindOfClass:[OrgApacheLuceneSearchPhraseQuery class]]) {
    OrgApacheLuceneSearchPhraseQuery_Builder *builder = create_OrgApacheLuceneSearchPhraseQuery_Builder_init();
    [builder setSlopWithInt:slop];
    OrgApacheLuceneSearchPhraseQuery *pq = (OrgApacheLuceneSearchPhraseQuery *) query;
    IOSObjectArray *terms = [((OrgApacheLuceneSearchPhraseQuery *) nil_chk(pq)) getTerms];
    IOSIntArray *positions = [pq getPositions];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(terms))->size_; ++i) {
      [builder addWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(terms, i) withInt:IOSIntArray_Get(nil_chk(positions), i)];
    }
    query = [builder build];
    [((OrgApacheLuceneSearchQuery *) nil_chk(query)) setBoostWithFloat:[pq getBoost]];
  }
  if ([query isKindOfClass:[OrgApacheLuceneSearchMultiPhraseQuery class]]) {
    [((OrgApacheLuceneSearchMultiPhraseQuery *) nil_chk(((OrgApacheLuceneSearchMultiPhraseQuery *) query))) setSlopWithInt:slop];
  }
  return query;
}

- (OrgApacheLuceneSearchQuery *)getRangeQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)part1
                                             withNSString:(NSString *)part2
                                              withBoolean:(jboolean)startInclusive
                                              withBoolean:(jboolean)endInclusive {
  if (lowercaseExpandedTerms_) {
    part1 = part1 == nil ? nil : [part1 java_lowercaseStringWithJRELocale:locale_];
    part2 = part2 == nil ? nil : [part2 java_lowercaseStringWithJRELocale:locale_];
  }
  JavaTextDateFormat *df = JavaTextDateFormat_getDateInstanceWithInt_withJavaUtilLocale_(JavaTextDateFormat_SHORT, locale_);
  [((JavaTextDateFormat *) nil_chk(df)) setLenientWithBoolean:true];
  OrgApacheLuceneDocumentDateTools_Resolution *resolution = JreRetainedLocalValue([self getDateResolutionWithNSString:field]);
  @try {
    part1 = OrgApacheLuceneDocumentDateTools_dateToStringWithJavaUtilDate_withOrgApacheLuceneDocumentDateTools_Resolution_([df parseWithNSString:part1], resolution);
  }
  @catch (JavaLangException *e) {
  }
  @try {
    JavaUtilDate *d2 = JreRetainedLocalValue([df parseWithNSString:part2]);
    if (endInclusive) {
      JavaUtilCalendar *cal = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(timeZone_, locale_);
      [((JavaUtilCalendar *) nil_chk(cal)) setTimeWithJavaUtilDate:d2];
      [cal setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:23];
      [cal setWithInt:JavaUtilCalendar_MINUTE withInt:59];
      [cal setWithInt:JavaUtilCalendar_SECOND withInt:59];
      [cal setWithInt:JavaUtilCalendar_MILLISECOND withInt:999];
      d2 = [cal getTime];
    }
    part2 = OrgApacheLuceneDocumentDateTools_dateToStringWithJavaUtilDate_withOrgApacheLuceneDocumentDateTools_Resolution_(d2, resolution);
  }
  @catch (JavaLangException *e) {
  }
  return [self newRangeQueryWithNSString:field withNSString:part1 withNSString:part2 withBoolean:startInclusive withBoolean:endInclusive];
}

- (OrgApacheLuceneSearchBooleanClause *)newBooleanClauseWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)q
                                          withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)occur {
  return create_OrgApacheLuceneSearchBooleanClause_initWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(q, occur);
}

- (OrgApacheLuceneSearchQuery *)newPrefixQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)prefix {
  OrgApacheLuceneSearchPrefixQuery *query = create_OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(prefix);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)newRegexpQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)regexp {
  OrgApacheLuceneSearchRegexpQuery *query = create_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_withInt_(regexp, OrgApacheLuceneUtilAutomatonRegExp_ALL, maxDeterminizedStates_);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)newFuzzyQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                                withFloat:(jfloat)minimumSimilarity
                                                                  withInt:(jint)prefixLength {
  NSString *text = JreRetainedLocalValue([((OrgApacheLuceneIndexTerm *) nil_chk(term)) text]);
  jint numEdits = OrgApacheLuceneSearchFuzzyQuery_floatToEditsWithFloat_withInt_(minimumSimilarity, [((NSString *) nil_chk(text)) java_codePointCount:0 endIndex:[text java_length]]);
  return create_OrgApacheLuceneSearchFuzzyQuery_initWithOrgApacheLuceneIndexTerm_withInt_withInt_(term, numEdits, prefixLength);
}

- (OrgApacheLuceneUtilBytesRef *)analyzeMultitermTermWithNSString:(NSString *)field
                                                     withNSString:(NSString *)part {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(self, field, part);
}

- (OrgApacheLuceneUtilBytesRef *)analyzeMultitermTermWithNSString:(NSString *)field
                                                     withNSString:(NSString *)part
                              withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzerIn {
  if (analyzerIn == nil) analyzerIn = [self getAnalyzer];
  @try {
    OrgApacheLuceneAnalysisTokenStream *source = [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(analyzerIn)) tokenStreamWithNSString:field withNSString:part];
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(source)) reset];
      id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute> termAtt = JreRetainedLocalValue([source getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute_class_()]);
      if (![source incrementToken]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"analyzer returned no terms for multiTerm term: ", part));
      OrgApacheLuceneUtilBytesRef *bytes = OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_([((id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute>) nil_chk(termAtt)) getBytesRef]);
      if ([source incrementToken]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"analyzer returned too many terms for multiTerm term: ", part));
      [source end];
      return bytes;
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (source != nil) {
        if (__primaryException1 != nil) {
          @try {
            [source close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [source close];
        }
      }
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"Error analyzing multiTerm term: ", part), e);
  }
}

- (OrgApacheLuceneSearchQuery *)newRangeQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)part1
                                             withNSString:(NSString *)part2
                                              withBoolean:(jboolean)startInclusive
                                              withBoolean:(jboolean)endInclusive {
  OrgApacheLuceneUtilBytesRef *start;
  OrgApacheLuceneUtilBytesRef *end;
  if (part1 == nil) {
    start = nil;
  }
  else {
    start = analyzeRangeTerms_ ? OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(self, field, part1) : create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(part1);
  }
  if (part2 == nil) {
    end = nil;
  }
  else {
    end = analyzeRangeTerms_ ? OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(self, field, part2) : create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(part2);
  }
  OrgApacheLuceneSearchTermRangeQuery *query = create_OrgApacheLuceneSearchTermRangeQuery_initWithNSString_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_withBoolean_(field, start, end, startInclusive, endInclusive);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)newMatchAllDocsQuery {
  return create_OrgApacheLuceneSearchMatchAllDocsQuery_init();
}

- (OrgApacheLuceneSearchQuery *)newWildcardQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)t {
  OrgApacheLuceneSearchWildcardQuery *query = create_OrgApacheLuceneSearchWildcardQuery_initWithOrgApacheLuceneIndexTerm_withInt_(t, maxDeterminizedStates_);
  [query setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:multiTermRewriteMethod_];
  return query;
}

- (OrgApacheLuceneSearchQuery *)getBooleanQueryWithJavaUtilList:(id<JavaUtilList>)clauses {
  return [self getBooleanQueryWithJavaUtilList:clauses withBoolean:false];
}

- (OrgApacheLuceneSearchQuery *)getBooleanQueryWithJavaUtilList:(id<JavaUtilList>)clauses
                                                    withBoolean:(jboolean)disableCoord {
  if ([((id<JavaUtilList>) nil_chk(clauses)) size] == 0) {
    return nil;
  }
  OrgApacheLuceneSearchBooleanQuery_Builder *query = JreRetainedLocalValue([self newBooleanQueryWithBoolean:disableCoord]);
  for (OrgApacheLuceneSearchBooleanClause * __strong clause in clauses) {
    [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(query)) addWithOrgApacheLuceneSearchBooleanClause:clause];
  }
  return [((OrgApacheLuceneSearchBooleanQuery_Builder *) nil_chk(query)) build];
}

- (OrgApacheLuceneSearchQuery *)getWildcardQueryWithNSString:(NSString *)field
                                                withNSString:(NSString *)termStr {
  if ([@"*" isEqual:field]) {
    if ([@"*" isEqual:termStr]) return [self newMatchAllDocsQuery];
  }
  if (!allowLeadingWildcard_ && ([((NSString *) nil_chk(termStr)) java_hasPrefix:@"*"] || [termStr java_hasPrefix:@"?"])) @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"'*' or '?' not allowed as first character in WildcardQuery");
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) java_lowercaseStringWithJRELocale:locale_];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newWildcardQueryWithOrgApacheLuceneIndexTerm:t];
}

- (OrgApacheLuceneSearchQuery *)getRegexpQueryWithNSString:(NSString *)field
                                              withNSString:(NSString *)termStr {
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) java_lowercaseStringWithJRELocale:locale_];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newRegexpQueryWithOrgApacheLuceneIndexTerm:t];
}

- (OrgApacheLuceneSearchQuery *)getPrefixQueryWithNSString:(NSString *)field
                                              withNSString:(NSString *)termStr {
  if (!allowLeadingWildcard_ && [((NSString *) nil_chk(termStr)) java_hasPrefix:@"*"]) @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"'*' not allowed as first character in PrefixQuery");
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) java_lowercaseStringWithJRELocale:locale_];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newPrefixQueryWithOrgApacheLuceneIndexTerm:t];
}

- (OrgApacheLuceneSearchQuery *)getFuzzyQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)termStr
                                                withFloat:(jfloat)minSimilarity {
  if (lowercaseExpandedTerms_) {
    termStr = [((NSString *) nil_chk(termStr)) java_lowercaseStringWithJRELocale:locale_];
  }
  OrgApacheLuceneIndexTerm *t = create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(field, termStr);
  return [self newFuzzyQueryWithOrgApacheLuceneIndexTerm:t withFloat:minSimilarity withInt:fuzzyPrefixLength_];
}

- (OrgApacheLuceneSearchQuery *)handleBareTokenQueryWithNSString:(NSString *)qfield
                      withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)term
                      withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)fuzzySlop
                                                     withBoolean:(jboolean)prefix
                                                     withBoolean:(jboolean)wildcard
                                                     withBoolean:(jboolean)fuzzy
                                                     withBoolean:(jboolean)regexp {
  OrgApacheLuceneSearchQuery *q;
  NSString *termImage = JreRetainedLocalValue([self discardEscapeCharWithNSString:((OrgApacheLuceneQueryparserClassicToken *) nil_chk(term))->image_]);
  if (wildcard) {
    q = [self getWildcardQueryWithNSString:qfield withNSString:term->image_];
  }
  else if (prefix) {
    q = [self getPrefixQueryWithNSString:qfield withNSString:[self discardEscapeCharWithNSString:[((NSString *) nil_chk(term->image_)) java_substring:0 endIndex:[term->image_ java_length] - 1]]];
  }
  else if (regexp) {
    q = [self getRegexpQueryWithNSString:qfield withNSString:[((NSString *) nil_chk(term->image_)) java_substring:1 endIndex:[term->image_ java_length] - 1]];
  }
  else if (fuzzy) {
    q = [self handleBareFuzzyWithNSString:qfield withOrgApacheLuceneQueryparserClassicToken:fuzzySlop withNSString:termImage];
  }
  else {
    q = [self getFieldQueryWithNSString:qfield withNSString:termImage withBoolean:false];
  }
  return q;
}

- (OrgApacheLuceneSearchQuery *)handleBareFuzzyWithNSString:(NSString *)qfield
                 withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)fuzzySlop
                                               withNSString:(NSString *)termImage {
  OrgApacheLuceneSearchQuery *q;
  jfloat fms = fuzzyMinSim_;
  @try {
    fms = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_([((NSString *) nil_chk(((OrgApacheLuceneQueryparserClassicToken *) nil_chk(fuzzySlop))->image_)) java_substring:1]))) floatValue];
  }
  @catch (JavaLangException *ignored) {
  }
  if (fms < 0.0f) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !");
  }
  else if (fms >= 1.0f && fms != JreFpToInt(fms)) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"Fractional edit distances are not allowed!");
  }
  q = [self getFuzzyQueryWithNSString:qfield withNSString:termImage withFloat:fms];
  return q;
}

- (OrgApacheLuceneSearchQuery *)handleQuotedTermWithNSString:(NSString *)qfield
                  withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)term
                  withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)fuzzySlop {
  jint s = phraseSlop_;
  if (fuzzySlop != nil) {
    @try {
      s = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_([((NSString *) nil_chk(fuzzySlop->image_)) java_substring:1]))) intValue];
    }
    @catch (JavaLangException *ignored) {
    }
  }
  return [self getFieldQueryWithNSString:qfield withNSString:[self discardEscapeCharWithNSString:[((NSString *) nil_chk(((OrgApacheLuceneQueryparserClassicToken *) nil_chk(term))->image_)) java_substring:1 endIndex:[term->image_ java_length] - 1]] withInt:s];
}

- (OrgApacheLuceneSearchQuery *)handleBoostWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)q
                               withOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)boost {
  if (boost != nil) {
    jfloat f = (jfloat) 1.0;
    @try {
      f = [((JavaLangFloat *) nil_chk(JavaLangFloat_valueOfWithNSString_(boost->image_))) floatValue];
    }
    @catch (JavaLangException *ignored) {
    }
    if (q != nil) {
      [q setBoostWithFloat:f];
    }
  }
  return q;
}

- (NSString *)discardEscapeCharWithNSString:(NSString *)input {
  IOSCharArray *output = [IOSCharArray arrayWithLength:[((NSString *) nil_chk(input)) java_length]];
  jint length = 0;
  jboolean lastCharWasEscapeChar = false;
  jint codePointMultiplier = 0;
  jint codePoint = 0;
  for (jint i = 0; i < [input java_length]; i++) {
    jchar curChar = [input charAtWithInt:i];
    if (codePointMultiplier > 0) {
      codePoint += OrgApacheLuceneQueryparserClassicQueryParserBase_hexToIntWithChar_(curChar) * codePointMultiplier;
      JreURShiftAssignInt(&codePointMultiplier, 4);
      if (codePointMultiplier == 0) {
        *IOSCharArray_GetRef(output, length++) = (jchar) codePoint;
        codePoint = 0;
      }
    }
    else if (lastCharWasEscapeChar) {
      if (curChar == 'u') {
        codePointMultiplier = 16 * 16 * 16;
      }
      else {
        *IOSCharArray_GetRef(output, length) = curChar;
        length++;
      }
      lastCharWasEscapeChar = false;
    }
    else {
      if (curChar == '\\') {
        lastCharWasEscapeChar = true;
      }
      else {
        *IOSCharArray_GetRef(output, length) = curChar;
        length++;
      }
    }
  }
  if (codePointMultiplier > 0) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"Truncated unicode escape sequence.");
  }
  if (lastCharWasEscapeChar) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"Term can not end with escape character.");
  }
  return [NSString java_stringWithCharacters:output offset:0 length:length];
}

+ (jint)hexToIntWithChar:(jchar)c {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_hexToIntWithChar_(c);
}

+ (NSString *)escapeWithNSString:(NSString *)s {
  return OrgApacheLuceneQueryparserClassicQueryParserBase_escapeWithNSString_(s);
}

- (void)dealloc {
  RELEASE_(operator__);
  RELEASE_(multiTermRewriteMethod_);
  RELEASE_(field_);
  RELEASE_(locale_);
  RELEASE_(timeZone_);
  RELEASE_(dateResolution_);
  RELEASE_(fieldToDateResolution_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x401, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 7, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 8, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserClassicQueryParser_Operator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "LJavaUtilTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 27, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentDateTools_Resolution;", 0x1, 28, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 32, -1, 33, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 34, 35, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 36, 37, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 34, 38, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 39, 40, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBooleanClause;", 0x4, 41, 42, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 43, 44, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 45, 44, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 46, 47, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x2, 48, 49, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x4, 48, 50, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 51, 40, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 52, 44, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 53, 54, 6, 55, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 53, 56, 6, 57, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 58, 49, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 59, 49, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 60, 49, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 61, 62, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x0, 63, 64, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x0, 65, 66, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x0, 67, 68, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x0, 69, 70, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 71, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x18, 72, 73, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 74, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithNSString:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[2].selector = @selector(ReInitWithOrgApacheLuceneQueryparserClassicCharStream:);
  methods[3].selector = @selector(TopLevelQueryWithNSString:);
  methods[4].selector = @selector(parseWithNSString:);
  methods[5].selector = @selector(getField);
  methods[6].selector = @selector(getAutoGeneratePhraseQueries);
  methods[7].selector = @selector(setAutoGeneratePhraseQueriesWithBoolean:);
  methods[8].selector = @selector(getFuzzyMinSim);
  methods[9].selector = @selector(setFuzzyMinSimWithFloat:);
  methods[10].selector = @selector(getFuzzyPrefixLength);
  methods[11].selector = @selector(setFuzzyPrefixLengthWithInt:);
  methods[12].selector = @selector(setPhraseSlopWithInt:);
  methods[13].selector = @selector(getPhraseSlop);
  methods[14].selector = @selector(setAllowLeadingWildcardWithBoolean:);
  methods[15].selector = @selector(getAllowLeadingWildcard);
  methods[16].selector = @selector(setDefaultOperatorWithOrgApacheLuceneQueryparserClassicQueryParser_Operator:);
  methods[17].selector = @selector(getDefaultOperator);
  methods[18].selector = @selector(setLowercaseExpandedTermsWithBoolean:);
  methods[19].selector = @selector(getLowercaseExpandedTerms);
  methods[20].selector = @selector(setMultiTermRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:);
  methods[21].selector = @selector(getMultiTermRewriteMethod);
  methods[22].selector = @selector(setLocaleWithJavaUtilLocale:);
  methods[23].selector = @selector(getLocale);
  methods[24].selector = @selector(setTimeZoneWithJavaUtilTimeZone:);
  methods[25].selector = @selector(getTimeZone);
  methods[26].selector = @selector(setDateResolutionWithOrgApacheLuceneDocumentDateTools_Resolution:);
  methods[27].selector = @selector(setDateResolutionWithNSString:withOrgApacheLuceneDocumentDateTools_Resolution:);
  methods[28].selector = @selector(getDateResolutionWithNSString:);
  methods[29].selector = @selector(setAnalyzeRangeTermsWithBoolean:);
  methods[30].selector = @selector(getAnalyzeRangeTerms);
  methods[31].selector = @selector(setMaxDeterminizedStatesWithInt:);
  methods[32].selector = @selector(getMaxDeterminizedStates);
  methods[33].selector = @selector(addClauseWithJavaUtilList:withInt:withInt:withOrgApacheLuceneSearchQuery:);
  methods[34].selector = @selector(getFieldQueryWithNSString:withNSString:withBoolean:);
  methods[35].selector = @selector(newFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:withNSString:withNSString:withBoolean:);
  methods[36].selector = @selector(getFieldQueryWithNSString:withNSString:withInt:);
  methods[37].selector = @selector(getRangeQueryWithNSString:withNSString:withNSString:withBoolean:withBoolean:);
  methods[38].selector = @selector(newBooleanClauseWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneSearchBooleanClause_Occur:);
  methods[39].selector = @selector(newPrefixQueryWithOrgApacheLuceneIndexTerm:);
  methods[40].selector = @selector(newRegexpQueryWithOrgApacheLuceneIndexTerm:);
  methods[41].selector = @selector(newFuzzyQueryWithOrgApacheLuceneIndexTerm:withFloat:withInt:);
  methods[42].selector = @selector(analyzeMultitermTermWithNSString:withNSString:);
  methods[43].selector = @selector(analyzeMultitermTermWithNSString:withNSString:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[44].selector = @selector(newRangeQueryWithNSString:withNSString:withNSString:withBoolean:withBoolean:);
  methods[45].selector = @selector(newMatchAllDocsQuery);
  methods[46].selector = @selector(newWildcardQueryWithOrgApacheLuceneIndexTerm:);
  methods[47].selector = @selector(getBooleanQueryWithJavaUtilList:);
  methods[48].selector = @selector(getBooleanQueryWithJavaUtilList:withBoolean:);
  methods[49].selector = @selector(getWildcardQueryWithNSString:withNSString:);
  methods[50].selector = @selector(getRegexpQueryWithNSString:withNSString:);
  methods[51].selector = @selector(getPrefixQueryWithNSString:withNSString:);
  methods[52].selector = @selector(getFuzzyQueryWithNSString:withNSString:withFloat:);
  methods[53].selector = @selector(handleBareTokenQueryWithNSString:withOrgApacheLuceneQueryparserClassicToken:withOrgApacheLuceneQueryparserClassicToken:withBoolean:withBoolean:withBoolean:withBoolean:);
  methods[54].selector = @selector(handleBareFuzzyWithNSString:withOrgApacheLuceneQueryparserClassicToken:withNSString:);
  methods[55].selector = @selector(handleQuotedTermWithNSString:withOrgApacheLuceneQueryparserClassicToken:withOrgApacheLuceneQueryparserClassicToken:);
  methods[56].selector = @selector(handleBoostWithOrgApacheLuceneSearchQuery:withOrgApacheLuceneQueryparserClassicToken:);
  methods[57].selector = @selector(discardEscapeCharWithNSString:);
  methods[58].selector = @selector(hexToIntWithChar:);
  methods[59].selector = @selector(escapeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONJ_NONE", "I", .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_NONE, 0x18, -1, -1, -1, -1 },
    { "CONJ_AND", "I", .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_AND, 0x18, -1, -1, -1, -1 },
    { "CONJ_OR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_CONJ_OR, 0x18, -1, -1, -1, -1 },
    { "MOD_NONE", "I", .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NONE, 0x18, -1, -1, -1, -1 },
    { "MOD_NOT", "I", .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_NOT, 0x18, -1, -1, -1, -1 },
    { "MOD_REQ", "I", .constantValue.asInt = OrgApacheLuceneQueryparserClassicQueryParserBase_MOD_REQ, 0x18, -1, -1, -1, -1 },
    { "AND_OPERATOR", "LOrgApacheLuceneQueryparserClassicQueryParser_Operator;", .constantValue.asLong = 0, 0x19, -1, 75, -1, -1 },
    { "OR_OPERATOR", "LOrgApacheLuceneQueryparserClassicQueryParser_Operator;", .constantValue.asLong = 0, 0x19, -1, 76, -1, -1 },
    { "operator__", "LOrgApacheLuceneQueryparserClassicQueryParser_Operator;", .constantValue.asLong = 0, 0x0, 77, -1, -1, -1 },
    { "lowercaseExpandedTerms_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "multiTermRewriteMethod_", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "allowLeadingWildcard_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "phraseSlop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fuzzyMinSim_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fuzzyPrefixLength_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "timeZone_", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dateResolution_", "LOrgApacheLuceneDocumentDateTools_Resolution;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fieldToDateResolution_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 78, -1 },
    { "analyzeRangeTerms_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "autoGeneratePhraseQueries_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxDeterminizedStates_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LNSString;LOrgApacheLuceneAnalysisAnalyzer;", "ReInit", "LOrgApacheLuceneQueryparserClassicCharStream;", "TopLevelQuery", "LNSString;", "LOrgApacheLuceneQueryparserClassicParseException;", "parse", "setAutoGeneratePhraseQueries", "Z", "setFuzzyMinSim", "F", "setFuzzyPrefixLength", "I", "setPhraseSlop", "setAllowLeadingWildcard", "setDefaultOperator", "LOrgApacheLuceneQueryparserClassicQueryParser_Operator;", "setLowercaseExpandedTerms", "setMultiTermRewriteMethod", "LOrgApacheLuceneSearchMultiTermQuery_RewriteMethod;", "setLocale", "LJavaUtilLocale;", "setTimeZone", "LJavaUtilTimeZone;", "setDateResolution", "LOrgApacheLuceneDocumentDateTools_Resolution;", "LNSString;LOrgApacheLuceneDocumentDateTools_Resolution;", "getDateResolution", "setAnalyzeRangeTerms", "setMaxDeterminizedStates", "addClause", "LJavaUtilList;IILOrgApacheLuceneSearchQuery;", "(Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;IILorg/apache/lucene/search/Query;)V", "getFieldQuery", "LNSString;LNSString;Z", "newFieldQuery", "LOrgApacheLuceneAnalysisAnalyzer;LNSString;LNSString;Z", "LNSString;LNSString;I", "getRangeQuery", "LNSString;LNSString;LNSString;ZZ", "newBooleanClause", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneSearchBooleanClause_Occur;", "newPrefixQuery", "LOrgApacheLuceneIndexTerm;", "newRegexpQuery", "newFuzzyQuery", "LOrgApacheLuceneIndexTerm;FI", "analyzeMultitermTerm", "LNSString;LNSString;", "LNSString;LNSString;LOrgApacheLuceneAnalysisAnalyzer;", "newRangeQuery", "newWildcardQuery", "getBooleanQuery", "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;)Lorg/apache/lucene/search/Query;", "LJavaUtilList;Z", "(Ljava/util/List<Lorg/apache/lucene/search/BooleanClause;>;Z)Lorg/apache/lucene/search/Query;", "getWildcardQuery", "getRegexpQuery", "getPrefixQuery", "getFuzzyQuery", "LNSString;LNSString;F", "handleBareTokenQuery", "LNSString;LOrgApacheLuceneQueryparserClassicToken;LOrgApacheLuceneQueryparserClassicToken;ZZZZ", "handleBareFuzzy", "LNSString;LOrgApacheLuceneQueryparserClassicToken;LNSString;", "handleQuotedTerm", "LNSString;LOrgApacheLuceneQueryparserClassicToken;LOrgApacheLuceneQueryparserClassicToken;", "handleBoost", "LOrgApacheLuceneSearchQuery;LOrgApacheLuceneQueryparserClassicToken;", "discardEscapeChar", "hexToInt", "C", "escape", &OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR, &OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR, "operator", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/document/DateTools$Resolution;>;", "LOrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserClassicQueryParserBase = { "QueryParserBase", "org.apache.lucene.queryparser.classic", ptrTable, methods, fields, 7, 0x401, 60, 23, -1, 79, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserClassicQueryParserBase;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneQueryparserClassicQueryParserBase class]) {
    JreStrongAssign(&OrgApacheLuceneQueryparserClassicQueryParserBase_AND_OPERATOR, JreLoadEnum(OrgApacheLuceneQueryparserClassicQueryParser_Operator, AND));
    JreStrongAssign(&OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR, JreLoadEnum(OrgApacheLuceneQueryparserClassicQueryParser_Operator, OR));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneQueryparserClassicQueryParserBase)
  }
}

@end

void OrgApacheLuceneQueryparserClassicQueryParserBase_init(OrgApacheLuceneQueryparserClassicQueryParserBase *self) {
  OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(self, nil);
  JreStrongAssign(&self->operator__, OrgApacheLuceneQueryparserClassicQueryParserBase_OR_OPERATOR);
  self->lowercaseExpandedTerms_ = true;
  JreStrongAssign(&self->multiTermRewriteMethod_, JreLoadStatic(OrgApacheLuceneSearchMultiTermQuery, CONSTANT_SCORE_REWRITE));
  self->allowLeadingWildcard_ = false;
  self->phraseSlop_ = 0;
  self->fuzzyMinSim_ = OrgApacheLuceneSearchFuzzyQuery_defaultMinSimilarity;
  self->fuzzyPrefixLength_ = OrgApacheLuceneSearchFuzzyQuery_defaultPrefixLength;
  JreStrongAssign(&self->locale_, JavaUtilLocale_getDefault());
  JreStrongAssign(&self->timeZone_, JavaUtilTimeZone_getDefault());
  JreStrongAssign(&self->dateResolution_, nil);
  JreStrongAssign(&self->fieldToDateResolution_, nil);
  self->analyzeRangeTerms_ = false;
  self->maxDeterminizedStates_ = OrgApacheLuceneUtilAutomatonOperations_DEFAULT_MAX_DETERMINIZED_STATES;
}

void OrgApacheLuceneQueryparserClassicQueryParserBase_setAutoGeneratePhraseQueriesWithBoolean_(OrgApacheLuceneQueryparserClassicQueryParserBase *self, jboolean value) {
  self->autoGeneratePhraseQueries_ = value;
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneQueryparserClassicQueryParserBase_analyzeMultitermTermWithNSString_withNSString_(OrgApacheLuceneQueryparserClassicQueryParserBase *self, NSString *field, NSString *part) {
  return [self analyzeMultitermTermWithNSString:field withNSString:part withOrgApacheLuceneAnalysisAnalyzer:[self getAnalyzer]];
}

jint OrgApacheLuceneQueryparserClassicQueryParserBase_hexToIntWithChar_(jchar c) {
  OrgApacheLuceneQueryparserClassicQueryParserBase_initialize();
  if ('0' <= c && c <= '9') {
    return c - '0';
  }
  else if ('a' <= c && c <= 'f') {
    return c - 'a' + 10;
  }
  else if ('A' <= c && c <= 'F') {
    return c - 'A' + 10;
  }
  else {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(JreStrcat("$C", @"Non-hex character in Unicode escape sequence: ", c));
  }
}

NSString *OrgApacheLuceneQueryparserClassicQueryParserBase_escapeWithNSString_(NSString *s) {
  OrgApacheLuceneQueryparserClassicQueryParserBase_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < [((NSString *) nil_chk(s)) java_length]; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&' || c == '/') {
      [sb appendWithChar:'\\'];
    }
    [sb appendWithChar:c];
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserClassicQueryParserBase)

@implementation OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneQueryparserClassicQueryParserBase;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother = { "MethodRemovedUseAnother", "org.apache.lucene.queryparser.classic", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother;
}

@end

void OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother_init(OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother *self) {
  JavaLangThrowable_init(self);
}

OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother *new_OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother, init)
}

OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother *create_OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserClassicQueryParserBase_MethodRemovedUseAnother)
