//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/Locale.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/search/Query.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser () {
 @public
  JavaUtilRegexPattern *wildcardPattern_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser, wildcardPattern_, JavaUtilRegexPattern *)

@implementation OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser

- (instancetype)initWithNSString:(NSString *)field
withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(self, field, analyzer);
  return self;
}

- (OrgApacheLuceneSearchQuery *)getWildcardQueryWithNSString:(NSString *)field
                                                withNSString:(NSString *)termStr {
  if (termStr == nil) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"Passed null value as term to getWildcardQuery");
  }
  if (![self getAllowLeadingWildcard] && ([termStr java_hasPrefix:@"*"] || [termStr java_hasPrefix:@"?"])) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(@"'*' or '?' not allowed as first character in WildcardQuery unless getAllowLeadingWildcard() returns true");
  }
  JavaUtilRegexMatcher *wildcardMatcher = JreRetainedLocalValue([((JavaUtilRegexPattern *) nil_chk(wildcardPattern_)) matcherWithJavaLangCharSequence:termStr]);
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  jint last = 0;
  while ([((JavaUtilRegexMatcher *) nil_chk(wildcardMatcher)) find]) {
    if ([wildcardMatcher groupWithInt:1] != nil) {
      continue;
    }
    if ([wildcardMatcher start] > 0) {
      NSString *chunk = [termStr java_substring:last endIndex:[wildcardMatcher start]];
      NSString *analyzed = JreRetainedLocalValue([self analyzeSingleChunkWithNSString:field withNSString:termStr withNSString:chunk]);
      [sb appendWithNSString:analyzed];
    }
    [sb appendWithNSString:[wildcardMatcher groupWithInt:2]];
    last = [wildcardMatcher end];
  }
  if (last < [termStr java_length]) {
    [sb appendWithNSString:[self analyzeSingleChunkWithNSString:field withNSString:termStr withNSString:[termStr java_substring:last]]];
  }
  return [super getWildcardQueryWithNSString:field withNSString:[sb description]];
}

- (OrgApacheLuceneSearchQuery *)getPrefixQueryWithNSString:(NSString *)field
                                              withNSString:(NSString *)termStr {
  NSString *analyzed = JreRetainedLocalValue([self analyzeSingleChunkWithNSString:field withNSString:termStr withNSString:termStr]);
  return [super getPrefixQueryWithNSString:field withNSString:analyzed];
}

- (OrgApacheLuceneSearchQuery *)getFuzzyQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)termStr
                                                withFloat:(jfloat)minSimilarity {
  NSString *analyzed = JreRetainedLocalValue([self analyzeSingleChunkWithNSString:field withNSString:termStr withNSString:termStr]);
  return [super getFuzzyQueryWithNSString:field withNSString:analyzed withFloat:minSimilarity];
}

- (NSString *)analyzeSingleChunkWithNSString:(NSString *)field
                                withNSString:(NSString *)termStr
                                withNSString:(NSString *)chunk {
  NSString *analyzed = nil;
  @try {
    OrgApacheLuceneAnalysisTokenStream *stream = [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk([self getAnalyzer])) tokenStreamWithNSString:field withNSString:chunk];
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(stream)) reset];
      id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt = JreRetainedLocalValue([stream getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
      if ([stream incrementToken]) {
        analyzed = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
        JavaLangStringBuilder *multipleOutputs = nil;
        while ([stream incrementToken]) {
          if (nil == multipleOutputs) {
            multipleOutputs = create_JavaLangStringBuilder_init();
            [multipleOutputs appendWithChar:'"'];
            [multipleOutputs appendWithNSString:analyzed];
            [multipleOutputs appendWithChar:'"'];
          }
          [multipleOutputs appendWithChar:','];
          [multipleOutputs appendWithChar:'"'];
          [multipleOutputs appendWithNSString:[termAtt description]];
          [multipleOutputs appendWithChar:'"'];
        }
        [stream end];
        if (nil != multipleOutputs) {
          @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_([self getLocale], @"Analyzer created multiple terms for \"%s\": %s", [IOSObjectArray arrayWithObjects:(id[]){ chunk, [multipleOutputs description] } count:2 type:NSObject_class_()]));
        }
      }
      else {
        [stream end];
        @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_([self getLocale], @"Analyzer returned nothing for \"%s\"", [IOSObjectArray arrayWithObjects:(id[]){ chunk } count:1 type:NSObject_class_()]));
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (stream != nil) {
        if (__primaryException1 != nil) {
          @try {
            [stream close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [stream close];
        }
      }
    }
  }
  @catch (JavaIoIOException *e) {
    @throw create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_([self getLocale], @"IO error while trying to analyze single term: \"%s\"", [IOSObjectArray arrayWithObjects:(id[]){ termStr } count:1 type:NSObject_class_()]));
  }
  return analyzed;
}

- (void)dealloc {
  RELEASE_(wildcardPattern_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 4, 2, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 5, 6, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 7, 8, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[1].selector = @selector(getWildcardQueryWithNSString:withNSString:);
  methods[2].selector = @selector(getPrefixQueryWithNSString:withNSString:);
  methods[3].selector = @selector(getFuzzyQueryWithNSString:withNSString:withFloat:);
  methods[4].selector = @selector(analyzeSingleChunkWithNSString:withNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wildcardPattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgApacheLuceneAnalysisAnalyzer;", "getWildcardQuery", "LNSString;LNSString;", "LOrgApacheLuceneQueryparserClassicParseException;", "getPrefixQuery", "getFuzzyQuery", "LNSString;LNSString;F", "analyzeSingleChunk", "LNSString;LNSString;LNSString;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser = { "AnalyzingQueryParser", "org.apache.lucene.queryparser.analyzing", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser;
}

@end

void OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser *self, NSString *field, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  OrgApacheLuceneQueryparserClassicQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(self, field, analyzer);
  JreStrongAssign(&self->wildcardPattern_, JavaUtilRegexPattern_compileWithNSString_(@"(\\.)|([?*]+)"));
  [self setAnalyzeRangeTermsWithBoolean:true];
}

OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser *new_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(NSString *field, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser, initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_, field, analyzer)
}

OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser *create_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(NSString *field, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser, initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_, field, analyzer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser)
