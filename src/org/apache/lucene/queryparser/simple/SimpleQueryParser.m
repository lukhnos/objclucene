//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/simple/SimpleQueryParser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/queryparser/simple/SimpleQueryParser.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/MatchNoDocsQuery.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/util/QueryBuilder.h"
#include "org/apache/lucene/util/automaton/LevenshteinAutomata.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/simple/SimpleQueryParser must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserSimpleSimpleQueryParser () {
 @public
  OrgApacheLuceneSearchBooleanClause_Occur *defaultOperator_;
}

- (void)parseSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state;

- (void)consumeSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state;

- (void)consumePhraseWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state;

- (void)consumeTokenWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state;

+ (OrgApacheLuceneSearchBooleanQuery *)addClauseWithOrgApacheLuceneSearchBooleanQuery:(OrgApacheLuceneSearchBooleanQuery *)bq
                                                       withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                         withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)occur;

- (void)buildQueryTreeWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state
                                                   withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)branch;

/*!
 @brief Helper parsing fuzziness from parsing state
 @return slop/edit distance, 0 in the case of non-parsing slop/edit string
 */
- (jint)parseFuzzinessWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state;

/*!
 @brief Helper returning true if the state has reached the end of token.
 */
- (jboolean)tokenFinishedWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSimpleSimpleQueryParser, defaultOperator_, OrgApacheLuceneSearchBooleanClause_Occur *)

__attribute__((unused)) static void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state);

__attribute__((unused)) static void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumeSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state);

__attribute__((unused)) static void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumePhraseWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state);

__attribute__((unused)) static void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumeTokenWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state);

__attribute__((unused)) static OrgApacheLuceneSearchBooleanQuery *OrgApacheLuceneQueryparserSimpleSimpleQueryParser_addClauseWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(OrgApacheLuceneSearchBooleanQuery *bq, OrgApacheLuceneSearchQuery *query, OrgApacheLuceneSearchBooleanClause_Occur *occur);

__attribute__((unused)) static void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_buildQueryTreeWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state, OrgApacheLuceneSearchQuery *branch);

__attribute__((unused)) static jint OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseFuzzinessWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state);

__attribute__((unused)) static jboolean OrgApacheLuceneQueryparserSimpleSimpleQueryParser_tokenFinishedWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state);

@implementation OrgApacheLuceneQueryparserSimpleSimpleQueryParser

+ (jint)AND_OPERATOR {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_AND_OPERATOR;
}

+ (jint)NOT_OPERATOR {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_NOT_OPERATOR;
}

+ (jint)OR_OPERATOR {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_OR_OPERATOR;
}

+ (jint)PREFIX_OPERATOR {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PREFIX_OPERATOR;
}

+ (jint)PHRASE_OPERATOR {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PHRASE_OPERATOR;
}

+ (jint)PRECEDENCE_OPERATORS {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PRECEDENCE_OPERATORS;
}

+ (jint)ESCAPE_OPERATOR {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_ESCAPE_OPERATOR;
}

+ (jint)WHITESPACE_OPERATOR {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_WHITESPACE_OPERATOR;
}

+ (jint)FUZZY_OPERATOR {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_FUZZY_OPERATOR;
}

+ (jint)NEAR_OPERATOR {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_NEAR_OPERATOR;
}

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                           withNSString:(NSString *)field {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withNSString_(self, analyzer, field);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                        withJavaUtilMap:(id<JavaUtilMap>)weights {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(self, analyzer, weights);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                        withJavaUtilMap:(id<JavaUtilMap>)weights
                                                withInt:(jint)flags {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_withInt_(self, analyzer, weights, flags);
  return self;
}

- (OrgApacheLuceneSearchQuery *)parseWithNSString:(NSString *)queryText {
  IOSCharArray *data = [((NSString *) nil_chk(queryText)) java_toCharArray];
  IOSCharArray *buffer = [IOSCharArray arrayWithLength:((IOSCharArray *) nil_chk(data))->size_];
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state = create_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_initWithCharArray_withCharArray_withInt_withInt_(data, buffer, 0, data->size_);
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
  if (state->top_ == nil) {
    return create_OrgApacheLuceneSearchMatchNoDocsQuery_init();
  }
  else {
    return state->top_;
  }
}

- (void)parseSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
}

- (void)consumeSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumeSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
}

- (void)consumePhraseWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumePhraseWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
}

- (void)consumeTokenWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumeTokenWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
}

+ (OrgApacheLuceneSearchBooleanQuery *)addClauseWithOrgApacheLuceneSearchBooleanQuery:(OrgApacheLuceneSearchBooleanQuery *)bq
                                                       withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                         withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)occur {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_addClauseWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(bq, query, occur);
}

- (void)buildQueryTreeWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state
                                                   withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)branch {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_buildQueryTreeWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_withOrgApacheLuceneSearchQuery_(self, state, branch);
}

- (jint)parseFuzzinessWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseFuzzinessWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
}

- (jboolean)tokenFinishedWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *)state {
  return OrgApacheLuceneQueryparserSimpleSimpleQueryParser_tokenFinishedWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
}

- (OrgApacheLuceneSearchQuery *)newDefaultQueryWithNSString:(NSString *)text {
  OrgApacheLuceneSearchBooleanQuery_Builder *bq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [bq setDisableCoordWithBoolean:true];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(weights_)) entrySet])) {
    OrgApacheLuceneSearchQuery *q = JreRetainedLocalValue([self createBooleanQueryWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withNSString:text withOrgApacheLuceneSearchBooleanClause_Occur:defaultOperator_]);
    if (q != nil) {
      [q setBoostWithFloat:[((JavaLangFloat *) nil_chk([entry_ getValue])) floatValue]];
      [bq addWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
    }
  }
  return [self simplifyWithOrgApacheLuceneSearchBooleanQuery:[bq build]];
}

- (OrgApacheLuceneSearchQuery *)newFuzzyQueryWithNSString:(NSString *)text
                                                  withInt:(jint)fuzziness {
  OrgApacheLuceneSearchBooleanQuery_Builder *bq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [bq setDisableCoordWithBoolean:true];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(weights_)) entrySet])) {
    OrgApacheLuceneSearchQuery *q = create_OrgApacheLuceneSearchFuzzyQuery_initWithOrgApacheLuceneIndexTerm_withInt_(create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], text), fuzziness);
    if (q != nil) {
      [q setBoostWithFloat:[((JavaLangFloat *) nil_chk([entry_ getValue])) floatValue]];
      [bq addWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
    }
  }
  return [self simplifyWithOrgApacheLuceneSearchBooleanQuery:[bq build]];
}

- (OrgApacheLuceneSearchQuery *)newPhraseQueryWithNSString:(NSString *)text
                                                   withInt:(jint)slop {
  OrgApacheLuceneSearchBooleanQuery_Builder *bq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [bq setDisableCoordWithBoolean:true];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(weights_)) entrySet])) {
    OrgApacheLuceneSearchQuery *q = JreRetainedLocalValue([self createPhraseQueryWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withNSString:text withInt:slop]);
    if (q != nil) {
      [q setBoostWithFloat:[((JavaLangFloat *) nil_chk([entry_ getValue])) floatValue]];
      [bq addWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
    }
  }
  return [self simplifyWithOrgApacheLuceneSearchBooleanQuery:[bq build]];
}

- (OrgApacheLuceneSearchQuery *)newPrefixQueryWithNSString:(NSString *)text {
  OrgApacheLuceneSearchBooleanQuery_Builder *bq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [bq setDisableCoordWithBoolean:true];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(weights_)) entrySet])) {
    OrgApacheLuceneSearchPrefixQuery *prefix = create_OrgApacheLuceneSearchPrefixQuery_initWithOrgApacheLuceneIndexTerm_(create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], text));
    [prefix setBoostWithFloat:[((JavaLangFloat *) nil_chk([entry_ getValue])) floatValue]];
    [bq addWithOrgApacheLuceneSearchQuery:prefix withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
  }
  return [self simplifyWithOrgApacheLuceneSearchBooleanQuery:[bq build]];
}

- (OrgApacheLuceneSearchQuery *)simplifyWithOrgApacheLuceneSearchBooleanQuery:(OrgApacheLuceneSearchBooleanQuery *)bq {
  if ([((id<JavaUtilList>) nil_chk([((OrgApacheLuceneSearchBooleanQuery *) nil_chk(bq)) clauses])) isEmpty]) {
    return nil;
  }
  else if ([((id<JavaUtilList>) nil_chk([bq clauses])) size] == 1) {
    return [((OrgApacheLuceneSearchBooleanClause *) nil_chk([((id<JavaUtilIterator>) nil_chk([((id<JavaUtilList>) nil_chk([bq clauses])) iterator])) next])) getQuery];
  }
  else {
    return bq;
  }
}

- (OrgApacheLuceneSearchBooleanClause_Occur *)getDefaultOperator {
  return defaultOperator_;
}

- (void)setDefaultOperatorWithOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)operator_ {
  if (operator_ != JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD) && operator_ != JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"invalid operator: only SHOULD or MUST are allowed");
  }
  JreStrongAssign(&self->defaultOperator_, operator_);
}

- (void)dealloc {
  RELEASE_(weights_);
  RELEASE_(defaultOperator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 8, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBooleanQuery;", 0xa, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 17, 8, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 18, 6, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 21, 20, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 22, 6, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 23, 24, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBooleanClause_Occur;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisAnalyzer:withNSString:);
  methods[1].selector = @selector(initWithOrgApacheLuceneAnalysisAnalyzer:withJavaUtilMap:);
  methods[2].selector = @selector(initWithOrgApacheLuceneAnalysisAnalyzer:withJavaUtilMap:withInt:);
  methods[3].selector = @selector(parseWithNSString:);
  methods[4].selector = @selector(parseSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:);
  methods[5].selector = @selector(consumeSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:);
  methods[6].selector = @selector(consumePhraseWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:);
  methods[7].selector = @selector(consumeTokenWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:);
  methods[8].selector = @selector(addClauseWithOrgApacheLuceneSearchBooleanQuery:withOrgApacheLuceneSearchQuery:withOrgApacheLuceneSearchBooleanClause_Occur:);
  methods[9].selector = @selector(buildQueryTreeWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:withOrgApacheLuceneSearchQuery:);
  methods[10].selector = @selector(parseFuzzinessWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:);
  methods[11].selector = @selector(tokenFinishedWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State:);
  methods[12].selector = @selector(newDefaultQueryWithNSString:);
  methods[13].selector = @selector(newFuzzyQueryWithNSString:withInt:);
  methods[14].selector = @selector(newPhraseQueryWithNSString:withInt:);
  methods[15].selector = @selector(newPrefixQueryWithNSString:);
  methods[16].selector = @selector(simplifyWithOrgApacheLuceneSearchBooleanQuery:);
  methods[17].selector = @selector(getDefaultOperator);
  methods[18].selector = @selector(setDefaultOperatorWithOrgApacheLuceneSearchBooleanClause_Occur:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "weights_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x14, -1, -1, 27, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "AND_OPERATOR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_AND_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "NOT_OPERATOR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_NOT_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "OR_OPERATOR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_OR_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "PREFIX_OPERATOR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PREFIX_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "PHRASE_OPERATOR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PHRASE_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "PRECEDENCE_OPERATORS", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PRECEDENCE_OPERATORS, 0x19, -1, -1, -1, -1 },
    { "ESCAPE_OPERATOR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_ESCAPE_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "WHITESPACE_OPERATOR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_WHITESPACE_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "FUZZY_OPERATOR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_FUZZY_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "NEAR_OPERATOR", "I", .constantValue.asInt = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_NEAR_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "defaultOperator_", "LOrgApacheLuceneSearchBooleanClause_Occur;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisAnalyzer;LNSString;", "LOrgApacheLuceneAnalysisAnalyzer;LJavaUtilMap;", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Float;>;)V", "LOrgApacheLuceneAnalysisAnalyzer;LJavaUtilMap;I", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Float;>;I)V", "parse", "LNSString;", "parseSubQuery", "LOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State;", "consumeSubQuery", "consumePhrase", "consumeToken", "addClause", "LOrgApacheLuceneSearchBooleanQuery;LOrgApacheLuceneSearchQuery;LOrgApacheLuceneSearchBooleanClause_Occur;", "buildQueryTree", "LOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State;LOrgApacheLuceneSearchQuery;", "parseFuzziness", "tokenFinished", "newDefaultQuery", "newFuzzyQuery", "LNSString;I", "newPhraseQuery", "newPrefixQuery", "simplify", "LOrgApacheLuceneSearchBooleanQuery;", "setDefaultOperator", "LOrgApacheLuceneSearchBooleanClause_Occur;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserSimpleSimpleQueryParser = { "SimpleQueryParser", "org.apache.lucene.queryparser.simple", ptrTable, methods, fields, 7, 0x1, 19, 13, -1, 8, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserSimpleSimpleQueryParser;
}

@end

void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withNSString_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneAnalysisAnalyzer *analyzer, NSString *field) {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(self, analyzer, JavaUtilCollections_singletonMapWithId_withId_(field, JavaLangFloat_valueOfWithFloat_(1.0f)));
}

OrgApacheLuceneQueryparserSimpleSimpleQueryParser *new_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withNSString_(OrgApacheLuceneAnalysisAnalyzer *analyzer, NSString *field) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSimpleSimpleQueryParser, initWithOrgApacheLuceneAnalysisAnalyzer_withNSString_, analyzer, field)
}

OrgApacheLuceneQueryparserSimpleSimpleQueryParser *create_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withNSString_(OrgApacheLuceneAnalysisAnalyzer *analyzer, NSString *field) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSimpleSimpleQueryParser, initWithOrgApacheLuceneAnalysisAnalyzer_withNSString_, analyzer, field)
}

void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneAnalysisAnalyzer *analyzer, id<JavaUtilMap> weights) {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_withInt_(self, analyzer, weights, -1);
}

OrgApacheLuceneQueryparserSimpleSimpleQueryParser *new_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(OrgApacheLuceneAnalysisAnalyzer *analyzer, id<JavaUtilMap> weights) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSimpleSimpleQueryParser, initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_, analyzer, weights)
}

OrgApacheLuceneQueryparserSimpleSimpleQueryParser *create_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(OrgApacheLuceneAnalysisAnalyzer *analyzer, id<JavaUtilMap> weights) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSimpleSimpleQueryParser, initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_, analyzer, weights)
}

void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_withInt_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneAnalysisAnalyzer *analyzer, id<JavaUtilMap> weights, jint flags) {
  OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(self, analyzer);
  JreStrongAssign(&self->defaultOperator_, JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD));
  JreStrongAssign(&self->weights_, weights);
  self->flags_ = flags;
}

OrgApacheLuceneQueryparserSimpleSimpleQueryParser *new_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_withInt_(OrgApacheLuceneAnalysisAnalyzer *analyzer, id<JavaUtilMap> weights, jint flags) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSimpleSimpleQueryParser, initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_withInt_, analyzer, weights, flags)
}

OrgApacheLuceneQueryparserSimpleSimpleQueryParser *create_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_withInt_(OrgApacheLuceneAnalysisAnalyzer *analyzer, id<JavaUtilMap> weights, jint flags) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSimpleSimpleQueryParser, initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_withInt_, analyzer, weights, flags)
}

void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state) {
  while (((OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *) nil_chk(state))->index_ < state->length_) {
    if (IOSCharArray_Get(nil_chk(state->data_), state->index_) == '(' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PRECEDENCE_OPERATORS) != 0) {
      OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumeSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
    }
    else if (IOSCharArray_Get(state->data_, state->index_) == ')' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PRECEDENCE_OPERATORS) != 0) {
      ++state->index_;
    }
    else if (IOSCharArray_Get(state->data_, state->index_) == '"' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PHRASE_OPERATOR) != 0) {
      OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumePhraseWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
    }
    else if (IOSCharArray_Get(state->data_, state->index_) == '+' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_AND_OPERATOR) != 0) {
      if (state->currentOperation_ == nil && state->top_ != nil) {
        JreStrongAssign(&state->currentOperation_, JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST));
      }
      ++state->index_;
    }
    else if (IOSCharArray_Get(state->data_, state->index_) == '|' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_OR_OPERATOR) != 0) {
      if (state->currentOperation_ == nil && state->top_ != nil) {
        JreStrongAssign(&state->currentOperation_, JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD));
      }
      ++state->index_;
    }
    else if (IOSCharArray_Get(state->data_, state->index_) == '-' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_NOT_OPERATOR) != 0) {
      ++state->not__;
      ++state->index_;
      continue;
    }
    else if ((IOSCharArray_Get(state->data_, state->index_) == ' ' || IOSCharArray_Get(state->data_, state->index_) == 0x0009 || IOSCharArray_Get(state->data_, state->index_) == 0x000a || IOSCharArray_Get(state->data_, state->index_) == 0x000d) && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_WHITESPACE_OPERATOR) != 0) {
      ++state->index_;
    }
    else {
      OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumeTokenWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
    }
    state->not__ = 0;
  }
}

void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumeSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state) {
  JreAssert((self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PRECEDENCE_OPERATORS) != 0, @"org/apache/lucene/queryparser/simple/SimpleQueryParser.java:221 condition failed: assert (flags & PRECEDENCE_OPERATORS) != 0;");
  jint start = ++((OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *) nil_chk(state))->index_;
  jint precedence = 1;
  jboolean escaped = false;
  while (state->index_ < state->length_) {
    if (!escaped) {
      if (IOSCharArray_Get(nil_chk(state->data_), state->index_) == '\\' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_ESCAPE_OPERATOR) != 0) {
        escaped = true;
        ++state->index_;
        continue;
      }
      else if (IOSCharArray_Get(state->data_, state->index_) == '(') {
        ++precedence;
      }
      else if (IOSCharArray_Get(state->data_, state->index_) == ')') {
        --precedence;
        if (precedence == 0) {
          break;
        }
      }
    }
    escaped = false;
    ++state->index_;
  }
  if (state->index_ == state->length_) {
    state->index_ = start;
  }
  else if (state->index_ == start) {
    JreStrongAssign(&state->currentOperation_, nil);
    ++state->index_;
  }
  else {
    OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *subState = create_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_initWithCharArray_withCharArray_withInt_withInt_(state->data_, state->buffer_, start, state->index_);
    OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseSubQueryWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, subState);
    OrgApacheLuceneQueryparserSimpleSimpleQueryParser_buildQueryTreeWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_withOrgApacheLuceneSearchQuery_(self, state, subState->top_);
    ++state->index_;
  }
}

void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumePhraseWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state) {
  JreAssert((self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PHRASE_OPERATOR) != 0, @"org/apache/lucene/queryparser/simple/SimpleQueryParser.java:280 condition failed: assert (flags & PHRASE_OPERATOR) != 0;");
  jint start = ++((OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *) nil_chk(state))->index_;
  jint copied = 0;
  jboolean escaped = false;
  jboolean hasSlop = false;
  while (state->index_ < state->length_) {
    if (!escaped) {
      if (IOSCharArray_Get(nil_chk(state->data_), state->index_) == '\\' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_ESCAPE_OPERATOR) != 0) {
        escaped = true;
        ++state->index_;
        continue;
      }
      else if (IOSCharArray_Get(state->data_, state->index_) == '"') {
        if (state->length_ > (state->index_ + 1) && IOSCharArray_Get(state->data_, state->index_ + 1) == '~' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_NEAR_OPERATOR) != 0) {
          state->index_++;
          if (state->length_ > (state->index_ + 1)) {
            hasSlop = true;
          }
          break;
        }
        else {
          break;
        }
      }
    }
    escaped = false;
    *IOSCharArray_GetRef(nil_chk(state->buffer_), copied++) = IOSCharArray_Get(nil_chk(state->data_), state->index_++);
  }
  if (state->index_ == state->length_) {
    state->index_ = start;
  }
  else if (state->index_ == start) {
    JreStrongAssign(&state->currentOperation_, nil);
    ++state->index_;
  }
  else {
    NSString *phrase = [NSString java_stringWithCharacters:state->buffer_ offset:0 length:copied];
    OrgApacheLuceneSearchQuery *branch;
    if (hasSlop) {
      branch = [self newPhraseQueryWithNSString:phrase withInt:OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseFuzzinessWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state)];
    }
    else {
      branch = [self newPhraseQueryWithNSString:phrase withInt:0];
    }
    OrgApacheLuceneQueryparserSimpleSimpleQueryParser_buildQueryTreeWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_withOrgApacheLuceneSearchQuery_(self, state, branch);
    ++state->index_;
  }
}

void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_consumeTokenWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state) {
  jint copied = 0;
  jboolean escaped = false;
  jboolean prefix = false;
  jboolean fuzzy = false;
  while (((OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *) nil_chk(state))->index_ < state->length_) {
    if (!escaped) {
      if (IOSCharArray_Get(nil_chk(state->data_), state->index_) == '\\' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_ESCAPE_OPERATOR) != 0) {
        escaped = true;
        prefix = false;
        ++state->index_;
        continue;
      }
      else if (OrgApacheLuceneQueryparserSimpleSimpleQueryParser_tokenFinishedWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state)) {
        break;
      }
      else if (copied > 0 && IOSCharArray_Get(state->data_, state->index_) == '~' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_FUZZY_OPERATOR) != 0) {
        fuzzy = true;
        break;
      }
      prefix = (copied > 0 && IOSCharArray_Get(state->data_, state->index_) == '*' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PREFIX_OPERATOR) != 0);
    }
    escaped = false;
    *IOSCharArray_GetRef(nil_chk(state->buffer_), copied++) = IOSCharArray_Get(nil_chk(state->data_), state->index_++);
  }
  if (copied > 0) {
    OrgApacheLuceneSearchQuery *branch;
    if (fuzzy && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_FUZZY_OPERATOR) != 0) {
      NSString *token = [NSString java_stringWithCharacters:state->buffer_ offset:0 length:copied];
      jint fuzziness = OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseFuzzinessWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state);
      fuzziness = JavaLangMath_minWithInt_withInt_(fuzziness, OrgApacheLuceneUtilAutomatonLevenshteinAutomata_MAXIMUM_SUPPORTED_DISTANCE);
      if (fuzziness == 0) {
        branch = [self newDefaultQueryWithNSString:token];
      }
      else {
        branch = [self newFuzzyQueryWithNSString:token withInt:fuzziness];
      }
    }
    else if (prefix) {
      NSString *token = [NSString java_stringWithCharacters:state->buffer_ offset:0 length:copied - 1];
      branch = [self newPrefixQueryWithNSString:token];
    }
    else {
      NSString *token = [NSString java_stringWithCharacters:state->buffer_ offset:0 length:copied];
      branch = [self newDefaultQueryWithNSString:token];
    }
    OrgApacheLuceneQueryparserSimpleSimpleQueryParser_buildQueryTreeWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_withOrgApacheLuceneSearchQuery_(self, state, branch);
  }
}

OrgApacheLuceneSearchBooleanQuery *OrgApacheLuceneQueryparserSimpleSimpleQueryParser_addClauseWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_(OrgApacheLuceneSearchBooleanQuery *bq, OrgApacheLuceneSearchQuery *query, OrgApacheLuceneSearchBooleanClause_Occur *occur) {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_initialize();
  OrgApacheLuceneSearchBooleanQuery_Builder *newBq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [newBq setDisableCoordWithBoolean:[((OrgApacheLuceneSearchBooleanQuery *) nil_chk(bq)) isCoordDisabled]];
  [newBq setMinimumNumberShouldMatchWithInt:[bq getMinimumNumberShouldMatch]];
  for (OrgApacheLuceneSearchBooleanClause * __strong clause in bq) {
    [newBq addWithOrgApacheLuceneSearchBooleanClause:clause];
  }
  [newBq addWithOrgApacheLuceneSearchQuery:query withOrgApacheLuceneSearchBooleanClause_Occur:occur];
  return [newBq build];
}

void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_buildQueryTreeWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state, OrgApacheLuceneSearchQuery *branch) {
  if (branch != nil) {
    if (JreIntMod(((OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *) nil_chk(state))->not__, 2) == 1) {
      OrgApacheLuceneSearchBooleanQuery_Builder *nq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
      [nq addWithOrgApacheLuceneSearchQuery:branch withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST_NOT)];
      [nq addWithOrgApacheLuceneSearchQuery:create_OrgApacheLuceneSearchMatchAllDocsQuery_init() withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
      branch = [nq build];
    }
    if (state->top_ == nil) {
      JreStrongAssign(&state->top_, branch);
    }
    else {
      if (state->currentOperation_ == nil) {
        JreStrongAssign(&state->currentOperation_, self->defaultOperator_);
      }
      if (state->previousOperation_ != state->currentOperation_) {
        OrgApacheLuceneSearchBooleanQuery_Builder *bq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
        [bq addWithOrgApacheLuceneSearchQuery:state->top_ withOrgApacheLuceneSearchBooleanClause_Occur:state->currentOperation_];
        JreStrongAssign(&state->top_, [bq build]);
      }
      JreStrongAssign(&state->top_, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_addClauseWithOrgApacheLuceneSearchBooleanQuery_withOrgApacheLuceneSearchQuery_withOrgApacheLuceneSearchBooleanClause_Occur_((OrgApacheLuceneSearchBooleanQuery *) cast_chk(state->top_, [OrgApacheLuceneSearchBooleanQuery class]), branch, state->currentOperation_));
      JreStrongAssign(&state->previousOperation_, state->currentOperation_);
    }
    JreStrongAssign(&state->currentOperation_, nil);
  }
}

jint OrgApacheLuceneQueryparserSimpleSimpleQueryParser_parseFuzzinessWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state) {
  IOSCharArray *slopText = [IOSCharArray arrayWithLength:((OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *) nil_chk(state))->length_];
  jint slopLength = 0;
  if (IOSCharArray_Get(nil_chk(state->data_), state->index_) == '~') {
    while (state->index_ < state->length_) {
      state->index_++;
      if (state->index_ < state->length_) {
        if (OrgApacheLuceneQueryparserSimpleSimpleQueryParser_tokenFinishedWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(self, state)) {
          break;
        }
        *IOSCharArray_GetRef(slopText, slopLength) = IOSCharArray_Get(state->data_, state->index_);
        slopLength++;
      }
    }
    jint fuzziness = 0;
    @try {
      fuzziness = JavaLangInteger_parseIntWithNSString_([NSString java_stringWithCharacters:slopText offset:0 length:slopLength]);
    }
    @catch (JavaLangNumberFormatException *e) {
    }
    if (fuzziness < 0) {
      fuzziness = 0;
    }
    return fuzziness;
  }
  return 0;
}

jboolean OrgApacheLuceneQueryparserSimpleSimpleQueryParser_tokenFinishedWithOrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser *self, OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *state) {
  if ((IOSCharArray_Get(nil_chk(((OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *) nil_chk(state))->data_), state->index_) == '"' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PHRASE_OPERATOR) != 0) || (IOSCharArray_Get(state->data_, state->index_) == '|' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_OR_OPERATOR) != 0) || (IOSCharArray_Get(state->data_, state->index_) == '+' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_AND_OPERATOR) != 0) || (IOSCharArray_Get(state->data_, state->index_) == '(' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PRECEDENCE_OPERATORS) != 0) || (IOSCharArray_Get(state->data_, state->index_) == ')' && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_PRECEDENCE_OPERATORS) != 0) || ((IOSCharArray_Get(state->data_, state->index_) == ' ' || IOSCharArray_Get(state->data_, state->index_) == 0x0009 || IOSCharArray_Get(state->data_, state->index_) == 0x000a || IOSCharArray_Get(state->data_, state->index_) == 0x000d) && (self->flags_ & OrgApacheLuceneQueryparserSimpleSimpleQueryParser_WHITESPACE_OPERATOR) != 0)) {
    return true;
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserSimpleSimpleQueryParser)

@implementation OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State

- (instancetype)initWithCharArray:(IOSCharArray *)data
                    withCharArray:(IOSCharArray *)buffer
                          withInt:(jint)index
                          withInt:(jint)length {
  OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_initWithCharArray_withCharArray_withInt_withInt_(self, data, buffer, index, length);
  return self;
}

- (void)dealloc {
  RELEASE_(data_);
  RELEASE_(buffer_);
  RELEASE_(currentOperation_);
  RELEASE_(previousOperation_);
  RELEASE_(top_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:withCharArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "data_", "[C", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "buffer_", "[C", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentOperation_", "LOrgApacheLuceneSearchBooleanClause_Occur;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "previousOperation_", "LOrgApacheLuceneSearchBooleanClause_Occur;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "not__", "I", .constantValue.asLong = 0, 0x0, 1, -1, -1, -1 },
    { "top_", "LOrgApacheLuceneSearchQuery;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[C[CII", "not", "LOrgApacheLuceneQueryparserSimpleSimpleQueryParser;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State = { "State", "org.apache.lucene.queryparser.simple", ptrTable, methods, fields, 7, 0x8, 1, 8, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State;
}

@end

void OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_initWithCharArray_withCharArray_withInt_withInt_(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *self, IOSCharArray *data, IOSCharArray *buffer, jint index, jint length) {
  NSObject_init(self);
  JreStrongAssign(&self->data_, data);
  JreStrongAssign(&self->buffer_, buffer);
  self->index_ = index;
  self->length_ = length;
}

OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *new_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_initWithCharArray_withCharArray_withInt_withInt_(IOSCharArray *data, IOSCharArray *buffer, jint index, jint length) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State, initWithCharArray_withCharArray_withInt_withInt_, data, buffer, index, length)
}

OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State *create_OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State_initWithCharArray_withCharArray_withInt_withInt_(IOSCharArray *data, IOSCharArray *buffer, jint index, jint length) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State, initWithCharArray_withCharArray_withInt_withInt_, data, buffer, index, length)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserSimpleSimpleQueryParser_State)
