//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/core/config/AbstractQueryConfig must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserFlexibleCoreConfigAbstractQueryConfig () {
 @public
  JavaUtilHashMap *configMap_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreConfigAbstractQueryConfig, configMap_, JavaUtilHashMap *)

@implementation OrgApacheLuceneQueryparserFlexibleCoreConfigAbstractQueryConfig

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserFlexibleCoreConfigAbstractQueryConfig_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)getWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:(OrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey *)key {
  if (key == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"key cannot be null!");
  }
  return [((JavaUtilHashMap *) nil_chk(self->configMap_)) getWithId:key];
}

- (jboolean)hasWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:(OrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey *)key {
  if (key == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"key cannot be null!");
  }
  return [((JavaUtilHashMap *) nil_chk(self->configMap_)) containsKeyWithId:key];
}

- (void)setWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:(OrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey *)key
                                                                     withId:(id)value {
  if (key == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"key cannot be null!");
  }
  if (value == nil) {
    [self unsetWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:key];
  }
  else {
    [((JavaUtilHashMap *) nil_chk(self->configMap_)) putWithId:key withId:value];
  }
}

- (jboolean)unsetWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:(OrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey *)key {
  if (key == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"key cannot be null!");
  }
  return [((JavaUtilHashMap *) nil_chk(self->configMap_)) removeWithId:key] != nil;
}

- (void)dealloc {
  RELEASE_(configMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x1, 8, 1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:);
  methods[2].selector = @selector(hasWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:);
  methods[3].selector = @selector(setWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:withId:);
  methods[4].selector = @selector(unsetWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "configMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "get", "LOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey;", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey<TT;>;)TT;", "has", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey<TT;>;)Z", "set", "LOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey;LNSObject;", "<T:Ljava/lang/Object;>(Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey<TT;>;TT;)V", "unset", "Ljava/util/HashMap<Lorg/apache/lucene/queryparser/flexible/core/config/ConfigurationKey<*>;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleCoreConfigAbstractQueryConfig = { "AbstractQueryConfig", "org.apache.lucene.queryparser.flexible.core.config", ptrTable, methods, fields, 7, 0x401, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleCoreConfigAbstractQueryConfig;
}

@end

void OrgApacheLuceneQueryparserFlexibleCoreConfigAbstractQueryConfig_init(OrgApacheLuceneQueryparserFlexibleCoreConfigAbstractQueryConfig *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->configMap_, new_JavaUtilHashMap_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleCoreConfigAbstractQueryConfig)
