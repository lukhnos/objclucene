//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.java
//

#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode () {
 @public
  id<JavaUtilList> values_;
}

- (id<JavaLangCharSequence>)getPathString;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode, values_, id<JavaUtilList>)

__attribute__((unused)) static id<JavaLangCharSequence> OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_getPathString(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode *self);

@implementation OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)pathElements {
  OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_initWithJavaUtilList_(self, pathElements);
  return self;
}

- (id<JavaUtilList>)getPathElements {
  return values_;
}

- (void)setPathElementsWithJavaUtilList:(id<JavaUtilList>)elements {
  JreStrongAssign(&self->values_, elements);
}

- (OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *)getPathElementWithInt:(jint)index {
  return [((id<JavaUtilList>) nil_chk(values_)) getWithInt:index];
}

- (id<JavaLangCharSequence>)getFirstPathElement {
  return ((OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *) nil_chk([((id<JavaUtilList>) nil_chk(values_)) getWithInt:0]))->value_;
}

- (id<JavaUtilList>)getPathElementsWithInt:(jint)startIndex {
  id<JavaUtilList> rValues = create_JavaUtilArrayList_init();
  for (jint i = startIndex; i < [((id<JavaUtilList>) nil_chk(self->values_)) size]; i++) {
    @try {
      [rValues addWithId:[((OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *) nil_chk([((id<JavaUtilList>) nil_chk(self->values_)) getWithInt:i])) java_clone]];
    }
    @catch (JavaLangCloneNotSupportedException *e) {
    }
  }
  return rValues;
}

- (id<JavaLangCharSequence>)getPathString {
  return OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_getPathString(self);
}

- (id<JavaLangCharSequence>)toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:(id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>)escaper {
  JavaLangStringBuilder *path = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([path appendWithNSString:@"/"])) appendWithJavaLangCharSequence:[self getFirstPathElement]];
  for (OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText * __strong pathelement in nil_chk([self getPathElementsWithInt:1])) {
    id<JavaLangCharSequence> value = JreRetainedLocalValue([((id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>) nil_chk(escaper)) escapeWithJavaLangCharSequence:((OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *) nil_chk(pathelement))->value_ withJavaUtilLocale:JavaUtilLocale_getDefault() withOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type:JreLoadEnum(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type, STRING)]);
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([path appendWithNSString:@"/\""])) appendWithJavaLangCharSequence:value])) appendWithNSString:@"\""];
  }
  return [path description];
}

- (NSString *)description {
  OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *text = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(self->values_)) getWithInt:0]);
  return JreStrcat("$I$I$@$", @"<path start='", ((OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *) nil_chk(text))->begin_, @"' end='", text->end_, @"' path='", OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_getPathString(self), @"'/>");
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)cloneTree {
  OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode *clone = (OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode *) cast_chk([super cloneTree], [OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode class]);
  if (self->values_ != nil) {
    id<JavaUtilList> localValues = create_JavaUtilArrayList_init();
    for (OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText * __strong value in nil_chk(self->values_)) {
      [localValues addWithId:[((OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *) nil_chk(value)) java_clone]];
    }
    JreStrongAssign(&((OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode *) nil_chk(clone))->values_, localValues);
  }
  return clone;
}

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 0, -1, 1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 6, 5, -1, 7, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", 0x1, -1, -1, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(getPathElements);
  methods[2].selector = @selector(setPathElementsWithJavaUtilList:);
  methods[3].selector = @selector(getPathElementWithInt:);
  methods[4].selector = @selector(getFirstPathElement);
  methods[5].selector = @selector(getPathElementsWithInt:);
  methods[6].selector = @selector(getPathString);
  methods[7].selector = @selector(toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(cloneTree);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;>;)V", "()Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;>;", "setPathElements", "getPathElement", "I", "getPathElements", "(I)Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;>;", "toQueryString", "LOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax;", "toString", "LJavaLangCloneNotSupportedException;", "Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;>;", "LOrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode = { "PathQueryNode", "org.apache.lucene.queryparser.flexible.core.nodes", ptrTable, methods, fields, 7, 0x1, 10, 1, -1, 13, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode;
}

@end

void OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_initWithJavaUtilList_(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode *self, id<JavaUtilList> pathElements) {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_init(self);
  JreStrongAssign(&self->values_, nil);
  JreStrongAssign(&self->values_, pathElements);
  if ([((id<JavaUtilList>) nil_chk(pathElements)) size] <= 1) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"PathQuerynode requires more 2 or more path elements.");
  }
}

OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode *new_OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_initWithJavaUtilList_(id<JavaUtilList> pathElements) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode, initWithJavaUtilList_, pathElements)
}

OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode *create_OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_initWithJavaUtilList_(id<JavaUtilList> pathElements) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode, initWithJavaUtilList_, pathElements)
}

id<JavaLangCharSequence> OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_getPathString(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode *self) {
  JavaLangStringBuilder *path = create_JavaLangStringBuilder_init();
  for (OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText * __strong pathelement in nil_chk(self->values_)) {
    [((JavaLangStringBuilder *) nil_chk([path appendWithNSString:@"/"])) appendWithJavaLangCharSequence:((OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *) nil_chk(pathelement))->value_];
  }
  return [path description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode)

@implementation OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)value
                                     withInt:(jint)begin
                                     withInt:(jint)end {
  OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText_initWithJavaLangCharSequence_withInt_withInt_(self, value, begin, end);
  return self;
}

- (OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *)java_clone {
  OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *clone = (OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *) cast_chk([super java_clone], [OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText class]);
  JreStrongAssign(&((OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *) nil_chk(clone))->value_, self->value_);
  clone->begin_ = self->begin_;
  clone->end_ = self->end_;
  return clone;
}

- (id<JavaLangCharSequence>)getValue {
  return value_;
}

- (jint)getBegin {
  return begin_;
}

- (jint)getEnd {
  return end_;
}

- (NSString *)description {
  return JreStrcat("@$I$I", value_, @", ", begin_, @", ", end_);
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText;", 0x1, 1, -1, 2, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangCharSequence:withInt:withInt:);
  methods[1].selector = @selector(java_clone);
  methods[2].selector = @selector(getValue);
  methods[3].selector = @selector(getBegin);
  methods[4].selector = @selector(getEnd);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "begin_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangCharSequence;II", "clone", "LJavaLangCloneNotSupportedException;", "toString", "LOrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText = { "QueryText", "org.apache.lucene.queryparser.flexible.core.nodes", ptrTable, methods, fields, 7, 0x9, 6, 3, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText_initWithJavaLangCharSequence_withInt_withInt_(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *self, id<JavaLangCharSequence> value, jint begin, jint end) {
  NSObject_init(self);
  JreStrongAssign(&self->value_, nil);
  JreStrongAssign(&self->value_, value);
  self->begin_ = begin;
  self->end_ = end;
}

OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *new_OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText_initWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> value, jint begin, jint end) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText, initWithJavaLangCharSequence_withInt_withInt_, value, begin, end)
}

OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText *create_OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText_initWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> value, jint begin, jint end) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText, initWithJavaLangCharSequence_withInt_withInt_, value, begin, end)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleCoreNodesPathQueryNode_QueryText)
