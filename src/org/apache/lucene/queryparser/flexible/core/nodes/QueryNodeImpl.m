//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Hashtable.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"
#include "org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/util/StringUtils.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLS.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl () {
 @public
  jboolean isLeaf_;
  JavaUtilHashtable *tags_;
  id<JavaUtilList> clauses_;
  id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> parent_;
}

- (void)setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)parent;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl, tags_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl, clauses_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl, parent_, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)

__attribute__((unused)) static void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> child);

__attribute__((unused)) static void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithJavaUtilList_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<JavaUtilList> children);

__attribute__((unused)) static id<JavaUtilList> OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_getChildren(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self);

__attribute__((unused)) static void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> parent);

NSString *OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_PLAINTEXT_FIELD_NAME = @"_plain";

@implementation OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl

+ (NSString *)PLAINTEXT_FIELD_NAME {
  return OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_PLAINTEXT_FIELD_NAME;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)allocate {
  if (self->clauses_ == nil) {
    JreStrongAssignAndConsume(&self->clauses_, new_JavaUtilArrayList_init());
  }
  else {
    [self->clauses_ clear];
  }
}

- (void)addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)child {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(self, child);
}

- (void)addWithJavaUtilList:(id<JavaUtilList>)children {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithJavaUtilList_(self, children);
}

- (jboolean)isLeaf {
  return self->isLeaf_;
}

- (void)setWithJavaUtilList:(id<JavaUtilList>)children {
  if ([self isLeaf] || self->clauses_ == nil) {
    JavaUtilResourceBundle *bundle = JavaUtilResourceBundle_getBundleWithNSString_(@"org.apache.lucene.queryParser.messages.QueryParserMessages");
    NSString *message = [nil_chk([((JavaUtilResourceBundle *) nil_chk(bundle)) getObjectWithNSString:@"Q0008E.NODE_ACTION_NOT_SUPPORTED"]) description];
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(message);
  }
  for (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> __strong child in nil_chk(children)) {
    [((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(child)) removeFromParent];
  }
  JavaUtilArrayList *existingChildren = create_JavaUtilArrayList_initWithJavaUtilCollection_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_getChildren(self));
  for (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> __strong existingChild in existingChildren) {
    [((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(existingChild)) removeFromParent];
  }
  [self allocate];
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithJavaUtilList_(self, children);
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)cloneTree {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *clone = (OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *) cast_chk([super java_clone], [OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl class]);
  ((OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *) nil_chk(clone))->isLeaf_ = self->isLeaf_;
  JreStrongAssignAndConsume(&clone->tags_, new_JavaUtilHashtable_init());
  if (self->clauses_ != nil) {
    id<JavaUtilList> localClauses = create_JavaUtilArrayList_init();
    for (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> __strong clause in nil_chk(self->clauses_)) {
      [localClauses addWithId:[((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(clause)) cloneTree]];
    }
    JreStrongAssign(&clone->clauses_, localClauses);
  }
  return clone;
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)java_clone {
  return [self cloneTree];
}

- (void)setLeafWithBoolean:(jboolean)isLeaf {
  self->isLeaf_ = isLeaf;
}

- (id<JavaUtilList>)getChildren {
  return OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_getChildren(self);
}

- (void)setTagWithNSString:(NSString *)tagName
                    withId:(id)value {
  [((JavaUtilHashtable *) nil_chk(self->tags_)) putWithId:[((NSString *) nil_chk(tagName)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)] withId:value];
}

- (void)unsetTagWithNSString:(NSString *)tagName {
  [((JavaUtilHashtable *) nil_chk(self->tags_)) removeWithId:[((NSString *) nil_chk(tagName)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)]];
}

- (jboolean)containsTagWithNSString:(NSString *)tagName {
  return [((JavaUtilHashtable *) nil_chk(self->tags_)) containsKeyWithId:[((NSString *) nil_chk(tagName)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)]];
}

- (id)getTagWithNSString:(NSString *)tagName {
  return [((JavaUtilHashtable *) nil_chk(self->tags_)) getWithId:[((NSString *) nil_chk(tagName)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)]];
}

- (void)setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)parent {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(self, parent);
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)getParent {
  return self->parent_;
}

- (jboolean)isRoot {
  return [self getParent] == nil;
}

- (jboolean)isDefaultFieldWithJavaLangCharSequence:(id<JavaLangCharSequence>)fld {
  if (self->toQueryStringIgnoreFields_) return true;
  if (fld == nil) return true;
  if ([((NSString *) nil_chk(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_PLAINTEXT_FIELD_NAME)) isEqual:OrgApacheLuceneQueryparserFlexibleCoreUtilStringUtils_toStringWithId_(fld)]) return true;
  return false;
}

- (NSString *)description {
  return [super description];
}

- (id<JavaUtilMap>)getTagMap {
  return (id<JavaUtilMap>) cast_check([((JavaUtilHashtable *) nil_chk(self->tags_)) java_clone], JavaUtilMap_class_());
}

- (void)removeChildrenWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)childNode {
  id<JavaUtilIterator> it = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(self->clauses_)) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if (JreObjectEqualsEquals([it next], childNode)) {
      [it remove];
    }
  }
  [((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(childNode)) removeFromParent];
}

- (void)removeFromParent {
  if (self->parent_ != nil) {
    id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> parent = JreRetainedLocalValue(self->parent_);
    JreStrongAssign(&self->parent_, nil);
    [parent removeChildrenWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:self];
  }
}

- (void)dealloc {
  RELEASE_(tags_);
  RELEASE_(clauses_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 2, -1, 3, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", 0x1, 6, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(allocate);
  methods[2].selector = @selector(addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:);
  methods[3].selector = @selector(addWithJavaUtilList:);
  methods[4].selector = @selector(isLeaf);
  methods[5].selector = @selector(setWithJavaUtilList:);
  methods[6].selector = @selector(cloneTree);
  methods[7].selector = @selector(java_clone);
  methods[8].selector = @selector(setLeafWithBoolean:);
  methods[9].selector = @selector(getChildren);
  methods[10].selector = @selector(setTagWithNSString:withId:);
  methods[11].selector = @selector(unsetTagWithNSString:);
  methods[12].selector = @selector(containsTagWithNSString:);
  methods[13].selector = @selector(getTagWithNSString:);
  methods[14].selector = @selector(setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:);
  methods[15].selector = @selector(getParent);
  methods[16].selector = @selector(isRoot);
  methods[17].selector = @selector(isDefaultFieldWithJavaLangCharSequence:);
  methods[18].selector = @selector(description);
  methods[19].selector = @selector(getTagMap);
  methods[20].selector = @selector(removeChildrenWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:);
  methods[21].selector = @selector(removeFromParent);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PLAINTEXT_FIELD_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "isLeaf_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tags_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "clauses_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "parent_", "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "toQueryStringIgnoreFields_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;>;)V", "set", "LJavaLangCloneNotSupportedException;", "clone", "setLeaf", "Z", "()Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;>;", "setTag", "LNSString;LNSObject;", "unsetTag", "LNSString;", "containsTag", "getTag", "setParent", "isDefaultField", "LJavaLangCharSequence;", "toString", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "removeChildren", &OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_PLAINTEXT_FIELD_NAME, "Ljava/util/Hashtable<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl = { "QueryNodeImpl", "org.apache.lucene.queryparser.flexible.core.nodes", ptrTable, methods, fields, 7, 0x401, 22, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_init(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self) {
  NSObject_init(self);
  self->isLeaf_ = true;
  JreStrongAssignAndConsume(&self->tags_, new_JavaUtilHashtable_init());
  JreStrongAssign(&self->clauses_, nil);
  JreStrongAssign(&self->parent_, nil);
  self->toQueryStringIgnoreFields_ = false;
}

void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> child) {
  if ([self isLeaf] || self->clauses_ == nil || child == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgApacheLuceneQueryparserFlexibleMessagesNLS_getLocalizedMessageWithNSString_(JreLoadStatic(OrgApacheLuceneQueryparserFlexibleCoreMessagesQueryParserMessages, NODE_ACTION_NOT_SUPPORTED)));
  }
  [self->clauses_ addWithId:child];
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(((OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *) cast_chk(child, [OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl class])), self);
}

void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithJavaUtilList_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<JavaUtilList> children) {
  if ([self isLeaf] || self->clauses_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgApacheLuceneQueryparserFlexibleMessagesNLS_getLocalizedMessageWithNSString_(JreLoadStatic(OrgApacheLuceneQueryparserFlexibleCoreMessagesQueryParserMessages, NODE_ACTION_NOT_SUPPORTED)));
  }
  for (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> __strong child in nil_chk(children)) {
    OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(self, child);
  }
}

id<JavaUtilList> OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_getChildren(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self) {
  if ([self isLeaf] || self->clauses_ == nil) {
    return nil;
  }
  return create_JavaUtilArrayList_initWithJavaUtilCollection_(self->clauses_);
}

void OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_setParentWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl *self, id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> parent) {
  if (!JreObjectEqualsEquals(self->parent_, parent)) {
    [self removeFromParent];
    JreStrongAssign(&self->parent_, parent);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl)
