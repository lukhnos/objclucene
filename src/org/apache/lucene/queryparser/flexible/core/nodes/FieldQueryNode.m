//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.java
//

#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)field
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                     withInt:(jint)begin
                                     withInt:(jint)end {
  OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(self, field, text, begin, end);
  return self;
}

- (id<JavaLangCharSequence>)getTermEscapedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:(id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>)escaper {
  return [((id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>) nil_chk(escaper)) escapeWithJavaLangCharSequence:self->text_ withJavaUtilLocale:JavaUtilLocale_getDefault() withOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type:JreLoadEnum(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type, NORMAL)];
}

- (id<JavaLangCharSequence>)getTermEscapeQuotedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:(id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>)escaper {
  return [((id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>) nil_chk(escaper)) escapeWithJavaLangCharSequence:self->text_ withJavaUtilLocale:JavaUtilLocale_getDefault() withOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type:JreLoadEnum(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type, STRING)];
}

- (id<JavaLangCharSequence>)toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:(id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>)escaper {
  if ([self isDefaultFieldWithJavaLangCharSequence:self->field_]) {
    return [self getTermEscapedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:escaper];
  }
  else {
    return JreStrcat("@C@", self->field_, ':', [self getTermEscapedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:escaper]);
  }
}

- (NSString *)description {
  return JreStrcat("$I$I$@$@$", @"<field start='", self->begin_, @"' end='", self->end_, @"' field='", self->field_, @"' text='", self->text_, @"'/>");
}

- (NSString *)getTextAsString {
  if (self->text_ == nil) return nil;
  else return [self->text_ description];
}

- (NSString *)getFieldAsString {
  if (self->field_ == nil) return nil;
  else return [self->field_ description];
}

- (jint)getBegin {
  return self->begin_;
}

- (void)setBeginWithInt:(jint)begin {
  self->begin_ = begin;
}

- (jint)getEnd {
  return self->end_;
}

- (void)setEndWithInt:(jint)end {
  self->end_ = end;
}

- (id<JavaLangCharSequence>)getField {
  return self->field_;
}

- (void)setFieldWithJavaLangCharSequence:(id<JavaLangCharSequence>)field {
  JreStrongAssign(&self->field_, field);
}

- (jint)getPositionIncrement {
  return self->positionIncrement_;
}

- (void)setPositionIncrementWithInt:(jint)pi {
  self->positionIncrement_ = pi;
}

- (id<JavaLangCharSequence>)getText {
  return self->text_;
}

- (void)setTextWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  JreStrongAssign(&self->text_, text);
}

- (OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *)cloneTree {
  OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *fqn = (OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) cast_chk([super cloneTree], [OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode class]);
  ((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(fqn))->begin_ = self->begin_;
  fqn->end_ = self->end_;
  JreStrongAssign(&fqn->field_, self->field_);
  JreStrongAssign(&fqn->text_, self->text_);
  fqn->positionIncrement_ = self->positionIncrement_;
  fqn->toQueryStringIgnoreFields_ = self->toQueryStringIgnoreFields_;
  return fqn;
}

- (id<JavaLangCharSequence>)getValue {
  return [self getText];
}

- (void)setValueWithId:(id<JavaLangCharSequence>)value {
  [self setTextWithJavaLangCharSequence:value];
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x4, 3, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode;", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangCharSequence:withJavaLangCharSequence:withInt:withInt:);
  methods[1].selector = @selector(getTermEscapedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:);
  methods[2].selector = @selector(getTermEscapeQuotedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:);
  methods[3].selector = @selector(toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:);
  methods[4].selector = @selector(description);
  methods[5].selector = @selector(getTextAsString);
  methods[6].selector = @selector(getFieldAsString);
  methods[7].selector = @selector(getBegin);
  methods[8].selector = @selector(setBeginWithInt:);
  methods[9].selector = @selector(getEnd);
  methods[10].selector = @selector(setEndWithInt:);
  methods[11].selector = @selector(getField);
  methods[12].selector = @selector(setFieldWithJavaLangCharSequence:);
  methods[13].selector = @selector(getPositionIncrement);
  methods[14].selector = @selector(setPositionIncrementWithInt:);
  methods[15].selector = @selector(getText);
  methods[16].selector = @selector(setTextWithJavaLangCharSequence:);
  methods[17].selector = @selector(cloneTree);
  methods[18].selector = @selector(getValue);
  methods[19].selector = @selector(setValueWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "text_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "begin_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "positionIncrement_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangCharSequence;LJavaLangCharSequence;II", "getTermEscaped", "LOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax;", "getTermEscapeQuoted", "toQueryString", "toString", "setBegin", "I", "setEnd", "setField", "LJavaLangCharSequence;", "setPositionIncrement", "setText", "LJavaLangCloneNotSupportedException;", "setValue", "Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode<Ljava/lang/CharSequence;>;Lorg/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode = { "FieldQueryNode", "org.apache.lucene.queryparser.flexible.core.nodes", ptrTable, methods, fields, 7, 0x1, 20, 5, -1, -1, -1, 15, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode;
}

@end

void OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *self, id<JavaLangCharSequence> field, id<JavaLangCharSequence> text, jint begin, jint end) {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_init(self);
  JreStrongAssign(&self->field_, field);
  JreStrongAssign(&self->text_, text);
  self->begin_ = begin;
  self->end_ = end;
  [self setLeafWithBoolean:true];
}

OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *new_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> field, id<JavaLangCharSequence> text, jint begin, jint end) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode, initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_, field, text, begin, end)
}

OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *create_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> field, id<JavaLangCharSequence> text, jint begin, jint end) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode, initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_, field, text, begin, end)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode)
