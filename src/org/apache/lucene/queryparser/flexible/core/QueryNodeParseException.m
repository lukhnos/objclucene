//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "org/apache/lucene/queryparser/flexible/messages/MessageImpl.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException () {
 @public
  id<JavaLangCharSequence> query_;
  jint beginColumn_;
  jint beginLine_;
  NSString *errorToken_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException, query_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException, errorToken_, NSString *)

@implementation OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException

- (instancetype)initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage:(id<OrgApacheLuceneQueryparserFlexibleMessagesMessage>)message {
  OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_(self, message);
  return self;
}

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)throwable {
  OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithJavaLangThrowable_(self, throwable);
  return self;
}

- (instancetype)initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage:(id<OrgApacheLuceneQueryparserFlexibleMessagesMessage>)message
                                                    withJavaLangThrowable:(JavaLangThrowable *)throwable {
  OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_withJavaLangThrowable_(self, message, throwable);
  return self;
}

- (void)setQueryWithJavaLangCharSequence:(id<JavaLangCharSequence>)query {
  JreStrongAssign(&self->query_, query);
  JreStrongAssignAndConsume(&self->message_, new_OrgApacheLuceneQueryparserFlexibleMessagesMessageImpl_initWithNSString_withNSObjectArray_(JreLoadStatic(OrgApacheLuceneQueryparserFlexibleCoreMessagesQueryParserMessages, INVALID_SYNTAX_CANNOT_PARSE), [IOSObjectArray arrayWithObjects:(id[]){ query, @"" } count:2 type:NSObject_class_()]));
}

- (id<JavaLangCharSequence>)getQuery {
  return self->query_;
}

- (void)setErrorTokenWithNSString:(NSString *)errorToken {
  JreStrongAssign(&self->errorToken_, errorToken);
}

- (NSString *)getErrorToken {
  return self->errorToken_;
}

- (void)setNonLocalizedMessageWithOrgApacheLuceneQueryparserFlexibleMessagesMessage:(id<OrgApacheLuceneQueryparserFlexibleMessagesMessage>)message {
  JreStrongAssign(&self->message_, message);
}

- (jint)getBeginLine {
  return self->beginLine_;
}

- (jint)getBeginColumn {
  return self->beginColumn_;
}

- (void)setBeginLineWithInt:(jint)beginLine {
  self->beginLine_ = beginLine;
}

- (void)setBeginColumnWithInt:(jint)beginColumn {
  self->beginColumn_ = beginColumn;
}

- (void)dealloc {
  RELEASE_(query_);
  RELEASE_(errorToken_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage:);
  methods[1].selector = @selector(initWithJavaLangThrowable:);
  methods[2].selector = @selector(initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage:withJavaLangThrowable:);
  methods[3].selector = @selector(setQueryWithJavaLangCharSequence:);
  methods[4].selector = @selector(getQuery);
  methods[5].selector = @selector(setErrorTokenWithNSString:);
  methods[6].selector = @selector(getErrorToken);
  methods[7].selector = @selector(setNonLocalizedMessageWithOrgApacheLuceneQueryparserFlexibleMessagesMessage:);
  methods[8].selector = @selector(getBeginLine);
  methods[9].selector = @selector(getBeginColumn);
  methods[10].selector = @selector(setBeginLineWithInt:);
  methods[11].selector = @selector(setBeginColumnWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "query_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "beginColumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "beginLine_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorToken_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneQueryparserFlexibleMessagesMessage;", "LJavaLangThrowable;", "LOrgApacheLuceneQueryparserFlexibleMessagesMessage;LJavaLangThrowable;", "setQuery", "LJavaLangCharSequence;", "setErrorToken", "LNSString;", "setNonLocalizedMessage", "setBeginLine", "I", "setBeginColumn" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException = { "QueryNodeParseException", "org.apache.lucene.queryparser.flexible.core", ptrTable, methods, fields, 7, 0x1, 12, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException;
}

@end

void OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException *self, id<OrgApacheLuceneQueryparserFlexibleMessagesMessage> message) {
  OrgApacheLuceneQueryparserFlexibleCoreQueryNodeException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_(self, message);
  self->beginColumn_ = -1;
  self->beginLine_ = -1;
  JreStrongAssign(&self->errorToken_, @"");
}

OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException *new_OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_(id<OrgApacheLuceneQueryparserFlexibleMessagesMessage> message) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException, initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_, message)
}

OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException *create_OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_(id<OrgApacheLuceneQueryparserFlexibleMessagesMessage> message) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException, initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_, message)
}

void OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithJavaLangThrowable_(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException *self, JavaLangThrowable *throwable) {
  OrgApacheLuceneQueryparserFlexibleCoreQueryNodeException_initWithJavaLangThrowable_(self, throwable);
  self->beginColumn_ = -1;
  self->beginLine_ = -1;
  JreStrongAssign(&self->errorToken_, @"");
}

OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException *new_OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithJavaLangThrowable_(JavaLangThrowable *throwable) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException, initWithJavaLangThrowable_, throwable)
}

OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException *create_OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithJavaLangThrowable_(JavaLangThrowable *throwable) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException, initWithJavaLangThrowable_, throwable)
}

void OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_withJavaLangThrowable_(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException *self, id<OrgApacheLuceneQueryparserFlexibleMessagesMessage> message, JavaLangThrowable *throwable) {
  OrgApacheLuceneQueryparserFlexibleCoreQueryNodeException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_withJavaLangThrowable_(self, message, throwable);
  self->beginColumn_ = -1;
  self->beginLine_ = -1;
  JreStrongAssign(&self->errorToken_, @"");
}

OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException *new_OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_withJavaLangThrowable_(id<OrgApacheLuceneQueryparserFlexibleMessagesMessage> message, JavaLangThrowable *throwable) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException, initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_withJavaLangThrowable_, message, throwable)
}

OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException *create_OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_withJavaLangThrowable_(id<OrgApacheLuceneQueryparserFlexibleMessagesMessage> message, JavaLangThrowable *throwable) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException, initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_withJavaLangThrowable_, message, throwable)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleCoreQueryNodeParseException)
