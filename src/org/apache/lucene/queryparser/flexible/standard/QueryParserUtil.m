//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/flexible/standard/QueryParserUtil.h"
#include "org/apache/lucene/queryparser/flexible/standard/StandardQueryParser.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/Query.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/standard/QueryParserUtil must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgApacheLuceneSearchQuery *)parseWithNSStringArray:(IOSObjectArray *)queries
                                     withNSStringArray:(IOSObjectArray *)fields
                   withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  return OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_parseWithNSStringArray_withNSStringArray_withOrgApacheLuceneAnalysisAnalyzer_(queries, fields, analyzer);
}

+ (OrgApacheLuceneSearchQuery *)parseWithNSString:(NSString *)query
                                withNSStringArray:(IOSObjectArray *)fields
withOrgApacheLuceneSearchBooleanClause_OccurArray:(IOSObjectArray *)flags
              withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  return OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_parseWithNSString_withNSStringArray_withOrgApacheLuceneSearchBooleanClause_OccurArray_withOrgApacheLuceneAnalysisAnalyzer_(query, fields, flags, analyzer);
}

+ (OrgApacheLuceneSearchQuery *)parseWithNSStringArray:(IOSObjectArray *)queries
                                     withNSStringArray:(IOSObjectArray *)fields
     withOrgApacheLuceneSearchBooleanClause_OccurArray:(IOSObjectArray *)flags
                   withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  return OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_parseWithNSStringArray_withNSStringArray_withOrgApacheLuceneSearchBooleanClause_OccurArray_withOrgApacheLuceneAnalysisAnalyzer_(queries, fields, flags, analyzer);
}

+ (NSString *)escapeWithNSString:(NSString *)s {
  return OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_escapeWithNSString_(s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseWithNSStringArray:withNSStringArray:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[2].selector = @selector(parseWithNSString:withNSStringArray:withOrgApacheLuceneSearchBooleanClause_OccurArray:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[3].selector = @selector(parseWithNSStringArray:withNSStringArray:withOrgApacheLuceneSearchBooleanClause_OccurArray:withOrgApacheLuceneAnalysisAnalyzer:);
  methods[4].selector = @selector(escapeWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parse", "[LNSString;[LNSString;LOrgApacheLuceneAnalysisAnalyzer;", "LOrgApacheLuceneQueryparserFlexibleCoreQueryNodeException;", "LNSString;[LNSString;[LOrgApacheLuceneSearchBooleanClause_Occur;LOrgApacheLuceneAnalysisAnalyzer;", "[LNSString;[LNSString;[LOrgApacheLuceneSearchBooleanClause_Occur;LOrgApacheLuceneAnalysisAnalyzer;", "escape", "LNSString;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil = { "QueryParserUtil", "org.apache.lucene.queryparser.flexible.standard", ptrTable, methods, NULL, 7, 0x11, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil;
}

@end

void OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_init(OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil *self) {
  NSObject_init(self);
}

OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil *new_OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil, init)
}

OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil *create_OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil, init)
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_parseWithNSStringArray_withNSStringArray_withOrgApacheLuceneAnalysisAnalyzer_(IOSObjectArray *queries, IOSObjectArray *fields, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_initialize();
  if (((IOSObjectArray *) nil_chk(queries))->size_ != ((IOSObjectArray *) nil_chk(fields))->size_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"queries.length != fields.length");
  OrgApacheLuceneSearchBooleanQuery_Builder *bQuery = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  OrgApacheLuceneQueryparserFlexibleStandardStandardQueryParser *qp = create_OrgApacheLuceneQueryparserFlexibleStandardStandardQueryParser_init();
  [qp setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:analyzer];
  for (jint i = 0; i < fields->size_; i++) {
    OrgApacheLuceneSearchQuery *q = JreRetainedLocalValue([qp parseWithNSString:IOSObjectArray_Get(queries, i) withNSString:IOSObjectArray_Get(fields, i)]);
    if (q != nil) {
      [bQuery addWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
    }
  }
  return [bQuery build];
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_parseWithNSString_withNSStringArray_withOrgApacheLuceneSearchBooleanClause_OccurArray_withOrgApacheLuceneAnalysisAnalyzer_(NSString *query, IOSObjectArray *fields, IOSObjectArray *flags, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_initialize();
  if (((IOSObjectArray *) nil_chk(fields))->size_ != ((IOSObjectArray *) nil_chk(flags))->size_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"fields.length != flags.length");
  OrgApacheLuceneSearchBooleanQuery_Builder *bQuery = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  OrgApacheLuceneQueryparserFlexibleStandardStandardQueryParser *qp = create_OrgApacheLuceneQueryparserFlexibleStandardStandardQueryParser_init();
  [qp setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:analyzer];
  for (jint i = 0; i < fields->size_; i++) {
    OrgApacheLuceneSearchQuery *q = JreRetainedLocalValue([qp parseWithNSString:query withNSString:IOSObjectArray_Get(fields, i)]);
    if (q != nil) {
      [bQuery addWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:IOSObjectArray_Get(flags, i)];
    }
  }
  return [bQuery build];
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_parseWithNSStringArray_withNSStringArray_withOrgApacheLuceneSearchBooleanClause_OccurArray_withOrgApacheLuceneAnalysisAnalyzer_(IOSObjectArray *queries, IOSObjectArray *fields, IOSObjectArray *flags, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_initialize();
  if (!(((IOSObjectArray *) nil_chk(queries))->size_ == ((IOSObjectArray *) nil_chk(fields))->size_ && queries->size_ == ((IOSObjectArray *) nil_chk(flags))->size_)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"queries, fields, and flags array have have different length");
  OrgApacheLuceneSearchBooleanQuery_Builder *bQuery = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  OrgApacheLuceneQueryparserFlexibleStandardStandardQueryParser *qp = create_OrgApacheLuceneQueryparserFlexibleStandardStandardQueryParser_init();
  [qp setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:analyzer];
  for (jint i = 0; i < fields->size_; i++) {
    OrgApacheLuceneSearchQuery *q = JreRetainedLocalValue([qp parseWithNSString:IOSObjectArray_Get(queries, i) withNSString:IOSObjectArray_Get(fields, i)]);
    if (q != nil) {
      [bQuery addWithOrgApacheLuceneSearchQuery:q withOrgApacheLuceneSearchBooleanClause_Occur:IOSObjectArray_Get(nil_chk(flags), i)];
    }
  }
  return [bQuery build];
}

NSString *OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_escapeWithNSString_(NSString *s) {
  OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil_initialize();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < [((NSString *) nil_chk(s)) java_length]; i++) {
    jchar c = [s charAtWithInt:i];
    if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&' || c == '/') {
      [sb appendWithChar:'\\'];
    }
    [sb appendWithChar:c];
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleStandardQueryParserUtil)
