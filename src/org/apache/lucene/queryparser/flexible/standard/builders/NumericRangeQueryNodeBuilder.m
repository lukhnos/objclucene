//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/util/StringUtils.h"
#include "org/apache/lucene/queryparser/flexible/messages/MessageImpl.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode.h"
#include "org/apache/lucene/search/NumericRangeQuery.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneSearchNumericRangeQuery *)buildWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)queryNode {
  OrgApacheLuceneQueryparserFlexibleStandardNodesNumericRangeQueryNode *numericRangeNode = (OrgApacheLuceneQueryparserFlexibleStandardNodesNumericRangeQueryNode *) cast_chk(queryNode, [OrgApacheLuceneQueryparserFlexibleStandardNodesNumericRangeQueryNode class]);
  OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode *lowerNumericNode = JreRetainedLocalValue([((OrgApacheLuceneQueryparserFlexibleStandardNodesNumericRangeQueryNode *) nil_chk(numericRangeNode)) getLowerBound]);
  OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode *upperNumericNode = JreRetainedLocalValue([numericRangeNode getUpperBound]);
  NSNumber *lowerNumber = JreRetainedLocalValue([((OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode *) nil_chk(lowerNumericNode)) getValue]);
  NSNumber *upperNumber = JreRetainedLocalValue([((OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode *) nil_chk(upperNumericNode)) getValue]);
  OrgApacheLuceneQueryparserFlexibleStandardConfigNumericConfig *numericConfig = JreRetainedLocalValue([numericRangeNode getNumericConfig]);
  OrgApacheLuceneDocumentFieldType_NumericType *numberType = JreRetainedLocalValue([((OrgApacheLuceneQueryparserFlexibleStandardConfigNumericConfig *) nil_chk(numericConfig)) getType]);
  NSString *field = OrgApacheLuceneQueryparserFlexibleCoreUtilStringUtils_toStringWithId_([numericRangeNode getField]);
  jboolean minInclusive = [numericRangeNode isLowerInclusive];
  jboolean maxInclusive = [numericRangeNode isUpperInclusive];
  jint precisionStep = [numericConfig getPrecisionStep];
  switch ([numberType ordinal]) {
    case OrgApacheLuceneDocumentFieldType_NumericType_Enum_LONG:
    return OrgApacheLuceneSearchNumericRangeQuery_newLongRangeWithNSString_withInt_withJavaLangLong_withJavaLangLong_withBoolean_withBoolean_(field, precisionStep, (JavaLangLong *) cast_chk(lowerNumber, [JavaLangLong class]), (JavaLangLong *) cast_chk(upperNumber, [JavaLangLong class]), minInclusive, maxInclusive);
    case OrgApacheLuceneDocumentFieldType_NumericType_Enum_INT:
    return OrgApacheLuceneSearchNumericRangeQuery_newIntRangeWithNSString_withInt_withJavaLangInteger_withJavaLangInteger_withBoolean_withBoolean_(field, precisionStep, (JavaLangInteger *) cast_chk(lowerNumber, [JavaLangInteger class]), (JavaLangInteger *) cast_chk(upperNumber, [JavaLangInteger class]), minInclusive, maxInclusive);
    case OrgApacheLuceneDocumentFieldType_NumericType_Enum_FLOAT:
    return OrgApacheLuceneSearchNumericRangeQuery_newFloatRangeWithNSString_withInt_withJavaLangFloat_withJavaLangFloat_withBoolean_withBoolean_(field, precisionStep, (JavaLangFloat *) cast_chk(lowerNumber, [JavaLangFloat class]), (JavaLangFloat *) cast_chk(upperNumber, [JavaLangFloat class]), minInclusive, maxInclusive);
    case OrgApacheLuceneDocumentFieldType_NumericType_Enum_DOUBLE:
    return OrgApacheLuceneSearchNumericRangeQuery_newDoubleRangeWithNSString_withInt_withJavaLangDouble_withJavaLangDouble_withBoolean_withBoolean_(field, precisionStep, (JavaLangDouble *) cast_chk(lowerNumber, [JavaLangDouble class]), (JavaLangDouble *) cast_chk(upperNumber, [JavaLangDouble class]), minInclusive, maxInclusive);
    default:
    @throw create_OrgApacheLuceneQueryparserFlexibleCoreQueryNodeException_initWithOrgApacheLuceneQueryparserFlexibleMessagesMessage_(create_OrgApacheLuceneQueryparserFlexibleMessagesMessageImpl_initWithNSString_withNSObjectArray_(JreLoadStatic(OrgApacheLuceneQueryparserFlexibleCoreMessagesQueryParserMessages, UNSUPPORTED_NUMERIC_DATA_TYPE), [IOSObjectArray arrayWithObjects:(id[]){ numberType } count:1 type:NSObject_class_()]));
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchNumericRangeQuery;", 0x1, 0, 1, 2, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(buildWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "build", "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", "LOrgApacheLuceneQueryparserFlexibleCoreQueryNodeException;", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/NumericRangeQuery<+Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder = { "NumericRangeQueryNodeBuilder", "org.apache.lucene.queryparser.flexible.standard.builders", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder;
}

@end

void OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder_init(OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder *self) {
  NSObject_init(self);
}

OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder *new_OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder, init)
}

OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder *create_OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleStandardBuildersNumericRangeQueryNodeBuilder)
