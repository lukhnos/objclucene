//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/text/DateFormat.h"
#include "java/text/FieldPosition.h"
#include "java/text/NumberFormat.h"
#include "java/text/ParsePosition.h"
#include "java/util/Date.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/standard/config/NumberDateFormat must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat () {
 @public
  JavaTextDateFormat *dateFormat_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat, dateFormat_, JavaTextDateFormat *)

inline jlong OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat_get_serialVersionUID(void);
#define OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat_serialVersionUID 964823936071308283LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat, serialVersionUID, jlong)

@implementation OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat

- (instancetype)initWithJavaTextDateFormat:(JavaTextDateFormat *)dateFormat {
  OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat_initWithJavaTextDateFormat_(self, dateFormat);
  return self;
}

- (JavaLangStringBuffer *)formatWithDouble:(jdouble)number
                  withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
                 withJavaTextFieldPosition:(JavaTextFieldPosition *)pos {
  return [((JavaTextDateFormat *) nil_chk(dateFormat_)) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_(JreFpToLong(number)) withJavaLangStringBuffer:toAppendTo withJavaTextFieldPosition:pos];
}

- (JavaLangStringBuffer *)formatWithLong:(jlong)number
                withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
               withJavaTextFieldPosition:(JavaTextFieldPosition *)pos {
  return [((JavaTextDateFormat *) nil_chk(dateFormat_)) formatWithJavaUtilDate:create_JavaUtilDate_initWithLong_(number) withJavaLangStringBuffer:toAppendTo withJavaTextFieldPosition:pos];
}

- (NSNumber *)parseWithNSString:(NSString *)source
      withJavaTextParsePosition:(JavaTextParsePosition *)parsePosition {
  JavaUtilDate *date = [((JavaTextDateFormat *) nil_chk(dateFormat_)) parseWithNSString:source withJavaTextParsePosition:parsePosition];
  return (date == nil) ? nil : JavaLangLong_valueOfWithLong_([((JavaUtilDate *) nil_chk(date)) getTime]);
}

- (JavaLangStringBuffer *)formatWithId:(id)number
              withJavaLangStringBuffer:(JavaLangStringBuffer *)toAppendTo
             withJavaTextFieldPosition:(JavaTextFieldPosition *)pos {
  return [((JavaTextDateFormat *) nil_chk(dateFormat_)) formatWithId:number withJavaLangStringBuffer:toAppendTo withJavaTextFieldPosition:pos];
}

- (void)dealloc {
  RELEASE_(dateFormat_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuffer;", 0x1, 1, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaTextDateFormat:);
  methods[1].selector = @selector(formatWithDouble:withJavaLangStringBuffer:withJavaTextFieldPosition:);
  methods[2].selector = @selector(formatWithLong:withJavaLangStringBuffer:withJavaTextFieldPosition:);
  methods[3].selector = @selector(parseWithNSString:withJavaTextParsePosition:);
  methods[4].selector = @selector(formatWithId:withJavaLangStringBuffer:withJavaTextFieldPosition:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "dateFormat_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaTextDateFormat;", "format", "DLJavaLangStringBuffer;LJavaTextFieldPosition;", "JLJavaLangStringBuffer;LJavaTextFieldPosition;", "parse", "LNSString;LJavaTextParsePosition;", "LNSObject;LJavaLangStringBuffer;LJavaTextFieldPosition;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat = { "NumberDateFormat", "org.apache.lucene.queryparser.flexible.standard.config", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat;
}

@end

void OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat_initWithJavaTextDateFormat_(OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat *self, JavaTextDateFormat *dateFormat) {
  JavaTextNumberFormat_init(self);
  JreStrongAssign(&self->dateFormat_, dateFormat);
}

OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat *new_OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat_initWithJavaTextDateFormat_(JavaTextDateFormat *dateFormat) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat, initWithJavaTextDateFormat_, dateFormat)
}

OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat *create_OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat_initWithJavaTextDateFormat_(JavaTextDateFormat *dateFormat) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat, initWithJavaTextDateFormat_, dateFormat)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleStandardConfigNumberDateFormat)
