//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/queryparser/flexible/core/config/ConfigurationKey.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BooleanQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/GroupQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/NoTokenFoundQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QuotedFieldQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TokenizedPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorImpl.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/RegexpQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  jboolean positionIncrementsEnabled_;
  OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_Operator *defaultOperator_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor, defaultOperator_, OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_Operator *)

@implementation OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)processWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)queryTree {
  OrgApacheLuceneAnalysisAnalyzer *analyzer = JreRetainedLocalValue([((OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *) nil_chk([self getQueryConfigHandler])) getWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:JreLoadStatic(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_ConfigurationKeys, ANALYZER)]);
  if (analyzer != nil) {
    JreStrongAssign(&self->analyzer_, analyzer);
    self->positionIncrementsEnabled_ = false;
    JavaLangBoolean *positionIncrementsEnabled = JreRetainedLocalValue([((OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *) nil_chk([self getQueryConfigHandler])) getWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:JreLoadStatic(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_ConfigurationKeys, ENABLE_POSITION_INCREMENTS)]);
    OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_Operator *defaultOperator = JreRetainedLocalValue([((OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *) nil_chk([self getQueryConfigHandler])) getWithOrgApacheLuceneQueryparserFlexibleCoreConfigConfigurationKey:JreLoadStatic(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_ConfigurationKeys, DEFAULT_OPERATOR)]);
    JreStrongAssign(&self->defaultOperator_, defaultOperator != nil ? defaultOperator : JreLoadEnum(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_Operator, OR));
    if (positionIncrementsEnabled != nil) {
      self->positionIncrementsEnabled_ = [positionIncrementsEnabled booleanValue];
    }
    if (self->analyzer_ != nil) {
      return [super processWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:queryTree];
    }
  }
  return queryTree;
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)postProcessNodeWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)node {
  if ([OrgApacheLuceneQueryparserFlexibleCoreNodesTextableQueryNode_class_() isInstance:node] && !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleStandardNodesWildcardQueryNode class]]) && !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesFuzzyQueryNode class]]) && !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleStandardNodesRegexpQueryNode class]]) && !([OrgApacheLuceneQueryparserFlexibleCoreNodesRangeQueryNode_class_() isInstance:[((id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>) nil_chk(node)) getParent]])) {
    OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *fieldNode = ((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) cast_chk(node, [OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode class]));
    NSString *text = JreRetainedLocalValue([((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(fieldNode)) getTextAsString]);
    NSString *field = JreRetainedLocalValue([fieldNode getFieldAsString]);
    OrgApacheLuceneAnalysisCachingTokenFilter *buffer = nil;
    id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt = nil;
    jint numTokens = 0;
    jint positionCount = 0;
    jboolean severalTokensAtSamePosition = false;
    @try {
      @try {
        OrgApacheLuceneAnalysisTokenStream *source = [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(self->analyzer_)) tokenStreamWithNSString:field withNSString:text];
        JavaLangThrowable *__primaryException1 = nil;
        @try {
          buffer = create_OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(source);
          [buffer reset];
          if ([buffer hasAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]) {
            posIncrAtt = ((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) [buffer getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
          }
          @try {
            while ([buffer incrementToken]) {
              numTokens++;
              jint positionIncrement = (posIncrAtt != nil) ? [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt)) getPositionIncrement] : 1;
              if (positionIncrement != 0) {
                positionCount += positionIncrement;
              }
              else {
                severalTokensAtSamePosition = true;
              }
            }
          }
          @catch (JavaIoIOException *e) {
          }
          [buffer reset];
        }
        @catch (JavaLangThrowable *e) {
          __primaryException1 = e;
          @throw e;
        }
        @finally {
          if (source != nil) {
            if (__primaryException1 != nil) {
              @try {
                [source close];
              }
              @catch (JavaLangThrowable *e) {
                [__primaryException1 addSuppressedWithJavaLangThrowable:e];
              }
            }
            else {
              [source close];
            }
          }
        }
      }
      @catch (JavaIoIOException *e) {
        @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
      }
      if (![((OrgApacheLuceneAnalysisCachingTokenFilter *) nil_chk(buffer)) hasAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]) {
        return create_OrgApacheLuceneQueryparserFlexibleCoreNodesNoTokenFoundQueryNode_init();
      }
      id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt = JreRetainedLocalValue([buffer getAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
      if (numTokens == 0) {
        return create_OrgApacheLuceneQueryparserFlexibleCoreNodesNoTokenFoundQueryNode_init();
      }
      else if (numTokens == 1) {
        NSString *term = nil;
        @try {
          jboolean hasNext;
          hasNext = [buffer incrementToken];
          JreAssert(hasNext == true, @"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:179 condition failed: assert hasNext == true;");
          term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
        }
        @catch (JavaIoIOException *e) {
        }
        [fieldNode setTextWithJavaLangCharSequence:term];
        return fieldNode;
      }
      else if (severalTokensAtSamePosition || !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesQuotedFieldQueryNode class]])) {
        if (positionCount == 1 || !([node isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesQuotedFieldQueryNode class]])) {
          if (positionCount == 1) {
            JavaUtilLinkedList *children = create_JavaUtilLinkedList_init();
            for (jint i = 0; i < numTokens; i++) {
              NSString *term = nil;
              @try {
                jboolean hasNext = [buffer incrementToken];
                JreAssert(hasNext == true, @"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:202 condition failed: assert hasNext == true;");
                term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
              }
              @catch (JavaIoIOException *e) {
              }
              [children addWithId:create_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1)];
            }
            return create_OrgApacheLuceneQueryparserFlexibleCoreNodesGroupQueryNode_initWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(create_OrgApacheLuceneQueryparserFlexibleStandardNodesStandardBooleanQueryNode_initWithJavaUtilList_withBoolean_(children, positionCount == 1));
          }
          else {
            id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> q = create_OrgApacheLuceneQueryparserFlexibleStandardNodesStandardBooleanQueryNode_initWithJavaUtilList_withBoolean_(JavaUtilCollections_emptyList(), false);
            id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> currentQuery = nil;
            for (jint i = 0; i < numTokens; i++) {
              NSString *term = nil;
              @try {
                jboolean hasNext = [buffer incrementToken];
                JreAssert(hasNext == true, @"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:222 condition failed: assert hasNext == true;");
                term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
              }
              @catch (JavaIoIOException *e) {
              }
              if (posIncrAtt != nil && [posIncrAtt getPositionIncrement] == 0) {
                if (!([currentQuery isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode class]])) {
                  id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode> t = JreRetainedLocalValue(currentQuery);
                  currentQuery = create_OrgApacheLuceneQueryparserFlexibleStandardNodesStandardBooleanQueryNode_initWithJavaUtilList_withBoolean_(JavaUtilCollections_emptyList(), true);
                  [((OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode *) cast_chk(currentQuery, [OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode class])) addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:t];
                }
                [((OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode *) nil_chk(((OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode *) cast_chk(currentQuery, [OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode class])))) addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:create_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1)];
              }
              else {
                if (currentQuery != nil) {
                  if (self->defaultOperator_ == JreLoadEnum(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_Operator, OR)) {
                    [q addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:currentQuery];
                  }
                  else {
                    [q addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:create_OrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_initWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_withOrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_Modifier_(currentQuery, JreLoadEnum(OrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_Modifier, MOD_REQ))];
                  }
                }
                currentQuery = create_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1);
              }
            }
            if (self->defaultOperator_ == JreLoadEnum(OrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_Operator, OR)) {
              [q addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:currentQuery];
            }
            else {
              [q addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:create_OrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_initWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_withOrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_Modifier_(currentQuery, JreLoadEnum(OrgApacheLuceneQueryparserFlexibleCoreNodesModifierQueryNode_Modifier, MOD_REQ))];
            }
            if ([q isKindOfClass:[OrgApacheLuceneQueryparserFlexibleCoreNodesBooleanQueryNode class]]) {
              q = create_OrgApacheLuceneQueryparserFlexibleCoreNodesGroupQueryNode_initWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode_(q);
            }
            return q;
          }
        }
        else {
          OrgApacheLuceneQueryparserFlexibleStandardNodesMultiPhraseQueryNode *mpq = create_OrgApacheLuceneQueryparserFlexibleStandardNodesMultiPhraseQueryNode_init();
          id<JavaUtilList> multiTerms = create_JavaUtilArrayList_init();
          jint position = -1;
          jint i = 0;
          jint termGroupCount = 0;
          for (; i < numTokens; i++) {
            NSString *term = nil;
            jint positionIncrement = 1;
            @try {
              jboolean hasNext = [buffer incrementToken];
              JreAssert(hasNext == true, @"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:269 condition failed: assert hasNext == true;");
              term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
              if (posIncrAtt != nil) {
                positionIncrement = [posIncrAtt getPositionIncrement];
              }
            }
            @catch (JavaIoIOException *e) {
            }
            if (positionIncrement > 0 && [multiTerms size] > 0) {
              for (OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode * __strong termNode in multiTerms) {
                if (self->positionIncrementsEnabled_) {
                  [((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(termNode)) setPositionIncrementWithInt:position];
                }
                else {
                  [((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(termNode)) setPositionIncrementWithInt:termGroupCount];
                }
                [mpq addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:termNode];
              }
              termGroupCount++;
              [multiTerms clear];
            }
            position += positionIncrement;
            [multiTerms addWithId:create_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1)];
          }
          for (OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode * __strong termNode in multiTerms) {
            if (self->positionIncrementsEnabled_) {
              [((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(termNode)) setPositionIncrementWithInt:position];
            }
            else {
              [((OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *) nil_chk(termNode)) setPositionIncrementWithInt:termGroupCount];
            }
            [mpq addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:termNode];
          }
          return mpq;
        }
      }
      else {
        OrgApacheLuceneQueryparserFlexibleCoreNodesTokenizedPhraseQueryNode *pq = create_OrgApacheLuceneQueryparserFlexibleCoreNodesTokenizedPhraseQueryNode_init();
        jint position = -1;
        for (jint i = 0; i < numTokens; i++) {
          NSString *term = nil;
          jint positionIncrement = 1;
          @try {
            jboolean hasNext = [buffer incrementToken];
            JreAssert(hasNext == true, @"org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java:335 condition failed: assert hasNext == true;");
            term = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
            if (posIncrAtt != nil) {
              positionIncrement = [posIncrAtt getPositionIncrement];
            }
          }
          @catch (JavaIoIOException *e) {
          }
          OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode *newFieldNode = create_OrgApacheLuceneQueryparserFlexibleCoreNodesFieldQueryNode_initWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withInt_(field, term, -1, -1);
          if (self->positionIncrementsEnabled_) {
            position += positionIncrement;
            [newFieldNode setPositionIncrementWithInt:position];
          }
          else {
            [newFieldNode setPositionIncrementWithInt:i];
          }
          [pq addWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:newFieldNode];
        }
        return pq;
      }
    }
    @finally {
      if (buffer != nil) {
        @try {
          [buffer close];
        }
        @catch (JavaIoIOException *e) {
        }
      }
    }
  }
  return node;
}

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)preProcessNodeWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)node {
  return node;
}

- (id<JavaUtilList>)setChildrenOrderWithJavaUtilList:(id<JavaUtilList>)children {
  return children;
}

- (void)dealloc {
  RELEASE_(analyzer_);
  RELEASE_(defaultOperator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", 0x4, 3, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", 0x4, 4, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x4, 5, 6, 2, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:);
  methods[2].selector = @selector(postProcessNodeWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:);
  methods[3].selector = @selector(preProcessNodeWithOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode:);
  methods[4].selector = @selector(setChildrenOrderWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "positionIncrementsEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultOperator_", "LOrgApacheLuceneQueryparserFlexibleStandardConfigStandardQueryConfigHandler_Operator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "process", "LOrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;", "LOrgApacheLuceneQueryparserFlexibleCoreQueryNodeException;", "postProcessNode", "preProcessNode", "setChildrenOrder", "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;>;)Ljava/util/List<Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor = { "AnalyzerQueryNodeProcessor", "org.apache.lucene.queryparser.flexible.standard.processors", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor;
}

@end

void OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor_init(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor *self) {
  OrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessorImpl_init(self);
}

OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor *new_OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor, init)
}

OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor *create_OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleStandardProcessorsAnalyzerQueryNodeProcessor)
