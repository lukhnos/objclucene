//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.java
//

#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/text/NumberFormat.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode () {
 @public
  JavaTextNumberFormat *numberFormat_;
  id<JavaLangCharSequence> field_;
  NSNumber *value_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode, numberFormat_, JavaTextNumberFormat *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode, field_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode, value_, NSNumber *)

@implementation OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode

- (instancetype)initWithJavaLangCharSequence:(id<JavaLangCharSequence>)field
                                withNSNumber:(NSNumber *)value
                    withJavaTextNumberFormat:(JavaTextNumberFormat *)numberFormat {
  OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode_initWithJavaLangCharSequence_withNSNumber_withJavaTextNumberFormat_(self, field, value, numberFormat);
  return self;
}

- (id<JavaLangCharSequence>)getField {
  return self->field_;
}

- (void)setFieldWithJavaLangCharSequence:(id<JavaLangCharSequence>)fieldName {
  JreStrongAssign(&self->field_, fieldName);
}

- (id<JavaLangCharSequence>)getTermEscapedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:(id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>)escaper {
  return [((id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>) nil_chk(escaper)) escapeWithJavaLangCharSequence:[((JavaTextNumberFormat *) nil_chk(numberFormat_)) formatWithId:self->value_] withJavaUtilLocale:JreLoadStatic(JavaUtilLocale, ROOT) withOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type:JreLoadEnum(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type, NORMAL)];
}

- (id<JavaLangCharSequence>)toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:(id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>)escapeSyntaxParser {
  if ([self isDefaultFieldWithJavaLangCharSequence:self->field_]) {
    return [self getTermEscapedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:escapeSyntaxParser];
  }
  else {
    return JreStrcat("@C@", self->field_, ':', [self getTermEscapedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:escapeSyntaxParser]);
  }
}

- (void)setNumberFormatWithJavaTextNumberFormat:(JavaTextNumberFormat *)format {
  JreStrongAssign(&self->numberFormat_, format);
}

- (JavaTextNumberFormat *)getNumberFormat {
  return self->numberFormat_;
}

- (NSNumber *)getValue {
  return value_;
}

- (void)setValueWithId:(NSNumber *)value {
  JreStrongAssign(&self->value_, value);
}

- (NSString *)description {
  return JreStrcat("$@$$$", @"<numeric field='", self->field_, @"' number='", [((JavaTextNumberFormat *) nil_chk(numberFormat_)) formatWithId:value_], @"'/>");
}

- (void)dealloc {
  RELEASE_(numberFormat_);
  RELEASE_(field_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaTextNumberFormat;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangCharSequence:withNSNumber:withJavaTextNumberFormat:);
  methods[1].selector = @selector(getField);
  methods[2].selector = @selector(setFieldWithJavaLangCharSequence:);
  methods[3].selector = @selector(getTermEscapedWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:);
  methods[4].selector = @selector(toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:);
  methods[5].selector = @selector(setNumberFormatWithJavaTextNumberFormat:);
  methods[6].selector = @selector(getNumberFormat);
  methods[7].selector = @selector(getValue);
  methods[8].selector = @selector(setValueWithId:);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "numberFormat_", "LJavaTextNumberFormat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "field_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "value_", "LNSNumber;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangCharSequence;LNSNumber;LJavaTextNumberFormat;", "setField", "LJavaLangCharSequence;", "getTermEscaped", "LOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax;", "toQueryString", "setNumberFormat", "LJavaTextNumberFormat;", "setValue", "LNSNumber;", "toString", "Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode = { "NumericQueryNode", "org.apache.lucene.queryparser.flexible.standard.nodes", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, 11, -1 };
  return &_OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode;
}

@end

void OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode_initWithJavaLangCharSequence_withNSNumber_withJavaTextNumberFormat_(OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode *self, id<JavaLangCharSequence> field, NSNumber *value, JavaTextNumberFormat *numberFormat) {
  OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl_init(self);
  [self setNumberFormatWithJavaTextNumberFormat:numberFormat];
  [self setFieldWithJavaLangCharSequence:field];
  [self setValueWithId:value];
}

OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode *new_OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode_initWithJavaLangCharSequence_withNSNumber_withJavaTextNumberFormat_(id<JavaLangCharSequence> field, NSNumber *value, JavaTextNumberFormat *numberFormat) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode, initWithJavaLangCharSequence_withNSNumber_withJavaTextNumberFormat_, field, value, numberFormat)
}

OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode *create_OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode_initWithJavaLangCharSequence_withNSNumber_withJavaTextNumberFormat_(id<JavaLangCharSequence> field, NSNumber *value, JavaTextNumberFormat *numberFormat) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode, initWithJavaLangCharSequence_withNSNumber_withJavaTextNumberFormat_, field, value, numberFormat)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueryparserFlexibleStandardNodesNumericQueryNode)
