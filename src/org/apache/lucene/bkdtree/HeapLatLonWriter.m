//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/bkdtree/HeapLatLonWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "org/apache/lucene/bkdtree/HeapLatLonReader.h"
#include "org/apache/lucene/bkdtree/HeapLatLonWriter.h"
#include "org/apache/lucene/bkdtree/LatLonReader.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/bkdtree/HeapLatLonWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneBkdtreeHeapLatLonWriter () {
 @public
  jint nextWrite_;
}

@end

@implementation OrgApacheLuceneBkdtreeHeapLatLonWriter

- (instancetype)initPackagePrivateWithInt:(jint)count {
  OrgApacheLuceneBkdtreeHeapLatLonWriter_initPackagePrivateWithInt_(self, count);
  return self;
}

- (void)appendWithInt:(jint)latEnc
              withInt:(jint)lonEnc
             withLong:(jlong)ord
              withInt:(jint)docID {
  *IOSIntArray_GetRef(nil_chk(latEncs_), nextWrite_) = latEnc;
  *IOSIntArray_GetRef(nil_chk(lonEncs_), nextWrite_) = lonEnc;
  *IOSLongArray_GetRef(nil_chk(ords_), nextWrite_) = ord;
  *IOSIntArray_GetRef(nil_chk(docIDs_), nextWrite_) = docID;
  nextWrite_++;
}

- (id<OrgApacheLuceneBkdtreeLatLonReader>)getReaderWithLong:(jlong)start {
  return create_OrgApacheLuceneBkdtreeHeapLatLonReader_initPackagePrivateWithIntArray_withIntArray_withLongArray_withIntArray_withInt_withInt_(latEncs_, lonEncs_, ords_, docIDs_, (jint) start, ((IOSIntArray *) nil_chk(latEncs_))->size_);
}

- (void)close {
  if (nextWrite_ != ((IOSIntArray *) nil_chk(latEncs_))->size_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$I", @"only wrote ", nextWrite_, @" values, but expected ", latEncs_->size_));
  }
}

- (void)destroy {
}

- (NSString *)description {
  return JreStrcat("$IC", @"HeapLatLonWriter(count=", ((IOSIntArray *) nil_chk(latEncs_))->size_, ')');
}

- (void)dealloc {
  RELEASE_(latEncs_);
  RELEASE_(lonEncs_);
  RELEASE_(docIDs_);
  RELEASE_(ords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneBkdtreeLatLonReader;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:);
  methods[1].selector = @selector(appendWithInt:withInt:withLong:withInt:);
  methods[2].selector = @selector(getReaderWithLong:);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(destroy);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "latEncs_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lonEncs_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docIDs_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "ords_", "[J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nextWrite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "append", "IIJI", "getReader", "J", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneBkdtreeHeapLatLonWriter = { "HeapLatLonWriter", "org.apache.lucene.bkdtree", ptrTable, methods, fields, 7, 0x10, 6, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneBkdtreeHeapLatLonWriter;
}

@end

void OrgApacheLuceneBkdtreeHeapLatLonWriter_initPackagePrivateWithInt_(OrgApacheLuceneBkdtreeHeapLatLonWriter *self, jint count) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->latEncs_, [IOSIntArray newArrayWithLength:count]);
  JreStrongAssignAndConsume(&self->lonEncs_, [IOSIntArray newArrayWithLength:count]);
  JreStrongAssignAndConsume(&self->docIDs_, [IOSIntArray newArrayWithLength:count]);
  JreStrongAssignAndConsume(&self->ords_, [IOSLongArray newArrayWithLength:count]);
}

OrgApacheLuceneBkdtreeHeapLatLonWriter *new_OrgApacheLuceneBkdtreeHeapLatLonWriter_initPackagePrivateWithInt_(jint count) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneBkdtreeHeapLatLonWriter, initPackagePrivateWithInt_, count)
}

OrgApacheLuceneBkdtreeHeapLatLonWriter *create_OrgApacheLuceneBkdtreeHeapLatLonWriter_initPackagePrivateWithInt_(jint count) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneBkdtreeHeapLatLonWriter, initPackagePrivateWithInt_, count)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneBkdtreeHeapLatLonWriter)
