//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/bkdtree/GrowingHeapLatLonWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/bkdtree/GrowingHeapLatLonWriter.h"
#include "org/apache/lucene/bkdtree/HeapLatLonReader.h"
#include "org/apache/lucene/bkdtree/LatLonReader.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/bkdtree/GrowingHeapLatLonWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter () {
 @public
  jint nextWrite_;
}

- (IOSIntArray *)growExactWithIntArray:(IOSIntArray *)arr
                               withInt:(jint)size;

- (IOSLongArray *)growExactWithLongArray:(IOSLongArray *)arr
                                 withInt:(jint)size;

@end

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithIntArray_withInt_(OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter *self, IOSIntArray *arr, jint size);

__attribute__((unused)) static IOSLongArray *OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithLongArray_withInt_(OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter *self, IOSLongArray *arr, jint size);

@implementation OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter

- (instancetype)initPackagePrivateWithInt:(jint)maxSize {
  OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_initPackagePrivateWithInt_(self, maxSize);
  return self;
}

- (IOSIntArray *)growExactWithIntArray:(IOSIntArray *)arr
                               withInt:(jint)size {
  return OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithIntArray_withInt_(self, arr, size);
}

- (IOSLongArray *)growExactWithLongArray:(IOSLongArray *)arr
                                 withInt:(jint)size {
  return OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithLongArray_withInt_(self, arr, size);
}

- (void)appendWithInt:(jint)latEnc
              withInt:(jint)lonEnc
             withLong:(jlong)ord
              withInt:(jint)docID {
  JreAssert(ord == nextWrite_, @"org/apache/lucene/bkdtree/GrowingHeapLatLonWriter.java:55 condition failed: assert ord == nextWrite;");
  if (((IOSIntArray *) nil_chk(latEncs_))->size_ == nextWrite_) {
    jint nextSize = JavaLangMath_minWithInt_withInt_(maxSize_, OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(nextWrite_ + 1, OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT));
    JreAssert(nextSize > nextWrite_, JreStrcat("$I$I", @"nextSize=", nextSize, @" vs nextWrite=", nextWrite_));
    JreStrongAssign(&latEncs_, OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithIntArray_withInt_(self, latEncs_, nextSize));
    JreStrongAssign(&lonEncs_, OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithIntArray_withInt_(self, lonEncs_, nextSize));
    JreStrongAssign(&ords_, OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithLongArray_withInt_(self, ords_, nextSize));
    JreStrongAssign(&docIDs_, OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithIntArray_withInt_(self, docIDs_, nextSize));
  }
  *IOSIntArray_GetRef(nil_chk(latEncs_), nextWrite_) = latEnc;
  *IOSIntArray_GetRef(nil_chk(lonEncs_), nextWrite_) = lonEnc;
  *IOSLongArray_GetRef(nil_chk(ords_), nextWrite_) = ord;
  *IOSIntArray_GetRef(nil_chk(docIDs_), nextWrite_) = docID;
  nextWrite_++;
}

- (id<OrgApacheLuceneBkdtreeLatLonReader>)getReaderWithLong:(jlong)start {
  return create_OrgApacheLuceneBkdtreeHeapLatLonReader_initPackagePrivateWithIntArray_withIntArray_withLongArray_withIntArray_withInt_withInt_(latEncs_, lonEncs_, ords_, docIDs_, (jint) start, nextWrite_);
}

- (void)close {
}

- (void)destroy {
}

- (NSString *)description {
  return JreStrcat("$I$IC", @"GrowingHeapLatLonWriter(count=", nextWrite_, @" alloc=", ((IOSIntArray *) nil_chk(latEncs_))->size_, ')');
}

- (void)dealloc {
  RELEASE_(latEncs_);
  RELEASE_(lonEncs_);
  RELEASE_(docIDs_);
  RELEASE_(ords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "[J", 0x2, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneBkdtreeLatLonReader;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:);
  methods[1].selector = @selector(growExactWithIntArray:withInt:);
  methods[2].selector = @selector(growExactWithLongArray:withInt:);
  methods[3].selector = @selector(appendWithInt:withInt:withLong:withInt:);
  methods[4].selector = @selector(getReaderWithLong:);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(destroy);
  methods[7].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "latEncs_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lonEncs_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docIDs_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ords_", "[J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextWrite_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "growExact", "[II", "[JI", "append", "IIJI", "getReader", "J", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter = { "GrowingHeapLatLonWriter", "org.apache.lucene.bkdtree", ptrTable, methods, fields, 7, 0x10, 8, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter;
}

@end

void OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_initPackagePrivateWithInt_(OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter *self, jint maxSize) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->latEncs_, [IOSIntArray newArrayWithLength:16]);
  JreStrongAssignAndConsume(&self->lonEncs_, [IOSIntArray newArrayWithLength:16]);
  JreStrongAssignAndConsume(&self->docIDs_, [IOSIntArray newArrayWithLength:16]);
  JreStrongAssignAndConsume(&self->ords_, [IOSLongArray newArrayWithLength:16]);
  self->maxSize_ = maxSize;
}

OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter *new_OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_initPackagePrivateWithInt_(jint maxSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter, initPackagePrivateWithInt_, maxSize)
}

OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter *create_OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_initPackagePrivateWithInt_(jint maxSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter, initPackagePrivateWithInt_, maxSize)
}

IOSIntArray *OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithIntArray_withInt_(OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter *self, IOSIntArray *arr, jint size) {
  JreAssert(size > ((IOSIntArray *) nil_chk(arr))->size_, @"org/apache/lucene/bkdtree/GrowingHeapLatLonWriter.java:40 condition failed: assert size > arr.length;");
  IOSIntArray *newArr = [IOSIntArray arrayWithLength:size];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, newArr, 0, arr->size_);
  return newArr;
}

IOSLongArray *OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter_growExactWithLongArray_withInt_(OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter *self, IOSLongArray *arr, jint size) {
  JreAssert(size > ((IOSLongArray *) nil_chk(arr))->size_, @"org/apache/lucene/bkdtree/GrowingHeapLatLonWriter.java:47 condition failed: assert size > arr.length;");
  IOSLongArray *newArr = [IOSLongArray arrayWithLength:size];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, newArr, 0, arr->size_);
  return newArr;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneBkdtreeGrowingHeapLatLonWriter)
