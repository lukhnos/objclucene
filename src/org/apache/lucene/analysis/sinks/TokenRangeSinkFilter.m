//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter.h"
#include "org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.h"
#include "org/apache/lucene/util/AttributeSource.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/sinks/TokenRangeSinkFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter () {
 @public
  jint lower_;
  jint upper_;
  jint count_;
}

@end

@implementation OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter

- (instancetype)initWithInt:(jint)lower
                    withInt:(jint)upper {
  OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(self, lower, upper);
  return self;
}

- (jboolean)acceptWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source {
  @try {
    if (count_ >= lower_ && count_ < upper_) {
      return true;
    }
    return false;
  }
  @finally {
    count_++;
  }
}

- (void)reset {
  count_ = 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(acceptWithOrgApacheLuceneUtilAttributeSource:);
  methods[2].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lower_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "upper_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "accept", "LOrgApacheLuceneUtilAttributeSource;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter = { "TokenRangeSinkFilter", "org.apache.lucene.analysis.sinks", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter;
}

@end

void OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter *self, jint lower, jint upper) {
  OrgApacheLuceneAnalysisSinksTeeSinkTokenFilter_SinkFilter_init(self);
  if (lower < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"lower must be greater than zero");
  }
  if (lower > upper) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"lower must not be greater than upper");
  }
  self->lower_ = lower;
  self->upper_ = upper;
}

OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter *new_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(jint lower, jint upper) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter, initWithInt_withInt_, lower, upper)
}

OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter *create_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(jint lower, jint upper) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter, initWithInt_withInt_, lower, upper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter)
