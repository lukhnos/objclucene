//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter.h"
#include "org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/util/AttributeSource.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/sinks/TokenTypeSinkFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter () {
 @public
  NSString *typeToMatch_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAtt_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter, typeToMatch_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter, typeAtt_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)

@implementation OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter

- (instancetype)initWithNSString:(NSString *)typeToMatch {
  OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter_initWithNSString_(self, typeToMatch);
  return self;
}

- (jboolean)acceptWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source {
  if (typeAtt_ == nil) {
    JreStrongAssign(&typeAtt_, [((OrgApacheLuceneUtilAttributeSource *) nil_chk(source)) addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  }
  return ([((NSString *) nil_chk(typeToMatch_)) isEqual:[((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) type]]);
}

- (void)dealloc {
  RELEASE_(typeToMatch_);
  RELEASE_(typeAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(acceptWithOrgApacheLuceneUtilAttributeSource:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "typeToMatch_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "typeAtt_", "LOrgApacheLuceneAnalysisTokenattributesTypeAttribute;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "accept", "LOrgApacheLuceneUtilAttributeSource;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter = { "TokenTypeSinkFilter", "org.apache.lucene.analysis.sinks", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter;
}

@end

void OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter_initWithNSString_(OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter *self, NSString *typeToMatch) {
  OrgApacheLuceneAnalysisSinksTeeSinkTokenFilter_SinkFilter_init(self);
  JreStrongAssign(&self->typeToMatch_, typeToMatch);
}

OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter *new_OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter_initWithNSString_(NSString *typeToMatch) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter, initWithNSString_, typeToMatch)
}

OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter *create_OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter_initWithNSString_(NSString *typeToMatch) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter, initWithNSString_, typeToMatch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSinksTokenTypeSinkFilter)
