//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/AttributeReflector.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl () {
 @public
  jint startOffset_;
  jint endOffset_;
  NSString *type_;
  jint positionIncrement_;
  jint positionLength_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl, type_, NSString *)

@implementation OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setPositionIncrementWithInt:(jint)positionIncrement {
  if (positionIncrement < 0) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Increment must be zero or greater: ", positionIncrement));
  self->positionIncrement_ = positionIncrement;
}

- (jint)getPositionIncrement {
  return positionIncrement_;
}

- (void)setPositionLengthWithInt:(jint)positionLength {
  self->positionLength_ = positionLength;
}

- (jint)getPositionLength {
  return positionLength_;
}

- (jint)startOffset {
  return startOffset_;
}

- (jint)endOffset {
  return endOffset_;
}

- (void)setOffsetWithInt:(jint)startOffset
                 withInt:(jint)endOffset {
  if (startOffset < 0 || endOffset < startOffset) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"startOffset must be non-negative, and endOffset must be >= startOffset, startOffset=", startOffset, @",endOffset=", endOffset));
  }
  self->startOffset_ = startOffset;
  self->endOffset_ = endOffset;
}

- (NSString *)type {
  return type_;
}

- (void)setTypeWithNSString:(NSString *)type {
  JreStrongAssign(&self->type_, type);
}

- (void)clear {
  [super clear];
  positionIncrement_ = positionLength_ = 1;
  startOffset_ = endOffset_ = 0;
  JreStrongAssign(&type_, OrgApacheLuceneAnalysisTokenattributesTypeAttribute_DEFAULT_TYPE);
}

- (OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *)java_clone {
  return (OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *) cast_chk([super java_clone], [OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl class]);
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(obj, self)) return true;
  if ([obj isKindOfClass:[OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl class]]) {
    OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *other = (OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *) obj;
    return (startOffset_ == ((OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *) nil_chk(other))->startOffset_ && endOffset_ == other->endOffset_ && positionIncrement_ == other->positionIncrement_ && positionLength_ == other->positionLength_ && (type_ == nil ? other->type_ == nil : [type_ isEqual:other->type_]) && [super isEqual:obj]);
  }
  else return false;
}

- (NSUInteger)hash {
  jint code = ((jint) [super hash]);
  code = code * 31 + startOffset_;
  code = code * 31 + endOffset_;
  code = code * 31 + positionIncrement_;
  code = code * 31 + positionLength_;
  if (type_ != nil) code = code * 31 + ((jint) [type_ hash]);
  return code;
}

- (void)copyToWithOrgApacheLuceneUtilAttributeImpl:(OrgApacheLuceneUtilAttributeImpl *)target {
  if ([target isKindOfClass:[OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl class]]) {
    OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *to = (OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *) target;
    [((OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *) nil_chk(to)) copyBufferWithCharArray:[self buffer] withInt:0 withInt:[self java_length]];
    to->positionIncrement_ = positionIncrement_;
    to->positionLength_ = positionLength_;
    to->startOffset_ = startOffset_;
    to->endOffset_ = endOffset_;
    JreStrongAssign(&to->type_, type_);
  }
  else {
    [super copyToWithOrgApacheLuceneUtilAttributeImpl:target];
    [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) cast_check(target, OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_())))) setOffsetWithInt:startOffset_ withInt:endOffset_];
    [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) cast_check(target, OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_())))) setPositionIncrementWithInt:positionIncrement_];
    [((id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute>) nil_chk(((id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute>) cast_check(target, OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute_class_())))) setPositionLengthWithInt:positionLength_];
    [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) cast_check(target, OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_())))) setTypeWithNSString:type_];
  }
}

- (void)reflectWithWithOrgApacheLuceneUtilAttributeReflector:(id<OrgApacheLuceneUtilAttributeReflector>)reflector {
  [super reflectWithWithOrgApacheLuceneUtilAttributeReflector:reflector];
  [((id<OrgApacheLuceneUtilAttributeReflector>) nil_chk(reflector)) reflectWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_() withNSString:@"startOffset" withId:JavaLangInteger_valueOfWithInt_(startOffset_)];
  [reflector reflectWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_() withNSString:@"endOffset" withId:JavaLangInteger_valueOfWithInt_(endOffset_)];
  [reflector reflectWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_() withNSString:@"positionIncrement" withId:JavaLangInteger_valueOfWithInt_(positionIncrement_)];
  [reflector reflectWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute_class_() withNSString:@"positionLength" withId:JavaLangInteger_valueOfWithInt_(positionLength_)];
  [reflector reflectWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_() withNSString:@"type" withId:type_];
}

- (void)dealloc {
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setPositionIncrementWithInt:);
  methods[2].selector = @selector(getPositionIncrement);
  methods[3].selector = @selector(setPositionLengthWithInt:);
  methods[4].selector = @selector(getPositionLength);
  methods[5].selector = @selector(startOffset);
  methods[6].selector = @selector(endOffset);
  methods[7].selector = @selector(setOffsetWithInt:withInt:);
  methods[8].selector = @selector(type);
  methods[9].selector = @selector(setTypeWithNSString:);
  methods[10].selector = @selector(clear);
  methods[11].selector = @selector(java_clone);
  methods[12].selector = @selector(isEqual:);
  methods[13].selector = @selector(hash);
  methods[14].selector = @selector(copyToWithOrgApacheLuceneUtilAttributeImpl:);
  methods[15].selector = @selector(reflectWithWithOrgApacheLuceneUtilAttributeReflector:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "startOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "positionIncrement_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "positionLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setPositionIncrement", "I", "setPositionLength", "setOffset", "II", "setType", "LNSString;", "clone", "equals", "LNSObject;", "hashCode", "copyTo", "LOrgApacheLuceneUtilAttributeImpl;", "reflectWith", "LOrgApacheLuceneUtilAttributeReflector;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl = { "PackedTokenAttributeImpl", "org.apache.lucene.analysis.tokenattributes", ptrTable, methods, fields, 7, 0x1, 16, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl;
}

@end

void OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl_init(OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *self) {
  OrgApacheLuceneAnalysisTokenattributesCharTermAttributeImpl_init(self);
  JreStrongAssign(&self->type_, OrgApacheLuceneAnalysisTokenattributesTypeAttribute_DEFAULT_TYPE);
  self->positionIncrement_ = 1;
  self->positionLength_ = 1;
}

OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *new_OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl, init)
}

OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl *create_OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisTokenattributesPackedTokenAttributeImpl)
