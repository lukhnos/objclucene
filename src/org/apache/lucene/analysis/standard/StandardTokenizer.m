//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/standard/StandardAnalyzer.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/util/AttributeFactory.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/standard/StandardTokenizer must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisStandardStandardTokenizer () {
 @public
  /*!
   @brief A private instance of the JFlex-constructed scanner
   */
  OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *scanner_;
  jint skippedPositions_;
  jint maxTokenLength_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAtt_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, scanner_, OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, posIncrAtt_, id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardStandardTokenizer, typeAtt_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)

__attribute__((unused)) static void OrgApacheLuceneAnalysisStandardStandardTokenizer_init__(OrgApacheLuceneAnalysisStandardStandardTokenizer *self);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$3(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$4(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$5(void);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisStandardStandardTokenizer)

IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer_TOKEN_TYPES;

@implementation OrgApacheLuceneAnalysisStandardStandardTokenizer

+ (jint)ALPHANUM {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_ALPHANUM;
}

+ (jint)APOSTROPHE {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_APOSTROPHE;
}

+ (jint)ACRONYM {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM;
}

+ (jint)COMPANY {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_COMPANY;
}

+ (jint)EMAIL {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_EMAIL;
}

+ (jint)HOST {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_HOST;
}

+ (jint)NUM {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_NUM;
}

+ (jint)CJ {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_CJ;
}

+ (jint)ACRONYM_DEP {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM_DEP;
}

+ (jint)SOUTHEAST_ASIAN {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_SOUTHEAST_ASIAN;
}

+ (jint)IDEOGRAPHIC {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_IDEOGRAPHIC;
}

+ (jint)HIRAGANA {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_HIRAGANA;
}

+ (jint)KATAKANA {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_KATAKANA;
}

+ (jint)HANGUL {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_HANGUL;
}

+ (IOSObjectArray *)TOKEN_TYPES {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_TOKEN_TYPES;
}

+ (jint)MAX_TOKEN_LENGTH_LIMIT {
  return OrgApacheLuceneAnalysisStandardStandardTokenizer_MAX_TOKEN_LENGTH_LIMIT;
}

- (void)setMaxTokenLengthWithInt:(jint)length {
  if (length < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxTokenLength must be greater than zero");
  }
  else if (length > OrgApacheLuceneAnalysisStandardStandardTokenizer_MAX_TOKEN_LENGTH_LIMIT) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"maxTokenLength may not exceed ", OrgApacheLuceneAnalysisStandardStandardTokenizer_MAX_TOKEN_LENGTH_LIMIT));
  }
  if (length != maxTokenLength_) {
    maxTokenLength_ = length;
    [((OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *) nil_chk(scanner_)) setBufferSizeWithInt:length];
  }
}

- (jint)getMaxTokenLength {
  return maxTokenLength_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisStandardStandardTokenizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory {
  OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  return self;
}

- (void)init__ {
  OrgApacheLuceneAnalysisStandardStandardTokenizer_init__(self);
}

- (jboolean)incrementToken {
  [self clearAttributes];
  skippedPositions_ = 0;
  while (true) {
    jint tokenType = [((OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *) nil_chk(scanner_)) getNextToken];
    if (tokenType == OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_YYEOF) {
      return false;
    }
    if ([((OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *) nil_chk(scanner_)) yylength] <= maxTokenLength_) {
      [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt_)) setPositionIncrementWithInt:skippedPositions_ + 1];
      [((OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *) nil_chk(scanner_)) getTextWithOrgApacheLuceneAnalysisTokenattributesCharTermAttribute:termAtt_];
      jint start = [((OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *) nil_chk(scanner_)) yychar];
      [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[self correctOffsetWithInt:start] withInt:[self correctOffsetWithInt:start + [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) java_length]]];
      [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) setTypeWithNSString:IOSObjectArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardStandardTokenizer_TOKEN_TYPES), tokenType)];
      return true;
    }
    else skippedPositions_++;
  }
}

- (void)end {
  [super end];
  jint finalOffset = [self correctOffsetWithInt:[((OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *) nil_chk(scanner_)) yychar] + [((OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *) nil_chk(scanner_)) yylength]];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:finalOffset withInt:finalOffset];
  [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt_)) setPositionIncrementWithInt:[posIncrAtt_ getPositionIncrement] + skippedPositions_];
}

- (void)close {
  [super close];
  [((OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *) nil_chk(scanner_)) yyresetWithJavaIoReader:input_];
}

- (void)reset {
  [super reset];
  [((OrgApacheLuceneAnalysisStandardStandardTokenizerImpl *) nil_chk(scanner_)) yyresetWithJavaIoReader:input_];
  skippedPositions_ = 0;
}

- (void)dealloc {
  RELEASE_(scanner_);
  RELEASE_(termAtt_);
  RELEASE_(offsetAtt_);
  RELEASE_(posIncrAtt_);
  RELEASE_(typeAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxTokenLengthWithInt:);
  methods[1].selector = @selector(getMaxTokenLength);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithOrgApacheLuceneUtilAttributeFactory:);
  methods[4].selector = @selector(init__);
  methods[5].selector = @selector(incrementToken);
  methods[6].selector = @selector(end);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scanner_", "LOrgApacheLuceneAnalysisStandardStandardTokenizerImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ALPHANUM", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_ALPHANUM, 0x19, -1, -1, -1, -1 },
    { "APOSTROPHE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_APOSTROPHE, 0x19, -1, -1, -1, 5 },
    { "ACRONYM", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM, 0x19, -1, -1, -1, 6 },
    { "COMPANY", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_COMPANY, 0x19, -1, -1, -1, 7 },
    { "EMAIL", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_EMAIL, 0x19, -1, -1, -1, -1 },
    { "HOST", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_HOST, 0x19, -1, -1, -1, 8 },
    { "NUM", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_NUM, 0x19, -1, -1, -1, -1 },
    { "CJ", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_CJ, 0x19, -1, -1, -1, 9 },
    { "ACRONYM_DEP", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_ACRONYM_DEP, 0x19, -1, -1, -1, 10 },
    { "SOUTHEAST_ASIAN", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_SOUTHEAST_ASIAN, 0x19, -1, -1, -1, -1 },
    { "IDEOGRAPHIC", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_IDEOGRAPHIC, 0x19, -1, -1, -1, -1 },
    { "HIRAGANA", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_HIRAGANA, 0x19, -1, -1, -1, -1 },
    { "KATAKANA", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_KATAKANA, 0x19, -1, -1, -1, -1 },
    { "HANGUL", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_HANGUL, 0x19, -1, -1, -1, -1 },
    { "TOKEN_TYPES", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "MAX_TOKEN_LENGTH_LIMIT", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardStandardTokenizer_MAX_TOKEN_LENGTH_LIMIT, 0x19, -1, -1, -1, -1 },
    { "skippedPositions_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxTokenLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "offsetAtt_", "LOrgApacheLuceneAnalysisTokenattributesOffsetAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posIncrAtt_", "LOrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeAtt_", "LOrgApacheLuceneAnalysisTokenattributesTypeAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxTokenLength", "I", "LOrgApacheLuceneUtilAttributeFactory;", "init", "LJavaIoIOException;", (void *)&OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$0, (void *)&OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$1, (void *)&OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$2, (void *)&OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$3, (void *)&OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$4, (void *)&OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$5, &OrgApacheLuceneAnalysisStandardStandardTokenizer_TOKEN_TYPES };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisStandardStandardTokenizer = { "StandardTokenizer", "org.apache.lucene.analysis.standard", ptrTable, methods, fields, 7, 0x11, 9, 23, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisStandardStandardTokenizer;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisStandardStandardTokenizer class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisStandardStandardTokenizer_TOKEN_TYPES, [IOSObjectArray newArrayWithObjects:(id[]){ @"<ALPHANUM>", @"<APOSTROPHE>", @"<ACRONYM>", @"<COMPANY>", @"<EMAIL>", @"<HOST>", @"<NUM>", @"<CJ>", @"<ACRONYM_DEP>", @"<SOUTHEAST_ASIAN>", @"<IDEOGRAPHIC>", @"<HIRAGANA>", @"<KATAKANA>", @"<HANGUL>" } count:14 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisStandardStandardTokenizer)
  }
}

@end

void OrgApacheLuceneAnalysisStandardStandardTokenizer_init(OrgApacheLuceneAnalysisStandardStandardTokenizer *self) {
  OrgApacheLuceneAnalysisTokenizer_init(self);
  self->maxTokenLength_ = OrgApacheLuceneAnalysisStandardStandardAnalyzer_DEFAULT_MAX_TOKEN_LENGTH;
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssign(&self->posIncrAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  OrgApacheLuceneAnalysisStandardStandardTokenizer_init__(self);
}

OrgApacheLuceneAnalysisStandardStandardTokenizer *new_OrgApacheLuceneAnalysisStandardStandardTokenizer_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisStandardStandardTokenizer, init)
}

OrgApacheLuceneAnalysisStandardStandardTokenizer *create_OrgApacheLuceneAnalysisStandardStandardTokenizer_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisStandardStandardTokenizer, init)
}

void OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisStandardStandardTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory) {
  OrgApacheLuceneAnalysisTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  self->maxTokenLength_ = OrgApacheLuceneAnalysisStandardStandardAnalyzer_DEFAULT_MAX_TOKEN_LENGTH;
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssign(&self->posIncrAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  OrgApacheLuceneAnalysisStandardStandardTokenizer_init__(self);
}

OrgApacheLuceneAnalysisStandardStandardTokenizer *new_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisStandardStandardTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_, factory)
}

OrgApacheLuceneAnalysisStandardStandardTokenizer *create_OrgApacheLuceneAnalysisStandardStandardTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisStandardStandardTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_, factory)
}

void OrgApacheLuceneAnalysisStandardStandardTokenizer_init__(OrgApacheLuceneAnalysisStandardStandardTokenizer *self) {
  JreStrongAssignAndConsume(&self->scanner_, new_OrgApacheLuceneAnalysisStandardStandardTokenizerImpl_initWithJavaIoReader_(self->input_));
}

IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneAnalysisStandardStandardTokenizer__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisStandardStandardTokenizer)
