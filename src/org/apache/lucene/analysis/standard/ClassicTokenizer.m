//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizerImpl.h"
#include "org/apache/lucene/analysis/standard/StandardAnalyzer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/util/AttributeFactory.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/standard/ClassicTokenizer must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisStandardClassicTokenizer () {
 @public
  /*!
   @brief A private instance of the JFlex-constructed scanner
   */
  OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *scanner_;
  jint skippedPositions_;
  jint maxTokenLength_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncrAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAtt_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardClassicTokenizer, scanner_, OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardClassicTokenizer, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardClassicTokenizer, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardClassicTokenizer, posIncrAtt_, id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisStandardClassicTokenizer, typeAtt_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)

__attribute__((unused)) static void OrgApacheLuceneAnalysisStandardClassicTokenizer_init__(OrgApacheLuceneAnalysisStandardClassicTokenizer *self);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisStandardClassicTokenizer)

IOSObjectArray *OrgApacheLuceneAnalysisStandardClassicTokenizer_TOKEN_TYPES;

@implementation OrgApacheLuceneAnalysisStandardClassicTokenizer

+ (jint)ALPHANUM {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_ALPHANUM;
}

+ (jint)APOSTROPHE {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_APOSTROPHE;
}

+ (jint)ACRONYM {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_ACRONYM;
}

+ (jint)COMPANY {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_COMPANY;
}

+ (jint)EMAIL {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_EMAIL;
}

+ (jint)HOST {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_HOST;
}

+ (jint)NUM {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_NUM;
}

+ (jint)CJ {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_CJ;
}

+ (jint)ACRONYM_DEP {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_ACRONYM_DEP;
}

+ (IOSObjectArray *)TOKEN_TYPES {
  return OrgApacheLuceneAnalysisStandardClassicTokenizer_TOKEN_TYPES;
}

- (void)setMaxTokenLengthWithInt:(jint)length {
  if (length < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxTokenLength must be greater than zero");
  }
  self->maxTokenLength_ = length;
}

- (jint)getMaxTokenLength {
  return maxTokenLength_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisStandardClassicTokenizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory {
  OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  return self;
}

- (void)init__ {
  OrgApacheLuceneAnalysisStandardClassicTokenizer_init__(self);
}

- (jboolean)incrementToken {
  [self clearAttributes];
  skippedPositions_ = 0;
  while (true) {
    jint tokenType = [((OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *) nil_chk(scanner_)) getNextToken];
    if (tokenType == OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_YYEOF) {
      return false;
    }
    if ([((OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *) nil_chk(scanner_)) yylength] <= maxTokenLength_) {
      [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt_)) setPositionIncrementWithInt:skippedPositions_ + 1];
      [((OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *) nil_chk(scanner_)) getTextWithOrgApacheLuceneAnalysisTokenattributesCharTermAttribute:termAtt_];
      jint start = [((OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *) nil_chk(scanner_)) yychar];
      [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[self correctOffsetWithInt:start] withInt:[self correctOffsetWithInt:start + [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) java_length]]];
      if (tokenType == OrgApacheLuceneAnalysisStandardClassicTokenizer_ACRONYM_DEP) {
        [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) setTypeWithNSString:IOSObjectArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardClassicTokenizer_TOKEN_TYPES), OrgApacheLuceneAnalysisStandardClassicTokenizer_HOST)];
        [termAtt_ setLengthWithInt:[termAtt_ java_length] - 1];
      }
      else {
        [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) setTypeWithNSString:IOSObjectArray_Get(nil_chk(OrgApacheLuceneAnalysisStandardClassicTokenizer_TOKEN_TYPES), tokenType)];
      }
      return true;
    }
    else skippedPositions_++;
  }
}

- (void)end {
  [super end];
  jint finalOffset = [self correctOffsetWithInt:[((OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *) nil_chk(scanner_)) yychar] + [((OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *) nil_chk(scanner_)) yylength]];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:finalOffset withInt:finalOffset];
  [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncrAtt_)) setPositionIncrementWithInt:[posIncrAtt_ getPositionIncrement] + skippedPositions_];
}

- (void)close {
  [super close];
  [((OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *) nil_chk(scanner_)) yyresetWithJavaIoReader:input_];
}

- (void)reset {
  [super reset];
  [((OrgApacheLuceneAnalysisStandardClassicTokenizerImpl *) nil_chk(scanner_)) yyresetWithJavaIoReader:input_];
  skippedPositions_ = 0;
}

- (void)dealloc {
  RELEASE_(scanner_);
  RELEASE_(termAtt_);
  RELEASE_(offsetAtt_);
  RELEASE_(posIncrAtt_);
  RELEASE_(typeAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxTokenLengthWithInt:);
  methods[1].selector = @selector(getMaxTokenLength);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithOrgApacheLuceneUtilAttributeFactory:);
  methods[4].selector = @selector(init__);
  methods[5].selector = @selector(incrementToken);
  methods[6].selector = @selector(end);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scanner_", "LOrgApacheLuceneAnalysisStandardClassicTokenizerImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ALPHANUM", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizer_ALPHANUM, 0x19, -1, -1, -1, -1 },
    { "APOSTROPHE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizer_APOSTROPHE, 0x19, -1, -1, -1, -1 },
    { "ACRONYM", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizer_ACRONYM, 0x19, -1, -1, -1, -1 },
    { "COMPANY", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizer_COMPANY, 0x19, -1, -1, -1, -1 },
    { "EMAIL", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizer_EMAIL, 0x19, -1, -1, -1, -1 },
    { "HOST", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizer_HOST, 0x19, -1, -1, -1, -1 },
    { "NUM", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizer_NUM, 0x19, -1, -1, -1, -1 },
    { "CJ", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizer_CJ, 0x19, -1, -1, -1, -1 },
    { "ACRONYM_DEP", "I", .constantValue.asInt = OrgApacheLuceneAnalysisStandardClassicTokenizer_ACRONYM_DEP, 0x19, -1, -1, -1, -1 },
    { "TOKEN_TYPES", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "skippedPositions_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxTokenLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "offsetAtt_", "LOrgApacheLuceneAnalysisTokenattributesOffsetAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posIncrAtt_", "LOrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeAtt_", "LOrgApacheLuceneAnalysisTokenattributesTypeAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxTokenLength", "I", "LOrgApacheLuceneUtilAttributeFactory;", "init", "LJavaIoIOException;", &OrgApacheLuceneAnalysisStandardClassicTokenizer_TOKEN_TYPES };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisStandardClassicTokenizer = { "ClassicTokenizer", "org.apache.lucene.analysis.standard", ptrTable, methods, fields, 7, 0x11, 9, 17, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisStandardClassicTokenizer;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisStandardClassicTokenizer class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisStandardClassicTokenizer_TOKEN_TYPES, [IOSObjectArray newArrayWithObjects:(id[]){ @"<ALPHANUM>", @"<APOSTROPHE>", @"<ACRONYM>", @"<COMPANY>", @"<EMAIL>", @"<HOST>", @"<NUM>", @"<CJ>", @"<ACRONYM_DEP>" } count:9 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisStandardClassicTokenizer)
  }
}

@end

void OrgApacheLuceneAnalysisStandardClassicTokenizer_init(OrgApacheLuceneAnalysisStandardClassicTokenizer *self) {
  OrgApacheLuceneAnalysisTokenizer_init(self);
  self->maxTokenLength_ = OrgApacheLuceneAnalysisStandardStandardAnalyzer_DEFAULT_MAX_TOKEN_LENGTH;
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssign(&self->posIncrAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  OrgApacheLuceneAnalysisStandardClassicTokenizer_init__(self);
}

OrgApacheLuceneAnalysisStandardClassicTokenizer *new_OrgApacheLuceneAnalysisStandardClassicTokenizer_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisStandardClassicTokenizer, init)
}

OrgApacheLuceneAnalysisStandardClassicTokenizer *create_OrgApacheLuceneAnalysisStandardClassicTokenizer_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisStandardClassicTokenizer, init)
}

void OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisStandardClassicTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory) {
  OrgApacheLuceneAnalysisTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  self->maxTokenLength_ = OrgApacheLuceneAnalysisStandardStandardAnalyzer_DEFAULT_MAX_TOKEN_LENGTH;
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssign(&self->posIncrAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  OrgApacheLuceneAnalysisStandardClassicTokenizer_init__(self);
}

OrgApacheLuceneAnalysisStandardClassicTokenizer *new_OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisStandardClassicTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_, factory)
}

OrgApacheLuceneAnalysisStandardClassicTokenizer *create_OrgApacheLuceneAnalysisStandardClassicTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisStandardClassicTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_, factory)
}

void OrgApacheLuceneAnalysisStandardClassicTokenizer_init__(OrgApacheLuceneAnalysisStandardClassicTokenizer *self) {
  JreStrongAssignAndConsume(&self->scanner_, new_OrgApacheLuceneAnalysisStandardClassicTokenizerImpl_initPackagePrivateWithJavaIoReader_(self->input_));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisStandardClassicTokenizer)
