//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/analysis/AnalyzerWrapper.java
//

#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/AnalyzerWrapper.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/AnalyzerWrapper must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneAnalysisAnalyzerWrapper

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy:(OrgApacheLuceneAnalysisAnalyzer_ReuseStrategy *)reuseStrategy {
  OrgApacheLuceneAnalysisAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy_(self, reuseStrategy);
  return self;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getWrappedAnalyzerWithNSString:(NSString *)fieldName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents *)wrapComponentsWithNSString:(NSString *)fieldName
                            withOrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents:(OrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents *)components {
  return components;
}

- (JavaIoReader *)wrapReaderWithNSString:(NSString *)fieldName
                        withJavaIoReader:(JavaIoReader *)reader {
  return reader;
}

- (OrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents *)createComponentsWithNSString:(NSString *)fieldName {
  return [self wrapComponentsWithNSString:fieldName withOrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents:[((OrgApacheLuceneAnalysisAnalyzer *) nil_chk([self getWrappedAnalyzerWithNSString:fieldName])) createComponentsWithNSString:fieldName]];
}

- (jint)getPositionIncrementGapWithNSString:(NSString *)fieldName {
  return [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk([self getWrappedAnalyzerWithNSString:fieldName])) getPositionIncrementGapWithNSString:fieldName];
}

- (jint)getOffsetGapWithNSString:(NSString *)fieldName {
  return [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk([self getWrappedAnalyzerWithNSString:fieldName])) getOffsetGapWithNSString:fieldName];
}

- (JavaIoReader *)initReaderWithNSString:(NSString *)fieldName
                        withJavaIoReader:(JavaIoReader *)reader {
  return [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk([self getWrappedAnalyzerWithNSString:fieldName])) initReaderWithNSString:fieldName withJavaIoReader:[self wrapReaderWithNSString:fieldName withJavaIoReader:reader]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x404, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents;", 0x14, 7, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x11, 10, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy:);
  methods[1].selector = @selector(getWrappedAnalyzerWithNSString:);
  methods[2].selector = @selector(wrapComponentsWithNSString:withOrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents:);
  methods[3].selector = @selector(wrapReaderWithNSString:withJavaIoReader:);
  methods[4].selector = @selector(createComponentsWithNSString:);
  methods[5].selector = @selector(getPositionIncrementGapWithNSString:);
  methods[6].selector = @selector(getOffsetGapWithNSString:);
  methods[7].selector = @selector(initReaderWithNSString:withJavaIoReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy;", "getWrappedAnalyzer", "LNSString;", "wrapComponents", "LNSString;LOrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents;", "wrapReader", "LNSString;LJavaIoReader;", "createComponents", "getPositionIncrementGap", "getOffsetGap", "initReader" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisAnalyzerWrapper = { "AnalyzerWrapper", "org.apache.lucene.analysis", ptrTable, methods, NULL, 7, 0x401, 8, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisAnalyzerWrapper;
}

@end

void OrgApacheLuceneAnalysisAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy_(OrgApacheLuceneAnalysisAnalyzerWrapper *self, OrgApacheLuceneAnalysisAnalyzer_ReuseStrategy *reuseStrategy) {
  OrgApacheLuceneAnalysisAnalyzer_initWithOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy_(self, reuseStrategy);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisAnalyzerWrapper)
