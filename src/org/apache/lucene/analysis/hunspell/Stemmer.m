//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/hunspell/Stemmer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "org/apache/lucene/analysis/hunspell/Stemmer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/automaton/CharacterRunAutomaton.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/hunspell/Stemmer must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisHunspellStemmer () {
 @public
  OrgApacheLuceneAnalysisHunspellDictionary *dictionary_;
  OrgApacheLuceneUtilBytesRef *scratch_;
  JavaLangStringBuilder *segment_;
  OrgApacheLuceneStoreByteArrayDataInput *affixReader_;
  JavaLangStringBuilder *scratchSegment_;
  IOSCharArray *scratchBuffer_;
  jint formStep_;
  IOSCharArray *lowerBuffer_;
  IOSCharArray *titleBuffer_;
}

/*!
 @brief returns EXACT_CASE,TITLE_CASE, or UPPER_CASE type for the word
 */
- (jint)caseOfWithCharArray:(IOSCharArray *)word
                    withInt:(jint)length;

/*!
 @brief folds titlecase variant of word to titleBuffer
 */
- (void)caseFoldTitleWithCharArray:(IOSCharArray *)word
                           withInt:(jint)length;

/*!
 @brief folds lowercase variant of word (title cased) to lowerBuffer
 */
- (void)caseFoldLowerWithCharArray:(IOSCharArray *)word
                           withInt:(jint)length;

- (id<JavaUtilList>)doStemWithCharArray:(IOSCharArray *)word
                                withInt:(jint)length
                            withBoolean:(jboolean)caseVariant;

- (OrgApacheLuceneUtilCharsRef *)newStemWithCharArray:(IOSCharArray *)buffer
                                              withInt:(jint)length
                       withOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)forms
                                              withInt:(jint)formID OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Generates a list of stems for the provided word
 @param word Word to generate the stems for
 @param previous previous affix that was removed (so we dont remove same one twice)
 @param prevFlag Flag from a previous stemming step that need to be cross-checked with any affixes in this recursive step
 @param prefixFlag flag of the most inner removed prefix, so that when removing a suffix, it's also checked against the word
 @param recursionDepth current recursiondepth
 @param doPrefix true if we should remove prefixes
 @param doSuffix true if we should remove suffixes
 @param previousWasPrefix true if the previous removal was a prefix:         if we are removing a suffix, and it has no continuation requirements, it's ok.
          but two prefixes (COMPLEXPREFIXES) or two suffixes must have continuation requirements to recurse.
 @param circumfix true if the previous prefix removal was signed as a circumfix         this means inner most suffix must also contain circumfix flag.
 @param caseVariant true if we are searching for a case variant. if the word has KEEPCASE flag it cannot succeed.
 @return List of stems, or empty list if no stems are found
 */
- (id<JavaUtilList>)stemWithCharArray:(IOSCharArray *)word
                              withInt:(jint)length
                              withInt:(jint)previous
                              withInt:(jint)prevFlag
                              withInt:(jint)prefixFlag
                              withInt:(jint)recursionDepth
                          withBoolean:(jboolean)doPrefix
                          withBoolean:(jboolean)doSuffix
                          withBoolean:(jboolean)previousWasPrefix
                          withBoolean:(jboolean)circumfix
                          withBoolean:(jboolean)caseVariant;

/*!
 @brief checks condition of the concatenation of two strings
 */
- (jboolean)checkConditionWithInt:(jint)condition
                    withCharArray:(IOSCharArray *)c1
                          withInt:(jint)c1off
                          withInt:(jint)c1len
                    withCharArray:(IOSCharArray *)c2
                          withInt:(jint)c2off
                          withInt:(jint)c2len;

/*!
 @brief Checks if the given flag cross checks with the given array of flags
 @param flag Flag to cross check with the array of flags
 @param flags Array of flags to cross check against.  Can be <code>null</code>
 @return <code>true</code> if the flag is found in the array or the array is <code>null</code>, <code>false</code> otherwise
 */
- (jboolean)hasCrossCheckedFlagWithChar:(jchar)flag
                          withCharArray:(IOSCharArray *)flags
                            withBoolean:(jboolean)matchEmpty;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellStemmer, dictionary_, OrgApacheLuceneAnalysisHunspellDictionary *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellStemmer, scratch_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellStemmer, segment_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellStemmer, affixReader_, OrgApacheLuceneStoreByteArrayDataInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellStemmer, scratchSegment_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellStemmer, scratchBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellStemmer, lowerBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellStemmer, titleBuffer_, IOSCharArray *)

inline jint OrgApacheLuceneAnalysisHunspellStemmer_get_EXACT_CASE(void);
#define OrgApacheLuceneAnalysisHunspellStemmer_EXACT_CASE 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisHunspellStemmer, EXACT_CASE, jint)

inline jint OrgApacheLuceneAnalysisHunspellStemmer_get_TITLE_CASE(void);
#define OrgApacheLuceneAnalysisHunspellStemmer_TITLE_CASE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisHunspellStemmer, TITLE_CASE, jint)

inline jint OrgApacheLuceneAnalysisHunspellStemmer_get_UPPER_CASE(void);
#define OrgApacheLuceneAnalysisHunspellStemmer_UPPER_CASE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisHunspellStemmer, UPPER_CASE, jint)

__attribute__((unused)) static jint OrgApacheLuceneAnalysisHunspellStemmer_caseOfWithCharArray_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length);

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellStemmer_caseFoldTitleWithCharArray_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length);

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellStemmer_caseFoldLowerWithCharArray_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length);

__attribute__((unused)) static id<JavaUtilList> OrgApacheLuceneAnalysisHunspellStemmer_doStemWithCharArray_withInt_withBoolean_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length, jboolean caseVariant);

__attribute__((unused)) static OrgApacheLuceneUtilCharsRef *OrgApacheLuceneAnalysisHunspellStemmer_newStemWithCharArray_withInt_withOrgApacheLuceneUtilIntsRef_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *buffer, jint length, OrgApacheLuceneUtilIntsRef *forms, jint formID);

__attribute__((unused)) static id<JavaUtilList> OrgApacheLuceneAnalysisHunspellStemmer_stemWithCharArray_withInt_withInt_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length, jint previous, jint prevFlag, jint prefixFlag, jint recursionDepth, jboolean doPrefix, jboolean doSuffix, jboolean previousWasPrefix, jboolean circumfix, jboolean caseVariant);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisHunspellStemmer_checkConditionWithInt_withCharArray_withInt_withInt_withCharArray_withInt_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, jint condition, IOSCharArray *c1, jint c1off, jint c1len, IOSCharArray *c2, jint c2off, jint c2len);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisHunspellStemmer_hasCrossCheckedFlagWithChar_withCharArray_withBoolean_(OrgApacheLuceneAnalysisHunspellStemmer *self, jchar flag, IOSCharArray *flags, jboolean matchEmpty);

@implementation OrgApacheLuceneAnalysisHunspellStemmer

- (instancetype)initPackagePrivateWithOrgApacheLuceneAnalysisHunspellDictionary:(OrgApacheLuceneAnalysisHunspellDictionary *)dictionary {
  OrgApacheLuceneAnalysisHunspellStemmer_initPackagePrivateWithOrgApacheLuceneAnalysisHunspellDictionary_(self, dictionary);
  return self;
}

- (id<JavaUtilList>)stemWithNSString:(NSString *)word {
  return [self stemWithCharArray:[((NSString *) nil_chk(word)) java_toCharArray] withInt:[word java_length]];
}

- (id<JavaUtilList>)stemWithCharArray:(IOSCharArray *)word
                              withInt:(jint)length {
  if (((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(dictionary_))->needsInputCleaning_) {
    [((JavaLangStringBuilder *) nil_chk(scratchSegment_)) setLengthWithInt:0];
    [scratchSegment_ appendWithCharArray:word withInt:0 withInt:length];
    id<JavaLangCharSequence> cleaned = JreRetainedLocalValue([dictionary_ cleanInputWithJavaLangCharSequence:scratchSegment_ withJavaLangStringBuilder:segment_]);
    JreStrongAssign(&scratchBuffer_, OrgApacheLuceneUtilArrayUtil_growWithCharArray_withInt_(scratchBuffer_, [((id<JavaLangCharSequence>) nil_chk(cleaned)) java_length]));
    length = [((JavaLangStringBuilder *) nil_chk(segment_)) java_length];
    [segment_ getCharsWithInt:0 withInt:length withCharArray:scratchBuffer_ withInt:0];
    word = scratchBuffer_;
  }
  jint caseType = OrgApacheLuceneAnalysisHunspellStemmer_caseOfWithCharArray_withInt_(self, word, length);
  if (caseType == OrgApacheLuceneAnalysisHunspellStemmer_UPPER_CASE) {
    OrgApacheLuceneAnalysisHunspellStemmer_caseFoldTitleWithCharArray_withInt_(self, word, length);
    OrgApacheLuceneAnalysisHunspellStemmer_caseFoldLowerWithCharArray_withInt_(self, titleBuffer_, length);
    id<JavaUtilList> list = OrgApacheLuceneAnalysisHunspellStemmer_doStemWithCharArray_withInt_withBoolean_(self, word, length, false);
    [((id<JavaUtilList>) nil_chk(list)) addAllWithJavaUtilCollection:OrgApacheLuceneAnalysisHunspellStemmer_doStemWithCharArray_withInt_withBoolean_(self, titleBuffer_, length, true)];
    [list addAllWithJavaUtilCollection:OrgApacheLuceneAnalysisHunspellStemmer_doStemWithCharArray_withInt_withBoolean_(self, lowerBuffer_, length, true)];
    return list;
  }
  else if (caseType == OrgApacheLuceneAnalysisHunspellStemmer_TITLE_CASE) {
    OrgApacheLuceneAnalysisHunspellStemmer_caseFoldLowerWithCharArray_withInt_(self, word, length);
    id<JavaUtilList> list = OrgApacheLuceneAnalysisHunspellStemmer_doStemWithCharArray_withInt_withBoolean_(self, word, length, false);
    [((id<JavaUtilList>) nil_chk(list)) addAllWithJavaUtilCollection:OrgApacheLuceneAnalysisHunspellStemmer_doStemWithCharArray_withInt_withBoolean_(self, lowerBuffer_, length, true)];
    return list;
  }
  else {
    return OrgApacheLuceneAnalysisHunspellStemmer_doStemWithCharArray_withInt_withBoolean_(self, word, length, false);
  }
}

- (jint)caseOfWithCharArray:(IOSCharArray *)word
                    withInt:(jint)length {
  return OrgApacheLuceneAnalysisHunspellStemmer_caseOfWithCharArray_withInt_(self, word, length);
}

- (void)caseFoldTitleWithCharArray:(IOSCharArray *)word
                           withInt:(jint)length {
  OrgApacheLuceneAnalysisHunspellStemmer_caseFoldTitleWithCharArray_withInt_(self, word, length);
}

- (void)caseFoldLowerWithCharArray:(IOSCharArray *)word
                           withInt:(jint)length {
  OrgApacheLuceneAnalysisHunspellStemmer_caseFoldLowerWithCharArray_withInt_(self, word, length);
}

- (id<JavaUtilList>)doStemWithCharArray:(IOSCharArray *)word
                                withInt:(jint)length
                            withBoolean:(jboolean)caseVariant {
  return OrgApacheLuceneAnalysisHunspellStemmer_doStemWithCharArray_withInt_withBoolean_(self, word, length, caseVariant);
}

- (id<JavaUtilList>)uniqueStemsWithCharArray:(IOSCharArray *)word
                                     withInt:(jint)length {
  id<JavaUtilList> stems = JreRetainedLocalValue([self stemWithCharArray:word withInt:length]);
  if ([((id<JavaUtilList>) nil_chk(stems)) size] < 2) {
    return stems;
  }
  OrgApacheLuceneAnalysisUtilCharArraySet *terms = create_OrgApacheLuceneAnalysisUtilCharArraySet_initWithInt_withBoolean_(8, ((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(dictionary_))->ignoreCase_);
  id<JavaUtilList> deduped = create_JavaUtilArrayList_init();
  for (OrgApacheLuceneUtilCharsRef * __strong s in stems) {
    if (![terms containsWithJavaLangCharSequence:s]) {
      [deduped addWithId:s];
      [terms addWithJavaLangCharSequence:s];
    }
  }
  return deduped;
}

- (OrgApacheLuceneUtilCharsRef *)newStemWithCharArray:(IOSCharArray *)buffer
                                              withInt:(jint)length
                       withOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)forms
                                              withInt:(jint)formID {
  return OrgApacheLuceneAnalysisHunspellStemmer_newStemWithCharArray_withInt_withOrgApacheLuceneUtilIntsRef_withInt_(self, buffer, length, forms, formID);
}

- (id<JavaUtilList>)stemWithCharArray:(IOSCharArray *)word
                              withInt:(jint)length
                              withInt:(jint)previous
                              withInt:(jint)prevFlag
                              withInt:(jint)prefixFlag
                              withInt:(jint)recursionDepth
                          withBoolean:(jboolean)doPrefix
                          withBoolean:(jboolean)doSuffix
                          withBoolean:(jboolean)previousWasPrefix
                          withBoolean:(jboolean)circumfix
                          withBoolean:(jboolean)caseVariant {
  return OrgApacheLuceneAnalysisHunspellStemmer_stemWithCharArray_withInt_withInt_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, word, length, previous, prevFlag, prefixFlag, recursionDepth, doPrefix, doSuffix, previousWasPrefix, circumfix, caseVariant);
}

- (jboolean)checkConditionWithInt:(jint)condition
                    withCharArray:(IOSCharArray *)c1
                          withInt:(jint)c1off
                          withInt:(jint)c1len
                    withCharArray:(IOSCharArray *)c2
                          withInt:(jint)c2off
                          withInt:(jint)c2len {
  return OrgApacheLuceneAnalysisHunspellStemmer_checkConditionWithInt_withCharArray_withInt_withInt_withCharArray_withInt_withInt_(self, condition, c1, c1off, c1len, c2, c2off, c2len);
}

- (id<JavaUtilList>)applyAffixWithCharArray:(IOSCharArray *)strippedWord
                                    withInt:(jint)length
                                    withInt:(jint)affix
                                    withInt:(jint)prefixFlag
                                    withInt:(jint)recursionDepth
                                withBoolean:(jboolean)prefix
                                withBoolean:(jboolean)circumfix
                                withBoolean:(jboolean)caseVariant {
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(affixReader_)) setPositionWithInt:8 * affix];
  jchar flag = (jchar) ([affixReader_ readShort] & (jint) 0xffff);
  [affixReader_ skipBytesWithLong:2];
  jint condition = (jchar) ([affixReader_ readShort] & (jint) 0xffff);
  jboolean crossProduct = (condition & 1) == 1;
  JreURShiftAssignInt(&condition, 1);
  jchar append = (jchar) ([affixReader_ readShort] & (jint) 0xffff);
  id<JavaUtilList> stems = create_JavaUtilArrayList_init();
  OrgApacheLuceneUtilIntsRef *forms = JreRetainedLocalValue([((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(dictionary_)) lookupWordWithCharArray:strippedWord withInt:0 withInt:length]);
  if (forms != nil) {
    for (jint i = 0; i < forms->length_; i += formStep_) {
      [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(dictionary_->flagLookup_)) getWithInt:IOSIntArray_Get(nil_chk(forms->ints_), forms->offset_ + i) withOrgApacheLuceneUtilBytesRef:scratch_];
      IOSCharArray *wordFlags = OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(scratch_);
      if (OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(wordFlags, flag)) {
        jboolean chainedPrefix = dictionary_->complexPrefixes_ && recursionDepth == 1 && prefix;
        if (chainedPrefix == false && prefixFlag >= 0 && !OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(wordFlags, (jchar) prefixFlag)) {
          [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(dictionary_->flagLookup_)) getWithInt:append withOrgApacheLuceneUtilBytesRef:scratch_];
          IOSCharArray *appendFlags = OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(scratch_);
          if (!OrgApacheLuceneAnalysisHunspellStemmer_hasCrossCheckedFlagWithChar_withCharArray_withBoolean_(self, (jchar) prefixFlag, appendFlags, false)) {
            continue;
          }
        }
        if (dictionary_->circumfix_ != -1) {
          [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(dictionary_->flagLookup_)) getWithInt:append withOrgApacheLuceneUtilBytesRef:scratch_];
          IOSCharArray *appendFlags = OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(scratch_);
          jboolean suffixCircumfix = OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(appendFlags, (jchar) dictionary_->circumfix_);
          if (circumfix != suffixCircumfix) {
            continue;
          }
        }
        if (caseVariant && dictionary_->keepcase_ != -1 && OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(wordFlags, (jchar) dictionary_->keepcase_)) {
          continue;
        }
        if (dictionary_->onlyincompound_ != -1 && OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(wordFlags, (jchar) dictionary_->onlyincompound_)) {
          continue;
        }
        [stems addWithId:OrgApacheLuceneAnalysisHunspellStemmer_newStemWithCharArray_withInt_withOrgApacheLuceneUtilIntsRef_withInt_(self, strippedWord, length, forms, i)];
      }
    }
  }
  if (dictionary_->circumfix_ != -1 && !circumfix && prefix) {
    [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(dictionary_->flagLookup_)) getWithInt:append withOrgApacheLuceneUtilBytesRef:scratch_];
    IOSCharArray *appendFlags = OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(scratch_);
    circumfix = OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(appendFlags, (jchar) dictionary_->circumfix_);
  }
  if (crossProduct) {
    if (recursionDepth == 0) {
      if (prefix) {
        [stems addAllWithJavaUtilCollection:OrgApacheLuceneAnalysisHunspellStemmer_stemWithCharArray_withInt_withInt_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, strippedWord, length, affix, flag, flag, ++recursionDepth, dictionary_->complexPrefixes_ && dictionary_->twoStageAffix_, true, true, circumfix, caseVariant)];
      }
      else if (dictionary_->complexPrefixes_ == false && dictionary_->twoStageAffix_) {
        [stems addAllWithJavaUtilCollection:OrgApacheLuceneAnalysisHunspellStemmer_stemWithCharArray_withInt_withInt_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, strippedWord, length, affix, flag, prefixFlag, ++recursionDepth, false, true, false, circumfix, caseVariant)];
      }
    }
    else if (recursionDepth == 1) {
      if (prefix && dictionary_->complexPrefixes_) {
        [stems addAllWithJavaUtilCollection:OrgApacheLuceneAnalysisHunspellStemmer_stemWithCharArray_withInt_withInt_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, strippedWord, length, affix, flag, flag, ++recursionDepth, false, true, true, circumfix, caseVariant)];
      }
      else if (prefix == false && dictionary_->complexPrefixes_ == false && dictionary_->twoStageAffix_) {
        [stems addAllWithJavaUtilCollection:OrgApacheLuceneAnalysisHunspellStemmer_stemWithCharArray_withInt_withInt_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, strippedWord, length, affix, flag, prefixFlag, ++recursionDepth, false, true, false, circumfix, caseVariant)];
      }
    }
  }
  return stems;
}

- (jboolean)hasCrossCheckedFlagWithChar:(jchar)flag
                          withCharArray:(IOSCharArray *)flags
                            withBoolean:(jboolean)matchEmpty {
  return OrgApacheLuceneAnalysisHunspellStemmer_hasCrossCheckedFlagWithChar_withCharArray_withBoolean_(self, flag, flags, matchEmpty);
}

- (void)dealloc {
  RELEASE_(dictionary_);
  RELEASE_(scratch_);
  RELEASE_(segment_);
  RELEASE_(affixReader_);
  RELEASE_(scratchSegment_);
  RELEASE_(scratchBuffer_);
  RELEASE_(lowerBuffer_);
  RELEASE_(titleBuffer_);
  RELEASE_(prefixReaders_);
  RELEASE_(prefixArcs_);
  RELEASE_(suffixReaders_);
  RELEASE_(suffixArcs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 4, -1, 5, -1, -1 },
    { NULL, "I", 0x2, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 12, 4, -1, 5, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilCharsRef;", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 1, 15, 16, 17, -1, -1 },
    { NULL, "Z", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, 20, 21, 16, 22, -1, -1 },
    { NULL, "Z", 0x2, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneAnalysisHunspellDictionary:);
  methods[1].selector = @selector(stemWithNSString:);
  methods[2].selector = @selector(stemWithCharArray:withInt:);
  methods[3].selector = @selector(caseOfWithCharArray:withInt:);
  methods[4].selector = @selector(caseFoldTitleWithCharArray:withInt:);
  methods[5].selector = @selector(caseFoldLowerWithCharArray:withInt:);
  methods[6].selector = @selector(doStemWithCharArray:withInt:withBoolean:);
  methods[7].selector = @selector(uniqueStemsWithCharArray:withInt:);
  methods[8].selector = @selector(newStemWithCharArray:withInt:withOrgApacheLuceneUtilIntsRef:withInt:);
  methods[9].selector = @selector(stemWithCharArray:withInt:withInt:withInt:withInt:withInt:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:);
  methods[10].selector = @selector(checkConditionWithInt:withCharArray:withInt:withInt:withCharArray:withInt:withInt:);
  methods[11].selector = @selector(applyAffixWithCharArray:withInt:withInt:withInt:withInt:withBoolean:withBoolean:withBoolean:);
  methods[12].selector = @selector(hasCrossCheckedFlagWithChar:withCharArray:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dictionary_", "LOrgApacheLuceneAnalysisHunspellDictionary;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratch_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "segment_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "affixReader_", "LOrgApacheLuceneStoreByteArrayDataInput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratchSegment_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratchBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "formStep_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lowerBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "titleBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "EXACT_CASE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisHunspellStemmer_EXACT_CASE, 0x1a, -1, -1, -1, -1 },
    { "TITLE_CASE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisHunspellStemmer_TITLE_CASE, 0x1a, -1, -1, -1, -1 },
    { "UPPER_CASE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisHunspellStemmer_UPPER_CASE, 0x1a, -1, -1, -1, -1 },
    { "prefixReaders_", "[LOrgApacheLuceneUtilFstFST_BytesReader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefixArcs_", "[LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x10, -1, -1, 25, -1 },
    { "suffixReaders_", "[LOrgApacheLuceneUtilFstFST_BytesReader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "suffixArcs_", "[LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x10, -1, -1, 25, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisHunspellDictionary;", "stem", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Lorg/apache/lucene/util/CharsRef;>;", "[CI", "([CI)Ljava/util/List<Lorg/apache/lucene/util/CharsRef;>;", "caseOf", "caseFoldTitle", "caseFoldLower", "doStem", "[CIZ", "([CIZ)Ljava/util/List<Lorg/apache/lucene/util/CharsRef;>;", "uniqueStems", "newStem", "[CILOrgApacheLuceneUtilIntsRef;I", "[CIIIIIZZZZZ", "LJavaIoIOException;", "([CIIIIIZZZZZ)Ljava/util/List<Lorg/apache/lucene/util/CharsRef;>;", "checkCondition", "I[CII[CII", "applyAffix", "[CIIIIZZZ", "([CIIIIZZZ)Ljava/util/List<Lorg/apache/lucene/util/CharsRef;>;", "hasCrossCheckedFlag", "C[CZ", "[Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/IntsRef;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisHunspellStemmer = { "Stemmer", "org.apache.lucene.analysis.hunspell", ptrTable, methods, fields, 7, 0x10, 13, 16, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisHunspellStemmer;
}

@end

void OrgApacheLuceneAnalysisHunspellStemmer_initPackagePrivateWithOrgApacheLuceneAnalysisHunspellDictionary_(OrgApacheLuceneAnalysisHunspellStemmer *self, OrgApacheLuceneAnalysisHunspellDictionary *dictionary) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->scratch_, new_OrgApacheLuceneUtilBytesRef_init());
  JreStrongAssignAndConsume(&self->segment_, new_JavaLangStringBuilder_init());
  JreStrongAssignAndConsume(&self->scratchSegment_, new_JavaLangStringBuilder_init());
  JreStrongAssignAndConsume(&self->scratchBuffer_, [IOSCharArray newArrayWithLength:32]);
  JreStrongAssignAndConsume(&self->lowerBuffer_, [IOSCharArray newArrayWithLength:8]);
  JreStrongAssignAndConsume(&self->titleBuffer_, [IOSCharArray newArrayWithLength:8]);
  JreStrongAssignAndConsume(&self->prefixReaders_, [IOSObjectArray newArrayWithLength:3 type:OrgApacheLuceneUtilFstFST_BytesReader_class_()]);
  JreStrongAssignAndConsume(&self->prefixArcs_, [IOSObjectArray newArrayWithLength:3 type:OrgApacheLuceneUtilFstFST_Arc_class_()]);
  JreStrongAssignAndConsume(&self->suffixReaders_, [IOSObjectArray newArrayWithLength:3 type:OrgApacheLuceneUtilFstFST_BytesReader_class_()]);
  JreStrongAssignAndConsume(&self->suffixArcs_, [IOSObjectArray newArrayWithLength:3 type:OrgApacheLuceneUtilFstFST_Arc_class_()]);
  JreStrongAssign(&self->dictionary_, dictionary);
  JreStrongAssignAndConsume(&self->affixReader_, new_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_(((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(dictionary))->affixData_));
  for (jint level = 0; level < 3; level++) {
    if (dictionary->prefixes_ != nil) {
      IOSObjectArray_SetAndConsume(self->prefixArcs_, level, new_OrgApacheLuceneUtilFstFST_Arc_init());
      IOSObjectArray_Set(self->prefixReaders_, level, [((OrgApacheLuceneUtilFstFST *) nil_chk(dictionary->prefixes_)) getBytesReader]);
    }
    if (dictionary->suffixes_ != nil) {
      IOSObjectArray_SetAndConsume(self->suffixArcs_, level, new_OrgApacheLuceneUtilFstFST_Arc_init());
      IOSObjectArray_Set(self->suffixReaders_, level, [((OrgApacheLuceneUtilFstFST *) nil_chk(dictionary->suffixes_)) getBytesReader]);
    }
  }
  self->formStep_ = dictionary->hasStemExceptions_ ? 2 : 1;
}

OrgApacheLuceneAnalysisHunspellStemmer *new_OrgApacheLuceneAnalysisHunspellStemmer_initPackagePrivateWithOrgApacheLuceneAnalysisHunspellDictionary_(OrgApacheLuceneAnalysisHunspellDictionary *dictionary) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisHunspellStemmer, initPackagePrivateWithOrgApacheLuceneAnalysisHunspellDictionary_, dictionary)
}

OrgApacheLuceneAnalysisHunspellStemmer *create_OrgApacheLuceneAnalysisHunspellStemmer_initPackagePrivateWithOrgApacheLuceneAnalysisHunspellDictionary_(OrgApacheLuceneAnalysisHunspellDictionary *dictionary) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisHunspellStemmer, initPackagePrivateWithOrgApacheLuceneAnalysisHunspellDictionary_, dictionary)
}

jint OrgApacheLuceneAnalysisHunspellStemmer_caseOfWithCharArray_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length) {
  if (((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_))->ignoreCase_ || length == 0 || !JavaLangCharacter_isUpperCaseWithChar_(IOSCharArray_Get(nil_chk(word), 0))) {
    return OrgApacheLuceneAnalysisHunspellStemmer_EXACT_CASE;
  }
  jboolean seenUpper = false;
  jboolean seenLower = false;
  for (jint i = 1; i < length; i++) {
    jboolean v = JavaLangCharacter_isUpperCaseWithChar_(IOSCharArray_Get(nil_chk(word), i));
    seenUpper |= v;
    seenLower |= !v;
  }
  if (!seenLower) {
    return OrgApacheLuceneAnalysisHunspellStemmer_UPPER_CASE;
  }
  else if (!seenUpper) {
    return OrgApacheLuceneAnalysisHunspellStemmer_TITLE_CASE;
  }
  else {
    return OrgApacheLuceneAnalysisHunspellStemmer_EXACT_CASE;
  }
}

void OrgApacheLuceneAnalysisHunspellStemmer_caseFoldTitleWithCharArray_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length) {
  JreStrongAssign(&self->titleBuffer_, OrgApacheLuceneUtilArrayUtil_growWithCharArray_withInt_(self->titleBuffer_, length));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(word, 0, self->titleBuffer_, 0, length);
  for (jint i = 1; i < length; i++) {
    *IOSCharArray_GetRef(nil_chk(self->titleBuffer_), i) = [((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_)) caseFoldWithChar:IOSCharArray_Get(self->titleBuffer_, i)];
  }
}

void OrgApacheLuceneAnalysisHunspellStemmer_caseFoldLowerWithCharArray_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length) {
  JreStrongAssign(&self->lowerBuffer_, OrgApacheLuceneUtilArrayUtil_growWithCharArray_withInt_(self->lowerBuffer_, length));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(word, 0, self->lowerBuffer_, 0, length);
  *IOSCharArray_GetRef(nil_chk(self->lowerBuffer_), 0) = [((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_)) caseFoldWithChar:IOSCharArray_Get(self->lowerBuffer_, 0)];
}

id<JavaUtilList> OrgApacheLuceneAnalysisHunspellStemmer_doStemWithCharArray_withInt_withBoolean_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length, jboolean caseVariant) {
  id<JavaUtilList> stems = create_JavaUtilArrayList_init();
  OrgApacheLuceneUtilIntsRef *forms = JreRetainedLocalValue([((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_)) lookupWordWithCharArray:word withInt:0 withInt:length]);
  if (forms != nil) {
    for (jint i = 0; i < forms->length_; i += self->formStep_) {
      jboolean checkKeepCase = caseVariant && self->dictionary_->keepcase_ != -1;
      jboolean checkNeedAffix = self->dictionary_->needaffix_ != -1;
      jboolean checkOnlyInCompound = self->dictionary_->onlyincompound_ != -1;
      if (checkKeepCase || checkNeedAffix || checkOnlyInCompound) {
        [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(self->dictionary_->flagLookup_)) getWithInt:IOSIntArray_Get(nil_chk(forms->ints_), forms->offset_ + i) withOrgApacheLuceneUtilBytesRef:self->scratch_];
        IOSCharArray *wordFlags = OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(self->scratch_);
        if (checkKeepCase && OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(wordFlags, (jchar) self->dictionary_->keepcase_)) {
          continue;
        }
        if (checkNeedAffix && OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(wordFlags, (jchar) self->dictionary_->needaffix_)) {
          continue;
        }
        if (checkOnlyInCompound && OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(wordFlags, (jchar) self->dictionary_->onlyincompound_)) {
          continue;
        }
      }
      [stems addWithId:OrgApacheLuceneAnalysisHunspellStemmer_newStemWithCharArray_withInt_withOrgApacheLuceneUtilIntsRef_withInt_(self, word, length, forms, i)];
    }
  }
  @try {
    jboolean v = [stems addAllWithJavaUtilCollection:OrgApacheLuceneAnalysisHunspellStemmer_stemWithCharArray_withInt_withInt_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(self, word, length, -1, -1, -1, 0, true, true, false, false, caseVariant)];
  }
  @catch (JavaIoIOException *bogus) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(bogus);
  }
  return stems;
}

OrgApacheLuceneUtilCharsRef *OrgApacheLuceneAnalysisHunspellStemmer_newStemWithCharArray_withInt_withOrgApacheLuceneUtilIntsRef_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *buffer, jint length, OrgApacheLuceneUtilIntsRef *forms, jint formID) {
  NSString *exception;
  if (((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_))->hasStemExceptions_) {
    jint exceptionID = IOSIntArray_Get(nil_chk(((OrgApacheLuceneUtilIntsRef *) nil_chk(forms))->ints_), forms->offset_ + formID + 1);
    if (exceptionID > 0) {
      exception = [self->dictionary_ getStemExceptionWithInt:exceptionID];
    }
    else {
      exception = nil;
    }
  }
  else {
    exception = nil;
  }
  if (self->dictionary_->needsOutputCleaning_) {
    [((JavaLangStringBuilder *) nil_chk(self->scratchSegment_)) setLengthWithInt:0];
    if (exception != nil) {
      [self->scratchSegment_ appendWithNSString:exception];
    }
    else {
      [self->scratchSegment_ appendWithCharArray:buffer withInt:0 withInt:length];
    }
    @try {
      OrgApacheLuceneAnalysisHunspellDictionary_applyMappingsWithOrgApacheLuceneUtilFstFST_withJavaLangStringBuilder_(self->dictionary_->oconv_, self->scratchSegment_);
    }
    @catch (JavaIoIOException *bogus) {
      @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(bogus);
    }
    IOSCharArray *cleaned = [IOSCharArray arrayWithLength:[self->scratchSegment_ java_length]];
    [self->scratchSegment_ getCharsWithInt:0 withInt:cleaned->size_ withCharArray:cleaned withInt:0];
    return create_OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(cleaned, 0, cleaned->size_);
  }
  else {
    if (exception != nil) {
      return create_OrgApacheLuceneUtilCharsRef_initWithNSString_(exception);
    }
    else {
      return create_OrgApacheLuceneUtilCharsRef_initWithCharArray_withInt_withInt_(buffer, 0, length);
    }
  }
}

id<JavaUtilList> OrgApacheLuceneAnalysisHunspellStemmer_stemWithCharArray_withInt_withInt_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneAnalysisHunspellStemmer *self, IOSCharArray *word, jint length, jint previous, jint prevFlag, jint prefixFlag, jint recursionDepth, jboolean doPrefix, jboolean doSuffix, jboolean previousWasPrefix, jboolean circumfix, jboolean caseVariant) {
  id<JavaUtilList> stems = create_JavaUtilArrayList_init();
  if (doPrefix && ((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_))->prefixes_ != nil) {
    OrgApacheLuceneUtilFstFST *fst = JreRetainedLocalValue(((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_))->prefixes_);
    OrgApacheLuceneUtilFstOutputs *outputs = JreRetainedLocalValue(fst->outputs_);
    OrgApacheLuceneUtilFstFST_BytesReader *bytesReader = IOSObjectArray_Get(nil_chk(self->prefixReaders_), recursionDepth);
    OrgApacheLuceneUtilFstFST_Arc *arc = IOSObjectArray_Get(nil_chk(self->prefixArcs_), recursionDepth);
    [fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:arc];
    OrgApacheLuceneUtilIntsRef *NO_OUTPUT = JreRetainedLocalValue([((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs)) getNoOutput]);
    OrgApacheLuceneUtilIntsRef *output = JreRetainedLocalValue(NO_OUTPUT);
    jint limit = self->dictionary_->fullStrip_ ? length : length - 1;
    for (jint i = 0; i < limit; i++) {
      if (i > 0) {
        jint ch = IOSCharArray_Get(nil_chk(word), i - 1);
        if ([fst findTargetArcWithInt:ch withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:bytesReader] == nil) {
          break;
        }
        else if (!JreObjectEqualsEquals(((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_, NO_OUTPUT)) {
          output = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) addWithId:output withId:arc->output_];
        }
      }
      OrgApacheLuceneUtilIntsRef *prefixes = nil;
      if (![((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]) {
        continue;
      }
      else {
        prefixes = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) addWithId:output withId:arc->nextFinalOutput_];
      }
      for (jint j = 0; j < ((OrgApacheLuceneUtilIntsRef *) nil_chk(prefixes))->length_; j++) {
        jint prefix = IOSIntArray_Get(nil_chk(prefixes->ints_), prefixes->offset_ + j);
        if (prefix == previous) {
          continue;
        }
        [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->affixReader_)) setPositionWithInt:8 * prefix];
        jchar flag = (jchar) ([self->affixReader_ readShort] & (jint) 0xffff);
        jchar stripOrd = (jchar) ([self->affixReader_ readShort] & (jint) 0xffff);
        jint condition = (jchar) ([self->affixReader_ readShort] & (jint) 0xffff);
        jboolean crossProduct = (condition & 1) == 1;
        JreURShiftAssignInt(&condition, 1);
        jchar append = (jchar) ([self->affixReader_ readShort] & (jint) 0xffff);
        jboolean compatible;
        if (recursionDepth == 0) {
          if (self->dictionary_->onlyincompound_ == -1) {
            compatible = true;
          }
          else {
            [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(self->dictionary_->flagLookup_)) getWithInt:append withOrgApacheLuceneUtilBytesRef:self->scratch_];
            IOSCharArray *appendFlags = OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(self->scratch_);
            compatible = !OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(appendFlags, (jchar) self->dictionary_->onlyincompound_);
          }
        }
        else if (crossProduct) {
          [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(self->dictionary_->flagLookup_)) getWithInt:append withOrgApacheLuceneUtilBytesRef:self->scratch_];
          IOSCharArray *appendFlags = OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(self->scratch_);
          JreAssert(prevFlag >= 0, @"org/apache/lucene/analysis/hunspell/Stemmer.java:352 condition failed: assert prevFlag >= 0;");
          jboolean allowed = self->dictionary_->onlyincompound_ == -1 || !OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(appendFlags, (jchar) self->dictionary_->onlyincompound_);
          compatible = (allowed && OrgApacheLuceneAnalysisHunspellStemmer_hasCrossCheckedFlagWithChar_withCharArray_withBoolean_(self, (jchar) prevFlag, appendFlags, false));
        }
        else {
          compatible = false;
        }
        if (compatible) {
          jint deAffixedStart = i;
          jint deAffixedLength = length - deAffixedStart;
          jint stripStart = IOSIntArray_Get(nil_chk(self->dictionary_->stripOffsets_), stripOrd);
          jint stripEnd = IOSIntArray_Get(self->dictionary_->stripOffsets_, stripOrd + 1);
          jint stripLength = stripEnd - stripStart;
          if (!OrgApacheLuceneAnalysisHunspellStemmer_checkConditionWithInt_withCharArray_withInt_withInt_withCharArray_withInt_withInt_(self, condition, self->dictionary_->stripData_, stripStart, stripLength, word, deAffixedStart, deAffixedLength)) {
            continue;
          }
          IOSCharArray *strippedWord = [IOSCharArray arrayWithLength:stripLength + deAffixedLength];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->dictionary_->stripData_, stripStart, strippedWord, 0, stripLength);
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(word, deAffixedStart, strippedWord, stripLength, deAffixedLength);
          id<JavaUtilList> stemList = JreRetainedLocalValue([self applyAffixWithCharArray:strippedWord withInt:strippedWord->size_ withInt:prefix withInt:-1 withInt:recursionDepth withBoolean:true withBoolean:circumfix withBoolean:caseVariant]);
          [stems addAllWithJavaUtilCollection:stemList];
        }
      }
    }
  }
  if (doSuffix && ((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_))->suffixes_ != nil) {
    OrgApacheLuceneUtilFstFST *fst = JreRetainedLocalValue(((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_))->suffixes_);
    OrgApacheLuceneUtilFstOutputs *outputs = JreRetainedLocalValue(fst->outputs_);
    OrgApacheLuceneUtilFstFST_BytesReader *bytesReader = IOSObjectArray_Get(nil_chk(self->suffixReaders_), recursionDepth);
    OrgApacheLuceneUtilFstFST_Arc *arc = IOSObjectArray_Get(nil_chk(self->suffixArcs_), recursionDepth);
    [fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:arc];
    OrgApacheLuceneUtilIntsRef *NO_OUTPUT = JreRetainedLocalValue([((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs)) getNoOutput]);
    OrgApacheLuceneUtilIntsRef *output = JreRetainedLocalValue(NO_OUTPUT);
    jint limit = self->dictionary_->fullStrip_ ? 0 : 1;
    for (jint i = length; i >= limit; i--) {
      if (i < length) {
        jint ch = IOSCharArray_Get(nil_chk(word), i);
        if ([fst findTargetArcWithInt:ch withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:bytesReader] == nil) {
          break;
        }
        else if (!JreObjectEqualsEquals(((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_, NO_OUTPUT)) {
          output = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) addWithId:output withId:arc->output_];
        }
      }
      OrgApacheLuceneUtilIntsRef *suffixes = nil;
      if (![((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal]) {
        continue;
      }
      else {
        suffixes = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) addWithId:output withId:arc->nextFinalOutput_];
      }
      for (jint j = 0; j < ((OrgApacheLuceneUtilIntsRef *) nil_chk(suffixes))->length_; j++) {
        jint suffix = IOSIntArray_Get(nil_chk(suffixes->ints_), suffixes->offset_ + j);
        if (suffix == previous) {
          continue;
        }
        [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->affixReader_)) setPositionWithInt:8 * suffix];
        jchar flag = (jchar) ([self->affixReader_ readShort] & (jint) 0xffff);
        jchar stripOrd = (jchar) ([self->affixReader_ readShort] & (jint) 0xffff);
        jint condition = (jchar) ([self->affixReader_ readShort] & (jint) 0xffff);
        jboolean crossProduct = (condition & 1) == 1;
        JreURShiftAssignInt(&condition, 1);
        jchar append = (jchar) ([self->affixReader_ readShort] & (jint) 0xffff);
        jboolean compatible;
        if (recursionDepth == 0) {
          if (self->dictionary_->onlyincompound_ == -1) {
            compatible = true;
          }
          else {
            [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(self->dictionary_->flagLookup_)) getWithInt:append withOrgApacheLuceneUtilBytesRef:self->scratch_];
            IOSCharArray *appendFlags = OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(self->scratch_);
            compatible = !OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(appendFlags, (jchar) self->dictionary_->onlyincompound_);
          }
        }
        else if (crossProduct) {
          [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(self->dictionary_->flagLookup_)) getWithInt:append withOrgApacheLuceneUtilBytesRef:self->scratch_];
          IOSCharArray *appendFlags = OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(self->scratch_);
          JreAssert(prevFlag >= 0, @"org/apache/lucene/analysis/hunspell/Stemmer.java:436 condition failed: assert prevFlag >= 0;");
          jboolean allowed = self->dictionary_->onlyincompound_ == -1 || !OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(appendFlags, (jchar) self->dictionary_->onlyincompound_);
          compatible = (allowed && OrgApacheLuceneAnalysisHunspellStemmer_hasCrossCheckedFlagWithChar_withCharArray_withBoolean_(self, (jchar) prevFlag, appendFlags, previousWasPrefix));
        }
        else {
          compatible = false;
        }
        if (compatible) {
          jint appendLength = length - i;
          jint deAffixedLength = length - appendLength;
          jint stripStart = IOSIntArray_Get(nil_chk(self->dictionary_->stripOffsets_), stripOrd);
          jint stripEnd = IOSIntArray_Get(self->dictionary_->stripOffsets_, stripOrd + 1);
          jint stripLength = stripEnd - stripStart;
          if (!OrgApacheLuceneAnalysisHunspellStemmer_checkConditionWithInt_withCharArray_withInt_withInt_withCharArray_withInt_withInt_(self, condition, word, 0, deAffixedLength, self->dictionary_->stripData_, stripStart, stripLength)) {
            continue;
          }
          IOSCharArray *strippedWord = [IOSCharArray arrayWithLength:stripLength + deAffixedLength];
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(word, 0, strippedWord, 0, deAffixedLength);
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->dictionary_->stripData_, stripStart, strippedWord, deAffixedLength, stripLength);
          id<JavaUtilList> stemList = JreRetainedLocalValue([self applyAffixWithCharArray:strippedWord withInt:strippedWord->size_ withInt:suffix withInt:prefixFlag withInt:recursionDepth withBoolean:false withBoolean:circumfix withBoolean:caseVariant]);
          [stems addAllWithJavaUtilCollection:stemList];
        }
      }
    }
  }
  return stems;
}

jboolean OrgApacheLuceneAnalysisHunspellStemmer_checkConditionWithInt_withCharArray_withInt_withInt_withCharArray_withInt_withInt_(OrgApacheLuceneAnalysisHunspellStemmer *self, jint condition, IOSCharArray *c1, jint c1off, jint c1len, IOSCharArray *c2, jint c2off, jint c2len) {
  if (condition != 0) {
    OrgApacheLuceneUtilAutomatonCharacterRunAutomaton *pattern = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(((OrgApacheLuceneAnalysisHunspellDictionary *) nil_chk(self->dictionary_))->patterns_)) getWithInt:condition]);
    jint state = [((OrgApacheLuceneUtilAutomatonCharacterRunAutomaton *) nil_chk(pattern)) getInitialState];
    for (jint i = c1off; i < c1off + c1len; i++) {
      state = [pattern stepWithInt:state withInt:IOSCharArray_Get(nil_chk(c1), i)];
      if (state == -1) {
        return false;
      }
    }
    for (jint i = c2off; i < c2off + c2len; i++) {
      state = [pattern stepWithInt:state withInt:IOSCharArray_Get(nil_chk(c2), i)];
      if (state == -1) {
        return false;
      }
    }
    return [pattern isAcceptWithInt:state];
  }
  return true;
}

jboolean OrgApacheLuceneAnalysisHunspellStemmer_hasCrossCheckedFlagWithChar_withCharArray_withBoolean_(OrgApacheLuceneAnalysisHunspellStemmer *self, jchar flag, IOSCharArray *flags, jboolean matchEmpty) {
  return (((IOSCharArray *) nil_chk(flags))->size_ == 0 && matchEmpty) || JavaUtilArrays_binarySearchWithCharArray_withChar_(flags, flag) >= 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisHunspellStemmer)
