//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/BufferedReader.h"
#include "java/io/Closeable.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/LineNumberReader.h"
#include "java/io/OutputStream.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
// #include "org/apache/lucene/analysis/hunspell/ISO8859_14Decoder.h" // disabled by translate.py
#include "org/apache/lucene/store/ByteArrayDataOutput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/CharacterRunAutomaton.h"
#include "org/apache/lucene/util/automaton/RegExp.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/CharSequenceOutputs.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/IntSequenceOutputs.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "org/lukhnos/portmobile/charset/StandardCharsets.h"
#include "org/lukhnos/portmobile/file/Files.h"
#include "org/lukhnos/portmobile/file/Path.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/hunspell/Dictionary must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheLuceneAnalysisHunspellDictionary () {
 @public
  jint currentAffix_;
  OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *flagParsingStrategy_;
  IOSObjectArray *aliases_;
  jint aliasCount_;
  IOSObjectArray *morphAliases_;
  jint morphAliasCount_;
  IOSObjectArray *stemExceptions_;
  jint stemExceptionCount_;
  OrgLukhnosPortmobileFilePath *tempDir_;
  IOSCharArray *ignore_;
}

/*!
 @brief Reads the affix file through the provided InputStream, building up the prefix and suffix maps
 @param affixStream InputStream to read the content of the affix file from
 @param decoder CharsetDecoder to decode the content of the file
 @throw IOExceptionCan be thrown while reading from the InputStream
 */
- (void)readAffixFileWithJavaIoInputStream:(JavaIoInputStream *)affixStream
          withJavaNioCharsetCharsetDecoder:(JavaNioCharsetCharsetDecoder *)decoder;

- (OrgApacheLuceneUtilFstFST *)affixFSTWithJavaUtilTreeMap:(JavaUtilTreeMap *)affixes;

/*!
 @brief Parses a specific affix rule putting the result into the provided affix map
 @param affixes Map where the result of the parsing will be put
 @param header Header line of the affix rule
 @param reader BufferedReader to read the content of the rule from
 @param conditionPattern<code>String.format(String, Object...)</code>  pattern to be used to generate the condition regex                          pattern
 @param seenPatterns map from condition - &gt;  index of patterns, for deduplication.
 @throw IOExceptionCan be thrown while reading the rule
 */
- (void)parseAffixWithJavaUtilTreeMap:(JavaUtilTreeMap *)affixes
                         withNSString:(NSString *)header
           withJavaIoLineNumberReader:(JavaIoLineNumberReader *)reader
                         withNSString:(NSString *)conditionPattern
                      withJavaUtilMap:(id<JavaUtilMap>)seenPatterns
                      withJavaUtilMap:(id<JavaUtilMap>)seenStrips;

- (OrgApacheLuceneUtilFstFST *)parseConversionsWithJavaIoLineNumberReader:(JavaIoLineNumberReader *)reader
                                                                  withInt:(jint)num;

/*!
 @brief Retrieves the CharsetDecoder for the given encoding.Note, This isn't perfect as I think ISCII-DEVANAGARI and
  MICROSOFT-CP1251 etc are allowed...
 @param encoding Encoding to retrieve the CharsetDecoder for
 @return CharSetDecoder for the given encoding
 */
- (JavaNioCharsetCharsetDecoder *)getJavaEncodingWithNSString:(NSString *)encoding;

/*!
 @brief Reads the dictionary file through the provided InputStreams, building up the words map
 @param dictionaries InputStreams to read the dictionary file through
 @param decoder CharsetDecoder used to decode the contents of the file
 @throw IOExceptionCan be thrown while reading from the file
 */
- (void)readDictionaryFilesWithJavaUtilList:(id<JavaUtilList>)dictionaries
           withJavaNioCharsetCharsetDecoder:(JavaNioCharsetCharsetDecoder *)decoder
          withOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)words;

- (void)parseAliasWithNSString:(NSString *)line;

- (NSString *)getAliasValueWithInt:(jint)id_;

- (void)parseMorphAliasWithNSString:(NSString *)line;

- (NSString *)parseStemExceptionWithNSString:(NSString *)morphData;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, flagParsingStrategy_, OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, aliases_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, morphAliases_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, stemExceptions_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, tempDir_, OrgLukhnosPortmobileFilePath *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, ignore_, IOSCharArray *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_ALIAS_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_ALIAS_KEY = @"AF";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, ALIAS_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_MORPH_ALIAS_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_MORPH_ALIAS_KEY = @"AM";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, MORPH_ALIAS_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_PREFIX_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_PREFIX_KEY = @"PFX";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, PREFIX_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_SUFFIX_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_SUFFIX_KEY = @"SFX";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, SUFFIX_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_FLAG_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_FLAG_KEY = @"FLAG";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, FLAG_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_COMPLEXPREFIXES_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_COMPLEXPREFIXES_KEY = @"COMPLEXPREFIXES";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, COMPLEXPREFIXES_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_CIRCUMFIX_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_CIRCUMFIX_KEY = @"CIRCUMFIX";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, CIRCUMFIX_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_IGNORE_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_IGNORE_KEY = @"IGNORE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, IGNORE_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_ICONV_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_ICONV_KEY = @"ICONV";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, ICONV_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_OCONV_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_OCONV_KEY = @"OCONV";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, OCONV_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_FULLSTRIP_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_FULLSTRIP_KEY = @"FULLSTRIP";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, FULLSTRIP_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_LANG_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_LANG_KEY = @"LANG";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, LANG_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_KEEPCASE_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_KEEPCASE_KEY = @"KEEPCASE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, KEEPCASE_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_NEEDAFFIX_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_NEEDAFFIX_KEY = @"NEEDAFFIX";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, NEEDAFFIX_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_PSEUDOROOT_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_PSEUDOROOT_KEY = @"PSEUDOROOT";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, PSEUDOROOT_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_ONLYINCOMPOUND_KEY(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_ONLYINCOMPOUND_KEY = @"ONLYINCOMPOUND";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, ONLYINCOMPOUND_KEY, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_NUM_FLAG_TYPE(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_NUM_FLAG_TYPE = @"num";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, NUM_FLAG_TYPE, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_UTF8_FLAG_TYPE(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_UTF8_FLAG_TYPE = @"UTF-8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, UTF8_FLAG_TYPE, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_LONG_FLAG_TYPE(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_LONG_FLAG_TYPE = @"long";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, LONG_FLAG_TYPE, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_PREFIX_CONDITION_REGEX_PATTERN(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_PREFIX_CONDITION_REGEX_PATTERN = @"%s.*";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, PREFIX_CONDITION_REGEX_PATTERN, NSString *)

inline NSString *OrgApacheLuceneAnalysisHunspellDictionary_get_SUFFIX_CONDITION_REGEX_PATTERN(void);
static NSString *OrgApacheLuceneAnalysisHunspellDictionary_SUFFIX_CONDITION_REGEX_PATTERN = @".*%s";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, SUFFIX_CONDITION_REGEX_PATTERN, NSString *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellDictionary_readAffixFileWithJavaIoInputStream_withJavaNioCharsetCharsetDecoder_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaIoInputStream *affixStream, JavaNioCharsetCharsetDecoder *decoder);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST *OrgApacheLuceneAnalysisHunspellDictionary_affixFSTWithJavaUtilTreeMap_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaUtilTreeMap *affixes);

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellDictionary_parseAffixWithJavaUtilTreeMap_withNSString_withJavaIoLineNumberReader_withNSString_withJavaUtilMap_withJavaUtilMap_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaUtilTreeMap *affixes, NSString *header, JavaIoLineNumberReader *reader, NSString *conditionPattern, id<JavaUtilMap> seenPatterns, id<JavaUtilMap> seenStrips);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST *OrgApacheLuceneAnalysisHunspellDictionary_parseConversionsWithJavaIoLineNumberReader_withInt_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaIoLineNumberReader *reader, jint num);

__attribute__((unused)) static JavaNioCharsetCharsetDecoder *OrgApacheLuceneAnalysisHunspellDictionary_getJavaEncodingWithNSString_(OrgApacheLuceneAnalysisHunspellDictionary *self, NSString *encoding);

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellDictionary_readDictionaryFilesWithJavaUtilList_withJavaNioCharsetCharsetDecoder_withOrgApacheLuceneUtilFstBuilder_(OrgApacheLuceneAnalysisHunspellDictionary *self, id<JavaUtilList> dictionaries, JavaNioCharsetCharsetDecoder *decoder, OrgApacheLuceneUtilFstBuilder *words);

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellDictionary_parseAliasWithNSString_(OrgApacheLuceneAnalysisHunspellDictionary *self, NSString *line);

__attribute__((unused)) static NSString *OrgApacheLuceneAnalysisHunspellDictionary_getAliasValueWithInt_(OrgApacheLuceneAnalysisHunspellDictionary *self, jint id_);

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellDictionary_parseMorphAliasWithNSString_(OrgApacheLuceneAnalysisHunspellDictionary *self, NSString *line);

__attribute__((unused)) static NSString *OrgApacheLuceneAnalysisHunspellDictionary_parseStemExceptionWithNSString_(OrgApacheLuceneAnalysisHunspellDictionary *self, NSString *morphData);

@interface OrgApacheLuceneAnalysisHunspellDictionary_1 : NSObject < JavaUtilComparator > {
 @public
  OrgApacheLuceneUtilBytesRef *scratch1_;
  OrgApacheLuceneUtilBytesRef *scratch2_;
}

- (instancetype)init;

- (jint)compareWithId:(OrgApacheLuceneUtilBytesRef *)o1
               withId:(OrgApacheLuceneUtilBytesRef *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisHunspellDictionary_1)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary_1, scratch1_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary_1, scratch2_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellDictionary_1_init(OrgApacheLuceneAnalysisHunspellDictionary_1 *self);

__attribute__((unused)) static OrgApacheLuceneAnalysisHunspellDictionary_1 *new_OrgApacheLuceneAnalysisHunspellDictionary_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisHunspellDictionary_1 *create_OrgApacheLuceneAnalysisHunspellDictionary_1_init(void);

/*!
 @brief Simple implementation of <code>FlagParsingStrategy</code> that treats the chars in each String as a individual flags.
 Can be used with both the ASCII and UTF-8 flag types.
 */
@interface OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy : OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy

- (instancetype)init;

- (IOSCharArray *)parseFlagsWithNSString:(NSString *)rawFlags;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy)

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy_init(OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy *self);

__attribute__((unused)) static OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy *new_OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy *create_OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy)

/*!
 @brief Implementation of <code>FlagParsingStrategy</code> that assumes each flag is encoded in its numerical form.In the case
  of multiple flags, each number is separated by a comma.
 */
@interface OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy : OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy

- (instancetype)init;

- (IOSCharArray *)parseFlagsWithNSString:(NSString *)rawFlags;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy)

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy_init(OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy *self);

__attribute__((unused)) static OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy *new_OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy *create_OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy)

/*!
 @brief Implementation of <code>FlagParsingStrategy</code> that assumes each flag is encoded as two ASCII characters whose codes
  must be combined into a single character.
 */
@interface OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy : OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy

- (instancetype)init;

- (IOSCharArray *)parseFlagsWithNSString:(NSString *)rawFlags;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy)

__attribute__((unused)) static void OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy_init(OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy *self);

__attribute__((unused)) static OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy *new_OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy *create_OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisHunspellDictionary)

IOSCharArray *OrgApacheLuceneAnalysisHunspellDictionary_NOFLAGS;
JavaUtilRegexPattern *OrgApacheLuceneAnalysisHunspellDictionary_ENCODING_PATTERN;
id<JavaUtilMap> OrgApacheLuceneAnalysisHunspellDictionary_CHARSET_ALIASES;

@implementation OrgApacheLuceneAnalysisHunspellDictionary

+ (IOSCharArray *)NOFLAGS {
  return OrgApacheLuceneAnalysisHunspellDictionary_NOFLAGS;
}

+ (JavaUtilRegexPattern *)ENCODING_PATTERN {
  return OrgApacheLuceneAnalysisHunspellDictionary_ENCODING_PATTERN;
}

+ (id<JavaUtilMap>)CHARSET_ALIASES {
  return OrgApacheLuceneAnalysisHunspellDictionary_CHARSET_ALIASES;
}

+ (jchar)FLAG_SEPARATOR {
  return OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR;
}

+ (jchar)MORPH_SEPARATOR {
  return OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)affix
                    withJavaIoInputStream:(JavaIoInputStream *)dictionary {
  OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaIoInputStream_(self, affix, dictionary);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)affix
                         withJavaUtilList:(id<JavaUtilList>)dictionaries
                              withBoolean:(jboolean)ignoreCase {
  OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaUtilList_withBoolean_(self, affix, dictionaries, ignoreCase);
  return self;
}

- (OrgApacheLuceneUtilIntsRef *)lookupWordWithCharArray:(IOSCharArray *)word
                                                withInt:(jint)offset
                                                withInt:(jint)length {
  return [self lookupWithOrgApacheLuceneUtilFstFST:words_ withCharArray:word withInt:offset withInt:length];
}

- (OrgApacheLuceneUtilIntsRef *)lookupPrefixWithCharArray:(IOSCharArray *)word
                                                  withInt:(jint)offset
                                                  withInt:(jint)length {
  return [self lookupWithOrgApacheLuceneUtilFstFST:prefixes_ withCharArray:word withInt:offset withInt:length];
}

- (OrgApacheLuceneUtilIntsRef *)lookupSuffixWithCharArray:(IOSCharArray *)word
                                                  withInt:(jint)offset
                                                  withInt:(jint)length {
  return [self lookupWithOrgApacheLuceneUtilFstFST:suffixes_ withCharArray:word withInt:offset withInt:length];
}

- (OrgApacheLuceneUtilIntsRef *)lookupWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                      withCharArray:(IOSCharArray *)word
                                                            withInt:(jint)offset
                                                            withInt:(jint)length {
  if (fst == nil) {
    return nil;
  }
  OrgApacheLuceneUtilFstFST_BytesReader *bytesReader = [fst getBytesReader];
  OrgApacheLuceneUtilFstFST_Arc *arc = [fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  OrgApacheLuceneUtilIntsRef *NO_OUTPUT = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput];
  OrgApacheLuceneUtilIntsRef *output = JreRetainedLocalValue(NO_OUTPUT);
  jint l = offset + length;
  @try {
    for (jint i = offset, cp = 0; i < l; i += JavaLangCharacter_charCountWithInt_(cp)) {
      cp = JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(word, i, l);
      if ([fst findTargetArcWithInt:cp withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:bytesReader] == nil) {
        return nil;
      }
      else if (!JreObjectEqualsEquals(((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_, NO_OUTPUT)) {
        output = [fst->outputs_ addWithId:output withId:arc->output_];
      }
    }
    if ([fst findTargetArcWithInt:OrgApacheLuceneUtilFstFST_END_LABEL withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:bytesReader] == nil) {
      return nil;
    }
    else if (!JreObjectEqualsEquals(((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_, NO_OUTPUT)) {
      return [fst->outputs_ addWithId:output withId:arc->output_];
    }
    else {
      return output;
    }
  }
  @catch (JavaIoIOException *bogus) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(bogus);
  }
}

- (void)readAffixFileWithJavaIoInputStream:(JavaIoInputStream *)affixStream
          withJavaNioCharsetCharsetDecoder:(JavaNioCharsetCharsetDecoder *)decoder {
  OrgApacheLuceneAnalysisHunspellDictionary_readAffixFileWithJavaIoInputStream_withJavaNioCharsetCharsetDecoder_(self, affixStream, decoder);
}

- (OrgApacheLuceneUtilFstFST *)affixFSTWithJavaUtilTreeMap:(JavaUtilTreeMap *)affixes {
  return OrgApacheLuceneAnalysisHunspellDictionary_affixFSTWithJavaUtilTreeMap_(self, affixes);
}

+ (NSString *)escapeDashWithNSString:(NSString *)re {
  return OrgApacheLuceneAnalysisHunspellDictionary_escapeDashWithNSString_(re);
}

- (void)parseAffixWithJavaUtilTreeMap:(JavaUtilTreeMap *)affixes
                         withNSString:(NSString *)header
           withJavaIoLineNumberReader:(JavaIoLineNumberReader *)reader
                         withNSString:(NSString *)conditionPattern
                      withJavaUtilMap:(id<JavaUtilMap>)seenPatterns
                      withJavaUtilMap:(id<JavaUtilMap>)seenStrips {
  OrgApacheLuceneAnalysisHunspellDictionary_parseAffixWithJavaUtilTreeMap_withNSString_withJavaIoLineNumberReader_withNSString_withJavaUtilMap_withJavaUtilMap_(self, affixes, header, reader, conditionPattern, seenPatterns, seenStrips);
}

- (OrgApacheLuceneUtilFstFST *)parseConversionsWithJavaIoLineNumberReader:(JavaIoLineNumberReader *)reader
                                                                  withInt:(jint)num {
  return OrgApacheLuceneAnalysisHunspellDictionary_parseConversionsWithJavaIoLineNumberReader_withInt_(self, reader, num);
}

+ (NSString *)getDictionaryEncodingWithJavaIoInputStream:(JavaIoInputStream *)affix {
  return OrgApacheLuceneAnalysisHunspellDictionary_getDictionaryEncodingWithJavaIoInputStream_(affix);
}

- (JavaNioCharsetCharsetDecoder *)getJavaEncodingWithNSString:(NSString *)encoding {
  return OrgApacheLuceneAnalysisHunspellDictionary_getJavaEncodingWithNSString_(self, encoding);
}

+ (OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *)getFlagParsingStrategyWithNSString:(NSString *)flagLine {
  return OrgApacheLuceneAnalysisHunspellDictionary_getFlagParsingStrategyWithNSString_(flagLine);
}

- (NSString *)unescapeEntryWithNSString:(NSString *)entry_ {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  jint end = OrgApacheLuceneAnalysisHunspellDictionary_morphBoundaryWithNSString_(entry_);
  for (jint i = 0; i < end; i++) {
    jchar ch = [((NSString *) nil_chk(entry_)) charAtWithInt:i];
    if (ch == '\\' && i + 1 < [entry_ java_length]) {
      [sb appendWithChar:[entry_ charAtWithInt:i + 1]];
      i++;
    }
    else if (ch == '/') {
      [sb appendWithChar:OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR];
    }
    else if (ch == OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR || ch == OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR) {
    }
    else {
      [sb appendWithChar:ch];
    }
  }
  [sb appendWithChar:OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR];
  if (end < [((NSString *) nil_chk(entry_)) java_length]) {
    for (jint i = end; i < [entry_ java_length]; i++) {
      jchar c = [entry_ charAtWithInt:i];
      if (c == OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR || c == OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR) {
      }
      else {
        [sb appendWithChar:c];
      }
    }
  }
  return [sb description];
}

+ (jint)morphBoundaryWithNSString:(NSString *)line {
  return OrgApacheLuceneAnalysisHunspellDictionary_morphBoundaryWithNSString_(line);
}

+ (jint)indexOfSpaceOrTabWithNSString:(NSString *)text
                              withInt:(jint)start {
  return OrgApacheLuceneAnalysisHunspellDictionary_indexOfSpaceOrTabWithNSString_withInt_(text, start);
}

- (void)readDictionaryFilesWithJavaUtilList:(id<JavaUtilList>)dictionaries
           withJavaNioCharsetCharsetDecoder:(JavaNioCharsetCharsetDecoder *)decoder
          withOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)words {
  OrgApacheLuceneAnalysisHunspellDictionary_readDictionaryFilesWithJavaUtilList_withJavaNioCharsetCharsetDecoder_withOrgApacheLuceneUtilFstBuilder_(self, dictionaries, decoder, words);
}

+ (IOSCharArray *)decodeFlagsWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b {
  return OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(b);
}

+ (void)encodeFlagsWithOrgApacheLuceneUtilBytesRefBuilder:(OrgApacheLuceneUtilBytesRefBuilder *)b
                                            withCharArray:(IOSCharArray *)flags {
  OrgApacheLuceneAnalysisHunspellDictionary_encodeFlagsWithOrgApacheLuceneUtilBytesRefBuilder_withCharArray_(b, flags);
}

- (void)parseAliasWithNSString:(NSString *)line {
  OrgApacheLuceneAnalysisHunspellDictionary_parseAliasWithNSString_(self, line);
}

- (NSString *)getAliasValueWithInt:(jint)id_ {
  return OrgApacheLuceneAnalysisHunspellDictionary_getAliasValueWithInt_(self, id_);
}

- (NSString *)getStemExceptionWithInt:(jint)id_ {
  return IOSObjectArray_Get(nil_chk(stemExceptions_), id_ - 1);
}

- (void)parseMorphAliasWithNSString:(NSString *)line {
  OrgApacheLuceneAnalysisHunspellDictionary_parseMorphAliasWithNSString_(self, line);
}

- (NSString *)parseStemExceptionWithNSString:(NSString *)morphData {
  return OrgApacheLuceneAnalysisHunspellDictionary_parseStemExceptionWithNSString_(self, morphData);
}

+ (jboolean)hasFlagWithCharArray:(IOSCharArray *)flags
                        withChar:(jchar)flag {
  return OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(flags, flag);
}

- (id<JavaLangCharSequence>)cleanInputWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)reuse {
  [((JavaLangStringBuilder *) nil_chk(reuse)) setLengthWithInt:0];
  for (jint i = 0; i < [((id<JavaLangCharSequence>) nil_chk(input)) java_length]; i++) {
    jchar ch = [input charAtWithInt:i];
    if (ignore_ != nil && JavaUtilArrays_binarySearchWithCharArray_withChar_(ignore_, ch) >= 0) {
      continue;
    }
    if (ignoreCase_ && iconv_ == nil) {
      ch = [self caseFoldWithChar:ch];
    }
    [reuse appendWithChar:ch];
  }
  if (iconv_ != nil) {
    @try {
      OrgApacheLuceneAnalysisHunspellDictionary_applyMappingsWithOrgApacheLuceneUtilFstFST_withJavaLangStringBuilder_(iconv_, reuse);
    }
    @catch (JavaIoIOException *bogus) {
      @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(bogus);
    }
    if (ignoreCase_) {
      for (jint i = 0; i < [reuse java_length]; i++) {
        [reuse setCharAtWithInt:i withChar:[self caseFoldWithChar:[reuse charAtWithInt:i]]];
      }
    }
  }
  return reuse;
}

- (jchar)caseFoldWithChar:(jchar)c {
  if (alternateCasing_) {
    if (c == 'I') {
      return 0x0131;
    }
    else if (c == 0x0130) {
      return 'i';
    }
    else {
      return JavaLangCharacter_toLowerCaseWithChar_(c);
    }
  }
  else {
    return JavaLangCharacter_toLowerCaseWithChar_(c);
  }
}

+ (void)applyMappingsWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                         withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  OrgApacheLuceneAnalysisHunspellDictionary_applyMappingsWithOrgApacheLuceneUtilFstFST_withJavaLangStringBuilder_(fst, sb);
}

- (void)dealloc {
  RELEASE_(prefixes_);
  RELEASE_(suffixes_);
  RELEASE_(patterns_);
  RELEASE_(words_);
  RELEASE_(flagLookup_);
  RELEASE_(stripData_);
  RELEASE_(stripOffsets_);
  RELEASE_(affixData_);
  RELEASE_(flagParsingStrategy_);
  RELEASE_(aliases_);
  RELEASE_(morphAliases_);
  RELEASE_(stemExceptions_);
  RELEASE_(tempDir_);
  RELEASE_(ignore_);
  RELEASE_(iconv_);
  RELEASE_(oconv_);
  RELEASE_(language_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, 3, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x0, 6, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x0, 7, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilIntsRef;", 0x0, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x2, 11, 12, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST;", 0x2, 13, 14, 15, 16, -1, -1 },
    { NULL, "LNSString;", 0x8, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, 1, 21, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST;", 0x2, 22, 23, 1, 24, -1, -1 },
    { NULL, "LNSString;", 0x8, 25, 26, 1, -1, -1, -1 },
    { NULL, "LJavaNioCharsetCharsetDecoder;", 0x2, 27, 18, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy;", 0x8, 28, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 29, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 30, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, 15, 35, -1, -1 },
    { NULL, "[C", 0x8, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 41, 42, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 43, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 18, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 45, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 46, 47, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x0, 48, 49, -1, -1, -1, -1 },
    { NULL, "C", 0x0, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 52, 53, 15, 54, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withJavaIoInputStream:);
  methods[1].selector = @selector(initWithJavaIoInputStream:withJavaUtilList:withBoolean:);
  methods[2].selector = @selector(lookupWordWithCharArray:withInt:withInt:);
  methods[3].selector = @selector(lookupPrefixWithCharArray:withInt:withInt:);
  methods[4].selector = @selector(lookupSuffixWithCharArray:withInt:withInt:);
  methods[5].selector = @selector(lookupWithOrgApacheLuceneUtilFstFST:withCharArray:withInt:withInt:);
  methods[6].selector = @selector(readAffixFileWithJavaIoInputStream:withJavaNioCharsetCharsetDecoder:);
  methods[7].selector = @selector(affixFSTWithJavaUtilTreeMap:);
  methods[8].selector = @selector(escapeDashWithNSString:);
  methods[9].selector = @selector(parseAffixWithJavaUtilTreeMap:withNSString:withJavaIoLineNumberReader:withNSString:withJavaUtilMap:withJavaUtilMap:);
  methods[10].selector = @selector(parseConversionsWithJavaIoLineNumberReader:withInt:);
  methods[11].selector = @selector(getDictionaryEncodingWithJavaIoInputStream:);
  methods[12].selector = @selector(getJavaEncodingWithNSString:);
  methods[13].selector = @selector(getFlagParsingStrategyWithNSString:);
  methods[14].selector = @selector(unescapeEntryWithNSString:);
  methods[15].selector = @selector(morphBoundaryWithNSString:);
  methods[16].selector = @selector(indexOfSpaceOrTabWithNSString:withInt:);
  methods[17].selector = @selector(readDictionaryFilesWithJavaUtilList:withJavaNioCharsetCharsetDecoder:withOrgApacheLuceneUtilFstBuilder:);
  methods[18].selector = @selector(decodeFlagsWithOrgApacheLuceneUtilBytesRef:);
  methods[19].selector = @selector(encodeFlagsWithOrgApacheLuceneUtilBytesRefBuilder:withCharArray:);
  methods[20].selector = @selector(parseAliasWithNSString:);
  methods[21].selector = @selector(getAliasValueWithInt:);
  methods[22].selector = @selector(getStemExceptionWithInt:);
  methods[23].selector = @selector(parseMorphAliasWithNSString:);
  methods[24].selector = @selector(parseStemExceptionWithNSString:);
  methods[25].selector = @selector(hasFlagWithCharArray:withChar:);
  methods[26].selector = @selector(cleanInputWithJavaLangCharSequence:withJavaLangStringBuilder:);
  methods[27].selector = @selector(caseFoldWithChar:);
  methods[28].selector = @selector(applyMappingsWithOrgApacheLuceneUtilFstFST:withJavaLangStringBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NOFLAGS", "[C", .constantValue.asLong = 0, 0x18, -1, 55, -1, -1 },
    { "ALIAS_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 56, -1, -1 },
    { "MORPH_ALIAS_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "PREFIX_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 58, -1, -1 },
    { "SUFFIX_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "FLAG_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
    { "COMPLEXPREFIXES_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 61, -1, -1 },
    { "CIRCUMFIX_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 62, -1, -1 },
    { "IGNORE_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 63, -1, -1 },
    { "ICONV_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
    { "OCONV_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 65, -1, -1 },
    { "FULLSTRIP_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 66, -1, -1 },
    { "LANG_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 67, -1, -1 },
    { "KEEPCASE_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 68, -1, -1 },
    { "NEEDAFFIX_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 69, -1, -1 },
    { "PSEUDOROOT_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 70, -1, -1 },
    { "ONLYINCOMPOUND_KEY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 71, -1, -1 },
    { "NUM_FLAG_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 72, -1, -1 },
    { "UTF8_FLAG_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 73, -1, -1 },
    { "LONG_FLAG_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 74, -1, -1 },
    { "PREFIX_CONDITION_REGEX_PATTERN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 75, -1, -1 },
    { "SUFFIX_CONDITION_REGEX_PATTERN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 76, -1, -1 },
    { "prefixes_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x0, -1, -1, 77, -1 },
    { "suffixes_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x0, -1, -1, 77, -1 },
    { "patterns_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 78, -1 },
    { "words_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x0, -1, -1, 77, -1 },
    { "flagLookup_", "LOrgApacheLuceneUtilBytesRefHash;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "stripData_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "stripOffsets_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "affixData_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentAffix_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flagParsingStrategy_", "LOrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "aliases_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "aliasCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "morphAliases_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "morphAliasCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stemExceptions_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stemExceptionCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasStemExceptions_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tempDir_", "LOrgLukhnosPortmobileFilePath;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ignoreCase_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "complexPrefixes_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "twoStageAffix_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "circumfix_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "keepcase_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "needaffix_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "onlyincompound_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ignore_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "iconv_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x0, -1, -1, 79, -1 },
    { "oconv_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x0, -1, -1, 79, -1 },
    { "needsInputCleaning_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "needsOutputCleaning_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fullStrip_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "language_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "alternateCasing_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ENCODING_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x18, -1, 80, -1, -1 },
    { "CHARSET_ALIASES", "LJavaUtilMap;", .constantValue.asLong = 0, 0x18, -1, 81, 82, -1 },
    { "FLAG_SEPARATOR", "C", .constantValue.asUnichar = OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR, 0x10, 83, -1, -1, -1 },
    { "MORPH_SEPARATOR", "C", .constantValue.asUnichar = OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR, 0x10, 84, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;LJavaIoInputStream;", "LJavaIoIOException;LJavaTextParseException;", "LJavaIoInputStream;LJavaUtilList;Z", "(Ljava/io/InputStream;Ljava/util/List<Ljava/io/InputStream;>;Z)V", "lookupWord", "[CII", "lookupPrefix", "lookupSuffix", "lookup", "LOrgApacheLuceneUtilFstFST;[CII", "(Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/IntsRef;>;[CII)Lorg/apache/lucene/util/IntsRef;", "readAffixFile", "LJavaIoInputStream;LJavaNioCharsetCharsetDecoder;", "affixFST", "LJavaUtilTreeMap;", "LJavaIoIOException;", "(Ljava/util/TreeMap<Ljava/lang/String;Ljava/util/List<Ljava/lang/Integer;>;>;)Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/IntsRef;>;", "escapeDash", "LNSString;", "parseAffix", "LJavaUtilTreeMap;LNSString;LJavaIoLineNumberReader;LNSString;LJavaUtilMap;LJavaUtilMap;", "(Ljava/util/TreeMap<Ljava/lang/String;Ljava/util/List<Ljava/lang/Integer;>;>;Ljava/lang/String;Ljava/io/LineNumberReader;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;)V", "parseConversions", "LJavaIoLineNumberReader;I", "(Ljava/io/LineNumberReader;I)Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/CharsRef;>;", "getDictionaryEncoding", "LJavaIoInputStream;", "getJavaEncoding", "getFlagParsingStrategy", "unescapeEntry", "morphBoundary", "indexOfSpaceOrTab", "LNSString;I", "readDictionaryFiles", "LJavaUtilList;LJavaNioCharsetCharsetDecoder;LOrgApacheLuceneUtilFstBuilder;", "(Ljava/util/List<Ljava/io/InputStream;>;Ljava/nio/charset/CharsetDecoder;Lorg/apache/lucene/util/fst/Builder<Lorg/apache/lucene/util/IntsRef;>;)V", "decodeFlags", "LOrgApacheLuceneUtilBytesRef;", "encodeFlags", "LOrgApacheLuceneUtilBytesRefBuilder;[C", "parseAlias", "getAliasValue", "I", "getStemException", "parseMorphAlias", "parseStemException", "hasFlag", "[CC", "cleanInput", "LJavaLangCharSequence;LJavaLangStringBuilder;", "caseFold", "C", "applyMappings", "LOrgApacheLuceneUtilFstFST;LJavaLangStringBuilder;", "(Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/CharsRef;>;Ljava/lang/StringBuilder;)V", &OrgApacheLuceneAnalysisHunspellDictionary_NOFLAGS, &OrgApacheLuceneAnalysisHunspellDictionary_ALIAS_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_MORPH_ALIAS_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_PREFIX_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_SUFFIX_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_FLAG_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_COMPLEXPREFIXES_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_CIRCUMFIX_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_IGNORE_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_ICONV_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_OCONV_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_FULLSTRIP_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_LANG_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_KEEPCASE_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_NEEDAFFIX_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_PSEUDOROOT_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_ONLYINCOMPOUND_KEY, &OrgApacheLuceneAnalysisHunspellDictionary_NUM_FLAG_TYPE, &OrgApacheLuceneAnalysisHunspellDictionary_UTF8_FLAG_TYPE, &OrgApacheLuceneAnalysisHunspellDictionary_LONG_FLAG_TYPE, &OrgApacheLuceneAnalysisHunspellDictionary_PREFIX_CONDITION_REGEX_PATTERN, &OrgApacheLuceneAnalysisHunspellDictionary_SUFFIX_CONDITION_REGEX_PATTERN, "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/IntsRef;>;", "Ljava/util/ArrayList<Lorg/apache/lucene/util/automaton/CharacterRunAutomaton;>;", "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/CharsRef;>;", &OrgApacheLuceneAnalysisHunspellDictionary_ENCODING_PATTERN, &OrgApacheLuceneAnalysisHunspellDictionary_CHARSET_ALIASES, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "FLAG_SEPARATOR", "MORPH_SEPARATOR", "LOrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy;LOrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy;LOrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy;LOrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisHunspellDictionary = { "Dictionary", "org.apache.lucene.analysis.hunspell", ptrTable, methods, fields, 7, 0x1, 29, 59, -1, 85, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisHunspellDictionary;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisHunspellDictionary class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisHunspellDictionary_NOFLAGS, [IOSCharArray newArrayWithLength:0]);
    JreStrongAssign(&OrgApacheLuceneAnalysisHunspellDictionary_ENCODING_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"^(\u00ef\u00bb\u00bf)?SET\\s+"));
    {
      id<JavaUtilMap> m = create_JavaUtilHashMap_init();
      [m putWithId:@"microsoft-cp1251" withId:@"windows-1251"];
      [m putWithId:@"TIS620-2533" withId:@"TIS-620"];
      JreStrongAssign(&OrgApacheLuceneAnalysisHunspellDictionary_CHARSET_ALIASES, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(m));
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisHunspellDictionary)
  }
}

@end

void OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaIoInputStream_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaIoInputStream *affix, JavaIoInputStream *dictionary) {
  OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaUtilList_withBoolean_(self, affix, JavaUtilCollections_singletonListWithId_(dictionary), false);
}

OrgApacheLuceneAnalysisHunspellDictionary *new_OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaIoInputStream_(JavaIoInputStream *affix, JavaIoInputStream *dictionary) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisHunspellDictionary, initWithJavaIoInputStream_withJavaIoInputStream_, affix, dictionary)
}

OrgApacheLuceneAnalysisHunspellDictionary *create_OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaIoInputStream_(JavaIoInputStream *affix, JavaIoInputStream *dictionary) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisHunspellDictionary, initWithJavaIoInputStream_withJavaIoInputStream_, affix, dictionary)
}

void OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaUtilList_withBoolean_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaIoInputStream *affix, id<JavaUtilList> dictionaries, jboolean ignoreCase) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->patterns_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->flagLookup_, new_OrgApacheLuceneUtilBytesRefHash_init());
  JreStrongAssignAndConsume(&self->affixData_, [IOSByteArray newArrayWithLength:64]);
  self->currentAffix_ = 0;
  JreStrongAssignAndConsume(&self->flagParsingStrategy_, new_OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy_init());
  self->aliasCount_ = 0;
  self->morphAliasCount_ = 0;
  JreStrongAssignAndConsume(&self->stemExceptions_, [IOSObjectArray newArrayWithLength:8 type:NSString_class_()]);
  self->stemExceptionCount_ = 0;
  JreStrongAssign(&self->tempDir_, OrgApacheLuceneUtilOfflineSorter_defaultTempDir());
  self->circumfix_ = -1;
  self->keepcase_ = -1;
  self->needaffix_ = -1;
  self->onlyincompound_ = -1;
  self->ignoreCase_ = ignoreCase;
  self->needsInputCleaning_ = ignoreCase;
  self->needsOutputCleaning_ = false;
  [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(self->flagLookup_)) addWithOrgApacheLuceneUtilBytesRef:create_OrgApacheLuceneUtilBytesRef_init()];
  OrgLukhnosPortmobileFilePath *aff = OrgLukhnosPortmobileFileFiles_createTempFileWithOrgLukhnosPortmobileFilePath_withNSString_withNSString_(self->tempDir_, @"affix", @"aff");
  JavaIoOutputStream *out = create_JavaIoBufferedOutputStream_initWithJavaIoOutputStream_(OrgLukhnosPortmobileFileFiles_newOutputStreamWithOrgLukhnosPortmobileFilePath_(aff));
  JavaIoInputStream *aff1 = nil;
  JavaIoInputStream *aff2 = nil;
  jboolean success = false;
  @try {
    IOSByteArray *buffer = [IOSByteArray arrayWithLength:1024 * 8];
    jint len;
    while ((len = [((JavaIoInputStream *) nil_chk(affix)) readWithByteArray:buffer]) > 0) {
      [out writeWithByteArray:buffer withInt:0 withInt:len];
    }
    [out close];
    aff1 = create_JavaIoBufferedInputStream_initWithJavaIoInputStream_(OrgLukhnosPortmobileFileFiles_newInputStreamWithOrgLukhnosPortmobileFilePath_(aff));
    NSString *encoding = OrgApacheLuceneAnalysisHunspellDictionary_getDictionaryEncodingWithJavaIoInputStream_(aff1);
    JavaNioCharsetCharsetDecoder *decoder = OrgApacheLuceneAnalysisHunspellDictionary_getJavaEncodingWithNSString_(self, encoding);
    aff2 = create_JavaIoBufferedInputStream_initWithJavaIoInputStream_(OrgLukhnosPortmobileFileFiles_newInputStreamWithOrgLukhnosPortmobileFilePath_(aff));
    OrgApacheLuceneAnalysisHunspellDictionary_readAffixFileWithJavaIoInputStream_withJavaNioCharsetCharsetDecoder_(self, aff2, decoder);
    OrgApacheLuceneUtilFstIntSequenceOutputs *o = OrgApacheLuceneUtilFstIntSequenceOutputs_getSingleton();
    OrgApacheLuceneUtilFstBuilder *b = create_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4), o);
    OrgApacheLuceneAnalysisHunspellDictionary_readDictionaryFilesWithJavaUtilList_withJavaNioCharsetCharsetDecoder_withOrgApacheLuceneUtilFstBuilder_(self, dictionaries, decoder, b);
    JreStrongAssign(&self->words_, [b finish]);
    JreStrongAssign(&self->aliases_, nil);
    JreStrongAssign(&self->morphAliases_, nil);
    success = true;
  }
  @finally {
    OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ out, aff1, aff2 } count:3 type:JavaIoCloseable_class_()]);
    if (success) {
      OrgLukhnosPortmobileFileFiles_delete__WithOrgLukhnosPortmobileFilePath_(aff);
    }
    else {
      OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgLukhnosPortmobileFilePathArray_([IOSObjectArray arrayWithObjects:(id[]){ aff } count:1 type:OrgLukhnosPortmobileFilePath_class_()]);
    }
  }
}

OrgApacheLuceneAnalysisHunspellDictionary *new_OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaUtilList_withBoolean_(JavaIoInputStream *affix, id<JavaUtilList> dictionaries, jboolean ignoreCase) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisHunspellDictionary, initWithJavaIoInputStream_withJavaUtilList_withBoolean_, affix, dictionaries, ignoreCase)
}

OrgApacheLuceneAnalysisHunspellDictionary *create_OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaUtilList_withBoolean_(JavaIoInputStream *affix, id<JavaUtilList> dictionaries, jboolean ignoreCase) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisHunspellDictionary, initWithJavaIoInputStream_withJavaUtilList_withBoolean_, affix, dictionaries, ignoreCase)
}

void OrgApacheLuceneAnalysisHunspellDictionary_readAffixFileWithJavaIoInputStream_withJavaNioCharsetCharsetDecoder_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaIoInputStream *affixStream, JavaNioCharsetCharsetDecoder *decoder) {
  JavaUtilTreeMap *prefixes = create_JavaUtilTreeMap_init();
  JavaUtilTreeMap *suffixes = create_JavaUtilTreeMap_init();
  id<JavaUtilMap> seenPatterns = create_JavaUtilHashMap_init();
  [seenPatterns putWithId:@".*" withId:JavaLangInteger_valueOfWithInt_(0)];
  [((JavaUtilArrayList *) nil_chk(self->patterns_)) addWithId:nil];
  id<JavaUtilMap> seenStrips = create_JavaUtilLinkedHashMap_init();
  [seenStrips putWithId:@"" withId:JavaLangInteger_valueOfWithInt_(0)];
  JavaIoLineNumberReader *reader = create_JavaIoLineNumberReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharsetDecoder_(affixStream, decoder));
  NSString *line = nil;
  while ((line = [reader readLine]) != nil) {
    if ([reader getLineNumber] == 1 && [((NSString *) nil_chk(line)) java_hasPrefix:@"\ufeff"]) {
      line = [((NSString *) nil_chk(line)) java_substring:1];
    }
    if ([((NSString *) nil_chk(line)) java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_ALIAS_KEY]) {
      OrgApacheLuceneAnalysisHunspellDictionary_parseAliasWithNSString_(self, line);
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_MORPH_ALIAS_KEY]) {
      OrgApacheLuceneAnalysisHunspellDictionary_parseMorphAliasWithNSString_(self, line);
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_PREFIX_KEY]) {
      OrgApacheLuceneAnalysisHunspellDictionary_parseAffixWithJavaUtilTreeMap_withNSString_withJavaIoLineNumberReader_withNSString_withJavaUtilMap_withJavaUtilMap_(self, prefixes, line, reader, OrgApacheLuceneAnalysisHunspellDictionary_PREFIX_CONDITION_REGEX_PATTERN, seenPatterns, seenStrips);
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_SUFFIX_KEY]) {
      OrgApacheLuceneAnalysisHunspellDictionary_parseAffixWithJavaUtilTreeMap_withNSString_withJavaIoLineNumberReader_withNSString_withJavaUtilMap_withJavaUtilMap_(self, suffixes, line, reader, OrgApacheLuceneAnalysisHunspellDictionary_SUFFIX_CONDITION_REGEX_PATTERN, seenPatterns, seenStrips);
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_FLAG_KEY]) {
      JreStrongAssign(&self->flagParsingStrategy_, OrgApacheLuceneAnalysisHunspellDictionary_getFlagParsingStrategyWithNSString_(line));
    }
    else if ([line isEqual:OrgApacheLuceneAnalysisHunspellDictionary_COMPLEXPREFIXES_KEY]) {
      self->complexPrefixes_ = true;
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_CIRCUMFIX_KEY]) {
      IOSObjectArray *parts = [line java_split:@"\\s+"];
      if (((IOSObjectArray *) nil_chk(parts))->size_ != 2) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(@"Illegal CIRCUMFIX declaration", [reader getLineNumber]);
      }
      self->circumfix_ = [((OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *) nil_chk(self->flagParsingStrategy_)) parseFlagWithNSString:IOSObjectArray_Get(parts, 1)];
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_KEEPCASE_KEY]) {
      IOSObjectArray *parts = [line java_split:@"\\s+"];
      if (((IOSObjectArray *) nil_chk(parts))->size_ != 2) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(@"Illegal KEEPCASE declaration", [reader getLineNumber]);
      }
      self->keepcase_ = [((OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *) nil_chk(self->flagParsingStrategy_)) parseFlagWithNSString:IOSObjectArray_Get(parts, 1)];
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_NEEDAFFIX_KEY] || [line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_PSEUDOROOT_KEY]) {
      IOSObjectArray *parts = [line java_split:@"\\s+"];
      if (((IOSObjectArray *) nil_chk(parts))->size_ != 2) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(@"Illegal NEEDAFFIX declaration", [reader getLineNumber]);
      }
      self->needaffix_ = [((OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *) nil_chk(self->flagParsingStrategy_)) parseFlagWithNSString:IOSObjectArray_Get(parts, 1)];
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_ONLYINCOMPOUND_KEY]) {
      IOSObjectArray *parts = [line java_split:@"\\s+"];
      if (((IOSObjectArray *) nil_chk(parts))->size_ != 2) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(@"Illegal ONLYINCOMPOUND declaration", [reader getLineNumber]);
      }
      self->onlyincompound_ = [((OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *) nil_chk(self->flagParsingStrategy_)) parseFlagWithNSString:IOSObjectArray_Get(parts, 1)];
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_IGNORE_KEY]) {
      IOSObjectArray *parts = [line java_split:@"\\s+"];
      if (((IOSObjectArray *) nil_chk(parts))->size_ != 2) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(@"Illegal IGNORE declaration", [reader getLineNumber]);
      }
      JreStrongAssign(&self->ignore_, [((NSString *) nil_chk(IOSObjectArray_Get(parts, 1))) java_toCharArray]);
      JavaUtilArrays_sortWithCharArray_(self->ignore_);
      self->needsInputCleaning_ = true;
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_ICONV_KEY] || [line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_OCONV_KEY]) {
      IOSObjectArray *parts = [line java_split:@"\\s+"];
      NSString *type = IOSObjectArray_Get(nil_chk(parts), 0);
      if (parts->size_ != 2) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$$", @"Illegal ", type, @" declaration"), [reader getLineNumber]);
      }
      jint num = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(parts, 1));
      OrgApacheLuceneUtilFstFST *res = OrgApacheLuceneAnalysisHunspellDictionary_parseConversionsWithJavaIoLineNumberReader_withInt_(self, reader, num);
      if ([((NSString *) nil_chk(type)) isEqual:@"ICONV"]) {
        JreStrongAssign(&self->iconv_, res);
        self->needsInputCleaning_ |= (self->iconv_ != nil);
      }
      else {
        JreStrongAssign(&self->oconv_, res);
        self->needsOutputCleaning_ |= (self->oconv_ != nil);
      }
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_FULLSTRIP_KEY]) {
      self->fullStrip_ = true;
    }
    else if ([line java_hasPrefix:OrgApacheLuceneAnalysisHunspellDictionary_LANG_KEY]) {
      JreStrongAssign(&self->language_, [((NSString *) nil_chk([line java_substring:[((NSString *) nil_chk(OrgApacheLuceneAnalysisHunspellDictionary_LANG_KEY)) java_length]])) java_trim]);
      self->alternateCasing_ = ([@"tr_TR" isEqual:self->language_] || [@"az_AZ" isEqual:self->language_]);
    }
  }
  JreStrongAssign(&self->prefixes_, OrgApacheLuceneAnalysisHunspellDictionary_affixFSTWithJavaUtilTreeMap_(self, prefixes));
  JreStrongAssign(&self->suffixes_, OrgApacheLuceneAnalysisHunspellDictionary_affixFSTWithJavaUtilTreeMap_(self, suffixes));
  jint totalChars = 0;
  for (NSString * __strong strip in nil_chk([seenStrips keySet])) {
    totalChars += [((NSString *) nil_chk(strip)) java_length];
  }
  JreStrongAssignAndConsume(&self->stripData_, [IOSCharArray newArrayWithLength:totalChars]);
  JreStrongAssignAndConsume(&self->stripOffsets_, [IOSIntArray newArrayWithLength:[seenStrips size] + 1]);
  jint currentOffset = 0;
  jint currentIndex = 0;
  for (NSString * __strong strip in nil_chk([seenStrips keySet])) {
    *IOSIntArray_GetRef(nil_chk(self->stripOffsets_), currentIndex++) = currentOffset;
    [((NSString *) nil_chk(strip)) java_getChars:0 sourceEnd:[strip java_length] destination:self->stripData_ destinationBegin:currentOffset];
    currentOffset += [strip java_length];
  }
  JreAssert(currentIndex == [seenStrips size], @"org/apache/lucene/analysis/hunspell/Dictionary.java:403 condition failed: assert currentIndex == seenStrips.size();");
  *IOSIntArray_GetRef(nil_chk(self->stripOffsets_), currentIndex) = currentOffset;
}

OrgApacheLuceneUtilFstFST *OrgApacheLuceneAnalysisHunspellDictionary_affixFSTWithJavaUtilTreeMap_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaUtilTreeMap *affixes) {
  OrgApacheLuceneUtilFstIntSequenceOutputs *outputs = OrgApacheLuceneUtilFstIntSequenceOutputs_getSingleton();
  OrgApacheLuceneUtilFstBuilder *builder = create_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4), outputs);
  OrgApacheLuceneUtilIntsRefBuilder *scratch = create_OrgApacheLuceneUtilIntsRefBuilder_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilTreeMap *) nil_chk(affixes)) entrySet])) {
    OrgApacheLuceneUtilFstUtil_toUTF32WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], scratch);
    id<JavaUtilList> entries = JreRetainedLocalValue([entry_ getValue]);
    OrgApacheLuceneUtilIntsRef *output = create_OrgApacheLuceneUtilIntsRef_initWithInt_([((id<JavaUtilList>) nil_chk(entries)) size]);
    for (JavaLangInteger * __strong c in entries) {
      *IOSIntArray_GetRef(nil_chk(output->ints_), output->length_++) = [((JavaLangInteger *) nil_chk(c)) intValue];
    }
    [builder addWithOrgApacheLuceneUtilIntsRef:[scratch get] withId:output];
  }
  return [builder finish];
}

NSString *OrgApacheLuceneAnalysisHunspellDictionary_escapeDashWithNSString_(NSString *re) {
  OrgApacheLuceneAnalysisHunspellDictionary_initialize();
  JavaLangStringBuilder *escaped = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < [((NSString *) nil_chk(re)) java_length]; i++) {
    jchar c = [re charAtWithInt:i];
    if (c == '-') {
      [escaped appendWithNSString:@"\\-"];
    }
    else {
      [escaped appendWithChar:c];
      if (c == '\\' && i + 1 < [re java_length]) {
        [escaped appendWithChar:[re charAtWithInt:i + 1]];
        i++;
      }
    }
  }
  return [escaped description];
}

void OrgApacheLuceneAnalysisHunspellDictionary_parseAffixWithJavaUtilTreeMap_withNSString_withJavaIoLineNumberReader_withNSString_withJavaUtilMap_withJavaUtilMap_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaUtilTreeMap *affixes, NSString *header, JavaIoLineNumberReader *reader, NSString *conditionPattern, id<JavaUtilMap> seenPatterns, id<JavaUtilMap> seenStrips) {
  OrgApacheLuceneUtilBytesRefBuilder *scratch = create_OrgApacheLuceneUtilBytesRefBuilder_init();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  IOSObjectArray *args = [((NSString *) nil_chk(header)) java_split:@"\\s+"];
  jboolean crossProduct = [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), 2))) isEqual:@"Y"];
  jboolean isSuffix = JreStringEqualsEquals(conditionPattern, OrgApacheLuceneAnalysisHunspellDictionary_SUFFIX_CONDITION_REGEX_PATTERN);
  jint numLines = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, 3));
  JreStrongAssign(&self->affixData_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(self->affixData_, (JreLShift32(self->currentAffix_, 3)) + (JreLShift32(numLines, 3))));
  OrgApacheLuceneStoreByteArrayDataOutput *affixWriter = create_OrgApacheLuceneStoreByteArrayDataOutput_initWithByteArray_withInt_withInt_(self->affixData_, JreLShift32(self->currentAffix_, 3), JreLShift32(numLines, 3));
  for (jint i = 0; i < numLines; i++) {
    JreAssert([affixWriter getPosition] == JreLShift32(self->currentAffix_, 3), @"org/apache/lucene/analysis/hunspell/Dictionary.java:472 condition failed: assert affixWriter.getPosition() == currentAffix << 3;");
    NSString *line = JreRetainedLocalValue([((JavaIoLineNumberReader *) nil_chk(reader)) readLine]);
    IOSObjectArray *ruleArgs = [((NSString *) nil_chk(line)) java_split:@"\\s+"];
    if (((IOSObjectArray *) nil_chk(ruleArgs))->size_ < 4) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", @"The affix file contains a rule with less than four elements: ", line), [reader getLineNumber]);
    }
    jchar flag = [((OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *) nil_chk(self->flagParsingStrategy_)) parseFlagWithNSString:IOSObjectArray_Get(ruleArgs, 1)];
    NSString *strip = [((NSString *) nil_chk(IOSObjectArray_Get(ruleArgs, 2))) isEqual:@"0"] ? @"" : IOSObjectArray_Get(ruleArgs, 2);
    NSString *affixArg = IOSObjectArray_Get(ruleArgs, 3);
    IOSCharArray *appendFlags = nil;
    jint flagSep = [((NSString *) nil_chk(affixArg)) java_lastIndexOf:'/'];
    if (flagSep != -1) {
      NSString *flagPart = [affixArg java_substring:flagSep + 1];
      affixArg = [affixArg java_substring:0 endIndex:flagSep];
      if (self->aliasCount_ > 0) {
        flagPart = OrgApacheLuceneAnalysisHunspellDictionary_getAliasValueWithInt_(self, JavaLangInteger_parseIntWithNSString_(flagPart));
      }
      appendFlags = [((OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *) nil_chk(self->flagParsingStrategy_)) parseFlagsWithNSString:flagPart];
      JavaUtilArrays_sortWithCharArray_(appendFlags);
      self->twoStageAffix_ = true;
    }
    if ([@"0" isEqual:affixArg]) {
      affixArg = @"";
    }
    NSString *condition = ruleArgs->size_ > 4 ? IOSObjectArray_Get(ruleArgs, 4) : @".";
    if ([condition java_hasPrefix:@"["] && [condition java_indexOf:']'] == -1) {
      condition = JreStrcat("$C", condition, ']');
    }
    if ([condition java_indexOf:'-'] >= 0) {
      condition = OrgApacheLuceneAnalysisHunspellDictionary_escapeDashWithNSString_(condition);
    }
    NSString *regex;
    if ([@"." isEqual:condition]) {
      regex = @".*";
    }
    else if ([((NSString *) nil_chk(condition)) isEqual:strip]) {
      regex = @".*";
    }
    else {
      regex = NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), conditionPattern, [IOSObjectArray arrayWithObjects:(id[]){ condition } count:1 type:NSObject_class_()]);
    }
    JavaLangInteger *patternIndex = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(seenPatterns)) getWithId:regex]);
    if (patternIndex == nil) {
      patternIndex = JavaLangInteger_valueOfWithInt_([((JavaUtilArrayList *) nil_chk(self->patterns_)) size]);
      if ([patternIndex intValue] > JavaLangShort_MAX_VALUE) {
        @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Too many patterns, please report this to dev@lucene.apache.org");
      }
      [seenPatterns putWithId:regex withId:patternIndex];
      OrgApacheLuceneUtilAutomatonCharacterRunAutomaton *pattern = create_OrgApacheLuceneUtilAutomatonCharacterRunAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_([create_OrgApacheLuceneUtilAutomatonRegExp_initWithNSString_withInt_(regex, OrgApacheLuceneUtilAutomatonRegExp_NONE) toAutomaton]);
      [((JavaUtilArrayList *) nil_chk(self->patterns_)) addWithId:pattern];
    }
    JavaLangInteger *stripOrd = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(seenStrips)) getWithId:strip]);
    if (stripOrd == nil) {
      stripOrd = JavaLangInteger_valueOfWithInt_([seenStrips size]);
      [seenStrips putWithId:strip withId:stripOrd];
      if ([stripOrd intValue] > JavaLangCharacter_MAX_VALUE) {
        @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Too many unique strips, please report this to dev@lucene.apache.org");
      }
    }
    if (appendFlags == nil) {
      appendFlags = OrgApacheLuceneAnalysisHunspellDictionary_NOFLAGS;
    }
    OrgApacheLuceneAnalysisHunspellDictionary_encodeFlagsWithOrgApacheLuceneUtilBytesRefBuilder_withCharArray_(scratch, appendFlags);
    jint appendFlagsOrd = [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(self->flagLookup_)) addWithOrgApacheLuceneUtilBytesRef:[scratch get]];
    if (appendFlagsOrd < 0) {
      appendFlagsOrd = (-appendFlagsOrd) - 1;
    }
    else if (appendFlagsOrd > JavaLangShort_MAX_VALUE) {
      @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Too many unique append flags, please report this to dev@lucene.apache.org");
    }
    [affixWriter writeShortWithShort:(jshort) flag];
    [affixWriter writeShortWithShort:(jshort) [stripOrd intValue]];
    jint patternOrd = (JreLShift32([patternIndex intValue], 1)) | (crossProduct ? 1 : 0);
    [affixWriter writeShortWithShort:(jshort) patternOrd];
    [affixWriter writeShortWithShort:(jshort) appendFlagsOrd];
    if (self->needsInputCleaning_) {
      id<JavaLangCharSequence> cleaned = JreRetainedLocalValue([self cleanInputWithJavaLangCharSequence:affixArg withJavaLangStringBuilder:sb]);
      affixArg = [((id<JavaLangCharSequence>) nil_chk(cleaned)) description];
    }
    if (isSuffix) {
      affixArg = [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(affixArg) reverse])) description];
    }
    id<JavaUtilList> list = JreRetainedLocalValue([((JavaUtilTreeMap *) nil_chk(affixes)) getWithId:affixArg]);
    if (list == nil) {
      list = create_JavaUtilArrayList_init();
      [affixes putWithId:affixArg withId:list];
    }
    [list addWithId:JavaLangInteger_valueOfWithInt_(self->currentAffix_)];
    self->currentAffix_++;
  }
}

OrgApacheLuceneUtilFstFST *OrgApacheLuceneAnalysisHunspellDictionary_parseConversionsWithJavaIoLineNumberReader_withInt_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaIoLineNumberReader *reader, jint num) {
  id<JavaUtilMap> mappings = create_JavaUtilTreeMap_init();
  for (jint i = 0; i < num; i++) {
    NSString *line = JreRetainedLocalValue([((JavaIoLineNumberReader *) nil_chk(reader)) readLine]);
    IOSObjectArray *parts = [((NSString *) nil_chk(line)) java_split:@"\\s+"];
    if (((IOSObjectArray *) nil_chk(parts))->size_ != 3) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", @"invalid syntax: ", line), [reader getLineNumber]);
    }
    if ([mappings putWithId:IOSObjectArray_Get(parts, 1) withId:IOSObjectArray_Get(parts, 2)] != nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"duplicate mapping specified for: ", IOSObjectArray_Get(parts, 1)));
    }
  }
  OrgApacheLuceneUtilFstOutputs *outputs = OrgApacheLuceneUtilFstCharSequenceOutputs_getSingleton();
  OrgApacheLuceneUtilFstBuilder *builder = create_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE2), outputs);
  OrgApacheLuceneUtilIntsRefBuilder *scratchInts = create_OrgApacheLuceneUtilIntsRefBuilder_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([mappings entrySet])) {
    OrgApacheLuceneUtilFstUtil_toUTF16WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], scratchInts);
    [builder addWithOrgApacheLuceneUtilIntsRef:[scratchInts get] withId:create_OrgApacheLuceneUtilCharsRef_initWithNSString_([entry_ getValue])];
  }
  return [builder finish];
}

NSString *OrgApacheLuceneAnalysisHunspellDictionary_getDictionaryEncodingWithJavaIoInputStream_(JavaIoInputStream *affix) {
  OrgApacheLuceneAnalysisHunspellDictionary_initialize();
  JavaLangStringBuilder *encoding = create_JavaLangStringBuilder_init();
  for (; ; ) {
    [encoding setLengthWithInt:0];
    jint ch;
    while ((ch = [((JavaIoInputStream *) nil_chk(affix)) read]) >= 0) {
      if (ch == 0x000a) {
        break;
      }
      if (ch != 0x000d) {
        [encoding appendWithChar:(jchar) ch];
      }
    }
    if ([encoding java_length] == 0 || [encoding charAtWithInt:0] == '#' || [((NSString *) nil_chk([((NSString *) nil_chk([encoding description])) java_trim])) java_length] == 0) {
      if (ch < 0) {
        @throw create_JavaTextParseException_initWithNSString_withInt_(@"Unexpected end of affix file.", 0);
      }
      continue;
    }
    JavaUtilRegexMatcher *matcher = JreRetainedLocalValue([((JavaUtilRegexPattern *) nil_chk(OrgApacheLuceneAnalysisHunspellDictionary_ENCODING_PATTERN)) matcherWithJavaLangCharSequence:encoding]);
    if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
      jint last = [matcher end];
      return [((NSString *) nil_chk([encoding substringWithInt:last])) java_trim];
    }
  }
}

JavaNioCharsetCharsetDecoder *OrgApacheLuceneAnalysisHunspellDictionary_getJavaEncodingWithNSString_(OrgApacheLuceneAnalysisHunspellDictionary *self, NSString *encoding) {
  if ([@"ISO8859-14" isEqual:encoding]) {
    @throw [new_JavaLangRuntimeException_initWithNSString_(@"Not translated to Objective-C") autorelease]; // disabled by translate.py
  }
  NSString *canon = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(OrgApacheLuceneAnalysisHunspellDictionary_CHARSET_ALIASES)) getWithId:encoding]);
  if (canon != nil) {
    encoding = canon;
  }
  JavaNioCharsetCharset *charset = JavaNioCharsetCharset_forNameWithNSString_(encoding);
  return [((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(charset)) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPLACE)];
}

OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *OrgApacheLuceneAnalysisHunspellDictionary_getFlagParsingStrategyWithNSString_(NSString *flagLine) {
  OrgApacheLuceneAnalysisHunspellDictionary_initialize();
  IOSObjectArray *parts = [((NSString *) nil_chk(flagLine)) java_split:@"\\s+"];
  if (((IOSObjectArray *) nil_chk(parts))->size_ != 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Illegal FLAG specification: ", flagLine));
  }
  NSString *flagType = IOSObjectArray_Get(parts, 1);
  if ([((NSString *) nil_chk(OrgApacheLuceneAnalysisHunspellDictionary_NUM_FLAG_TYPE)) isEqual:flagType]) {
    return create_OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy_init();
  }
  else if ([((NSString *) nil_chk(OrgApacheLuceneAnalysisHunspellDictionary_UTF8_FLAG_TYPE)) isEqual:flagType]) {
    return create_OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy_init();
  }
  else if ([((NSString *) nil_chk(OrgApacheLuceneAnalysisHunspellDictionary_LONG_FLAG_TYPE)) isEqual:flagType]) {
    return create_OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy_init();
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Unknown flag type: ", flagType));
}

jint OrgApacheLuceneAnalysisHunspellDictionary_morphBoundaryWithNSString_(NSString *line) {
  OrgApacheLuceneAnalysisHunspellDictionary_initialize();
  jint end = OrgApacheLuceneAnalysisHunspellDictionary_indexOfSpaceOrTabWithNSString_withInt_(line, 0);
  if (end == -1) {
    return [((NSString *) nil_chk(line)) java_length];
  }
  while (end >= 0 && end < [((NSString *) nil_chk(line)) java_length]) {
    if ([((NSString *) nil_chk(line)) charAtWithInt:end] == 0x0009 || (end + 3 < [line java_length] && JavaLangCharacter_isLetterWithChar_([line charAtWithInt:end + 1]) && JavaLangCharacter_isLetterWithChar_([line charAtWithInt:end + 2]) && [line charAtWithInt:end + 3] == ':')) {
      break;
    }
    end = OrgApacheLuceneAnalysisHunspellDictionary_indexOfSpaceOrTabWithNSString_withInt_(line, end + 1);
  }
  if (end == -1) {
    return [((NSString *) nil_chk(line)) java_length];
  }
  return end;
}

jint OrgApacheLuceneAnalysisHunspellDictionary_indexOfSpaceOrTabWithNSString_withInt_(NSString *text, jint start) {
  OrgApacheLuceneAnalysisHunspellDictionary_initialize();
  jint pos1 = [((NSString *) nil_chk(text)) java_indexOf:0x0009 fromIndex:start];
  jint pos2 = [text java_indexOf:' ' fromIndex:start];
  if (pos1 >= 0 && pos2 >= 0) {
    return JavaLangMath_minWithInt_withInt_(pos1, pos2);
  }
  else {
    return JavaLangMath_maxWithInt_withInt_(pos1, pos2);
  }
}

void OrgApacheLuceneAnalysisHunspellDictionary_readDictionaryFilesWithJavaUtilList_withJavaNioCharsetCharsetDecoder_withOrgApacheLuceneUtilFstBuilder_(OrgApacheLuceneAnalysisHunspellDictionary *self, id<JavaUtilList> dictionaries, JavaNioCharsetCharsetDecoder *decoder, OrgApacheLuceneUtilFstBuilder *words) {
  OrgApacheLuceneUtilBytesRefBuilder *flagsScratch = create_OrgApacheLuceneUtilBytesRefBuilder_init();
  OrgApacheLuceneUtilIntsRefBuilder *scratchInts = create_OrgApacheLuceneUtilIntsRefBuilder_init();
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  OrgLukhnosPortmobileFilePath *unsorted = OrgLukhnosPortmobileFileFiles_createTempFileWithOrgLukhnosPortmobileFilePath_withNSString_withNSString_(self->tempDir_, @"unsorted", @"dat");
  {
    OrgApacheLuceneUtilOfflineSorter_ByteSequencesWriter *writer = create_OrgApacheLuceneUtilOfflineSorter_ByteSequencesWriter_initWithOrgLukhnosPortmobileFilePath_(unsorted);
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      for (JavaIoInputStream * __strong dictionary in nil_chk(dictionaries)) {
        JavaIoBufferedReader *lines = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharsetDecoder_(dictionary, decoder));
        NSString *line = JreRetainedLocalValue([lines readLine]);
        while ((line = [lines readLine]) != nil) {
          if ([((NSString *) nil_chk(line)) java_isEmpty] || [line charAtWithInt:0] == '/' || [line charAtWithInt:0] == '#' || [line charAtWithInt:0] == 0x0009) {
            continue;
          }
          line = [self unescapeEntryWithNSString:line];
          if (self->hasStemExceptions_ == false) {
            jint morphStart = [((NSString *) nil_chk(line)) java_indexOf:OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR];
            if (morphStart >= 0 && morphStart < [line java_length]) {
              self->hasStemExceptions_ = (OrgApacheLuceneAnalysisHunspellDictionary_parseStemExceptionWithNSString_(self, [line java_substring:morphStart + 1]) != nil);
            }
          }
          if (self->needsInputCleaning_) {
            jint flagSep = [((NSString *) nil_chk(line)) java_indexOf:OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR];
            if (flagSep == -1) {
              flagSep = [line java_indexOf:OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR];
            }
            if (flagSep == -1) {
              id<JavaLangCharSequence> cleansed = JreRetainedLocalValue([self cleanInputWithJavaLangCharSequence:line withJavaLangStringBuilder:sb]);
              [writer writeWithByteArray:[((NSString *) nil_chk([((id<JavaLangCharSequence>) nil_chk(cleansed)) description])) java_getBytesWithCharset:JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8)]];
            }
            else {
              NSString *text = [line java_substring:0 endIndex:flagSep];
              id<JavaLangCharSequence> cleansed = JreRetainedLocalValue([self cleanInputWithJavaLangCharSequence:text withJavaLangStringBuilder:sb]);
              if (!JreObjectEqualsEquals(cleansed, sb)) {
                [sb setLengthWithInt:0];
                [sb appendWithJavaLangCharSequence:cleansed];
              }
              [sb appendWithNSString:[line java_substring:flagSep]];
              [writer writeWithByteArray:[((NSString *) nil_chk([sb description])) java_getBytesWithCharset:JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8)]];
            }
          }
          else {
            [writer writeWithByteArray:[((NSString *) nil_chk(line)) java_getBytesWithCharset:JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8)]];
          }
        }
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (writer != nil) {
        if (__primaryException1 != nil) {
          @try {
            [writer close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [writer close];
        }
      }
    }
  }
  OrgLukhnosPortmobileFilePath *sorted = OrgLukhnosPortmobileFileFiles_createTempFileWithOrgLukhnosPortmobileFilePath_withNSString_withNSString_(self->tempDir_, @"sorted", @"dat");
  OrgApacheLuceneUtilOfflineSorter *sorter = create_OrgApacheLuceneUtilOfflineSorter_initWithJavaUtilComparator_(create_OrgApacheLuceneAnalysisHunspellDictionary_1_init());
  jboolean success = false;
  @try {
    [sorter sortWithOrgLukhnosPortmobileFilePath:unsorted withOrgLukhnosPortmobileFilePath:sorted];
    success = true;
  }
  @finally {
    if (success) {
      OrgLukhnosPortmobileFileFiles_delete__WithOrgLukhnosPortmobileFilePath_(unsorted);
    }
    else {
      OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgLukhnosPortmobileFilePathArray_([IOSObjectArray arrayWithObjects:(id[]){ unsorted } count:1 type:OrgLukhnosPortmobileFilePath_class_()]);
    }
  }
  jboolean success2 = false;
  OrgApacheLuceneUtilOfflineSorter_ByteSequencesReader *reader = create_OrgApacheLuceneUtilOfflineSorter_ByteSequencesReader_initWithOrgLukhnosPortmobileFilePath_(sorted);
  @try {
    OrgApacheLuceneUtilBytesRefBuilder *scratchLine = create_OrgApacheLuceneUtilBytesRefBuilder_init();
    NSString *currentEntry = nil;
    OrgApacheLuceneUtilIntsRefBuilder *currentOrds = create_OrgApacheLuceneUtilIntsRefBuilder_init();
    NSString *line;
    while ([reader readWithOrgApacheLuceneUtilBytesRefBuilder:scratchLine]) {
      line = [((OrgApacheLuceneUtilBytesRef *) nil_chk([scratchLine get])) utf8ToString];
      NSString *entry_;
      IOSCharArray *wordForm;
      jint end;
      jint flagSep = [((NSString *) nil_chk(line)) java_indexOf:OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR];
      if (flagSep == -1) {
        wordForm = OrgApacheLuceneAnalysisHunspellDictionary_NOFLAGS;
        end = [line java_indexOf:OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR];
        entry_ = [line java_substring:0 endIndex:end];
      }
      else {
        end = [line java_indexOf:OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR];
        NSString *flagPart = [line java_substring:flagSep + 1 endIndex:end];
        if (self->aliasCount_ > 0) {
          flagPart = OrgApacheLuceneAnalysisHunspellDictionary_getAliasValueWithInt_(self, JavaLangInteger_parseIntWithNSString_(flagPart));
        }
        wordForm = [((OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *) nil_chk(self->flagParsingStrategy_)) parseFlagsWithNSString:flagPart];
        JavaUtilArrays_sortWithCharArray_(wordForm);
        entry_ = [line java_substring:0 endIndex:flagSep];
      }
      jint stemExceptionID = 0;
      if (self->hasStemExceptions_ && end + 1 < [line java_length]) {
        NSString *stemException = OrgApacheLuceneAnalysisHunspellDictionary_parseStemExceptionWithNSString_(self, [line java_substring:end + 1]);
        if (stemException != nil) {
          if (self->stemExceptionCount_ == ((IOSObjectArray *) nil_chk(self->stemExceptions_))->size_) {
            jint newSize = OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(self->stemExceptionCount_ + 1, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF));
            JreStrongAssign(&self->stemExceptions_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(self->stemExceptions_, newSize));
          }
          stemExceptionID = self->stemExceptionCount_ + 1;
          IOSObjectArray_Set(nil_chk(self->stemExceptions_), self->stemExceptionCount_++, stemException);
        }
      }
      jint cmp = currentEntry == nil ? 1 : [((NSString *) nil_chk(entry_)) compareToWithId:currentEntry];
      if (cmp < 0) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$", @"out of order: ", entry_, @" < ", currentEntry));
      }
      else {
        OrgApacheLuceneAnalysisHunspellDictionary_encodeFlagsWithOrgApacheLuceneUtilBytesRefBuilder_withCharArray_(flagsScratch, wordForm);
        jint ord = [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(self->flagLookup_)) addWithOrgApacheLuceneUtilBytesRef:[flagsScratch get]];
        if (ord < 0) {
          ord = (-ord) - 1;
        }
        if (cmp > 0 && currentEntry != nil) {
          OrgApacheLuceneUtilFstUtil_toUTF32WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_(currentEntry, scratchInts);
          [((OrgApacheLuceneUtilFstBuilder *) nil_chk(words)) addWithOrgApacheLuceneUtilIntsRef:[scratchInts get] withId:[currentOrds get]];
        }
        if (cmp > 0 || currentEntry == nil) {
          currentEntry = entry_;
          currentOrds = create_OrgApacheLuceneUtilIntsRefBuilder_init();
        }
        if (self->hasStemExceptions_) {
          [currentOrds appendWithInt:ord];
          [currentOrds appendWithInt:stemExceptionID];
        }
        else {
          [currentOrds appendWithInt:ord];
        }
      }
    }
    OrgApacheLuceneUtilFstUtil_toUTF32WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_(currentEntry, scratchInts);
    [((OrgApacheLuceneUtilFstBuilder *) nil_chk(words)) addWithOrgApacheLuceneUtilIntsRef:[scratchInts get] withId:[currentOrds get]];
    success2 = true;
  }
  @finally {
    OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ reader } count:1 type:JavaIoCloseable_class_()]);
    if (success2) {
      OrgLukhnosPortmobileFileFiles_delete__WithOrgLukhnosPortmobileFilePath_(sorted);
    }
    else {
      OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgLukhnosPortmobileFilePathArray_([IOSObjectArray arrayWithObjects:(id[]){ sorted } count:1 type:OrgLukhnosPortmobileFilePath_class_()]);
    }
  }
}

IOSCharArray *OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *b) {
  OrgApacheLuceneAnalysisHunspellDictionary_initialize();
  if (((OrgApacheLuceneUtilBytesRef *) nil_chk(b))->length_ == 0) {
    return JreLoadStatic(OrgApacheLuceneUtilCharsRef, EMPTY_CHARS);
  }
  jint len = JreURShift32(b->length_, 1);
  IOSCharArray *flags = [IOSCharArray arrayWithLength:len];
  jint upto = 0;
  jint end = b->offset_ + b->length_;
  for (jint i = b->offset_; i < end; i += 2) {
    *IOSCharArray_GetRef(flags, upto++) = (jchar) ((JreLShift32(IOSByteArray_Get(nil_chk(b->bytes_), i), 8)) | (IOSByteArray_Get(b->bytes_, i + 1) & (jint) 0xff));
  }
  return flags;
}

void OrgApacheLuceneAnalysisHunspellDictionary_encodeFlagsWithOrgApacheLuceneUtilBytesRefBuilder_withCharArray_(OrgApacheLuceneUtilBytesRefBuilder *b, IOSCharArray *flags) {
  OrgApacheLuceneAnalysisHunspellDictionary_initialize();
  jint len = JreLShift32(((IOSCharArray *) nil_chk(flags))->size_, 1);
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(b)) growWithInt:len];
  [b clear];
  for (jint i = 0; i < flags->size_; i++) {
    jint flag = IOSCharArray_Get(flags, i);
    [b appendWithByte:(jbyte) ((JreRShift32(flag, 8)) & (jint) 0xff)];
    [b appendWithByte:(jbyte) (flag & (jint) 0xff)];
  }
}

void OrgApacheLuceneAnalysisHunspellDictionary_parseAliasWithNSString_(OrgApacheLuceneAnalysisHunspellDictionary *self, NSString *line) {
  IOSObjectArray *ruleArgs = [((NSString *) nil_chk(line)) java_split:@"\\s+"];
  if (self->aliases_ == nil) {
    jint count = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(ruleArgs), 1));
    JreStrongAssignAndConsume(&self->aliases_, [IOSObjectArray newArrayWithLength:count type:NSString_class_()]);
  }
  else {
    NSString *aliasValue = ((IOSObjectArray *) nil_chk(ruleArgs))->size_ == 1 ? @"" : IOSObjectArray_Get(ruleArgs, 1);
    IOSObjectArray_Set(self->aliases_, self->aliasCount_++, aliasValue);
  }
}

NSString *OrgApacheLuceneAnalysisHunspellDictionary_getAliasValueWithInt_(OrgApacheLuceneAnalysisHunspellDictionary *self, jint id_) {
  @try {
    return IOSObjectArray_Get(nil_chk(self->aliases_), id_ - 1);
  }
  @catch (JavaLangIndexOutOfBoundsException *ex) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$I", @"Bad flag alias number:", id_), ex);
  }
}

void OrgApacheLuceneAnalysisHunspellDictionary_parseMorphAliasWithNSString_(OrgApacheLuceneAnalysisHunspellDictionary *self, NSString *line) {
  if (self->morphAliases_ == nil) {
    jint count = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(line)) java_substring:3]);
    JreStrongAssignAndConsume(&self->morphAliases_, [IOSObjectArray newArrayWithLength:count type:NSString_class_()]);
  }
  else {
    NSString *arg = [((NSString *) nil_chk(line)) java_substring:2];
    IOSObjectArray_Set(nil_chk(self->morphAliases_), self->morphAliasCount_++, arg);
  }
}

NSString *OrgApacheLuceneAnalysisHunspellDictionary_parseStemExceptionWithNSString_(OrgApacheLuceneAnalysisHunspellDictionary *self, NSString *morphData) {
  if (self->morphAliasCount_ > 0) {
    @try {
      jint alias = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(morphData)) java_trim]);
      morphData = IOSObjectArray_Get(nil_chk(self->morphAliases_), alias - 1);
    }
    @catch (JavaLangNumberFormatException *e) {
    }
  }
  jint index = [((NSString *) nil_chk(morphData)) java_indexOfString:@" st:"];
  if (index < 0) {
    index = [morphData java_indexOfString:@"\tst:"];
  }
  if (index >= 0) {
    jint endIndex = OrgApacheLuceneAnalysisHunspellDictionary_indexOfSpaceOrTabWithNSString_withInt_(morphData, index + 1);
    if (endIndex < 0) {
      endIndex = [morphData java_length];
    }
    return [morphData java_substring:index + 4 endIndex:endIndex];
  }
  return nil;
}

jboolean OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(IOSCharArray *flags, jchar flag) {
  OrgApacheLuceneAnalysisHunspellDictionary_initialize();
  return JavaUtilArrays_binarySearchWithCharArray_withChar_(flags, flag) >= 0;
}

void OrgApacheLuceneAnalysisHunspellDictionary_applyMappingsWithOrgApacheLuceneUtilFstFST_withJavaLangStringBuilder_(OrgApacheLuceneUtilFstFST *fst, JavaLangStringBuilder *sb) {
  OrgApacheLuceneAnalysisHunspellDictionary_initialize();
  OrgApacheLuceneUtilFstFST_BytesReader *bytesReader = [((OrgApacheLuceneUtilFstFST *) nil_chk(fst)) getBytesReader];
  OrgApacheLuceneUtilFstFST_Arc *firstArc = [fst getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:create_OrgApacheLuceneUtilFstFST_Arc_init()];
  OrgApacheLuceneUtilCharsRef *NO_OUTPUT = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(fst->outputs_)) getNoOutput];
  OrgApacheLuceneUtilFstFST_Arc *arc = create_OrgApacheLuceneUtilFstFST_Arc_init();
  jint longestMatch;
  OrgApacheLuceneUtilCharsRef *longestOutput;
  for (jint i = 0; i < [((JavaLangStringBuilder *) nil_chk(sb)) java_length]; i++) {
    [arc copyFromWithOrgApacheLuceneUtilFstFST_Arc:firstArc];
    OrgApacheLuceneUtilCharsRef *output = JreRetainedLocalValue(NO_OUTPUT);
    longestMatch = -1;
    longestOutput = nil;
    for (jint j = i; j < [sb java_length]; j++) {
      jchar ch = [sb charAtWithInt:j];
      if ([fst findTargetArcWithInt:ch withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_BytesReader:bytesReader] == nil) {
        break;
      }
      else {
        output = [fst->outputs_ addWithId:output withId:arc->output_];
      }
      if ([arc isFinal]) {
        longestOutput = [fst->outputs_ addWithId:output withId:arc->nextFinalOutput_];
        longestMatch = j;
      }
    }
    if (longestMatch >= 0) {
      [sb delete__WithInt:i withInt:longestMatch + 1];
      [sb insertWithInt:i withJavaLangCharSequence:longestOutput];
      i += (((OrgApacheLuceneUtilCharsRef *) nil_chk(longestOutput))->length_ - 1);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisHunspellDictionary)

@implementation OrgApacheLuceneAnalysisHunspellDictionary_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisHunspellDictionary_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgApacheLuceneUtilBytesRef *)o1
               withId:(OrgApacheLuceneUtilBytesRef *)o2 {
  JreStrongAssign(&((OrgApacheLuceneUtilBytesRef *) nil_chk(scratch1_))->bytes_, ((OrgApacheLuceneUtilBytesRef *) nil_chk(o1))->bytes_);
  scratch1_->offset_ = o1->offset_;
  scratch1_->length_ = o1->length_;
  for (jint i = scratch1_->length_ - 1; i >= 0; i--) {
    if (IOSByteArray_Get(nil_chk(scratch1_->bytes_), scratch1_->offset_ + i) == OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR || IOSByteArray_Get(scratch1_->bytes_, scratch1_->offset_ + i) == OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR) {
      scratch1_->length_ = i;
      break;
    }
  }
  JreStrongAssign(&((OrgApacheLuceneUtilBytesRef *) nil_chk(scratch2_))->bytes_, ((OrgApacheLuceneUtilBytesRef *) nil_chk(o2))->bytes_);
  scratch2_->offset_ = o2->offset_;
  scratch2_->length_ = o2->length_;
  for (jint i = scratch2_->length_ - 1; i >= 0; i--) {
    if (IOSByteArray_Get(nil_chk(scratch2_->bytes_), scratch2_->offset_ + i) == OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR || IOSByteArray_Get(scratch2_->bytes_, scratch2_->offset_ + i) == OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR) {
      scratch2_->length_ = i;
      break;
    }
  }
  jint cmp = [scratch1_ compareToWithId:scratch2_];
  if (cmp == 0) {
    return [o1 compareToWithId:o2];
  }
  else {
    return cmp;
  }
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(scratch1_);
  RELEASE_(scratch2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scratch1_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "scratch2_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "compare", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;", "LOrgApacheLuceneAnalysisHunspellDictionary;", "readDictionaryFilesWithJavaUtilList:withJavaNioCharsetCharsetDecoder:withOrgApacheLuceneUtilFstBuilder:", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/util/BytesRef;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisHunspellDictionary_1 = { "", "org.apache.lucene.analysis.hunspell", ptrTable, methods, fields, 7, 0x8010, 2, 2, 2, -1, 3, 4, -1 };
  return &_OrgApacheLuceneAnalysisHunspellDictionary_1;
}

@end

void OrgApacheLuceneAnalysisHunspellDictionary_1_init(OrgApacheLuceneAnalysisHunspellDictionary_1 *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->scratch1_, new_OrgApacheLuceneUtilBytesRef_init());
  JreStrongAssignAndConsume(&self->scratch2_, new_OrgApacheLuceneUtilBytesRef_init());
}

OrgApacheLuceneAnalysisHunspellDictionary_1 *new_OrgApacheLuceneAnalysisHunspellDictionary_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisHunspellDictionary_1, init)
}

OrgApacheLuceneAnalysisHunspellDictionary_1 *create_OrgApacheLuceneAnalysisHunspellDictionary_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisHunspellDictionary_1, init)
}

@implementation OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jchar)parseFlagWithNSString:(NSString *)rawFlag {
  IOSCharArray *flags = [self parseFlagsWithNSString:rawFlag];
  if (((IOSCharArray *) nil_chk(flags))->size_ != 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"expected only one flag, got: ", rawFlag));
  }
  return IOSCharArray_Get(flags, 0);
}

- (IOSCharArray *)parseFlagsWithNSString:(NSString *)rawFlags {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "[C", 0x400, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseFlagWithNSString:);
  methods[2].selector = @selector(parseFlagsWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parseFlag", "LNSString;", "parseFlags", "LOrgApacheLuceneAnalysisHunspellDictionary;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy = { "FlagParsingStrategy", "org.apache.lucene.analysis.hunspell", ptrTable, methods, NULL, 7, 0x408, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy;
}

@end

void OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy_init(OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy)

@implementation OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSCharArray *)parseFlagsWithNSString:(NSString *)rawFlags {
  return [((NSString *) nil_chk(rawFlags)) java_toCharArray];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseFlagsWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parseFlags", "LNSString;", "LOrgApacheLuceneAnalysisHunspellDictionary;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy = { "SimpleFlagParsingStrategy", "org.apache.lucene.analysis.hunspell", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy;
}

@end

void OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy_init(OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy *self) {
  OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy_init(self);
}

OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy *new_OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy, init)
}

OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy *create_OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisHunspellDictionary_SimpleFlagParsingStrategy)

@implementation OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSCharArray *)parseFlagsWithNSString:(NSString *)rawFlags {
  IOSObjectArray *rawFlagParts = [((NSString *) nil_chk([((NSString *) nil_chk(rawFlags)) java_trim])) java_split:@","];
  IOSCharArray *flags = [IOSCharArray arrayWithLength:((IOSObjectArray *) nil_chk(rawFlagParts))->size_];
  jint upto = 0;
  for (jint i = 0; i < rawFlagParts->size_; i++) {
    NSString *replacement = [((NSString *) nil_chk(IOSObjectArray_Get(rawFlagParts, i))) java_replaceAll:@"[^0-9]" withReplacement:@""];
    if ([((NSString *) nil_chk(replacement)) java_isEmpty]) {
      continue;
    }
    *IOSCharArray_GetRef(flags, upto++) = (jchar) JavaLangInteger_parseIntWithNSString_(replacement);
  }
  if (upto < flags->size_) {
    flags = JavaUtilArrays_copyOfWithCharArray_withInt_(flags, upto);
  }
  return flags;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseFlagsWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parseFlags", "LNSString;", "LOrgApacheLuceneAnalysisHunspellDictionary;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy = { "NumFlagParsingStrategy", "org.apache.lucene.analysis.hunspell", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy;
}

@end

void OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy_init(OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy *self) {
  OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy_init(self);
}

OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy *new_OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy, init)
}

OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy *create_OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisHunspellDictionary_NumFlagParsingStrategy)

@implementation OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSCharArray *)parseFlagsWithNSString:(NSString *)rawFlags {
  if ([((NSString *) nil_chk(rawFlags)) java_length] == 0) {
    return [IOSCharArray arrayWithLength:0];
  }
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  if (JreIntMod([rawFlags java_length], 2) == 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid flags (should be even number of characters): ", rawFlags));
  }
  for (jint i = 0; i < [rawFlags java_length]; i += 2) {
    jchar f1 = [rawFlags charAtWithInt:i];
    jchar f2 = [rawFlags charAtWithInt:i + 1];
    if (f1 >= 256 || f2 >= 256) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid flags (LONG flags must be double ASCII): ", rawFlags));
    }
    jchar combined = (jchar) ((JreLShift32(f1, 8)) | f2);
    [builder appendWithChar:combined];
  }
  IOSCharArray *flags = [IOSCharArray arrayWithLength:[builder java_length]];
  [builder getCharsWithInt:0 withInt:[builder java_length] withCharArray:flags withInt:0];
  return flags;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseFlagsWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parseFlags", "LNSString;", "LOrgApacheLuceneAnalysisHunspellDictionary;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy = { "DoubleASCIIFlagParsingStrategy", "org.apache.lucene.analysis.hunspell", ptrTable, methods, NULL, 7, 0xa, 2, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy;
}

@end

void OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy_init(OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy *self) {
  OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy_init(self);
}

OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy *new_OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy, init)
}

OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy *create_OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisHunspellDictionary_DoubleASCIIFlagParsingStrategy)
