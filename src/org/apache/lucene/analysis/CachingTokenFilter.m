//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/analysis/CachingTokenFilter.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/CachingTokenFilter.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/AttributeSource.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/CachingTokenFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCachingTokenFilter () {
 @public
  id<JavaUtilList> cache_;
  id<JavaUtilIterator> iterator_;
  OrgApacheLuceneUtilAttributeSource_State *finalState_;
}

- (void)fillCache;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCachingTokenFilter, cache_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCachingTokenFilter, iterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCachingTokenFilter, finalState_, OrgApacheLuceneUtilAttributeSource_State *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisCachingTokenFilter_fillCache(OrgApacheLuceneAnalysisCachingTokenFilter *self);

@implementation OrgApacheLuceneAnalysisCachingTokenFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input {
  OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  return self;
}

- (void)reset {
  if (cache_ == nil) {
    [((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) reset];
  }
  else {
    JreStrongAssign(&iterator_, [cache_ iterator]);
  }
}

- (jboolean)incrementToken {
  if (cache_ == nil) {
    JreStrongAssignAndConsume(&cache_, new_JavaUtilArrayList_initWithInt_(64));
    OrgApacheLuceneAnalysisCachingTokenFilter_fillCache(self);
    JreStrongAssign(&iterator_, [((id<JavaUtilList>) nil_chk(cache_)) iterator]);
  }
  if (![((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext]) {
    return false;
  }
  [self restoreStateWithOrgApacheLuceneUtilAttributeSource_State:[((id<JavaUtilIterator>) nil_chk(iterator_)) next]];
  return true;
}

- (void)end {
  if (finalState_ != nil) {
    [self restoreStateWithOrgApacheLuceneUtilAttributeSource_State:finalState_];
  }
}

- (void)fillCache {
  OrgApacheLuceneAnalysisCachingTokenFilter_fillCache(self);
}

- (jboolean)isCached {
  return cache_ != nil;
}

- (void)dealloc {
  RELEASE_(cache_);
  RELEASE_(iterator_);
  RELEASE_(finalState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(incrementToken);
  methods[3].selector = @selector(end);
  methods[4].selector = @selector(fillCache);
  methods[5].selector = @selector(isCached);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cache_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 2, -1 },
    { "iterator_", "LJavaUtilIterator;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
    { "finalState_", "LOrgApacheLuceneUtilAttributeSource_State;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;", "LJavaIoIOException;", "Ljava/util/List<Lorg/apache/lucene/util/AttributeSource$State;>;", "Ljava/util/Iterator<Lorg/apache/lucene/util/AttributeSource$State;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCachingTokenFilter = { "CachingTokenFilter", "org.apache.lucene.analysis", ptrTable, methods, fields, 7, 0x11, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCachingTokenFilter;
}

@end

void OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisCachingTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssign(&self->cache_, nil);
  JreStrongAssign(&self->iterator_, nil);
}

OrgApacheLuceneAnalysisCachingTokenFilter *new_OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCachingTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_, input)
}

OrgApacheLuceneAnalysisCachingTokenFilter *create_OrgApacheLuceneAnalysisCachingTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCachingTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_, input)
}

void OrgApacheLuceneAnalysisCachingTokenFilter_fillCache(OrgApacheLuceneAnalysisCachingTokenFilter *self) {
  while ([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(self->input_)) incrementToken]) {
    [((id<JavaUtilList>) nil_chk(self->cache_)) addWithId:[self captureState]];
  }
  [self->input_ end];
  JreStrongAssign(&self->finalState_, [self captureState]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCachingTokenFilter)
