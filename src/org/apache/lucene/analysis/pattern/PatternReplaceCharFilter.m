//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceCharFilter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/charfilter/BaseCharFilter.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceCharFilter.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/pattern/PatternReplaceCharFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter () {
 @public
  JavaUtilRegexPattern *pattern_;
  NSString *replacement_;
  JavaIoReader *transformedInput_;
}

- (void)fill;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter, pattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter, replacement_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter, transformedInput_, JavaIoReader *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter_fill(OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter *self);

@implementation OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter

- (instancetype)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                withNSString:(NSString *)replacement
                            withJavaIoReader:(JavaIoReader *)inArg {
  OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter_initWithJavaUtilRegexPattern_withNSString_withJavaIoReader_(self, pattern, replacement, inArg);
  return self;
}

- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)off
                  withInt:(jint)len {
  if (transformedInput_ == nil) {
    OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter_fill(self);
  }
  return [((JavaIoReader *) nil_chk(transformedInput_)) readWithCharArray:cbuf withInt:off withInt:len];
}

- (void)fill {
  OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter_fill(self);
}

- (jint)read {
  if (transformedInput_ == nil) {
    OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter_fill(self);
  }
  return [((JavaIoReader *) nil_chk(transformedInput_)) read];
}

- (jint)correctWithInt:(jint)currentOff {
  return JavaLangMath_maxWithInt_withInt_(0, [super correctWithInt:currentOff]);
}

- (id<JavaLangCharSequence>)processPatternWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  JavaUtilRegexMatcher *m = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:input];
  JavaLangStringBuffer *cumulativeOutput = create_JavaLangStringBuffer_init();
  jint cumulative = 0;
  jint lastMatchEnd = 0;
  while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    jint groupSize = [m end] - [m start];
    jint skippedSize = [m start] - lastMatchEnd;
    lastMatchEnd = [m end];
    jint lengthBeforeReplacement = [cumulativeOutput java_length] + skippedSize;
    [m appendReplacementWithJavaLangStringBuffer:cumulativeOutput withNSString:replacement_];
    jint replacementSize = [cumulativeOutput java_length] - lengthBeforeReplacement;
    if (groupSize != replacementSize) {
      if (replacementSize < groupSize) {
        cumulative += groupSize - replacementSize;
        jint atIndex = lengthBeforeReplacement + replacementSize;
        [self addOffCorrectMapWithInt:atIndex withInt:cumulative];
      }
      else {
        for (jint i = groupSize; i < replacementSize; i++) {
          [self addOffCorrectMapWithInt:lengthBeforeReplacement + i withInt:--cumulative];
        }
      }
    }
  }
  [m appendTailWithJavaLangStringBuffer:cumulativeOutput];
  return cumulativeOutput;
}

- (void)dealloc {
  RELEASE_(pattern_);
  RELEASE_(replacement_);
  RELEASE_(transformedInput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x0, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilRegexPattern:withNSString:withJavaIoReader:);
  methods[1].selector = @selector(readWithCharArray:withInt:withInt:);
  methods[2].selector = @selector(fill);
  methods[3].selector = @selector(read);
  methods[4].selector = @selector(correctWithInt:);
  methods[5].selector = @selector(processPatternWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "replacement_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "transformedInput_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilRegexPattern;LNSString;LJavaIoReader;", "read", "[CII", "LJavaIoIOException;", "correct", "I", "processPattern", "LJavaLangCharSequence;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter = { "PatternReplaceCharFilter", "org.apache.lucene.analysis.pattern", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter;
}

@end

void OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter_initWithJavaUtilRegexPattern_withNSString_withJavaIoReader_(OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter *self, JavaUtilRegexPattern *pattern, NSString *replacement, JavaIoReader *inArg) {
  OrgApacheLuceneAnalysisCharfilterBaseCharFilter_initWithJavaIoReader_(self, inArg);
  JreStrongAssign(&self->pattern_, pattern);
  JreStrongAssign(&self->replacement_, replacement);
}

OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter *new_OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter_initWithJavaUtilRegexPattern_withNSString_withJavaIoReader_(JavaUtilRegexPattern *pattern, NSString *replacement, JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter, initWithJavaUtilRegexPattern_withNSString_withJavaIoReader_, pattern, replacement, inArg)
}

OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter *create_OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter_initWithJavaUtilRegexPattern_withNSString_withJavaIoReader_(JavaUtilRegexPattern *pattern, NSString *replacement, JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter, initWithJavaUtilRegexPattern_withNSString_withJavaIoReader_, pattern, replacement, inArg)
}

void OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter_fill(OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter *self) {
  JavaLangStringBuilder *buffered = create_JavaLangStringBuilder_init();
  IOSCharArray *temp = [IOSCharArray arrayWithLength:1024];
  for (jint cnt = [((JavaIoReader *) nil_chk(self->input_)) readWithCharArray:temp]; cnt > 0; cnt = [self->input_ readWithCharArray:temp]) {
    [buffered appendWithCharArray:temp withInt:0 withInt:cnt];
  }
  JreStrongAssignAndConsume(&self->transformedInput_, new_JavaIoStringReader_initWithNSString_([((id<JavaLangCharSequence>) nil_chk([self processPatternWithJavaLangCharSequence:buffered])) description]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPatternPatternReplaceCharFilter)
