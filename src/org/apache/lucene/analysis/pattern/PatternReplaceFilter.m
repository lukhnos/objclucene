//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/pattern/PatternReplaceFilter.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/pattern/PatternReplaceFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisPatternPatternReplaceFilter () {
 @public
  NSString *replacement_;
  jboolean all_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  JavaUtilRegexMatcher *m_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternReplaceFilter, replacement_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternReplaceFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternReplaceFilter, m_, JavaUtilRegexMatcher *)

@implementation OrgApacheLuceneAnalysisPatternPatternReplaceFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                  withJavaUtilRegexPattern:(JavaUtilRegexPattern *)p
                                              withNSString:(NSString *)replacement
                                               withBoolean:(jboolean)all {
  OrgApacheLuceneAnalysisPatternPatternReplaceFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_(self, inArg, p, replacement, all);
  return self;
}

- (jboolean)incrementToken {
  if (![((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) return false;
  [((JavaUtilRegexMatcher *) nil_chk(m_)) reset];
  if ([m_ find]) {
    NSString *transformed = all_ ? [m_ replaceAllWithNSString:replacement_] : [m_ replaceFirstWithNSString:replacement_];
    [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk([((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) setEmpty])) appendWithNSString:transformed];
  }
  return true;
}

- (void)dealloc {
  RELEASE_(replacement_);
  RELEASE_(termAtt_);
  RELEASE_(m_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withJavaUtilRegexPattern:withNSString:withBoolean:);
  methods[1].selector = @selector(incrementToken);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "replacement_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "all_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "m_", "LJavaUtilRegexMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;LJavaUtilRegexPattern;LNSString;Z", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPatternPatternReplaceFilter = { "PatternReplaceFilter", "org.apache.lucene.analysis.pattern", ptrTable, methods, fields, 7, 0x11, 2, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisPatternPatternReplaceFilter;
}

@end

void OrgApacheLuceneAnalysisPatternPatternReplaceFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_(OrgApacheLuceneAnalysisPatternPatternReplaceFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, JavaUtilRegexPattern *p, NSString *replacement, jboolean all) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->replacement_, (nil == replacement) ? @"" : replacement);
  self->all_ = all;
  JreStrongAssign(&self->m_, [((JavaUtilRegexPattern *) nil_chk(p)) matcherWithJavaLangCharSequence:self->termAtt_]);
}

OrgApacheLuceneAnalysisPatternPatternReplaceFilter *new_OrgApacheLuceneAnalysisPatternPatternReplaceFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_(OrgApacheLuceneAnalysisTokenStream *inArg, JavaUtilRegexPattern *p, NSString *replacement, jboolean all) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPatternPatternReplaceFilter, initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_, inArg, p, replacement, all)
}

OrgApacheLuceneAnalysisPatternPatternReplaceFilter *create_OrgApacheLuceneAnalysisPatternPatternReplaceFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_(OrgApacheLuceneAnalysisTokenStream *inArg, JavaUtilRegexPattern *p, NSString *replacement, jboolean all) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPatternPatternReplaceFilter, initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_withNSString_withBoolean_, inArg, p, replacement, all)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPatternPatternReplaceFilter)
