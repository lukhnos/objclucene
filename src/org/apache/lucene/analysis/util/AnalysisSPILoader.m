//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Thread.h"
#include "java/lang/reflect/Constructor.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/ServiceConfigurationError.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/AnalysisSPILoader.h"
#include "org/apache/lucene/util/SPIClassIterator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/util/AnalysisSPILoader must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisUtilAnalysisSPILoader () {
 @public
  volatile_id services_;
  IOSClass *clazz_;
  IOSObjectArray *suffixes_;
}

@end

J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, services_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, clazz_, IOSClass *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, suffixes_, IOSObjectArray *)

@implementation OrgApacheLuceneAnalysisUtilAnalysisSPILoader

- (instancetype)initPackagePrivateWithIOSClass:(IOSClass *)clazz {
  OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_(self, clazz);
  return self;
}

- (instancetype)initPackagePrivateWithIOSClass:(IOSClass *)clazz
                       withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withJavaLangClassLoader_(self, clazz, loader);
  return self;
}

- (instancetype)initPackagePrivateWithIOSClass:(IOSClass *)clazz
                             withNSStringArray:(IOSObjectArray *)suffixes {
  OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_(self, clazz, suffixes);
  return self;
}

- (instancetype)initPackagePrivateWithIOSClass:(IOSClass *)clazz
                             withNSStringArray:(IOSObjectArray *)suffixes
                       withJavaLangClassLoader:(JavaLangClassLoader *)classloader {
  OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_withJavaLangClassLoader_(self, clazz, suffixes, classloader);
  return self;
}

- (void)reloadWithJavaLangClassLoader:(JavaLangClassLoader *)classloader {
  @synchronized(self) {
    JavaUtilLinkedHashMap *services = create_JavaUtilLinkedHashMap_initWithJavaUtilMap_(JreLoadVolatileId(&self->services_));
    OrgApacheLuceneUtilSPIClassIterator *loader = OrgApacheLuceneUtilSPIClassIterator_getWithIOSClass_withJavaLangClassLoader_(clazz_, classloader);
    while ([((OrgApacheLuceneUtilSPIClassIterator *) nil_chk(loader)) hasNext]) {
      IOSClass *service = [loader next];
      NSString *clazzName = [((IOSClass *) nil_chk(service)) getSimpleName];
      NSString *name = nil;
      {
        IOSObjectArray *a__ = suffixes_;
        NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *suffix = *b__++;
          if ([((NSString *) nil_chk(clazzName)) java_hasSuffix:suffix]) {
            name = [((NSString *) nil_chk([clazzName java_substring:0 endIndex:[clazzName java_length] - [((NSString *) nil_chk(suffix)) java_length]])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
            break;
          }
        }
      }
      if (name == nil) {
        @throw create_JavaUtilServiceConfigurationError_initWithNSString_(JreStrcat("$$$$", @"The class name ", [service getName], @" has wrong suffix, allowed are: ", JavaUtilArrays_toStringWithNSObjectArray_(suffixes_)));
      }
      if (![services containsKeyWithId:name]) {
        [services putWithId:name withId:service];
      }
    }
    JreVolatileStrongAssign(&self->services_, JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(services));
  }
}

- (OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory *)newInstanceWithNSString:(NSString *)name
                                                                withJavaUtilMap:(id<JavaUtilMap>)args {
  IOSClass *service = [self lookupClassWithNSString:name];
  @try {
    return [((JavaLangReflectConstructor *) nil_chk(([((IOSClass *) nil_chk(service)) getConstructor:[IOSObjectArray arrayWithObjects:(id[]){ JavaUtilMap_class_() } count:1 type:IOSClass_class_()]]))) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ args } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$$$$$", @"SPI class of type ", [((IOSClass *) nil_chk(clazz_)) getName], @" with name '", name, @"' cannot be instantiated. This is likely due to a misconfiguration of the java class '", [service getName], @"': "), e);
  }
}

- (IOSClass *)lookupClassWithNSString:(NSString *)name {
  IOSClass *service = [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&services_))) getWithId:[((NSString *) nil_chk(name)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)]];
  if (service != nil) {
    return service;
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$$$@", @"A SPI class of type ", [((IOSClass *) nil_chk(clazz_)) getName], @" with name '", name, @"' does not exist. You need to add the corresponding JAR file supporting this SPI to your classpath. The current classpath supports the following names: ", [self availableServices]));
  }
}

- (id<JavaUtilSet>)availableServices {
  return [((id<JavaUtilMap>) nil_chk(JreLoadVolatileId(&services_))) keySet];
}

- (void)__javaClone:(OrgApacheLuceneAnalysisUtilAnalysisSPILoader *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&services_, &original->services_);
}

- (void)dealloc {
  JreReleaseVolatile(&services_);
  RELEASE_(clazz_);
  RELEASE_(suffixes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x21, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisUtilAbstractAnalysisFactory;", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LIOSClass;", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithIOSClass:);
  methods[1].selector = @selector(initPackagePrivateWithIOSClass:withJavaLangClassLoader:);
  methods[2].selector = @selector(initPackagePrivateWithIOSClass:withNSStringArray:);
  methods[3].selector = @selector(initPackagePrivateWithIOSClass:withNSStringArray:withJavaLangClassLoader:);
  methods[4].selector = @selector(reloadWithJavaLangClassLoader:);
  methods[5].selector = @selector(newInstanceWithNSString:withJavaUtilMap:);
  methods[6].selector = @selector(lookupClassWithNSString:);
  methods[7].selector = @selector(availableServices);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "services_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x42, -1, -1, 17, -1 },
    { "clazz_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "suffixes_", "[LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;", "(Ljava/lang/Class<TS;>;)V", "LIOSClass;LJavaLangClassLoader;", "(Ljava/lang/Class<TS;>;Ljava/lang/ClassLoader;)V", "LIOSClass;[LNSString;", "(Ljava/lang/Class<TS;>;[Ljava/lang/String;)V", "LIOSClass;[LNSString;LJavaLangClassLoader;", "(Ljava/lang/Class<TS;>;[Ljava/lang/String;Ljava/lang/ClassLoader;)V", "reload", "LJavaLangClassLoader;", "newInstance", "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)TS;", "lookupClass", "LNSString;", "(Ljava/lang/String;)Ljava/lang/Class<+TS;>;", "()Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Class<+TS;>;>;", "Ljava/lang/Class<TS;>;", "<S:Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisUtilAnalysisSPILoader = { "AnalysisSPILoader", "org.apache.lucene.analysis.util", ptrTable, methods, fields, 7, 0x10, 8, 3, -1, -1, -1, 19, -1 };
  return &_OrgApacheLuceneAnalysisUtilAnalysisSPILoader;
}

@end

void OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_(OrgApacheLuceneAnalysisUtilAnalysisSPILoader *self, IOSClass *clazz) {
  OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_(self, clazz, [IOSObjectArray arrayWithObjects:(id[]){ [((IOSClass *) nil_chk(clazz)) getSimpleName] } count:1 type:NSString_class_()]);
}

OrgApacheLuceneAnalysisUtilAnalysisSPILoader *new_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_(IOSClass *clazz) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, initPackagePrivateWithIOSClass_, clazz)
}

OrgApacheLuceneAnalysisUtilAnalysisSPILoader *create_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_(IOSClass *clazz) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, initPackagePrivateWithIOSClass_, clazz)
}

void OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withJavaLangClassLoader_(OrgApacheLuceneAnalysisUtilAnalysisSPILoader *self, IOSClass *clazz, JavaLangClassLoader *loader) {
  OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_withJavaLangClassLoader_(self, clazz, [IOSObjectArray arrayWithObjects:(id[]){ [((IOSClass *) nil_chk(clazz)) getSimpleName] } count:1 type:NSString_class_()], loader);
}

OrgApacheLuceneAnalysisUtilAnalysisSPILoader *new_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withJavaLangClassLoader_(IOSClass *clazz, JavaLangClassLoader *loader) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, initPackagePrivateWithIOSClass_withJavaLangClassLoader_, clazz, loader)
}

OrgApacheLuceneAnalysisUtilAnalysisSPILoader *create_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withJavaLangClassLoader_(IOSClass *clazz, JavaLangClassLoader *loader) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, initPackagePrivateWithIOSClass_withJavaLangClassLoader_, clazz, loader)
}

void OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_(OrgApacheLuceneAnalysisUtilAnalysisSPILoader *self, IOSClass *clazz, IOSObjectArray *suffixes) {
  OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_withJavaLangClassLoader_(self, clazz, suffixes, [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getContextClassLoader]);
}

OrgApacheLuceneAnalysisUtilAnalysisSPILoader *new_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_(IOSClass *clazz, IOSObjectArray *suffixes) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, initPackagePrivateWithIOSClass_withNSStringArray_, clazz, suffixes)
}

OrgApacheLuceneAnalysisUtilAnalysisSPILoader *create_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_(IOSClass *clazz, IOSObjectArray *suffixes) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, initPackagePrivateWithIOSClass_withNSStringArray_, clazz, suffixes)
}

void OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_withJavaLangClassLoader_(OrgApacheLuceneAnalysisUtilAnalysisSPILoader *self, IOSClass *clazz, IOSObjectArray *suffixes, JavaLangClassLoader *classloader) {
  NSObject_init(self);
  JreVolatileStrongAssign(&self->services_, JavaUtilCollections_emptyMap());
  JreStrongAssign(&self->clazz_, clazz);
  JreStrongAssign(&self->suffixes_, suffixes);
  JavaLangClassLoader *clazzClassloader = [((IOSClass *) nil_chk(clazz)) getClassLoader];
  if (clazzClassloader != nil && !OrgApacheLuceneUtilSPIClassIterator_isParentClassLoaderWithJavaLangClassLoader_withJavaLangClassLoader_(clazzClassloader, classloader)) {
    [self reloadWithJavaLangClassLoader:clazzClassloader];
  }
  [self reloadWithJavaLangClassLoader:classloader];
}

OrgApacheLuceneAnalysisUtilAnalysisSPILoader *new_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_withJavaLangClassLoader_(IOSClass *clazz, IOSObjectArray *suffixes, JavaLangClassLoader *classloader) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, initPackagePrivateWithIOSClass_withNSStringArray_withJavaLangClassLoader_, clazz, suffixes, classloader)
}

OrgApacheLuceneAnalysisUtilAnalysisSPILoader *create_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_withNSStringArray_withJavaLangClassLoader_(IOSClass *clazz, IOSObjectArray *suffixes, JavaLangClassLoader *classloader) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisUtilAnalysisSPILoader, initPackagePrivateWithIOSClass_withNSStringArray_withJavaLangClassLoader_, clazz, suffixes, classloader)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisUtilAnalysisSPILoader)
