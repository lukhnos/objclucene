//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/TokenizerFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/AnalysisSPILoader.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/util/TokenizerFactory must not be compiled with ARC (-fobjc-arc)"
#endif

inline OrgApacheLuceneAnalysisUtilAnalysisSPILoader *OrgApacheLuceneAnalysisUtilTokenizerFactory_get_loader(void);
static OrgApacheLuceneAnalysisUtilAnalysisSPILoader *OrgApacheLuceneAnalysisUtilTokenizerFactory_loader;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisUtilTokenizerFactory, loader, OrgApacheLuceneAnalysisUtilAnalysisSPILoader *)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisUtilTokenizerFactory)

@implementation OrgApacheLuceneAnalysisUtilTokenizerFactory

+ (OrgApacheLuceneAnalysisUtilTokenizerFactory *)forNameWithNSString:(NSString *)name
                                                     withJavaUtilMap:(id<JavaUtilMap>)args {
  return OrgApacheLuceneAnalysisUtilTokenizerFactory_forNameWithNSString_withJavaUtilMap_(name, args);
}

+ (IOSClass *)lookupClassWithNSString:(NSString *)name {
  return OrgApacheLuceneAnalysisUtilTokenizerFactory_lookupClassWithNSString_(name);
}

+ (id<JavaUtilSet>)availableTokenizers {
  return OrgApacheLuceneAnalysisUtilTokenizerFactory_availableTokenizers();
}

+ (void)reloadTokenizersWithJavaLangClassLoader:(JavaLangClassLoader *)classloader {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_reloadTokenizersWithJavaLangClassLoader_(classloader);
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)args {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initWithJavaUtilMap_(self, args);
  return self;
}

- (OrgApacheLuceneAnalysisTokenizer *)create {
  return [self createWithOrgApacheLuceneUtilAttributeFactory:JreLoadStatic(OrgApacheLuceneAnalysisTokenStream, DEFAULT_TOKEN_ATTRIBUTE_FACTORY)];
}

- (OrgApacheLuceneAnalysisTokenizer *)createWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneAnalysisUtilTokenizerFactory;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LIOSClass;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, -1, -1, -1, 6, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 9, -1, 10, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenizer;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenizer;", 0x401, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(forNameWithNSString:withJavaUtilMap:);
  methods[1].selector = @selector(lookupClassWithNSString:);
  methods[2].selector = @selector(availableTokenizers);
  methods[3].selector = @selector(reloadTokenizersWithJavaLangClassLoader:);
  methods[4].selector = @selector(initWithJavaUtilMap:);
  methods[5].selector = @selector(create);
  methods[6].selector = @selector(createWithOrgApacheLuceneUtilAttributeFactory:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "loader", "LOrgApacheLuceneAnalysisUtilAnalysisSPILoader;", .constantValue.asLong = 0, 0x1a, -1, 13, 14, -1 },
  };
  static const void *ptrTable[] = { "forName", "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Lorg/apache/lucene/analysis/util/TokenizerFactory;", "lookupClass", "LNSString;", "(Ljava/lang/String;)Ljava/lang/Class<+Lorg/apache/lucene/analysis/util/TokenizerFactory;>;", "()Ljava/util/Set<Ljava/lang/String;>;", "reloadTokenizers", "LJavaLangClassLoader;", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "create", "LOrgApacheLuceneUtilAttributeFactory;", &OrgApacheLuceneAnalysisUtilTokenizerFactory_loader, "Lorg/apache/lucene/analysis/util/AnalysisSPILoader<Lorg/apache/lucene/analysis/util/TokenizerFactory;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisUtilTokenizerFactory = { "TokenizerFactory", "org.apache.lucene.analysis.util", ptrTable, methods, fields, 7, 0x401, 7, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisUtilTokenizerFactory;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisUtilTokenizerFactory class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisUtilTokenizerFactory_loader, new_OrgApacheLuceneAnalysisUtilAnalysisSPILoader_initPackagePrivateWithIOSClass_(OrgApacheLuceneAnalysisUtilTokenizerFactory_class_()));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisUtilTokenizerFactory)
  }
}

@end

OrgApacheLuceneAnalysisUtilTokenizerFactory *OrgApacheLuceneAnalysisUtilTokenizerFactory_forNameWithNSString_withJavaUtilMap_(NSString *name, id<JavaUtilMap> args) {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initialize();
  return ((OrgApacheLuceneAnalysisUtilTokenizerFactory *) [((OrgApacheLuceneAnalysisUtilAnalysisSPILoader *) nil_chk(OrgApacheLuceneAnalysisUtilTokenizerFactory_loader)) newInstanceWithNSString:name withJavaUtilMap:args]);
}

IOSClass *OrgApacheLuceneAnalysisUtilTokenizerFactory_lookupClassWithNSString_(NSString *name) {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initialize();
  return [((OrgApacheLuceneAnalysisUtilAnalysisSPILoader *) nil_chk(OrgApacheLuceneAnalysisUtilTokenizerFactory_loader)) lookupClassWithNSString:name];
}

id<JavaUtilSet> OrgApacheLuceneAnalysisUtilTokenizerFactory_availableTokenizers() {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initialize();
  return [((OrgApacheLuceneAnalysisUtilAnalysisSPILoader *) nil_chk(OrgApacheLuceneAnalysisUtilTokenizerFactory_loader)) availableServices];
}

void OrgApacheLuceneAnalysisUtilTokenizerFactory_reloadTokenizersWithJavaLangClassLoader_(JavaLangClassLoader *classloader) {
  OrgApacheLuceneAnalysisUtilTokenizerFactory_initialize();
  [((OrgApacheLuceneAnalysisUtilAnalysisSPILoader *) nil_chk(OrgApacheLuceneAnalysisUtilTokenizerFactory_loader)) reloadWithJavaLangClassLoader:classloader];
}

void OrgApacheLuceneAnalysisUtilTokenizerFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisUtilTokenizerFactory *self, id<JavaUtilMap> args) {
  OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory_initWithJavaUtilMap_(self, args);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisUtilTokenizerFactory)
