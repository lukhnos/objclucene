//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/util/AttributeFactory.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/ngram/Lucene43NGramTokenizer must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer () {
 @public
  jint minGram_;
  jint maxGram_;
  jint gramSize_;
  jint pos_;
  jint inLen_;
  jint charsRead_;
  NSString *inStr_;
  jboolean started_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
}

- (void)init__WithInt:(jint)minGram
              withInt:(jint)maxGram OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer, inStr_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)

__attribute__((unused)) static void OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_init__WithInt_withInt_(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *self, jint minGram, jint maxGram);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer__Annotations$0(void);

@implementation OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer

+ (jint)DEFAULT_MIN_NGRAM_SIZE {
  return OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_DEFAULT_MIN_NGRAM_SIZE;
}

+ (jint)DEFAULT_MAX_NGRAM_SIZE {
  return OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_DEFAULT_MAX_NGRAM_SIZE;
}

- (instancetype)initWithInt:(jint)minGram
                    withInt:(jint)maxGram {
  OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_initWithInt_withInt_(self, minGram, maxGram);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                                    withInt:(jint)minGram
                                                    withInt:(jint)maxGram {
  OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withInt_(self, factory, minGram, maxGram);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithInt:(jint)minGram
              withInt:(jint)maxGram {
  OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_init__WithInt_withInt_(self, minGram, maxGram);
}

- (jboolean)incrementToken {
  [self clearAttributes];
  if (!started_) {
    started_ = true;
    gramSize_ = minGram_;
    IOSCharArray *chars = [IOSCharArray arrayWithLength:1024];
    charsRead_ = 0;
    while (charsRead_ < chars->size_) {
      jint inc = [((JavaIoReader *) nil_chk(input_)) readWithCharArray:chars withInt:charsRead_ withInt:chars->size_ - charsRead_];
      if (inc == -1) {
        break;
      }
      charsRead_ += inc;
    }
    JreStrongAssign(&inStr_, [[NSString java_stringWithCharacters:chars offset:0 length:charsRead_] java_trim]);
    if (charsRead_ == chars->size_) {
      IOSCharArray *throwaway = [IOSCharArray arrayWithLength:1024];
      while (true) {
        jint inc = [((JavaIoReader *) nil_chk(input_)) readWithCharArray:throwaway withInt:0 withInt:throwaway->size_];
        if (inc == -1) {
          break;
        }
        charsRead_ += inc;
      }
    }
    inLen_ = [((NSString *) nil_chk(inStr_)) java_length];
    if (inLen_ == 0) {
      return false;
    }
  }
  if (pos_ + gramSize_ > inLen_) {
    pos_ = 0;
    gramSize_++;
    if (gramSize_ > maxGram_) return false;
    if (pos_ + gramSize_ > inLen_) return false;
  }
  jint oldPos = pos_;
  pos_++;
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk([((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) setEmpty])) appendWithJavaLangCharSequence:inStr_ withInt:oldPos withInt:oldPos + gramSize_];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[self correctOffsetWithInt:oldPos] withInt:[self correctOffsetWithInt:oldPos + gramSize_]];
  return true;
}

- (void)end {
  [super end];
  jint finalOffset = [self correctOffsetWithInt:charsRead_];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAtt_)) setOffsetWithInt:finalOffset withInt:finalOffset];
}

- (void)reset {
  [super reset];
  started_ = false;
  pos_ = 0;
}

- (void)dealloc {
  RELEASE_(inStr_);
  RELEASE_(termAtt_);
  RELEASE_(offsetAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithOrgApacheLuceneUtilAttributeFactory:withInt:withInt:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(init__WithInt:withInt:);
  methods[4].selector = @selector(incrementToken);
  methods[5].selector = @selector(end);
  methods[6].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MIN_NGRAM_SIZE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_DEFAULT_MIN_NGRAM_SIZE, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MAX_NGRAM_SIZE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_DEFAULT_MAX_NGRAM_SIZE, 0x19, -1, -1, -1, -1 },
    { "minGram_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxGram_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gramSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "charsRead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inStr_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "started_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "offsetAtt_", "LOrgApacheLuceneAnalysisTokenattributesOffsetAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LOrgApacheLuceneUtilAttributeFactory;II", "init", "LJavaIoIOException;", (void *)&OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer__Annotations$0 };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer = { "Lucene43NGramTokenizer", "org.apache.lucene.analysis.ngram", ptrTable, methods, fields, 7, 0x11, 7, 12, -1, -1, -1, -1, 4 };
  return &_OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer;
}

@end

void OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_initWithInt_withInt_(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *self, jint minGram, jint maxGram) {
  OrgApacheLuceneAnalysisTokenizer_init(self);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_init__WithInt_withInt_(self, minGram, maxGram);
}

OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *new_OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_initWithInt_withInt_(jint minGram, jint maxGram) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer, initWithInt_withInt_, minGram, maxGram)
}

OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *create_OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_initWithInt_withInt_(jint minGram, jint maxGram) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer, initWithInt_withInt_, minGram, maxGram)
}

void OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withInt_(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory, jint minGram, jint maxGram) {
  OrgApacheLuceneAnalysisTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_init__WithInt_withInt_(self, minGram, maxGram);
}

OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *new_OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint minGram, jint maxGram) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_withInt_withInt_, factory, minGram, maxGram)
}

OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *create_OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint minGram, jint maxGram) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_withInt_withInt_, factory, minGram, maxGram)
}

void OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_init(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *self) {
  OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_initWithInt_withInt_(self, OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_DEFAULT_MIN_NGRAM_SIZE, OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_DEFAULT_MAX_NGRAM_SIZE);
}

OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *new_OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer, init)
}

OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *create_OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer, init)
}

void OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer_init__WithInt_withInt_(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer *self, jint minGram, jint maxGram) {
  if (minGram < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"minGram must be greater than zero");
  }
  if (minGram > maxGram) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"minGram must not be greater than maxGram");
  }
  self->minGram_ = minGram;
  self->maxGram_ = maxGram;
}

IOSObjectArray *OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisNgramLucene43NGramTokenizer)
