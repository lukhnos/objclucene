//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/pt/RSLPStemmerBase.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/LineNumberReader.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/nio/charset/Charset.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/analysis/pt/RSLPStemmerBase.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/util/StemmerUtil.h"
#include "org/lukhnos/portmobile/charset/StandardCharsets.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/pt/RSLPStemmerBase must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisPtRSLPStemmerBase ()

+ (OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step *)parseStepWithJavaIoLineNumberReader:(JavaIoLineNumberReader *)r
                                                                          withNSString:(NSString *)header;

+ (IOSObjectArray *)parseRulesWithJavaIoLineNumberReader:(JavaIoLineNumberReader *)r
                                                 withInt:(jint)type;

+ (IOSObjectArray *)parseListWithNSString:(NSString *)s;

+ (NSString *)parseStringWithNSString:(NSString *)s;

+ (NSString *)readLineWithJavaIoLineNumberReader:(JavaIoLineNumberReader *)r;

@end

inline JavaUtilRegexPattern *OrgApacheLuceneAnalysisPtRSLPStemmerBase_get_headerPattern(void);
static JavaUtilRegexPattern *OrgApacheLuceneAnalysisPtRSLPStemmerBase_headerPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisPtRSLPStemmerBase, headerPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *OrgApacheLuceneAnalysisPtRSLPStemmerBase_get_stripPattern(void);
static JavaUtilRegexPattern *OrgApacheLuceneAnalysisPtRSLPStemmerBase_stripPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisPtRSLPStemmerBase, stripPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *OrgApacheLuceneAnalysisPtRSLPStemmerBase_get_repPattern(void);
static JavaUtilRegexPattern *OrgApacheLuceneAnalysisPtRSLPStemmerBase_repPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisPtRSLPStemmerBase, repPattern, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *OrgApacheLuceneAnalysisPtRSLPStemmerBase_get_excPattern(void);
static JavaUtilRegexPattern *OrgApacheLuceneAnalysisPtRSLPStemmerBase_excPattern;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisPtRSLPStemmerBase, excPattern, JavaUtilRegexPattern *)

__attribute__((unused)) static OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step *OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseStepWithJavaIoLineNumberReader_withNSString_(JavaIoLineNumberReader *r, NSString *header);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseRulesWithJavaIoLineNumberReader_withInt_(JavaIoLineNumberReader *r, jint type);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseListWithNSString_(NSString *s);

__attribute__((unused)) static NSString *OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseStringWithNSString_(NSString *s);

__attribute__((unused)) static NSString *OrgApacheLuceneAnalysisPtRSLPStemmerBase_readLineWithJavaIoLineNumberReader_(JavaIoLineNumberReader *r);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_matchesWithCharArray_withInt_(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule *self, IOSCharArray *s, jint len);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisPtRSLPStemmerBase)

@implementation OrgApacheLuceneAnalysisPtRSLPStemmerBase

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilMap>)parseWithIOSClass:(IOSClass *)clazz
                        withNSString:(NSString *)resource {
  return OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseWithIOSClass_withNSString_(clazz, resource);
}

+ (OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step *)parseStepWithJavaIoLineNumberReader:(JavaIoLineNumberReader *)r
                                                                          withNSString:(NSString *)header {
  return OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseStepWithJavaIoLineNumberReader_withNSString_(r, header);
}

+ (IOSObjectArray *)parseRulesWithJavaIoLineNumberReader:(JavaIoLineNumberReader *)r
                                                 withInt:(jint)type {
  return OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseRulesWithJavaIoLineNumberReader_withInt_(r, type);
}

+ (IOSObjectArray *)parseListWithNSString:(NSString *)s {
  return OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseListWithNSString_(s);
}

+ (NSString *)parseStringWithNSString:(NSString *)s {
  return OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseStringWithNSString_(s);
}

+ (NSString *)readLineWithJavaIoLineNumberReader:(JavaIoLineNumberReader *)r {
  return OrgApacheLuceneAnalysisPtRSLPStemmerBase_readLineWithJavaIoLineNumberReader_(r);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xc, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisPtRSLPStemmerBase_Step;", 0xa, 3, 4, 5, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule;", 0xa, 6, 7, 5, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 10, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 11, 12, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseWithIOSClass:withNSString:);
  methods[2].selector = @selector(parseStepWithJavaIoLineNumberReader:withNSString:);
  methods[3].selector = @selector(parseRulesWithJavaIoLineNumberReader:withInt:);
  methods[4].selector = @selector(parseListWithNSString:);
  methods[5].selector = @selector(parseStringWithNSString:);
  methods[6].selector = @selector(readLineWithJavaIoLineNumberReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "headerPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "stripPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "repPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "excPattern", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "parse", "LIOSClass;LNSString;", "(Ljava/lang/Class<+Lorg/apache/lucene/analysis/pt/RSLPStemmerBase;>;Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/analysis/pt/RSLPStemmerBase$Step;>;", "parseStep", "LJavaIoLineNumberReader;LNSString;", "LJavaIoIOException;", "parseRules", "LJavaIoLineNumberReader;I", "parseList", "LNSString;", "parseString", "readLine", "LJavaIoLineNumberReader;", &OrgApacheLuceneAnalysisPtRSLPStemmerBase_headerPattern, &OrgApacheLuceneAnalysisPtRSLPStemmerBase_stripPattern, &OrgApacheLuceneAnalysisPtRSLPStemmerBase_repPattern, &OrgApacheLuceneAnalysisPtRSLPStemmerBase_excPattern, "LOrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule;LOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions;LOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions;LOrgApacheLuceneAnalysisPtRSLPStemmerBase_Step;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPtRSLPStemmerBase = { "RSLPStemmerBase", "org.apache.lucene.analysis.pt", ptrTable, methods, fields, 7, 0x401, 7, 4, -1, 17, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisPtRSLPStemmerBase;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisPtRSLPStemmerBase class]) {
    JreStrongAssign(&OrgApacheLuceneAnalysisPtRSLPStemmerBase_headerPattern, JavaUtilRegexPattern_compileWithNSString_(@"^\\{\\s*\"([^\"]*)\",\\s*([0-9]+),\\s*(0|1),\\s*\\{(.*)\\},\\s*$"));
    JreStrongAssign(&OrgApacheLuceneAnalysisPtRSLPStemmerBase_stripPattern, JavaUtilRegexPattern_compileWithNSString_(@"^\\{\\s*\"([^\"]*)\",\\s*([0-9]+)\\s*\\}\\s*(,|(\\}\\s*;))$"));
    JreStrongAssign(&OrgApacheLuceneAnalysisPtRSLPStemmerBase_repPattern, JavaUtilRegexPattern_compileWithNSString_(@"^\\{\\s*\"([^\"]*)\",\\s*([0-9]+),\\s*\"([^\"]*)\"\\}\\s*(,|(\\}\\s*;))$"));
    JreStrongAssign(&OrgApacheLuceneAnalysisPtRSLPStemmerBase_excPattern, JavaUtilRegexPattern_compileWithNSString_(@"^\\{\\s*\"([^\"]*)\",\\s*([0-9]+),\\s*\"([^\"]*)\",\\s*\\{(.*)\\}\\s*\\}\\s*(,|(\\}\\s*;))$"));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisPtRSLPStemmerBase)
  }
}

@end

void OrgApacheLuceneAnalysisPtRSLPStemmerBase_init(OrgApacheLuceneAnalysisPtRSLPStemmerBase *self) {
  NSObject_init(self);
}

id<JavaUtilMap> OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseWithIOSClass_withNSString_(IOSClass *clazz, NSString *resource) {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_initialize();
  @try {
    JavaIoInputStream *is = [((IOSClass *) nil_chk(clazz)) getResourceAsStream:resource];
    JavaIoLineNumberReader *r = create_JavaIoLineNumberReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(is, JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8)));
    id<JavaUtilMap> steps = create_JavaUtilHashMap_init();
    NSString *step;
    while ((step = OrgApacheLuceneAnalysisPtRSLPStemmerBase_readLineWithJavaIoLineNumberReader_(r)) != nil) {
      OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step *s = OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseStepWithJavaIoLineNumberReader_withNSString_(r, step);
      [steps putWithId:((OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step *) nil_chk(s))->name_ withId:s];
    }
    [r close];
    return steps;
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step *OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseStepWithJavaIoLineNumberReader_withNSString_(JavaIoLineNumberReader *r, NSString *header) {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_initialize();
  JavaUtilRegexMatcher *matcher = JreRetainedLocalValue([((JavaUtilRegexPattern *) nil_chk(OrgApacheLuceneAnalysisPtRSLPStemmerBase_headerPattern)) matcherWithJavaLangCharSequence:header]);
  if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) find]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"Illegal Step header specified at line ", [((JavaIoLineNumberReader *) nil_chk(r)) getLineNumber]));
  }
  JreAssert([matcher groupCount] == 4, @"org/apache/lucene/analysis/pt/RSLPStemmerBase.java:277 condition failed: assert matcher.groupCount() == 4;");
  NSString *name = JreRetainedLocalValue([matcher groupWithInt:1]);
  jint min = JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:2]);
  jint type = JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:3]);
  IOSObjectArray *suffixes = OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseListWithNSString_([matcher groupWithInt:4]);
  IOSObjectArray *rules = OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseRulesWithJavaIoLineNumberReader_withInt_(r, type);
  return create_OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step_initWithNSString_withOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleArray_withInt_withNSStringArray_(name, rules, min, suffixes);
}

IOSObjectArray *OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseRulesWithJavaIoLineNumberReader_withInt_(JavaIoLineNumberReader *r, jint type) {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_initialize();
  id<JavaUtilList> rules = create_JavaUtilArrayList_init();
  NSString *line;
  while ((line = OrgApacheLuceneAnalysisPtRSLPStemmerBase_readLineWithJavaIoLineNumberReader_(r)) != nil) {
    JavaUtilRegexMatcher *matcher = JreRetainedLocalValue([((JavaUtilRegexPattern *) nil_chk(OrgApacheLuceneAnalysisPtRSLPStemmerBase_stripPattern)) matcherWithJavaLangCharSequence:line]);
    if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
      [rules addWithId:create_OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_initWithNSString_withInt_withNSString_([matcher groupWithInt:1], JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:2]), @"")];
    }
    else {
      matcher = [((JavaUtilRegexPattern *) nil_chk(OrgApacheLuceneAnalysisPtRSLPStemmerBase_repPattern)) matcherWithJavaLangCharSequence:line];
      if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
        [rules addWithId:create_OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_initWithNSString_withInt_withNSString_([matcher groupWithInt:1], JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:2]), [matcher groupWithInt:3])];
      }
      else {
        matcher = [((JavaUtilRegexPattern *) nil_chk(OrgApacheLuceneAnalysisPtRSLPStemmerBase_excPattern)) matcherWithJavaLangCharSequence:line];
        if ([((JavaUtilRegexMatcher *) nil_chk(matcher)) matches]) {
          if (type == 0) {
            [rules addWithId:create_OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions_initWithNSString_withInt_withNSString_withNSStringArray_([matcher groupWithInt:1], JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:2]), [matcher groupWithInt:3], OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseListWithNSString_([matcher groupWithInt:4]))];
          }
          else {
            [rules addWithId:create_OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions_initWithNSString_withInt_withNSString_withNSStringArray_([matcher groupWithInt:1], JavaLangInteger_parseIntWithNSString_([matcher groupWithInt:2]), [matcher groupWithInt:3], OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseListWithNSString_([matcher groupWithInt:4]))];
          }
        }
        else {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"Illegal Step rule specified at line ", [((JavaIoLineNumberReader *) nil_chk(r)) getLineNumber]));
        }
      }
    }
    if ([((NSString *) nil_chk(line)) java_hasSuffix:@";"]) return [rules toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[rules size] type:OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_class_()]];
  }
  return nil;
}

IOSObjectArray *OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseListWithNSString_(NSString *s) {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_initialize();
  if ([((NSString *) nil_chk(s)) java_length] == 0) return nil;
  IOSObjectArray *list = [s java_split:@","];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(list))->size_; i++) IOSObjectArray_Set(list, i, OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseStringWithNSString_([((NSString *) nil_chk(IOSObjectArray_Get(list, i))) java_trim]));
  return list;
}

NSString *OrgApacheLuceneAnalysisPtRSLPStemmerBase_parseStringWithNSString_(NSString *s) {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_initialize();
  return [((NSString *) nil_chk(s)) java_substring:1 endIndex:[s java_length] - 1];
}

NSString *OrgApacheLuceneAnalysisPtRSLPStemmerBase_readLineWithJavaIoLineNumberReader_(JavaIoLineNumberReader *r) {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_initialize();
  NSString *line = nil;
  while ((line = [((JavaIoLineNumberReader *) nil_chk(r)) readLine]) != nil) {
    line = [((NSString *) nil_chk(line)) java_trim];
    if ([((NSString *) nil_chk(line)) java_length] > 0 && [line charAtWithInt:0] != '#') return line;
  }
  return line;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPtRSLPStemmerBase)

@implementation OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule

- (instancetype)initWithNSString:(NSString *)suffix
                         withInt:(jint)min
                    withNSString:(NSString *)replacement {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_initWithNSString_withInt_withNSString_(self, suffix, min, replacement);
  return self;
}

- (jboolean)matchesWithCharArray:(IOSCharArray *)s
                         withInt:(jint)len {
  return OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_matchesWithCharArray_withInt_(self, s, len);
}

- (jint)replaceWithCharArray:(IOSCharArray *)s
                     withInt:(jint)len {
  if (((IOSCharArray *) nil_chk(replacement_))->size_ > 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(replacement_, 0, s, len - ((IOSCharArray *) nil_chk(suffix_))->size_, replacement_->size_);
  }
  return len - ((IOSCharArray *) nil_chk(suffix_))->size_ + replacement_->size_;
}

- (void)dealloc {
  RELEASE_(suffix_);
  RELEASE_(replacement_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withNSString:);
  methods[1].selector = @selector(matchesWithCharArray:withInt:);
  methods[2].selector = @selector(replaceWithCharArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "suffix_", "[C", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "replacement_", "[C", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "min_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILNSString;", "matches", "[CI", "replace", "LOrgApacheLuceneAnalysisPtRSLPStemmerBase;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule = { "Rule", "org.apache.lucene.analysis.pt", ptrTable, methods, fields, 7, 0xc, 3, 3, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule;
}

@end

void OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_initWithNSString_withInt_withNSString_(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule *self, NSString *suffix, jint min, NSString *replacement) {
  NSObject_init(self);
  JreStrongAssign(&self->suffix_, [((NSString *) nil_chk(suffix)) java_toCharArray]);
  JreStrongAssign(&self->replacement_, [((NSString *) nil_chk(replacement)) java_toCharArray]);
  self->min_ = min;
}

OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule *new_OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_initWithNSString_withInt_withNSString_(NSString *suffix, jint min, NSString *replacement) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule, initWithNSString_withInt_withNSString_, suffix, min, replacement)
}

OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule *create_OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_initWithNSString_withInt_withNSString_(NSString *suffix, jint min, NSString *replacement) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule, initWithNSString_withInt_withNSString_, suffix, min, replacement)
}

jboolean OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_matchesWithCharArray_withInt_(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule *self, IOSCharArray *s, jint len) {
  return (len - ((IOSCharArray *) nil_chk(self->suffix_))->size_ >= self->min_ && OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withCharArray_(s, len, self->suffix_));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule)

@implementation OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions

- (instancetype)initWithNSString:(NSString *)suffix
                         withInt:(jint)min
                    withNSString:(NSString *)replacement
               withNSStringArray:(IOSObjectArray *)exceptions {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions_initWithNSString_withInt_withNSString_withNSStringArray_(self, suffix, min, replacement, exceptions);
  return self;
}

- (jboolean)matchesWithCharArray:(IOSCharArray *)s
                         withInt:(jint)len {
  return OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_matchesWithCharArray_withInt_(self, s, len) && ![((OrgApacheLuceneAnalysisUtilCharArraySet *) nil_chk(exceptions_)) containsWithCharArray:s withInt:0 withInt:len];
}

- (void)dealloc {
  RELEASE_(exceptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withNSString:withNSStringArray:);
  methods[1].selector = @selector(matchesWithCharArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "exceptions_", "LOrgApacheLuceneAnalysisUtilCharArraySet;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILNSString;[LNSString;", "matches", "[CI", "LOrgApacheLuceneAnalysisPtRSLPStemmerBase;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions = { "RuleWithSetExceptions", "org.apache.lucene.analysis.pt", ptrTable, methods, fields, 7, 0xc, 2, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions;
}

@end

void OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions_initWithNSString_withInt_withNSString_withNSStringArray_(OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions *self, NSString *suffix, jint min, NSString *replacement, IOSObjectArray *exceptions) {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_initWithNSString_withInt_withNSString_(self, suffix, min, replacement);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(exceptions))->size_; i++) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(exceptions, i))) java_hasSuffix:suffix]) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$C", @"useless exception '", IOSObjectArray_Get(exceptions, i), @"' does not end with '", suffix, '\''));
  }
  JreStrongAssignAndConsume(&self->exceptions_, new_OrgApacheLuceneAnalysisUtilCharArraySet_initWithJavaUtilCollection_withBoolean_(JavaUtilArrays_asListWithNSObjectArray_(exceptions), false));
}

OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions *new_OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions_initWithNSString_withInt_withNSString_withNSStringArray_(NSString *suffix, jint min, NSString *replacement, IOSObjectArray *exceptions) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions, initWithNSString_withInt_withNSString_withNSStringArray_, suffix, min, replacement, exceptions)
}

OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions *create_OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions_initWithNSString_withInt_withNSString_withNSStringArray_(NSString *suffix, jint min, NSString *replacement, IOSObjectArray *exceptions) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions, initWithNSString_withInt_withNSString_withNSStringArray_, suffix, min, replacement, exceptions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSetExceptions)

@implementation OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions

- (instancetype)initWithNSString:(NSString *)suffix
                         withInt:(jint)min
                    withNSString:(NSString *)replacement
               withNSStringArray:(IOSObjectArray *)exceptions {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions_initWithNSString_withInt_withNSString_withNSStringArray_(self, suffix, min, replacement, exceptions);
  return self;
}

- (jboolean)matchesWithCharArray:(IOSCharArray *)s
                         withInt:(jint)len {
  if (!OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_matchesWithCharArray_withInt_(self, s, len)) return false;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(exceptions_))->size_; i++) if (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withCharArray_(s, len, IOSObjectArray_Get(exceptions_, i))) return false;
  return true;
}

- (void)dealloc {
  RELEASE_(exceptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withNSString:withNSStringArray:);
  methods[1].selector = @selector(matchesWithCharArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "exceptions_", "[[C", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILNSString;[LNSString;", "matches", "[CI", "LOrgApacheLuceneAnalysisPtRSLPStemmerBase;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions = { "RuleWithSuffixExceptions", "org.apache.lucene.analysis.pt", ptrTable, methods, fields, 7, 0xc, 2, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions;
}

@end

void OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions_initWithNSString_withInt_withNSString_withNSStringArray_(OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions *self, NSString *suffix, jint min, NSString *replacement, IOSObjectArray *exceptions) {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule_initWithNSString_withInt_withNSString_(self, suffix, min, replacement);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(exceptions))->size_; i++) {
    if (![((NSString *) nil_chk(IOSObjectArray_Get(exceptions, i))) java_hasSuffix:suffix]) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$C", @"warning: useless exception '", IOSObjectArray_Get(exceptions, i), @"' does not end with '", suffix, '\''));
  }
  JreStrongAssignAndConsume(&self->exceptions_, [IOSObjectArray newArrayWithLength:exceptions->size_ type:IOSClass_charArray(1)]);
  for (jint i = 0; i < exceptions->size_; i++) IOSObjectArray_Set(self->exceptions_, i, [((NSString *) nil_chk(IOSObjectArray_Get(exceptions, i))) java_toCharArray]);
}

OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions *new_OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions_initWithNSString_withInt_withNSString_withNSStringArray_(NSString *suffix, jint min, NSString *replacement, IOSObjectArray *exceptions) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions, initWithNSString_withInt_withNSString_withNSStringArray_, suffix, min, replacement, exceptions)
}

OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions *create_OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions_initWithNSString_withInt_withNSString_withNSStringArray_(NSString *suffix, jint min, NSString *replacement, IOSObjectArray *exceptions) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions, initWithNSString_withInt_withNSString_withNSStringArray_, suffix, min, replacement, exceptions)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleWithSuffixExceptions)

@implementation OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step

- (instancetype)initWithNSString:(NSString *)name
withOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleArray:(IOSObjectArray *)rules
                         withInt:(jint)min
               withNSStringArray:(IOSObjectArray *)suffixes {
  OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step_initWithNSString_withOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleArray_withInt_withNSStringArray_(self, name, rules, min, suffixes);
  return self;
}

- (jint)applyWithCharArray:(IOSCharArray *)s
                   withInt:(jint)len {
  if (len < min_) return len;
  if (suffixes_ != nil) {
    jboolean found = false;
    for (jint i = 0; i < suffixes_->size_; i++) if (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withCharArray_(s, len, IOSObjectArray_Get(suffixes_, i))) {
      found = true;
      break;
    }
    if (!found) return len;
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rules_))->size_; i++) {
    if ([((OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule *) nil_chk(IOSObjectArray_Get(rules_, i))) matchesWithCharArray:s withInt:len]) return [((OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule *) nil_chk(IOSObjectArray_Get(rules_, i))) replaceWithCharArray:s withInt:len];
  }
  return len;
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(rules_);
  RELEASE_(suffixes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleArray:withInt:withNSStringArray:);
  methods[1].selector = @selector(applyWithCharArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "rules_", "[LOrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "min_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "suffixes_", "[[C", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LOrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule;I[LNSString;", "apply", "[CI", "LOrgApacheLuceneAnalysisPtRSLPStemmerBase;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step = { "Step", "org.apache.lucene.analysis.pt", ptrTable, methods, fields, 7, 0xc, 2, 4, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step;
}

@end

void OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step_initWithNSString_withOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleArray_withInt_withNSStringArray_(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step *self, NSString *name, IOSObjectArray *rules, jint min, IOSObjectArray *suffixes) {
  NSObject_init(self);
  JreStrongAssign(&self->name_, name);
  JreStrongAssign(&self->rules_, rules);
  if (min == 0) {
    min = JavaLangInteger_MAX_VALUE;
    {
      IOSObjectArray *a__ = rules;
      OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule *r = *b__++;
        min = JavaLangMath_minWithInt_withInt_(min, ((OrgApacheLuceneAnalysisPtRSLPStemmerBase_Rule *) nil_chk(r))->min_ + ((IOSCharArray *) nil_chk(r->suffix_))->size_);
      }
    }
  }
  self->min_ = min;
  if (suffixes == nil || suffixes->size_ == 0) {
    JreStrongAssign(&self->suffixes_, nil);
  }
  else {
    JreStrongAssignAndConsume(&self->suffixes_, [IOSObjectArray newArrayWithLength:suffixes->size_ type:IOSClass_charArray(1)]);
    for (jint i = 0; i < suffixes->size_; i++) IOSObjectArray_Set(self->suffixes_, i, [((NSString *) nil_chk(IOSObjectArray_Get(suffixes, i))) java_toCharArray]);
  }
}

OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step *new_OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step_initWithNSString_withOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleArray_withInt_withNSStringArray_(NSString *name, IOSObjectArray *rules, jint min, IOSObjectArray *suffixes) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step, initWithNSString_withOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleArray_withInt_withNSStringArray_, name, rules, min, suffixes)
}

OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step *create_OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step_initWithNSString_withOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleArray_withInt_withNSStringArray_(NSString *name, IOSObjectArray *rules, jint min, IOSObjectArray *suffixes) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step, initWithNSString_withOrgApacheLuceneAnalysisPtRSLPStemmerBase_RuleArray_withInt_withNSStringArray_, name, rules, min, suffixes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPtRSLPStemmerBase_Step)
