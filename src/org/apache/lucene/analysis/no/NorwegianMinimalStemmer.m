//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianMinimalStemmer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/analysis/no/NorwegianLightStemmer.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemmer.h"
#include "org/apache/lucene/analysis/util/StemmerUtil.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/no/NorwegianMinimalStemmer must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer

- (instancetype)initWithInt:(jint)flags {
  OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer_initWithInt_(self, flags);
  return self;
}

- (jint)stemWithCharArray:(IOSCharArray *)s
                  withInt:(jint)len {
  if (len > 4 && IOSCharArray_Get(nil_chk(s), len - 1) == 's') len--;
  if (len > 5 && (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"ene") || (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"ane") && useNynorsk_))) return len - 3;
  if (len > 4 && (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"er") || OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"en") || OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"et") || (OrgApacheLuceneAnalysisUtilStemmerUtil_endsWithWithCharArray_withInt_withNSString_(s, len, @"ar") && useNynorsk_))) return len - 2;
  if (len > 3) switch (IOSCharArray_Get(nil_chk(s), len - 1)) {
    case 'a':
    case 'e':
    return len - 1;
  }
  return len;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(stemWithCharArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "useBokmaal_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "useNynorsk_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "stem", "[CI" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer = { "NorwegianMinimalStemmer", "org.apache.lucene.analysis.no", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer;
}

@end

void OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer_initWithInt_(OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer *self, jint flags) {
  NSObject_init(self);
  if (flags <= 0 || flags > OrgApacheLuceneAnalysisNoNorwegianLightStemmer_BOKMAAL + OrgApacheLuceneAnalysisNoNorwegianLightStemmer_NYNORSK) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"invalid flags");
  }
  self->useBokmaal_ = ((flags & OrgApacheLuceneAnalysisNoNorwegianLightStemmer_BOKMAAL) != 0);
  self->useNynorsk_ = ((flags & OrgApacheLuceneAnalysisNoNorwegianLightStemmer_NYNORSK) != 0);
}

OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer *new_OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer_initWithInt_(jint flags) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer, initWithInt_, flags)
}

OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer *create_OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer_initWithInt_(jint flags) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer, initWithInt_, flags)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisNoNorwegianMinimalStemmer)
