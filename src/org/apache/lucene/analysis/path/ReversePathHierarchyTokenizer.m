//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/util/AttributeFactory.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/path/ReversePathHierarchyTokenizer must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer () {
 @public
  jchar delimiter_;
  jchar replacement_;
  jint skip_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posAtt_;
  jint endPosition_;
  jint finalOffset_;
  jint skipped_;
  JavaLangStringBuilder *resultToken_;
  id<JavaUtilList> delimiterPositions_;
  jint delimitersCount_;
  IOSCharArray *resultTokenBuffer_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, posAtt_, id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, resultToken_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, delimiterPositions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, resultTokenBuffer_, IOSCharArray *)

inline jint OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_get_DEFAULT_BUFFER_SIZE(void);
#define OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_BUFFER_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, DEFAULT_BUFFER_SIZE, jint)

@implementation OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer

+ (jchar)DEFAULT_DELIMITER {
  return OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_DELIMITER;
}

+ (jint)DEFAULT_SKIP {
  return OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_SKIP;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)skip {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_(self, skip);
  return self;
}

- (instancetype)initWithInt:(jint)bufferSize
                   withChar:(jchar)delimiter {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_(self, bufferSize, delimiter);
  return self;
}

- (instancetype)initWithChar:(jchar)delimiter
                    withChar:(jchar)replacement {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withChar_(self, delimiter, replacement);
  return self;
}

- (instancetype)initWithInt:(jint)bufferSize
                   withChar:(jchar)delimiter
                   withChar:(jchar)replacement {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_(self, bufferSize, delimiter, replacement);
  return self;
}

- (instancetype)initWithChar:(jchar)delimiter
                     withInt:(jint)skip {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withInt_(self, delimiter, skip);
  return self;
}

- (instancetype)initWithChar:(jchar)delimiter
                    withChar:(jchar)replacement
                     withInt:(jint)skip {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withChar_withInt_(self, delimiter, replacement, skip);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                                   withChar:(jchar)delimiter
                                                   withChar:(jchar)replacement
                                                    withInt:(jint)skip {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withChar_withChar_withInt_(self, factory, delimiter, replacement, skip);
  return self;
}

- (instancetype)initWithInt:(jint)bufferSize
                   withChar:(jchar)delimiter
                   withChar:(jchar)replacement
                    withInt:(jint)skip {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(self, bufferSize, delimiter, replacement, skip);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                                    withInt:(jint)bufferSize
                                                   withChar:(jchar)delimiter
                                                   withChar:(jchar)replacement
                                                    withInt:(jint)skip {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withChar_withChar_withInt_(self, factory, bufferSize, delimiter, replacement, skip);
  return self;
}

- (jboolean)incrementToken {
  [self clearAttributes];
  if (delimitersCount_ == -1) {
    jint length = 0;
    [((id<JavaUtilList>) nil_chk(delimiterPositions_)) addWithId:JavaLangInteger_valueOfWithInt_(0)];
    while (true) {
      jint c = [((JavaIoReader *) nil_chk(input_)) read];
      if (c < 0) {
        break;
      }
      length++;
      if (c == delimiter_) {
        [((id<JavaUtilList>) nil_chk(delimiterPositions_)) addWithId:JavaLangInteger_valueOfWithInt_(length)];
        [((JavaLangStringBuilder *) nil_chk(resultToken_)) appendWithChar:replacement_];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(resultToken_)) appendWithChar:(jchar) c];
      }
    }
    delimitersCount_ = [((id<JavaUtilList>) nil_chk(delimiterPositions_)) size];
    if ([((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(delimiterPositions_)) getWithInt:delimitersCount_ - 1])) intValue] < length) {
      [((id<JavaUtilList>) nil_chk(delimiterPositions_)) addWithId:JavaLangInteger_valueOfWithInt_(length)];
      delimitersCount_++;
    }
    if (((IOSCharArray *) nil_chk(resultTokenBuffer_))->size_ < [((JavaLangStringBuilder *) nil_chk(resultToken_)) java_length]) {
      JreStrongAssignAndConsume(&resultTokenBuffer_, [IOSCharArray newArrayWithLength:[((JavaLangStringBuilder *) nil_chk(resultToken_)) java_length]]);
    }
    [((JavaLangStringBuilder *) nil_chk(resultToken_)) getCharsWithInt:0 withInt:[resultToken_ java_length] withCharArray:resultTokenBuffer_ withInt:0];
    [((JavaLangStringBuilder *) nil_chk(resultToken_)) setLengthWithInt:0];
    jint idx = delimitersCount_ - 1 - skip_;
    if (idx >= 0) {
      endPosition_ = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(delimiterPositions_)) getWithInt:idx])) intValue];
    }
    finalOffset_ = [self correctOffsetWithInt:length];
    [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posAtt_)) setPositionIncrementWithInt:1];
  }
  else {
    [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posAtt_)) setPositionIncrementWithInt:0];
  }
  while (skipped_ < delimitersCount_ - skip_ - 1) {
    jint start = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(delimiterPositions_)) getWithInt:skipped_])) intValue];
    [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) copyBufferWithCharArray:resultTokenBuffer_ withInt:start withInt:endPosition_ - start];
    [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[self correctOffsetWithInt:start] withInt:[self correctOffsetWithInt:endPosition_]];
    skipped_++;
    return true;
  }
  return false;
}

- (void)end {
  [super end];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:finalOffset_ withInt:finalOffset_];
}

- (void)reset {
  [super reset];
  [((JavaLangStringBuilder *) nil_chk(resultToken_)) setLengthWithInt:0];
  finalOffset_ = 0;
  endPosition_ = 0;
  skipped_ = 0;
  delimitersCount_ = -1;
  [((id<JavaUtilList>) nil_chk(delimiterPositions_)) clear];
}

- (void)dealloc {
  RELEASE_(termAtt_);
  RELEASE_(offsetAtt_);
  RELEASE_(posAtt_);
  RELEASE_(resultToken_);
  RELEASE_(delimiterPositions_);
  RELEASE_(resultTokenBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 9, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 9, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithInt:withChar:);
  methods[3].selector = @selector(initWithChar:withChar:);
  methods[4].selector = @selector(initWithInt:withChar:withChar:);
  methods[5].selector = @selector(initWithChar:withInt:);
  methods[6].selector = @selector(initWithChar:withChar:withInt:);
  methods[7].selector = @selector(initWithOrgApacheLuceneUtilAttributeFactory:withChar:withChar:withInt:);
  methods[8].selector = @selector(initWithInt:withChar:withChar:withInt:);
  methods[9].selector = @selector(initWithOrgApacheLuceneUtilAttributeFactory:withInt:withChar:withChar:withInt:);
  methods[10].selector = @selector(incrementToken);
  methods[11].selector = @selector(end);
  methods[12].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BUFFER_SIZE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_DELIMITER", "C", .constantValue.asUnichar = OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_DELIMITER, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_SKIP", "I", .constantValue.asInt = OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_SKIP, 0x19, -1, -1, -1, -1 },
    { "delimiter_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "replacement_", "C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "skip_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "offsetAtt_", "LOrgApacheLuceneAnalysisTokenattributesOffsetAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posAtt_", "LOrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "endPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "finalOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipped_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "resultToken_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "delimiterPositions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "delimitersCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "resultTokenBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "IC", "CC", "ICC", "CI", "CCI", "LOrgApacheLuceneUtilAttributeFactory;CCI", "ICCI", "LOrgApacheLuceneUtilAttributeFactory;ICCI", "LJavaIoIOException;", "Ljava/util/List<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer = { "ReversePathHierarchyTokenizer", "org.apache.lucene.analysis.path", ptrTable, methods, fields, 7, 0x1, 13, 16, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer;
}

@end

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_init(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self) {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(self, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_BUFFER_SIZE, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_DELIMITER, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_DELIMITER, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_SKIP);
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, init)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, init)
}

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self, jint skip) {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(self, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_BUFFER_SIZE, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_DELIMITER, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_DELIMITER, skip);
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_(jint skip) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithInt_, skip)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_(jint skip) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithInt_, skip)
}

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self, jint bufferSize, jchar delimiter) {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(self, bufferSize, delimiter, delimiter, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_SKIP);
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_(jint bufferSize, jchar delimiter) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithInt_withChar_, bufferSize, delimiter)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_(jint bufferSize, jchar delimiter) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithInt_withChar_, bufferSize, delimiter)
}

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withChar_(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self, jchar delimiter, jchar replacement) {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(self, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_BUFFER_SIZE, delimiter, replacement, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_SKIP);
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withChar_(jchar delimiter, jchar replacement) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithChar_withChar_, delimiter, replacement)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withChar_(jchar delimiter, jchar replacement) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithChar_withChar_, delimiter, replacement)
}

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self, jint bufferSize, jchar delimiter, jchar replacement) {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(self, bufferSize, delimiter, replacement, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_SKIP);
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_(jint bufferSize, jchar delimiter, jchar replacement) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithInt_withChar_withChar_, bufferSize, delimiter, replacement)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_(jint bufferSize, jchar delimiter, jchar replacement) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithInt_withChar_withChar_, bufferSize, delimiter, replacement)
}

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withInt_(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self, jchar delimiter, jint skip) {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(self, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_BUFFER_SIZE, delimiter, delimiter, skip);
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withInt_(jchar delimiter, jint skip) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithChar_withInt_, delimiter, skip)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withInt_(jchar delimiter, jint skip) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithChar_withInt_, delimiter, skip)
}

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withChar_withInt_(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self, jchar delimiter, jchar replacement, jint skip) {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(self, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_BUFFER_SIZE, delimiter, replacement, skip);
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withChar_withInt_(jchar delimiter, jchar replacement, jint skip) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithChar_withChar_withInt_, delimiter, replacement, skip)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithChar_withChar_withInt_(jchar delimiter, jchar replacement, jint skip) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithChar_withChar_withInt_, delimiter, replacement, skip)
}

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withChar_withChar_withInt_(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory, jchar delimiter, jchar replacement, jint skip) {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withChar_withChar_withInt_(self, factory, OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_DEFAULT_BUFFER_SIZE, delimiter, replacement, skip);
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withChar_withChar_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jchar delimiter, jchar replacement, jint skip) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_withChar_withChar_withInt_, factory, delimiter, replacement, skip)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withChar_withChar_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jchar delimiter, jchar replacement, jint skip) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_withChar_withChar_withInt_, factory, delimiter, replacement, skip)
}

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self, jint bufferSize, jchar delimiter, jchar replacement, jint skip) {
  OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withChar_withChar_withInt_(self, JreLoadStatic(OrgApacheLuceneAnalysisTokenStream, DEFAULT_TOKEN_ATTRIBUTE_FACTORY), bufferSize, delimiter, replacement, skip);
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(jint bufferSize, jchar delimiter, jchar replacement, jint skip) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithInt_withChar_withChar_withInt_, bufferSize, delimiter, replacement, skip)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithInt_withChar_withChar_withInt_(jint bufferSize, jchar delimiter, jchar replacement, jint skip) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithInt_withChar_withChar_withInt_, bufferSize, delimiter, replacement, skip)
}

void OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withChar_withChar_withInt_(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory, jint bufferSize, jchar delimiter, jchar replacement, jint skip) {
  OrgApacheLuceneAnalysisTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssign(&self->posAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  self->endPosition_ = 0;
  self->finalOffset_ = 0;
  self->skipped_ = 0;
  self->delimitersCount_ = -1;
  if (bufferSize < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"bufferSize cannot be negative");
  }
  if (skip < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"skip cannot be negative");
  }
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) resizeBufferWithInt:bufferSize];
  self->delimiter_ = delimiter;
  self->replacement_ = replacement;
  self->skip_ = skip;
  JreStrongAssignAndConsume(&self->resultToken_, new_JavaLangStringBuilder_initWithInt_(bufferSize));
  JreStrongAssignAndConsume(&self->resultTokenBuffer_, [IOSCharArray newArrayWithLength:bufferSize]);
  JreStrongAssignAndConsume(&self->delimiterPositions_, new_JavaUtilArrayList_initWithInt_(JreIntDiv(bufferSize, 10)));
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *new_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withChar_withChar_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint bufferSize, jchar delimiter, jchar replacement, jint skip) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_withInt_withChar_withChar_withInt_, factory, bufferSize, delimiter, replacement, skip)
}

OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer *create_OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withChar_withChar_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint bufferSize, jchar delimiter, jchar replacement, jint skip) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_withInt_withChar_withChar_withInt_, factory, bufferSize, delimiter, replacement, skip)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPathReversePathHierarchyTokenizer)
