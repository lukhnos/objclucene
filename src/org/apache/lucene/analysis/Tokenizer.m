//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/analysis/Tokenizer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "org/apache/lucene/analysis/CharFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/Tokenizer must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisTokenizer () {
 @public
  /*!
   @brief Pending reader: not actually assigned to input until reset()
   */
  JavaIoReader *inputPending_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisTokenizer, inputPending_, JavaIoReader *)

inline JavaIoReader *OrgApacheLuceneAnalysisTokenizer_get_ILLEGAL_STATE_READER(void);
static JavaIoReader *OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisTokenizer, ILLEGAL_STATE_READER, JavaIoReader *)

@interface OrgApacheLuceneAnalysisTokenizer_1 : JavaIoReader

- (instancetype)init;

- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)off
                  withInt:(jint)len;

- (void)close;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisTokenizer_1)

__attribute__((unused)) static void OrgApacheLuceneAnalysisTokenizer_1_init(OrgApacheLuceneAnalysisTokenizer_1 *self);

__attribute__((unused)) static OrgApacheLuceneAnalysisTokenizer_1 *new_OrgApacheLuceneAnalysisTokenizer_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisTokenizer_1 *create_OrgApacheLuceneAnalysisTokenizer_1_init(void);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisTokenizer)

@implementation OrgApacheLuceneAnalysisTokenizer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisTokenizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory {
  OrgApacheLuceneAnalysisTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  return self;
}

- (void)close {
  [((JavaIoReader *) nil_chk(input_)) close];
  JreStrongAssign(&inputPending_, JreStrongAssign(&input_, OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER));
}

- (jint)correctOffsetWithInt:(jint)currentOff {
  return ([input_ isKindOfClass:[OrgApacheLuceneAnalysisCharFilter class]]) ? [((OrgApacheLuceneAnalysisCharFilter *) nil_chk(((OrgApacheLuceneAnalysisCharFilter *) cast_chk(input_, [OrgApacheLuceneAnalysisCharFilter class])))) correctOffsetWithInt:currentOff] : currentOff;
}

- (void)setReaderWithJavaIoReader:(JavaIoReader *)input {
  if (input == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"input must not be null");
  }
  else if (!JreObjectEqualsEquals(self->input_, OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"TokenStream contract violation: close() call missing");
  }
  JreStrongAssign(&self->inputPending_, input);
  [self setReaderTestPoint];
}

- (void)reset {
  [super reset];
  JreStrongAssign(&input_, inputPending_);
  JreStrongAssign(&inputPending_, OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER);
}

- (void)setReaderTestPoint {
}

- (void)dealloc {
  RELEASE_(input_);
  RELEASE_(inputPending_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x14, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 4, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgApacheLuceneUtilAttributeFactory:);
  methods[2].selector = @selector(close);
  methods[3].selector = @selector(correctOffsetWithInt:);
  methods[4].selector = @selector(setReaderWithJavaIoReader:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(setReaderTestPoint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "input_", "LJavaIoReader;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "inputPending_", "LJavaIoReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ILLEGAL_STATE_READER", "LJavaIoReader;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilAttributeFactory;", "LJavaIoIOException;", "correctOffset", "I", "setReader", "LJavaIoReader;", &OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisTokenizer = { "Tokenizer", "org.apache.lucene.analysis", ptrTable, methods, fields, 7, 0x401, 7, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisTokenizer;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisTokenizer class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER, new_OrgApacheLuceneAnalysisTokenizer_1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisTokenizer)
  }
}

@end

void OrgApacheLuceneAnalysisTokenizer_init(OrgApacheLuceneAnalysisTokenizer *self) {
  OrgApacheLuceneAnalysisTokenStream_init(self);
  JreStrongAssign(&self->input_, OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER);
  JreStrongAssign(&self->inputPending_, OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER);
}

void OrgApacheLuceneAnalysisTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory) {
  OrgApacheLuceneAnalysisTokenStream_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  JreStrongAssign(&self->input_, OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER);
  JreStrongAssign(&self->inputPending_, OrgApacheLuceneAnalysisTokenizer_ILLEGAL_STATE_READER);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisTokenizer)

@implementation OrgApacheLuceneAnalysisTokenizer_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisTokenizer_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)off
                  withInt:(jint)len {
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"TokenStream contract violation: reset()/close() call missing, reset() called multiple times, or subclass does not call super.reset(). Please see Javadocs of TokenStream class for more information about the correct consuming workflow.");
}

- (void)close {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithCharArray:withInt:withInt:);
  methods[2].selector = @selector(close);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "read", "[CII", "LOrgApacheLuceneAnalysisTokenizer;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisTokenizer_1 = { "", "org.apache.lucene.analysis", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisTokenizer_1;
}

@end

void OrgApacheLuceneAnalysisTokenizer_1_init(OrgApacheLuceneAnalysisTokenizer_1 *self) {
  JavaIoReader_init(self);
}

OrgApacheLuceneAnalysisTokenizer_1 *new_OrgApacheLuceneAnalysisTokenizer_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisTokenizer_1, init)
}

OrgApacheLuceneAnalysisTokenizer_1 *create_OrgApacheLuceneAnalysisTokenizer_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisTokenizer_1, init)
}
