//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "org/apache/lucene/analysis/compound/hyphenation/ByteVector.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternParser.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"
#include "org/xml/sax/InputSource.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree () {
 @public
  /*!
   @brief Temporary map to store interletter values on pattern loading.
   */
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *ivalues_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree, ivalues_, OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *)

@implementation OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)packValuesWithNSString:(NSString *)values {
  jint i;
  jint n = [((NSString *) nil_chk(values)) java_length];
  jint m = (n & 1) == 1 ? (JreRShift32(n, 1)) + 2 : (JreRShift32(n, 1)) + 1;
  jint offset = [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) alloc__WithInt:m];
  IOSByteArray *va = [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) getArray];
  for (i = 0; i < n; i++) {
    jint j = JreRShift32(i, 1);
    jbyte v = (jbyte) (([values charAtWithInt:i] - '0' + 1) & (jint) 0x0f);
    if ((i & 1) == 1) {
      *IOSByteArray_GetRef(nil_chk(va), j + offset) = (jbyte) (IOSByteArray_Get(va, j + offset) | v);
    }
    else {
      *IOSByteArray_GetRef(nil_chk(va), j + offset) = (jbyte) (JreLShift32(v, 4));
    }
  }
  *IOSByteArray_GetRef(nil_chk(va), m - 1 + offset) = 0;
  return offset;
}

- (NSString *)unpackValuesWithInt:(jint)k {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  jbyte v = [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) getWithInt:k++];
  while (v != 0) {
    jchar c = (jchar) ((JreURShift32(v, 4)) - 1 + '0');
    [buf appendWithChar:c];
    c = (jchar) (v & (jint) 0x0f);
    if (c == 0) {
      break;
    }
    c = (jchar) (c - 1 + '0');
    [buf appendWithChar:c];
    v = [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) getWithInt:k++];
  }
  return [buf description];
}

- (void)loadPatternsWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source {
  OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *pp = create_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_(self);
  JreStrongAssignAndConsume(&ivalues_, new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init());
  [pp parseWithOrgXmlSaxInputSource:source];
  [self trimToSize];
  [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) trimToSize];
  [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(classmap_)) trimToSize];
  JreStrongAssign(&ivalues_, nil);
}

- (NSString *)findPatternWithNSString:(NSString *)pat {
  jint k = [super findWithNSString:pat];
  if (k >= 0) {
    return [self unpackValuesWithInt:k];
  }
  return @"";
}

- (jint)hstrcmpWithCharArray:(IOSCharArray *)s
                     withInt:(jint)si
               withCharArray:(IOSCharArray *)t
                     withInt:(jint)ti {
  for (; IOSCharArray_Get(nil_chk(s), si) == IOSCharArray_Get(nil_chk(t), ti); si++, ti++) {
    if (IOSCharArray_Get(s, si) == 0) {
      return 0;
    }
  }
  if (IOSCharArray_Get(t, ti) == 0) {
    return 0;
  }
  return IOSCharArray_Get(s, si) - IOSCharArray_Get(t, ti);
}

- (IOSByteArray *)getValuesWithInt:(jint)k {
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
  jbyte v = [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) getWithInt:k++];
  while (v != 0) {
    jchar c = (jchar) ((JreURShift32(v, 4)) - 1);
    [buf appendWithChar:c];
    c = (jchar) (v & (jint) 0x0f);
    if (c == 0) {
      break;
    }
    c = (jchar) (c - 1);
    [buf appendWithChar:c];
    v = [((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) getWithInt:k++];
  }
  IOSByteArray *res = [IOSByteArray arrayWithLength:[buf java_length]];
  for (jint i = 0; i < res->size_; i++) {
    *IOSByteArray_GetRef(res, i) = (jbyte) [buf charAtWithInt:i];
  }
  return res;
}

- (void)searchPatternsWithCharArray:(IOSCharArray *)word
                            withInt:(jint)index
                      withByteArray:(IOSByteArray *)il {
  IOSByteArray *values;
  jint i = index;
  jchar p;
  jchar q;
  jchar sp = IOSCharArray_Get(nil_chk(word), i);
  p = root_;
  while (p > 0 && p < ((IOSCharArray *) nil_chk(sc_))->size_) {
    if (IOSCharArray_Get(nil_chk(sc_), p) == (jint) 0xFFFF) {
      if ([self hstrcmpWithCharArray:word withInt:i withCharArray:[((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(kv_)) getArray] withInt:IOSCharArray_Get(nil_chk(lo_), p)] == 0) {
        values = [self getValuesWithInt:IOSCharArray_Get(nil_chk(eq_), p)];
        jint j = index;
        for (jint k = 0; k < ((IOSByteArray *) nil_chk(values))->size_; k++) {
          if (j < ((IOSByteArray *) nil_chk(il))->size_ && IOSByteArray_Get(values, k) > IOSByteArray_Get(il, j)) {
            *IOSByteArray_GetRef(il, j) = IOSByteArray_Get(values, k);
          }
          j++;
        }
      }
      return;
    }
    jint d = sp - IOSCharArray_Get(sc_, p);
    if (d == 0) {
      if (sp == 0) {
        break;
      }
      sp = IOSCharArray_Get(word, ++i);
      p = IOSCharArray_Get(nil_chk(eq_), p);
      q = p;
      while (q > 0 && q < sc_->size_) {
        if (IOSCharArray_Get(sc_, q) == (jint) 0xFFFF) {
          break;
        }
        if (IOSCharArray_Get(sc_, q) == 0) {
          values = [self getValuesWithInt:IOSCharArray_Get(eq_, q)];
          jint j = index;
          for (jint k = 0; k < ((IOSByteArray *) nil_chk(values))->size_; k++) {
            if (j < ((IOSByteArray *) nil_chk(il))->size_ && IOSByteArray_Get(values, k) > IOSByteArray_Get(il, j)) {
              *IOSByteArray_GetRef(il, j) = IOSByteArray_Get(values, k);
            }
            j++;
          }
          break;
        }
        else {
          q = IOSCharArray_Get(nil_chk(lo_), q);
        }
      }
    }
    else {
      p = d < 0 ? IOSCharArray_Get(nil_chk(lo_), p) : IOSCharArray_Get(nil_chk(hi_), p);
    }
  }
}

- (OrgApacheLuceneAnalysisCompoundHyphenationHyphenation *)hyphenateWithNSString:(NSString *)word
                                                                         withInt:(jint)remainCharCount
                                                                         withInt:(jint)pushCharCount {
  IOSCharArray *w = [((NSString *) nil_chk(word)) java_toCharArray];
  return [self hyphenateWithCharArray:w withInt:0 withInt:((IOSCharArray *) nil_chk(w))->size_ withInt:remainCharCount withInt:pushCharCount];
}

- (OrgApacheLuceneAnalysisCompoundHyphenationHyphenation *)hyphenateWithCharArray:(IOSCharArray *)w
                                                                          withInt:(jint)offset
                                                                          withInt:(jint)len
                                                                          withInt:(jint)remainCharCount
                                                                          withInt:(jint)pushCharCount {
  jint i;
  IOSCharArray *word = [IOSCharArray arrayWithLength:len + 3];
  IOSCharArray *c = [IOSCharArray arrayWithLength:2];
  jint iIgnoreAtBeginning = 0;
  jint iLength = len;
  jboolean bEndOfLetters = false;
  for (i = 1; i <= len; i++) {
    *IOSCharArray_GetRef(c, 0) = IOSCharArray_Get(nil_chk(w), offset + i - 1);
    jint nc = [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(classmap_)) findWithCharArray:c withInt:0];
    if (nc < 0) {
      if (i == (1 + iIgnoreAtBeginning)) {
        iIgnoreAtBeginning++;
      }
      else {
        bEndOfLetters = true;
      }
      iLength--;
    }
    else {
      if (!bEndOfLetters) {
        *IOSCharArray_GetRef(word, i - iIgnoreAtBeginning) = (jchar) nc;
      }
      else {
        return nil;
      }
    }
  }
  len = iLength;
  if (len < (remainCharCount + pushCharCount)) {
    return nil;
  }
  IOSIntArray *result = [IOSIntArray arrayWithLength:len + 1];
  jint k = 0;
  NSString *sw = [NSString java_stringWithCharacters:word offset:1 length:len];
  if ([((JavaUtilHashMap *) nil_chk(stoplist_)) containsKeyWithId:sw]) {
    JavaUtilArrayList *hw = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(stoplist_)) getWithId:sw]);
    jint j = 0;
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(hw)) size]; i++) {
      id o = JreRetainedLocalValue([hw getWithInt:i]);
      if ([o isKindOfClass:[NSString class]]) {
        j += [((NSString *) nil_chk(((NSString *) o))) java_length];
        if (j >= remainCharCount && j < (len - pushCharCount)) {
          *IOSIntArray_GetRef(result, k++) = j + iIgnoreAtBeginning;
        }
      }
    }
  }
  else {
    *IOSCharArray_GetRef(word, 0) = '.';
    *IOSCharArray_GetRef(word, len + 1) = '.';
    *IOSCharArray_GetRef(word, len + 2) = 0;
    IOSByteArray *il = [IOSByteArray arrayWithLength:len + 3];
    for (i = 0; i < len + 1; i++) {
      [self searchPatternsWithCharArray:word withInt:i withByteArray:il];
    }
    for (i = 0; i < len; i++) {
      if (((IOSByteArray_Get(il, i + 1) & 1) == 1) && i >= remainCharCount && i <= (len - pushCharCount)) {
        *IOSIntArray_GetRef(result, k++) = i + iIgnoreAtBeginning;
      }
    }
  }
  if (k > 0) {
    IOSIntArray *res = [IOSIntArray arrayWithLength:k + 2];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(result, 0, res, 1, k);
    *IOSIntArray_GetRef(res, 0) = 0;
    *IOSIntArray_GetRef(res, k + 1) = len;
    return create_OrgApacheLuceneAnalysisCompoundHyphenationHyphenation_initWithIntArray_(res);
  }
  else {
    return nil;
  }
}

- (void)addClassWithNSString:(NSString *)chargroup {
  if ([((NSString *) nil_chk(chargroup)) java_length] > 0) {
    jchar equivChar = [chargroup charAtWithInt:0];
    IOSCharArray *key = [IOSCharArray arrayWithLength:2];
    *IOSCharArray_GetRef(key, 1) = 0;
    for (jint i = 0; i < [chargroup java_length]; i++) {
      *IOSCharArray_GetRef(key, 0) = [chargroup charAtWithInt:i];
      [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(classmap_)) insertWithCharArray:key withInt:0 withChar:equivChar];
    }
  }
}

- (void)addExceptionWithNSString:(NSString *)word
           withJavaUtilArrayList:(JavaUtilArrayList *)hyphenatedword {
  [((JavaUtilHashMap *) nil_chk(stoplist_)) putWithId:word withId:hyphenatedword];
}

- (void)addPatternWithNSString:(NSString *)pattern
                  withNSString:(NSString *)ivalue {
  jint k = [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(ivalues_)) findWithNSString:ivalue];
  if (k <= 0) {
    k = [self packValuesWithNSString:ivalue];
    [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(ivalues_)) insertWithNSString:ivalue withChar:(jchar) k];
  }
  [self insertWithNSString:pattern withChar:(jchar) k];
}

- (void)printStatsWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:JreStrcat("$$", @"Value space size = ", JavaLangInteger_toStringWithInt_([((OrgApacheLuceneAnalysisCompoundHyphenationByteVector *) nil_chk(vspace_)) length]))];
  [super printStatsWithJavaIoPrintStream:outArg];
}

- (void)dealloc {
  RELEASE_(vspace_);
  RELEASE_(stoplist_);
  RELEASE_(classmap_);
  RELEASE_(ivalues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "[B", 0x4, 10, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisCompoundHyphenationHyphenation;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisCompoundHyphenationHyphenation;", 0x1, 13, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(packValuesWithNSString:);
  methods[2].selector = @selector(unpackValuesWithInt:);
  methods[3].selector = @selector(loadPatternsWithOrgXmlSaxInputSource:);
  methods[4].selector = @selector(findPatternWithNSString:);
  methods[5].selector = @selector(hstrcmpWithCharArray:withInt:withCharArray:withInt:);
  methods[6].selector = @selector(getValuesWithInt:);
  methods[7].selector = @selector(searchPatternsWithCharArray:withInt:withByteArray:);
  methods[8].selector = @selector(hyphenateWithNSString:withInt:withInt:);
  methods[9].selector = @selector(hyphenateWithCharArray:withInt:withInt:withInt:withInt:);
  methods[10].selector = @selector(addClassWithNSString:);
  methods[11].selector = @selector(addExceptionWithNSString:withJavaUtilArrayList:);
  methods[12].selector = @selector(addPatternWithNSString:withNSString:);
  methods[13].selector = @selector(printStatsWithJavaIoPrintStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "vspace_", "LOrgApacheLuceneAnalysisCompoundHyphenationByteVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "stoplist_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 24, -1 },
    { "classmap_", "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ivalues_", "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree;", .constantValue.asLong = 0, 0x82, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "packValues", "LNSString;", "unpackValues", "I", "loadPatterns", "LOrgXmlSaxInputSource;", "LJavaIoIOException;", "findPattern", "hstrcmp", "[CI[CI", "getValues", "searchPatterns", "[CI[B", "hyphenate", "LNSString;II", "[CIIII", "addClass", "addException", "LNSString;LJavaUtilArrayList;", "(Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/Object;>;)V", "addPattern", "LNSString;LNSString;", "printStats", "LJavaIoPrintStream;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/util/ArrayList<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree = { "HyphenationTree", "org.apache.lucene.analysis.compound.hyphenation", ptrTable, methods, fields, 7, 0x1, 14, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree;
}

@end

void OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree_init(OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree *self) {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init(self);
  JreStrongAssignAndConsume(&self->stoplist_, new_JavaUtilHashMap_initWithInt_(23));
  JreStrongAssignAndConsume(&self->classmap_, new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init());
  JreStrongAssignAndConsume(&self->vspace_, new_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_init());
  [self->vspace_ alloc__WithInt:1];
}

OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree *new_OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree, init)
}

OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree *create_OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundHyphenationHyphenationTree)
