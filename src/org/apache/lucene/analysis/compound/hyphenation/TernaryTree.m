//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/Enumeration.h"
#include "java/util/Stack.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"
#include "org/apache/lucene/analysis/compound/hyphenation/TernaryTree.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/compound/hyphenation/TernaryTree must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree ()

/*!
 @brief The actual insertion function, recursive version.
 */
- (jchar)insertWithChar:(jchar)p
          withCharArray:(IOSCharArray *)key
                withInt:(jint)start
               withChar:(jchar)val;

- (void)redimNodeArraysWithInt:(jint)newsize;

- (void)compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector:(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *)kx
              withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree:(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *)map
                                                               withChar:(jchar)p;

@end

__attribute__((unused)) static jchar OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_insertWithChar_withCharArray_withInt_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *self, jchar p, IOSCharArray *key, jint start, jchar val);

__attribute__((unused)) static void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_redimNodeArraysWithInt_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *self, jint newsize);

__attribute__((unused)) static void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector_withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *self, OrgApacheLuceneAnalysisCompoundHyphenationCharVector *kx, OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *map, jchar p);

@interface OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator () {
 @public
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *this$0_;
}

/*!
 @brief traverse upwards
 */
- (jint)up;

/*!
 @brief traverse the tree to find next key
 */
- (jint)run;

@end

__attribute__((unused)) static jint OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_up(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *self);

__attribute__((unused)) static jint OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_run(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *self);

@interface OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item : NSObject < NSCopying > {
 @public
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *this$0_;
  jchar parent_;
  jchar child_;
}

- (instancetype)initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator:(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *)outer$;

- (instancetype)initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator:(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *)outer$
                                                                              withChar:(jchar)p
                                                                              withChar:(jchar)c;

- (OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *)java_clone;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item)

__attribute__((unused)) static void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *self, OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$);

__attribute__((unused)) static OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$);

__attribute__((unused)) static void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *self, OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$, jchar p, jchar c);

__attribute__((unused)) static OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$, jchar p, jchar c) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$, jchar p, jchar c);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item)

@implementation OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree

+ (jint)BLOCK_SIZE {
  return OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_BLOCK_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__ {
  root_ = 0;
  freenode_ = 1;
  length_ = 0;
  JreStrongAssignAndConsume(&lo_, [IOSCharArray newArrayWithLength:OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_BLOCK_SIZE]);
  JreStrongAssignAndConsume(&hi_, [IOSCharArray newArrayWithLength:OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_BLOCK_SIZE]);
  JreStrongAssignAndConsume(&eq_, [IOSCharArray newArrayWithLength:OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_BLOCK_SIZE]);
  JreStrongAssignAndConsume(&sc_, [IOSCharArray newArrayWithLength:OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_BLOCK_SIZE]);
  JreStrongAssignAndConsume(&kv_, new_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init());
}

- (void)insertWithNSString:(NSString *)key
                  withChar:(jchar)val {
  jint len = [((NSString *) nil_chk(key)) java_length] + 1;
  if (freenode_ + len > ((IOSCharArray *) nil_chk(eq_))->size_) {
    OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_redimNodeArraysWithInt_(self, eq_->size_ + OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_BLOCK_SIZE);
  }
  IOSCharArray *strkey = [IOSCharArray arrayWithLength:len--];
  [key java_getChars:0 sourceEnd:len destination:strkey destinationBegin:0];
  *IOSCharArray_GetRef(strkey, len) = 0;
  root_ = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_insertWithChar_withCharArray_withInt_withChar_(self, root_, strkey, 0, val);
}

- (void)insertWithCharArray:(IOSCharArray *)key
                    withInt:(jint)start
                   withChar:(jchar)val {
  jint len = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strlenWithCharArray_(key) + 1;
  if (freenode_ + len > ((IOSCharArray *) nil_chk(eq_))->size_) {
    OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_redimNodeArraysWithInt_(self, eq_->size_ + OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_BLOCK_SIZE);
  }
  root_ = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_insertWithChar_withCharArray_withInt_withChar_(self, root_, key, start, val);
}

- (jchar)insertWithChar:(jchar)p
          withCharArray:(IOSCharArray *)key
                withInt:(jint)start
               withChar:(jchar)val {
  return OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_insertWithChar_withCharArray_withInt_withChar_(self, p, key, start, val);
}

+ (jint)strcmpWithCharArray:(IOSCharArray *)a
                    withInt:(jint)startA
              withCharArray:(IOSCharArray *)b
                    withInt:(jint)startB {
  return OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strcmpWithCharArray_withInt_withCharArray_withInt_(a, startA, b, startB);
}

+ (jint)strcmpWithNSString:(NSString *)str
             withCharArray:(IOSCharArray *)a
                   withInt:(jint)start {
  return OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strcmpWithNSString_withCharArray_withInt_(str, a, start);
}

+ (void)strcpyWithCharArray:(IOSCharArray *)dst
                    withInt:(jint)di
              withCharArray:(IOSCharArray *)src
                    withInt:(jint)si {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strcpyWithCharArray_withInt_withCharArray_withInt_(dst, di, src, si);
}

+ (jint)strlenWithCharArray:(IOSCharArray *)a
                    withInt:(jint)start {
  return OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strlenWithCharArray_withInt_(a, start);
}

+ (jint)strlenWithCharArray:(IOSCharArray *)a {
  return OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strlenWithCharArray_(a);
}

- (jint)findWithNSString:(NSString *)key {
  jint len = [((NSString *) nil_chk(key)) java_length];
  IOSCharArray *strkey = [IOSCharArray arrayWithLength:len + 1];
  [key java_getChars:0 sourceEnd:len destination:strkey destinationBegin:0];
  *IOSCharArray_GetRef(strkey, len) = 0;
  return [self findWithCharArray:strkey withInt:0];
}

- (jint)findWithCharArray:(IOSCharArray *)key
                  withInt:(jint)start {
  jint d;
  jchar p = root_;
  jint i = start;
  jchar c;
  while (p != 0) {
    if (IOSCharArray_Get(nil_chk(sc_), p) == (jint) 0xFFFF) {
      if (OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strcmpWithCharArray_withInt_withCharArray_withInt_(key, i, [((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(kv_)) getArray], IOSCharArray_Get(nil_chk(lo_), p)) == 0) {
        return IOSCharArray_Get(nil_chk(eq_), p);
      }
      else {
        return -1;
      }
    }
    c = IOSCharArray_Get(nil_chk(key), i);
    d = c - IOSCharArray_Get(sc_, p);
    if (d == 0) {
      if (c == 0) {
        return IOSCharArray_Get(nil_chk(eq_), p);
      }
      i++;
      p = IOSCharArray_Get(nil_chk(eq_), p);
    }
    else if (d < 0) {
      p = IOSCharArray_Get(nil_chk(lo_), p);
    }
    else {
      p = IOSCharArray_Get(nil_chk(hi_), p);
    }
  }
  return -1;
}

- (jboolean)knowsWithNSString:(NSString *)key {
  return ([self findWithNSString:key] >= 0);
}

- (void)redimNodeArraysWithInt:(jint)newsize {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_redimNodeArraysWithInt_(self, newsize);
}

- (jint)size {
  return length_;
}

- (OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *)java_clone {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *t = create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init();
  JreStrongAssign(&t->lo_, [((IOSCharArray *) nil_chk(self->lo_)) java_clone]);
  JreStrongAssign(&t->hi_, [((IOSCharArray *) nil_chk(self->hi_)) java_clone]);
  JreStrongAssign(&t->eq_, [((IOSCharArray *) nil_chk(self->eq_)) java_clone]);
  JreStrongAssign(&t->sc_, [((IOSCharArray *) nil_chk(self->sc_)) java_clone]);
  JreStrongAssign(&t->kv_, [((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->kv_)) java_clone]);
  t->root_ = self->root_;
  t->freenode_ = self->freenode_;
  t->length_ = self->length_;
  return t;
}

- (void)insertBalancedWithNSStringArray:(IOSObjectArray *)k
                          withCharArray:(IOSCharArray *)v
                                withInt:(jint)offset
                                withInt:(jint)n {
  jint m;
  if (n < 1) {
    return;
  }
  m = JreRShift32(n, 1);
  [self insertWithNSString:IOSObjectArray_Get(nil_chk(k), m + offset) withChar:IOSCharArray_Get(nil_chk(v), m + offset)];
  [self insertBalancedWithNSStringArray:k withCharArray:v withInt:offset withInt:m];
  [self insertBalancedWithNSStringArray:k withCharArray:v withInt:offset + m + 1 withInt:n - m - 1];
}

- (void)balance {
  jint i = 0;
  jint n = length_;
  IOSObjectArray *k = [IOSObjectArray arrayWithLength:n type:NSString_class_()];
  IOSCharArray *v = [IOSCharArray arrayWithLength:n];
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *iter = create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_(self);
  while ([iter hasMoreElements]) {
    *IOSCharArray_GetRef(v, i) = [iter getValue];
    IOSObjectArray_Set(k, i++, [iter nextElement]);
  }
  [self init__];
  [self insertBalancedWithNSStringArray:k withCharArray:v withInt:0 withInt:n];
}

- (void)trimToSize {
  [self balance];
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_redimNodeArraysWithInt_(self, freenode_);
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector *kx = create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init();
  [kx alloc__WithInt:1];
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *map = create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init();
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector_withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_withChar_(self, kx, map, root_);
  JreStrongAssign(&kv_, kx);
  [kv_ trimToSize];
}

- (void)compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector:(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *)kx
              withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree:(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *)map
                                                               withChar:(jchar)p {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector_withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_withChar_(self, kx, map, p);
}

- (id<JavaUtilEnumeration>)keys {
  return create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_(self);
}

- (void)printStatsWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:JreStrcat("$$", @"Number of keys = ", JavaLangInteger_toStringWithInt_(length_))];
  [outArg printlnWithNSString:JreStrcat("$$", @"Node count = ", JavaLangInteger_toStringWithInt_(freenode_))];
  [outArg printlnWithNSString:JreStrcat("$$", @"Key Array length = ", JavaLangInteger_toStringWithInt_([((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(kv_)) length]))];
}

- (void)dealloc {
  RELEASE_(lo_);
  RELEASE_(hi_);
  RELEASE_(eq_);
  RELEASE_(sc_);
  RELEASE_(kv_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "C", 0x2, 1, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree;", 0x1, 17, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(insertWithNSString:withChar:);
  methods[3].selector = @selector(insertWithCharArray:withInt:withChar:);
  methods[4].selector = @selector(insertWithChar:withCharArray:withInt:withChar:);
  methods[5].selector = @selector(strcmpWithCharArray:withInt:withCharArray:withInt:);
  methods[6].selector = @selector(strcmpWithNSString:withCharArray:withInt:);
  methods[7].selector = @selector(strcpyWithCharArray:withInt:withCharArray:withInt:);
  methods[8].selector = @selector(strlenWithCharArray:withInt:);
  methods[9].selector = @selector(strlenWithCharArray:);
  methods[10].selector = @selector(findWithNSString:);
  methods[11].selector = @selector(findWithCharArray:withInt:);
  methods[12].selector = @selector(knowsWithNSString:);
  methods[13].selector = @selector(redimNodeArraysWithInt:);
  methods[14].selector = @selector(size);
  methods[15].selector = @selector(java_clone);
  methods[16].selector = @selector(insertBalancedWithNSStringArray:withCharArray:withInt:withInt:);
  methods[17].selector = @selector(balance);
  methods[18].selector = @selector(trimToSize);
  methods[19].selector = @selector(compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector:withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree:withChar:);
  methods[20].selector = @selector(keys);
  methods[21].selector = @selector(printStatsWithJavaIoPrintStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lo_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "hi_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "eq_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "sc_", "[C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "kv_", "LOrgApacheLuceneAnalysisCompoundHyphenationCharVector;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "root_", "C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "freenode_", "C", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_BLOCK_SIZE, 0x1c, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "insert", "LNSString;C", "[CIC", "C[CIC", "strcmp", "[CI[CI", "LNSString;[CI", "strcpy", "strlen", "[CI", "[C", "find", "LNSString;", "knows", "redimNodeArrays", "I", "clone", "insertBalanced", "[LNSString;[CII", "compact", "LOrgApacheLuceneAnalysisCompoundHyphenationCharVector;LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree;C", "()Ljava/util/Enumeration<Ljava/lang/String;>;", "printStats", "LJavaIoPrintStream;", "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree = { "TernaryTree", "org.apache.lucene.analysis.compound.hyphenation", ptrTable, methods, fields, 7, 0x1, 22, 9, -1, 25, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *self) {
  NSObject_init(self);
  [self init__];
}

OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree, init)
}

OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree, init)
}

jchar OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_insertWithChar_withCharArray_withInt_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *self, jchar p, IOSCharArray *key, jint start, jchar val) {
  jint len = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strlenWithCharArray_withInt_(key, start);
  if (p == 0) {
    p = self->freenode_++;
    *IOSCharArray_GetRef(nil_chk(self->eq_), p) = val;
    self->length_++;
    *IOSCharArray_GetRef(nil_chk(self->hi_), p) = 0;
    if (len > 0) {
      *IOSCharArray_GetRef(nil_chk(self->sc_), p) = (jint) 0xFFFF;
      *IOSCharArray_GetRef(nil_chk(self->lo_), p) = (jchar) [((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->kv_)) alloc__WithInt:len + 1];
      OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strcpyWithCharArray_withInt_withCharArray_withInt_([((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->kv_)) getArray], IOSCharArray_Get(nil_chk(self->lo_), p), key, start);
    }
    else {
      *IOSCharArray_GetRef(nil_chk(self->sc_), p) = 0;
      *IOSCharArray_GetRef(nil_chk(self->lo_), p) = 0;
    }
    return p;
  }
  if (IOSCharArray_Get(nil_chk(self->sc_), p) == (jint) 0xFFFF) {
    jchar pp = self->freenode_++;
    *IOSCharArray_GetRef(nil_chk(self->lo_), pp) = IOSCharArray_Get(self->lo_, p);
    *IOSCharArray_GetRef(nil_chk(self->eq_), pp) = IOSCharArray_Get(self->eq_, p);
    *IOSCharArray_GetRef(self->lo_, p) = 0;
    if (len > 0) {
      *IOSCharArray_GetRef(self->sc_, p) = [((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->kv_)) getWithInt:IOSCharArray_Get(self->lo_, pp)];
      *IOSCharArray_GetRef(nil_chk(self->eq_), p) = pp;
      (*IOSCharArray_GetRef(nil_chk(self->lo_), pp))++;
      if ([((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->kv_)) getWithInt:IOSCharArray_Get(self->lo_, pp)] == 0) {
        *IOSCharArray_GetRef(nil_chk(self->lo_), pp) = 0;
        *IOSCharArray_GetRef(nil_chk(self->sc_), pp) = 0;
        *IOSCharArray_GetRef(nil_chk(self->hi_), pp) = 0;
      }
      else {
        *IOSCharArray_GetRef(nil_chk(self->sc_), pp) = (jint) 0xFFFF;
      }
    }
    else {
      *IOSCharArray_GetRef(self->sc_, pp) = (jint) 0xFFFF;
      *IOSCharArray_GetRef(nil_chk(self->hi_), p) = pp;
      *IOSCharArray_GetRef(self->sc_, p) = 0;
      *IOSCharArray_GetRef(self->eq_, p) = val;
      self->length_++;
      return p;
    }
  }
  jchar s = IOSCharArray_Get(nil_chk(key), start);
  if (s < IOSCharArray_Get(self->sc_, p)) {
    *IOSCharArray_GetRef(nil_chk(self->lo_), p) = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_insertWithChar_withCharArray_withInt_withChar_(self, IOSCharArray_Get(self->lo_, p), key, start, val);
  }
  else if (s == IOSCharArray_Get(self->sc_, p)) {
    if (s != 0) {
      *IOSCharArray_GetRef(nil_chk(self->eq_), p) = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_insertWithChar_withCharArray_withInt_withChar_(self, IOSCharArray_Get(self->eq_, p), key, start + 1, val);
    }
    else {
      *IOSCharArray_GetRef(nil_chk(self->eq_), p) = val;
    }
  }
  else {
    *IOSCharArray_GetRef(nil_chk(self->hi_), p) = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_insertWithChar_withCharArray_withInt_withChar_(self, IOSCharArray_Get(self->hi_, p), key, start, val);
  }
  return p;
}

jint OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strcmpWithCharArray_withInt_withCharArray_withInt_(IOSCharArray *a, jint startA, IOSCharArray *b, jint startB) {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_initialize();
  for (; IOSCharArray_Get(nil_chk(a), startA) == IOSCharArray_Get(nil_chk(b), startB); startA++, startB++) {
    if (IOSCharArray_Get(a, startA) == 0) {
      return 0;
    }
  }
  return IOSCharArray_Get(a, startA) - IOSCharArray_Get(b, startB);
}

jint OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strcmpWithNSString_withCharArray_withInt_(NSString *str, IOSCharArray *a, jint start) {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_initialize();
  jint i;
  jint d;
  jint len = [((NSString *) nil_chk(str)) java_length];
  for (i = 0; i < len; i++) {
    d = (jint) [str charAtWithInt:i] - IOSCharArray_Get(nil_chk(a), start + i);
    if (d != 0) {
      return d;
    }
    if (IOSCharArray_Get(a, start + i) == 0) {
      return d;
    }
  }
  if (IOSCharArray_Get(nil_chk(a), start + i) != 0) {
    return -IOSCharArray_Get(a, start + i);
  }
  return 0;
}

void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strcpyWithCharArray_withInt_withCharArray_withInt_(IOSCharArray *dst, jint di, IOSCharArray *src, jint si) {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_initialize();
  while (IOSCharArray_Get(nil_chk(src), si) != 0) {
    *IOSCharArray_GetRef(nil_chk(dst), di++) = IOSCharArray_Get(src, si++);
  }
  *IOSCharArray_GetRef(nil_chk(dst), di) = 0;
}

jint OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strlenWithCharArray_withInt_(IOSCharArray *a, jint start) {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_initialize();
  jint len = 0;
  for (jint i = start; i < ((IOSCharArray *) nil_chk(a))->size_ && IOSCharArray_Get(a, i) != 0; i++) {
    len++;
  }
  return len;
}

jint OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strlenWithCharArray_(IOSCharArray *a) {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_initialize();
  return OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strlenWithCharArray_withInt_(a, 0);
}

void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_redimNodeArraysWithInt_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *self, jint newsize) {
  jint len = newsize < ((IOSCharArray *) nil_chk(self->lo_))->size_ ? newsize : self->lo_->size_;
  IOSCharArray *na = [IOSCharArray arrayWithLength:newsize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->lo_, 0, na, 0, len);
  JreStrongAssign(&self->lo_, na);
  na = [IOSCharArray arrayWithLength:newsize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->hi_, 0, na, 0, len);
  JreStrongAssign(&self->hi_, na);
  na = [IOSCharArray arrayWithLength:newsize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->eq_, 0, na, 0, len);
  JreStrongAssign(&self->eq_, na);
  na = [IOSCharArray arrayWithLength:newsize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->sc_, 0, na, 0, len);
  JreStrongAssign(&self->sc_, na);
}

void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector_withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *self, OrgApacheLuceneAnalysisCompoundHyphenationCharVector *kx, OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *map, jchar p) {
  jint k;
  if (p == 0) {
    return;
  }
  if (IOSCharArray_Get(nil_chk(self->sc_), p) == (jint) 0xFFFF) {
    k = [((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *) nil_chk(map)) findWithCharArray:[((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->kv_)) getArray] withInt:IOSCharArray_Get(nil_chk(self->lo_), p)];
    if (k < 0) {
      k = [((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(kx)) alloc__WithInt:OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strlenWithCharArray_withInt_([((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->kv_)) getArray], IOSCharArray_Get(nil_chk(self->lo_), p)) + 1];
      OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_strcpyWithCharArray_withInt_withCharArray_withInt_([kx getArray], k, [((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->kv_)) getArray], IOSCharArray_Get(nil_chk(self->lo_), p));
      [map insertWithCharArray:[kx getArray] withInt:k withChar:(jchar) k];
    }
    *IOSCharArray_GetRef(nil_chk(self->lo_), p) = (jchar) k;
  }
  else {
    OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector_withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_withChar_(self, kx, map, IOSCharArray_Get(nil_chk(self->lo_), p));
    if (IOSCharArray_Get(nil_chk(self->sc_), p) != 0) {
      OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector_withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_withChar_(self, kx, map, IOSCharArray_Get(nil_chk(self->eq_), p));
    }
    OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_compactWithOrgApacheLuceneAnalysisCompoundHyphenationCharVector_withOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_withChar_(self, kx, map, IOSCharArray_Get(nil_chk(self->hi_), p));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree)

@implementation OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator

- (instancetype)initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree:(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *)outer$ {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_(self, outer$);
  return self;
}

- (void)rewind {
  [((JavaUtilStack *) nil_chk(ns_)) removeAllElements];
  [((JavaLangStringBuilder *) nil_chk(ks_)) setLengthWithInt:0];
  cur_ = this$0_->root_;
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_run(self);
}

- (NSString *)nextElement {
  NSString *res = [NSString stringWithString:curkey_];
  cur_ = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_up(self);
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_run(self);
  return res;
}

- (jchar)getValue {
  if (cur_ >= 0) {
    return IOSCharArray_Get(nil_chk(this$0_->eq_), cur_);
  }
  return 0;
}

- (jboolean)hasMoreElements {
  return (cur_ != -1);
}

- (jint)up {
  return OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_up(self);
}

- (jint)run {
  return OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_run(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(curkey_);
  RELEASE_(ns_);
  RELEASE_(ks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree:);
  methods[1].selector = @selector(rewind);
  methods[2].selector = @selector(nextElement);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(hasMoreElements);
  methods[5].selector = @selector(up);
  methods[6].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "cur_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "curkey_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ns_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x0, -1, -1, 1, -1 },
    { "ks_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree;", "Ljava/util/Stack<Lorg/apache/lucene/analysis/compound/hyphenation/TernaryTree$Iterator$Item;>;", "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item;", "Ljava/lang/Object;Ljava/util/Enumeration<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator = { "Iterator", "org.apache.lucene.analysis.compound.hyphenation", ptrTable, methods, fields, 7, 0x1, 7, 5, 0, 2, -1, 3, -1 };
  return &_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator;
}

@end

void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *self, OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->cur_ = -1;
  JreStrongAssignAndConsume(&self->ns_, new_JavaUtilStack_init());
  JreStrongAssignAndConsume(&self->ks_, new_JavaLangStringBuilder_init());
  [self rewind];
}

OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator, initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_, outer$)
}

OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator, initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_, outer$)
}

jint OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_up(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *self) {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *i = create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_(self);
  jint res = 0;
  if ([((JavaUtilStack *) nil_chk(self->ns_)) empty]) {
    return -1;
  }
  if (self->cur_ != 0 && IOSCharArray_Get(nil_chk(self->this$0_->sc_), self->cur_) == 0) {
    return IOSCharArray_Get(nil_chk(self->this$0_->lo_), self->cur_);
  }
  jboolean climb = true;
  while (climb) {
    i = [((JavaUtilStack *) nil_chk(self->ns_)) pop];
    ((OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *) nil_chk(i))->child_++;
    switch (i->child_) {
      case 1:
      if (IOSCharArray_Get(nil_chk(self->this$0_->sc_), i->parent_) != 0) {
        res = IOSCharArray_Get(nil_chk(self->this$0_->eq_), i->parent_);
        [((JavaUtilStack *) nil_chk(self->ns_)) pushWithId:[i java_clone]];
        [((JavaLangStringBuilder *) nil_chk(self->ks_)) appendWithChar:IOSCharArray_Get(nil_chk(self->this$0_->sc_), i->parent_)];
      }
      else {
        i->child_++;
        [((JavaUtilStack *) nil_chk(self->ns_)) pushWithId:[i java_clone]];
        res = IOSCharArray_Get(nil_chk(self->this$0_->hi_), i->parent_);
      }
      climb = false;
      break;
      case 2:
      res = IOSCharArray_Get(nil_chk(self->this$0_->hi_), i->parent_);
      [((JavaUtilStack *) nil_chk(self->ns_)) pushWithId:[i java_clone]];
      if ([((JavaLangStringBuilder *) nil_chk(self->ks_)) java_length] > 0) {
        [((JavaLangStringBuilder *) nil_chk(self->ks_)) setLengthWithInt:[self->ks_ java_length] - 1];
      }
      climb = false;
      break;
      default:
      if ([((JavaUtilStack *) nil_chk(self->ns_)) empty]) {
        return -1;
      }
      climb = true;
      break;
    }
  }
  return res;
}

jint OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_run(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *self) {
  if (self->cur_ == -1) {
    return -1;
  }
  jboolean leaf = false;
  while (true) {
    while (self->cur_ != 0) {
      if (IOSCharArray_Get(nil_chk(self->this$0_->sc_), self->cur_) == (jint) 0xFFFF) {
        leaf = true;
        break;
      }
      [((JavaUtilStack *) nil_chk(self->ns_)) pushWithId:create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_(self, (jchar) self->cur_, 0x0000)];
      if (IOSCharArray_Get(nil_chk(self->this$0_->sc_), self->cur_) == 0) {
        leaf = true;
        break;
      }
      self->cur_ = IOSCharArray_Get(nil_chk(self->this$0_->lo_), self->cur_);
    }
    if (leaf) {
      break;
    }
    self->cur_ = OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_up(self);
    if (self->cur_ == -1) {
      return -1;
    }
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithNSString_([((JavaLangStringBuilder *) nil_chk(self->ks_)) description]);
  if (IOSCharArray_Get(nil_chk(self->this$0_->sc_), self->cur_) == (jint) 0xFFFF) {
    jint p = IOSCharArray_Get(nil_chk(self->this$0_->lo_), self->cur_);
    while ([((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->this$0_->kv_)) getWithInt:p] != 0) {
      [buf appendWithChar:[((OrgApacheLuceneAnalysisCompoundHyphenationCharVector *) nil_chk(self->this$0_->kv_)) getWithInt:p++]];
    }
  }
  JreStrongAssign(&self->curkey_, [buf description]);
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator)

@implementation OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item

- (instancetype)initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator:(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *)outer$ {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_(self, outer$);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator:(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *)outer$
                                                                              withChar:(jchar)p
                                                                              withChar:(jchar)c {
  OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_(self, outer$, p, c);
  return self;
}

- (OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *)java_clone {
  return create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_(this$0_, parent_, child_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item;", 0x1, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator:);
  methods[1].selector = @selector(initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator:withChar:withChar:);
  methods[2].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "parent_", "C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "child_", "C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator;", "LOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator;CC", "clone" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item = { "Item", "org.apache.lucene.analysis.compound.hyphenation", ptrTable, methods, fields, 7, 0x2, 3, 3, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *self, OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->parent_ = 0;
  self->child_ = 0;
}

OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item, initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_, outer$)
}

OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item, initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_, outer$)
}

void OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *self, OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$, jchar p, jchar c) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->parent_ = p;
  self->child_ = c;
}

OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *new_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$, jchar p, jchar c) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item, initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_, outer$, p, c)
}

OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item *create_OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item_initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator *outer$, jchar p, jchar c) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item, initWithOrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_withChar_withChar_, outer$, p, c)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundHyphenationTernaryTree_Iterator_Item)
