//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/ByteVector.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/lucene/analysis/compound/hyphenation/ByteVector.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/compound/hyphenation/ByteVector must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCompoundHyphenationByteVector () {
 @public
  jint blockSize_;
  /*!
   @brief The encapsulated array
   */
  IOSByteArray *array_;
  /*!
   @brief Points to next free item
   */
  jint n_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, array_, IOSByteArray *)

/*!
 @brief Capacity increment size
 */
inline jint OrgApacheLuceneAnalysisCompoundHyphenationByteVector_get_DEFAULT_BLOCK_SIZE(void);
#define OrgApacheLuceneAnalysisCompoundHyphenationByteVector_DEFAULT_BLOCK_SIZE 2048
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, DEFAULT_BLOCK_SIZE, jint)

@implementation OrgApacheLuceneAnalysisCompoundHyphenationByteVector

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisCompoundHyphenationByteVector_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)a {
  OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithByteArray_(self, a);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)a
                          withInt:(jint)capacity {
  OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithByteArray_withInt_(self, a, capacity);
  return self;
}

- (IOSByteArray *)getArray {
  return array_;
}

- (jint)length {
  return n_;
}

- (jint)capacity {
  return ((IOSByteArray *) nil_chk(array_))->size_;
}

- (void)putWithInt:(jint)index
          withByte:(jbyte)val {
  *IOSByteArray_GetRef(nil_chk(array_), index) = val;
}

- (jbyte)getWithInt:(jint)index {
  return IOSByteArray_Get(nil_chk(array_), index);
}

- (jint)alloc__WithInt:(jint)size {
  jint index = n_;
  jint len = ((IOSByteArray *) nil_chk(array_))->size_;
  if (n_ + size >= len) {
    IOSByteArray *aux = [IOSByteArray arrayWithLength:len + blockSize_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array_, 0, aux, 0, len);
    JreStrongAssign(&array_, aux);
  }
  n_ += size;
  return index;
}

- (void)trimToSize {
  if (n_ < ((IOSByteArray *) nil_chk(array_))->size_) {
    IOSByteArray *aux = [IOSByteArray arrayWithLength:n_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array_, 0, aux, 0, n_);
    JreStrongAssign(&array_, aux);
  }
}

- (void)dealloc {
  RELEASE_(array_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(initWithByteArray:withInt:);
  methods[4].selector = @selector(getArray);
  methods[5].selector = @selector(length);
  methods[6].selector = @selector(capacity);
  methods[7].selector = @selector(putWithInt:withByte:);
  methods[8].selector = @selector(getWithInt:);
  methods[9].selector = @selector(alloc__WithInt:);
  methods[10].selector = @selector(trimToSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCompoundHyphenationByteVector_DEFAULT_BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "array_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[B", "[BI", "put", "IB", "get", "alloc" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundHyphenationByteVector = { "ByteVector", "org.apache.lucene.analysis.compound.hyphenation", ptrTable, methods, fields, 7, 0x1, 11, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCompoundHyphenationByteVector;
}

@end

void OrgApacheLuceneAnalysisCompoundHyphenationByteVector_init(OrgApacheLuceneAnalysisCompoundHyphenationByteVector *self) {
  OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithInt_(self, OrgApacheLuceneAnalysisCompoundHyphenationByteVector_DEFAULT_BLOCK_SIZE);
}

OrgApacheLuceneAnalysisCompoundHyphenationByteVector *new_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, init)
}

OrgApacheLuceneAnalysisCompoundHyphenationByteVector *create_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, init)
}

void OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithInt_(OrgApacheLuceneAnalysisCompoundHyphenationByteVector *self, jint capacity) {
  NSObject_init(self);
  if (capacity > 0) {
    self->blockSize_ = capacity;
  }
  else {
    self->blockSize_ = OrgApacheLuceneAnalysisCompoundHyphenationByteVector_DEFAULT_BLOCK_SIZE;
  }
  JreStrongAssignAndConsume(&self->array_, [IOSByteArray newArrayWithLength:self->blockSize_]);
  self->n_ = 0;
}

OrgApacheLuceneAnalysisCompoundHyphenationByteVector *new_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, initWithInt_, capacity)
}

OrgApacheLuceneAnalysisCompoundHyphenationByteVector *create_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, initWithInt_, capacity)
}

void OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithByteArray_(OrgApacheLuceneAnalysisCompoundHyphenationByteVector *self, IOSByteArray *a) {
  NSObject_init(self);
  self->blockSize_ = OrgApacheLuceneAnalysisCompoundHyphenationByteVector_DEFAULT_BLOCK_SIZE;
  JreStrongAssign(&self->array_, a);
  self->n_ = 0;
}

OrgApacheLuceneAnalysisCompoundHyphenationByteVector *new_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithByteArray_(IOSByteArray *a) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, initWithByteArray_, a)
}

OrgApacheLuceneAnalysisCompoundHyphenationByteVector *create_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithByteArray_(IOSByteArray *a) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, initWithByteArray_, a)
}

void OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithByteArray_withInt_(OrgApacheLuceneAnalysisCompoundHyphenationByteVector *self, IOSByteArray *a, jint capacity) {
  NSObject_init(self);
  if (capacity > 0) {
    self->blockSize_ = capacity;
  }
  else {
    self->blockSize_ = OrgApacheLuceneAnalysisCompoundHyphenationByteVector_DEFAULT_BLOCK_SIZE;
  }
  JreStrongAssign(&self->array_, a);
  self->n_ = 0;
}

OrgApacheLuceneAnalysisCompoundHyphenationByteVector *new_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithByteArray_withInt_(IOSByteArray *a, jint capacity) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, initWithByteArray_withInt_, a, capacity)
}

OrgApacheLuceneAnalysisCompoundHyphenationByteVector *create_OrgApacheLuceneAnalysisCompoundHyphenationByteVector_initWithByteArray_withInt_(IOSByteArray *a, jint capacity) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationByteVector, initWithByteArray_withInt_, a, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundHyphenationByteVector)
