//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "javax/xml/parsers/SAXParser.h"
#include "javax/xml/parsers/SAXParserFactory.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphen.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternParser.h"
#include "org/xml/sax/Attributes.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXParseException.h"
#include "org/xml/sax/XMLReader.h"
#include "org/xml/sax/helpers/DefaultHandler.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/compound/hyphenation/PatternParser must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCompoundHyphenationPatternParser ()

/*!
 @brief Returns a string of the location.
 */
- (NSString *)getLocationStringWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)ex;

@end

__attribute__((unused)) static NSString *OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getLocationStringWithOrgXmlSaxSAXParseException_(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *self, OrgXmlSaxSAXParseException *ex);

@implementation OrgApacheLuceneAnalysisCompoundHyphenationPatternParser

+ (jint)ELEM_CLASSES {
  return OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_CLASSES;
}

+ (jint)ELEM_EXCEPTIONS {
  return OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_EXCEPTIONS;
}

+ (jint)ELEM_PATTERNS {
  return OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_PATTERNS;
}

+ (jint)ELEM_HYPHEN {
  return OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_HYPHEN;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer:(id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>)consumer {
  OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_(self, consumer);
  return self;
}

- (void)setConsumerWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer:(id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>)consumer {
  JreStrongAssign(&self->consumer_, consumer);
}

- (void)parseWithNSString:(NSString *)filename {
  [self parseWithOrgXmlSaxInputSource:create_OrgXmlSaxInputSource_initWithNSString_(filename)];
}

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source {
  @try {
    [((id<OrgXmlSaxXMLReader>) nil_chk(parser_)) parseWithOrgXmlSaxInputSource:source];
  }
  @catch (OrgXmlSaxSAXException *e) {
    @throw create_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
}

+ (id<OrgXmlSaxXMLReader>)createParser {
  return OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_createParser();
}

- (NSString *)readTokenWithJavaLangStringBuilder:(JavaLangStringBuilder *)chars {
  NSString *word;
  jboolean space = false;
  jint i;
  for (i = 0; i < [((JavaLangStringBuilder *) nil_chk(chars)) java_length]; i++) {
    if (JavaLangCharacter_isWhitespaceWithChar_([chars charAtWithInt:i])) {
      space = true;
    }
    else {
      break;
    }
  }
  if (space) {
    for (jint countr = i; countr < [chars java_length]; countr++) {
      [chars setCharAtWithInt:countr - i withChar:[chars charAtWithInt:countr]];
    }
    [chars setLengthWithInt:[chars java_length] - i];
    if ([((JavaLangStringBuilder *) nil_chk(token_)) java_length] > 0) {
      word = [((JavaLangStringBuilder *) nil_chk(token_)) description];
      [((JavaLangStringBuilder *) nil_chk(token_)) setLengthWithInt:0];
      return word;
    }
  }
  space = false;
  for (i = 0; i < [chars java_length]; i++) {
    if (JavaLangCharacter_isWhitespaceWithChar_([chars charAtWithInt:i])) {
      space = true;
      break;
    }
  }
  [((JavaLangStringBuilder *) nil_chk(token_)) appendWithNSString:[((NSString *) nil_chk([chars description])) java_substring:0 endIndex:i]];
  for (jint countr = i; countr < [chars java_length]; countr++) {
    [chars setCharAtWithInt:countr - i withChar:[chars charAtWithInt:countr]];
  }
  [chars setLengthWithInt:[chars java_length] - i];
  if (space) {
    word = [((JavaLangStringBuilder *) nil_chk(token_)) description];
    [((JavaLangStringBuilder *) nil_chk(token_)) setLengthWithInt:0];
    return word;
  }
  [((JavaLangStringBuilder *) nil_chk(token_)) appendWithJavaLangCharSequence:chars];
  return nil;
}

+ (NSString *)getPatternWithNSString:(NSString *)word {
  return OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getPatternWithNSString_(word);
}

- (JavaUtilArrayList *)normalizeExceptionWithJavaUtilArrayList:(JavaUtilArrayList *)ex {
  JavaUtilArrayList *res = create_JavaUtilArrayList_init();
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(ex)) size]; i++) {
    id item = JreRetainedLocalValue([ex getWithInt:i]);
    if ([item isKindOfClass:[NSString class]]) {
      NSString *str = (NSString *) item;
      JavaLangStringBuilder *buf = create_JavaLangStringBuilder_init();
      for (jint j = 0; j < [((NSString *) nil_chk(str)) java_length]; j++) {
        jchar c = [str charAtWithInt:j];
        if (c != hyphenChar_) {
          [buf appendWithChar:c];
        }
        else {
          [res addWithId:[buf description]];
          [buf setLengthWithInt:0];
          IOSCharArray *h = [IOSCharArray arrayWithLength:1];
          *IOSCharArray_GetRef(h, 0) = hyphenChar_;
          [res addWithId:create_OrgApacheLuceneAnalysisCompoundHyphenationHyphen_initWithNSString_withNSString_withNSString_([NSString java_stringWithCharacters:h], nil, nil)];
        }
      }
      if ([buf java_length] > 0) {
        [res addWithId:[buf description]];
      }
    }
    else {
      [res addWithId:item];
    }
  }
  return res;
}

- (NSString *)getExceptionWordWithJavaUtilArrayList:(JavaUtilArrayList *)ex {
  JavaLangStringBuilder *res = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(ex)) size]; i++) {
    id item = JreRetainedLocalValue([ex getWithInt:i]);
    if ([item isKindOfClass:[NSString class]]) {
      [res appendWithNSString:(NSString *) item];
    }
    else {
      if (((OrgApacheLuceneAnalysisCompoundHyphenationHyphen *) nil_chk(((OrgApacheLuceneAnalysisCompoundHyphenationHyphen *) cast_chk(item, [OrgApacheLuceneAnalysisCompoundHyphenationHyphen class]))))->noBreak_ != nil) {
        [res appendWithNSString:((OrgApacheLuceneAnalysisCompoundHyphenationHyphen *) nil_chk(((OrgApacheLuceneAnalysisCompoundHyphenationHyphen *) cast_chk(item, [OrgApacheLuceneAnalysisCompoundHyphenationHyphen class]))))->noBreak_];
      }
    }
  }
  return [res description];
}

+ (NSString *)getInterletterValuesWithNSString:(NSString *)pat {
  return OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getInterletterValuesWithNSString_(pat);
}

- (OrgXmlSaxInputSource *)resolveEntityWithNSString:(NSString *)publicId
                                       withNSString:(NSString *)systemId {
  if ((systemId != nil && [systemId java_matches:@"(?i).*\\bhyphenation.dtd\\b.*"]) || ([@"hyphenation-info" isEqual:publicId])) {
    return create_OrgXmlSaxInputSource_initWithNSString_([((JavaNetURL *) nil_chk([[self java_getClass] getResource:@"hyphenation.dtd"])) toExternalForm]);
  }
  return nil;
}

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)local
                    withNSString:(NSString *)raw
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attrs {
  if ([((NSString *) nil_chk(local)) isEqual:@"hyphen-char"]) {
    NSString *h = JreRetainedLocalValue([((id<OrgXmlSaxAttributes>) nil_chk(attrs)) getValueWithNSString:@"value"]);
    if (h != nil && [h java_length] == 1) {
      hyphenChar_ = [h charAtWithInt:0];
    }
  }
  else if ([local isEqual:@"classes"]) {
    currElement_ = OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_CLASSES;
  }
  else if ([local isEqual:@"patterns"]) {
    currElement_ = OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_PATTERNS;
  }
  else if ([local isEqual:@"exceptions"]) {
    currElement_ = OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_EXCEPTIONS;
    JreStrongAssignAndConsume(&exception_, new_JavaUtilArrayList_init());
  }
  else if ([local isEqual:@"hyphen"]) {
    if ([((JavaLangStringBuilder *) nil_chk(token_)) java_length] > 0) {
      [((JavaUtilArrayList *) nil_chk(exception_)) addWithId:[((JavaLangStringBuilder *) nil_chk(token_)) description]];
    }
    [((JavaUtilArrayList *) nil_chk(exception_)) addWithId:create_OrgApacheLuceneAnalysisCompoundHyphenationHyphen_initWithNSString_withNSString_withNSString_([((id<OrgXmlSaxAttributes>) nil_chk(attrs)) getValueWithNSString:@"pre"], [attrs getValueWithNSString:@"no"], [attrs getValueWithNSString:@"post"])];
    currElement_ = OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_HYPHEN;
  }
  [((JavaLangStringBuilder *) nil_chk(token_)) setLengthWithInt:0];
}

- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)local
                  withNSString:(NSString *)raw {
  if ([((JavaLangStringBuilder *) nil_chk(token_)) java_length] > 0) {
    NSString *word = JreRetainedLocalValue([((JavaLangStringBuilder *) nil_chk(token_)) description]);
    switch (currElement_) {
      case OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_CLASSES:
      [((id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>) nil_chk(consumer_)) addClassWithNSString:word];
      break;
      case OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_EXCEPTIONS:
      [((JavaUtilArrayList *) nil_chk(exception_)) addWithId:word];
      JreStrongAssign(&exception_, [self normalizeExceptionWithJavaUtilArrayList:exception_]);
      [((id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>) nil_chk(consumer_)) addExceptionWithNSString:[self getExceptionWordWithJavaUtilArrayList:exception_] withJavaUtilArrayList:(JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(exception_)) java_clone], [JavaUtilArrayList class])];
      break;
      case OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_PATTERNS:
      [((id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>) nil_chk(consumer_)) addPatternWithNSString:OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getPatternWithNSString_(word) withNSString:OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getInterletterValuesWithNSString_(word)];
      break;
      case OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_HYPHEN:
      break;
    }
    if (currElement_ != OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_HYPHEN) {
      [((JavaLangStringBuilder *) nil_chk(token_)) setLengthWithInt:0];
    }
  }
  if (currElement_ == OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_HYPHEN) {
    currElement_ = OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_EXCEPTIONS;
  }
  else {
    currElement_ = 0;
  }
}

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length {
  JavaLangStringBuilder *chars = create_JavaLangStringBuilder_initWithInt_(length);
  [chars appendWithCharArray:ch withInt:start withInt:length];
  NSString *word = JreRetainedLocalValue([self readTokenWithJavaLangStringBuilder:chars]);
  while (word != nil) {
    switch (currElement_) {
      case OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_CLASSES:
      [((id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>) nil_chk(consumer_)) addClassWithNSString:word];
      break;
      case OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_EXCEPTIONS:
      [((JavaUtilArrayList *) nil_chk(exception_)) addWithId:word];
      JreStrongAssign(&exception_, [self normalizeExceptionWithJavaUtilArrayList:exception_]);
      [((id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>) nil_chk(consumer_)) addExceptionWithNSString:[self getExceptionWordWithJavaUtilArrayList:exception_] withJavaUtilArrayList:(JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(exception_)) java_clone], [JavaUtilArrayList class])];
      [((JavaUtilArrayList *) nil_chk(exception_)) clear];
      break;
      case OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_PATTERNS:
      [((id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>) nil_chk(consumer_)) addPatternWithNSString:OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getPatternWithNSString_(word) withNSString:OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getInterletterValuesWithNSString_(word)];
      break;
    }
    word = [self readTokenWithJavaLangStringBuilder:chars];
  }
}

- (NSString *)getLocationStringWithOrgXmlSaxSAXParseException:(OrgXmlSaxSAXParseException *)ex {
  return OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getLocationStringWithOrgXmlSaxSAXParseException_(self, ex);
}

- (void)dealloc {
  RELEASE_(parser_);
  RELEASE_(consumer_);
  RELEASE_(token_);
  RELEASE_(exception_);
  RELEASE_(errMsg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, 4, -1, -1, -1 },
    { NULL, "LOrgXmlSaxXMLReader;", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 8, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x4, 9, 10, -1, 11, -1, -1 },
    { NULL, "LNSString;", 0x4, 12, 10, -1, 13, -1, -1 },
    { NULL, "LNSString;", 0xc, 14, 3, -1, -1, -1, -1 },
    { NULL, "LOrgXmlSaxInputSource;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer:);
  methods[2].selector = @selector(setConsumerWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer:);
  methods[3].selector = @selector(parseWithNSString:);
  methods[4].selector = @selector(parseWithOrgXmlSaxInputSource:);
  methods[5].selector = @selector(createParser);
  methods[6].selector = @selector(readTokenWithJavaLangStringBuilder:);
  methods[7].selector = @selector(getPatternWithNSString:);
  methods[8].selector = @selector(normalizeExceptionWithJavaUtilArrayList:);
  methods[9].selector = @selector(getExceptionWordWithJavaUtilArrayList:);
  methods[10].selector = @selector(getInterletterValuesWithNSString:);
  methods[11].selector = @selector(resolveEntityWithNSString:withNSString:);
  methods[12].selector = @selector(startElementWithNSString:withNSString:withNSString:withOrgXmlSaxAttributes:);
  methods[13].selector = @selector(endElementWithNSString:withNSString:withNSString:);
  methods[14].selector = @selector(charactersWithCharArray:withInt:withInt:);
  methods[15].selector = @selector(getLocationStringWithOrgXmlSaxSAXParseException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", "LOrgXmlSaxXMLReader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currElement_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "consumer_", "LOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "token_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "exception_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 25, -1 },
    { "hyphenChar_", "C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "errMsg_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ELEM_CLASSES", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_CLASSES, 0x18, -1, -1, -1, -1 },
    { "ELEM_EXCEPTIONS", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_EXCEPTIONS, 0x18, -1, -1, -1, -1 },
    { "ELEM_PATTERNS", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_PATTERNS, 0x18, -1, -1, -1, -1 },
    { "ELEM_HYPHEN", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_HYPHEN, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer;", "setConsumer", "parse", "LNSString;", "LJavaIoIOException;", "LOrgXmlSaxInputSource;", "readToken", "LJavaLangStringBuilder;", "getPattern", "normalizeException", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<*>;)Ljava/util/ArrayList<Ljava/lang/Object;>;", "getExceptionWord", "(Ljava/util/ArrayList<*>;)Ljava/lang/String;", "getInterletterValues", "resolveEntity", "LNSString;LNSString;", "startElement", "LNSString;LNSString;LNSString;LOrgXmlSaxAttributes;", "endElement", "LNSString;LNSString;LNSString;", "characters", "[CII", "getLocationString", "LOrgXmlSaxSAXParseException;", "Ljava/util/ArrayList<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundHyphenationPatternParser = { "PatternParser", "org.apache.lucene.analysis.compound.hyphenation", ptrTable, methods, fields, 7, 0x1, 16, 11, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser;
}

@end

void OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_init(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *self) {
  OrgXmlSaxHelpersDefaultHandler_init(self);
  JreStrongAssignAndConsume(&self->token_, new_JavaLangStringBuilder_init());
  JreStrongAssign(&self->parser_, OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_createParser());
  [((id<OrgXmlSaxXMLReader>) nil_chk(self->parser_)) setContentHandlerWithOrgXmlSaxContentHandler:self];
  [((id<OrgXmlSaxXMLReader>) nil_chk(self->parser_)) setErrorHandlerWithOrgXmlSaxErrorHandler:self];
  [((id<OrgXmlSaxXMLReader>) nil_chk(self->parser_)) setEntityResolverWithOrgXmlSaxEntityResolver:self];
  self->hyphenChar_ = '-';
}

OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *new_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, init)
}

OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *create_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, init)
}

void OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *self, id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer> consumer) {
  OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_init(self);
  JreStrongAssign(&self->consumer_, consumer);
}

OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *new_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_(id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer> consumer) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_, consumer)
}

OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *create_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_(id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer> consumer) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_, consumer)
}

id<OrgXmlSaxXMLReader> OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_createParser() {
  OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initialize();
  @try {
    JavaxXmlParsersSAXParserFactory *factory = JavaxXmlParsersSAXParserFactory_newInstance();
    [((JavaxXmlParsersSAXParserFactory *) nil_chk(factory)) setNamespaceAwareWithBoolean:true];
    return [((JavaxXmlParsersSAXParser *) nil_chk([factory newSAXParser])) getXMLReader];
  }
  @catch (JavaLangException *e) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Couldn't create XMLReader: ", [e getMessage]));
  }
}

NSString *OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getPatternWithNSString_(NSString *word) {
  OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initialize();
  JavaLangStringBuilder *pat = create_JavaLangStringBuilder_init();
  jint len = [((NSString *) nil_chk(word)) java_length];
  for (jint i = 0; i < len; i++) {
    if (!JavaLangCharacter_isDigitWithChar_([word charAtWithInt:i])) {
      [pat appendWithChar:[word charAtWithInt:i]];
    }
  }
  return [pat description];
}

NSString *OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getInterletterValuesWithNSString_(NSString *pat) {
  OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initialize();
  JavaLangStringBuilder *il = create_JavaLangStringBuilder_init();
  NSString *word = JreStrcat("$C", pat, 'a');
  jint len = [word java_length];
  for (jint i = 0; i < len; i++) {
    jchar c = [word charAtWithInt:i];
    if (JavaLangCharacter_isDigitWithChar_(c)) {
      [il appendWithChar:c];
      i++;
    }
    else {
      [il appendWithChar:'0'];
    }
  }
  return [il description];
}

NSString *OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getLocationStringWithOrgXmlSaxSAXParseException_(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *self, OrgXmlSaxSAXParseException *ex) {
  JavaLangStringBuilder *str = create_JavaLangStringBuilder_init();
  NSString *systemId = JreRetainedLocalValue([((OrgXmlSaxSAXParseException *) nil_chk(ex)) getSystemId]);
  if (systemId != nil) {
    jint index = [systemId java_lastIndexOf:'/'];
    if (index != -1) {
      systemId = [systemId java_substring:index + 1];
    }
    [str appendWithNSString:systemId];
  }
  [str appendWithChar:':'];
  [str appendWithInt:[ex getLineNumber]];
  [str appendWithChar:':'];
  [str appendWithInt:[ex getColumnNumber]];
  return [str description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser)
