//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/CharVector.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/compound/hyphenation/CharVector must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCompoundHyphenationCharVector () {
 @public
  jint blockSize_;
  /*!
   @brief The encapsulated array
   */
  IOSCharArray *array_;
  /*!
   @brief Points to next free item
   */
  jint n_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, array_, IOSCharArray *)

/*!
 @brief Capacity increment size
 */
inline jint OrgApacheLuceneAnalysisCompoundHyphenationCharVector_get_DEFAULT_BLOCK_SIZE(void);
#define OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE 2048
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, DEFAULT_BLOCK_SIZE, jint)

@implementation OrgApacheLuceneAnalysisCompoundHyphenationCharVector

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)capacity {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)a {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_(self, a);
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)a
                          withInt:(jint)capacity {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_(self, a, capacity);
  return self;
}

- (void)clear {
  n_ = 0;
}

- (OrgApacheLuceneAnalysisCompoundHyphenationCharVector *)java_clone {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector *cv = create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_([((IOSCharArray *) nil_chk(array_)) java_clone], blockSize_);
  cv->n_ = self->n_;
  return cv;
}

- (IOSCharArray *)getArray {
  return array_;
}

- (jint)length {
  return n_;
}

- (jint)capacity {
  return ((IOSCharArray *) nil_chk(array_))->size_;
}

- (void)putWithInt:(jint)index
          withChar:(jchar)val {
  *IOSCharArray_GetRef(nil_chk(array_), index) = val;
}

- (jchar)getWithInt:(jint)index {
  return IOSCharArray_Get(nil_chk(array_), index);
}

- (jint)alloc__WithInt:(jint)size {
  jint index = n_;
  jint len = ((IOSCharArray *) nil_chk(array_))->size_;
  if (n_ + size >= len) {
    IOSCharArray *aux = [IOSCharArray arrayWithLength:len + blockSize_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array_, 0, aux, 0, len);
    JreStrongAssign(&array_, aux);
  }
  n_ += size;
  return index;
}

- (void)trimToSize {
  if (n_ < ((IOSCharArray *) nil_chk(array_))->size_) {
    IOSCharArray *aux = [IOSCharArray arrayWithLength:n_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array_, 0, aux, 0, n_);
    JreStrongAssign(&array_, aux);
  }
}

- (void)dealloc {
  RELEASE_(array_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisCompoundHyphenationCharVector;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "C", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithCharArray:);
  methods[3].selector = @selector(initWithCharArray:withInt:);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(java_clone);
  methods[6].selector = @selector(getArray);
  methods[7].selector = @selector(length);
  methods[8].selector = @selector(capacity);
  methods[9].selector = @selector(putWithInt:withChar:);
  methods[10].selector = @selector(getWithInt:);
  methods[11].selector = @selector(alloc__WithInt:);
  methods[12].selector = @selector(trimToSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE, 0x1a, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "array_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "n_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "[C", "[CI", "clone", "put", "IC", "get", "alloc" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCompoundHyphenationCharVector = { "CharVector", "org.apache.lucene.analysis.compound.hyphenation", ptrTable, methods, fields, 7, 0x1, 13, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCompoundHyphenationCharVector;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *self) {
  OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(self, OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE);
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *new_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, init)
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, init)
}

void OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *self, jint capacity) {
  NSObject_init(self);
  if (capacity > 0) {
    self->blockSize_ = capacity;
  }
  else {
    self->blockSize_ = OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE;
  }
  JreStrongAssignAndConsume(&self->array_, [IOSCharArray newArrayWithLength:self->blockSize_]);
  self->n_ = 0;
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *new_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithInt_, capacity)
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithInt_, capacity)
}

void OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *self, IOSCharArray *a) {
  NSObject_init(self);
  self->blockSize_ = OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE;
  JreStrongAssign(&self->array_, a);
  self->n_ = ((IOSCharArray *) nil_chk(a))->size_;
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *new_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_(IOSCharArray *a) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithCharArray_, a)
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_(IOSCharArray *a) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithCharArray_, a)
}

void OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_(OrgApacheLuceneAnalysisCompoundHyphenationCharVector *self, IOSCharArray *a, jint capacity) {
  NSObject_init(self);
  if (capacity > 0) {
    self->blockSize_ = capacity;
  }
  else {
    self->blockSize_ = OrgApacheLuceneAnalysisCompoundHyphenationCharVector_DEFAULT_BLOCK_SIZE;
  }
  JreStrongAssign(&self->array_, a);
  self->n_ = ((IOSCharArray *) nil_chk(a))->size_;
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *new_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_(IOSCharArray *a, jint capacity) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithCharArray_withInt_, a, capacity)
}

OrgApacheLuceneAnalysisCompoundHyphenationCharVector *create_OrgApacheLuceneAnalysisCompoundHyphenationCharVector_initWithCharArray_withInt_(IOSCharArray *a, jint capacity) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCompoundHyphenationCharVector, initWithCharArray_withInt_, a, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCompoundHyphenationCharVector)
