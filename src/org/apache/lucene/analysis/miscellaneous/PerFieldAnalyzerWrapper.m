//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper.java
//

#include "J2ObjC_source.h"
#include "java/util/Collections.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/DelegatingAnalyzerWrapper.h"
#include "org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/miscellaneous/PerFieldAnalyzerWrapper must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer_;
  id<JavaUtilMap> fieldAnalyzers_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, defaultAnalyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, fieldAnalyzers_, id<JavaUtilMap>)

@implementation OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)defaultAnalyzer {
  OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(self, defaultAnalyzer);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)defaultAnalyzer
                                        withJavaUtilMap:(id<JavaUtilMap>)fieldAnalyzers {
  OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(self, defaultAnalyzer, fieldAnalyzers);
  return self;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getWrappedAnalyzerWithNSString:(NSString *)fieldName {
  OrgApacheLuceneAnalysisAnalyzer *analyzer = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(fieldAnalyzers_)) getWithId:fieldName]);
  return (analyzer != nil) ? analyzer : defaultAnalyzer_;
}

- (NSString *)description {
  return JreStrcat("$@$@C", @"PerFieldAnalyzerWrapper(", fieldAnalyzers_, @", default=", defaultAnalyzer_, ')');
}

- (void)dealloc {
  RELEASE_(defaultAnalyzer_);
  RELEASE_(fieldAnalyzers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisAnalyzer:);
  methods[1].selector = @selector(initWithOrgApacheLuceneAnalysisAnalyzer:withJavaUtilMap:);
  methods[2].selector = @selector(getWrappedAnalyzerWithNSString:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defaultAnalyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fieldAnalyzers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisAnalyzer;", "LOrgApacheLuceneAnalysisAnalyzer;LJavaUtilMap;", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;>;)V", "getWrappedAnalyzer", "LNSString;", "toString", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper = { "PerFieldAnalyzerWrapper", "org.apache.lucene.analysis.miscellaneous", ptrTable, methods, fields, 7, 0x11, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper;
}

@end

void OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *self, OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer) {
  OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(self, defaultAnalyzer, nil);
}

OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *new_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, initWithOrgApacheLuceneAnalysisAnalyzer_, defaultAnalyzer)
}

OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *create_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, initWithOrgApacheLuceneAnalysisAnalyzer_, defaultAnalyzer)
}

void OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *self, OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, id<JavaUtilMap> fieldAnalyzers) {
  OrgApacheLuceneAnalysisDelegatingAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy_(self, JreLoadStatic(OrgApacheLuceneAnalysisAnalyzer, PER_FIELD_REUSE_STRATEGY));
  JreStrongAssign(&self->defaultAnalyzer_, defaultAnalyzer);
  JreStrongAssign(&self->fieldAnalyzers_, (fieldAnalyzers != nil) ? fieldAnalyzers : JavaUtilCollections_emptyMap());
}

OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *new_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, id<JavaUtilMap> fieldAnalyzers) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_, defaultAnalyzer, fieldAnalyzers)
}

OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper *create_OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, id<JavaUtilMap> fieldAnalyzers) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper, initWithOrgApacheLuceneAnalysisAnalyzer_withJavaUtilMap_, defaultAnalyzer, fieldAnalyzers)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisMiscellaneousPerFieldAnalyzerWrapper)
