//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory must not be compiled with ARC (-fobjc-arc)"
#endif

NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP = @"keep";
NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP_IGNORE_CASE = @"keepIgnoreCase";
NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_OK_PREFIX = @"okPrefix";
NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MIN_WORD_LENGTH = @"minWordLength";
NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_WORD_COUNT = @"maxWordCount";
NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_TOKEN_LENGTH = @"maxTokenLength";
NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_ONLY_FIRST_WORD = @"onlyFirstWord";
NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_FORCE_FIRST_LETTER = @"forceFirstLetter";

@implementation OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory

+ (NSString *)KEEP {
  return OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP;
}

+ (NSString *)KEEP_IGNORE_CASE {
  return OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP_IGNORE_CASE;
}

+ (NSString *)OK_PREFIX {
  return OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_OK_PREFIX;
}

+ (NSString *)MIN_WORD_LENGTH {
  return OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MIN_WORD_LENGTH;
}

+ (NSString *)MAX_WORD_COUNT {
  return OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_WORD_COUNT;
}

+ (NSString *)MAX_TOKEN_LENGTH {
  return OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_TOKEN_LENGTH;
}

+ (NSString *)ONLY_FIRST_WORD {
  return OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_ONLY_FIRST_WORD;
}

+ (NSString *)FORCE_FIRST_LETTER {
  return OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_FORCE_FIRST_LETTER;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)args {
  OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_initWithJavaUtilMap_(self, args);
  return self;
}

- (OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter *)createWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input {
  return create_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_withBoolean_withOrgApacheLuceneAnalysisUtilCharArraySet_withBoolean_withJavaUtilCollection_withInt_withInt_withInt_(input, onlyFirstWord_, keep_, forceFirstLetter_, okPrefix_, minWordLength_, maxWordCount_, maxTokenLength_);
}

- (void)dealloc {
  RELEASE_(keep_);
  RELEASE_(okPrefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilMap:);
  methods[1].selector = @selector(createWithOrgApacheLuceneAnalysisTokenStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "KEEP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "KEEP_IGNORE_CASE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "OK_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "MIN_WORD_LENGTH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "MAX_WORD_COUNT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "MAX_TOKEN_LENGTH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "ONLY_FIRST_WORD", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "FORCE_FIRST_LETTER", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "keep_", "LOrgApacheLuceneAnalysisUtilCharArraySet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "okPrefix_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "minWordLength_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxWordCount_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxTokenLength_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "onlyFirstWord_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "forceFirstLetter_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "create", "LOrgApacheLuceneAnalysisTokenStream;", &OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP, &OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP_IGNORE_CASE, &OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_OK_PREFIX, &OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MIN_WORD_LENGTH, &OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_WORD_COUNT, &OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_TOKEN_LENGTH, &OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_ONLY_FIRST_WORD, &OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_FORCE_FIRST_LETTER, "Ljava/util/Collection<[C>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory = { "CapitalizationFilterFactory", "org.apache.lucene.analysis.miscellaneous", ptrTable, methods, fields, 7, 0x1, 2, 15, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory;
}

@end

void OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory *self, id<JavaUtilMap> args) {
  OrgApacheLuceneAnalysisUtilTokenFilterFactory_initWithJavaUtilMap_(self, args);
  JreStrongAssign(&self->okPrefix_, JavaUtilCollections_emptyList());
  jboolean ignoreCase = [self getBooleanWithJavaUtilMap:args withNSString:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP_IGNORE_CASE withBoolean:false];
  id<JavaUtilSet> k = JreRetainedLocalValue([self getSetWithJavaUtilMap:args withNSString:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP]);
  if (k != nil) {
    JreStrongAssignAndConsume(&self->keep_, new_OrgApacheLuceneAnalysisUtilCharArraySet_initWithInt_withBoolean_(10, ignoreCase));
    [self->keep_ addAllWithJavaUtilCollection:k];
  }
  k = [self getSetWithJavaUtilMap:args withNSString:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_OK_PREFIX];
  if (k != nil) {
    JreStrongAssignAndConsume(&self->okPrefix_, new_JavaUtilArrayList_init());
    for (NSString * __strong item in k) {
      [((id<JavaUtilCollection>) nil_chk(self->okPrefix_)) addWithId:[((NSString *) nil_chk(item)) java_toCharArray]];
    }
  }
  self->minWordLength_ = [self getIntWithJavaUtilMap:args withNSString:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MIN_WORD_LENGTH withInt:0];
  self->maxWordCount_ = [self getIntWithJavaUtilMap:args withNSString:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_WORD_COUNT withInt:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_DEFAULT_MAX_WORD_COUNT];
  self->maxTokenLength_ = [self getIntWithJavaUtilMap:args withNSString:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_TOKEN_LENGTH withInt:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_DEFAULT_MAX_TOKEN_LENGTH];
  self->onlyFirstWord_ = [self getBooleanWithJavaUtilMap:args withNSString:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_ONLY_FIRST_WORD withBoolean:true];
  self->forceFirstLetter_ = [self getBooleanWithJavaUtilMap:args withNSString:OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_FORCE_FIRST_LETTER withBoolean:true];
  if (![((id<JavaUtilMap>) nil_chk(args)) isEmpty]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown parameters: ", args));
  }
}

OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory *new_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_initWithJavaUtilMap_(id<JavaUtilMap> args) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, initWithJavaUtilMap_, args)
}

OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory *create_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_initWithJavaUtilMap_(id<JavaUtilMap> args) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, initWithJavaUtilMap_, args)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory)
