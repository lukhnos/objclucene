//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter () {
 @public
  jint flags_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAttribute_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAttribute_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncAttribute_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAttribute_;
  OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *iterator_;
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *concat_;
  jint lastConcatCount_;
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *concatAll_;
  jint accumPosInc_;
  IOSCharArray *savedBuffer_;
  jint savedStartOffset_;
  jint savedEndOffset_;
  NSString *savedType_;
  jboolean hasSavedState_;
  jboolean hasIllegalOffsets_;
  jboolean hasOutputToken_;
  jboolean hasOutputFollowingOriginal_;
}

/*!
 @brief Saves the existing attribute states
 */
- (void)saveState;

/*!
 @brief Flushes the given WordDelimiterConcatenation by either writing its concat and then clearing, or just clearing.
 @param concatenation WordDelimiterConcatenation that will be flushed
 @return <code>true</code> if the concatenation was written before it was cleared, <code>false</code> otherwise
 */
- (jboolean)flushConcatenationWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation:(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *)concatenation;

/*!
 @brief Determines whether to concatenate a word or number if the current word is the given type
 @param wordType Type of the current word used to determine if it should be concatenated
 @return <code>true</code> if concatenation should occur, <code>false</code> otherwise
 */
- (jboolean)shouldConcatenateWithInt:(jint)wordType;

/*!
 @brief Determines whether a word/number part should be generated for a word of the given type
 @param wordType Type of the word used to determine if a word/number part should be generated
 @return <code>true</code> if a word/number part should be generated, <code>false</code> otherwise
 */
- (jboolean)shouldGeneratePartsWithInt:(jint)wordType;

/*!
 @brief Concatenates the saved buffer to the given WordDelimiterConcatenation
 @param concatenation WordDelimiterConcatenation to concatenate the buffer to
 */
- (void)concatenateWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation:(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *)concatenation;

/*!
 @brief Generates a word/number part, updating the appropriate attributes
 @param isSingleWord<code>true</code>  if the generation is occurring from a single word, <code>false</code>  otherwise
 */
- (void)generatePartWithBoolean:(jboolean)isSingleWord;

/*!
 @brief Get the position increment gap for a subword or concatenation
 @param inject true if this token wants to be injected
 @return position increment gap
 */
- (jint)positionWithBoolean:(jboolean)inject;

/*!
 @brief Determines whether the given flag is set
 @param flag Flag to see if set
 @return <code>true</code> if flag is set
 */
- (jboolean)hasWithInt:(jint)flag;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, termAttribute_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, offsetAttribute_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, posIncAttribute_, id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, typeAttribute_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, iterator_, OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, concat_, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, concatAll_, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, savedBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, savedType_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_saveState(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_flushConcatenationWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *concatenation);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_shouldConcatenateWithInt_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jint wordType);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_shouldGeneratePartsWithInt_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jint wordType);

__attribute__((unused)) static void OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_concatenateWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *concatenation);

__attribute__((unused)) static void OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_generatePartWithBoolean_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jboolean isSingleWord);

__attribute__((unused)) static jint OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_positionWithBoolean_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jboolean inject);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jint flag);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter__Annotations$0(void);

@interface OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation () {
 @public
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *this$0_;
}

@end

@implementation OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter

+ (jint)LOWER {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_LOWER;
}

+ (jint)UPPER {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_UPPER;
}

+ (jint)DIGIT {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_DIGIT;
}

+ (jint)SUBWORD_DELIM {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_SUBWORD_DELIM;
}

+ (jint)ALPHA {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_ALPHA;
}

+ (jint)ALPHANUM {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_ALPHANUM;
}

+ (jint)GENERATE_WORD_PARTS {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_GENERATE_WORD_PARTS;
}

+ (jint)GENERATE_NUMBER_PARTS {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_GENERATE_NUMBER_PARTS;
}

+ (jint)CATENATE_WORDS {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_CATENATE_WORDS;
}

+ (jint)CATENATE_NUMBERS {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_CATENATE_NUMBERS;
}

+ (jint)CATENATE_ALL {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_CATENATE_ALL;
}

+ (jint)PRESERVE_ORIGINAL {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_PRESERVE_ORIGINAL;
}

+ (jint)SPLIT_ON_CASE_CHANGE {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_SPLIT_ON_CASE_CHANGE;
}

+ (jint)SPLIT_ON_NUMERICS {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_SPLIT_ON_NUMERICS;
}

+ (jint)STEM_ENGLISH_POSSESSIVE {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_STEM_ENGLISH_POSSESSIVE;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                             withByteArray:(IOSByteArray *)charTypeTable
                                                   withInt:(jint)configurationFlags
               withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)protWords {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initWithOrgApacheLuceneAnalysisTokenStream_withByteArray_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_(self, inArg, charTypeTable, configurationFlags, protWords);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                                   withInt:(jint)configurationFlags
               withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)protWords {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_(self, inArg, configurationFlags, protWords);
  return self;
}

- (jboolean)incrementToken {
  while (true) {
    if (!hasSavedState_) {
      if (![((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
        return false;
      }
      jint termLength = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAttribute_)) java_length];
      IOSCharArray *termBuffer = [termAttribute_ buffer];
      accumPosInc_ += [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(posIncAttribute_)) getPositionIncrement];
      [((OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *) nil_chk(iterator_)) setTextWithCharArray:termBuffer withInt:termLength];
      [iterator_ next];
      if ((iterator_->current_ == 0 && iterator_->end_ == termLength) || (protWords_ != nil && [protWords_ containsWithCharArray:termBuffer withInt:0 withInt:termLength])) {
        [posIncAttribute_ setPositionIncrementWithInt:accumPosInc_];
        accumPosInc_ = 0;
        return true;
      }
      if (iterator_->end_ == OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DONE && !OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_PRESERVE_ORIGINAL)) {
        if ([posIncAttribute_ getPositionIncrement] == 1) {
          accumPosInc_--;
        }
        continue;
      }
      OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_saveState(self);
      hasOutputToken_ = false;
      hasOutputFollowingOriginal_ = !OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_PRESERVE_ORIGINAL);
      lastConcatCount_ = 0;
      if (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_PRESERVE_ORIGINAL)) {
        [posIncAttribute_ setPositionIncrementWithInt:accumPosInc_];
        accumPosInc_ = 0;
        return true;
      }
    }
    if (((OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *) nil_chk(iterator_))->end_ == OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DONE) {
      if (![((OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *) nil_chk(concat_)) isEmpty]) {
        if (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_flushConcatenationWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(self, concat_)) {
          return true;
        }
      }
      if (![((OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *) nil_chk(concatAll_)) isEmpty]) {
        if (concatAll_->subwordCount_ > lastConcatCount_) {
          [concatAll_ writeAndClear];
          return true;
        }
        [concatAll_ clear];
      }
      hasSavedState_ = false;
      continue;
    }
    if ([iterator_ isSingleWord]) {
      OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_generatePartWithBoolean_(self, true);
      [iterator_ next];
      return true;
    }
    jint wordType = [iterator_ type];
    if (![((OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *) nil_chk(concat_)) isEmpty] && (concat_->type_ & wordType) == 0) {
      if (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_flushConcatenationWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(self, concat_)) {
        hasOutputToken_ = false;
        return true;
      }
      hasOutputToken_ = false;
    }
    if (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_shouldConcatenateWithInt_(self, wordType)) {
      if ([concat_ isEmpty]) {
        concat_->type_ = wordType;
      }
      OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_concatenateWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(self, concat_);
    }
    if (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_CATENATE_ALL)) {
      OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_concatenateWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(self, concatAll_);
    }
    if (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_shouldGeneratePartsWithInt_(self, wordType)) {
      OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_generatePartWithBoolean_(self, false);
      [iterator_ next];
      return true;
    }
    [iterator_ next];
  }
}

- (void)reset {
  [super reset];
  hasSavedState_ = false;
  [((OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *) nil_chk(concat_)) clear];
  [((OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *) nil_chk(concatAll_)) clear];
  accumPosInc_ = 0;
}

- (void)saveState {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_saveState(self);
}

- (jboolean)flushConcatenationWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation:(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *)concatenation {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_flushConcatenationWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(self, concatenation);
}

- (jboolean)shouldConcatenateWithInt:(jint)wordType {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_shouldConcatenateWithInt_(self, wordType);
}

- (jboolean)shouldGeneratePartsWithInt:(jint)wordType {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_shouldGeneratePartsWithInt_(self, wordType);
}

- (void)concatenateWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation:(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *)concatenation {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_concatenateWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(self, concatenation);
}

- (void)generatePartWithBoolean:(jboolean)isSingleWord {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_generatePartWithBoolean_(self, isSingleWord);
}

- (jint)positionWithBoolean:(jboolean)inject {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_positionWithBoolean_(self, inject);
}

+ (jboolean)isAlphaWithInt:(jint)type {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isAlphaWithInt_(type);
}

+ (jboolean)isDigitWithInt:(jint)type {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isDigitWithInt_(type);
}

+ (jboolean)isSubwordDelimWithInt:(jint)type {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isSubwordDelimWithInt_(type);
}

+ (jboolean)isUpperWithInt:(jint)type {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isUpperWithInt_(type);
}

- (jboolean)hasWithInt:(jint)flag {
  return OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, flag);
}

- (void)dealloc {
  RELEASE_(protWords_);
  RELEASE_(termAttribute_);
  RELEASE_(offsetAttribute_);
  RELEASE_(posIncAttribute_);
  RELEASE_(typeAttribute_);
  RELEASE_(iterator_);
  RELEASE_(concat_);
  RELEASE_(concatAll_);
  RELEASE_(savedBuffer_);
  RELEASE_(savedType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 12, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 13, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 14, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 15, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 16, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withByteArray:withInt:withOrgApacheLuceneAnalysisUtilCharArraySet:);
  methods[1].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withInt:withOrgApacheLuceneAnalysisUtilCharArraySet:);
  methods[2].selector = @selector(incrementToken);
  methods[3].selector = @selector(reset);
  methods[4].selector = @selector(saveState);
  methods[5].selector = @selector(flushConcatenationWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation:);
  methods[6].selector = @selector(shouldConcatenateWithInt:);
  methods[7].selector = @selector(shouldGeneratePartsWithInt:);
  methods[8].selector = @selector(concatenateWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation:);
  methods[9].selector = @selector(generatePartWithBoolean:);
  methods[10].selector = @selector(positionWithBoolean:);
  methods[11].selector = @selector(isAlphaWithInt:);
  methods[12].selector = @selector(isDigitWithInt:);
  methods[13].selector = @selector(isSubwordDelimWithInt:);
  methods[14].selector = @selector(isUpperWithInt:);
  methods[15].selector = @selector(hasWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOWER", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_LOWER, 0x19, -1, -1, -1, -1 },
    { "UPPER", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_UPPER, 0x19, -1, -1, -1, -1 },
    { "DIGIT", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_DIGIT, 0x19, -1, -1, -1, -1 },
    { "SUBWORD_DELIM", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_SUBWORD_DELIM, 0x19, -1, -1, -1, -1 },
    { "ALPHA", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_ALPHA, 0x19, -1, -1, -1, -1 },
    { "ALPHANUM", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_ALPHANUM, 0x19, -1, -1, -1, -1 },
    { "GENERATE_WORD_PARTS", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_GENERATE_WORD_PARTS, 0x19, -1, -1, -1, -1 },
    { "GENERATE_NUMBER_PARTS", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_GENERATE_NUMBER_PARTS, 0x19, -1, -1, -1, -1 },
    { "CATENATE_WORDS", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_CATENATE_WORDS, 0x19, -1, -1, -1, -1 },
    { "CATENATE_NUMBERS", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_CATENATE_NUMBERS, 0x19, -1, -1, -1, -1 },
    { "CATENATE_ALL", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_CATENATE_ALL, 0x19, -1, -1, -1, -1 },
    { "PRESERVE_ORIGINAL", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_PRESERVE_ORIGINAL, 0x19, -1, -1, -1, -1 },
    { "SPLIT_ON_CASE_CHANGE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_SPLIT_ON_CASE_CHANGE, 0x19, -1, -1, -1, -1 },
    { "SPLIT_ON_NUMERICS", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_SPLIT_ON_NUMERICS, 0x19, -1, -1, -1, -1 },
    { "STEM_ENGLISH_POSSESSIVE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_STEM_ENGLISH_POSSESSIVE, 0x19, -1, -1, -1, -1 },
    { "protWords_", "LOrgApacheLuceneAnalysisUtilCharArraySet;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "termAttribute_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "offsetAttribute_", "LOrgApacheLuceneAnalysisTokenattributesOffsetAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posIncAttribute_", "LOrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeAttribute_", "LOrgApacheLuceneAnalysisTokenattributesTypeAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iterator_", "LOrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "concat_", "LOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lastConcatCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "concatAll_", "LOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "accumPosInc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "savedBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "savedStartOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "savedEndOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "savedType_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasSavedState_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasIllegalOffsets_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasOutputToken_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasOutputFollowingOriginal_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;[BILOrgApacheLuceneAnalysisUtilCharArraySet;", "LOrgApacheLuceneAnalysisTokenStream;ILOrgApacheLuceneAnalysisUtilCharArraySet;", "LJavaIoIOException;", "flushConcatenation", "LOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation;", "shouldConcatenate", "I", "shouldGenerateParts", "concatenate", "generatePart", "Z", "position", "isAlpha", "isDigit", "isSubwordDelim", "isUpper", "has", (void *)&OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter__Annotations$0 };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter = { "Lucene47WordDelimiterFilter", "org.apache.lucene.analysis.miscellaneous", ptrTable, methods, fields, 7, 0x11, 16, 34, -1, 4, -1, -1, 17 };
  return &_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter;
}

@end

void OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initWithOrgApacheLuceneAnalysisTokenStream_withByteArray_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, IOSByteArray *charTypeTable, jint configurationFlags, OrgApacheLuceneAnalysisUtilCharArraySet *protWords) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  JreStrongAssign(&self->termAttribute_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAttribute_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssign(&self->posIncAttribute_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  JreStrongAssign(&self->typeAttribute_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  JreStrongAssignAndConsume(&self->concat_, new_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_(self));
  self->lastConcatCount_ = 0;
  JreStrongAssignAndConsume(&self->concatAll_, new_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_(self));
  self->accumPosInc_ = 0;
  JreStrongAssignAndConsume(&self->savedBuffer_, [IOSCharArray newArrayWithLength:1024]);
  self->hasSavedState_ = false;
  self->hasIllegalOffsets_ = false;
  self->hasOutputToken_ = false;
  self->hasOutputFollowingOriginal_ = false;
  self->flags_ = configurationFlags;
  JreStrongAssign(&self->protWords_, protWords);
  JreStrongAssignAndConsume(&self->iterator_, new_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_initWithByteArray_withBoolean_withBoolean_withBoolean_(charTypeTable, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_SPLIT_ON_CASE_CHANGE), OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_SPLIT_ON_NUMERICS), OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_STEM_ENGLISH_POSSESSIVE)));
}

OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *new_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initWithOrgApacheLuceneAnalysisTokenStream_withByteArray_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisTokenStream *inArg, IOSByteArray *charTypeTable, jint configurationFlags, OrgApacheLuceneAnalysisUtilCharArraySet *protWords) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, initWithOrgApacheLuceneAnalysisTokenStream_withByteArray_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_, inArg, charTypeTable, configurationFlags, protWords)
}

OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *create_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initWithOrgApacheLuceneAnalysisTokenStream_withByteArray_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisTokenStream *inArg, IOSByteArray *charTypeTable, jint configurationFlags, OrgApacheLuceneAnalysisUtilCharArraySet *protWords) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, initWithOrgApacheLuceneAnalysisTokenStream_withByteArray_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_, inArg, charTypeTable, configurationFlags, protWords)
}

void OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, jint configurationFlags, OrgApacheLuceneAnalysisUtilCharArraySet *protWords) {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initWithOrgApacheLuceneAnalysisTokenStream_withByteArray_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_(self, inArg, JreLoadStatic(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator, DEFAULT_WORD_DELIM_TABLE), configurationFlags, protWords);
}

OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *new_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisTokenStream *inArg, jint configurationFlags, OrgApacheLuceneAnalysisUtilCharArraySet *protWords) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_, inArg, configurationFlags, protWords)
}

OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *create_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisTokenStream *inArg, jint configurationFlags, OrgApacheLuceneAnalysisUtilCharArraySet *protWords) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_withOrgApacheLuceneAnalysisUtilCharArraySet_, inArg, configurationFlags, protWords)
}

void OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_saveState(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self) {
  self->savedStartOffset_ = [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAttribute_)) startOffset];
  self->savedEndOffset_ = [self->offsetAttribute_ endOffset];
  self->hasIllegalOffsets_ = (self->savedEndOffset_ - self->savedStartOffset_ != [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAttribute_)) java_length]);
  JreStrongAssign(&self->savedType_, [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(self->typeAttribute_)) type]);
  if (((IOSCharArray *) nil_chk(self->savedBuffer_))->size_ < [self->termAttribute_ java_length]) {
    JreStrongAssignAndConsume(&self->savedBuffer_, [IOSCharArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_([self->termAttribute_ java_length], OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_CHAR)]);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([self->termAttribute_ buffer], 0, self->savedBuffer_, 0, [self->termAttribute_ java_length]);
  JreStrongAssign(&((OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *) nil_chk(self->iterator_))->text_, self->savedBuffer_);
  self->hasSavedState_ = true;
}

jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_flushConcatenationWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *concatenation) {
  self->lastConcatCount_ = ((OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *) nil_chk(concatenation))->subwordCount_;
  if (concatenation->subwordCount_ != 1 || !OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_shouldGeneratePartsWithInt_(self, concatenation->type_)) {
    [concatenation writeAndClear];
    return true;
  }
  [concatenation clear];
  return false;
}

jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_shouldConcatenateWithInt_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jint wordType) {
  return (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_CATENATE_WORDS) && OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isAlphaWithInt_(wordType)) || (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_CATENATE_NUMBERS) && OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isDigitWithInt_(wordType));
}

jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_shouldGeneratePartsWithInt_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jint wordType) {
  return (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_GENERATE_WORD_PARTS) && OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isAlphaWithInt_(wordType)) || (OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_GENERATE_NUMBER_PARTS) && OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isDigitWithInt_(wordType));
}

void OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_concatenateWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *concatenation) {
  if ([((OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *) nil_chk(concatenation)) isEmpty]) {
    concatenation->startOffset_ = self->savedStartOffset_ + ((OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *) nil_chk(self->iterator_))->current_;
  }
  [concatenation appendWithCharArray:self->savedBuffer_ withInt:((OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *) nil_chk(self->iterator_))->current_ withInt:self->iterator_->end_ - self->iterator_->current_];
  concatenation->endOffset_ = self->savedStartOffset_ + self->iterator_->end_;
}

void OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_generatePartWithBoolean_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jboolean isSingleWord) {
  [self clearAttributes];
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAttribute_)) copyBufferWithCharArray:self->savedBuffer_ withInt:((OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *) nil_chk(self->iterator_))->current_ withInt:self->iterator_->end_ - self->iterator_->current_];
  jint startOffset = self->savedStartOffset_ + self->iterator_->current_;
  jint endOffset = self->savedStartOffset_ + self->iterator_->end_;
  if (self->hasIllegalOffsets_) {
    if (isSingleWord && startOffset <= self->savedEndOffset_) {
      [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAttribute_)) setOffsetWithInt:startOffset withInt:self->savedEndOffset_];
    }
    else {
      [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAttribute_)) setOffsetWithInt:self->savedStartOffset_ withInt:self->savedEndOffset_];
    }
  }
  else {
    [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAttribute_)) setOffsetWithInt:startOffset withInt:endOffset];
  }
  [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(self->posIncAttribute_)) setPositionIncrementWithInt:OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_positionWithBoolean_(self, false)];
  [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(self->typeAttribute_)) setTypeWithNSString:self->savedType_];
}

jint OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_positionWithBoolean_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jboolean inject) {
  jint posInc = self->accumPosInc_;
  if (self->hasOutputToken_) {
    self->accumPosInc_ = 0;
    return inject ? 0 : JavaLangMath_maxWithInt_withInt_(1, posInc);
  }
  self->hasOutputToken_ = true;
  if (!self->hasOutputFollowingOriginal_) {
    self->hasOutputFollowingOriginal_ = true;
    return 0;
  }
  self->accumPosInc_ = 0;
  return JavaLangMath_maxWithInt_withInt_(1, posInc);
}

jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isAlphaWithInt_(jint type) {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initialize();
  return (type & OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_ALPHA) != 0;
}

jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isDigitWithInt_(jint type) {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initialize();
  return (type & OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_DIGIT) != 0;
}

jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isSubwordDelimWithInt_(jint type) {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initialize();
  return (type & OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_SUBWORD_DELIM) != 0;
}

jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_isUpperWithInt_(jint type) {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_initialize();
  return (type & OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_UPPER) != 0;
}

jboolean OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_hasWithInt_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *self, jint flag) {
  return (self->flags_ & flag) != 0;
}

IOSObjectArray *OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter)

@implementation OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation

- (instancetype)initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter:(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *)outer$ {
  OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_(self, outer$);
  return self;
}

- (void)appendWithCharArray:(IOSCharArray *)text
                    withInt:(jint)offset
                    withInt:(jint)length {
  [((JavaLangStringBuilder *) nil_chk(buffer_)) appendWithCharArray:text withInt:offset withInt:length];
  subwordCount_++;
}

- (void)write {
  [this$0_ clearAttributes];
  if ([((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(this$0_->termAttribute_)) java_length] < [((JavaLangStringBuilder *) nil_chk(buffer_)) java_length]) {
    [this$0_->termAttribute_ resizeBufferWithInt:[buffer_ java_length]];
  }
  IOSCharArray *termbuffer = [this$0_->termAttribute_ buffer];
  [buffer_ getCharsWithInt:0 withInt:[buffer_ java_length] withCharArray:termbuffer withInt:0];
  [this$0_->termAttribute_ setLengthWithInt:[buffer_ java_length]];
  if (this$0_->hasIllegalOffsets_) {
    [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(this$0_->offsetAttribute_)) setOffsetWithInt:this$0_->savedStartOffset_ withInt:this$0_->savedEndOffset_];
  }
  else {
    [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(this$0_->offsetAttribute_)) setOffsetWithInt:startOffset_ withInt:endOffset_];
  }
  [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(this$0_->posIncAttribute_)) setPositionIncrementWithInt:OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_positionWithBoolean_(this$0_, true)];
  [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(this$0_->typeAttribute_)) setTypeWithNSString:this$0_->savedType_];
  this$0_->accumPosInc_ = 0;
}

- (jboolean)isEmpty {
  return [((JavaLangStringBuilder *) nil_chk(buffer_)) java_length] == 0;
}

- (void)clear {
  [((JavaLangStringBuilder *) nil_chk(buffer_)) setLengthWithInt:0];
  startOffset_ = endOffset_ = type_ = subwordCount_ = 0;
}

- (void)writeAndClear {
  [self write];
  [self clear];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(buffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter:);
  methods[1].selector = @selector(appendWithCharArray:withInt:withInt:);
  methods[2].selector = @selector(write);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(writeAndClear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "buffer_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "startOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "endOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subwordCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter;", "append", "[CII" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation = { "WordDelimiterConcatenation", "org.apache.lucene.analysis.miscellaneous", ptrTable, methods, fields, 7, 0x10, 6, 6, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation;
}

@end

void OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *self, OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->buffer_, new_JavaLangStringBuilder_init());
}

OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *new_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation, initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_, outer$)
}

OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation *create_OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation_initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation, initWithOrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisMiscellaneousLucene47WordDelimiterFilter_WordDelimiterConcatenation)
