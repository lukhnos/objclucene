//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator () {
 @public
  jboolean hasFinalPossessive_;
  IOSByteArray *charTypeTable_;
  /*!
   @brief if true, need to skip over a possessive found in the last call to next()
   */
  jboolean skipPossessive_;
}

/*!
 @brief Determines whether the transition from lastType to type indicates a break
 @param lastType Last subword type
 @param type Current subword type
 @return <code>true</code> if the transition indicates a break, <code>false</code> otherwise
 */
- (jboolean)isBreakWithInt:(jint)lastType
                   withInt:(jint)type;

/*!
 @brief Set the internal word bounds (remove leading and trailing delimiters).Note, if a possessive is found, don't remove
  it yet, simply note it.
 */
- (void)setBounds;

/*!
 @brief Determines if the text at the given position indicates an English possessive which should be removed
 @param pos Position in the text to check if it indicates an English possessive
 @return <code>true</code> if the text at the position indicates an English posessive, <code>false</code> otherwise
 */
- (jboolean)endsWithPossessiveWithInt:(jint)pos;

/*!
 @brief Determines the type of the given character
 @param ch Character whose type is to be determined
 @return Type of the character
 */
- (jint)charTypeWithInt:(jint)ch;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator, charTypeTable_, IOSByteArray *)

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_isBreakWithInt_withInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self, jint lastType, jint type);

__attribute__((unused)) static void OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_setBounds(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_endsWithPossessiveWithInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self, jint pos);

__attribute__((unused)) static jint OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self, jint ch);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator)

IOSByteArray *OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DEFAULT_WORD_DELIM_TABLE;

@implementation OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator

+ (jint)DONE {
  return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DONE;
}

+ (IOSByteArray *)DEFAULT_WORD_DELIM_TABLE {
  return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DEFAULT_WORD_DELIM_TABLE;
}

- (instancetype)initWithByteArray:(IOSByteArray *)charTypeTable
                      withBoolean:(jboolean)splitOnCaseChange
                      withBoolean:(jboolean)splitOnNumerics
                      withBoolean:(jboolean)stemEnglishPossessive {
  OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_initWithByteArray_withBoolean_withBoolean_withBoolean_(self, charTypeTable, splitOnCaseChange, splitOnNumerics, stemEnglishPossessive);
  return self;
}

- (jint)next {
  current_ = end_;
  if (current_ == OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DONE) {
    return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DONE;
  }
  if (skipPossessive_) {
    current_ += 2;
    skipPossessive_ = false;
  }
  jint lastType = 0;
  while (current_ < endBounds_ && (OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isSubwordDelimWithInt_(lastType = OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(self, IOSCharArray_Get(nil_chk(text_), current_))))) {
    current_++;
  }
  if (current_ >= endBounds_) {
    return end_ = OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DONE;
  }
  for (end_ = current_ + 1; end_ < endBounds_; end_++) {
    jint type = OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(self, IOSCharArray_Get(nil_chk(text_), end_));
    if (OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_isBreakWithInt_withInt_(self, lastType, type)) {
      break;
    }
    lastType = type;
  }
  if (end_ < endBounds_ - 1 && OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_endsWithPossessiveWithInt_(self, end_ + 2)) {
    skipPossessive_ = true;
  }
  return end_;
}

- (jint)type {
  if (end_ == OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DONE) {
    return 0;
  }
  jint type = OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(self, IOSCharArray_Get(nil_chk(text_), current_));
  switch (type) {
    case OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_LOWER:
    case OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_UPPER:
    return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_ALPHA;
    default:
    return type;
  }
}

- (void)setTextWithCharArray:(IOSCharArray *)text
                     withInt:(jint)length {
  JreStrongAssign(&self->text_, text);
  self->length_ = self->endBounds_ = length;
  current_ = startBounds_ = end_ = 0;
  skipPossessive_ = hasFinalPossessive_ = false;
  OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_setBounds(self);
}

- (jboolean)isBreakWithInt:(jint)lastType
                   withInt:(jint)type {
  return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_isBreakWithInt_withInt_(self, lastType, type);
}

- (jboolean)isSingleWord {
  if (hasFinalPossessive_) {
    return current_ == startBounds_ && end_ == endBounds_ - 2;
  }
  else {
    return current_ == startBounds_ && end_ == endBounds_;
  }
}

- (void)setBounds {
  OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_setBounds(self);
}

- (jboolean)endsWithPossessiveWithInt:(jint)pos {
  return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_endsWithPossessiveWithInt_(self, pos);
}

- (jint)charTypeWithInt:(jint)ch {
  return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(self, ch);
}

+ (jbyte)getTypeWithInt:(jint)ch {
  return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_getTypeWithInt_(ch);
}

- (void)dealloc {
  RELEASE_(text_);
  RELEASE_(charTypeTable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 6, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 8, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withBoolean:withBoolean:withBoolean:);
  methods[1].selector = @selector(next);
  methods[2].selector = @selector(type);
  methods[3].selector = @selector(setTextWithCharArray:withInt:);
  methods[4].selector = @selector(isBreakWithInt:withInt:);
  methods[5].selector = @selector(isSingleWord);
  methods[6].selector = @selector(setBounds);
  methods[7].selector = @selector(endsWithPossessiveWithInt:);
  methods[8].selector = @selector(charTypeWithInt:);
  methods[9].selector = @selector(getTypeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DONE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DONE, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_WORD_DELIM_TABLE", "[B", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "text_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "startBounds_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "endBounds_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "current_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hasFinalPossessive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "splitOnCaseChange_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "splitOnNumerics_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "stemEnglishPossessive_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "charTypeTable_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "skipPossessive_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BZZZ", "setText", "[CI", "isBreak", "II", "endsWithPossessive", "I", "charType", "getType", &OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DEFAULT_WORD_DELIM_TABLE };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator = { "WordDelimiterIterator", "org.apache.lucene.analysis.miscellaneous", ptrTable, methods, fields, 7, 0x11, 10, 14, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator class]) {
    {
      IOSByteArray *tab = [IOSByteArray arrayWithLength:256];
      for (jint i = 0; i < 256; i++) {
        jbyte code = 0;
        if (JavaLangCharacter_isLowerCaseWithInt_(i)) {
          code |= OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_LOWER;
        }
        else if (JavaLangCharacter_isUpperCaseWithInt_(i)) {
          code |= OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_UPPER;
        }
        else if (JavaLangCharacter_isDigitWithInt_(i)) {
          code |= OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_DIGIT;
        }
        if (code == 0) {
          code = OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_SUBWORD_DELIM;
        }
        *IOSByteArray_GetRef(tab, i) = code;
      }
      JreStrongAssign(&OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DEFAULT_WORD_DELIM_TABLE, tab);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator)
  }
}

@end

void OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_initWithByteArray_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self, IOSByteArray *charTypeTable, jboolean splitOnCaseChange, jboolean splitOnNumerics, jboolean stemEnglishPossessive) {
  NSObject_init(self);
  self->hasFinalPossessive_ = false;
  self->skipPossessive_ = false;
  JreStrongAssign(&self->charTypeTable_, charTypeTable);
  self->splitOnCaseChange_ = splitOnCaseChange;
  self->splitOnNumerics_ = splitOnNumerics;
  self->stemEnglishPossessive_ = stemEnglishPossessive;
}

OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *new_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_initWithByteArray_withBoolean_withBoolean_withBoolean_(IOSByteArray *charTypeTable, jboolean splitOnCaseChange, jboolean splitOnNumerics, jboolean stemEnglishPossessive) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator, initWithByteArray_withBoolean_withBoolean_withBoolean_, charTypeTable, splitOnCaseChange, splitOnNumerics, stemEnglishPossessive)
}

OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *create_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_initWithByteArray_withBoolean_withBoolean_withBoolean_(IOSByteArray *charTypeTable, jboolean splitOnCaseChange, jboolean splitOnNumerics, jboolean stemEnglishPossessive) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator, initWithByteArray_withBoolean_withBoolean_withBoolean_, charTypeTable, splitOnCaseChange, splitOnNumerics, stemEnglishPossessive)
}

jboolean OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_isBreakWithInt_withInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self, jint lastType, jint type) {
  if ((type & lastType) != 0) {
    return false;
  }
  if (!self->splitOnCaseChange_ && OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isAlphaWithInt_(lastType) && OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isAlphaWithInt_(type)) {
    return false;
  }
  else if (OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isUpperWithInt_(lastType) && OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isAlphaWithInt_(type)) {
    return false;
  }
  else if (!self->splitOnNumerics_ && ((OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isAlphaWithInt_(lastType) && OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isDigitWithInt_(type)) || (OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isDigitWithInt_(lastType) && OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isAlphaWithInt_(type)))) {
    return false;
  }
  return true;
}

void OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_setBounds(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self) {
  while (self->startBounds_ < self->length_ && (OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isSubwordDelimWithInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(self, IOSCharArray_Get(nil_chk(self->text_), self->startBounds_))))) {
    self->startBounds_++;
  }
  while (self->endBounds_ > self->startBounds_ && (OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isSubwordDelimWithInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(self, IOSCharArray_Get(nil_chk(self->text_), self->endBounds_ - 1))))) {
    self->endBounds_--;
  }
  if (OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_endsWithPossessiveWithInt_(self, self->endBounds_)) {
    self->hasFinalPossessive_ = true;
  }
  self->current_ = self->startBounds_;
}

jboolean OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_endsWithPossessiveWithInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self, jint pos) {
  return (self->stemEnglishPossessive_ && pos > 2 && IOSCharArray_Get(nil_chk(self->text_), pos - 2) == '\'' && (IOSCharArray_Get(self->text_, pos - 1) == 's' || IOSCharArray_Get(self->text_, pos - 1) == 'S') && OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isAlphaWithInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(self, IOSCharArray_Get(self->text_, pos - 3))) && (pos == self->endBounds_ || OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_isSubwordDelimWithInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(self, IOSCharArray_Get(nil_chk(self->text_), pos)))));
}

jint OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_charTypeWithInt_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self, jint ch) {
  if (ch < ((IOSByteArray *) nil_chk(self->charTypeTable_))->size_) {
    return IOSByteArray_Get(self->charTypeTable_, ch);
  }
  return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_getTypeWithInt_(ch);
}

jbyte OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_getTypeWithInt_(jint ch) {
  OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_initialize();
  switch (JavaLangCharacter_getTypeWithInt_(ch)) {
    case JavaLangCharacter_UPPERCASE_LETTER:
    return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_UPPER;
    case JavaLangCharacter_LOWERCASE_LETTER:
    return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_LOWER;
    case JavaLangCharacter_TITLECASE_LETTER:
    case JavaLangCharacter_MODIFIER_LETTER:
    case JavaLangCharacter_OTHER_LETTER:
    case JavaLangCharacter_NON_SPACING_MARK:
    case JavaLangCharacter_ENCLOSING_MARK:
    case JavaLangCharacter_COMBINING_SPACING_MARK:
    return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_ALPHA;
    case JavaLangCharacter_DECIMAL_DIGIT_NUMBER:
    case JavaLangCharacter_LETTER_NUMBER:
    case JavaLangCharacter_OTHER_NUMBER:
    return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_DIGIT;
    case JavaLangCharacter_SURROGATE:
    return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_ALPHA | OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_DIGIT;
    default:
    return OrgApacheLuceneAnalysisMiscellaneousWordDelimiterFilter_SUBWORD_DELIM;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator)
