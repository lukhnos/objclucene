//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/KeywordAttribute.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/UnicodeUtil.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter () {
 @public
  OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *stemmerOverrideMap_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesKeywordAttribute> keywordAtt_;
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader_;
  OrgApacheLuceneUtilFstFST_Arc *scratchArc_;
  IOSCharArray *spare_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter, stemmerOverrideMap_, OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter, keywordAtt_, id<OrgApacheLuceneAnalysisTokenattributesKeywordAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter, fstReader_, OrgApacheLuceneUtilFstFST_BytesReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter, scratchArc_, OrgApacheLuceneUtilFstFST_Arc *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter, spare_, IOSCharArray *)

@interface OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap () {
 @public
  OrgApacheLuceneUtilFstFST *fst_;
  jboolean ignoreCase_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap, fst_, OrgApacheLuceneUtilFstFST *)

@interface OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder () {
 @public
  OrgApacheLuceneUtilBytesRefHash *hash__;
  OrgApacheLuceneUtilBytesRefBuilder *spare_;
  JavaUtilArrayList *outputValues_;
  jboolean ignoreCase_;
  OrgApacheLuceneUtilCharsRefBuilder *charsSpare_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder, hash__, OrgApacheLuceneUtilBytesRefHash *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder, spare_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder, outputValues_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder, charsSpare_, OrgApacheLuceneUtilCharsRefBuilder *)

@implementation OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
withOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap:(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *)stemmerOverrideMap {
  OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_(self, input, stemmerOverrideMap);
  return self;
}

- (jboolean)incrementToken {
  if ([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
    if (fstReader_ == nil) {
      return true;
    }
    if (![((id<OrgApacheLuceneAnalysisTokenattributesKeywordAttribute>) nil_chk(keywordAtt_)) isKeyword]) {
      OrgApacheLuceneUtilBytesRef *stem = [((OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *) nil_chk(stemmerOverrideMap_)) getWithCharArray:[((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) buffer] withInt:[termAtt_ java_length] withOrgApacheLuceneUtilFstFST_Arc:scratchArc_ withOrgApacheLuceneUtilFstFST_BytesReader:fstReader_];
      if (stem != nil) {
        JreStrongAssign(&spare_, OrgApacheLuceneUtilArrayUtil_growWithCharArray_withInt_([termAtt_ buffer], stem->length_));
        jint length = OrgApacheLuceneUtilUnicodeUtil_UTF8toUTF16WithOrgApacheLuceneUtilBytesRef_withCharArray_(stem, spare_);
        if (!JreObjectEqualsEquals(spare_, [termAtt_ buffer])) {
          [termAtt_ copyBufferWithCharArray:spare_ withInt:0 withInt:length];
        }
        else {
          [termAtt_ setLengthWithInt:length];
        }
        [keywordAtt_ setKeywordWithBoolean:true];
      }
    }
    return true;
  }
  else {
    return false;
  }
}

- (void)dealloc {
  RELEASE_(stemmerOverrideMap_);
  RELEASE_(termAtt_);
  RELEASE_(keywordAtt_);
  RELEASE_(fstReader_);
  RELEASE_(scratchArc_);
  RELEASE_(spare_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap:);
  methods[1].selector = @selector(incrementToken);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stemmerOverrideMap_", "LOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keywordAtt_", "LOrgApacheLuceneAnalysisTokenattributesKeywordAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fstReader_", "LOrgApacheLuceneUtilFstFST_BytesReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratchArc_", "LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x12, -1, -1, 2, -1 },
    { "spare_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;LOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap;", "LJavaIoIOException;", "Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/BytesRef;>;", "LOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap;LOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter = { "StemmerOverrideFilter", "org.apache.lucene.analysis.miscellaneous", ptrTable, methods, fields, 7, 0x11, 2, 6, -1, 3, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter;
}

@end

void OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter *self, OrgApacheLuceneAnalysisTokenStream *input, OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *stemmerOverrideMap) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->keywordAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesKeywordAttribute_class_()]);
  JreStrongAssignAndConsume(&self->scratchArc_, new_OrgApacheLuceneUtilFstFST_Arc_init());
  JreStrongAssignAndConsume(&self->spare_, [IOSCharArray newArrayWithLength:0]);
  JreStrongAssign(&self->stemmerOverrideMap_, stemmerOverrideMap);
  JreStrongAssign(&self->fstReader_, [((OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *) nil_chk(stemmerOverrideMap)) getBytesReader]);
}

OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter *new_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_(OrgApacheLuceneAnalysisTokenStream *input, OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *stemmerOverrideMap) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter, initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_, input, stemmerOverrideMap)
}

OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter *create_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_(OrgApacheLuceneAnalysisTokenStream *input, OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *stemmerOverrideMap) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter, initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_, input, stemmerOverrideMap)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter)

@implementation OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap

- (instancetype)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                      withBoolean:(jboolean)ignoreCase {
  OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_initWithOrgApacheLuceneUtilFstFST_withBoolean_(self, fst, ignoreCase);
  return self;
}

- (OrgApacheLuceneUtilFstFST_BytesReader *)getBytesReader {
  if (fst_ == nil) {
    return nil;
  }
  else {
    return [fst_ getBytesReader];
  }
}

- (OrgApacheLuceneUtilBytesRef *)getWithCharArray:(IOSCharArray *)buffer
                                          withInt:(jint)bufferLen
                withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)scratchArc
        withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)fstReader {
  OrgApacheLuceneUtilBytesRef *pendingOutput = JreRetainedLocalValue([((OrgApacheLuceneUtilFstOutputs *) nil_chk(((OrgApacheLuceneUtilFstFST *) nil_chk(fst_))->outputs_)) getNoOutput]);
  OrgApacheLuceneUtilBytesRef *matchOutput = nil;
  jint bufUpto = 0;
  [fst_ getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:scratchArc];
  while (bufUpto < bufferLen) {
    jint codePoint = JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(buffer, bufUpto, bufferLen);
    if ([fst_ findTargetArcWithInt:ignoreCase_ ? JavaLangCharacter_toLowerCaseWithInt_(codePoint) : codePoint withOrgApacheLuceneUtilFstFST_Arc:scratchArc withOrgApacheLuceneUtilFstFST_Arc:scratchArc withOrgApacheLuceneUtilFstFST_BytesReader:fstReader] == nil) {
      return nil;
    }
    pendingOutput = [fst_->outputs_ addWithId:pendingOutput withId:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(scratchArc))->output_];
    bufUpto += JavaLangCharacter_charCountWithInt_(codePoint);
  }
  if ([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(scratchArc)) isFinal]) {
    matchOutput = [fst_->outputs_ addWithId:pendingOutput withId:scratchArc->nextFinalOutput_];
  }
  return matchOutput;
}

- (void)dealloc {
  RELEASE_(fst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_BytesReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, 2, 3, 4, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilFstFST:withBoolean:);
  methods[1].selector = @selector(getBytesReader);
  methods[2].selector = @selector(getWithCharArray:withInt:withOrgApacheLuceneUtilFstFST_Arc:withOrgApacheLuceneUtilFstFST_BytesReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fst_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "ignoreCase_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilFstFST;Z", "(Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/BytesRef;>;Z)V", "get", "[CILOrgApacheLuceneUtilFstFST_Arc;LOrgApacheLuceneUtilFstFST_BytesReader;", "LJavaIoIOException;", "([CILorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/BytesRef;>;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/BytesRef;", "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/BytesRef;>;", "LOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap = { "StemmerOverrideMap", "org.apache.lucene.analysis.miscellaneous", ptrTable, methods, fields, 7, 0x19, 3, 2, 7, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap;
}

@end

void OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_initWithOrgApacheLuceneUtilFstFST_withBoolean_(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *self, OrgApacheLuceneUtilFstFST *fst, jboolean ignoreCase) {
  NSObject_init(self);
  JreStrongAssign(&self->fst_, fst);
  self->ignoreCase_ = ignoreCase;
}

OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *new_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_initWithOrgApacheLuceneUtilFstFST_withBoolean_(OrgApacheLuceneUtilFstFST *fst, jboolean ignoreCase) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap, initWithOrgApacheLuceneUtilFstFST_withBoolean_, fst, ignoreCase)
}

OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *create_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_initWithOrgApacheLuceneUtilFstFST_withBoolean_(OrgApacheLuceneUtilFstFST *fst, jboolean ignoreCase) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap, initWithOrgApacheLuceneUtilFstFST_withBoolean_, fst, ignoreCase)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap)

@implementation OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)ignoreCase {
  OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder_initWithBoolean_(self, ignoreCase);
  return self;
}

- (jboolean)addWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
               withJavaLangCharSequence:(id<JavaLangCharSequence>)output {
  jint length = [((id<JavaLangCharSequence>) nil_chk(input)) java_length];
  if (ignoreCase_) {
    [((OrgApacheLuceneUtilCharsRefBuilder *) nil_chk(charsSpare_)) growWithInt:length];
    IOSCharArray *buffer = [charsSpare_ chars];
    for (jint i = 0; i < length; ) {
      i += JavaLangCharacter_toCharsWithInt_withCharArray_withInt_(JavaLangCharacter_toLowerCaseWithInt_(JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(input, i)), buffer, i);
    }
    [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(spare_)) copyCharsWithCharArray:buffer withInt:0 withInt:length];
  }
  else {
    [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(spare_)) copyCharsWithJavaLangCharSequence:input withInt:0 withInt:length];
  }
  if ([((OrgApacheLuceneUtilBytesRefHash *) nil_chk(hash__)) addWithOrgApacheLuceneUtilBytesRef:[spare_ get]] >= 0) {
    [((JavaUtilArrayList *) nil_chk(outputValues_)) addWithId:output];
    return true;
  }
  return false;
}

- (OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap *)build {
  OrgApacheLuceneUtilFstByteSequenceOutputs *outputs = OrgApacheLuceneUtilFstByteSequenceOutputs_getSingleton();
  OrgApacheLuceneUtilFstBuilder *builder = create_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE4), outputs);
  IOSIntArray *sort = [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(hash__)) sortWithJavaUtilComparator:OrgApacheLuceneUtilBytesRef_getUTF8SortedAsUnicodeComparator()];
  OrgApacheLuceneUtilIntsRefBuilder *intsSpare = create_OrgApacheLuceneUtilIntsRefBuilder_init();
  jint size = [hash__ size];
  OrgApacheLuceneUtilBytesRef *spare = create_OrgApacheLuceneUtilBytesRef_init();
  for (jint i = 0; i < size; i++) {
    jint id_ = IOSIntArray_Get(nil_chk(sort), i);
    OrgApacheLuceneUtilBytesRef *bytesRef = JreRetainedLocalValue([hash__ getWithInt:id_ withOrgApacheLuceneUtilBytesRef:spare]);
    [intsSpare copyUTF8BytesWithOrgApacheLuceneUtilBytesRef:bytesRef];
    [builder addWithOrgApacheLuceneUtilIntsRef:[intsSpare get] withId:create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_([((JavaUtilArrayList *) nil_chk(outputValues_)) getWithInt:id_])];
  }
  return create_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap_initWithOrgApacheLuceneUtilFstFST_withBoolean_([builder finish], ignoreCase_);
}

- (void)dealloc {
  RELEASE_(hash__);
  RELEASE_(spare_);
  RELEASE_(outputValues_);
  RELEASE_(charsSpare_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_StemmerOverrideMap;", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(addWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[3].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hash__", "LOrgApacheLuceneUtilBytesRefHash;", .constantValue.asLong = 0, 0x12, 4, -1, -1, -1 },
    { "spare_", "LOrgApacheLuceneUtilBytesRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "outputValues_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "ignoreCase_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "charsSpare_", "LOrgApacheLuceneUtilCharsRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "add", "LJavaLangCharSequence;LJavaLangCharSequence;", "LJavaIoIOException;", "hash", "Ljava/util/ArrayList<Ljava/lang/CharSequence;>;", "LOrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder = { "Builder", "org.apache.lucene.analysis.miscellaneous", ptrTable, methods, fields, 7, 0x9, 4, 5, 6, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder;
}

@end

void OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder_init(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder *self) {
  OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder_initWithBoolean_(self, false);
}

OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder *new_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder, init)
}

OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder *create_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder, init)
}

void OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder_initWithBoolean_(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder *self, jboolean ignoreCase) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->hash__, new_OrgApacheLuceneUtilBytesRefHash_init());
  JreStrongAssignAndConsume(&self->spare_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->outputValues_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->charsSpare_, new_OrgApacheLuceneUtilCharsRefBuilder_init());
  self->ignoreCase_ = ignoreCase;
}

OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder *new_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder_initWithBoolean_(jboolean ignoreCase) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder, initWithBoolean_, ignoreCase)
}

OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder *create_OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder_initWithBoolean_(jboolean ignoreCase) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder, initWithBoolean_, ignoreCase)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisMiscellaneousStemmerOverrideFilter_Builder)
