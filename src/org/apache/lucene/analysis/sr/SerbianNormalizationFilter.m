//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/sr/SerbianNormalizationFilter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/sr/SerbianNormalizationFilter.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/sr/SerbianNormalizationFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisSrSerbianNormalizationFilter () {
 @public
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisSrSerbianNormalizationFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)

@implementation OrgApacheLuceneAnalysisSrSerbianNormalizationFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input {
  OrgApacheLuceneAnalysisSrSerbianNormalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  return self;
}

- (jboolean)incrementToken {
  if ([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
    IOSCharArray *buffer = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) buffer];
    jint length = [termAtt_ java_length];
    for (jint i = 0; i < length; i++) {
      jchar c = IOSCharArray_Get(nil_chk(buffer), i);
      switch (c) {
        case 0x0430:
        *IOSCharArray_GetRef(buffer, i) = 'a';
        break;
        case 0x0431:
        *IOSCharArray_GetRef(buffer, i) = 'b';
        break;
        case 0x0432:
        *IOSCharArray_GetRef(buffer, i) = 'v';
        break;
        case 0x0433:
        *IOSCharArray_GetRef(buffer, i) = 'g';
        break;
        case 0x0434:
        *IOSCharArray_GetRef(buffer, i) = 'd';
        break;
        case 0x0452:
        case 0x0111:
        buffer = [termAtt_ resizeBufferWithInt:1 + length];
        if (i < length) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, i, buffer, i + 1, (length - i));
        }
        *IOSCharArray_GetRef(nil_chk(buffer), i) = 'd';
        *IOSCharArray_GetRef(buffer, ++i) = 'j';
        length++;
        break;
        case 0x0435:
        *IOSCharArray_GetRef(buffer, i) = 'e';
        break;
        case 0x0436:
        case 0x0437:
        case 0x017e:
        *IOSCharArray_GetRef(buffer, i) = 'z';
        break;
        case 0x0438:
        *IOSCharArray_GetRef(buffer, i) = 'i';
        break;
        case 0x0458:
        *IOSCharArray_GetRef(buffer, i) = 'j';
        break;
        case 0x043a:
        *IOSCharArray_GetRef(buffer, i) = 'k';
        break;
        case 0x043b:
        *IOSCharArray_GetRef(buffer, i) = 'l';
        break;
        case 0x0459:
        buffer = [termAtt_ resizeBufferWithInt:1 + length];
        if (i < length) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, i, buffer, i + 1, (length - i));
        }
        *IOSCharArray_GetRef(nil_chk(buffer), i) = 'l';
        *IOSCharArray_GetRef(buffer, ++i) = 'j';
        length++;
        break;
        case 0x043c:
        *IOSCharArray_GetRef(buffer, i) = 'm';
        break;
        case 0x043d:
        *IOSCharArray_GetRef(buffer, i) = 'n';
        break;
        case 0x045a:
        buffer = [termAtt_ resizeBufferWithInt:1 + length];
        if (i < length) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, i, buffer, i + 1, (length - i));
        }
        *IOSCharArray_GetRef(nil_chk(buffer), i) = 'n';
        *IOSCharArray_GetRef(buffer, ++i) = 'j';
        length++;
        break;
        case 0x043e:
        *IOSCharArray_GetRef(buffer, i) = 'o';
        break;
        case 0x043f:
        *IOSCharArray_GetRef(buffer, i) = 'p';
        break;
        case 0x0440:
        *IOSCharArray_GetRef(buffer, i) = 'r';
        break;
        case 0x0441:
        *IOSCharArray_GetRef(buffer, i) = 's';
        break;
        case 0x0442:
        *IOSCharArray_GetRef(buffer, i) = 't';
        break;
        case 0x045b:
        case 0x0446:
        case 0x0447:
        case 0x010d:
        case 0x0107:
        *IOSCharArray_GetRef(buffer, i) = 'c';
        break;
        case 0x0443:
        *IOSCharArray_GetRef(buffer, i) = 'u';
        break;
        case 0x0444:
        *IOSCharArray_GetRef(buffer, i) = 'f';
        break;
        case 0x0445:
        *IOSCharArray_GetRef(buffer, i) = 'h';
        break;
        case 0x045f:
        buffer = [termAtt_ resizeBufferWithInt:1 + length];
        if (i < length) {
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(buffer, i, buffer, i + 1, (length - i));
        }
        *IOSCharArray_GetRef(nil_chk(buffer), i) = 'd';
        *IOSCharArray_GetRef(buffer, ++i) = 'z';
        length++;
        break;
        case 0x0448:
        case 0x0161:
        *IOSCharArray_GetRef(buffer, i) = 's';
        break;
        default:
        break;
      }
    }
    [termAtt_ setLengthWithInt:length];
    return true;
  }
  else {
    return false;
  }
}

- (void)dealloc {
  RELEASE_(termAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:);
  methods[1].selector = @selector(incrementToken);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisSrSerbianNormalizationFilter = { "SerbianNormalizationFilter", "org.apache.lucene.analysis.sr", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisSrSerbianNormalizationFilter;
}

@end

void OrgApacheLuceneAnalysisSrSerbianNormalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisSrSerbianNormalizationFilter *self, OrgApacheLuceneAnalysisTokenStream *input) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
}

OrgApacheLuceneAnalysisSrSerbianNormalizationFilter *new_OrgApacheLuceneAnalysisSrSerbianNormalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisSrSerbianNormalizationFilter, initWithOrgApacheLuceneAnalysisTokenStream_, input)
}

OrgApacheLuceneAnalysisSrSerbianNormalizationFilter *create_OrgApacheLuceneAnalysisSrSerbianNormalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisSrSerbianNormalizationFilter, initWithOrgApacheLuceneAnalysisTokenStream_, input)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisSrSerbianNormalizationFilter)
