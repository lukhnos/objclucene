//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/lang/Character.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/charfilter/BaseCharFilter.h"
#include "org/apache/lucene/analysis/charfilter/MappingCharFilter.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "org/apache/lucene/analysis/util/RollingCharBuffer.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/util/fst/CharSequenceOutputs.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/charfilter/MappingCharFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCharfilterMappingCharFilter () {
 @public
  OrgApacheLuceneUtilFstOutputs *outputs_;
  OrgApacheLuceneUtilFstFST *map_;
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader_;
  OrgApacheLuceneAnalysisUtilRollingCharBuffer *buffer_;
  OrgApacheLuceneUtilFstFST_Arc *scratchArc_;
  id<JavaUtilMap> cachedRootArcs_;
  OrgApacheLuceneUtilCharsRef *replacement_;
  jint replacementPointer_;
  jint inputOff_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCharfilterMappingCharFilter, outputs_, OrgApacheLuceneUtilFstOutputs *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCharfilterMappingCharFilter, map_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCharfilterMappingCharFilter, fstReader_, OrgApacheLuceneUtilFstFST_BytesReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCharfilterMappingCharFilter, buffer_, OrgApacheLuceneAnalysisUtilRollingCharBuffer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCharfilterMappingCharFilter, scratchArc_, OrgApacheLuceneUtilFstFST_Arc *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCharfilterMappingCharFilter, cachedRootArcs_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCharfilterMappingCharFilter, replacement_, OrgApacheLuceneUtilCharsRef *)

@implementation OrgApacheLuceneAnalysisCharfilterMappingCharFilter

- (instancetype)initWithOrgApacheLuceneAnalysisCharfilterNormalizeCharMap:(OrgApacheLuceneAnalysisCharfilterNormalizeCharMap *)normMap
                                                         withJavaIoReader:(JavaIoReader *)inArg {
  OrgApacheLuceneAnalysisCharfilterMappingCharFilter_initWithOrgApacheLuceneAnalysisCharfilterNormalizeCharMap_withJavaIoReader_(self, normMap, inArg);
  return self;
}

- (void)reset {
  [((JavaIoReader *) nil_chk(input_)) reset];
  [((OrgApacheLuceneAnalysisUtilRollingCharBuffer *) nil_chk(buffer_)) resetWithJavaIoReader:input_];
  JreStrongAssign(&replacement_, nil);
  inputOff_ = 0;
}

- (jint)read {
  while (true) {
    if (replacement_ != nil && replacementPointer_ < replacement_->length_) {
      return IOSCharArray_Get(nil_chk(replacement_->chars_), replacement_->offset_ + replacementPointer_++);
    }
    jint lastMatchLen = -1;
    OrgApacheLuceneUtilCharsRef *lastMatch = nil;
    jint firstCH = [((OrgApacheLuceneAnalysisUtilRollingCharBuffer *) nil_chk(buffer_)) getWithInt:inputOff_];
    if (firstCH != -1) {
      OrgApacheLuceneUtilFstFST_Arc *arc = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(cachedRootArcs_)) getWithId:JavaLangCharacter_valueOfWithChar_((jchar) firstCH)]);
      if (arc != nil) {
        if (!OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(arc)) {
          JreAssert([arc isFinal], @"org/apache/lucene/analysis/charfilter/MappingCharFilter.java:108 condition failed: assert arc.isFinal();");
          lastMatchLen = 1;
          lastMatch = arc->output_;
        }
        else {
          jint lookahead = 0;
          OrgApacheLuceneUtilCharsRef *output = JreRetainedLocalValue(arc->output_);
          while (true) {
            lookahead++;
            if ([arc isFinal]) {
              lastMatchLen = lookahead;
              lastMatch = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) addWithId:output withId:arc->nextFinalOutput_];
            }
            if (!OrgApacheLuceneUtilFstFST_targetHasArcsWithOrgApacheLuceneUtilFstFST_Arc_(arc)) {
              break;
            }
            jint ch = [buffer_ getWithInt:inputOff_ + lookahead];
            if (ch == -1) {
              break;
            }
            if ((arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(map_)) findTargetArcWithInt:ch withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:scratchArc_ withOrgApacheLuceneUtilFstFST_BytesReader:fstReader_]) == nil) {
              break;
            }
            output = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(outputs_)) addWithId:output withId:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_];
          }
        }
      }
    }
    if (lastMatch != nil) {
      inputOff_ += lastMatchLen;
      jint diff = lastMatchLen - lastMatch->length_;
      if (diff != 0) {
        jint prevCumulativeDiff = [self getLastCumulativeDiff];
        if (diff > 0) {
          [self addOffCorrectMapWithInt:inputOff_ - diff - prevCumulativeDiff withInt:prevCumulativeDiff + diff];
        }
        else {
          jint outputStart = inputOff_ - prevCumulativeDiff;
          for (jint extraIDX = 0; extraIDX < -diff; extraIDX++) {
            [self addOffCorrectMapWithInt:outputStart + extraIDX withInt:prevCumulativeDiff - extraIDX - 1];
          }
        }
      }
      JreStrongAssign(&replacement_, lastMatch);
      replacementPointer_ = 0;
    }
    else {
      jint ret = [buffer_ getWithInt:inputOff_];
      if (ret != -1) {
        inputOff_++;
        [buffer_ freeBeforeWithInt:inputOff_];
      }
      return ret;
    }
  }
}

- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)off
                  withInt:(jint)len {
  jint numRead = 0;
  for (jint i = off; i < off + len; i++) {
    jint c = [self read];
    if (c == -1) break;
    *IOSCharArray_GetRef(nil_chk(cbuf), i) = (jchar) c;
    numRead++;
  }
  return numRead == 0 ? -1 : numRead;
}

- (void)dealloc {
  RELEASE_(outputs_);
  RELEASE_(map_);
  RELEASE_(fstReader_);
  RELEASE_(buffer_);
  RELEASE_(scratchArc_);
  RELEASE_(cachedRootArcs_);
  RELEASE_(replacement_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisCharfilterNormalizeCharMap:withJavaIoReader:);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(read);
  methods[3].selector = @selector(readWithCharArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "outputs_", "LOrgApacheLuceneUtilFstOutputs;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "map_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "fstReader_", "LOrgApacheLuceneUtilFstFST_BytesReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buffer_", "LOrgApacheLuceneAnalysisUtilRollingCharBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratchArc_", "LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "cachedRootArcs_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "replacement_", "LOrgApacheLuceneUtilCharsRef;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "replacementPointer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inputOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisCharfilterNormalizeCharMap;LJavaIoReader;", "LJavaIoIOException;", "read", "[CII", "Lorg/apache/lucene/util/fst/Outputs<Lorg/apache/lucene/util/CharsRef;>;", "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/CharsRef;>;", "Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/CharsRef;>;", "Ljava/util/Map<Ljava/lang/Character;Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/CharsRef;>;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCharfilterMappingCharFilter = { "MappingCharFilter", "org.apache.lucene.analysis.charfilter", ptrTable, methods, fields, 7, 0x1, 4, 9, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCharfilterMappingCharFilter;
}

@end

void OrgApacheLuceneAnalysisCharfilterMappingCharFilter_initWithOrgApacheLuceneAnalysisCharfilterNormalizeCharMap_withJavaIoReader_(OrgApacheLuceneAnalysisCharfilterMappingCharFilter *self, OrgApacheLuceneAnalysisCharfilterNormalizeCharMap *normMap, JavaIoReader *inArg) {
  OrgApacheLuceneAnalysisCharfilterBaseCharFilter_initWithJavaIoReader_(self, inArg);
  JreStrongAssign(&self->outputs_, OrgApacheLuceneUtilFstCharSequenceOutputs_getSingleton());
  JreStrongAssignAndConsume(&self->buffer_, new_OrgApacheLuceneAnalysisUtilRollingCharBuffer_init());
  JreStrongAssignAndConsume(&self->scratchArc_, new_OrgApacheLuceneUtilFstFST_Arc_init());
  [self->buffer_ resetWithJavaIoReader:inArg];
  JreStrongAssign(&self->map_, ((OrgApacheLuceneAnalysisCharfilterNormalizeCharMap *) nil_chk(normMap))->map_);
  JreStrongAssign(&self->cachedRootArcs_, normMap->cachedRootArcs_);
  if (self->map_ != nil) {
    JreStrongAssign(&self->fstReader_, [self->map_ getBytesReader]);
  }
  else {
    JreStrongAssign(&self->fstReader_, nil);
  }
}

OrgApacheLuceneAnalysisCharfilterMappingCharFilter *new_OrgApacheLuceneAnalysisCharfilterMappingCharFilter_initWithOrgApacheLuceneAnalysisCharfilterNormalizeCharMap_withJavaIoReader_(OrgApacheLuceneAnalysisCharfilterNormalizeCharMap *normMap, JavaIoReader *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCharfilterMappingCharFilter, initWithOrgApacheLuceneAnalysisCharfilterNormalizeCharMap_withJavaIoReader_, normMap, inArg)
}

OrgApacheLuceneAnalysisCharfilterMappingCharFilter *create_OrgApacheLuceneAnalysisCharfilterMappingCharFilter_initWithOrgApacheLuceneAnalysisCharfilterNormalizeCharMap_withJavaIoReader_(OrgApacheLuceneAnalysisCharfilterNormalizeCharMap *normMap, JavaIoReader *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCharfilterMappingCharFilter, initWithOrgApacheLuceneAnalysisCharfilterNormalizeCharMap_withJavaIoReader_, normMap, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCharfilterMappingCharFilter)
