//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/core/Lucene43TypeTokenFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/core/Lucene43TypeTokenFilter.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/analysis/util/Lucene43FilteringTokenFilter.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/core/Lucene43TypeTokenFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter () {
 @public
  id<JavaUtilSet> stopTypes_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAttribute_;
  jboolean useWhiteList_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter, stopTypes_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter, typeAttribute_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter__Annotations$0(void);

@implementation OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter

- (instancetype)initWithBoolean:(jboolean)enablePositionIncrements
withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                withJavaUtilSet:(id<JavaUtilSet>)stopTypes
                    withBoolean:(jboolean)useWhiteList {
  OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(self, enablePositionIncrements, input, stopTypes, useWhiteList);
  return self;
}

- (jboolean)accept {
  return useWhiteList_ == [((id<JavaUtilSet>) nil_chk(stopTypes_)) containsWithId:[((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAttribute_)) type]];
}

- (void)dealloc {
  RELEASE_(stopTypes_);
  RELEASE_(typeAttribute_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withOrgApacheLuceneAnalysisTokenStream:withJavaUtilSet:withBoolean:);
  methods[1].selector = @selector(accept);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stopTypes_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
    { "typeAttribute_", "LOrgApacheLuceneAnalysisTokenattributesTypeAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "useWhiteList_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLOrgApacheLuceneAnalysisTokenStream;LJavaUtilSet;Z", "(ZLorg/apache/lucene/analysis/TokenStream;Ljava/util/Set<Ljava/lang/String;>;Z)V", "LJavaIoIOException;", "Ljava/util/Set<Ljava/lang/String;>;", (void *)&OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter__Annotations$0 };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter = { "Lucene43TypeTokenFilter", "org.apache.lucene.analysis.core", ptrTable, methods, fields, 7, 0x11, 2, 3, -1, -1, -1, -1, 4 };
  return &_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter;
}

@end

void OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter *self, jboolean enablePositionIncrements, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList) {
  OrgApacheLuceneAnalysisUtilLucene43FilteringTokenFilter_initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_(self, enablePositionIncrements, input);
  JreStrongAssign(&self->typeAttribute_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  JreStrongAssign(&self->stopTypes_, stopTypes);
  self->useWhiteList_ = useWhiteList;
}

OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter *new_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(jboolean enablePositionIncrements, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter, initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_, enablePositionIncrements, input, stopTypes, useWhiteList)
}

OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter *create_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(jboolean enablePositionIncrements, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter, initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_, enablePositionIncrements, input, stopTypes, useWhiteList)
}

IOSObjectArray *OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter)
