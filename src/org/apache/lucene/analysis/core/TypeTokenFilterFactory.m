//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilterFactory.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/core/Lucene43TypeTokenFilter.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilter.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"
#include "org/apache/lucene/util/Version.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/core/TypeTokenFilterFactory must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory () {
 @public
  jboolean useWhitelist_;
  NSString *stopTypesFiles_;
  id<JavaUtilSet> stopTypes_;
  jboolean enablePositionIncrements_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory, stopTypesFiles_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory, stopTypes_, id<JavaUtilSet>)

@implementation OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)args {
  OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory_initWithJavaUtilMap_(self, args);
  return self;
}

- (void)informWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader {
  id<JavaUtilList> files = JreRetainedLocalValue([self splitFileNamesWithNSString:stopTypesFiles_]);
  if ([((id<JavaUtilList>) nil_chk(files)) size] > 0) {
    JreStrongAssignAndConsume(&stopTypes_, new_JavaUtilHashSet_init());
    for (NSString * __strong file in files) {
      id<JavaUtilList> typesLines = JreRetainedLocalValue([self getLinesWithOrgApacheLuceneAnalysisUtilResourceLoader:loader withNSString:[((NSString *) nil_chk(file)) java_trim]]);
      [((id<JavaUtilSet>) nil_chk(stopTypes_)) addAllWithJavaUtilCollection:typesLines];
    }
  }
}

- (id<JavaUtilSet>)getStopTypes {
  return stopTypes_;
}

- (OrgApacheLuceneAnalysisTokenStream *)createWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input {
  if ([((OrgApacheLuceneUtilVersion *) nil_chk(luceneMatchVersion_)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadStatic(OrgApacheLuceneUtilVersion, LUCENE_4_4_0)]) {
    return create_OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(input, stopTypes_, useWhitelist_);
  }
  else {
    OrgApacheLuceneAnalysisTokenStream *filter = create_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(enablePositionIncrements_, input, stopTypes_, useWhitelist_);
    return filter;
  }
}

- (void)dealloc {
  RELEASE_(stopTypesFiles_);
  RELEASE_(stopTypes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisTokenStream;", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilMap:);
  methods[1].selector = @selector(informWithOrgApacheLuceneAnalysisUtilResourceLoader:);
  methods[2].selector = @selector(getStopTypes);
  methods[3].selector = @selector(createWithOrgApacheLuceneAnalysisTokenStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "useWhitelist_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stopTypesFiles_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "stopTypes_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "enablePositionIncrements_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "inform", "LOrgApacheLuceneAnalysisUtilResourceLoader;", "LJavaIoIOException;", "()Ljava/util/Set<Ljava/lang/String;>;", "create", "LOrgApacheLuceneAnalysisTokenStream;", "Ljava/util/Set<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory = { "TypeTokenFilterFactory", "org.apache.lucene.analysis.core", ptrTable, methods, fields, 7, 0x1, 4, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory;
}

@end

void OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory *self, id<JavaUtilMap> args) {
  OrgApacheLuceneAnalysisUtilTokenFilterFactory_initWithJavaUtilMap_(self, args);
  JreStrongAssign(&self->stopTypesFiles_, [self requireWithJavaUtilMap:args withNSString:@"types"]);
  self->useWhitelist_ = [self getBooleanWithJavaUtilMap:args withNSString:@"useWhitelist" withBoolean:false];
  if ([((OrgApacheLuceneUtilVersion *) nil_chk(self->luceneMatchVersion_)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadStatic(OrgApacheLuceneUtilVersion, LUCENE_5_0_0)] == false) {
    jboolean defaultValue = [self->luceneMatchVersion_ onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadStatic(OrgApacheLuceneUtilVersion, LUCENE_4_4_0)];
    self->enablePositionIncrements_ = [self getBooleanWithJavaUtilMap:args withNSString:@"enablePositionIncrements" withBoolean:defaultValue];
    if (self->enablePositionIncrements_ == false && [self->luceneMatchVersion_ onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadStatic(OrgApacheLuceneUtilVersion, LUCENE_4_4_0)]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"enablePositionIncrements=false is not supported anymore as of Lucene 4.4");
    }
  }
  else if ([((id<JavaUtilMap>) nil_chk(args)) containsKeyWithId:@"enablePositionIncrements"]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"enablePositionIncrements is not a valid option as of Lucene 5.0");
  }
  if (![((id<JavaUtilMap>) nil_chk(args)) isEmpty]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown parameters: ", args));
  }
}

OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory *new_OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory_initWithJavaUtilMap_(id<JavaUtilMap> args) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory, initWithJavaUtilMap_, args)
}

OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory *create_OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory_initWithJavaUtilMap_(id<JavaUtilMap> args) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory, initWithJavaUtilMap_, args)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCoreTypeTokenFilterFactory)
