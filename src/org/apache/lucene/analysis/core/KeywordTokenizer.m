//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/core/KeywordTokenizer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "org/apache/lucene/analysis/core/KeywordTokenizer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/util/AttributeFactory.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/core/KeywordTokenizer must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCoreKeywordTokenizer () {
 @public
  jboolean done_;
  jint finalOffset_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCoreKeywordTokenizer, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCoreKeywordTokenizer, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)

@implementation OrgApacheLuceneAnalysisCoreKeywordTokenizer

+ (jint)DEFAULT_BUFFER_SIZE {
  return OrgApacheLuceneAnalysisCoreKeywordTokenizer_DEFAULT_BUFFER_SIZE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)bufferSize {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(self, bufferSize);
  return self;
}

- (instancetype)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                                    withInt:(jint)bufferSize {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(self, factory, bufferSize);
  return self;
}

- (jboolean)incrementToken {
  if (!done_) {
    [self clearAttributes];
    done_ = true;
    jint upto = 0;
    IOSCharArray *buffer = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) buffer];
    while (true) {
      jint length = [((JavaIoReader *) nil_chk(input_)) readWithCharArray:buffer withInt:upto withInt:((IOSCharArray *) nil_chk(buffer))->size_ - upto];
      if (length == -1) break;
      upto += length;
      if (upto == buffer->size_) buffer = [termAtt_ resizeBufferWithInt:1 + buffer->size_];
    }
    [termAtt_ setLengthWithInt:upto];
    finalOffset_ = [self correctOffsetWithInt:upto];
    [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:[self correctOffsetWithInt:0] withInt:finalOffset_];
    return true;
  }
  return false;
}

- (void)end {
  [super end];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) setOffsetWithInt:finalOffset_ withInt:finalOffset_];
}

- (void)reset {
  [super reset];
  self->done_ = false;
}

- (void)dealloc {
  RELEASE_(termAtt_);
  RELEASE_(offsetAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithOrgApacheLuceneUtilAttributeFactory:withInt:);
  methods[3].selector = @selector(incrementToken);
  methods[4].selector = @selector(end);
  methods[5].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BUFFER_SIZE", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCoreKeywordTokenizer_DEFAULT_BUFFER_SIZE, 0x19, -1, -1, -1, -1 },
    { "done_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "finalOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "offsetAtt_", "LOrgApacheLuceneAnalysisTokenattributesOffsetAttribute;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "LOrgApacheLuceneUtilAttributeFactory;I", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCoreKeywordTokenizer = { "KeywordTokenizer", "org.apache.lucene.analysis.core", ptrTable, methods, fields, 7, 0x11, 6, 5, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCoreKeywordTokenizer;
}

@end

void OrgApacheLuceneAnalysisCoreKeywordTokenizer_init(OrgApacheLuceneAnalysisCoreKeywordTokenizer *self) {
  OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(self, OrgApacheLuceneAnalysisCoreKeywordTokenizer_DEFAULT_BUFFER_SIZE);
}

OrgApacheLuceneAnalysisCoreKeywordTokenizer *new_OrgApacheLuceneAnalysisCoreKeywordTokenizer_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCoreKeywordTokenizer, init)
}

OrgApacheLuceneAnalysisCoreKeywordTokenizer *create_OrgApacheLuceneAnalysisCoreKeywordTokenizer_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCoreKeywordTokenizer, init)
}

void OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(OrgApacheLuceneAnalysisCoreKeywordTokenizer *self, jint bufferSize) {
  OrgApacheLuceneAnalysisTokenizer_init(self);
  self->done_ = false;
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  if (bufferSize <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"bufferSize must be > 0");
  }
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) resizeBufferWithInt:bufferSize];
}

OrgApacheLuceneAnalysisCoreKeywordTokenizer *new_OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(jint bufferSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCoreKeywordTokenizer, initWithInt_, bufferSize)
}

OrgApacheLuceneAnalysisCoreKeywordTokenizer *create_OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithInt_(jint bufferSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCoreKeywordTokenizer, initWithInt_, bufferSize)
}

void OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(OrgApacheLuceneAnalysisCoreKeywordTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory, jint bufferSize) {
  OrgApacheLuceneAnalysisTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(self, factory);
  self->done_ = false;
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  if (bufferSize <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"bufferSize must be > 0");
  }
  [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) resizeBufferWithInt:bufferSize];
}

OrgApacheLuceneAnalysisCoreKeywordTokenizer *new_OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint bufferSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCoreKeywordTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_withInt_, factory, bufferSize)
}

OrgApacheLuceneAnalysisCoreKeywordTokenizer *create_OrgApacheLuceneAnalysisCoreKeywordTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint bufferSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCoreKeywordTokenizer, initWithOrgApacheLuceneUtilAttributeFactory_withInt_, factory, bufferSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCoreKeywordTokenizer)
