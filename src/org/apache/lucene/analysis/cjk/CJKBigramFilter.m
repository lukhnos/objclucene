//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilter.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizer.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/AttributeSource.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/cjk/CJKBigramFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisCjkCJKBigramFilter () {
 @public
  id doHan_;
  id doHiragana_;
  id doKatakana_;
  id doHangul_;
  jboolean outputUnigrams_;
  jboolean ngramState_;
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute> offsetAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute> posIncAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute> posLengthAtt_;
  jboolean exhausted_;
  OrgApacheLuceneUtilAttributeSource_State *loneState_;
}

/*!
 @brief looks at next input token, returning false is none is available
 */
- (jboolean)doNext;

/*!
 @brief refills buffers with new data from the current token.
 */
- (void)refill;

/*!
 @brief Flushes a bigram token to output from our buffer 
  This is the normal case, e.g.ABC -&gt; AB BC
 */
- (void)flushBigram;

/*!
 @brief Flushes a unigram token to output from our buffer.
 This happens when we encounter isolated CJK characters, either the whole
  CJK string is a single character, or we encounter a CJK character surrounded 
  by space, punctuation, english, etc, but not beside any other CJK.
 */
- (void)flushUnigram;

/*!
 @brief True if we have multiple codepoints sitting in our buffer
 */
- (jboolean)hasBufferedBigram;

/*!
 @brief True if we have a single codepoint sitting in our buffer, where its future
  (whether it is emitted as unigram or forms a bigram) depends upon not-yet-seen
  inputs.
 */
- (jboolean)hasBufferedUnigram;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, doHan_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, doHiragana_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, doKatakana_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, doHangul_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, typeAtt_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, offsetAtt_, id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, posIncAtt_, id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, posLengthAtt_, id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCjkCJKBigramFilter, loneState_, OrgApacheLuceneUtilAttributeSource_State *)

inline NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_get_HAN_TYPE(void);
static NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_HAN_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, HAN_TYPE, NSString *)

inline NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_get_HIRAGANA_TYPE(void);
static NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_HIRAGANA_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, HIRAGANA_TYPE, NSString *)

inline NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_get_KATAKANA_TYPE(void);
static NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_KATAKANA_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, KATAKANA_TYPE, NSString *)

inline NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_get_HANGUL_TYPE(void);
static NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_HANGUL_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, HANGUL_TYPE, NSString *)

inline id OrgApacheLuceneAnalysisCjkCJKBigramFilter_get_NO(void);
static id OrgApacheLuceneAnalysisCjkCJKBigramFilter_NO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, NO, id)

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisCjkCJKBigramFilter_doNext(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self);

__attribute__((unused)) static void OrgApacheLuceneAnalysisCjkCJKBigramFilter_refill(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self);

__attribute__((unused)) static void OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushBigram(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self);

__attribute__((unused)) static void OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushUnigram(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedBigram(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedUnigram(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneAnalysisCjkCJKBigramFilter)

NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_DOUBLE_TYPE = @"<DOUBLE>";
NSString *OrgApacheLuceneAnalysisCjkCJKBigramFilter_SINGLE_TYPE = @"<SINGLE>";

@implementation OrgApacheLuceneAnalysisCjkCJKBigramFilter

+ (jint)HAN {
  return OrgApacheLuceneAnalysisCjkCJKBigramFilter_HAN;
}

+ (jint)HIRAGANA {
  return OrgApacheLuceneAnalysisCjkCJKBigramFilter_HIRAGANA;
}

+ (jint)KATAKANA {
  return OrgApacheLuceneAnalysisCjkCJKBigramFilter_KATAKANA;
}

+ (jint)HANGUL {
  return OrgApacheLuceneAnalysisCjkCJKBigramFilter_HANGUL;
}

+ (NSString *)DOUBLE_TYPE {
  return OrgApacheLuceneAnalysisCjkCJKBigramFilter_DOUBLE_TYPE;
}

+ (NSString *)SINGLE_TYPE {
  return OrgApacheLuceneAnalysisCjkCJKBigramFilter_SINGLE_TYPE;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg {
  OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                                   withInt:(jint)flags {
  OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(self, inArg, flags);
  return self;
}

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                                   withInt:(jint)flags
                                               withBoolean:(jboolean)outputUnigrams {
  OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(self, inArg, flags, outputUnigrams);
  return self;
}

- (jboolean)incrementToken {
  while (true) {
    if (OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedBigram(self)) {
      if (outputUnigrams_) {
        if (ngramState_) {
          OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushBigram(self);
        }
        else {
          OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushUnigram(self);
          index_--;
        }
        ngramState_ = !ngramState_;
      }
      else {
        OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushBigram(self);
      }
      return true;
    }
    else if (OrgApacheLuceneAnalysisCjkCJKBigramFilter_doNext(self)) {
      NSString *type = JreRetainedLocalValue([((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) type]);
      if (JreObjectEqualsEquals(type, doHan_) || JreObjectEqualsEquals(type, doHiragana_) || JreObjectEqualsEquals(type, doKatakana_) || JreObjectEqualsEquals(type, doHangul_)) {
        if ([((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAtt_)) startOffset] != lastEndOffset_) {
          if (OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedUnigram(self)) {
            JreStrongAssign(&loneState_, [self captureState]);
            OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushUnigram(self);
            return true;
          }
          index_ = 0;
          bufferLen_ = 0;
        }
        OrgApacheLuceneAnalysisCjkCJKBigramFilter_refill(self);
      }
      else {
        if (OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedUnigram(self)) {
          JreStrongAssign(&loneState_, [self captureState]);
          OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushUnigram(self);
          return true;
        }
        return true;
      }
    }
    else {
      if (OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedUnigram(self)) {
        OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushUnigram(self);
        return true;
      }
      return false;
    }
  }
}

- (jboolean)doNext {
  return OrgApacheLuceneAnalysisCjkCJKBigramFilter_doNext(self);
}

- (void)refill {
  OrgApacheLuceneAnalysisCjkCJKBigramFilter_refill(self);
}

- (void)flushBigram {
  OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushBigram(self);
}

- (void)flushUnigram {
  OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushUnigram(self);
}

- (jboolean)hasBufferedBigram {
  return OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedBigram(self);
}

- (jboolean)hasBufferedUnigram {
  return OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedUnigram(self);
}

- (void)reset {
  [super reset];
  bufferLen_ = 0;
  index_ = 0;
  lastEndOffset_ = 0;
  JreStrongAssign(&loneState_, nil);
  exhausted_ = false;
  ngramState_ = false;
}

- (void)dealloc {
  RELEASE_(doHan_);
  RELEASE_(doHiragana_);
  RELEASE_(doKatakana_);
  RELEASE_(doHangul_);
  RELEASE_(termAtt_);
  RELEASE_(typeAtt_);
  RELEASE_(offsetAtt_);
  RELEASE_(posIncAtt_);
  RELEASE_(posLengthAtt_);
  RELEASE_(buffer_);
  RELEASE_(startOffset_);
  RELEASE_(endOffset_);
  RELEASE_(loneState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:);
  methods[1].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withInt:);
  methods[2].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withInt:withBoolean:);
  methods[3].selector = @selector(incrementToken);
  methods[4].selector = @selector(doNext);
  methods[5].selector = @selector(refill);
  methods[6].selector = @selector(flushBigram);
  methods[7].selector = @selector(flushUnigram);
  methods[8].selector = @selector(hasBufferedBigram);
  methods[9].selector = @selector(hasBufferedUnigram);
  methods[10].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HAN", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCjkCJKBigramFilter_HAN, 0x19, -1, -1, -1, -1 },
    { "HIRAGANA", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCjkCJKBigramFilter_HIRAGANA, 0x19, -1, -1, -1, -1 },
    { "KATAKANA", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCjkCJKBigramFilter_KATAKANA, 0x19, -1, -1, -1, -1 },
    { "HANGUL", "I", .constantValue.asInt = OrgApacheLuceneAnalysisCjkCJKBigramFilter_HANGUL, 0x19, -1, -1, -1, -1 },
    { "DOUBLE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "SINGLE_TYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "HAN_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "HIRAGANA_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "KATAKANA_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "HANGUL_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "NO", "LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "doHan_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "doHiragana_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "doKatakana_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "doHangul_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "outputUnigrams_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ngramState_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeAtt_", "LOrgApacheLuceneAnalysisTokenattributesTypeAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "offsetAtt_", "LOrgApacheLuceneAnalysisTokenattributesOffsetAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posIncAtt_", "LOrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posLengthAtt_", "LOrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "buffer_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "startOffset_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "endOffset_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bufferLen_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastEndOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "exhausted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "loneState_", "LOrgApacheLuceneUtilAttributeSource_State;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;", "LOrgApacheLuceneAnalysisTokenStream;I", "LOrgApacheLuceneAnalysisTokenStream;IZ", "LJavaIoIOException;", &OrgApacheLuceneAnalysisCjkCJKBigramFilter_DOUBLE_TYPE, &OrgApacheLuceneAnalysisCjkCJKBigramFilter_SINGLE_TYPE, &OrgApacheLuceneAnalysisCjkCJKBigramFilter_HAN_TYPE, &OrgApacheLuceneAnalysisCjkCJKBigramFilter_HIRAGANA_TYPE, &OrgApacheLuceneAnalysisCjkCJKBigramFilter_KATAKANA_TYPE, &OrgApacheLuceneAnalysisCjkCJKBigramFilter_HANGUL_TYPE, &OrgApacheLuceneAnalysisCjkCJKBigramFilter_NO };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisCjkCJKBigramFilter = { "CJKBigramFilter", "org.apache.lucene.analysis.cjk", ptrTable, methods, fields, 7, 0x11, 11, 30, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisCjkCJKBigramFilter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneAnalysisCjkCJKBigramFilter class]) {
    JreStrongAssign(&OrgApacheLuceneAnalysisCjkCJKBigramFilter_HAN_TYPE, IOSObjectArray_Get(nil_chk(JreLoadStatic(OrgApacheLuceneAnalysisStandardStandardTokenizer, TOKEN_TYPES)), OrgApacheLuceneAnalysisStandardStandardTokenizer_IDEOGRAPHIC));
    JreStrongAssign(&OrgApacheLuceneAnalysisCjkCJKBigramFilter_HIRAGANA_TYPE, IOSObjectArray_Get(JreLoadStatic(OrgApacheLuceneAnalysisStandardStandardTokenizer, TOKEN_TYPES), OrgApacheLuceneAnalysisStandardStandardTokenizer_HIRAGANA));
    JreStrongAssign(&OrgApacheLuceneAnalysisCjkCJKBigramFilter_KATAKANA_TYPE, IOSObjectArray_Get(JreLoadStatic(OrgApacheLuceneAnalysisStandardStandardTokenizer, TOKEN_TYPES), OrgApacheLuceneAnalysisStandardStandardTokenizer_KATAKANA));
    JreStrongAssign(&OrgApacheLuceneAnalysisCjkCJKBigramFilter_HANGUL_TYPE, IOSObjectArray_Get(JreLoadStatic(OrgApacheLuceneAnalysisStandardStandardTokenizer, TOKEN_TYPES), OrgApacheLuceneAnalysisStandardStandardTokenizer_HANGUL));
    JreStrongAssignAndConsume(&OrgApacheLuceneAnalysisCjkCJKBigramFilter_NO, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneAnalysisCjkCJKBigramFilter)
  }
}

@end

void OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg) {
  OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(self, inArg, OrgApacheLuceneAnalysisCjkCJKBigramFilter_HAN | OrgApacheLuceneAnalysisCjkCJKBigramFilter_HIRAGANA | OrgApacheLuceneAnalysisCjkCJKBigramFilter_KATAKANA | OrgApacheLuceneAnalysisCjkCJKBigramFilter_HANGUL);
}

OrgApacheLuceneAnalysisCjkCJKBigramFilter *new_OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, initWithOrgApacheLuceneAnalysisTokenStream_, inArg)
}

OrgApacheLuceneAnalysisCjkCJKBigramFilter *create_OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, initWithOrgApacheLuceneAnalysisTokenStream_, inArg)
}

void OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, jint flags) {
  OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(self, inArg, flags, false);
}

OrgApacheLuceneAnalysisCjkCJKBigramFilter *new_OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *inArg, jint flags) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_, inArg, flags)
}

OrgApacheLuceneAnalysisCjkCJKBigramFilter *create_OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *inArg, jint flags) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_, inArg, flags)
}

void OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, jint flags, jboolean outputUnigrams) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  JreStrongAssign(&self->offsetAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesOffsetAttribute_class_()]);
  JreStrongAssign(&self->posIncAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute_class_()]);
  JreStrongAssign(&self->posLengthAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute_class_()]);
  JreStrongAssignAndConsume(&self->buffer_, [IOSIntArray newArrayWithLength:8]);
  JreStrongAssignAndConsume(&self->startOffset_, [IOSIntArray newArrayWithLength:8]);
  JreStrongAssignAndConsume(&self->endOffset_, [IOSIntArray newArrayWithLength:8]);
  JreStrongAssign(&self->doHan_, (flags & OrgApacheLuceneAnalysisCjkCJKBigramFilter_HAN) == 0 ? OrgApacheLuceneAnalysisCjkCJKBigramFilter_NO : OrgApacheLuceneAnalysisCjkCJKBigramFilter_HAN_TYPE);
  JreStrongAssign(&self->doHiragana_, (flags & OrgApacheLuceneAnalysisCjkCJKBigramFilter_HIRAGANA) == 0 ? OrgApacheLuceneAnalysisCjkCJKBigramFilter_NO : OrgApacheLuceneAnalysisCjkCJKBigramFilter_HIRAGANA_TYPE);
  JreStrongAssign(&self->doKatakana_, (flags & OrgApacheLuceneAnalysisCjkCJKBigramFilter_KATAKANA) == 0 ? OrgApacheLuceneAnalysisCjkCJKBigramFilter_NO : OrgApacheLuceneAnalysisCjkCJKBigramFilter_KATAKANA_TYPE);
  JreStrongAssign(&self->doHangul_, (flags & OrgApacheLuceneAnalysisCjkCJKBigramFilter_HANGUL) == 0 ? OrgApacheLuceneAnalysisCjkCJKBigramFilter_NO : OrgApacheLuceneAnalysisCjkCJKBigramFilter_HANGUL_TYPE);
  self->outputUnigrams_ = outputUnigrams;
}

OrgApacheLuceneAnalysisCjkCJKBigramFilter *new_OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(OrgApacheLuceneAnalysisTokenStream *inArg, jint flags, jboolean outputUnigrams) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_, inArg, flags, outputUnigrams)
}

OrgApacheLuceneAnalysisCjkCJKBigramFilter *create_OrgApacheLuceneAnalysisCjkCJKBigramFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(OrgApacheLuceneAnalysisTokenStream *inArg, jint flags, jboolean outputUnigrams) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisCjkCJKBigramFilter, initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_, inArg, flags, outputUnigrams)
}

jboolean OrgApacheLuceneAnalysisCjkCJKBigramFilter_doNext(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self) {
  if (self->loneState_ != nil) {
    [self restoreStateWithOrgApacheLuceneUtilAttributeSource_State:self->loneState_];
    JreStrongAssign(&self->loneState_, nil);
    return true;
  }
  else {
    if (self->exhausted_) {
      return false;
    }
    else if ([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(self->input_)) incrementToken]) {
      return true;
    }
    else {
      self->exhausted_ = true;
      return false;
    }
  }
}

void OrgApacheLuceneAnalysisCjkCJKBigramFilter_refill(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self) {
  if (self->bufferLen_ > 64) {
    jint last = self->bufferLen_ - 1;
    *IOSIntArray_GetRef(nil_chk(self->buffer_), 0) = IOSIntArray_Get(self->buffer_, last);
    *IOSIntArray_GetRef(nil_chk(self->startOffset_), 0) = IOSIntArray_Get(self->startOffset_, last);
    *IOSIntArray_GetRef(nil_chk(self->endOffset_), 0) = IOSIntArray_Get(self->endOffset_, last);
    self->bufferLen_ = 1;
    self->index_ -= last;
  }
  IOSCharArray *termBuffer = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) buffer];
  jint len = [self->termAtt_ java_length];
  jint start = [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAtt_)) startOffset];
  jint end = [self->offsetAtt_ endOffset];
  jint newSize = self->bufferLen_ + len;
  JreStrongAssign(&self->buffer_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(self->buffer_, newSize));
  JreStrongAssign(&self->startOffset_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(self->startOffset_, newSize));
  JreStrongAssign(&self->endOffset_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(self->endOffset_, newSize));
  self->lastEndOffset_ = end;
  if (end - start != len) {
    for (jint i = 0, cp = 0; i < len; i += JavaLangCharacter_charCountWithInt_(cp)) {
      cp = *IOSIntArray_GetRef(nil_chk(self->buffer_), self->bufferLen_) = JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(termBuffer, i, len);
      *IOSIntArray_GetRef(nil_chk(self->startOffset_), self->bufferLen_) = start;
      *IOSIntArray_GetRef(nil_chk(self->endOffset_), self->bufferLen_) = end;
      self->bufferLen_++;
    }
  }
  else {
    for (jint i = 0, cp = 0, cpLen = 0; i < len; i += cpLen) {
      cp = *IOSIntArray_GetRef(nil_chk(self->buffer_), self->bufferLen_) = JavaLangCharacter_codePointAtWithCharArray_withInt_withInt_(termBuffer, i, len);
      cpLen = JavaLangCharacter_charCountWithInt_(cp);
      *IOSIntArray_GetRef(nil_chk(self->startOffset_), self->bufferLen_) = start;
      start = *IOSIntArray_GetRef(nil_chk(self->endOffset_), self->bufferLen_) = start + cpLen;
      self->bufferLen_++;
    }
  }
}

void OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushBigram(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self) {
  [self clearAttributes];
  IOSCharArray *termBuffer = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) resizeBufferWithInt:4];
  jint len1 = JavaLangCharacter_toCharsWithInt_withCharArray_withInt_(IOSIntArray_Get(nil_chk(self->buffer_), self->index_), termBuffer, 0);
  jint len2 = len1 + JavaLangCharacter_toCharsWithInt_withCharArray_withInt_(IOSIntArray_Get(nil_chk(self->buffer_), self->index_ + 1), termBuffer, len1);
  [self->termAtt_ setLengthWithInt:len2];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAtt_)) setOffsetWithInt:IOSIntArray_Get(nil_chk(self->startOffset_), self->index_) withInt:IOSIntArray_Get(nil_chk(self->endOffset_), self->index_ + 1)];
  [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(self->typeAtt_)) setTypeWithNSString:OrgApacheLuceneAnalysisCjkCJKBigramFilter_DOUBLE_TYPE];
  if (self->outputUnigrams_) {
    [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(self->posIncAtt_)) setPositionIncrementWithInt:0];
    [((id<OrgApacheLuceneAnalysisTokenattributesPositionLengthAttribute>) nil_chk(self->posLengthAtt_)) setPositionLengthWithInt:2];
  }
  self->index_++;
}

void OrgApacheLuceneAnalysisCjkCJKBigramFilter_flushUnigram(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self) {
  [self clearAttributes];
  IOSCharArray *termBuffer = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(self->termAtt_)) resizeBufferWithInt:2];
  jint len = JavaLangCharacter_toCharsWithInt_withCharArray_withInt_(IOSIntArray_Get(nil_chk(self->buffer_), self->index_), termBuffer, 0);
  [self->termAtt_ setLengthWithInt:len];
  [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(self->offsetAtt_)) setOffsetWithInt:IOSIntArray_Get(nil_chk(self->startOffset_), self->index_) withInt:IOSIntArray_Get(nil_chk(self->endOffset_), self->index_)];
  [((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(self->typeAtt_)) setTypeWithNSString:OrgApacheLuceneAnalysisCjkCJKBigramFilter_SINGLE_TYPE];
  self->index_++;
}

jboolean OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedBigram(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self) {
  return self->bufferLen_ - self->index_ > 1;
}

jboolean OrgApacheLuceneAnalysisCjkCJKBigramFilter_hasBufferedUnigram(OrgApacheLuceneAnalysisCjkCJKBigramFilter *self) {
  if (self->outputUnigrams_) {
    return self->bufferLen_ - self->index_ == 1;
  }
  else {
    return self->bufferLen_ == 1 && self->index_ == 0;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisCjkCJKBigramFilter)
