//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/ga/IrishLowerCaseFilter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilter.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/ga/IrishLowerCaseFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisGaIrishLowerCaseFilter () {
 @public
  id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt_;
}

- (jboolean)isUpperVowelWithInt:(jint)v;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisGaIrishLowerCaseFilter, termAtt_, id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)

__attribute__((unused)) static jboolean OrgApacheLuceneAnalysisGaIrishLowerCaseFilter_isUpperVowelWithInt_(OrgApacheLuceneAnalysisGaIrishLowerCaseFilter *self, jint v);

@implementation OrgApacheLuceneAnalysisGaIrishLowerCaseFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg {
  OrgApacheLuceneAnalysisGaIrishLowerCaseFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  return self;
}

- (jboolean)incrementToken {
  if ([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
    IOSCharArray *chArray = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt_)) buffer];
    jint chLen = [termAtt_ java_length];
    jint idx = 0;
    if (chLen > 1 && (IOSCharArray_Get(nil_chk(chArray), 0) == 'n' || IOSCharArray_Get(chArray, 0) == 't') && OrgApacheLuceneAnalysisGaIrishLowerCaseFilter_isUpperVowelWithInt_(self, IOSCharArray_Get(chArray, 1))) {
      chArray = [termAtt_ resizeBufferWithInt:chLen + 1];
      for (jint i = chLen; i > 1; i--) {
        *IOSCharArray_GetRef(nil_chk(chArray), i) = IOSCharArray_Get(chArray, i - 1);
      }
      *IOSCharArray_GetRef(nil_chk(chArray), 1) = '-';
      [termAtt_ setLengthWithInt:chLen + 1];
      idx = 2;
      chLen = chLen + 1;
    }
    for (jint i = idx; i < chLen; ) {
      i += JavaLangCharacter_toCharsWithInt_withCharArray_withInt_(JavaLangCharacter_toLowerCaseWithChar_(IOSCharArray_Get(nil_chk(chArray), i)), chArray, i);
    }
    return true;
  }
  else {
    return false;
  }
}

- (jboolean)isUpperVowelWithInt:(jint)v {
  return OrgApacheLuceneAnalysisGaIrishLowerCaseFilter_isUpperVowelWithInt_(self, v);
}

- (void)dealloc {
  RELEASE_(termAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:);
  methods[1].selector = @selector(incrementToken);
  methods[2].selector = @selector(isUpperVowelWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesCharTermAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;", "LJavaIoIOException;", "isUpperVowel", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisGaIrishLowerCaseFilter = { "IrishLowerCaseFilter", "org.apache.lucene.analysis.ga", ptrTable, methods, fields, 7, 0x11, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisGaIrishLowerCaseFilter;
}

@end

void OrgApacheLuceneAnalysisGaIrishLowerCaseFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisGaIrishLowerCaseFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, inArg);
  JreStrongAssign(&self->termAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
}

OrgApacheLuceneAnalysisGaIrishLowerCaseFilter *new_OrgApacheLuceneAnalysisGaIrishLowerCaseFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisGaIrishLowerCaseFilter, initWithOrgApacheLuceneAnalysisTokenStream_, inArg)
}

OrgApacheLuceneAnalysisGaIrishLowerCaseFilter *create_OrgApacheLuceneAnalysisGaIrishLowerCaseFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisGaIrishLowerCaseFilter, initWithOrgApacheLuceneAnalysisTokenStream_, inArg)
}

jboolean OrgApacheLuceneAnalysisGaIrishLowerCaseFilter_isUpperVowelWithInt_(OrgApacheLuceneAnalysisGaIrishLowerCaseFilter *self, jint v) {
  switch (v) {
    case 'A':
    case 'E':
    case 'I':
    case 'O':
    case 'U':
    case 0x00c1:
    case 0x00c9:
    case 0x00cd:
    case 0x00d3:
    case 0x00da:
    return true;
    default:
    return false;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisGaIrishLowerCaseFilter)
