//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "org/apache/lucene/analysis/payloads/PayloadHelper.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/util/BytesRef.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter () {
 @public
  NSString *typeMatch_;
  OrgApacheLuceneUtilBytesRef *thePayload_;
  id<OrgApacheLuceneAnalysisTokenattributesPayloadAttribute> payloadAtt_;
  id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute> typeAtt_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter, typeMatch_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter, thePayload_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter, payloadAtt_, id<OrgApacheLuceneAnalysisTokenattributesPayloadAttribute>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter, typeAtt_, id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>)

@implementation OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter

- (instancetype)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                 withFloat:(jfloat)payload
                                              withNSString:(NSString *)typeMatch {
  OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withFloat_withNSString_(self, input, payload, typeMatch);
  return self;
}

- (jboolean)incrementToken {
  if ([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(input_)) incrementToken]) {
    if ([((NSString *) nil_chk([((id<OrgApacheLuceneAnalysisTokenattributesTypeAttribute>) nil_chk(typeAtt_)) type])) isEqual:typeMatch_]) [((id<OrgApacheLuceneAnalysisTokenattributesPayloadAttribute>) nil_chk(payloadAtt_)) setPayloadWithOrgApacheLuceneUtilBytesRef:thePayload_];
    return true;
  }
  else {
    return false;
  }
}

- (void)dealloc {
  RELEASE_(typeMatch_);
  RELEASE_(thePayload_);
  RELEASE_(payloadAtt_);
  RELEASE_(typeAtt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisTokenStream:withFloat:withNSString:);
  methods[1].selector = @selector(incrementToken);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "typeMatch_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "thePayload_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payloadAtt_", "LOrgApacheLuceneAnalysisTokenattributesPayloadAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "typeAtt_", "LOrgApacheLuceneAnalysisTokenattributesTypeAttribute;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisTokenStream;FLNSString;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter = { "NumericPayloadTokenFilter", "org.apache.lucene.analysis.payloads", ptrTable, methods, fields, 7, 0x1, 2, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter;
}

@end

void OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withFloat_withNSString_(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jfloat payload, NSString *typeMatch) {
  OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(self, input);
  JreStrongAssign(&self->payloadAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesPayloadAttribute_class_()]);
  JreStrongAssign(&self->typeAtt_, [self addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesTypeAttribute_class_()]);
  if (typeMatch == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"typeMatch cannot be null");
  }
  JreStrongAssignAndConsume(&self->thePayload_, new_OrgApacheLuceneUtilBytesRef_initWithByteArray_(OrgApacheLuceneAnalysisPayloadsPayloadHelper_encodeFloatWithFloat_(payload)));
  JreStrongAssign(&self->typeMatch_, typeMatch);
}

OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter *new_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withFloat_withNSString_(OrgApacheLuceneAnalysisTokenStream *input, jfloat payload, NSString *typeMatch) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_withFloat_withNSString_, input, payload, typeMatch)
}

OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter *create_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withFloat_withNSString_(OrgApacheLuceneAnalysisTokenStream *input, jfloat payload, NSString *typeMatch) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter, initWithOrgApacheLuceneAnalysisTokenStream_withFloat_withNSString_, input, payload, typeMatch)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter)
