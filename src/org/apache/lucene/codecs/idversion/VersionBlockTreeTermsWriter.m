//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.h"
#include "org/apache/lucene/codecs/idversion/IDVersionPostingsWriter.h"
#include "org/apache/lucene/codecs/idversion/IDVersionTermState.h"
#include "org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/PairOutputs.h"
#include "org/apache/lucene/util/fst/PositiveIntOutputs.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter () {
 @public
  OrgApacheLuceneStoreIndexOutput *out_;
  OrgApacheLuceneStoreIndexOutput *indexOut_;
  id<JavaUtilList> fields_;
  OrgApacheLuceneStoreRAMOutputStream *scratchBytes_;
  OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef_;
  jboolean closed_;
}

/*!
 @brief Writes the terms file trailer.
 */
- (void)writeTrailerWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                                               withLong:(jlong)dirStart;

/*!
 @brief Writes the index file trailer.
 */
- (void)writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)indexOut
                                                    withLong:(jlong)dirStart;

+ (void)writeBytesRefWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, out_, OrgApacheLuceneStoreIndexOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, indexOut_, OrgApacheLuceneStoreIndexOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, fields_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, scratchBytes_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, scratchIntsRef_, OrgApacheLuceneUtilIntsRefBuilder *)

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *self, OrgApacheLuceneStoreIndexOutput *outArg, jlong dirStart);

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *self, OrgApacheLuceneStoreIndexOutput *indexOut, jlong dirStart);

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneStoreIndexOutput *outArg, OrgApacheLuceneUtilBytesRef *bytes);

@interface OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData : NSObject {
 @public
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode_;
  jlong numTerms_;
  jlong indexStartFP_;
  jint longsSize_;
  OrgApacheLuceneUtilBytesRef *minTerm_;
  OrgApacheLuceneUtilBytesRef *maxTerm_;
}

- (instancetype)initWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
           withOrgApacheLuceneUtilFstPairOutputs_Pair:(OrgApacheLuceneUtilFstPairOutputs_Pair *)rootCode
                                             withLong:(jlong)numTerms
                                             withLong:(jlong)indexStartFP
                                              withInt:(jint)longsSize
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData, rootCode_, OrgApacheLuceneUtilFstPairOutputs_Pair *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData, minTerm_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData, maxTerm_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData *self, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode, jlong numTerms, jlong indexStartFP, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm);

__attribute__((unused)) static OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode, jlong numTerms, jlong indexStartFP, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode, jlong numTerms, jlong indexStartFP, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData)

@interface OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry : NSObject {
 @public
  jboolean isTerm_;
}

- (instancetype)initWithBoolean:(jboolean)isTerm;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry)

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry_initWithBoolean_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *self, jboolean isTerm);

__attribute__((unused)) static OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry)

@interface OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm : OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry {
 @public
  IOSByteArray *termBytes_;
  OrgApacheLuceneCodecsBlockTermState *state_;
}

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
            withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)state;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm, termBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm, state_, OrgApacheLuceneCodecsBlockTermState *)

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *self, OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state);

__attribute__((unused)) static OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm)

@interface OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock : OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry {
 @public
  OrgApacheLuceneUtilBytesRef *prefix_;
  jlong fp_;
  OrgApacheLuceneUtilFstFST *index_;
  id<JavaUtilList> subIndices_;
  jboolean hasTerms_;
  jboolean isFloor_;
  jint floorLeadByte_;
  /*!
   @brief Max version for all terms in this block.
   */
  jlong maxVersion_;
}

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix
                                           withLong:(jlong)maxVersion
                                           withLong:(jlong)fp
                                        withBoolean:(jboolean)hasTerms
                                        withBoolean:(jboolean)isFloor
                                            withInt:(jint)floorLeadByte
                                   withJavaUtilList:(id<JavaUtilList>)subIndices;

- (NSString *)description;

- (void)compileIndexWithJavaUtilList:(id<JavaUtilList>)blocks
withOrgApacheLuceneStoreRAMOutputStream:(OrgApacheLuceneStoreRAMOutputStream *)scratchBytes
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef;

- (void)appendWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
                  withOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)subIndex
          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock, prefix_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock, index_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock, subIndices_, id<JavaUtilList>)

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilBytesRef *prefix, jlong maxVersion, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices);

__attribute__((unused)) static OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong maxVersion, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong maxVersion, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices);

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilFstBuilder *builder, OrgApacheLuceneUtilFstFST *subIndex, OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock)

@interface OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter () {
 @public
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *this$0_;
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  jint longsSize_;
  jlong numTerms_;
  OrgApacheLuceneUtilBytesRefBuilder *lastTerm_;
  IOSIntArray *prefixStarts_;
  IOSLongArray *longs_;
  id<JavaUtilList> pending_;
  id<JavaUtilList> newBlocks_;
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *firstPendingTerm_;
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *lastPendingTerm_;
  OrgApacheLuceneStoreRAMOutputStream *suffixWriter_;
  OrgApacheLuceneStoreRAMOutputStream *metaWriter_;
  OrgApacheLuceneStoreRAMOutputStream *bytesWriter_;
}

/*!
 @brief Writes the specified slice (start is inclusive, end is exclusive)
   from pending stack as a new block.If isFloor is true, there
   were too many (more than maxItemsInBlock) entries sharing the
   same prefix, and so we broke it into multiple floor blocks where
   we record the starting label of the suffix of each floor block.
 */
- (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *)writeBlockWithInt:(jint)prefixLength
                                                                                  withBoolean:(jboolean)isFloor
                                                                                      withInt:(jint)floorLeadLabel
                                                                                      withInt:(jint)start
                                                                                      withInt:(jint)end
                                                                                  withBoolean:(jboolean)hasTerms
                                                                                  withBoolean:(jboolean)hasSubBlocks;

/*!
 @brief Pushes the new term to the top of the stack, and writes new blocks.
 */
- (void)pushTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, lastTerm_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, prefixStarts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, longs_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, pending_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, newBlocks_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, firstPendingTerm_, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, lastPendingTerm_, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, suffixWriter_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, metaWriter_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, bytesWriter_, OrgApacheLuceneStoreRAMOutputStream *)

__attribute__((unused)) static OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter *self, jint prefixLength, jboolean isFloor, jint floorLeadLabel, jint start, jint end, jboolean hasTerms, jboolean hasSubBlocks);

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter *self, OrgApacheLuceneUtilBytesRef *text);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter)

OrgApacheLuceneUtilFstPairOutputs *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FST_OUTPUTS;
OrgApacheLuceneUtilFstPairOutputs_Pair *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_NO_OUTPUT;
NSString *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_EXTENSION = @"tiv";
NSString *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_CODEC_NAME = @"VersionBlockTreeTermsDict";
NSString *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_INDEX_EXTENSION = @"tipv";
NSString *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_INDEX_CODEC_NAME = @"VersionBlockTreeTermsIndex";

@implementation OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter

+ (OrgApacheLuceneUtilFstPairOutputs *)FST_OUTPUTS {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FST_OUTPUTS;
}

+ (OrgApacheLuceneUtilFstPairOutputs_Pair *)NO_OUTPUT {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_NO_OUTPUT;
}

+ (jint)DEFAULT_MIN_BLOCK_SIZE {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_DEFAULT_MIN_BLOCK_SIZE;
}

+ (jint)DEFAULT_MAX_BLOCK_SIZE {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_DEFAULT_MAX_BLOCK_SIZE;
}

+ (jint)OUTPUT_FLAGS_NUM_BITS {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAGS_NUM_BITS;
}

+ (jint)OUTPUT_FLAGS_MASK {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAGS_MASK;
}

+ (jint)OUTPUT_FLAG_IS_FLOOR {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAG_IS_FLOOR;
}

+ (jint)OUTPUT_FLAG_HAS_TERMS {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAG_HAS_TERMS;
}

+ (NSString *)TERMS_EXTENSION {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_EXTENSION;
}

+ (NSString *)TERMS_CODEC_NAME {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_CODEC_NAME;
}

+ (jint)VERSION_START {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_VERSION_START;
}

+ (jint)VERSION_CURRENT {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_VERSION_CURRENT;
}

+ (NSString *)TERMS_INDEX_EXTENSION {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_INDEX_EXTENSION;
}

+ (NSString *)TERMS_INDEX_CODEC_NAME {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_INDEX_CODEC_NAME;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state
                  withOrgApacheLuceneCodecsPostingsWriterBase:(OrgApacheLuceneCodecsPostingsWriterBase *)postingsWriter
                                                      withInt:(jint)minItemsInBlock
                                                      withInt:(jint)maxItemsInBlock {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(self, state, postingsWriter, minItemsInBlock, maxItemsInBlock);
  return self;
}

- (void)writeTrailerWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                                               withLong:(jlong)dirStart {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(self, outArg, dirStart);
}

- (void)writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)indexOut
                                                    withLong:(jlong)dirStart {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(self, indexOut, dirStart);
}

- (void)writeWithOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)fields {
  NSString *lastField = nil;
  for (NSString * __strong field in nil_chk(fields)) {
    JreAssert(lastField == nil || [lastField compareToWithId:field] < 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:229 condition failed: assert lastField == null || lastField.compareTo(field) < 0;");
    lastField = field;
    OrgApacheLuceneIndexTerms *terms = JreRetainedLocalValue([fields termsWithNSString:field]);
    if (terms == nil) {
      continue;
    }
    OrgApacheLuceneIndexTermsEnum *termsEnum = JreRetainedLocalValue([terms iterator]);
    OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter *termsWriter = create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(self, [((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos_)) fieldInfoWithNSString:field]);
    while (true) {
      OrgApacheLuceneUtilBytesRef *term = JreRetainedLocalValue([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next]);
      if (term == nil) {
        break;
      }
      [termsWriter writeWithOrgApacheLuceneUtilBytesRef:term withOrgApacheLuceneIndexTermsEnum:termsEnum];
    }
    [termsWriter finish];
  }
}

+ (jlong)encodeOutputWithLong:(jlong)fp
                  withBoolean:(jboolean)hasTerms
                  withBoolean:(jboolean)isFloor {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_encodeOutputWithLong_withBoolean_withBoolean_(fp, hasTerms, isFloor);
}

+ (NSString *)brToStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(b);
}

+ (NSString *)brToStringWithByteArray:(IOSByteArray *)b {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_brToStringWithByteArray_(b);
}

- (void)close {
  if (closed_) {
    return;
  }
  closed_ = true;
  jboolean success = false;
  @try {
    jlong dirStart = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(out_)) getFilePointer];
    jlong indexDirStart = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(indexOut_)) getFilePointer];
    [out_ writeVIntWithInt:[((id<JavaUtilList>) nil_chk(fields_)) size]];
    for (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData * __strong field in fields_) {
      [out_ writeVIntWithInt:((OrgApacheLuceneIndexFieldInfo *) nil_chk(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData *) nil_chk(field))->fieldInfo_))->number_];
      JreAssert(field->numTerms_ > 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:861 condition failed: assert field.numTerms > 0;");
      [out_ writeVLongWithLong:field->numTerms_];
      [out_ writeVIntWithInt:((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneUtilFstPairOutputs_Pair *) nil_chk(field->rootCode_))->output1_))->length_];
      [out_ writeBytesWithByteArray:((OrgApacheLuceneUtilBytesRef *) field->rootCode_->output1_)->bytes_ withInt:((OrgApacheLuceneUtilBytesRef *) field->rootCode_->output1_)->offset_ withInt:((OrgApacheLuceneUtilBytesRef *) field->rootCode_->output1_)->length_];
      [out_ writeVLongWithLong:[((JavaLangLong *) nil_chk(field->rootCode_->output2_)) longLongValue]];
      [out_ writeVIntWithInt:field->longsSize_];
      [indexOut_ writeVLongWithLong:field->indexStartFP_];
      OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(out_, field->minTerm_);
      OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(out_, field->maxTerm_);
    }
    OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(self, out_, dirStart);
    OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(out_);
    OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(self, indexOut_, indexDirStart);
    OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(indexOut_);
    success = true;
  }
  @finally {
    if (success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ out_, indexOut_, postingsWriter_ } count:3 type:JavaIoCloseable_class_()]);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ out_, indexOut_, postingsWriter_ } count:3 type:JavaIoCloseable_class_()]);
    }
  }
}

+ (void)writeBytesRefWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(outArg, bytes);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(indexOut_);
  RELEASE_(postingsWriter_);
  RELEASE_(fieldInfos_);
  RELEASE_(fields_);
  RELEASE_(scratchBytes_);
  RELEASE_(scratchIntsRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 1, -1, -1, -1 },
    { NULL, "J", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 9, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0xa, 12, 13, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentWriteState:withOrgApacheLuceneCodecsPostingsWriterBase:withInt:withInt:);
  methods[1].selector = @selector(writeTrailerWithOrgApacheLuceneStoreIndexOutput:withLong:);
  methods[2].selector = @selector(writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput:withLong:);
  methods[3].selector = @selector(writeWithOrgApacheLuceneIndexFields:);
  methods[4].selector = @selector(encodeOutputWithLong:withBoolean:withBoolean:);
  methods[5].selector = @selector(brToStringWithOrgApacheLuceneUtilBytesRef:);
  methods[6].selector = @selector(brToStringWithByteArray:);
  methods[7].selector = @selector(close);
  methods[8].selector = @selector(writeBytesRefWithOrgApacheLuceneStoreIndexOutput:withOrgApacheLuceneUtilBytesRef:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FST_OUTPUTS", "LOrgApacheLuceneUtilFstPairOutputs;", .constantValue.asLong = 0, 0x18, -1, 14, 15, -1 },
    { "NO_OUTPUT", "LOrgApacheLuceneUtilFstPairOutputs_Pair;", .constantValue.asLong = 0, 0x18, -1, 16, 17, -1 },
    { "DEFAULT_MIN_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_DEFAULT_MIN_BLOCK_SIZE, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MAX_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_DEFAULT_MAX_BLOCK_SIZE, 0x19, -1, -1, -1, -1 },
    { "OUTPUT_FLAGS_NUM_BITS", "I", .constantValue.asInt = OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAGS_NUM_BITS, 0x18, -1, -1, -1, -1 },
    { "OUTPUT_FLAGS_MASK", "I", .constantValue.asInt = OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAGS_MASK, 0x18, -1, -1, -1, -1 },
    { "OUTPUT_FLAG_IS_FLOOR", "I", .constantValue.asInt = OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAG_IS_FLOOR, 0x18, -1, -1, -1, -1 },
    { "OUTPUT_FLAG_HAS_TERMS", "I", .constantValue.asInt = OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAG_HAS_TERMS, 0x18, -1, -1, -1, -1 },
    { "TERMS_EXTENSION", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "TERMS_CODEC_NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 19, -1, -1 },
    { "VERSION_START", "I", .constantValue.asInt = OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_VERSION_START, 0x19, -1, -1, -1, -1 },
    { "VERSION_CURRENT", "I", .constantValue.asInt = OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_VERSION_CURRENT, 0x19, -1, -1, -1, -1 },
    { "TERMS_INDEX_EXTENSION", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 20, -1, -1 },
    { "TERMS_INDEX_CODEC_NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 21, -1, -1 },
    { "out_", "LOrgApacheLuceneStoreIndexOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "indexOut_", "LOrgApacheLuceneStoreIndexOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxDoc_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "minItemsInBlock_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxItemsInBlock_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "postingsWriter_", "LOrgApacheLuceneCodecsPostingsWriterBase;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldInfos_", "LOrgApacheLuceneIndexFieldInfos;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fields_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 22, -1 },
    { "scratchBytes_", "LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratchIntsRef_", "LOrgApacheLuceneUtilIntsRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentWriteState;LOrgApacheLuceneCodecsPostingsWriterBase;II", "LJavaIoIOException;", "writeTrailer", "LOrgApacheLuceneStoreIndexOutput;J", "writeIndexTrailer", "write", "LOrgApacheLuceneIndexFields;", "encodeOutput", "JZZ", "brToString", "LOrgApacheLuceneUtilBytesRef;", "[B", "writeBytesRef", "LOrgApacheLuceneStoreIndexOutput;LOrgApacheLuceneUtilBytesRef;", &OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FST_OUTPUTS, "Lorg/apache/lucene/util/fst/PairOutputs<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;", &OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_NO_OUTPUT, "Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;", &OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_EXTENSION, &OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_CODEC_NAME, &OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_INDEX_EXTENSION, &OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_INDEX_CODEC_NAME, "Ljava/util/List<Lorg/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter$FieldMetaData;>;", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData;LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry;LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm;LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock;LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter = { "VersionBlockTreeTermsWriter", "org.apache.lucene.codecs.idversion", ptrTable, methods, fields, 7, 0x11, 9, 25, -1, 23, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FST_OUTPUTS, new_OrgApacheLuceneUtilFstPairOutputs_initWithOrgApacheLuceneUtilFstOutputs_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstByteSequenceOutputs_getSingleton(), OrgApacheLuceneUtilFstPositiveIntOutputs_getSingleton()));
    JreStrongAssign(&OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_NO_OUTPUT, [OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FST_OUTPUTS getNoOutput]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter)
  }
}

@end

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *self, OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock) {
  OrgApacheLuceneCodecsFieldsConsumer_init(self);
  JreStrongAssignAndConsume(&self->fields_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->scratchBytes_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->scratchIntsRef_, new_OrgApacheLuceneUtilIntsRefBuilder_init());
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_validateSettingsWithInt_withInt_(minItemsInBlock, maxItemsInBlock);
  self->maxDoc_ = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_)) maxDoc];
  NSString *termsFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_EXTENSION);
  JreStrongAssign(&self->out_, [((OrgApacheLuceneStoreDirectory *) nil_chk(state->directory_)) createOutputWithNSString:termsFileName withOrgApacheLuceneStoreIOContext:state->context_]);
  jboolean success = false;
  OrgApacheLuceneStoreIndexOutput *indexOut = nil;
  @try {
    JreStrongAssign(&self->fieldInfos_, state->fieldInfos_);
    self->minItemsInBlock_ = minItemsInBlock;
    self->maxItemsInBlock_ = maxItemsInBlock;
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(self->out_, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_CODEC_NAME, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    NSString *termsIndexFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_INDEX_EXTENSION);
    indexOut = [state->directory_ createOutputWithNSString:termsIndexFileName withOrgApacheLuceneStoreIOContext:state->context_];
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(indexOut, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TERMS_INDEX_CODEC_NAME, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    JreStrongAssign(&self->postingsWriter_, postingsWriter);
    [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(postingsWriter)) init__WithOrgApacheLuceneStoreIndexOutput:self->out_ withOrgApacheLuceneIndexSegmentWriteState:state];
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->out_, indexOut } count:2 type:JavaIoCloseable_class_()]);
    }
  }
  JreStrongAssign(&self->indexOut_, indexOut);
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_, state, postingsWriter, minItemsInBlock, maxItemsInBlock)
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_, state, postingsWriter, minItemsInBlock, maxItemsInBlock)
}

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *self, OrgApacheLuceneStoreIndexOutput *outArg, jlong dirStart) {
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeLongWithLong:dirStart];
}

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *self, OrgApacheLuceneStoreIndexOutput *indexOut, jlong dirStart) {
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(indexOut)) writeLongWithLong:dirStart];
}

jlong OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_encodeOutputWithLong_withBoolean_withBoolean_(jlong fp, jboolean hasTerms, jboolean isFloor) {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_initialize();
  JreAssert(fp < (JreLShift64(1LL, 62)), @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:253 condition failed: assert fp < (1L << 62);");
  return (JreLShift64(fp, 2)) | (hasTerms ? OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAG_HAS_TERMS : 0) | (isFloor ? OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAG_IS_FLOOR : 0);
}

NSString *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *b) {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_initialize();
  @try {
    return JreStrcat("$C@", [((OrgApacheLuceneUtilBytesRef *) nil_chk(b)) utf8ToString], ' ', b);
  }
  @catch (JavaLangThrowable *t) {
    return [b description];
  }
}

NSString *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_brToStringWithByteArray_(IOSByteArray *b) {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_initialize();
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(create_OrgApacheLuceneUtilBytesRef_initWithByteArray_(b));
}

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneStoreIndexOutput *outArg, OrgApacheLuceneUtilBytesRef *bytes) {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_initialize();
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeVIntWithInt:((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->length_];
  [outArg writeBytesWithByteArray:bytes->bytes_ withInt:bytes->offset_ withInt:bytes->length_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter)

@implementation OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData

- (instancetype)initWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
           withOrgApacheLuceneUtilFstPairOutputs_Pair:(OrgApacheLuceneUtilFstPairOutputs_Pair *)rootCode
                                             withLong:(jlong)numTerms
                                             withLong:(jlong)indexStartFP
                                              withInt:(jint)longsSize
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, fieldInfo, rootCode, numTerms, indexStartFP, longsSize, minTerm, maxTerm);
  return self;
}

- (void)dealloc {
  RELEASE_(fieldInfo_);
  RELEASE_(rootCode_);
  RELEASE_(minTerm_);
  RELEASE_(maxTerm_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneUtilFstPairOutputs_Pair:withLong:withLong:withInt:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldInfo_", "LOrgApacheLuceneIndexFieldInfo;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "rootCode_", "LOrgApacheLuceneUtilFstPairOutputs_Pair;", .constantValue.asLong = 0, 0x11, -1, -1, 2, -1 },
    { "numTerms_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "indexStartFP_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "longsSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "maxTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexFieldInfo;LOrgApacheLuceneUtilFstPairOutputs_Pair;JJILOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;JJILorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V", "Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData = { "FieldMetaData", "org.apache.lucene.codecs.idversion", ptrTable, methods, fields, 7, 0xa, 1, 7, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData;
}

@end

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData *self, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode, jlong numTerms, jlong indexStartFP, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  NSObject_init(self);
  JreAssert(numTerms > 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:153 condition failed: assert numTerms > 0;");
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreAssert(rootCode != nil, JreStrcat("$$$J", @"field=", ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo))->name_, @" numTerms=", numTerms));
  JreStrongAssign(&self->rootCode_, rootCode);
  self->indexStartFP_ = indexStartFP;
  self->numTerms_ = numTerms;
  self->longsSize_ = longsSize;
  JreStrongAssign(&self->minTerm_, minTerm);
  JreStrongAssign(&self->maxTerm_, maxTerm);
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode, jlong numTerms, jlong indexStartFP, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData, initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_, fieldInfo, rootCode, numTerms, indexStartFP, longsSize, minTerm, maxTerm)
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode, jlong numTerms, jlong indexStartFP, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData, initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_, fieldInfo, rootCode, numTerms, indexStartFP, longsSize, minTerm, maxTerm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData)

@implementation OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry

- (instancetype)initWithBoolean:(jboolean)isTerm {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, isTerm);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isTerm_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry = { "PendingEntry", "org.apache.lucene.codecs.idversion", ptrTable, methods, fields, 7, 0xa, 1, 1, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry;
}

@end

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry_initWithBoolean_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *self, jboolean isTerm) {
  NSObject_init(self);
  self->isTerm_ = isTerm;
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry, initWithBoolean_, isTerm)
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry, initWithBoolean_, isTerm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry)

@implementation OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
            withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)state {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(self, term, state);
  return self;
}

- (NSString *)description {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_brToStringWithByteArray_(termBytes_);
}

- (void)dealloc {
  RELEASE_(termBytes_);
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneCodecsBlockTermState:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termBytes_", "[B", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "state_", "LOrgApacheLuceneCodecsBlockTermState;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneCodecsBlockTermState;", "toString", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm = { "PendingTerm", "org.apache.lucene.codecs.idversion", ptrTable, methods, fields, 7, 0x1a, 2, 2, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm;
}

@end

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *self, OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state) {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, true);
  JreStrongAssignAndConsume(&self->termBytes_, [IOSByteArray newArrayWithLength:((OrgApacheLuceneUtilBytesRef *) nil_chk(term))->length_]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(term->bytes_, term->offset_, self->termBytes_, 0, term->length_);
  JreStrongAssign(&self->state_, state);
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm, initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_, term, state)
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm, initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_, term, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm)

@implementation OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix
                                           withLong:(jlong)maxVersion
                                           withLong:(jlong)fp
                                        withBoolean:(jboolean)hasTerms
                                        withBoolean:(jboolean)isFloor
                                            withInt:(jint)floorLeadByte
                                   withJavaUtilList:(id<JavaUtilList>)subIndices {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(self, prefix, maxVersion, fp, hasTerms, isFloor, floorLeadByte, subIndices);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$", @"BLOCK: ", OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(prefix_));
}

- (void)compileIndexWithJavaUtilList:(id<JavaUtilList>)blocks
withOrgApacheLuceneStoreRAMOutputStream:(OrgApacheLuceneStoreRAMOutputStream *)scratchBytes
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef {
  JreAssert((isFloor_ && [((id<JavaUtilList>) nil_chk(blocks)) size] > 1) || (isFloor_ == false && [((id<JavaUtilList>) nil_chk(blocks)) size] == 1), JreStrcat("$Z$@", @"isFloor=", isFloor_, @" blocks=", blocks));
  JreAssert(JreObjectEqualsEquals(self, [((id<JavaUtilList>) nil_chk(blocks)) getWithInt:0]), @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:332 condition failed: assert this == blocks.get(0);");
  JreAssert([((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(scratchBytes)) getFilePointer] == 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:334 condition failed: assert scratchBytes.getFilePointer() == 0;");
  jlong maxVersionIndex = maxVersion_;
  [scratchBytes writeVLongWithLong:OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_encodeOutputWithLong_withBoolean_withBoolean_(fp_, hasTerms_, isFloor_)];
  if (isFloor_) {
    [scratchBytes writeVIntWithInt:[blocks size] - 1];
    for (jint i = 1; i < [blocks size]; i++) {
      OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *sub = JreRetainedLocalValue([blocks getWithInt:i]);
      maxVersionIndex = JavaLangMath_maxWithLong_withLong_(maxVersionIndex, ((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *) nil_chk(sub))->maxVersion_);
      [scratchBytes writeByteWithByte:(jbyte) sub->floorLeadByte_];
      JreAssert(sub->fp_ > fp_, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:351 condition failed: assert sub.fp > fp;");
      [scratchBytes writeVLongWithLong:(JreLShift64((sub->fp_ - fp_), 1)) | (sub->hasTerms_ ? 1 : 0)];
    }
  }
  OrgApacheLuceneUtilFstBuilder *indexBuilder = create_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withInt_withInt_withBoolean_withBoolean_withInt_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withBoolean_withInt_(JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1), 0, 0, true, false, JavaLangInteger_MAX_VALUE, JreLoadStatic(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, FST_OUTPUTS), false, OrgApacheLuceneUtilPackedPackedInts_COMPACT, true, 15);
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:(jint) [scratchBytes getFilePointer]];
  JreAssert(bytes->size_ > 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:365 condition failed: assert bytes.length > 0;");
  [scratchBytes writeToWithByteArray:bytes withInt:0];
  [indexBuilder addWithOrgApacheLuceneUtilIntsRef:OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(prefix_, scratchIntsRef) withId:[((OrgApacheLuceneUtilFstPairOutputs *) nil_chk(JreLoadStatic(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, FST_OUTPUTS))) newPairWithId:create_OrgApacheLuceneUtilBytesRef_initWithByteArray_withInt_withInt_(bytes, 0, bytes->size_) withId:JavaLangLong_valueOfWithLong_(JavaLangLong_MAX_VALUE - maxVersionIndex)]];
  [scratchBytes reset];
  for (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock * __strong block in blocks) {
    if (((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *) nil_chk(block))->subIndices_ != nil) {
      for (OrgApacheLuceneUtilFstFST * __strong subIndex in block->subIndices_) {
        OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRefBuilder_(self, indexBuilder, subIndex, scratchIntsRef);
      }
      JreStrongAssign(&block->subIndices_, nil);
    }
  }
  JreStrongAssign(&index_, [indexBuilder finish]);
  JreAssert(subIndices_ == nil, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:382 condition failed: assert subIndices == null;");
}

- (void)appendWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
                  withOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)subIndex
          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRefBuilder_(self, builder, subIndex, scratchIntsRef);
}

- (void)dealloc {
  RELEASE_(prefix_);
  RELEASE_(index_);
  RELEASE_(subIndices_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, 6, -1, -1 },
    { NULL, "V", 0x2, 7, 8, 5, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilBytesRef:withLong:withLong:withBoolean:withBoolean:withInt:withJavaUtilList:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(compileIndexWithJavaUtilList:withOrgApacheLuceneStoreRAMOutputStream:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[3].selector = @selector(appendWithOrgApacheLuceneUtilFstBuilder:withOrgApacheLuceneUtilFstFST:withOrgApacheLuceneUtilIntsRefBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "prefix_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "fp_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "index_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x1, -1, -1, 10, -1 },
    { "subIndices_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 11, -1 },
    { "hasTerms_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "isFloor_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "floorLeadByte_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "maxVersion_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilBytesRef;JJZZILJavaUtilList;", "(Lorg/apache/lucene/util/BytesRef;JJZZILjava/util/List<Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;>;>;)V", "toString", "compileIndex", "LJavaUtilList;LOrgApacheLuceneStoreRAMOutputStream;LOrgApacheLuceneUtilIntsRefBuilder;", "LJavaIoIOException;", "(Ljava/util/List<Lorg/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter$PendingBlock;>;Lorg/apache/lucene/store/RAMOutputStream;Lorg/apache/lucene/util/IntsRefBuilder;)V", "append", "LOrgApacheLuceneUtilFstBuilder;LOrgApacheLuceneUtilFstFST;LOrgApacheLuceneUtilIntsRefBuilder;", "(Lorg/apache/lucene/util/fst/Builder<Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;>;Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;>;Lorg/apache/lucene/util/IntsRefBuilder;)V", "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;>;", "Ljava/util/List<Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;>;>;", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock = { "PendingBlock", "org.apache.lucene.codecs.idversion", ptrTable, methods, fields, 7, 0x1a, 4, 8, 12, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock;
}

@end

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilBytesRef *prefix, jlong maxVersion, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, false);
  JreStrongAssign(&self->prefix_, prefix);
  self->maxVersion_ = maxVersion;
  self->fp_ = fp;
  self->hasTerms_ = hasTerms;
  self->isFloor_ = isFloor;
  self->floorLeadByte_ = floorLeadByte;
  JreStrongAssign(&self->subIndices_, subIndices);
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong maxVersion, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock, initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_, prefix, maxVersion, fp, hasTerms, isFloor, floorLeadByte, subIndices)
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong maxVersion, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock, initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_, prefix, maxVersion, fp, hasTerms, isFloor, floorLeadByte, subIndices)
}

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilFstBuilder *builder, OrgApacheLuceneUtilFstFST *subIndex, OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef) {
  OrgApacheLuceneUtilFstBytesRefFSTEnum *subIndexEnum = create_OrgApacheLuceneUtilFstBytesRefFSTEnum_initWithOrgApacheLuceneUtilFstFST_(subIndex);
  OrgApacheLuceneUtilFstBytesRefFSTEnum_InputOutput *indexEnt;
  while ((indexEnt = [subIndexEnum next]) != nil) {
    [((OrgApacheLuceneUtilFstBuilder *) nil_chk(builder)) addWithOrgApacheLuceneUtilIntsRef:OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(((OrgApacheLuceneUtilFstBytesRefFSTEnum_InputOutput *) nil_chk(indexEnt))->input_, scratchIntsRef) withId:indexEnt->output_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock)

@implementation OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter

- (void)writeBlocksWithInt:(jint)prefixLength
                   withInt:(jint)count {
  JreAssert(count > 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:442 condition failed: assert count > 0;");
  JreAssert(prefixLength > 0 || count == [((id<JavaUtilList>) nil_chk(pending_)) size], @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:454 condition failed: assert prefixLength > 0 || count == pending.size();");
  jint lastSuffixLeadLabel = -1;
  jboolean hasTerms = false;
  jboolean hasSubBlocks = false;
  jint start = [((id<JavaUtilList>) nil_chk(pending_)) size] - count;
  jint end = [pending_ size];
  jint nextBlockStart = start;
  jint nextFloorLeadLabel = -1;
  for (jint i = start; i < end; i++) {
    OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *ent = JreRetainedLocalValue([pending_ getWithInt:i]);
    jint suffixLeadLabel;
    if (((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *) nil_chk(ent))->isTerm_) {
      OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *term = (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *) cast_chk(ent, [OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm class]);
      if (((IOSByteArray *) nil_chk(term->termBytes_))->size_ == prefixLength) {
        JreAssert(lastSuffixLeadLabel == -1, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:481 condition failed: assert lastSuffixLeadLabel == -1;");
        suffixLeadLabel = -1;
      }
      else {
        suffixLeadLabel = IOSByteArray_Get(term->termBytes_, prefixLength) & (jint) 0xff;
      }
    }
    else {
      OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *block = (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *) cast_chk(ent, [OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock class]);
      JreAssert(((OrgApacheLuceneUtilBytesRef *) nil_chk(block->prefix_))->length_ > prefixLength, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:488 condition failed: assert block.prefix.length > prefixLength;");
      suffixLeadLabel = IOSByteArray_Get(nil_chk(block->prefix_->bytes_), block->prefix_->offset_ + prefixLength) & (jint) 0xff;
    }
    if (suffixLeadLabel != lastSuffixLeadLabel) {
      jint itemsInBlock = i - nextBlockStart;
      if (itemsInBlock >= this$0_->minItemsInBlock_ && end - nextBlockStart > this$0_->maxItemsInBlock_) {
        jboolean isFloor = itemsInBlock < count;
        [((id<JavaUtilList>) nil_chk(newBlocks_)) addWithId:OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(self, prefixLength, isFloor, nextFloorLeadLabel, nextBlockStart, i, hasTerms, hasSubBlocks)];
        hasTerms = false;
        hasSubBlocks = false;
        nextFloorLeadLabel = suffixLeadLabel;
        nextBlockStart = i;
      }
      lastSuffixLeadLabel = suffixLeadLabel;
    }
    if (ent->isTerm_) {
      hasTerms = true;
    }
    else {
      hasSubBlocks = true;
    }
  }
  if (nextBlockStart < end) {
    jint itemsInBlock = end - nextBlockStart;
    jboolean isFloor = itemsInBlock < count;
    [((id<JavaUtilList>) nil_chk(newBlocks_)) addWithId:OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(self, prefixLength, isFloor, nextFloorLeadLabel, nextBlockStart, end, hasTerms, hasSubBlocks)];
  }
  JreAssert([((id<JavaUtilList>) nil_chk(newBlocks_)) isEmpty] == false, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:527 condition failed: assert newBlocks.isEmpty() == false;");
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *firstBlock = JreRetainedLocalValue([newBlocks_ getWithInt:0]);
  JreAssert(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *) nil_chk(firstBlock))->isFloor_ || [newBlocks_ size] == 1, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:531 condition failed: assert firstBlock.isFloor || newBlocks.size() == 1;");
  [firstBlock compileIndexWithJavaUtilList:newBlocks_ withOrgApacheLuceneStoreRAMOutputStream:this$0_->scratchBytes_ withOrgApacheLuceneUtilIntsRefBuilder:this$0_->scratchIntsRef_];
  [((id<JavaUtilList>) nil_chk([pending_ subListWithInt:[pending_ size] - count withInt:[pending_ size]])) clear];
  [pending_ addWithId:firstBlock];
  [newBlocks_ clear];
}

- (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *)writeBlockWithInt:(jint)prefixLength
                                                                                  withBoolean:(jboolean)isFloor
                                                                                      withInt:(jint)floorLeadLabel
                                                                                      withInt:(jint)start
                                                                                      withInt:(jint)end
                                                                                  withBoolean:(jboolean)hasTerms
                                                                                  withBoolean:(jboolean)hasSubBlocks {
  return OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(self, prefixLength, isFloor, floorLeadLabel, start, end, hasTerms, hasSubBlocks);
}

- (instancetype)initWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter:(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *)outer$
                                                withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(self, outer$, fieldInfo);
  return self;
}

- (void)writeWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text
           withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum {
  OrgApacheLuceneCodecsBlockTermState *state = JreRetainedLocalValue([((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(this$0_->postingsWriter_)) writeTermWithOrgApacheLuceneUtilBytesRef:text withOrgApacheLuceneIndexTermsEnum:termsEnum withOrgApacheLuceneUtilFixedBitSet:docsSeen_]);
  if (state != nil && ((OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter *) cast_chk(this$0_->postingsWriter_, [OrgApacheLuceneCodecsIdversionIDVersionPostingsWriter class]))->lastDocID_ != -1) {
    JreAssert(state->docFreq_ != 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:739 condition failed: assert state.docFreq != 0;");
    JreAssert([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions] == JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS) || state->totalTermFreq_ >= state->docFreq_, JreStrcat("$@", @"postingsWriter=", this$0_->postingsWriter_));
    OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, text);
    OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *term = create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_(OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(text), state);
    [((id<JavaUtilList>) nil_chk(pending_)) addWithId:term];
    numTerms_++;
    if (firstPendingTerm_ == nil) {
      JreStrongAssign(&firstPendingTerm_, term);
    }
    JreStrongAssign(&lastPendingTerm_, term);
  }
}

- (void)pushTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text {
  OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, text);
}

- (void)finish {
  if (numTerms_ > 0) {
    [self writeBlocksWithInt:0 withInt:[((id<JavaUtilList>) nil_chk(pending_)) size]];
    JreAssert([pending_ size] == 1 && !((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *) nil_chk([pending_ getWithInt:0]))->isTerm_, JreStrcat("$I$@", @"pending.size()=", [pending_ size], @" pending=", pending_));
    OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *root = (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *) cast_chk([pending_ getWithInt:0], [OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock class]);
    JreAssert(((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *) nil_chk(root))->prefix_))->length_ == 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:802 condition failed: assert root.prefix.length == 0;");
    JreAssert([((OrgApacheLuceneUtilFstFST *) nil_chk(root->index_)) getEmptyOutput] != nil, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:803 condition failed: assert root.index.getEmptyOutput() != null;");
    indexStartFP_ = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(this$0_->indexOut_)) getFilePointer];
    [((OrgApacheLuceneUtilFstFST *) nil_chk(root->index_)) saveWithOrgApacheLuceneStoreDataOutput:this$0_->indexOut_];
    JreAssert(firstPendingTerm_ != nil, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:818 condition failed: assert firstPendingTerm != null;");
    OrgApacheLuceneUtilBytesRef *minTerm = create_OrgApacheLuceneUtilBytesRef_initWithByteArray_(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *) nil_chk(firstPendingTerm_))->termBytes_);
    JreAssert(lastPendingTerm_ != nil, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:821 condition failed: assert lastPendingTerm != null;");
    OrgApacheLuceneUtilBytesRef *maxTerm = create_OrgApacheLuceneUtilBytesRef_initWithByteArray_(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *) nil_chk(lastPendingTerm_))->termBytes_);
    [((id<JavaUtilList>) nil_chk(this$0_->fields_)) addWithId:create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(fieldInfo_, [((OrgApacheLuceneUtilFstFST *) nil_chk(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *) nil_chk(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *) cast_chk([pending_ getWithInt:0], [OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock class]))))->index_)) getEmptyOutput], numTerms_, indexStartFP_, longsSize_, minTerm, maxTerm)];
  }
  else {
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fieldInfo_);
  RELEASE_(docsSeen_);
  RELEASE_(lastTerm_);
  RELEASE_(prefixStarts_);
  RELEASE_(longs_);
  RELEASE_(pending_);
  RELEASE_(newBlocks_);
  RELEASE_(firstPendingTerm_);
  RELEASE_(lastPendingTerm_);
  RELEASE_(suffixWriter_);
  RELEASE_(metaWriter_);
  RELEASE_(bytesWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x0, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock;", 0x2, 3, 4, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(writeBlocksWithInt:withInt:);
  methods[1].selector = @selector(writeBlockWithInt:withBoolean:withInt:withInt:withInt:withBoolean:withBoolean:);
  methods[2].selector = @selector(initWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter:withOrgApacheLuceneIndexFieldInfo:);
  methods[3].selector = @selector(writeWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermsEnum:);
  methods[4].selector = @selector(pushTermWithOrgApacheLuceneUtilBytesRef:);
  methods[5].selector = @selector(finish);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "fieldInfo_", "LOrgApacheLuceneIndexFieldInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "longsSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numTerms_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docsSeen_", "LOrgApacheLuceneUtilFixedBitSet;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexStartFP_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastTerm_", "LOrgApacheLuceneUtilBytesRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prefixStarts_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "longs_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pending_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "newBlocks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "firstPendingTerm_", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPendingTerm_", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suffixWriter_", "LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "metaWriter_", "LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bytesWriter_", "LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "writeBlocks", "II", "LJavaIoIOException;", "writeBlock", "IZIIIZZ", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter;LOrgApacheLuceneIndexFieldInfo;", "write", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneIndexTermsEnum;", "pushTerm", "LOrgApacheLuceneUtilBytesRef;", "Ljava/util/List<Lorg/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter$PendingEntry;>;", "Ljava/util/List<Lorg/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter$PendingBlock;>;", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter = { "TermsWriter", "org.apache.lucene.codecs.idversion", ptrTable, methods, fields, 7, 0x0, 6, 16, 12, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter;
}

@end

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter *self, jint prefixLength, jboolean isFloor, jint floorLeadLabel, jint start, jint end, jboolean hasTerms, jboolean hasSubBlocks) {
  JreAssert(end > start, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:551 condition failed: assert end > start;");
  jlong startFP = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->this$0_->out_)) getFilePointer];
  jboolean hasFloorLeadLabel = isFloor && floorLeadLabel != -1;
  OrgApacheLuceneUtilBytesRef *prefix = create_OrgApacheLuceneUtilBytesRef_initWithInt_(prefixLength + (hasFloorLeadLabel ? 1 : 0));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->lastTerm_)) bytes], 0, prefix->bytes_, 0, prefixLength);
  prefix->length_ = prefixLength;
  jint numEntries = end - start;
  jint code = JreLShift32(numEntries, 1);
  if (end == [((id<JavaUtilList>) nil_chk(self->pending_)) size]) {
    code |= 1;
  }
  [self->this$0_->out_ writeVIntWithInt:code];
  jboolean isLeafBlock = hasSubBlocks == false;
  id<JavaUtilList> subIndices;
  jboolean absolute = true;
  jlong maxVersionInBlock = -1;
  if (isLeafBlock) {
    subIndices = nil;
    for (jint i = start; i < end; i++) {
      OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *ent = JreRetainedLocalValue([self->pending_ getWithInt:i]);
      JreAssert(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *) nil_chk(ent))->isTerm_, JreStrcat("$I", @"i=", i));
      OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *term = (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *) cast_chk(ent, [OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm class]);
      JreAssert(OrgApacheLuceneUtilStringHelper_startsWithWithByteArray_withOrgApacheLuceneUtilBytesRef_(term->termBytes_, prefix), JreStrcat("$@$@", @"term.term=", term->termBytes_, @" prefix=", prefix));
      OrgApacheLuceneCodecsBlockTermState *state = JreRetainedLocalValue(term->state_);
      maxVersionInBlock = JavaLangMath_maxWithLong_withLong_(maxVersionInBlock, ((OrgApacheLuceneCodecsIdversionIDVersionTermState *) nil_chk(((OrgApacheLuceneCodecsIdversionIDVersionTermState *) cast_chk(state, [OrgApacheLuceneCodecsIdversionIDVersionTermState class]))))->idVersion_);
      jint suffix = ((IOSByteArray *) nil_chk(term->termBytes_))->size_ - prefixLength;
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:suffix];
      [self->suffixWriter_ writeBytesWithByteArray:term->termBytes_ withInt:prefixLength withInt:suffix];
      JreAssert(floorLeadLabel == -1 || (IOSByteArray_Get(term->termBytes_, prefixLength) & (jint) 0xff) >= floorLeadLabel, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:611 condition failed: assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;");
      [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(self->this$0_->postingsWriter_)) encodeTermWithLongArray:self->longs_ withOrgApacheLuceneStoreDataOutput:self->bytesWriter_ withOrgApacheLuceneIndexFieldInfo:self->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state withBoolean:absolute];
      for (jint pos = 0; pos < self->longsSize_; pos++) {
        JreAssert(IOSLongArray_Get(nil_chk(self->longs_), pos) >= 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:616 condition failed: assert longs[pos] >= 0;");
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->metaWriter_)) writeVLongWithLong:IOSLongArray_Get(self->longs_, pos)];
      }
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->bytesWriter_)) writeToWithOrgApacheLuceneStoreDataOutput:self->metaWriter_];
      [self->bytesWriter_ reset];
      absolute = false;
    }
  }
  else {
    subIndices = create_JavaUtilArrayList_init();
    for (jint i = start; i < end; i++) {
      OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *ent = JreRetainedLocalValue([self->pending_ getWithInt:i]);
      if (((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingEntry *) nil_chk(ent))->isTerm_) {
        OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *term = (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm *) cast_chk(ent, [OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingTerm class]);
        JreAssert(OrgApacheLuceneUtilStringHelper_startsWithWithByteArray_withOrgApacheLuceneUtilBytesRef_(term->termBytes_, prefix), JreStrcat("$@$@", @"term.term=", term->termBytes_, @" prefix=", prefix));
        OrgApacheLuceneCodecsBlockTermState *state = JreRetainedLocalValue(term->state_);
        maxVersionInBlock = JavaLangMath_maxWithLong_withLong_(maxVersionInBlock, ((OrgApacheLuceneCodecsIdversionIDVersionTermState *) nil_chk(((OrgApacheLuceneCodecsIdversionIDVersionTermState *) cast_chk(state, [OrgApacheLuceneCodecsIdversionIDVersionTermState class]))))->idVersion_);
        jint suffix = ((IOSByteArray *) nil_chk(term->termBytes_))->size_ - prefixLength;
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:JreLShift32(suffix, 1)];
        [self->suffixWriter_ writeBytesWithByteArray:term->termBytes_ withInt:prefixLength withInt:suffix];
        JreAssert(floorLeadLabel == -1 || (IOSByteArray_Get(term->termBytes_, prefixLength) & (jint) 0xff) >= floorLeadLabel, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:646 condition failed: assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;");
        [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(self->this$0_->postingsWriter_)) encodeTermWithLongArray:self->longs_ withOrgApacheLuceneStoreDataOutput:self->bytesWriter_ withOrgApacheLuceneIndexFieldInfo:self->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state withBoolean:absolute];
        for (jint pos = 0; pos < self->longsSize_; pos++) {
          JreAssert(IOSLongArray_Get(nil_chk(self->longs_), pos) >= 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:659 condition failed: assert longs[pos] >= 0;");
          [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->metaWriter_)) writeVLongWithLong:IOSLongArray_Get(self->longs_, pos)];
        }
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->bytesWriter_)) writeToWithOrgApacheLuceneStoreDataOutput:self->metaWriter_];
        [self->bytesWriter_ reset];
        absolute = false;
      }
      else {
        OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *block = (OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock *) cast_chk(ent, [OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock class]);
        maxVersionInBlock = JavaLangMath_maxWithLong_withLong_(maxVersionInBlock, block->maxVersion_);
        JreAssert(OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(block->prefix_, prefix), @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:668 condition failed: assert StringHelper.startsWith(block.prefix, prefix);");
        jint suffix = ((OrgApacheLuceneUtilBytesRef *) nil_chk(block->prefix_))->length_ - prefixLength;
        JreAssert(suffix > 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:671 condition failed: assert suffix > 0;");
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:(JreLShift32(suffix, 1)) | 1];
        [self->suffixWriter_ writeBytesWithByteArray:block->prefix_->bytes_ withInt:prefixLength withInt:suffix];
        JreAssert(floorLeadLabel == -1 || (IOSByteArray_Get(nil_chk(block->prefix_->bytes_), prefixLength) & (jint) 0xff) >= floorLeadLabel, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:678 condition failed: assert floorLeadLabel == -1 || (block.prefix.bytes[prefixLength] & 0xff) >= floorLeadLabel;");
        JreAssert(block->fp_ < startFP, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:680 condition failed: assert block.fp < startFP;");
        [self->suffixWriter_ writeVLongWithLong:startFP - block->fp_];
        [subIndices addWithId:block->index_];
      }
    }
    JreAssert([subIndices size] != 0, @"org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.java:696 condition failed: assert subIndices.size() != 0;");
  }
  [self->this$0_->out_ writeVIntWithInt:(jint) (JreLShift64([((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) getFilePointer], 1)) | (isLeafBlock ? 1 : 0)];
  [self->suffixWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->out_];
  [self->suffixWriter_ reset];
  [self->this$0_->out_ writeVIntWithInt:(jint) [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->metaWriter_)) getFilePointer]];
  [self->metaWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->out_];
  [self->metaWriter_ reset];
  if (hasFloorLeadLabel) {
    *IOSByteArray_GetRef(nil_chk(prefix->bytes_), prefix->length_++) = (jbyte) floorLeadLabel;
  }
  return create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(prefix, maxVersionInBlock, startFP, hasTerms, isFloor, floorLeadLabel, subIndices);
}

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter *self, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->lastTerm_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->prefixStarts_, [IOSIntArray newArrayWithLength:8]);
  JreStrongAssignAndConsume(&self->pending_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->newBlocks_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->suffixWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->metaWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->bytesWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreStrongAssignAndConsume(&self->docsSeen_, new_OrgApacheLuceneUtilFixedBitSet_initWithInt_(outer$->maxDoc_));
  self->longsSize_ = [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(outer$->postingsWriter_)) setFieldWithOrgApacheLuceneIndexFieldInfo:fieldInfo];
  JreStrongAssignAndConsume(&self->longs_, [IOSLongArray newArrayWithLength:self->longsSize_]);
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter *new_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, initWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter *create_OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter, initWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

void OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter *self, OrgApacheLuceneUtilBytesRef *text) {
  jint limit = JavaLangMath_minWithInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->lastTerm_)) length], ((OrgApacheLuceneUtilBytesRef *) nil_chk(text))->length_);
  jint pos = 0;
  while (pos < limit && [self->lastTerm_ byteAtWithInt:pos] == IOSByteArray_Get(nil_chk(text->bytes_), text->offset_ + pos)) {
    pos++;
  }
  for (jint i = [self->lastTerm_ length] - 1; i >= pos; i--) {
    jint prefixTopSize = [((id<JavaUtilList>) nil_chk(self->pending_)) size] - IOSIntArray_Get(nil_chk(self->prefixStarts_), i);
    if (prefixTopSize >= self->this$0_->minItemsInBlock_) {
      [self writeBlocksWithInt:i + 1 withInt:prefixTopSize];
      *IOSIntArray_GetRef(nil_chk(self->prefixStarts_), i) -= prefixTopSize - 1;
    }
  }
  if (((IOSIntArray *) nil_chk(self->prefixStarts_))->size_ < text->length_) {
    JreStrongAssign(&self->prefixStarts_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(self->prefixStarts_, text->length_));
  }
  for (jint i = pos; i < text->length_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->prefixStarts_), i) = [((id<JavaUtilList>) nil_chk(self->pending_)) size];
  }
  [self->lastTerm_ copyBytesWithOrgApacheLuceneUtilBytesRef:text];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_TermsWriter)
