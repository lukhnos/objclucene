//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.h"
#include "org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.h"
#include "org/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/idversion/VersionFieldReader.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/fst/FST.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame () {
 @public
  OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *ste_;
  jint startBytePos_;
  jint suffix_;
  jlong subCode_;
}

- (jboolean)prefixMatchesWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target;

- (void)fillTerm;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame, ste_, OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *)

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *self, OrgApacheLuceneUtilBytesRef *target);

__attribute__((unused)) static void OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *self);

@implementation OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame

- (instancetype)initPackagePrivateWithOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum:(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *)ste
                                                                                      withInt:(jint)ord {
  OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_initPackagePrivateWithOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum_withInt_(self, ste, ord);
  return self;
}

- (void)setFloorDataWithOrgApacheLuceneStoreByteArrayDataInput:(OrgApacheLuceneStoreByteArrayDataInput *)inArg
                               withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)source {
  jint numBytes = ((OrgApacheLuceneUtilBytesRef *) nil_chk(source))->length_ - ([((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(inArg)) getPosition] - source->offset_);
  if (numBytes > ((IOSByteArray *) nil_chk(floorData_))->size_) {
    JreStrongAssignAndConsume(&floorData_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(source->bytes_, source->offset_ + [inArg getPosition], floorData_, 0, numBytes);
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(floorDataReader_)) resetWithByteArray:floorData_ withInt:0 withInt:numBytes];
  numFollowFloorBlocks_ = [floorDataReader_ readVInt];
  nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
}

- (jint)getTermBlockOrd {
  return isLeafBlock_ ? nextEnt_ : ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_;
}

- (void)loadNextFloorBlock {
  JreAssert(arc_ == nil || isFloor_, JreStrcat("$@$Z", @"arc=", arc_, @" isFloor=", isFloor_));
  fp_ = fpEnd_;
  nextEnt_ = -1;
  [self loadBlock];
}

- (void)loadBlock {
  [((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(ste_)) initIndexInput];
  if (nextEnt_ != -1) {
    return;
  }
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(ste_->in_)) seekWithLong:fp_];
  jint code = [((OrgApacheLuceneStoreIndexInput *) nil_chk(ste_->in_)) readVInt];
  entCount_ = JreURShift32(code, 1);
  JreAssert(entCount_ > 0, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:156 condition failed: assert entCount > 0;");
  isLastInFloor_ = ((code & 1) != 0);
  JreAssert(arc_ == nil || (isLastInFloor_ || isFloor_), @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:158 condition failed: assert arc == null || (isLastInFloor || isFloor);");
  code = [((OrgApacheLuceneStoreIndexInput *) nil_chk(ste_->in_)) readVInt];
  isLeafBlock_ = ((code & 1) != 0);
  jint numBytes = JreURShift32(code, 1);
  if (((IOSByteArray *) nil_chk(suffixBytes_))->size_ < numBytes) {
    JreStrongAssignAndConsume(&suffixBytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(ste_->in_)) readBytesWithByteArray:suffixBytes_ withInt:0 withInt:numBytes];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) resetWithByteArray:suffixBytes_ withInt:0 withInt:numBytes];
  metaDataUpto_ = 0;
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_ = 0;
  nextEnt_ = 0;
  lastSubFP_ = -1;
  numBytes = [((OrgApacheLuceneStoreIndexInput *) nil_chk(ste_->in_)) readVInt];
  if (bytes_ == nil) {
    JreStrongAssignAndConsume(&bytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
    JreStrongAssignAndConsume(&bytesReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  }
  else if (bytes_->size_ < numBytes) {
    JreStrongAssignAndConsume(&bytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numBytes, 1)]);
  }
  [((OrgApacheLuceneStoreIndexInput *) nil_chk(ste_->in_)) readBytesWithByteArray:bytes_ withInt:0 withInt:numBytes];
  [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(bytesReader_)) resetWithByteArray:bytes_ withInt:0 withInt:numBytes];
  fpEnd_ = [((OrgApacheLuceneStoreIndexInput *) nil_chk(ste_->in_)) getFilePointer];
}

- (void)rewind {
  fp_ = fpOrig_;
  nextEnt_ = -1;
  hasTerms_ = hasTermsOrig_;
  if (isFloor_) {
    [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(floorDataReader_)) rewind];
    numFollowFloorBlocks_ = [floorDataReader_ readVInt];
    nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
  }
}

- (jboolean)next {
  return isLeafBlock_ ? [self nextLeaf] : [self nextNonLeaf];
}

- (jboolean)nextLeaf {
  JreAssert(nextEnt_ != -1 && nextEnt_ < entCount_, JreStrcat("$I$I$J", @"nextEnt=", nextEnt_, @" entCount=", entCount_, @" fp=", fp_));
  nextEnt_++;
  suffix_ = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
  startBytePos_ = [suffixesReader_ getPosition];
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(ste_))->term_)) setLengthWithInt:prefix_ + suffix_];
  [ste_->term_ growWithInt:[ste_->term_ length]];
  [suffixesReader_ readBytesWithByteArray:[ste_->term_ bytes] withInt:prefix_ withInt:suffix_];
  ste_->termExists_ = true;
  return false;
}

- (jboolean)nextNonLeaf {
  JreAssert(nextEnt_ != -1 && nextEnt_ < entCount_, JreStrcat("$I$I$J", @"nextEnt=", nextEnt_, @" entCount=", entCount_, @" fp=", fp_));
  nextEnt_++;
  jint code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
  suffix_ = JreURShift32(code, 1);
  startBytePos_ = [suffixesReader_ getPosition];
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(ste_))->term_)) setLengthWithInt:prefix_ + suffix_];
  [ste_->term_ growWithInt:[ste_->term_ length]];
  [suffixesReader_ readBytesWithByteArray:[ste_->term_ bytes] withInt:prefix_ withInt:suffix_];
  if ((code & 1) == 0) {
    ste_->termExists_ = true;
    subCode_ = 0;
    ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_++;
    return false;
  }
  else {
    ste_->termExists_ = false;
    subCode_ = [suffixesReader_ readVLong];
    lastSubFP_ = fp_ - subCode_;
    return true;
  }
}

- (void)scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  if (!isFloor_ || ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->length_ <= prefix_) {
    return;
  }
  jint targetLabel = IOSByteArray_Get(nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->bytes_), target->offset_ + prefix_) & (jint) 0xFF;
  if (targetLabel < nextFloorLabel_) {
    return;
  }
  JreAssert(numFollowFloorBlocks_ != 0, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:329 condition failed: assert numFollowFloorBlocks != 0;");
  jlong newFP = fpOrig_;
  while (true) {
    jlong code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(floorDataReader_)) readVLong];
    newFP = fpOrig_ + (JreURShift64(code, 1));
    hasTerms_ = ((code & 1) != 0);
    isLastInFloor_ = (numFollowFloorBlocks_ == 1);
    numFollowFloorBlocks_--;
    if (isLastInFloor_) {
      nextFloorLabel_ = 256;
      break;
    }
    else {
      nextFloorLabel_ = [floorDataReader_ readByte] & (jint) 0xff;
      if (targetLabel < nextFloorLabel_) {
        break;
      }
    }
  }
  if (newFP != fp_) {
    nextEnt_ = -1;
    fp_ = newFP;
  }
  else {
  }
}

- (void)decodeMetaData {
  JreAssert(nextEnt_ >= 0, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:378 condition failed: assert nextEnt >= 0;");
  jint limit = [self getTermBlockOrd];
  jboolean absolute = metaDataUpto_ == 0;
  while (metaDataUpto_ < limit) {
    ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->docFreq_ = 1;
    state_->totalTermFreq_ = 1;
    for (jint i = 0; i < ((OrgApacheLuceneCodecsIdversionVersionFieldReader *) nil_chk(((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(ste_))->fr_))->longsSize_; i++) {
      *IOSLongArray_GetRef(nil_chk(longs_), i) = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(bytesReader_)) readVLong];
    }
    [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader *) nil_chk(ste_->fr_->parent_))->postingsReader_)) decodeTermWithLongArray:longs_ withOrgApacheLuceneStoreDataInput:bytesReader_ withOrgApacheLuceneIndexFieldInfo:ste_->fr_->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state_ withBoolean:absolute];
    metaDataUpto_++;
    absolute = false;
  }
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_ = metaDataUpto_;
}

- (jboolean)prefixMatchesWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  return OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(self, target);
}

- (void)scanToSubBlockWithLong:(jlong)subFP {
  JreAssert(!isLeafBlock_, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:427 condition failed: assert !isLeafBlock;");
  if (lastSubFP_ == subFP) {
    return;
  }
  JreAssert(subFP < fp_, JreStrcat("$J$J", @"fp=", fp_, @" subFP=", subFP));
  jlong targetSubCode = fp_ - subFP;
  while (true) {
    JreAssert(nextEnt_ < entCount_, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:438 condition failed: assert nextEnt < entCount;");
    nextEnt_++;
    jint code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
    [suffixesReader_ skipBytesWithLong:isLeafBlock_ ? code : JreURShift32(code, 1)];
    if ((code & 1) != 0) {
      jlong subCode = [suffixesReader_ readVLong];
      if (targetSubCode == subCode) {
        lastSubFP_ = subFP;
        return;
      }
    }
    else {
      ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_++;
    }
  }
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatus *)scanToTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
                                                                            withBoolean:(jboolean)exactOnly {
  return isLeafBlock_ ? [self scanToTermLeafWithOrgApacheLuceneUtilBytesRef:target withBoolean:exactOnly] : [self scanToTermNonLeafWithOrgApacheLuceneUtilBytesRef:target withBoolean:exactOnly];
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatus *)scanToTermLeafWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
                                                                                withBoolean:(jboolean)exactOnly {
  JreAssert(nextEnt_ != -1, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:472 condition failed: assert nextEnt != -1;");
  ((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(ste_))->termExists_ = true;
  subCode_ = 0;
  if (nextEnt_ == entCount_) {
    if (exactOnly) {
      OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
    }
    return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, END);
  }
  JreAssert(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(self, target), @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:484 condition failed: assert prefixMatches(target);");
  while (true) {
    {
      nextEnt_++;
      suffix_ = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
      jint termLen = prefix_ + suffix_;
      startBytePos_ = [suffixesReader_ getPosition];
      [suffixesReader_ skipBytesWithLong:suffix_];
      jint targetLimit = ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->offset_ + (target->length_ < termLen ? target->length_ : termLen);
      jint targetPos = target->offset_ + prefix_;
      jint bytePos = startBytePos_;
      while (true) {
        jint cmp;
        jboolean stop;
        if (targetPos < targetLimit) {
          cmp = (IOSByteArray_Get(nil_chk(suffixBytes_), bytePos++) & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), targetPos++) & (jint) 0xFF);
          stop = false;
        }
        else {
          JreAssert(targetPos == targetLimit, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:518 condition failed: assert targetPos == targetLimit;");
          cmp = termLen - target->length_;
          stop = true;
        }
        if (cmp < 0) {
          if (nextEnt_ == entCount_) {
            if (exactOnly) {
              OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
            }
            goto break_nextTerm;
          }
          else {
            goto continue_nextTerm;
          }
        }
        else if (cmp > 0) {
          OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
          if (!exactOnly && !ste_->termExists_) {
            JreStrongAssign(&ste_->currentFrame_, [ste_ pushFrameWithOrgApacheLuceneUtilFstFST_Arc:nil withLong:((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_))->lastSubFP_ withInt:termLen]);
            [((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_)) loadBlock];
            while ([((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_)) next]) {
              JreStrongAssign(&ste_->currentFrame_, [ste_ pushFrameWithOrgApacheLuceneUtilFstFST_Arc:nil withLong:((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_))->lastSubFP_ withInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(ste_->term_)) length]]);
              [((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_)) loadBlock];
            }
          }
          return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, NOT_FOUND);
        }
        else if (stop) {
          JreAssert(ste_->termExists_, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:564 condition failed: assert ste.termExists;");
          OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
          return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND);
        }
      }
    }
    continue_nextTerm: ;
  }
  break_nextTerm: ;
  if (exactOnly) {
    OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
  }
  return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, END);
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatus *)scanToTermNonLeafWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target
                                                                                   withBoolean:(jboolean)exactOnly {
  JreAssert(nextEnt_ != -1, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:598 condition failed: assert nextEnt != -1;");
  if (nextEnt_ == entCount_) {
    if (exactOnly) {
      OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
      ((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(ste_))->termExists_ = (subCode_ == 0);
    }
    return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, END);
  }
  JreAssert(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(self, target), @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:608 condition failed: assert prefixMatches(target);");
  while (true) {
    {
      nextEnt_++;
      jint code = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(suffixesReader_)) readVInt];
      suffix_ = JreURShift32(code, 1);
      ((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(ste_))->termExists_ = ((code & 1) == 0);
      jint termLen = prefix_ + suffix_;
      startBytePos_ = [suffixesReader_ getPosition];
      [suffixesReader_ skipBytesWithLong:suffix_];
      if (ste_->termExists_) {
        ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state_))->termBlockOrd_++;
        subCode_ = 0;
      }
      else {
        subCode_ = [suffixesReader_ readVLong];
        lastSubFP_ = fp_ - subCode_;
      }
      jint targetLimit = ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->offset_ + (target->length_ < termLen ? target->length_ : termLen);
      jint targetPos = target->offset_ + prefix_;
      jint bytePos = startBytePos_;
      while (true) {
        jint cmp;
        jboolean stop;
        if (targetPos < targetLimit) {
          cmp = (IOSByteArray_Get(nil_chk(suffixBytes_), bytePos++) & (jint) 0xFF) - (IOSByteArray_Get(nil_chk(target->bytes_), targetPos++) & (jint) 0xFF);
          stop = false;
        }
        else {
          JreAssert(targetPos == targetLimit, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:650 condition failed: assert targetPos == targetLimit;");
          cmp = termLen - target->length_;
          stop = true;
        }
        if (cmp < 0) {
          if (nextEnt_ == entCount_) {
            if (exactOnly) {
              OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
            }
            goto break_nextTerm;
          }
          else {
            goto continue_nextTerm;
          }
        }
        else if (cmp > 0) {
          OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
          if (!exactOnly && !ste_->termExists_) {
            JreStrongAssign(&ste_->currentFrame_, [ste_ pushFrameWithOrgApacheLuceneUtilFstFST_Arc:nil withLong:((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_))->lastSubFP_ withInt:termLen]);
            [((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_)) loadBlock];
            while ([((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_)) next]) {
              JreStrongAssign(&ste_->currentFrame_, [ste_ pushFrameWithOrgApacheLuceneUtilFstFST_Arc:nil withLong:((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_))->lastSubFP_ withInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(ste_->term_)) length]]);
              [((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *) nil_chk(ste_->currentFrame_)) loadBlock];
            }
          }
          return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, NOT_FOUND);
        }
        else if (stop) {
          JreAssert(ste_->termExists_, @"org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnumFrame.java:697 condition failed: assert ste.termExists;");
          OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
          return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND);
        }
      }
    }
    continue_nextTerm: ;
  }
  break_nextTerm: ;
  if (exactOnly) {
    OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
  }
  return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, END);
}

- (void)fillTerm {
  OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(self);
}

- (void)dealloc {
  RELEASE_(arc_);
  RELEASE_(suffixBytes_);
  RELEASE_(suffixesReader_);
  RELEASE_(floorData_);
  RELEASE_(floorDataReader_);
  RELEASE_(state_);
  RELEASE_(longs_);
  RELEASE_(bytes_);
  RELEASE_(bytesReader_);
  RELEASE_(ste_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum_SeekStatus;", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum_SeekStatus;", 0x1, 11, 10, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum_SeekStatus;", 0x1, 12, 10, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum:withInt:);
  methods[1].selector = @selector(setFloorDataWithOrgApacheLuceneStoreByteArrayDataInput:withOrgApacheLuceneUtilBytesRef:);
  methods[2].selector = @selector(getTermBlockOrd);
  methods[3].selector = @selector(loadNextFloorBlock);
  methods[4].selector = @selector(loadBlock);
  methods[5].selector = @selector(rewind);
  methods[6].selector = @selector(next);
  methods[7].selector = @selector(nextLeaf);
  methods[8].selector = @selector(nextNonLeaf);
  methods[9].selector = @selector(scanToFloorFrameWithOrgApacheLuceneUtilBytesRef:);
  methods[10].selector = @selector(decodeMetaData);
  methods[11].selector = @selector(prefixMatchesWithOrgApacheLuceneUtilBytesRef:);
  methods[12].selector = @selector(scanToSubBlockWithLong:);
  methods[13].selector = @selector(scanToTermWithOrgApacheLuceneUtilBytesRef:withBoolean:);
  methods[14].selector = @selector(scanToTermLeafWithOrgApacheLuceneUtilBytesRef:withBoolean:);
  methods[15].selector = @selector(scanToTermNonLeafWithOrgApacheLuceneUtilBytesRef:withBoolean:);
  methods[16].selector = @selector(fillTerm);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ord_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "hasTerms_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hasTermsOrig_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isFloor_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "maxIDVersion_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "arc_", "LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "fp_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fpOrig_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fpEnd_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "suffixBytes_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "suffixesReader_", "LOrgApacheLuceneStoreByteArrayDataInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "floorData_", "[B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "floorDataReader_", "LOrgApacheLuceneStoreByteArrayDataInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefix_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "entCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextEnt_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isLastInFloor_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isLeafBlock_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastSubFP_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextFloorLabel_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numFollowFloorBlocks_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "metaDataUpto_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "state_", "LOrgApacheLuceneCodecsBlockTermState;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "longs_", "[J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bytes_", "[B", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bytesReader_", "LOrgApacheLuceneStoreByteArrayDataInput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ste_", "LOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "startBytePos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suffix_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subCode_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum;I", "LJavaIoIOException;", "setFloorData", "LOrgApacheLuceneStoreByteArrayDataInput;LOrgApacheLuceneUtilBytesRef;", "scanToFloorFrame", "LOrgApacheLuceneUtilBytesRef;", "prefixMatches", "scanToSubBlock", "J", "scanToTerm", "LOrgApacheLuceneUtilBytesRef;Z", "scanToTermLeaf", "scanToTermNonLeaf", "Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame = { "IDVersionSegmentTermsEnumFrame", "org.apache.lucene.codecs.idversion", ptrTable, methods, fields, 7, 0x10, 17, 30, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame;
}

@end

void OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_initPackagePrivateWithOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum_withInt_(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *self, OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *ste, jint ord) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->suffixBytes_, [IOSByteArray newArrayWithLength:128]);
  JreStrongAssignAndConsume(&self->suffixesReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssignAndConsume(&self->floorData_, [IOSByteArray newArrayWithLength:32]);
  JreStrongAssignAndConsume(&self->floorDataReader_, new_OrgApacheLuceneStoreByteArrayDataInput_init());
  JreStrongAssign(&self->ste_, ste);
  self->ord_ = ord;
  JreStrongAssign(&self->state_, [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsIdversionVersionFieldReader *) nil_chk(((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(ste))->fr_))->parent_))->postingsReader_)) newTermState]);
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->state_))->totalTermFreq_ = -1;
  JreStrongAssignAndConsume(&self->longs_, [IOSLongArray newArrayWithLength:ste->fr_->longsSize_]);
}

OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *new_OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_initPackagePrivateWithOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum_withInt_(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *ste, jint ord) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame, initPackagePrivateWithOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum_withInt_, ste, ord)
}

OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *create_OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_initPackagePrivateWithOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum_withInt_(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *ste, jint ord) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame, initPackagePrivateWithOrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum_withInt_, ste, ord)
}

jboolean OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_prefixMatchesWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *self, OrgApacheLuceneUtilBytesRef *target) {
  for (jint bytePos = 0; bytePos < self->prefix_; bytePos++) {
    if (IOSByteArray_Get(nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->bytes_), target->offset_ + bytePos) != [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(self->ste_))->term_)) byteAtWithInt:bytePos]) {
      return false;
    }
  }
  return true;
}

void OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame_fillTerm(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame *self) {
  jint termLength = self->prefix_ + self->suffix_;
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(((OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum *) nil_chk(self->ste_))->term_)) setLengthWithInt:self->prefix_ + self->suffix_];
  [self->ste_->term_ growWithInt:termLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->suffixBytes_, self->startBytePos_, [self->ste_->term_ bytes], self->prefix_, self->suffix_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnumFrame)
