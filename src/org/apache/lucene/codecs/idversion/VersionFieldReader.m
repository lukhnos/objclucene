//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/idversion/IDVersionSegmentTermsEnum.h"
#include "org/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.h"
#include "org/apache/lucene/codecs/idversion/VersionFieldReader.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/PairOutputs.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/idversion/VersionFieldReader must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneCodecsIdversionVersionFieldReader

- (instancetype)initPackagePrivateWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader:(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader *)parent
                                                              withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                                                                       withLong:(jlong)numTerms
                                                     withOrgApacheLuceneUtilFstPairOutputs_Pair:(OrgApacheLuceneUtilFstPairOutputs_Pair *)rootCode
                                                                                       withLong:(jlong)sumTotalTermFreq
                                                                                       withLong:(jlong)sumDocFreq
                                                                                        withInt:(jint)docCount
                                                                                       withLong:(jlong)indexStartFP
                                                                                        withInt:(jint)longsSize
                                                             withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)indexIn
                                                                withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
                                                                withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm {
  OrgApacheLuceneCodecsIdversionVersionFieldReader_initPackagePrivateWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, parent, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, longsSize, indexIn, minTerm, maxTerm);
  return self;
}

- (OrgApacheLuceneUtilBytesRef *)getMin {
  if (minTerm_ == nil) {
    return [super getMin];
  }
  else {
    return minTerm_;
  }
}

- (OrgApacheLuceneUtilBytesRef *)getMax {
  if (maxTerm_ == nil) {
    return [super getMax];
  }
  else {
    return maxTerm_;
  }
}

- (jboolean)hasFreqs {
  return [((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS)] >= 0;
}

- (jboolean)hasOffsets {
  return [((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0;
}

- (jboolean)hasPositions {
  return [((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS)] >= 0;
}

- (jboolean)hasPayloads {
  return [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) hasPayloads];
}

- (OrgApacheLuceneIndexTermsEnum *)iterator {
  return create_OrgApacheLuceneCodecsIdversionIDVersionSegmentTermsEnum_initWithOrgApacheLuceneCodecsIdversionVersionFieldReader_(self);
}

- (jlong)size {
  return numTerms_;
}

- (jlong)getSumTotalTermFreq {
  return sumTotalTermFreq_;
}

- (jlong)getSumDocFreq {
  return sumDocFreq_;
}

- (jint)getDocCount {
  return docCount_;
}

- (jlong)ramBytesUsed {
  return ((index_ != nil) ? [((OrgApacheLuceneUtilFstFST *) nil_chk(index_)) ramBytesUsed] : 0);
}

- (id<JavaUtilCollection>)getChildResources {
  if (index_ == nil) {
    return JavaUtilCollections_emptyList();
  }
  else {
    return JavaUtilCollections_singletonListWithId_(OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"term index", index_));
  }
}

- (NSString *)description {
  return JreStrcat("$J$J$J$IC", @"IDVersionTerms(terms=", numTerms_, @",postings=", sumDocFreq_, @",positions=", sumTotalTermFreq_, @",docs=", docCount_, ')');
}

- (void)dealloc {
  RELEASE_(fieldInfo_);
  RELEASE_(rootCode_);
  RELEASE_(minTerm_);
  RELEASE_(maxTerm_);
  RELEASE_(parent_);
  RELEASE_(index_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, 2, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader:withOrgApacheLuceneIndexFieldInfo:withLong:withOrgApacheLuceneUtilFstPairOutputs_Pair:withLong:withLong:withInt:withLong:withInt:withOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:);
  methods[1].selector = @selector(getMin);
  methods[2].selector = @selector(getMax);
  methods[3].selector = @selector(hasFreqs);
  methods[4].selector = @selector(hasOffsets);
  methods[5].selector = @selector(hasPositions);
  methods[6].selector = @selector(hasPayloads);
  methods[7].selector = @selector(iterator);
  methods[8].selector = @selector(size);
  methods[9].selector = @selector(getSumTotalTermFreq);
  methods[10].selector = @selector(getSumDocFreq);
  methods[11].selector = @selector(getDocCount);
  methods[12].selector = @selector(ramBytesUsed);
  methods[13].selector = @selector(getChildResources);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "numTerms_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldInfo_", "LOrgApacheLuceneIndexFieldInfo;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sumTotalTermFreq_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sumDocFreq_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docCount_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexStartFP_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "rootBlockFP_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "rootCode_", "LOrgApacheLuceneUtilFstPairOutputs_Pair;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "minTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "longsSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parent_", "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader;LOrgApacheLuceneIndexFieldInfo;JLOrgApacheLuceneUtilFstPairOutputs_Pair;JJIJILOrgApacheLuceneStoreIndexInput;LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;", "LJavaIoIOException;", "(Lorg/apache/lucene/codecs/idversion/VersionBlockTreeTermsReader;Lorg/apache/lucene/index/FieldInfo;JLorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;JJIJILorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "toString", "Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;", "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/fst/PairOutputs$Pair<Lorg/apache/lucene/util/BytesRef;Ljava/lang/Long;>;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsIdversionVersionFieldReader = { "VersionFieldReader", "org.apache.lucene.codecs.idversion", ptrTable, methods, fields, 7, 0x10, 15, 13, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsIdversionVersionFieldReader;
}

@end

void OrgApacheLuceneCodecsIdversionVersionFieldReader_initPackagePrivateWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsIdversionVersionFieldReader *self, OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader *parent, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jlong indexStartFP, jint longsSize, OrgApacheLuceneStoreIndexInput *indexIn, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  OrgApacheLuceneIndexTerms_init(self);
  JreAssert(numTerms > 0, @"org/apache/lucene/codecs/idversion/VersionFieldReader.java:57 condition failed: assert numTerms > 0;");
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreStrongAssign(&self->parent_, parent);
  self->numTerms_ = numTerms;
  self->sumTotalTermFreq_ = sumTotalTermFreq;
  self->sumDocFreq_ = sumDocFreq;
  self->docCount_ = docCount;
  self->indexStartFP_ = indexStartFP;
  JreStrongAssign(&self->rootCode_, rootCode);
  self->longsSize_ = longsSize;
  JreStrongAssign(&self->minTerm_, minTerm);
  JreStrongAssign(&self->maxTerm_, maxTerm);
  self->rootBlockFP_ = JreURShift64([(create_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneUtilFstPairOutputs_Pair *) nil_chk(rootCode))->output1_))->bytes_, ((OrgApacheLuceneUtilBytesRef *) rootCode->output1_)->offset_, ((OrgApacheLuceneUtilBytesRef *) rootCode->output1_)->length_)) readVLong], OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter_OUTPUT_FLAGS_NUM_BITS);
  if (indexIn != nil) {
    OrgApacheLuceneStoreIndexInput *clone = [indexIn java_clone];
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(clone)) seekWithLong:indexStartFP];
    JreStrongAssignAndConsume(&self->index_, new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(clone, JreLoadStatic(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsWriter, FST_OUTPUTS)));
  }
  else {
    JreStrongAssign(&self->index_, nil);
  }
}

OrgApacheLuceneCodecsIdversionVersionFieldReader *new_OrgApacheLuceneCodecsIdversionVersionFieldReader_initPackagePrivateWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader *parent, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jlong indexStartFP, jint longsSize, OrgApacheLuceneStoreIndexInput *indexIn, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsIdversionVersionFieldReader, initPackagePrivateWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_, parent, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, longsSize, indexIn, minTerm, maxTerm)
}

OrgApacheLuceneCodecsIdversionVersionFieldReader *create_OrgApacheLuceneCodecsIdversionVersionFieldReader_initPackagePrivateWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader *parent, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, OrgApacheLuceneUtilFstPairOutputs_Pair *rootCode, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jlong indexStartFP, jint longsSize, OrgApacheLuceneStoreIndexInput *indexIn, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsIdversionVersionFieldReader, initPackagePrivateWithOrgApacheLuceneCodecsIdversionVersionBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilFstPairOutputs_Pair_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_, parent, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, longsSize, indexIn, minTerm, maxTerm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsIdversionVersionFieldReader)
