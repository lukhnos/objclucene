//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListWriter.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/util/MathUtil.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/MultiLevelSkipListWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsMultiLevelSkipListWriter () {
 @public
  /*!
   @brief the skip interval in the list with level = 0
   */
  jint skipInterval_;
  /*!
   @brief skipInterval used for level &gt; 0
   */
  jint skipMultiplier_;
  /*!
   @brief for every skip level a different buffer is used
   */
  IOSObjectArray *skipBuffer_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsMultiLevelSkipListWriter, skipBuffer_, IOSObjectArray *)

@implementation OrgApacheLuceneCodecsMultiLevelSkipListWriter

- (instancetype)initWithInt:(jint)skipInterval
                    withInt:(jint)skipMultiplier
                    withInt:(jint)maxSkipLevels
                    withInt:(jint)df {
  OrgApacheLuceneCodecsMultiLevelSkipListWriter_initWithInt_withInt_withInt_withInt_(self, skipInterval, skipMultiplier, maxSkipLevels, df);
  return self;
}

- (instancetype)initWithInt:(jint)skipInterval
                    withInt:(jint)maxSkipLevels
                    withInt:(jint)df {
  OrgApacheLuceneCodecsMultiLevelSkipListWriter_initWithInt_withInt_withInt_(self, skipInterval, maxSkipLevels, df);
  return self;
}

- (void)init__ {
  JreStrongAssignAndConsume(&skipBuffer_, [IOSObjectArray newArrayWithLength:numberOfSkipLevels_ type:OrgApacheLuceneStoreRAMOutputStream_class_()]);
  for (jint i = 0; i < numberOfSkipLevels_; i++) {
    IOSObjectArray_SetAndConsume(nil_chk(skipBuffer_), i, new_OrgApacheLuceneStoreRAMOutputStream_init());
  }
}

- (void)resetSkip {
  if (skipBuffer_ == nil) {
    [self init__];
  }
  else {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(skipBuffer_))->size_; i++) {
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(skipBuffer_, i))) reset];
    }
  }
}

- (void)writeSkipDataWithInt:(jint)level
withOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)skipBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)bufferSkipWithInt:(jint)df {
  JreAssert(JreIntMod(df, skipInterval_) == 0, @"org/apache/lucene/codecs/MultiLevelSkipListWriter.java:128 condition failed: assert df % skipInterval == 0;");
  jint numLevels = 1;
  df /= skipInterval_;
  while ((JreIntMod(df, skipMultiplier_)) == 0 && numLevels < numberOfSkipLevels_) {
    numLevels++;
    df /= skipMultiplier_;
  }
  jlong childPointer = 0;
  for (jint level = 0; level < numLevels; level++) {
    [self writeSkipDataWithInt:level withOrgApacheLuceneStoreIndexOutput:IOSObjectArray_Get(nil_chk(skipBuffer_), level)];
    jlong newChildPointer = [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), level))) getFilePointer];
    if (level != 0) {
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), level))) writeVLongWithLong:childPointer];
    }
    childPointer = newChildPointer;
  }
}

- (jlong)writeSkipWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)output {
  jlong skipPointer = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(output)) getFilePointer];
  if (skipBuffer_ == nil || skipBuffer_->size_ == 0) return skipPointer;
  for (jint level = numberOfSkipLevels_ - 1; level > 0; level--) {
    jlong length = [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), level))) getFilePointer];
    if (length > 0) {
      [output writeVLongWithLong:length];
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), level))) writeToWithOrgApacheLuceneStoreDataOutput:output];
    }
  }
  [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(IOSObjectArray_Get(nil_chk(skipBuffer_), 0))) writeToWithOrgApacheLuceneStoreDataOutput:output];
  return skipPointer;
}

- (void)dealloc {
  RELEASE_(skipBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 5, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 9, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:);
  methods[2].selector = @selector(init__);
  methods[3].selector = @selector(resetSkip);
  methods[4].selector = @selector(writeSkipDataWithInt:withOrgApacheLuceneStoreIndexOutput:);
  methods[5].selector = @selector(bufferSkipWithInt:);
  methods[6].selector = @selector(writeSkipWithOrgApacheLuceneStoreIndexOutput:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "numberOfSkipLevels_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "skipInterval_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipMultiplier_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipBuffer_", "[LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIII", "III", "init", "writeSkipData", "ILOrgApacheLuceneStoreIndexOutput;", "LJavaIoIOException;", "bufferSkip", "I", "writeSkip", "LOrgApacheLuceneStoreIndexOutput;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsMultiLevelSkipListWriter = { "MultiLevelSkipListWriter", "org.apache.lucene.codecs", ptrTable, methods, fields, 7, 0x401, 7, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsMultiLevelSkipListWriter;
}

@end

void OrgApacheLuceneCodecsMultiLevelSkipListWriter_initWithInt_withInt_withInt_withInt_(OrgApacheLuceneCodecsMultiLevelSkipListWriter *self, jint skipInterval, jint skipMultiplier, jint maxSkipLevels, jint df) {
  NSObject_init(self);
  self->skipInterval_ = skipInterval;
  self->skipMultiplier_ = skipMultiplier;
  if (df <= skipInterval) {
    self->numberOfSkipLevels_ = 1;
  }
  else {
    self->numberOfSkipLevels_ = 1 + OrgApacheLuceneUtilMathUtil_logWithLong_withInt_(JreIntDiv(df, skipInterval), skipMultiplier);
  }
  if (self->numberOfSkipLevels_ > maxSkipLevels) {
    self->numberOfSkipLevels_ = maxSkipLevels;
  }
}

void OrgApacheLuceneCodecsMultiLevelSkipListWriter_initWithInt_withInt_withInt_(OrgApacheLuceneCodecsMultiLevelSkipListWriter *self, jint skipInterval, jint maxSkipLevels, jint df) {
  OrgApacheLuceneCodecsMultiLevelSkipListWriter_initWithInt_withInt_withInt_withInt_(self, skipInterval, skipInterval, maxSkipLevels, df);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsMultiLevelSkipListWriter)
