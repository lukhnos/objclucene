//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/lucene50/ForUtil.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/codecs/lucene50/ForUtil.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/lucene50/ForUtil must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsLucene50ForUtil () {
 @public
  IOSIntArray *encodedSizes_;
  IOSObjectArray *encoders_;
  IOSObjectArray *decoders_;
  IOSIntArray *iterations_;
}

/*!
 @brief Compute the number of iterations required to decode <code>BLOCK_SIZE</code>
  values with the provided <code>Decoder</code>.
 */
+ (jint)computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder:(id<OrgApacheLuceneUtilPackedPackedInts_Decoder>)decoder;

/*!
 @brief Compute the number of bytes required to encode a block of values that require 
 <code>bitsPerValue</code> bits per value with format <code>format</code>.
 */
+ (jint)encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                                          withInt:(jint)packedIntsVersion
                                                          withInt:(jint)bitsPerValue;

+ (jboolean)isAllEqualWithIntArray:(IOSIntArray *)data;

/*!
 @brief Compute the number of bits required to serialize any of the longs in 
 <code>data</code>.
 */
+ (jint)bitsRequiredWithIntArray:(IOSIntArray *)data;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50ForUtil, encodedSizes_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50ForUtil, encoders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50ForUtil, decoders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50ForUtil, iterations_, IOSIntArray *)

/*!
 @brief Special number of bits per value used whenever all values to encode are equal.
 */
inline jint OrgApacheLuceneCodecsLucene50ForUtil_get_ALL_VALUES_EQUAL(void);
#define OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50ForUtil, ALL_VALUES_EQUAL, jint)

__attribute__((unused)) static jint OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder);

__attribute__((unused)) static jint OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *format, jint packedIntsVersion, jint bitsPerValue);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsLucene50ForUtil_isAllEqualWithIntArray_(IOSIntArray *data);

__attribute__((unused)) static jint OrgApacheLuceneCodecsLucene50ForUtil_bitsRequiredWithIntArray_(IOSIntArray *data);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsLucene50ForUtil)

jint OrgApacheLuceneCodecsLucene50ForUtil_MAX_DATA_SIZE;

@implementation OrgApacheLuceneCodecsLucene50ForUtil

+ (jint)MAX_ENCODED_SIZE {
  return OrgApacheLuceneCodecsLucene50ForUtil_MAX_ENCODED_SIZE;
}

+ (jint)MAX_DATA_SIZE {
  return OrgApacheLuceneCodecsLucene50ForUtil_MAX_DATA_SIZE;
}

+ (jint)computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder:(id<OrgApacheLuceneUtilPackedPackedInts_Decoder>)decoder {
  return OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(decoder);
}

+ (jint)encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format
                                                          withInt:(jint)packedIntsVersion
                                                          withInt:(jint)bitsPerValue {
  return OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(format, packedIntsVersion, bitsPerValue);
}

- (instancetype)initPackagePrivateWithFloat:(jfloat)acceptableOverheadRatio
         withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_(self, acceptableOverheadRatio, outArg);
  return self;
}

- (instancetype)initPackagePrivateWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg {
  OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithOrgApacheLuceneStoreDataInput_(self, inArg);
  return self;
}

- (void)writeBlockWithIntArray:(IOSIntArray *)data
                 withByteArray:(IOSByteArray *)encoded
withOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg {
  if (OrgApacheLuceneCodecsLucene50ForUtil_isAllEqualWithIntArray_(data)) {
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL];
    [outArg writeVIntWithInt:IOSIntArray_Get(nil_chk(data), 0)];
    return;
  }
  jint numBits = OrgApacheLuceneCodecsLucene50ForUtil_bitsRequiredWithIntArray_(data);
  JreAssert(numBits > 0 && numBits <= 32, JavaLangInteger_valueOfWithInt_(numBits));
  id<OrgApacheLuceneUtilPackedPackedInts_Encoder> encoder = IOSObjectArray_Get(nil_chk(encoders_), numBits);
  jint iters = IOSIntArray_Get(nil_chk(iterations_), numBits);
  JreAssert(iters * [((id<OrgApacheLuceneUtilPackedPackedInts_Encoder>) nil_chk(encoder)) byteValueCount] >= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE, @"org/apache/lucene/codecs/lucene50/ForUtil.java:168 condition failed: assert iters * encoder.byteValueCount() >= BLOCK_SIZE;");
  jint encodedSize = IOSIntArray_Get(nil_chk(encodedSizes_), numBits);
  JreAssert(iters * [encoder byteBlockCount] >= encodedSize, @"org/apache/lucene/codecs/lucene50/ForUtil.java:170 condition failed: assert iters * encoder.byteBlockCount() >= encodedSize;");
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) numBits];
  [encoder encodeWithIntArray:data withInt:0 withByteArray:encoded withInt:0 withInt:iters];
  [outArg writeBytesWithByteArray:encoded withInt:encodedSize];
}

- (void)readBlockWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg
                                      withByteArray:(IOSByteArray *)encoded
                                       withIntArray:(IOSIntArray *)decoded {
  jint numBits = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) readByte];
  JreAssert(numBits <= 32, JavaLangInteger_valueOfWithInt_(numBits));
  if (numBits == OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL) {
    jint value = [inArg readVInt];
    JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(decoded, 0, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE, value);
    return;
  }
  jint encodedSize = IOSIntArray_Get(nil_chk(encodedSizes_), numBits);
  [inArg readBytesWithByteArray:encoded withInt:0 withInt:encodedSize];
  id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder = IOSObjectArray_Get(nil_chk(decoders_), numBits);
  jint iters = IOSIntArray_Get(nil_chk(iterations_), numBits);
  JreAssert(iters * [((id<OrgApacheLuceneUtilPackedPackedInts_Decoder>) nil_chk(decoder)) byteValueCount] >= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE, @"org/apache/lucene/codecs/lucene50/ForUtil.java:201 condition failed: assert iters * decoder.byteValueCount() >= BLOCK_SIZE;");
  [decoder decodeWithByteArray:encoded withInt:0 withIntArray:decoded withInt:0 withInt:iters];
}

- (void)skipBlockWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg {
  jint numBits = [((OrgApacheLuceneStoreIndexInput *) nil_chk(inArg)) readByte];
  if (numBits == OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL) {
    [inArg readVInt];
    return;
  }
  JreAssert(numBits > 0 && numBits <= 32, JavaLangInteger_valueOfWithInt_(numBits));
  jint encodedSize = IOSIntArray_Get(nil_chk(encodedSizes_), numBits);
  [inArg seekWithLong:[inArg getFilePointer] + encodedSize];
}

+ (jboolean)isAllEqualWithIntArray:(IOSIntArray *)data {
  return OrgApacheLuceneCodecsLucene50ForUtil_isAllEqualWithIntArray_(data);
}

+ (jint)bitsRequiredWithIntArray:(IOSIntArray *)data {
  return OrgApacheLuceneCodecsLucene50ForUtil_bitsRequiredWithIntArray_(data);
}

- (void)dealloc {
  RELEASE_(encodedSizes_);
  RELEASE_(encoders_);
  RELEASE_(decoders_);
  RELEASE_(iterations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, 5, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 6, 5, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, 5, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, 5, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, 5, -1, -1, -1 },
    { NULL, "Z", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder:);
  methods[1].selector = @selector(encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_Format:withInt:withInt:);
  methods[2].selector = @selector(initPackagePrivateWithFloat:withOrgApacheLuceneStoreDataOutput:);
  methods[3].selector = @selector(initPackagePrivateWithOrgApacheLuceneStoreDataInput:);
  methods[4].selector = @selector(writeBlockWithIntArray:withByteArray:withOrgApacheLuceneStoreIndexOutput:);
  methods[5].selector = @selector(readBlockWithOrgApacheLuceneStoreIndexInput:withByteArray:withIntArray:);
  methods[6].selector = @selector(skipBlockWithOrgApacheLuceneStoreIndexInput:);
  methods[7].selector = @selector(isAllEqualWithIntArray:);
  methods[8].selector = @selector(bitsRequiredWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALL_VALUES_EQUAL", "I", .constantValue.asInt = OrgApacheLuceneCodecsLucene50ForUtil_ALL_VALUES_EQUAL, 0x1a, -1, -1, -1, -1 },
    { "MAX_ENCODED_SIZE", "I", .constantValue.asInt = OrgApacheLuceneCodecsLucene50ForUtil_MAX_ENCODED_SIZE, 0x18, -1, -1, -1, -1 },
    { "MAX_DATA_SIZE", "I", .constantValue.asLong = 0, 0x18, -1, 16, -1, -1 },
    { "encodedSizes_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "encoders_", "[LOrgApacheLuceneUtilPackedPackedInts_Encoder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "decoders_", "[LOrgApacheLuceneUtilPackedPackedInts_Decoder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "iterations_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "computeIterations", "LOrgApacheLuceneUtilPackedPackedInts_Decoder;", "encodedSize", "LOrgApacheLuceneUtilPackedPackedInts_Format;II", "FLOrgApacheLuceneStoreDataOutput;", "LJavaIoIOException;", "LOrgApacheLuceneStoreDataInput;", "writeBlock", "[I[BLOrgApacheLuceneStoreIndexOutput;", "readBlock", "LOrgApacheLuceneStoreIndexInput;[B[I", "skipBlock", "LOrgApacheLuceneStoreIndexInput;", "isAllEqual", "[I", "bitsRequired", &OrgApacheLuceneCodecsLucene50ForUtil_MAX_DATA_SIZE };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsLucene50ForUtil = { "ForUtil", "org.apache.lucene.codecs.lucene50", ptrTable, methods, fields, 7, 0x10, 9, 7, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsLucene50ForUtil;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsLucene50ForUtil class]) {
    {
      jint maxDataSize = 0;
      for (jint version_ = OrgApacheLuceneUtilPackedPackedInts_VERSION_START; version_ <= OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT; version_++) {
        {
          IOSObjectArray *a__ = OrgApacheLuceneUtilPackedPackedInts_Format_values();
          OrgApacheLuceneUtilPackedPackedInts_Format * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          OrgApacheLuceneUtilPackedPackedInts_Format * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            OrgApacheLuceneUtilPackedPackedInts_Format *format = *b__++;
            for (jint bpv = 1; bpv <= 32; ++bpv) {
              if (![((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(format)) isSupportedWithInt:bpv]) {
                continue;
              }
              id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder = OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(format, version_, bpv);
              jint iterations = OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(decoder);
              maxDataSize = JavaLangMath_maxWithInt_withInt_(maxDataSize, iterations * [((id<OrgApacheLuceneUtilPackedPackedInts_Decoder>) nil_chk(decoder)) byteValueCount]);
            }
          }
        }
      }
      OrgApacheLuceneCodecsLucene50ForUtil_MAX_DATA_SIZE = maxDataSize;
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsLucene50ForUtil)
  }
}

@end

jint OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(id<OrgApacheLuceneUtilPackedPackedInts_Decoder> decoder) {
  OrgApacheLuceneCodecsLucene50ForUtil_initialize();
  return JreFpToInt(JavaLangMath_ceilWithDouble_((jfloat) OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE / [((id<OrgApacheLuceneUtilPackedPackedInts_Decoder>) nil_chk(decoder)) byteValueCount]));
}

jint OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(OrgApacheLuceneUtilPackedPackedInts_Format *format, jint packedIntsVersion, jint bitsPerValue) {
  OrgApacheLuceneCodecsLucene50ForUtil_initialize();
  jlong byteCount = [((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(format)) byteCountWithInt:packedIntsVersion withInt:OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE withInt:bitsPerValue];
  JreAssert(byteCount >= 0 && byteCount <= JavaLangInteger_MAX_VALUE, JavaLangLong_valueOfWithLong_(byteCount));
  return (jint) byteCount;
}

void OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_(OrgApacheLuceneCodecsLucene50ForUtil *self, jfloat acceptableOverheadRatio, OrgApacheLuceneStoreDataOutput *outArg) {
  NSObject_init(self);
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT];
  JreStrongAssignAndConsume(&self->encodedSizes_, [IOSIntArray newArrayWithLength:33]);
  JreStrongAssignAndConsume(&self->encoders_, [IOSObjectArray newArrayWithLength:33 type:OrgApacheLuceneUtilPackedPackedInts_Encoder_class_()]);
  JreStrongAssignAndConsume(&self->decoders_, [IOSObjectArray newArrayWithLength:33 type:OrgApacheLuceneUtilPackedPackedInts_Decoder_class_()]);
  JreStrongAssignAndConsume(&self->iterations_, [IOSIntArray newArrayWithLength:33]);
  for (jint bpv = 1; bpv <= 32; ++bpv) {
    OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *formatAndBits = OrgApacheLuceneUtilPackedPackedInts_fastestFormatAndBitsWithInt_withInt_withFloat_(OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE, bpv, acceptableOverheadRatio);
    JreAssert([((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(((OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *) nil_chk(formatAndBits))->format_)) isSupportedWithInt:formatAndBits->bitsPerValue_], @"org/apache/lucene/codecs/lucene50/ForUtil.java:109 condition failed: assert formatAndBits.format.isSupported(formatAndBits.bitsPerValue);");
    JreAssert(formatAndBits->bitsPerValue_ <= 32, @"org/apache/lucene/codecs/lucene50/ForUtil.java:110 condition failed: assert formatAndBits.bitsPerValue <= 32;");
    *IOSIntArray_GetRef(self->encodedSizes_, bpv) = OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(formatAndBits->format_, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, formatAndBits->bitsPerValue_);
    IOSObjectArray_Set(self->encoders_, bpv, OrgApacheLuceneUtilPackedPackedInts_getEncoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(formatAndBits->format_, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, formatAndBits->bitsPerValue_));
    IOSObjectArray_Set(self->decoders_, bpv, OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(formatAndBits->format_, OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT, formatAndBits->bitsPerValue_));
    *IOSIntArray_GetRef(self->iterations_, bpv) = OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(IOSObjectArray_Get(self->decoders_, bpv));
    [outArg writeVIntWithInt:(JreLShift32([formatAndBits->format_ getId], 5)) | (formatAndBits->bitsPerValue_ - 1)];
  }
}

OrgApacheLuceneCodecsLucene50ForUtil *new_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_(jfloat acceptableOverheadRatio, OrgApacheLuceneStoreDataOutput *outArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsLucene50ForUtil, initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_, acceptableOverheadRatio, outArg)
}

OrgApacheLuceneCodecsLucene50ForUtil *create_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_(jfloat acceptableOverheadRatio, OrgApacheLuceneStoreDataOutput *outArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsLucene50ForUtil, initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_, acceptableOverheadRatio, outArg)
}

void OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneCodecsLucene50ForUtil *self, OrgApacheLuceneStoreDataInput *inArg) {
  NSObject_init(self);
  jint packedIntsVersion = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  OrgApacheLuceneUtilPackedPackedInts_checkVersionWithInt_(packedIntsVersion);
  JreStrongAssignAndConsume(&self->encodedSizes_, [IOSIntArray newArrayWithLength:33]);
  JreStrongAssignAndConsume(&self->encoders_, [IOSObjectArray newArrayWithLength:33 type:OrgApacheLuceneUtilPackedPackedInts_Encoder_class_()]);
  JreStrongAssignAndConsume(&self->decoders_, [IOSObjectArray newArrayWithLength:33 type:OrgApacheLuceneUtilPackedPackedInts_Decoder_class_()]);
  JreStrongAssignAndConsume(&self->iterations_, [IOSIntArray newArrayWithLength:33]);
  for (jint bpv = 1; bpv <= 32; ++bpv) {
    jint code = [inArg readVInt];
    jint formatId = JreURShift32(code, 5);
    jint bitsPerValue = (code & 31) + 1;
    OrgApacheLuceneUtilPackedPackedInts_Format *format = OrgApacheLuceneUtilPackedPackedInts_Format_byIdWithInt_(formatId);
    JreAssert([((OrgApacheLuceneUtilPackedPackedInts_Format *) nil_chk(format)) isSupportedWithInt:bitsPerValue], @"org/apache/lucene/codecs/lucene50/ForUtil.java:139 condition failed: assert format.isSupported(bitsPerValue);");
    *IOSIntArray_GetRef(self->encodedSizes_, bpv) = OrgApacheLuceneCodecsLucene50ForUtil_encodedSizeWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(format, packedIntsVersion, bitsPerValue);
    IOSObjectArray_Set(self->encoders_, bpv, OrgApacheLuceneUtilPackedPackedInts_getEncoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(format, packedIntsVersion, bitsPerValue));
    IOSObjectArray_Set(self->decoders_, bpv, OrgApacheLuceneUtilPackedPackedInts_getDecoderWithOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_(format, packedIntsVersion, bitsPerValue));
    *IOSIntArray_GetRef(self->iterations_, bpv) = OrgApacheLuceneCodecsLucene50ForUtil_computeIterationsWithOrgApacheLuceneUtilPackedPackedInts_Decoder_(IOSObjectArray_Get(self->decoders_, bpv));
  }
}

OrgApacheLuceneCodecsLucene50ForUtil *new_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneStoreDataInput *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsLucene50ForUtil, initPackagePrivateWithOrgApacheLuceneStoreDataInput_, inArg)
}

OrgApacheLuceneCodecsLucene50ForUtil *create_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneStoreDataInput *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsLucene50ForUtil, initPackagePrivateWithOrgApacheLuceneStoreDataInput_, inArg)
}

jboolean OrgApacheLuceneCodecsLucene50ForUtil_isAllEqualWithIntArray_(IOSIntArray *data) {
  OrgApacheLuceneCodecsLucene50ForUtil_initialize();
  jint v = IOSIntArray_Get(nil_chk(data), 0);
  for (jint i = 1; i < OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE; ++i) {
    if (IOSIntArray_Get(data, i) != v) {
      return false;
    }
  }
  return true;
}

jint OrgApacheLuceneCodecsLucene50ForUtil_bitsRequiredWithIntArray_(IOSIntArray *data) {
  OrgApacheLuceneCodecsLucene50ForUtil_initialize();
  jlong or_ = 0;
  for (jint i = 0; i < OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE; ++i) {
    JreAssert(IOSIntArray_Get(nil_chk(data), i) >= 0, @"org/apache/lucene/codecs/lucene50/ForUtil.java:240 condition failed: assert data[i] >= 0;");
    or_ |= IOSIntArray_Get(data, i);
  }
  return OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(or_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsLucene50ForUtil)
