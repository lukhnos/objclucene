//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/codecs/lucene50/ForUtil.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50SkipReader.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/lucene50/Lucene50PostingsReader must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsLucene50Lucene50PostingsReader () {
 @public
  OrgApacheLuceneStoreIndexInput *docIn_;
  OrgApacheLuceneStoreIndexInput *posIn_;
  OrgApacheLuceneStoreIndexInput *payIn_;
  jint version__;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader, docIn_, OrgApacheLuceneStoreIndexInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader, posIn_, OrgApacheLuceneStoreIndexInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader, payIn_, OrgApacheLuceneStoreIndexInput *)

inline jlong OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_get_BASE_RAM_BYTES_USED(void);
static jlong OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader, BASE_RAM_BYTES_USED, jlong)

@interface OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum () {
 @public
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *this$0_;
  IOSByteArray *encoded_;
  IOSIntArray *docDeltaBuffer_;
  IOSIntArray *freqBuffer_;
  jint docBufferUpto_;
  OrgApacheLuceneCodecsLucene50Lucene50SkipReader *skipper_;
  jboolean skipped_;
  jint docFreq_;
  jlong totalTermFreq_;
  jint docUpto_;
  jint doc_;
  jint accum_;
  jint freq_;
  jlong docTermStartFP_;
  jlong skipOffset_;
  jint nextSkipDoc_;
  jboolean needsFreq_;
  jint singletonDocID_;
}

- (void)refillDocs;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum, encoded_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum, docDeltaBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum, freqBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum, skipper_, OrgApacheLuceneCodecsLucene50Lucene50SkipReader *)

__attribute__((unused)) static void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_refillDocs(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum *self);

@interface OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum () {
 @public
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *this$0_;
  IOSByteArray *encoded_;
  IOSIntArray *docDeltaBuffer_;
  IOSIntArray *freqBuffer_;
  IOSIntArray *posDeltaBuffer_;
  jint docBufferUpto_;
  jint posBufferUpto_;
  OrgApacheLuceneCodecsLucene50Lucene50SkipReader *skipper_;
  jboolean skipped_;
  jint docFreq_;
  jlong totalTermFreq_;
  jint docUpto_;
  jint doc_;
  jint accum_;
  jint freq_;
  jint position_;
  jint posPendingCount_;
  jlong posPendingFP_;
  jlong docTermStartFP_;
  jlong posTermStartFP_;
  jlong payTermStartFP_;
  jlong lastPosBlockFP_;
  jlong skipOffset_;
  jint nextSkipDoc_;
  jint singletonDocID_;
}

- (void)refillDocs;

- (void)refillPositions;

- (void)skipPositions;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum, encoded_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum, docDeltaBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum, freqBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum, posDeltaBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum, skipper_, OrgApacheLuceneCodecsLucene50Lucene50SkipReader *)

__attribute__((unused)) static void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillDocs(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillPositions(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_skipPositions(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *self);

@interface OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum () {
 @public
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *this$0_;
  IOSByteArray *encoded_;
  IOSIntArray *docDeltaBuffer_;
  IOSIntArray *freqBuffer_;
  IOSIntArray *posDeltaBuffer_;
  IOSIntArray *payloadLengthBuffer_;
  IOSIntArray *offsetStartDeltaBuffer_;
  IOSIntArray *offsetLengthBuffer_;
  IOSByteArray *payloadBytes_;
  jint payloadByteUpto_;
  jint payloadLength_;
  jint lastStartOffset_;
  jint startOffset_;
  jint endOffset_;
  jint docBufferUpto_;
  jint posBufferUpto_;
  OrgApacheLuceneCodecsLucene50Lucene50SkipReader *skipper_;
  jboolean skipped_;
  jint docFreq_;
  jlong totalTermFreq_;
  jint docUpto_;
  jint doc_;
  jint accum_;
  jint freq_;
  jint position_;
  jint posPendingCount_;
  jlong posPendingFP_;
  jlong payPendingFP_;
  jlong docTermStartFP_;
  jlong posTermStartFP_;
  jlong payTermStartFP_;
  jlong lastPosBlockFP_;
  jlong skipOffset_;
  jint nextSkipDoc_;
  jboolean needsOffsets_;
  jboolean needsPayloads_;
  jint singletonDocID_;
}

- (void)refillDocs;

- (void)refillPositions;

- (void)skipPositions;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, encoded_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, docDeltaBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, freqBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, posDeltaBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, payloadLengthBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, offsetStartDeltaBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, offsetLengthBuffer_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, payloadBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, skipper_, OrgApacheLuceneCodecsLucene50Lucene50SkipReader *)

__attribute__((unused)) static void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillDocs(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillPositions(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_skipPositions(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *self);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader)

@implementation OrgApacheLuceneCodecsLucene50Lucene50PostingsReader

- (instancetype)initWithOrgApacheLuceneIndexSegmentReadState:(OrgApacheLuceneIndexSegmentReadState *)state {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_initWithOrgApacheLuceneIndexSegmentReadState_(self, state);
  return self;
}

- (void)init__WithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)termsIn
        withOrgApacheLuceneIndexSegmentReadState:(OrgApacheLuceneIndexSegmentReadState *)state {
  OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(termsIn, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_TERMS_CODEC, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_VERSION_START, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_VERSION_CURRENT, [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentReadState *) nil_chk(state))->segmentInfo_)) getId], state->segmentSuffix_);
  jint indexBlockSize = [((OrgApacheLuceneStoreIndexInput *) nil_chk(termsIn)) readVInt];
  if (indexBlockSize != OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$IC", @"index-time BLOCK_SIZE (", indexBlockSize, @") != read-time BLOCK_SIZE (", OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE, ')'));
  }
}

+ (void)readVIntBlockWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)docIn
                                           withIntArray:(IOSIntArray *)docBuffer
                                           withIntArray:(IOSIntArray *)freqBuffer
                                                withInt:(jint)num
                                            withBoolean:(jboolean)indexHasFreq {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_readVIntBlockWithOrgApacheLuceneStoreIndexInput_withIntArray_withIntArray_withInt_withBoolean_(docIn, docBuffer, freqBuffer, num, indexHasFreq);
}

- (OrgApacheLuceneCodecsBlockTermState *)newTermState {
  return create_OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState_init();
}

- (void)close {
  OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ docIn_, posIn_, payIn_ } count:3 type:JavaIoCloseable_class_()]);
}

- (void)decodeTermWithLongArray:(IOSLongArray *)longs
withOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg
withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)_termState
                    withBoolean:(jboolean)absolute {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *termState = (OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) cast_chk(_termState, [OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState class]);
  jboolean fieldHasPositions = [((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS)] >= 0;
  jboolean fieldHasOffsets = [((OrgApacheLuceneIndexIndexOptions *) nil_chk([fieldInfo getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0;
  jboolean fieldHasPayloads = [fieldInfo hasPayloads];
  if (absolute) {
    ((OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) nil_chk(termState))->docStartFP_ = 0;
    termState->posStartFP_ = 0;
    termState->payStartFP_ = 0;
  }
  ((OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) nil_chk(termState))->docStartFP_ += IOSLongArray_Get(nil_chk(longs), 0);
  if (fieldHasPositions) {
    termState->posStartFP_ += IOSLongArray_Get(longs, 1);
    if (fieldHasOffsets || fieldHasPayloads) {
      termState->payStartFP_ += IOSLongArray_Get(longs, 2);
    }
  }
  if (termState->docFreq_ == 1) {
    termState->singletonDocID_ = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVInt];
  }
  else {
    termState->singletonDocID_ = -1;
  }
  if (fieldHasPositions) {
    if (termState->totalTermFreq_ > OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
      termState->lastPosBlockOffset_ = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVLong];
    }
    else {
      termState->lastPosBlockOffset_ = -1;
    }
  }
  if (termState->docFreq_ > OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    termState->skipOffset_ = [((OrgApacheLuceneStoreDataInput *) nil_chk(inArg)) readVLong];
  }
  else {
    termState->skipOffset_ = -1;
  }
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                        withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)termState
                                           withOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                        withInt:(jint)flags {
  jboolean indexHasPositions = [((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS)] >= 0;
  jboolean indexHasOffsets = [((OrgApacheLuceneIndexIndexOptions *) nil_chk([fieldInfo getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0;
  jboolean indexHasPayloads = [fieldInfo hasPayloads];
  if (OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexDocsAndPositionsEnum_OLD_NULL_SEMANTICS)) {
    if (!indexHasPositions) {
      return nil;
    }
  }
  if (indexHasPositions == false || OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexPostingsEnum_POSITIONS) == false) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum *docsEnum;
    if ([reuse isKindOfClass:[OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum class]]) {
      docsEnum = (OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum *) reuse;
      if (![((OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum *) nil_chk(docsEnum)) canReuseWithOrgApacheLuceneStoreIndexInput:docIn_ withOrgApacheLuceneIndexFieldInfo:fieldInfo]) {
        docsEnum = create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(self, fieldInfo);
      }
    }
    else {
      docsEnum = create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(self, fieldInfo);
    }
    return [docsEnum resetWithOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState:(OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) cast_chk(termState, [OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState class]) withInt:flags];
  }
  else if ((indexHasOffsets == false || OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexPostingsEnum_OFFSETS) == false) && (indexHasPayloads == false || OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexPostingsEnum_PAYLOADS) == false)) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *docsAndPositionsEnum;
    if ([reuse isKindOfClass:[OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum class]]) {
      docsAndPositionsEnum = (OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *) reuse;
      if (![((OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *) nil_chk(docsAndPositionsEnum)) canReuseWithOrgApacheLuceneStoreIndexInput:docIn_ withOrgApacheLuceneIndexFieldInfo:fieldInfo]) {
        docsAndPositionsEnum = create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(self, fieldInfo);
      }
    }
    else {
      docsAndPositionsEnum = create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(self, fieldInfo);
    }
    return [docsAndPositionsEnum resetWithOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState:(OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) cast_chk(termState, [OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState class])];
  }
  else {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *everythingEnum;
    if ([reuse isKindOfClass:[OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum class]]) {
      everythingEnum = (OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *) reuse;
      if (![((OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *) nil_chk(everythingEnum)) canReuseWithOrgApacheLuceneStoreIndexInput:docIn_ withOrgApacheLuceneIndexFieldInfo:fieldInfo]) {
        everythingEnum = create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(self, fieldInfo);
      }
    }
    else {
      everythingEnum = create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(self, fieldInfo);
    }
    return [everythingEnum resetWithOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState:(OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) cast_chk(termState, [OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState class]) withInt:flags];
  }
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BASE_RAM_BYTES_USED;
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (void)checkIntegrity {
  if (docIn_ != nil) {
    OrgApacheLuceneCodecsCodecUtil_checksumEntireFileWithOrgApacheLuceneStoreIndexInput_(docIn_);
  }
  if (posIn_ != nil) {
    OrgApacheLuceneCodecsCodecUtil_checksumEntireFileWithOrgApacheLuceneStoreIndexInput_(posIn_);
  }
  if (payIn_ != nil) {
    OrgApacheLuceneCodecsCodecUtil_checksumEntireFileWithOrgApacheLuceneStoreIndexInput_(payIn_);
  }
}

- (NSString *)description {
  return JreStrcat("$$Z$ZC", [[self java_getClass] getSimpleName], @"(positions=", (posIn_ != nil), @",payloads=", (payIn_ != nil), ')');
}

- (void)dealloc {
  RELEASE_(docIn_);
  RELEASE_(posIn_);
  RELEASE_(payIn_);
  RELEASE_(forUtil_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 5, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsBlockTermState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x1, 8, 9, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentReadState:);
  methods[1].selector = @selector(init__WithOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneIndexSegmentReadState:);
  methods[2].selector = @selector(readVIntBlockWithOrgApacheLuceneStoreIndexInput:withIntArray:withIntArray:withInt:withBoolean:);
  methods[3].selector = @selector(newTermState);
  methods[4].selector = @selector(close);
  methods[5].selector = @selector(decodeTermWithLongArray:withOrgApacheLuceneStoreDataInput:withOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneCodecsBlockTermState:withBoolean:);
  methods[6].selector = @selector(postingsWithOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneCodecsBlockTermState:withOrgApacheLuceneIndexPostingsEnum:withInt:);
  methods[7].selector = @selector(ramBytesUsed);
  methods[8].selector = @selector(getChildResources);
  methods[9].selector = @selector(checkIntegrity);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED", "J", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "docIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "payIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "forUtil_", "LOrgApacheLuceneCodecsLucene50ForUtil;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x2, 13, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentReadState;", "LJavaIoIOException;", "init", "LOrgApacheLuceneStoreIndexInput;LOrgApacheLuceneIndexSegmentReadState;", "readVIntBlock", "LOrgApacheLuceneStoreIndexInput;[I[IIZ", "decodeTerm", "[JLOrgApacheLuceneStoreDataInput;LOrgApacheLuceneIndexFieldInfo;LOrgApacheLuceneCodecsBlockTermState;Z", "postings", "LOrgApacheLuceneIndexFieldInfo;LOrgApacheLuceneCodecsBlockTermState;LOrgApacheLuceneIndexPostingsEnum;I", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "toString", &OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BASE_RAM_BYTES_USED, "version", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum;LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum;LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsLucene50Lucene50PostingsReader = { "Lucene50PostingsReader", "org.apache.lucene.codecs.lucene50", ptrTable, methods, fields, 7, 0x11, 11, 6, -1, 14, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsLucene50Lucene50PostingsReader class]) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader)
  }
}

@end

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_initWithOrgApacheLuceneIndexSegmentReadState_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *self, OrgApacheLuceneIndexSegmentReadState *state) {
  OrgApacheLuceneCodecsPostingsReaderBase_init(self);
  jboolean success = false;
  OrgApacheLuceneStoreIndexInput *docIn = nil;
  OrgApacheLuceneStoreIndexInput *posIn = nil;
  OrgApacheLuceneStoreIndexInput *payIn = nil;
  NSString *docName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentReadState *) nil_chk(state))->segmentInfo_))->name_, state->segmentSuffix_, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_DOC_EXTENSION);
  @try {
    docIn = [((OrgApacheLuceneStoreDirectory *) nil_chk(state->directory_)) openInputWithNSString:docName withOrgApacheLuceneStoreIOContext:state->context_];
    self->version__ = OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(docIn, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_DOC_CODEC, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_VERSION_START, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    JreStrongAssignAndConsume(&self->forUtil_, new_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithOrgApacheLuceneStoreDataInput_(docIn));
    OrgApacheLuceneCodecsCodecUtil_retrieveChecksumWithOrgApacheLuceneStoreIndexInput_(docIn);
    if ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(state->fieldInfos_)) hasProx]) {
      NSString *proxName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_POS_EXTENSION);
      posIn = [state->directory_ openInputWithNSString:proxName withOrgApacheLuceneStoreIOContext:state->context_];
      OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(posIn, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_POS_CODEC, self->version__, self->version__, [state->segmentInfo_ getId], state->segmentSuffix_);
      OrgApacheLuceneCodecsCodecUtil_retrieveChecksumWithOrgApacheLuceneStoreIndexInput_(posIn);
      if ([state->fieldInfos_ hasPayloads] || [state->fieldInfos_ hasOffsets]) {
        NSString *payName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_PAY_EXTENSION);
        payIn = [state->directory_ openInputWithNSString:payName withOrgApacheLuceneStoreIOContext:state->context_];
        OrgApacheLuceneCodecsCodecUtil_checkIndexHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_withByteArray_withNSString_(payIn, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_PAY_CODEC, self->version__, self->version__, [state->segmentInfo_ getId], state->segmentSuffix_);
        OrgApacheLuceneCodecsCodecUtil_retrieveChecksumWithOrgApacheLuceneStoreIndexInput_(payIn);
      }
    }
    JreStrongAssign(&self->docIn_, docIn);
    JreStrongAssign(&self->posIn_, posIn);
    JreStrongAssign(&self->payIn_, payIn);
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ docIn, posIn, payIn } count:3 type:JavaIoCloseable_class_()]);
    }
  }
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *new_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_initWithOrgApacheLuceneIndexSegmentReadState_(OrgApacheLuceneIndexSegmentReadState *state) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader, initWithOrgApacheLuceneIndexSegmentReadState_, state)
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_initWithOrgApacheLuceneIndexSegmentReadState_(OrgApacheLuceneIndexSegmentReadState *state) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader, initWithOrgApacheLuceneIndexSegmentReadState_, state)
}

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_readVIntBlockWithOrgApacheLuceneStoreIndexInput_withIntArray_withIntArray_withInt_withBoolean_(OrgApacheLuceneStoreIndexInput *docIn, IOSIntArray *docBuffer, IOSIntArray *freqBuffer, jint num, jboolean indexHasFreq) {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_initialize();
  if (indexHasFreq) {
    for (jint i = 0; i < num; i++) {
      jint code = [((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn)) readVInt];
      *IOSIntArray_GetRef(nil_chk(docBuffer), i) = JreURShift32(code, 1);
      if ((code & 1) != 0) {
        *IOSIntArray_GetRef(nil_chk(freqBuffer), i) = 1;
      }
      else {
        *IOSIntArray_GetRef(nil_chk(freqBuffer), i) = [docIn readVInt];
      }
    }
  }
  else {
    for (jint i = 0; i < num; i++) {
      *IOSIntArray_GetRef(nil_chk(docBuffer), i) = [((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn)) readVInt];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader)

@implementation OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum

- (instancetype)initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader:(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *)outer$
                                          withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(self, outer$, fieldInfo);
  return self;
}

- (jboolean)canReuseWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)docIn
                     withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  return JreObjectEqualsEquals(docIn, startDocIn_) && indexHasFreq_ == ([((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS)] >= 0) && indexHasPos_ == ([((OrgApacheLuceneIndexIndexOptions *) nil_chk([fieldInfo getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS)] >= 0) && indexHasPayloads_ == [fieldInfo hasPayloads];
}

- (OrgApacheLuceneIndexPostingsEnum *)resetWithOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState:(OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *)termState
                                                                                                             withInt:(jint)flags {
  docFreq_ = ((OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) nil_chk(termState))->docFreq_;
  totalTermFreq_ = indexHasFreq_ ? termState->totalTermFreq_ : docFreq_;
  docTermStartFP_ = termState->docStartFP_;
  skipOffset_ = termState->skipOffset_;
  singletonDocID_ = termState->singletonDocID_;
  if (docFreq_ > 1) {
    if (docIn_ == nil) {
      JreStrongAssign(&docIn_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(startDocIn_)) java_clone]);
    }
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn_)) seekWithLong:docTermStartFP_];
  }
  doc_ = -1;
  self->needsFreq_ = OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexPostingsEnum_FREQS);
  if (indexHasFreq_ == false || needsFreq_ == false) {
    JavaUtilArrays_fillWithIntArray_withInt_(freqBuffer_, 1);
  }
  accum_ = 0;
  docUpto_ = 0;
  nextSkipDoc_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE - 1;
  docBufferUpto_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
  skipped_ = false;
  return self;
}

- (jint)freq {
  return freq_;
}

- (jint)nextPosition {
  return -1;
}

- (jint)startOffset {
  return -1;
}

- (jint)endOffset {
  return -1;
}

- (OrgApacheLuceneUtilBytesRef *)getPayload {
  return nil;
}

- (jint)docID {
  return doc_;
}

- (void)refillDocs {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_refillDocs(self);
}

- (jint)nextDoc {
  if (docUpto_ == docFreq_) {
    return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  if (docBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_refillDocs(self);
  }
  accum_ += IOSIntArray_Get(nil_chk(docDeltaBuffer_), docBufferUpto_);
  docUpto_++;
  doc_ = accum_;
  freq_ = IOSIntArray_Get(nil_chk(freqBuffer_), docBufferUpto_);
  docBufferUpto_++;
  return doc_;
}

- (jint)advanceWithInt:(jint)target {
  if (docFreq_ > OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE && target > nextSkipDoc_) {
    if (skipper_ == nil) {
      JreStrongAssignAndConsume(&skipper_, new_OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_([((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn_)) java_clone], OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_MAX_SKIP_LEVELS, indexHasPos_, indexHasOffsets_, indexHasPayloads_));
    }
    if (!skipped_) {
      JreAssert(skipOffset_ != -1, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:423 condition failed: assert skipOffset != -1;");
      [skipper_ init__WithLong:docTermStartFP_ + skipOffset_ withLong:docTermStartFP_ withLong:0 withLong:0 withInt:docFreq_];
      skipped_ = true;
    }
    jint newDocUpto = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) skipToWithInt:target] + 1;
    if (newDocUpto > docUpto_) {
      JreAssert(JreIntMod(newDocUpto, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) == 0, JreStrcat("$I", @"got ", newDocUpto));
      docUpto_ = newDocUpto;
      docBufferUpto_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
      accum_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getDoc];
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn_)) seekWithLong:[((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getDocPointer]];
    }
    nextSkipDoc_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getNextSkipDoc];
  }
  if (docUpto_ == docFreq_) {
    return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  if (docBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_refillDocs(self);
  }
  while (true) {
    accum_ += IOSIntArray_Get(nil_chk(docDeltaBuffer_), docBufferUpto_);
    docUpto_++;
    if (accum_ >= target) {
      break;
    }
    docBufferUpto_++;
    if (docUpto_ == docFreq_) {
      return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
    }
  }
  freq_ = IOSIntArray_Get(nil_chk(freqBuffer_), docBufferUpto_);
  docBufferUpto_++;
  return doc_ = accum_;
}

- (jlong)cost {
  return docFreq_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(encoded_);
  RELEASE_(docDeltaBuffer_);
  RELEASE_(freqBuffer_);
  RELEASE_(skipper_);
  RELEASE_(startDocIn_);
  RELEASE_(docIn_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader:withOrgApacheLuceneIndexFieldInfo:);
  methods[1].selector = @selector(canReuseWithOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneIndexFieldInfo:);
  methods[2].selector = @selector(resetWithOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState:withInt:);
  methods[3].selector = @selector(freq);
  methods[4].selector = @selector(nextPosition);
  methods[5].selector = @selector(startOffset);
  methods[6].selector = @selector(endOffset);
  methods[7].selector = @selector(getPayload);
  methods[8].selector = @selector(docID);
  methods[9].selector = @selector(refillDocs);
  methods[10].selector = @selector(nextDoc);
  methods[11].selector = @selector(advanceWithInt:);
  methods[12].selector = @selector(cost);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "encoded_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "docDeltaBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "freqBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "docBufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipper_", "LOrgApacheLuceneCodecsLucene50Lucene50SkipReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipped_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startDocIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "indexHasFreq_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexHasPos_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexHasOffsets_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexHasPayloads_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docFreq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalTermFreq_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "doc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "accum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "freq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docTermStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipOffset_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextSkipDoc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "needsFreq_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "singletonDocID_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader;LOrgApacheLuceneIndexFieldInfo;", "LJavaIoIOException;", "canReuse", "LOrgApacheLuceneStoreIndexInput;LOrgApacheLuceneIndexFieldInfo;", "reset", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState;I", "advance", "I", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum = { "BlockDocsEnum", "org.apache.lucene.codecs.lucene50", ptrTable, methods, fields, 7, 0x10, 13, 24, 8, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum;
}

@end

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum *self, OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneIndexPostingsEnum_init(self);
  JreStrongAssignAndConsume(&self->docDeltaBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssignAndConsume(&self->freqBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssign(&self->startDocIn_, outer$->docIn_);
  JreStrongAssign(&self->docIn_, nil);
  self->indexHasFreq_ = ([((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS)] >= 0);
  self->indexHasPos_ = ([((OrgApacheLuceneIndexIndexOptions *) nil_chk([fieldInfo getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS)] >= 0);
  self->indexHasOffsets_ = ([((OrgApacheLuceneIndexIndexOptions *) nil_chk([fieldInfo getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0);
  self->indexHasPayloads_ = [fieldInfo hasPayloads];
  JreStrongAssignAndConsume(&self->encoded_, [IOSByteArray newArrayWithLength:OrgApacheLuceneCodecsLucene50ForUtil_MAX_ENCODED_SIZE]);
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum *new_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum, initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum *create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum, initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum_refillDocs(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum *self) {
  jint left = self->docFreq_ - self->docUpto_;
  JreAssert(left > 0, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:365 condition failed: assert left > 0;");
  if (left >= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    [((OrgApacheLuceneCodecsLucene50ForUtil *) nil_chk(self->this$0_->forUtil_)) readBlockWithOrgApacheLuceneStoreIndexInput:self->docIn_ withByteArray:self->encoded_ withIntArray:self->docDeltaBuffer_];
    if (self->indexHasFreq_) {
      if (self->needsFreq_) {
        [self->this$0_->forUtil_ readBlockWithOrgApacheLuceneStoreIndexInput:self->docIn_ withByteArray:self->encoded_ withIntArray:self->freqBuffer_];
      }
      else {
        [self->this$0_->forUtil_ skipBlockWithOrgApacheLuceneStoreIndexInput:self->docIn_];
      }
    }
  }
  else if (self->docFreq_ == 1) {
    *IOSIntArray_GetRef(nil_chk(self->docDeltaBuffer_), 0) = self->singletonDocID_;
    *IOSIntArray_GetRef(nil_chk(self->freqBuffer_), 0) = (jint) self->totalTermFreq_;
  }
  else {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_readVIntBlockWithOrgApacheLuceneStoreIndexInput_withIntArray_withIntArray_withInt_withBoolean_(self->docIn_, self->docDeltaBuffer_, self->freqBuffer_, left, self->indexHasFreq_);
  }
  self->docBufferUpto_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockDocsEnum)

@implementation OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum

- (instancetype)initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader:(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *)outer$
                                          withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(self, outer$, fieldInfo);
  return self;
}

- (jboolean)canReuseWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)docIn
                     withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  return JreObjectEqualsEquals(docIn, startDocIn_) && indexHasOffsets_ == ([((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0) && indexHasPayloads_ == [fieldInfo hasPayloads];
}

- (OrgApacheLuceneIndexPostingsEnum *)resetWithOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState:(OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *)termState {
  docFreq_ = ((OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) nil_chk(termState))->docFreq_;
  docTermStartFP_ = termState->docStartFP_;
  posTermStartFP_ = termState->posStartFP_;
  payTermStartFP_ = termState->payStartFP_;
  skipOffset_ = termState->skipOffset_;
  totalTermFreq_ = termState->totalTermFreq_;
  singletonDocID_ = termState->singletonDocID_;
  if (docFreq_ > 1) {
    if (docIn_ == nil) {
      JreStrongAssign(&docIn_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(startDocIn_)) java_clone]);
    }
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn_)) seekWithLong:docTermStartFP_];
  }
  posPendingFP_ = posTermStartFP_;
  posPendingCount_ = 0;
  if (termState->totalTermFreq_ < OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    lastPosBlockFP_ = posTermStartFP_;
  }
  else if (termState->totalTermFreq_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    lastPosBlockFP_ = -1;
  }
  else {
    lastPosBlockFP_ = posTermStartFP_ + termState->lastPosBlockOffset_;
  }
  doc_ = -1;
  accum_ = 0;
  docUpto_ = 0;
  if (docFreq_ > OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    nextSkipDoc_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE - 1;
  }
  else {
    nextSkipDoc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  docBufferUpto_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
  skipped_ = false;
  return self;
}

- (jint)freq {
  return freq_;
}

- (jint)docID {
  return doc_;
}

- (void)refillDocs {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillDocs(self);
}

- (void)refillPositions {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillPositions(self);
}

- (jint)nextDoc {
  if (docUpto_ == docFreq_) {
    return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  if (docBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillDocs(self);
  }
  accum_ += IOSIntArray_Get(nil_chk(docDeltaBuffer_), docBufferUpto_);
  freq_ = IOSIntArray_Get(nil_chk(freqBuffer_), docBufferUpto_);
  posPendingCount_ += freq_;
  docBufferUpto_++;
  docUpto_++;
  doc_ = accum_;
  position_ = 0;
  return doc_;
}

- (jint)advanceWithInt:(jint)target {
  if (target > nextSkipDoc_) {
    if (skipper_ == nil) {
      JreStrongAssignAndConsume(&skipper_, new_OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_([((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn_)) java_clone], OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_MAX_SKIP_LEVELS, true, indexHasOffsets_, indexHasPayloads_));
    }
    if (!skipped_) {
      JreAssert(skipOffset_ != -1, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:688 condition failed: assert skipOffset != -1;");
      [skipper_ init__WithLong:docTermStartFP_ + skipOffset_ withLong:docTermStartFP_ withLong:posTermStartFP_ withLong:payTermStartFP_ withInt:docFreq_];
      skipped_ = true;
    }
    jint newDocUpto = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) skipToWithInt:target] + 1;
    if (newDocUpto > docUpto_) {
      JreAssert(JreIntMod(newDocUpto, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) == 0, JreStrcat("$I", @"got ", newDocUpto));
      docUpto_ = newDocUpto;
      docBufferUpto_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
      accum_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getDoc];
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn_)) seekWithLong:[((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getDocPointer]];
      posPendingFP_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getPosPointer];
      posPendingCount_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getPosBufferUpto];
    }
    nextSkipDoc_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getNextSkipDoc];
  }
  if (docUpto_ == docFreq_) {
    return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  if (docBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillDocs(self);
  }
  while (true) {
    accum_ += IOSIntArray_Get(nil_chk(docDeltaBuffer_), docBufferUpto_);
    freq_ = IOSIntArray_Get(nil_chk(freqBuffer_), docBufferUpto_);
    posPendingCount_ += freq_;
    docBufferUpto_++;
    docUpto_++;
    if (accum_ >= target) {
      break;
    }
    if (docUpto_ == docFreq_) {
      return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
    }
  }
  position_ = 0;
  return doc_ = accum_;
}

- (void)skipPositions {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_skipPositions(self);
}

- (jint)nextPosition {
  JreAssert(posPendingCount_ > 0, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:768 condition failed: assert posPendingCount > 0;");
  if (posPendingFP_ != -1) {
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(posIn_)) seekWithLong:posPendingFP_];
    posPendingFP_ = -1;
    posBufferUpto_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
  }
  if (posPendingCount_ > freq_) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_skipPositions(self);
    posPendingCount_ = freq_;
  }
  if (posBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillPositions(self);
    posBufferUpto_ = 0;
  }
  position_ += IOSIntArray_Get(nil_chk(posDeltaBuffer_), posBufferUpto_++);
  posPendingCount_--;
  return position_;
}

- (jint)startOffset {
  return -1;
}

- (jint)endOffset {
  return -1;
}

- (OrgApacheLuceneUtilBytesRef *)getPayload {
  return nil;
}

- (jlong)cost {
  return docFreq_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(encoded_);
  RELEASE_(docDeltaBuffer_);
  RELEASE_(freqBuffer_);
  RELEASE_(posDeltaBuffer_);
  RELEASE_(skipper_);
  RELEASE_(startDocIn_);
  RELEASE_(docIn_);
  RELEASE_(posIn_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader:withOrgApacheLuceneIndexFieldInfo:);
  methods[1].selector = @selector(canReuseWithOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneIndexFieldInfo:);
  methods[2].selector = @selector(resetWithOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState:);
  methods[3].selector = @selector(freq);
  methods[4].selector = @selector(docID);
  methods[5].selector = @selector(refillDocs);
  methods[6].selector = @selector(refillPositions);
  methods[7].selector = @selector(nextDoc);
  methods[8].selector = @selector(advanceWithInt:);
  methods[9].selector = @selector(skipPositions);
  methods[10].selector = @selector(nextPosition);
  methods[11].selector = @selector(startOffset);
  methods[12].selector = @selector(endOffset);
  methods[13].selector = @selector(getPayload);
  methods[14].selector = @selector(cost);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "encoded_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "docDeltaBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "freqBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posDeltaBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "docBufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posBufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipper_", "LOrgApacheLuceneCodecsLucene50Lucene50SkipReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipped_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startDocIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "posIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexHasOffsets_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexHasPayloads_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docFreq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalTermFreq_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "doc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "accum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "freq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posPendingCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posPendingFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docTermStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posTermStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payTermStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPosBlockFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipOffset_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextSkipDoc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "singletonDocID_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader;LOrgApacheLuceneIndexFieldInfo;", "LJavaIoIOException;", "canReuse", "LOrgApacheLuceneStoreIndexInput;LOrgApacheLuceneIndexFieldInfo;", "reset", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState;", "advance", "I", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum = { "BlockPostingsEnum", "org.apache.lucene.codecs.lucene50", ptrTable, methods, fields, 7, 0x10, 15, 30, 8, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum;
}

@end

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *self, OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneIndexPostingsEnum_init(self);
  JreStrongAssignAndConsume(&self->docDeltaBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssignAndConsume(&self->freqBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssignAndConsume(&self->posDeltaBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssign(&self->startDocIn_, outer$->docIn_);
  JreStrongAssign(&self->docIn_, nil);
  JreStrongAssign(&self->posIn_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(outer$->posIn_)) java_clone]);
  JreStrongAssignAndConsume(&self->encoded_, [IOSByteArray newArrayWithLength:OrgApacheLuceneCodecsLucene50ForUtil_MAX_ENCODED_SIZE]);
  self->indexHasOffsets_ = ([((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0);
  self->indexHasPayloads_ = [fieldInfo hasPayloads];
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *new_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum, initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum, initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillDocs(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *self) {
  jint left = self->docFreq_ - self->docUpto_;
  JreAssert(left > 0, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:609 condition failed: assert left > 0;");
  if (left >= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    [((OrgApacheLuceneCodecsLucene50ForUtil *) nil_chk(self->this$0_->forUtil_)) readBlockWithOrgApacheLuceneStoreIndexInput:self->docIn_ withByteArray:self->encoded_ withIntArray:self->docDeltaBuffer_];
    [self->this$0_->forUtil_ readBlockWithOrgApacheLuceneStoreIndexInput:self->docIn_ withByteArray:self->encoded_ withIntArray:self->freqBuffer_];
  }
  else if (self->docFreq_ == 1) {
    *IOSIntArray_GetRef(nil_chk(self->docDeltaBuffer_), 0) = self->singletonDocID_;
    *IOSIntArray_GetRef(nil_chk(self->freqBuffer_), 0) = (jint) self->totalTermFreq_;
  }
  else {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_readVIntBlockWithOrgApacheLuceneStoreIndexInput_withIntArray_withIntArray_withInt_withBoolean_(self->docIn_, self->docDeltaBuffer_, self->freqBuffer_, left, true);
  }
  self->docBufferUpto_ = 0;
}

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillPositions(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *self) {
  if ([((OrgApacheLuceneStoreIndexInput *) nil_chk(self->posIn_)) getFilePointer] == self->lastPosBlockFP_) {
    jint count = (jint) (JreLongMod(self->totalTermFreq_, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE));
    jint payloadLength = 0;
    for (jint i = 0; i < count; i++) {
      jint code = [self->posIn_ readVInt];
      if (self->indexHasPayloads_) {
        if ((code & 1) != 0) {
          payloadLength = [self->posIn_ readVInt];
        }
        *IOSIntArray_GetRef(nil_chk(self->posDeltaBuffer_), i) = JreURShift32(code, 1);
        if (payloadLength != 0) {
          [self->posIn_ seekWithLong:[self->posIn_ getFilePointer] + payloadLength];
        }
      }
      else {
        *IOSIntArray_GetRef(nil_chk(self->posDeltaBuffer_), i) = code;
      }
      if (self->indexHasOffsets_) {
        if (([self->posIn_ readVInt] & 1) != 0) {
          [self->posIn_ readVInt];
        }
      }
    }
  }
  else {
    [((OrgApacheLuceneCodecsLucene50ForUtil *) nil_chk(self->this$0_->forUtil_)) readBlockWithOrgApacheLuceneStoreIndexInput:self->posIn_ withByteArray:self->encoded_ withIntArray:self->posDeltaBuffer_];
  }
}

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_skipPositions(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum *self) {
  jint toSkip = self->posPendingCount_ - self->freq_;
  jint leftInBlock = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE - self->posBufferUpto_;
  if (toSkip < leftInBlock) {
    self->posBufferUpto_ += toSkip;
  }
  else {
    toSkip -= leftInBlock;
    while (toSkip >= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
      JreAssert([((OrgApacheLuceneStoreIndexInput *) nil_chk(self->posIn_)) getFilePointer] != self->lastPosBlockFP_, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:754 condition failed: assert posIn.getFilePointer() != lastPosBlockFP;");
      [((OrgApacheLuceneCodecsLucene50ForUtil *) nil_chk(self->this$0_->forUtil_)) skipBlockWithOrgApacheLuceneStoreIndexInput:self->posIn_];
      toSkip -= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
    }
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum_refillPositions(self);
    self->posBufferUpto_ = toSkip;
  }
  self->position_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_BlockPostingsEnum)

@implementation OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum

- (instancetype)initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader:(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *)outer$
                                          withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(self, outer$, fieldInfo);
  return self;
}

- (jboolean)canReuseWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)docIn
                     withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  return JreObjectEqualsEquals(docIn, startDocIn_) && indexHasOffsets_ == ([((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0) && indexHasPayloads_ == [fieldInfo hasPayloads];
}

- (OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *)resetWithOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState:(OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *)termState
                                                                                                                                               withInt:(jint)flags {
  docFreq_ = ((OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) nil_chk(termState))->docFreq_;
  docTermStartFP_ = termState->docStartFP_;
  posTermStartFP_ = termState->posStartFP_;
  payTermStartFP_ = termState->payStartFP_;
  skipOffset_ = termState->skipOffset_;
  totalTermFreq_ = termState->totalTermFreq_;
  singletonDocID_ = termState->singletonDocID_;
  if (docFreq_ > 1) {
    if (docIn_ == nil) {
      JreStrongAssign(&docIn_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(startDocIn_)) java_clone]);
    }
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn_)) seekWithLong:docTermStartFP_];
  }
  posPendingFP_ = posTermStartFP_;
  payPendingFP_ = payTermStartFP_;
  posPendingCount_ = 0;
  if (termState->totalTermFreq_ < OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    lastPosBlockFP_ = posTermStartFP_;
  }
  else if (termState->totalTermFreq_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    lastPosBlockFP_ = -1;
  }
  else {
    lastPosBlockFP_ = posTermStartFP_ + termState->lastPosBlockOffset_;
  }
  self->needsOffsets_ = OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexPostingsEnum_OFFSETS);
  self->needsPayloads_ = OrgApacheLuceneIndexPostingsEnum_featureRequestedWithInt_withShort_(flags, OrgApacheLuceneIndexPostingsEnum_PAYLOADS);
  doc_ = -1;
  accum_ = 0;
  docUpto_ = 0;
  if (docFreq_ > OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    nextSkipDoc_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE - 1;
  }
  else {
    nextSkipDoc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  docBufferUpto_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
  skipped_ = false;
  return self;
}

- (jint)freq {
  return freq_;
}

- (jint)docID {
  return doc_;
}

- (void)refillDocs {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillDocs(self);
}

- (void)refillPositions {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillPositions(self);
}

- (jint)nextDoc {
  if (docUpto_ == docFreq_) {
    return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  if (docBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillDocs(self);
  }
  accum_ += IOSIntArray_Get(nil_chk(docDeltaBuffer_), docBufferUpto_);
  freq_ = IOSIntArray_Get(nil_chk(freqBuffer_), docBufferUpto_);
  posPendingCount_ += freq_;
  docBufferUpto_++;
  docUpto_++;
  doc_ = accum_;
  position_ = 0;
  lastStartOffset_ = 0;
  return doc_;
}

- (jint)advanceWithInt:(jint)target {
  if (target > nextSkipDoc_) {
    if (skipper_ == nil) {
      JreStrongAssignAndConsume(&skipper_, new_OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_([((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn_)) java_clone], OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_MAX_SKIP_LEVELS, true, indexHasOffsets_, indexHasPayloads_));
    }
    if (!skipped_) {
      JreAssert(skipOffset_ != -1, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:1104 condition failed: assert skipOffset != -1;");
      [skipper_ init__WithLong:docTermStartFP_ + skipOffset_ withLong:docTermStartFP_ withLong:posTermStartFP_ withLong:payTermStartFP_ withInt:docFreq_];
      skipped_ = true;
    }
    jint newDocUpto = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) skipToWithInt:target] + 1;
    if (newDocUpto > docUpto_) {
      JreAssert(JreIntMod(newDocUpto, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) == 0, JreStrcat("$I", @"got ", newDocUpto));
      docUpto_ = newDocUpto;
      docBufferUpto_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
      accum_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getDoc];
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(docIn_)) seekWithLong:[((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getDocPointer]];
      posPendingFP_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getPosPointer];
      payPendingFP_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getPayPointer];
      posPendingCount_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getPosBufferUpto];
      lastStartOffset_ = 0;
      payloadByteUpto_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getPayloadByteUpto];
    }
    nextSkipDoc_ = [((OrgApacheLuceneCodecsLucene50Lucene50SkipReader *) nil_chk(skipper_)) getNextSkipDoc];
  }
  if (docUpto_ == docFreq_) {
    return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
  }
  if (docBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillDocs(self);
  }
  while (true) {
    accum_ += IOSIntArray_Get(nil_chk(docDeltaBuffer_), docBufferUpto_);
    freq_ = IOSIntArray_Get(nil_chk(freqBuffer_), docBufferUpto_);
    posPendingCount_ += freq_;
    docBufferUpto_++;
    docUpto_++;
    if (accum_ >= target) {
      break;
    }
    if (docUpto_ == docFreq_) {
      return doc_ = OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS;
    }
  }
  position_ = 0;
  lastStartOffset_ = 0;
  return doc_ = accum_;
}

- (void)skipPositions {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_skipPositions(self);
}

- (jint)nextPosition {
  JreAssert(posPendingCount_ > 0, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:1216 condition failed: assert posPendingCount > 0;");
  if (posPendingFP_ != -1) {
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(posIn_)) seekWithLong:posPendingFP_];
    posPendingFP_ = -1;
    if (payPendingFP_ != -1) {
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(payIn_)) seekWithLong:payPendingFP_];
      payPendingFP_ = -1;
    }
    posBufferUpto_ = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
  }
  if (posPendingCount_ > freq_) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_skipPositions(self);
    posPendingCount_ = freq_;
  }
  if (posBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillPositions(self);
    posBufferUpto_ = 0;
  }
  position_ += IOSIntArray_Get(nil_chk(posDeltaBuffer_), posBufferUpto_);
  if (indexHasPayloads_) {
    payloadLength_ = IOSIntArray_Get(nil_chk(payloadLengthBuffer_), posBufferUpto_);
    JreStrongAssign(&((OrgApacheLuceneUtilBytesRef *) nil_chk(payload_))->bytes_, payloadBytes_);
    payload_->offset_ = payloadByteUpto_;
    payload_->length_ = payloadLength_;
    payloadByteUpto_ += payloadLength_;
  }
  if (indexHasOffsets_) {
    startOffset_ = lastStartOffset_ + IOSIntArray_Get(nil_chk(offsetStartDeltaBuffer_), posBufferUpto_);
    endOffset_ = startOffset_ + IOSIntArray_Get(nil_chk(offsetLengthBuffer_), posBufferUpto_);
    lastStartOffset_ = startOffset_;
  }
  posBufferUpto_++;
  posPendingCount_--;
  return position_;
}

- (jint)startOffset {
  return startOffset_;
}

- (jint)endOffset {
  return endOffset_;
}

- (OrgApacheLuceneUtilBytesRef *)getPayload {
  if (payloadLength_ == 0) {
    return nil;
  }
  else {
    return payload_;
  }
}

- (jlong)cost {
  return docFreq_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(encoded_);
  RELEASE_(docDeltaBuffer_);
  RELEASE_(freqBuffer_);
  RELEASE_(posDeltaBuffer_);
  RELEASE_(payloadLengthBuffer_);
  RELEASE_(offsetStartDeltaBuffer_);
  RELEASE_(offsetLengthBuffer_);
  RELEASE_(payloadBytes_);
  RELEASE_(skipper_);
  RELEASE_(startDocIn_);
  RELEASE_(docIn_);
  RELEASE_(posIn_);
  RELEASE_(payIn_);
  RELEASE_(payload_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum;", 0x1, 4, 5, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader:withOrgApacheLuceneIndexFieldInfo:);
  methods[1].selector = @selector(canReuseWithOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneIndexFieldInfo:);
  methods[2].selector = @selector(resetWithOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState:withInt:);
  methods[3].selector = @selector(freq);
  methods[4].selector = @selector(docID);
  methods[5].selector = @selector(refillDocs);
  methods[6].selector = @selector(refillPositions);
  methods[7].selector = @selector(nextDoc);
  methods[8].selector = @selector(advanceWithInt:);
  methods[9].selector = @selector(skipPositions);
  methods[10].selector = @selector(nextPosition);
  methods[11].selector = @selector(startOffset);
  methods[12].selector = @selector(endOffset);
  methods[13].selector = @selector(getPayload);
  methods[14].selector = @selector(cost);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "encoded_", "[B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "docDeltaBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "freqBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "posDeltaBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "payloadLengthBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "offsetStartDeltaBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "offsetLengthBuffer_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "payloadBytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payloadByteUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payloadLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastStartOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docBufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posBufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipper_", "LOrgApacheLuceneCodecsLucene50Lucene50SkipReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipped_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startDocIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "posIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "payIn_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "payload_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexHasOffsets_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexHasPayloads_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docFreq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalTermFreq_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "doc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "accum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "freq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posPendingCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posPendingFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payPendingFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docTermStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posTermStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payTermStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPosBlockFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipOffset_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextSkipDoc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "needsOffsets_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "needsPayloads_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "singletonDocID_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader;LOrgApacheLuceneIndexFieldInfo;", "LJavaIoIOException;", "canReuse", "LOrgApacheLuceneStoreIndexInput;LOrgApacheLuceneIndexFieldInfo;", "reset", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState;I", "advance", "I", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum = { "EverythingEnum", "org.apache.lucene.codecs.lucene50", ptrTable, methods, fields, 7, 0x10, 15, 44, 8, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum;
}

@end

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *self, OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneIndexPostingsEnum_init(self);
  JreStrongAssignAndConsume(&self->docDeltaBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssignAndConsume(&self->freqBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssignAndConsume(&self->posDeltaBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssign(&self->startDocIn_, outer$->docIn_);
  JreStrongAssign(&self->docIn_, nil);
  JreStrongAssign(&self->posIn_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(outer$->posIn_)) java_clone]);
  JreStrongAssign(&self->payIn_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(outer$->payIn_)) java_clone]);
  JreStrongAssignAndConsume(&self->encoded_, [IOSByteArray newArrayWithLength:OrgApacheLuceneCodecsLucene50ForUtil_MAX_ENCODED_SIZE]);
  self->indexHasOffsets_ = ([((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0);
  if (self->indexHasOffsets_) {
    JreStrongAssignAndConsume(&self->offsetStartDeltaBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
    JreStrongAssignAndConsume(&self->offsetLengthBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  }
  else {
    JreStrongAssign(&self->offsetStartDeltaBuffer_, nil);
    JreStrongAssign(&self->offsetLengthBuffer_, nil);
    self->startOffset_ = -1;
    self->endOffset_ = -1;
  }
  self->indexHasPayloads_ = [fieldInfo hasPayloads];
  if (self->indexHasPayloads_) {
    JreStrongAssignAndConsume(&self->payloadLengthBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
    JreStrongAssignAndConsume(&self->payloadBytes_, [IOSByteArray newArrayWithLength:128]);
    JreStrongAssignAndConsume(&self->payload_, new_OrgApacheLuceneUtilBytesRef_init());
  }
  else {
    JreStrongAssign(&self->payloadLengthBuffer_, nil);
    JreStrongAssign(&self->payloadBytes_, nil);
    JreStrongAssign(&self->payload_, nil);
  }
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *new_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *create_OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum, initWithOrgApacheLuceneCodecsLucene50Lucene50PostingsReader_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillDocs(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *self) {
  jint left = self->docFreq_ - self->docUpto_;
  JreAssert(left > 0, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:985 condition failed: assert left > 0;");
  if (left >= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    [((OrgApacheLuceneCodecsLucene50ForUtil *) nil_chk(self->this$0_->forUtil_)) readBlockWithOrgApacheLuceneStoreIndexInput:self->docIn_ withByteArray:self->encoded_ withIntArray:self->docDeltaBuffer_];
    [self->this$0_->forUtil_ readBlockWithOrgApacheLuceneStoreIndexInput:self->docIn_ withByteArray:self->encoded_ withIntArray:self->freqBuffer_];
  }
  else if (self->docFreq_ == 1) {
    *IOSIntArray_GetRef(nil_chk(self->docDeltaBuffer_), 0) = self->singletonDocID_;
    *IOSIntArray_GetRef(nil_chk(self->freqBuffer_), 0) = (jint) self->totalTermFreq_;
  }
  else {
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_readVIntBlockWithOrgApacheLuceneStoreIndexInput_withIntArray_withIntArray_withInt_withBoolean_(self->docIn_, self->docDeltaBuffer_, self->freqBuffer_, left, true);
  }
  self->docBufferUpto_ = 0;
}

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillPositions(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *self) {
  if ([((OrgApacheLuceneStoreIndexInput *) nil_chk(self->posIn_)) getFilePointer] == self->lastPosBlockFP_) {
    jint count = (jint) (JreLongMod(self->totalTermFreq_, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE));
    jint payloadLength = 0;
    jint offsetLength = 0;
    self->payloadByteUpto_ = 0;
    for (jint i = 0; i < count; i++) {
      jint code = [self->posIn_ readVInt];
      if (self->indexHasPayloads_) {
        if ((code & 1) != 0) {
          payloadLength = [self->posIn_ readVInt];
        }
        *IOSIntArray_GetRef(nil_chk(self->payloadLengthBuffer_), i) = payloadLength;
        *IOSIntArray_GetRef(nil_chk(self->posDeltaBuffer_), i) = JreURShift32(code, 1);
        if (payloadLength != 0) {
          if (self->payloadByteUpto_ + payloadLength > ((IOSByteArray *) nil_chk(self->payloadBytes_))->size_) {
            JreStrongAssign(&self->payloadBytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(self->payloadBytes_, self->payloadByteUpto_ + payloadLength));
          }
          [self->posIn_ readBytesWithByteArray:self->payloadBytes_ withInt:self->payloadByteUpto_ withInt:payloadLength];
          self->payloadByteUpto_ += payloadLength;
        }
      }
      else {
        *IOSIntArray_GetRef(nil_chk(self->posDeltaBuffer_), i) = code;
      }
      if (self->indexHasOffsets_) {
        jint deltaCode = [self->posIn_ readVInt];
        if ((deltaCode & 1) != 0) {
          offsetLength = [self->posIn_ readVInt];
        }
        *IOSIntArray_GetRef(nil_chk(self->offsetStartDeltaBuffer_), i) = JreURShift32(deltaCode, 1);
        *IOSIntArray_GetRef(nil_chk(self->offsetLengthBuffer_), i) = offsetLength;
      }
    }
    self->payloadByteUpto_ = 0;
  }
  else {
    [((OrgApacheLuceneCodecsLucene50ForUtil *) nil_chk(self->this$0_->forUtil_)) readBlockWithOrgApacheLuceneStoreIndexInput:self->posIn_ withByteArray:self->encoded_ withIntArray:self->posDeltaBuffer_];
    if (self->indexHasPayloads_) {
      if (self->needsPayloads_) {
        [self->this$0_->forUtil_ readBlockWithOrgApacheLuceneStoreIndexInput:self->payIn_ withByteArray:self->encoded_ withIntArray:self->payloadLengthBuffer_];
        jint numBytes = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->payIn_)) readVInt];
        if (numBytes > ((IOSByteArray *) nil_chk(self->payloadBytes_))->size_) {
          JreStrongAssign(&self->payloadBytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(self->payloadBytes_, numBytes));
        }
        [self->payIn_ readBytesWithByteArray:self->payloadBytes_ withInt:0 withInt:numBytes];
      }
      else {
        [self->this$0_->forUtil_ skipBlockWithOrgApacheLuceneStoreIndexInput:self->payIn_];
        jint numBytes = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->payIn_)) readVInt];
        [self->payIn_ seekWithLong:[self->payIn_ getFilePointer] + numBytes];
      }
      self->payloadByteUpto_ = 0;
    }
    if (self->indexHasOffsets_) {
      if (self->needsOffsets_) {
        [self->this$0_->forUtil_ readBlockWithOrgApacheLuceneStoreIndexInput:self->payIn_ withByteArray:self->encoded_ withIntArray:self->offsetStartDeltaBuffer_];
        [self->this$0_->forUtil_ readBlockWithOrgApacheLuceneStoreIndexInput:self->payIn_ withByteArray:self->encoded_ withIntArray:self->offsetLengthBuffer_];
      }
      else {
        [self->this$0_->forUtil_ skipBlockWithOrgApacheLuceneStoreIndexInput:self->payIn_];
        [self->this$0_->forUtil_ skipBlockWithOrgApacheLuceneStoreIndexInput:self->payIn_];
      }
    }
  }
}

void OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_skipPositions(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum *self) {
  jint toSkip = self->posPendingCount_ - self->freq_;
  jint leftInBlock = OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE - self->posBufferUpto_;
  if (toSkip < leftInBlock) {
    jint end = self->posBufferUpto_ + toSkip;
    while (self->posBufferUpto_ < end) {
      if (self->indexHasPayloads_) {
        self->payloadByteUpto_ += IOSIntArray_Get(nil_chk(self->payloadLengthBuffer_), self->posBufferUpto_);
      }
      self->posBufferUpto_++;
    }
  }
  else {
    toSkip -= leftInBlock;
    while (toSkip >= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
      JreAssert([((OrgApacheLuceneStoreIndexInput *) nil_chk(self->posIn_)) getFilePointer] != self->lastPosBlockFP_, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.java:1181 condition failed: assert posIn.getFilePointer() != lastPosBlockFP;");
      [((OrgApacheLuceneCodecsLucene50ForUtil *) nil_chk(self->this$0_->forUtil_)) skipBlockWithOrgApacheLuceneStoreIndexInput:self->posIn_];
      if (self->indexHasPayloads_) {
        [self->this$0_->forUtil_ skipBlockWithOrgApacheLuceneStoreIndexInput:self->payIn_];
        jint numBytes = [((OrgApacheLuceneStoreIndexInput *) nil_chk(self->payIn_)) readVInt];
        [self->payIn_ seekWithLong:[self->payIn_ getFilePointer] + numBytes];
      }
      if (self->indexHasOffsets_) {
        [self->this$0_->forUtil_ skipBlockWithOrgApacheLuceneStoreIndexInput:self->payIn_];
        [self->this$0_->forUtil_ skipBlockWithOrgApacheLuceneStoreIndexInput:self->payIn_];
      }
      toSkip -= OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE;
    }
    OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum_refillPositions(self);
    self->payloadByteUpto_ = 0;
    self->posBufferUpto_ = 0;
    while (self->posBufferUpto_ < toSkip) {
      if (self->indexHasPayloads_) {
        self->payloadByteUpto_ += IOSIntArray_Get(nil_chk(self->payloadLengthBuffer_), self->posBufferUpto_);
      }
      self->posBufferUpto_++;
    }
  }
  self->position_ = 0;
  self->lastStartOffset_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsLucene50Lucene50PostingsReader_EverythingEnum)
