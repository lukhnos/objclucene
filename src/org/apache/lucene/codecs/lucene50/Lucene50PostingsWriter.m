//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/System.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/PushPostingsWriterBase.h"
#include "org/apache/lucene/codecs/lucene50/ForUtil.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50SkipWriter.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter () {
 @public
  jlong docStartFP_;
  jlong posStartFP_;
  jlong payStartFP_;
  jint docBufferUpto_;
  jint posBufferUpto_;
  IOSByteArray *payloadBytes_;
  jint payloadByteUpto_;
  jint lastBlockDocID_;
  jlong lastBlockPosFP_;
  jlong lastBlockPayFP_;
  jint lastBlockPosBufferUpto_;
  jint lastBlockPayloadByteUpto_;
  jint lastDocID_;
  jint lastPosition_;
  jint lastStartOffset_;
  jint docCount_;
  OrgApacheLuceneCodecsLucene50ForUtil *forUtil_;
  OrgApacheLuceneCodecsLucene50Lucene50SkipWriter *skipWriter_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter, payloadBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter, forUtil_, OrgApacheLuceneCodecsLucene50ForUtil *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter, skipWriter_, OrgApacheLuceneCodecsLucene50Lucene50SkipWriter *)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter)

OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_emptyState;

@implementation OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter

+ (OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *)emptyState {
  return OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_emptyState;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_(self, state);
  return self;
}

- (OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *)newTermState {
  return create_OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState_init();
}

- (void)init__WithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)termsOut
        withOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(termsOut, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_TERMS_CODEC, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_VERSION_CURRENT, [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_)) getId], state->segmentSuffix_);
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(termsOut)) writeVIntWithInt:OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE];
}

- (jint)setFieldWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  [super setFieldWithOrgApacheLuceneIndexFieldInfo:fieldInfo];
  [((OrgApacheLuceneCodecsLucene50Lucene50SkipWriter *) nil_chk(skipWriter_)) setFieldWithBoolean:writePositions_ withBoolean:writeOffsets_ withBoolean:writePayloads_];
  JreStrongAssign(&lastState_, OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_emptyState);
  if (writePositions_) {
    if (writePayloads_ || writeOffsets_) {
      return 3;
    }
    else {
      return 2;
    }
  }
  else {
    return 1;
  }
}

- (void)startTerm {
  docStartFP_ = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(docOut_)) getFilePointer];
  if (writePositions_) {
    posStartFP_ = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) getFilePointer];
    if (writePayloads_ || writeOffsets_) {
      payStartFP_ = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(payOut_)) getFilePointer];
    }
  }
  lastDocID_ = 0;
  lastBlockDocID_ = -1;
  [((OrgApacheLuceneCodecsLucene50Lucene50SkipWriter *) nil_chk(skipWriter_)) resetSkip];
}

- (void)startDocWithInt:(jint)docID
                withInt:(jint)termDocFreq {
  if (lastBlockDocID_ != -1 && docBufferUpto_ == 0) {
    [((OrgApacheLuceneCodecsLucene50Lucene50SkipWriter *) nil_chk(skipWriter_)) bufferSkipWithInt:lastBlockDocID_ withInt:docCount_ withLong:lastBlockPosFP_ withLong:lastBlockPayFP_ withInt:lastBlockPosBufferUpto_ withInt:lastBlockPayloadByteUpto_];
  }
  jint docDelta = docID - lastDocID_;
  if (docID < 0 || (docCount_ > 0 && docDelta <= 0)) {
    @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataOutput_(JreStrcat("$I$I$", @"docs out of order (", docID, @" <= ", lastDocID_, @" )"), docOut_);
  }
  *IOSIntArray_GetRef(nil_chk(docDeltaBuffer_), docBufferUpto_) = docDelta;
  if (writeFreqs_) {
    *IOSIntArray_GetRef(nil_chk(freqBuffer_), docBufferUpto_) = termDocFreq;
  }
  docBufferUpto_++;
  docCount_++;
  if (docBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    [((OrgApacheLuceneCodecsLucene50ForUtil *) nil_chk(forUtil_)) writeBlockWithIntArray:docDeltaBuffer_ withByteArray:encoded_ withOrgApacheLuceneStoreIndexOutput:docOut_];
    if (writeFreqs_) {
      [forUtil_ writeBlockWithIntArray:freqBuffer_ withByteArray:encoded_ withOrgApacheLuceneStoreIndexOutput:docOut_];
    }
  }
  lastDocID_ = docID;
  lastPosition_ = 0;
  lastStartOffset_ = 0;
}

- (void)addPositionWithInt:(jint)position
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payload
                   withInt:(jint)startOffset
                   withInt:(jint)endOffset {
  if (position > OrgApacheLuceneIndexIndexWriter_MAX_POSITION) {
    @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataOutput_(JreStrcat("$I$IC", @"position=", position, @" is too large (> IndexWriter.MAX_POSITION=", OrgApacheLuceneIndexIndexWriter_MAX_POSITION, ')'), docOut_);
  }
  if (position < 0) {
    @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataOutput_(JreStrcat("$I$", @"position=", position, @" is < 0"), docOut_);
  }
  *IOSIntArray_GetRef(nil_chk(posDeltaBuffer_), posBufferUpto_) = position - lastPosition_;
  if (writePayloads_) {
    if (payload == nil || payload->length_ == 0) {
      *IOSIntArray_GetRef(nil_chk(payloadLengthBuffer_), posBufferUpto_) = 0;
    }
    else {
      *IOSIntArray_GetRef(nil_chk(payloadLengthBuffer_), posBufferUpto_) = payload->length_;
      if (payloadByteUpto_ + payload->length_ > ((IOSByteArray *) nil_chk(payloadBytes_))->size_) {
        JreStrongAssign(&payloadBytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(payloadBytes_, payloadByteUpto_ + payload->length_));
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(payload->bytes_, payload->offset_, payloadBytes_, payloadByteUpto_, payload->length_);
      payloadByteUpto_ += payload->length_;
    }
  }
  if (writeOffsets_) {
    JreAssert(startOffset >= lastStartOffset_, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter.java:276 condition failed: assert startOffset >= lastStartOffset;");
    JreAssert(endOffset >= startOffset, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter.java:277 condition failed: assert endOffset >= startOffset;");
    *IOSIntArray_GetRef(nil_chk(offsetStartDeltaBuffer_), posBufferUpto_) = startOffset - lastStartOffset_;
    *IOSIntArray_GetRef(nil_chk(offsetLengthBuffer_), posBufferUpto_) = endOffset - startOffset;
    lastStartOffset_ = startOffset;
  }
  posBufferUpto_++;
  lastPosition_ = position;
  if (posBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    [((OrgApacheLuceneCodecsLucene50ForUtil *) nil_chk(forUtil_)) writeBlockWithIntArray:posDeltaBuffer_ withByteArray:encoded_ withOrgApacheLuceneStoreIndexOutput:posOut_];
    if (writePayloads_) {
      [forUtil_ writeBlockWithIntArray:payloadLengthBuffer_ withByteArray:encoded_ withOrgApacheLuceneStoreIndexOutput:payOut_];
      [((OrgApacheLuceneStoreIndexOutput *) nil_chk(payOut_)) writeVIntWithInt:payloadByteUpto_];
      [((OrgApacheLuceneStoreIndexOutput *) nil_chk(payOut_)) writeBytesWithByteArray:payloadBytes_ withInt:0 withInt:payloadByteUpto_];
      payloadByteUpto_ = 0;
    }
    if (writeOffsets_) {
      [forUtil_ writeBlockWithIntArray:offsetStartDeltaBuffer_ withByteArray:encoded_ withOrgApacheLuceneStoreIndexOutput:payOut_];
      [forUtil_ writeBlockWithIntArray:offsetLengthBuffer_ withByteArray:encoded_ withOrgApacheLuceneStoreIndexOutput:payOut_];
    }
    posBufferUpto_ = 0;
  }
}

- (void)finishDoc {
  if (docBufferUpto_ == OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    lastBlockDocID_ = lastDocID_;
    if (posOut_ != nil) {
      if (payOut_ != nil) {
        lastBlockPayFP_ = [payOut_ getFilePointer];
      }
      lastBlockPosFP_ = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) getFilePointer];
      lastBlockPosBufferUpto_ = posBufferUpto_;
      lastBlockPayloadByteUpto_ = payloadByteUpto_;
    }
    docBufferUpto_ = 0;
  }
}

- (void)finishTermWithOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)_state {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *state = (OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) cast_chk(_state, [OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState class]);
  JreAssert(((OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) nil_chk(state))->docFreq_ > 0, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter.java:325 condition failed: assert state.docFreq > 0;");
  JreAssert(state->docFreq_ == docCount_, JreStrcat("I$I", state->docFreq_, @" vs ", docCount_));
  jint singletonDocID;
  if (state->docFreq_ == 1) {
    singletonDocID = IOSIntArray_Get(nil_chk(docDeltaBuffer_), 0);
  }
  else {
    singletonDocID = -1;
    for (jint i = 0; i < docBufferUpto_; i++) {
      jint docDelta = IOSIntArray_Get(nil_chk(docDeltaBuffer_), i);
      jint freq = IOSIntArray_Get(nil_chk(freqBuffer_), i);
      if (!writeFreqs_) {
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(docOut_)) writeVIntWithInt:docDelta];
      }
      else if (IOSIntArray_Get(freqBuffer_, i) == 1) {
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(docOut_)) writeVIntWithInt:(JreLShift32(docDelta, 1)) | 1];
      }
      else {
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(docOut_)) writeVIntWithInt:JreLShift32(docDelta, 1)];
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(docOut_)) writeVIntWithInt:freq];
      }
    }
  }
  jlong lastPosBlockOffset;
  if (writePositions_) {
    JreAssert(state->totalTermFreq_ != -1, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter.java:358 condition failed: assert state.totalTermFreq != -1;");
    if (state->totalTermFreq_ > OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
      lastPosBlockOffset = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) getFilePointer] - posStartFP_;
    }
    else {
      lastPosBlockOffset = -1;
    }
    if (posBufferUpto_ > 0) {
      jint lastPayloadLength = -1;
      jint lastOffsetLength = -1;
      jint payloadBytesReadUpto = 0;
      for (jint i = 0; i < posBufferUpto_; i++) {
        jint posDelta = IOSIntArray_Get(nil_chk(posDeltaBuffer_), i);
        if (writePayloads_) {
          jint payloadLength = IOSIntArray_Get(nil_chk(payloadLengthBuffer_), i);
          if (payloadLength != lastPayloadLength) {
            lastPayloadLength = payloadLength;
            [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) writeVIntWithInt:(JreLShift32(posDelta, 1)) | 1];
            [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) writeVIntWithInt:payloadLength];
          }
          else {
            [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) writeVIntWithInt:JreLShift32(posDelta, 1)];
          }
          if (payloadLength != 0) {
            [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) writeBytesWithByteArray:payloadBytes_ withInt:payloadBytesReadUpto withInt:payloadLength];
            payloadBytesReadUpto += payloadLength;
          }
        }
        else {
          [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) writeVIntWithInt:posDelta];
        }
        if (writeOffsets_) {
          jint delta = IOSIntArray_Get(nil_chk(offsetStartDeltaBuffer_), i);
          jint length = IOSIntArray_Get(nil_chk(offsetLengthBuffer_), i);
          if (length == lastOffsetLength) {
            [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) writeVIntWithInt:JreLShift32(delta, 1)];
          }
          else {
            [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) writeVIntWithInt:(JreLShift32(delta, 1)) | 1];
            [((OrgApacheLuceneStoreIndexOutput *) nil_chk(posOut_)) writeVIntWithInt:length];
            lastOffsetLength = length;
          }
        }
      }
      if (writePayloads_) {
        JreAssert(payloadBytesReadUpto == payloadByteUpto_, @"org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter.java:409 condition failed: assert payloadBytesReadUpto == payloadByteUpto;");
        payloadByteUpto_ = 0;
      }
    }
  }
  else {
    lastPosBlockOffset = -1;
  }
  jlong skipOffset;
  if (docCount_ > OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) {
    skipOffset = [((OrgApacheLuceneCodecsLucene50Lucene50SkipWriter *) nil_chk(skipWriter_)) writeSkipWithOrgApacheLuceneStoreIndexOutput:docOut_] - docStartFP_;
  }
  else {
    skipOffset = -1;
  }
  state->docStartFP_ = docStartFP_;
  state->posStartFP_ = posStartFP_;
  state->payStartFP_ = payStartFP_;
  state->singletonDocID_ = singletonDocID;
  state->skipOffset_ = skipOffset;
  state->lastPosBlockOffset_ = lastPosBlockOffset;
  docBufferUpto_ = 0;
  posBufferUpto_ = 0;
  lastDocID_ = 0;
  docCount_ = 0;
}

- (void)encodeTermWithLongArray:(IOSLongArray *)longs
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)_state
                    withBoolean:(jboolean)absolute {
  OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *state = (OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) cast_chk(_state, [OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState class]);
  if (absolute) {
    JreStrongAssign(&lastState_, OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_emptyState);
  }
  *IOSLongArray_GetRef(nil_chk(longs), 0) = ((OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) nil_chk(state))->docStartFP_ - ((OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState *) nil_chk(lastState_))->docStartFP_;
  if (writePositions_) {
    *IOSLongArray_GetRef(longs, 1) = state->posStartFP_ - lastState_->posStartFP_;
    if (writePayloads_ || writeOffsets_) {
      *IOSLongArray_GetRef(longs, 2) = state->payStartFP_ - lastState_->payStartFP_;
    }
  }
  if (state->singletonDocID_ != -1) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVIntWithInt:state->singletonDocID_];
  }
  if (writePositions_) {
    if (state->lastPosBlockOffset_ != -1) {
      [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVLongWithLong:state->lastPosBlockOffset_];
    }
  }
  if (state->skipOffset_ != -1) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeVLongWithLong:state->skipOffset_];
  }
  JreStrongAssign(&lastState_, state);
}

- (void)close {
  jboolean success = false;
  @try {
    if (docOut_ != nil) {
      OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(docOut_);
    }
    if (posOut_ != nil) {
      OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(posOut_);
    }
    if (payOut_ != nil) {
      OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(payOut_);
    }
    success = true;
  }
  @finally {
    if (success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ docOut_, posOut_, payOut_ } count:3 type:JavaIoCloseable_class_()]);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ docOut_, posOut_, payOut_ } count:3 type:JavaIoCloseable_class_()]);
    }
    JreStrongAssign(&docOut_, JreStrongAssign(&posOut_, JreStrongAssign(&payOut_, nil)));
  }
}

- (void)dealloc {
  RELEASE_(docOut_);
  RELEASE_(posOut_);
  RELEASE_(payOut_);
  RELEASE_(lastState_);
  RELEASE_(docDeltaBuffer_);
  RELEASE_(freqBuffer_);
  RELEASE_(posDeltaBuffer_);
  RELEASE_(payloadLengthBuffer_);
  RELEASE_(offsetStartDeltaBuffer_);
  RELEASE_(offsetLengthBuffer_);
  RELEASE_(payloadBytes_);
  RELEASE_(encoded_);
  RELEASE_(forUtil_);
  RELEASE_(skipWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentWriteState:);
  methods[1].selector = @selector(newTermState);
  methods[2].selector = @selector(init__WithOrgApacheLuceneStoreIndexOutput:withOrgApacheLuceneIndexSegmentWriteState:);
  methods[3].selector = @selector(setFieldWithOrgApacheLuceneIndexFieldInfo:);
  methods[4].selector = @selector(startTerm);
  methods[5].selector = @selector(startDocWithInt:withInt:);
  methods[6].selector = @selector(addPositionWithInt:withOrgApacheLuceneUtilBytesRef:withInt:withInt:);
  methods[7].selector = @selector(finishDoc);
  methods[8].selector = @selector(finishTermWithOrgApacheLuceneCodecsBlockTermState:);
  methods[9].selector = @selector(encodeTermWithLongArray:withOrgApacheLuceneStoreDataOutput:withOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneCodecsBlockTermState:withBoolean:);
  methods[10].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docOut_", "LOrgApacheLuceneStoreIndexOutput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "posOut_", "LOrgApacheLuceneStoreIndexOutput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "payOut_", "LOrgApacheLuceneStoreIndexOutput;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "emptyState", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState;", .constantValue.asLong = 0, 0x18, -1, 14, -1, -1 },
    { "lastState_", "LOrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payStartFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docDeltaBuffer_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "freqBuffer_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docBufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posDeltaBuffer_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "payloadLengthBuffer_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "offsetStartDeltaBuffer_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "offsetLengthBuffer_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "posBufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payloadBytes_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payloadByteUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastBlockDocID_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastBlockPosFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastBlockPayFP_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastBlockPosBufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastBlockPayloadByteUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastDocID_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastStartOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoded_", "[B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "forUtil_", "LOrgApacheLuceneCodecsLucene50ForUtil;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "skipWriter_", "LOrgApacheLuceneCodecsLucene50Lucene50SkipWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentWriteState;", "LJavaIoIOException;", "init", "LOrgApacheLuceneStoreIndexOutput;LOrgApacheLuceneIndexSegmentWriteState;", "setField", "LOrgApacheLuceneIndexFieldInfo;", "startDoc", "II", "addPosition", "ILOrgApacheLuceneUtilBytesRef;II", "finishTerm", "LOrgApacheLuceneCodecsBlockTermState;", "encodeTerm", "[JLOrgApacheLuceneStoreDataOutput;LOrgApacheLuceneIndexFieldInfo;LOrgApacheLuceneCodecsBlockTermState;Z", &OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_emptyState };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter = { "Lucene50PostingsWriter", "org.apache.lucene.codecs.lucene50", ptrTable, methods, fields, 7, 0x11, 11, 30, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_emptyState, new_OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_IntBlockTermState_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter)
  }
}

@end

void OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_(OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter *self, OrgApacheLuceneIndexSegmentWriteState *state) {
  OrgApacheLuceneCodecsPushPostingsWriterBase_init(self);
  jfloat acceptableOverheadRatio = OrgApacheLuceneUtilPackedPackedInts_COMPACT;
  NSString *docFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_))->name_, state->segmentSuffix_, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_DOC_EXTENSION);
  JreStrongAssign(&self->docOut_, [((OrgApacheLuceneStoreDirectory *) nil_chk(state->directory_)) createOutputWithNSString:docFileName withOrgApacheLuceneStoreIOContext:state->context_]);
  OrgApacheLuceneStoreIndexOutput *posOut = nil;
  OrgApacheLuceneStoreIndexOutput *payOut = nil;
  jboolean success = false;
  @try {
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(self->docOut_, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_DOC_CODEC, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    JreStrongAssignAndConsume(&self->forUtil_, new_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_(acceptableOverheadRatio, self->docOut_));
    if ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(state->fieldInfos_)) hasProx]) {
      JreStrongAssignAndConsume(&self->posDeltaBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
      NSString *posFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_POS_EXTENSION);
      posOut = [state->directory_ createOutputWithNSString:posFileName withOrgApacheLuceneStoreIOContext:state->context_];
      OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(posOut, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_POS_CODEC, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
      if ([state->fieldInfos_ hasPayloads]) {
        JreStrongAssignAndConsume(&self->payloadBytes_, [IOSByteArray newArrayWithLength:128]);
        JreStrongAssignAndConsume(&self->payloadLengthBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
      }
      else {
        JreStrongAssign(&self->payloadBytes_, nil);
        JreStrongAssign(&self->payloadLengthBuffer_, nil);
      }
      if ([state->fieldInfos_ hasOffsets]) {
        JreStrongAssignAndConsume(&self->offsetStartDeltaBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
        JreStrongAssignAndConsume(&self->offsetLengthBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
      }
      else {
        JreStrongAssign(&self->offsetStartDeltaBuffer_, nil);
        JreStrongAssign(&self->offsetLengthBuffer_, nil);
      }
      if ([state->fieldInfos_ hasPayloads] || [state->fieldInfos_ hasOffsets]) {
        NSString *payFileName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_PAY_EXTENSION);
        payOut = [state->directory_ createOutputWithNSString:payFileName withOrgApacheLuceneStoreIOContext:state->context_];
        OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(payOut, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_PAY_CODEC, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
      }
    }
    else {
      JreStrongAssign(&self->posDeltaBuffer_, nil);
      JreStrongAssign(&self->payloadLengthBuffer_, nil);
      JreStrongAssign(&self->offsetStartDeltaBuffer_, nil);
      JreStrongAssign(&self->offsetLengthBuffer_, nil);
      JreStrongAssign(&self->payloadBytes_, nil);
    }
    JreStrongAssign(&self->payOut_, payOut);
    JreStrongAssign(&self->posOut_, posOut);
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->docOut_, posOut, payOut } count:3 type:JavaIoCloseable_class_()]);
    }
  }
  JreStrongAssignAndConsume(&self->docDeltaBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssignAndConsume(&self->freqBuffer_, [IOSIntArray newArrayWithLength:JreLoadStatic(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE)]);
  JreStrongAssignAndConsume(&self->skipWriter_, new_OrgApacheLuceneCodecsLucene50Lucene50SkipWriter_initPackagePrivateWithInt_withInt_withInt_withOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneStoreIndexOutput_(OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_MAX_SKIP_LEVELS, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE, [state->segmentInfo_ maxDoc], self->docOut_, posOut, payOut));
  JreStrongAssignAndConsume(&self->encoded_, [IOSByteArray newArrayWithLength:OrgApacheLuceneCodecsLucene50ForUtil_MAX_ENCODED_SIZE]);
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter *new_OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_(OrgApacheLuceneIndexSegmentWriteState *state) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter, initWithOrgApacheLuceneIndexSegmentWriteState_, state)
}

OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter *create_OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_(OrgApacheLuceneIndexSegmentWriteState *state) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter, initWithOrgApacheLuceneIndexSegmentWriteState_, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsLucene50Lucene50PostingsWriter)
