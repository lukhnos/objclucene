//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListReader.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50PostingsFormat.h"
#include "org/apache/lucene/codecs/lucene50/Lucene50SkipReader.h"
#include "org/apache/lucene/store/IndexInput.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/lucene50/Lucene50SkipReader must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsLucene50Lucene50SkipReader () {
 @public
  IOSLongArray *docPointer_;
  IOSLongArray *posPointer_;
  IOSLongArray *payPointer_;
  IOSIntArray *posBufferUpto_;
  IOSIntArray *payloadByteUpto_;
  jlong lastPosPointer_;
  jlong lastPayPointer_;
  jint lastPayloadByteUpto_;
  jlong lastDocPointer_;
  jint lastPosBufferUpto_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50SkipReader, docPointer_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50SkipReader, posPointer_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50SkipReader, payPointer_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50SkipReader, posBufferUpto_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsLucene50Lucene50SkipReader, payloadByteUpto_, IOSIntArray *)

@implementation OrgApacheLuceneCodecsLucene50Lucene50SkipReader

- (instancetype)initPackagePrivateWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)skipStream
                                                             withInt:(jint)maxSkipLevels
                                                         withBoolean:(jboolean)hasPos
                                                         withBoolean:(jboolean)hasOffsets
                                                         withBoolean:(jboolean)hasPayloads {
  OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_(self, skipStream, maxSkipLevels, hasPos, hasOffsets, hasPayloads);
  return self;
}

- (jint)trimWithInt:(jint)df {
  return JreIntMod(df, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE) == 0 ? df - 1 : df;
}

- (void)init__WithLong:(jlong)skipPointer
              withLong:(jlong)docBasePointer
              withLong:(jlong)posBasePointer
              withLong:(jlong)payBasePointer
               withInt:(jint)df {
  [super init__WithLong:skipPointer withInt:[self trimWithInt:df]];
  lastDocPointer_ = docBasePointer;
  lastPosPointer_ = posBasePointer;
  lastPayPointer_ = payBasePointer;
  JavaUtilArrays_fillWithLongArray_withLong_(docPointer_, docBasePointer);
  if (posPointer_ != nil) {
    JavaUtilArrays_fillWithLongArray_withLong_(posPointer_, posBasePointer);
    if (payPointer_ != nil) {
      JavaUtilArrays_fillWithLongArray_withLong_(payPointer_, payBasePointer);
    }
  }
  else {
    JreAssert(posBasePointer == 0, @"org/apache/lucene/codecs/lucene50/Lucene50SkipReader.java:115 condition failed: assert posBasePointer == 0;");
  }
}

- (jlong)getDocPointer {
  return lastDocPointer_;
}

- (jlong)getPosPointer {
  return lastPosPointer_;
}

- (jint)getPosBufferUpto {
  return lastPosBufferUpto_;
}

- (jlong)getPayPointer {
  return lastPayPointer_;
}

- (jint)getPayloadByteUpto {
  return lastPayloadByteUpto_;
}

- (jint)getNextSkipDoc {
  return IOSIntArray_Get(nil_chk(skipDoc_), 0);
}

- (void)seekChildWithInt:(jint)level {
  [super seekChildWithInt:level];
  *IOSLongArray_GetRef(nil_chk(docPointer_), level) = lastDocPointer_;
  if (posPointer_ != nil) {
    *IOSLongArray_GetRef(posPointer_, level) = lastPosPointer_;
    *IOSIntArray_GetRef(nil_chk(posBufferUpto_), level) = lastPosBufferUpto_;
    if (payloadByteUpto_ != nil) {
      *IOSIntArray_GetRef(payloadByteUpto_, level) = lastPayloadByteUpto_;
    }
    if (payPointer_ != nil) {
      *IOSLongArray_GetRef(payPointer_, level) = lastPayPointer_;
    }
  }
}

- (void)setLastSkipDataWithInt:(jint)level {
  [super setLastSkipDataWithInt:level];
  lastDocPointer_ = IOSLongArray_Get(nil_chk(docPointer_), level);
  if (posPointer_ != nil) {
    lastPosPointer_ = IOSLongArray_Get(posPointer_, level);
    lastPosBufferUpto_ = IOSIntArray_Get(nil_chk(posBufferUpto_), level);
    if (payPointer_ != nil) {
      lastPayPointer_ = IOSLongArray_Get(payPointer_, level);
    }
    if (payloadByteUpto_ != nil) {
      lastPayloadByteUpto_ = IOSIntArray_Get(payloadByteUpto_, level);
    }
  }
}

- (jint)readSkipDataWithInt:(jint)level
withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)skipStream {
  jint delta = [((OrgApacheLuceneStoreIndexInput *) nil_chk(skipStream)) readVInt];
  *IOSLongArray_GetRef(nil_chk(docPointer_), level) += [skipStream readVLong];
  if (posPointer_ != nil) {
    *IOSLongArray_GetRef(posPointer_, level) += [skipStream readVLong];
    *IOSIntArray_GetRef(nil_chk(posBufferUpto_), level) = [skipStream readVInt];
    if (payloadByteUpto_ != nil) {
      *IOSIntArray_GetRef(payloadByteUpto_, level) = [skipStream readVInt];
    }
    if (payPointer_ != nil) {
      *IOSLongArray_GetRef(payPointer_, level) += [skipStream readVLong];
    }
  }
  return delta;
}

- (void)dealloc {
  RELEASE_(docPointer_);
  RELEASE_(posPointer_);
  RELEASE_(payPointer_);
  RELEASE_(posBufferUpto_);
  RELEASE_(payloadByteUpto_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 2, 5, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 8, 9, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneStoreIndexInput:withInt:withBoolean:withBoolean:withBoolean:);
  methods[1].selector = @selector(trimWithInt:);
  methods[2].selector = @selector(init__WithLong:withLong:withLong:withLong:withInt:);
  methods[3].selector = @selector(getDocPointer);
  methods[4].selector = @selector(getPosPointer);
  methods[5].selector = @selector(getPosBufferUpto);
  methods[6].selector = @selector(getPayPointer);
  methods[7].selector = @selector(getPayloadByteUpto);
  methods[8].selector = @selector(getNextSkipDoc);
  methods[9].selector = @selector(seekChildWithInt:);
  methods[10].selector = @selector(setLastSkipDataWithInt:);
  methods[11].selector = @selector(readSkipDataWithInt:withOrgApacheLuceneStoreIndexInput:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docPointer_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posPointer_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payPointer_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "posBufferUpto_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payloadByteUpto_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPosPointer_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPayPointer_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPayloadByteUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastDocPointer_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPosBufferUpto_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreIndexInput;IZZZ", "trim", "I", "init", "JJJJI", "LJavaIoIOException;", "seekChild", "setLastSkipData", "readSkipData", "ILOrgApacheLuceneStoreIndexInput;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsLucene50Lucene50SkipReader = { "Lucene50SkipReader", "org.apache.lucene.codecs.lucene50", ptrTable, methods, fields, 7, 0x10, 12, 10, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsLucene50Lucene50SkipReader;
}

@end

void OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneCodecsLucene50Lucene50SkipReader *self, OrgApacheLuceneStoreIndexInput *skipStream, jint maxSkipLevels, jboolean hasPos, jboolean hasOffsets, jboolean hasPayloads) {
  OrgApacheLuceneCodecsMultiLevelSkipListReader_initWithOrgApacheLuceneStoreIndexInput_withInt_withInt_withInt_(self, skipStream, maxSkipLevels, OrgApacheLuceneCodecsLucene50Lucene50PostingsFormat_BLOCK_SIZE, 8);
  JreStrongAssignAndConsume(&self->docPointer_, [IOSLongArray newArrayWithLength:maxSkipLevels]);
  if (hasPos) {
    JreStrongAssignAndConsume(&self->posPointer_, [IOSLongArray newArrayWithLength:maxSkipLevels]);
    JreStrongAssignAndConsume(&self->posBufferUpto_, [IOSIntArray newArrayWithLength:maxSkipLevels]);
    if (hasPayloads) {
      JreStrongAssignAndConsume(&self->payloadByteUpto_, [IOSIntArray newArrayWithLength:maxSkipLevels]);
    }
    else {
      JreStrongAssign(&self->payloadByteUpto_, nil);
    }
    if (hasOffsets || hasPayloads) {
      JreStrongAssignAndConsume(&self->payPointer_, [IOSLongArray newArrayWithLength:maxSkipLevels]);
    }
    else {
      JreStrongAssign(&self->payPointer_, nil);
    }
  }
  else {
    JreStrongAssign(&self->posPointer_, nil);
  }
}

OrgApacheLuceneCodecsLucene50Lucene50SkipReader *new_OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneStoreIndexInput *skipStream, jint maxSkipLevels, jboolean hasPos, jboolean hasOffsets, jboolean hasPayloads) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsLucene50Lucene50SkipReader, initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_, skipStream, maxSkipLevels, hasPos, hasOffsets, hasPayloads)
}

OrgApacheLuceneCodecsLucene50Lucene50SkipReader *create_OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneStoreIndexInput *skipStream, jint maxSkipLevels, jboolean hasPos, jboolean hasOffsets, jboolean hasPayloads) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsLucene50Lucene50SkipReader, initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_, skipStream, maxSkipLevels, hasPos, hasOffsets, hasPayloads)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsLucene50Lucene50SkipReader)
