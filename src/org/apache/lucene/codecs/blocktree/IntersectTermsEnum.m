//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/blocktree/FieldReader.h"
#include "org/apache/lucene/codecs/blocktree/IntersectTermsEnum.h"
#include "org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/RunAutomaton.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Outputs.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/blocktree/IntersectTermsEnum must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum () {
 @public
  IOSObjectArray *arcs_;
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *currentFrame_;
  OrgApacheLuceneUtilAutomatonTransition *currentTransition_;
  OrgApacheLuceneUtilBytesRef *term_;
  OrgApacheLuceneUtilFstFST_BytesReader *fstReader_;
  jboolean allowAutoPrefixTerms_;
  /*!
   @brief Which state in the automaton accepts all possible suffixes.
   */
  jint sinkState_;
  OrgApacheLuceneUtilBytesRef *savedStartTerm_;
  /*!
   @brief True if we did return the current auto-prefix term
   */
  jboolean useAutoPrefixTerm_;
  OrgApacheLuceneUtilAutomatonTransition *scratchTransition_;
}

- (jboolean)setSavedStartTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm;

- (OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *)getFrameWithInt:(jint)ord;

- (OrgApacheLuceneUtilFstFST_Arc *)getArcWithInt:(jint)ord;

- (OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *)pushFrameWithInt:(jint)state;

- (jint)getState;

- (void)seekToStartTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target;

- (jboolean)popPushNext;

- (jboolean)skipPastLastAutoPrefixTerm;

- (OrgApacheLuceneUtilBytesRef *)_next;

/*!
 @brief Returns true if, from this state, the automaton accepts any suffix
   starting with a label between start and end, inclusive.We just
   look for a transition, matching this range, to the sink state.
 */
- (jboolean)acceptsSuffixRangeWithInt:(jint)state
                              withInt:(jint)start
                              withInt:(jint)end;

- (void)copyTerm OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, arcs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, currentFrame_, OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, currentTransition_, OrgApacheLuceneUtilAutomatonTransition *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, term_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, fstReader_, OrgApacheLuceneUtilFstFST_BytesReader *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, savedStartTerm_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, scratchTransition_, OrgApacheLuceneUtilAutomatonTransition *)

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_setSavedStartTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, OrgApacheLuceneUtilBytesRef *startTerm);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getFrameWithInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, jint ord);

__attribute__((unused)) static OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getArcWithInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, jint ord);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_pushFrameWithInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, jint state);

__attribute__((unused)) static jint OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getState(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_seekToStartTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, OrgApacheLuceneUtilBytesRef *target);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_skipPastLastAutoPrefixTerm(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self);

__attribute__((unused)) static OrgApacheLuceneUtilBytesRef *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum__next(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_acceptsSuffixRangeWithInt_withInt_withInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, jint state, jint start, jint end);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_copyTerm(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self);

@interface OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException : JavaLangRuntimeException

- (instancetype)init;

- (JavaLangThrowable *)fillInStackTrace;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException)

inline OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_get_INSTANCE(void);
static OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException, INSTANCE, OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_init(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *self);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *new_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *create_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum)

OrgApacheLuceneUtilFstOutputs *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_fstOutputs;

@implementation OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum

+ (OrgApacheLuceneUtilFstOutputs *)fstOutputs {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_fstOutputs;
}

- (instancetype)initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader:(OrgApacheLuceneCodecsBlocktreeFieldReader *)fr
                                      withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                   withOrgApacheLuceneUtilAutomatonRunAutomaton:(OrgApacheLuceneUtilAutomatonRunAutomaton *)runAutomaton
                                                withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)commonSuffix
                                                withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm
                                                                        withInt:(jint)sinkState {
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(self, fr, automaton, runAutomaton, commonSuffix, startTerm, sinkState);
  return self;
}

- (jboolean)setSavedStartTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_setSavedStartTermWithOrgApacheLuceneUtilBytesRef_(self, startTerm);
}

- (OrgApacheLuceneIndexTermState *)termState {
  [((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return [((OrgApacheLuceneCodecsBlockTermState *) nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(currentFrame_))->termState_)) java_clone];
}

- (OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *)getFrameWithInt:(jint)ord {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getFrameWithInt_(self, ord);
}

- (OrgApacheLuceneUtilFstFST_Arc *)getArcWithInt:(jint)ord {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getArcWithInt_(self, ord);
}

- (OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *)pushFrameWithInt:(jint)state {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_pushFrameWithInt_(self, state);
}

- (OrgApacheLuceneUtilBytesRef *)term {
  return term_;
}

- (jint)docFreq {
  [((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(currentFrame_))->termState_))->docFreq_;
}

- (jlong)totalTermFreq {
  [((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(currentFrame_))->termState_))->totalTermFreq_;
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags {
  [((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(currentFrame_)) decodeMetaData];
  return [((OrgApacheLuceneCodecsPostingsReaderBase *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr_))->parent_))->postingsReader_)) postingsWithOrgApacheLuceneIndexFieldInfo:fr_->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(currentFrame_))->termState_ withOrgApacheLuceneIndexPostingsEnum:reuse withInt:flags];
}

- (jint)getState {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getState(self);
}

- (void)seekToStartTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)target {
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_seekToStartTermWithOrgApacheLuceneUtilBytesRef_(self, target);
}

- (jboolean)popPushNext {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
}

- (jboolean)skipPastLastAutoPrefixTerm {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_skipPastLastAutoPrefixTerm(self);
}

- (OrgApacheLuceneUtilBytesRef *)next {
  @try {
    return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum__next(self);
  }
  @catch (OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *eoi) {
    JreStrongAssign(&currentFrame_, nil);
    return nil;
  }
}

- (OrgApacheLuceneUtilBytesRef *)_next {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum__next(self);
}

- (jboolean)acceptsSuffixRangeWithInt:(jint)state
                              withInt:(jint)start
                              withInt:(jint)end {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_acceptsSuffixRangeWithInt_withInt_withInt_(self, state, start, end);
}

+ (NSString *)brToStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b {
  return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_brToStringWithOrgApacheLuceneUtilBytesRef_(b);
}

- (void)copyTerm {
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_copyTerm(self);
}

- (jboolean)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)seekExactWithLong:(jlong)ord {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jlong)ord {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatus *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)dealloc {
  RELEASE_(in_);
  RELEASE_(stack_);
  RELEASE_(arcs_);
  RELEASE_(runAutomaton_);
  RELEASE_(automaton_);
  RELEASE_(commonSuffix_);
  RELEASE_(currentFrame_);
  RELEASE_(currentTransition_);
  RELEASE_(term_);
  RELEASE_(fstReader_);
  RELEASE_(fr_);
  RELEASE_(savedStartTerm_);
  RELEASE_(scratchTransition_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermState;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame;", 0x2, 4, 5, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilFstFST_Arc;", 0x2, 6, 5, -1, 7, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame;", 0x2, 8, 5, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 3, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum_SeekStatus;", 0x1, 17, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader:withOrgApacheLuceneUtilAutomatonAutomaton:withOrgApacheLuceneUtilAutomatonRunAutomaton:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:withInt:);
  methods[1].selector = @selector(setSavedStartTermWithOrgApacheLuceneUtilBytesRef:);
  methods[2].selector = @selector(termState);
  methods[3].selector = @selector(getFrameWithInt:);
  methods[4].selector = @selector(getArcWithInt:);
  methods[5].selector = @selector(pushFrameWithInt:);
  methods[6].selector = @selector(term);
  methods[7].selector = @selector(docFreq);
  methods[8].selector = @selector(totalTermFreq);
  methods[9].selector = @selector(postingsWithOrgApacheLuceneIndexPostingsEnum:withInt:);
  methods[10].selector = @selector(getState);
  methods[11].selector = @selector(seekToStartTermWithOrgApacheLuceneUtilBytesRef:);
  methods[12].selector = @selector(popPushNext);
  methods[13].selector = @selector(skipPastLastAutoPrefixTerm);
  methods[14].selector = @selector(next);
  methods[15].selector = @selector(_next);
  methods[16].selector = @selector(acceptsSuffixRangeWithInt:withInt:withInt:);
  methods[17].selector = @selector(brToStringWithOrgApacheLuceneUtilBytesRef:);
  methods[18].selector = @selector(copyTerm);
  methods[19].selector = @selector(seekExactWithOrgApacheLuceneUtilBytesRef:);
  methods[20].selector = @selector(seekExactWithLong:);
  methods[21].selector = @selector(ord);
  methods[22].selector = @selector(seekCeilWithOrgApacheLuceneUtilBytesRef:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "in_", "LOrgApacheLuceneStoreIndexInput;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fstOutputs", "LOrgApacheLuceneUtilFstOutputs;", .constantValue.asLong = 0, 0x18, -1, 18, 19, -1 },
    { "stack_", "[LOrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "arcs_", "[LOrgApacheLuceneUtilFstFST_Arc;", .constantValue.asLong = 0, 0x2, -1, -1, 20, -1 },
    { "runAutomaton_", "LOrgApacheLuceneUtilAutomatonRunAutomaton;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "automaton_", "LOrgApacheLuceneUtilAutomatonAutomaton;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "commonSuffix_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "currentFrame_", "LOrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentTransition_", "LOrgApacheLuceneUtilAutomatonTransition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "term_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fstReader_", "LOrgApacheLuceneUtilFstFST_BytesReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "allowAutoPrefixTerms_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fr_", "LOrgApacheLuceneCodecsBlocktreeFieldReader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sinkState_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "savedStartTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useAutoPrefixTerm_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scratchTransition_", "LOrgApacheLuceneUtilAutomatonTransition;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsBlocktreeFieldReader;LOrgApacheLuceneUtilAutomatonAutomaton;LOrgApacheLuceneUtilAutomatonRunAutomaton;LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;I", "LJavaIoIOException;", "setSavedStartTerm", "LOrgApacheLuceneUtilBytesRef;", "getFrame", "I", "getArc", "(I)Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/BytesRef;>;", "pushFrame", "postings", "LOrgApacheLuceneIndexPostingsEnum;I", "seekToStartTerm", "acceptsSuffixRange", "III", "brToString", "seekExact", "J", "seekCeil", &OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_fstOutputs, "Lorg/apache/lucene/util/fst/Outputs<Lorg/apache/lucene/util/BytesRef;>;", "[Lorg/apache/lucene/util/fst/FST$Arc<Lorg/apache/lucene/util/BytesRef;>;", "LOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum = { "IntersectTermsEnum", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x10, 23, 17, -1, 21, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum class]) {
    JreStrongAssign(&OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_fstOutputs, OrgApacheLuceneUtilFstByteSequenceOutputs_getSingleton());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum)
  }
}

@end

void OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, OrgApacheLuceneCodecsBlocktreeFieldReader *fr, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneUtilAutomatonRunAutomaton *runAutomaton, OrgApacheLuceneUtilBytesRef *commonSuffix, OrgApacheLuceneUtilBytesRef *startTerm, jint sinkState) {
  OrgApacheLuceneIndexTermsEnum_init(self);
  JreStrongAssignAndConsume(&self->arcs_, [IOSObjectArray newArrayWithLength:5 type:OrgApacheLuceneUtilFstFST_Arc_class_()]);
  JreStrongAssignAndConsume(&self->term_, new_OrgApacheLuceneUtilBytesRef_init());
  JreStrongAssignAndConsume(&self->scratchTransition_, new_OrgApacheLuceneUtilAutomatonTransition_init());
  JreStrongAssign(&self->fr_, fr);
  self->sinkState_ = sinkState;
  JreAssert(automaton != nil, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:89 condition failed: assert automaton != null;");
  JreAssert(runAutomaton != nil, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:90 condition failed: assert runAutomaton != null;");
  JreStrongAssign(&self->runAutomaton_, runAutomaton);
  self->allowAutoPrefixTerms_ = (sinkState != -1);
  JreStrongAssign(&self->automaton_, automaton);
  JreStrongAssign(&self->commonSuffix_, commonSuffix);
  JreStrongAssign(&self->in_, [((OrgApacheLuceneStoreIndexInput *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *) nil_chk(((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(fr))->parent_))->termsIn_)) java_clone]);
  JreStrongAssignAndConsume(&self->stack_, [IOSObjectArray newArrayWithLength:5 type:OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame_class_()]);
  for (jint idx = 0; idx < ((IOSObjectArray *) nil_chk(self->stack_))->size_; idx++) {
    IOSObjectArray_SetAndConsume(self->stack_, idx, new_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_withInt_(self, idx));
  }
  for (jint arcIdx = 0; arcIdx < ((IOSObjectArray *) nil_chk(self->arcs_))->size_; arcIdx++) {
    IOSObjectArray_SetAndConsume(self->arcs_, arcIdx, new_OrgApacheLuceneUtilFstFST_Arc_init());
  }
  if (fr->index_ == nil) {
    JreStrongAssign(&self->fstReader_, nil);
  }
  else {
    JreStrongAssign(&self->fstReader_, [fr->index_ getBytesReader]);
  }
  OrgApacheLuceneUtilFstFST_Arc *arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(fr->index_)) getFirstArcWithOrgApacheLuceneUtilFstFST_Arc:IOSObjectArray_Get(nil_chk(self->arcs_), 0)];
  JreAssert([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal], @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:121 condition failed: assert arc.isFinal();");
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *f = IOSObjectArray_Get(nil_chk(self->stack_), 0);
  ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(f))->fp_ = f->fpOrig_ = fr->rootBlockFP_;
  f->prefix_ = 0;
  [f setStateWithInt:[((OrgApacheLuceneUtilAutomatonRunAutomaton *) nil_chk(runAutomaton)) getInitialState]];
  JreStrongAssign(&f->arc_, arc);
  JreStrongAssign(&f->outputPrefix_, arc->output_);
  [f load__WithOrgApacheLuceneUtilBytesRef:fr->rootCode_];
  JreAssert(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_setSavedStartTermWithOrgApacheLuceneUtilBytesRef_(self, startTerm), @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:133 condition failed: assert setSavedStartTerm(startTerm);");
  JreStrongAssign(&self->currentFrame_, f);
  if (startTerm != nil) {
    OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_seekToStartTermWithOrgApacheLuceneUtilBytesRef_(self, startTerm);
  }
  JreStrongAssign(&self->currentTransition_, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transition_);
}

OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *new_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneCodecsBlocktreeFieldReader *fr, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneUtilAutomatonRunAutomaton *runAutomaton, OrgApacheLuceneUtilBytesRef *commonSuffix, OrgApacheLuceneUtilBytesRef *startTerm, jint sinkState) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_, fr, automaton, runAutomaton, commonSuffix, startTerm, sinkState)
}

OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *create_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneCodecsBlocktreeFieldReader *fr, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneUtilAutomatonRunAutomaton *runAutomaton, OrgApacheLuceneUtilBytesRef *commonSuffix, OrgApacheLuceneUtilBytesRef *startTerm, jint sinkState) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_, fr, automaton, runAutomaton, commonSuffix, startTerm, sinkState)
}

jboolean OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_setSavedStartTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, OrgApacheLuceneUtilBytesRef *startTerm) {
  JreStrongAssign(&self->savedStartTerm_, startTerm == nil ? nil : OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(startTerm));
  return true;
}

OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getFrameWithInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, jint ord) {
  if (ord >= ((IOSObjectArray *) nil_chk(self->stack_))->size_) {
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + ord, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF)) type:OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->stack_, 0, next, 0, ((IOSObjectArray *) nil_chk(self->stack_))->size_);
    for (jint stackOrd = ((IOSObjectArray *) nil_chk(self->stack_))->size_; stackOrd < next->size_; stackOrd++) {
      IOSObjectArray_SetAndConsume(next, stackOrd, new_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_withInt_(self, stackOrd));
    }
    JreStrongAssign(&self->stack_, next);
  }
  JreAssert(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(IOSObjectArray_Get(self->stack_, ord)))->ord_ == ord, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:163 condition failed: assert stack[ord].ord == ord;");
  return IOSObjectArray_Get(self->stack_, ord);
}

OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getArcWithInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, jint ord) {
  if (ord >= ((IOSObjectArray *) nil_chk(self->arcs_))->size_) {
    IOSObjectArray *next = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1 + ord, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF)) type:OrgApacheLuceneUtilFstFST_Arc_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->arcs_, 0, next, 0, ((IOSObjectArray *) nil_chk(self->arcs_))->size_);
    for (jint arcOrd = ((IOSObjectArray *) nil_chk(self->arcs_))->size_; arcOrd < next->size_; arcOrd++) {
      IOSObjectArray_SetAndConsume(next, arcOrd, new_OrgApacheLuceneUtilFstFST_Arc_init());
    }
    JreStrongAssign(&self->arcs_, next);
  }
  return IOSObjectArray_Get(self->arcs_, ord);
}

OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_pushFrameWithInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, jint state) {
  JreAssert(self->currentFrame_ != nil, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:181 condition failed: assert currentFrame != null;");
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *f = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getFrameWithInt_(self, self->currentFrame_ == nil ? 0 : 1 + self->currentFrame_->ord_);
  ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(f))->fp_ = f->fpOrig_ = ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->lastSubFP_;
  f->prefix_ = self->currentFrame_->prefix_ + self->currentFrame_->suffix_;
  [f setStateWithInt:state];
  OrgApacheLuceneUtilFstFST_Arc *arc = JreRetainedLocalValue(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->arc_);
  jint idx = self->currentFrame_->prefix_;
  JreAssert(self->currentFrame_->suffix_ > 0, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:195 condition failed: assert currentFrame.suffix > 0;");
  OrgApacheLuceneUtilBytesRef *output = JreRetainedLocalValue(self->currentFrame_->outputPrefix_);
  while (idx < f->prefix_) {
    jint target = IOSByteArray_Get(nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->bytes_), idx) & (jint) 0xff;
    arc = [((OrgApacheLuceneUtilFstFST *) nil_chk(((OrgApacheLuceneCodecsBlocktreeFieldReader *) nil_chk(self->fr_))->index_)) findTargetArcWithInt:target withOrgApacheLuceneUtilFstFST_Arc:arc withOrgApacheLuceneUtilFstFST_Arc:OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getArcWithInt_(self, 1 + idx) withOrgApacheLuceneUtilFstFST_BytesReader:self->fstReader_];
    JreAssert(arc != nil, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:203 condition failed: assert arc != null;");
    output = [((OrgApacheLuceneUtilFstOutputs *) nil_chk(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_fstOutputs)) addWithId:output withId:((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc))->output_];
    idx++;
  }
  JreStrongAssign(&f->arc_, arc);
  JreStrongAssign(&f->outputPrefix_, output);
  JreAssert([((OrgApacheLuceneUtilFstFST_Arc *) nil_chk(arc)) isFinal], @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:210 condition failed: assert arc.isFinal();");
  [f load__WithOrgApacheLuceneUtilBytesRef:[((OrgApacheLuceneUtilFstOutputs *) nil_chk(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_fstOutputs)) addWithId:output withId:arc->nextFinalOutput_]];
  return f;
}

jint OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getState(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self) {
  jint state = ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->state_;
  for (jint idx = 0; idx < ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->suffix_; idx++) {
    state = [((OrgApacheLuceneUtilAutomatonRunAutomaton *) nil_chk(self->runAutomaton_)) stepWithInt:state withInt:IOSByteArray_Get(nil_chk(self->currentFrame_->suffixBytes_), self->currentFrame_->startBytePos_ + idx) & (jint) 0xff];
    JreAssert(state != -1, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:242 condition failed: assert state != -1;");
  }
  return state;
}

void OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_seekToStartTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, OrgApacheLuceneUtilBytesRef *target) {
  JreAssert(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->ord_ == 0, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:252 condition failed: assert currentFrame.ord == 0;");
  if (((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->length_ < ((OrgApacheLuceneUtilBytesRef *) nil_chk(target))->length_) {
    JreStrongAssign(&self->term_->bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(self->term_->bytes_, target->length_));
  }
  OrgApacheLuceneUtilFstFST_Arc *arc = IOSObjectArray_Get(nil_chk(self->arcs_), 0);
  JreAssert(JreObjectEqualsEquals(arc, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->arc_), @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:257 condition failed: assert arc == currentFrame.arc;");
  for (jint idx = 0; idx <= target->length_; idx++) {
    while (true) {
      jint savNextEnt = ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->nextEnt_;
      jint savePos = [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(self->currentFrame_->suffixesReader_)) getPosition];
      jint saveStartBytePos = ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->startBytePos_;
      jint saveSuffix = self->currentFrame_->suffix_;
      jlong saveLastSubFP = self->currentFrame_->lastSubFP_;
      jint saveTermBlockOrd = ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->currentFrame_->termState_))->termBlockOrd_;
      jboolean saveIsAutoPrefixTerm = self->currentFrame_->isAutoPrefixTerm_;
      jboolean isSubBlock = [self->currentFrame_ next];
      self->term_->length_ = ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->prefix_ + self->currentFrame_->suffix_;
      if (((IOSByteArray *) nil_chk(self->term_->bytes_))->size_ < self->term_->length_) {
        JreStrongAssign(&self->term_->bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(self->term_->bytes_, self->term_->length_));
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->suffixBytes_, self->currentFrame_->startBytePos_, self->term_->bytes_, self->currentFrame_->prefix_, self->currentFrame_->suffix_);
      if (isSubBlock && OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(target, self->term_)) {
        JreStrongAssign(&self->currentFrame_, OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_pushFrameWithInt_(self, OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_getState(self)));
        break;
      }
      else {
        jint cmp = [self->term_ compareToWithId:target];
        if (cmp < 0) {
          if (((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->nextEnt_ == self->currentFrame_->entCount_) {
            if (!self->currentFrame_->isLastInFloor_) {
              [self->currentFrame_ loadNextFloorBlock];
              continue;
            }
            else {
              return;
            }
          }
          continue;
        }
        else if (cmp == 0) {
          if (self->allowAutoPrefixTerms_ == false && ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->isAutoPrefixTerm_) {
            continue;
          }
          return;
        }
        else if (self->allowAutoPrefixTerms_ || ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->isAutoPrefixTerm_ == false) {
          ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->nextEnt_ = savNextEnt;
          self->currentFrame_->lastSubFP_ = saveLastSubFP;
          self->currentFrame_->startBytePos_ = saveStartBytePos;
          self->currentFrame_->suffix_ = saveSuffix;
          [self->currentFrame_->suffixesReader_ setPositionWithInt:savePos];
          ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->termState_->termBlockOrd_ = saveTermBlockOrd;
          self->currentFrame_->isAutoPrefixTerm_ = saveIsAutoPrefixTerm;
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->currentFrame_->suffixBytes_, self->currentFrame_->startBytePos_, self->term_->bytes_, self->currentFrame_->prefix_, self->currentFrame_->suffix_);
          self->term_->length_ = ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->prefix_ + self->currentFrame_->suffix_;
          return;
        }
      }
    }
  }
  JreAssert(false, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:324 condition failed: assert false;");
}

jboolean OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self) {
  while (((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->nextEnt_ == self->currentFrame_->entCount_) {
    if (!self->currentFrame_->isLastInFloor_) {
      [self->currentFrame_ loadNextFloorBlock];
      break;
    }
    else {
      if (self->currentFrame_->ord_ == 0) {
        @throw nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException, INSTANCE));
      }
      jlong lastFP = self->currentFrame_->fpOrig_;
      JreStrongAssign(&self->currentFrame_, IOSObjectArray_Get(nil_chk(self->stack_), self->currentFrame_->ord_ - 1));
      JreStrongAssign(&self->currentTransition_, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transition_);
      JreAssert(self->currentFrame_->lastSubFP_ == lastFP, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:341 condition failed: assert currentFrame.lastSubFP == lastFP;");
    }
  }
  return [((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_)) next];
}

jboolean OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_skipPastLastAutoPrefixTerm(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self) {
  JreAssert(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->isAutoPrefixTerm_, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:349 condition failed: assert currentFrame.isAutoPrefixTerm;");
  self->useAutoPrefixTerm_ = false;
  ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(self->currentFrame_->termState_))->isRealTerm_ = true;
  jint floorSuffixLeadEnd = self->currentFrame_->floorSuffixLeadEnd_;
  jboolean isSubBlock;
  if (floorSuffixLeadEnd == -1) {
    jint prefix = self->currentFrame_->prefix_;
    jint suffix = self->currentFrame_->suffix_;
    if (suffix == 0) {
      if (self->currentFrame_->ord_ == 0) {
        @throw nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException, INSTANCE));
      }
      JreStrongAssign(&self->currentFrame_, IOSObjectArray_Get(nil_chk(self->stack_), self->currentFrame_->ord_ - 1));
      JreStrongAssign(&self->currentTransition_, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transition_);
      return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
    }
    else {
      while (true) {
        if (((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->nextEnt_ == self->currentFrame_->entCount_) {
          if (self->currentFrame_->isLastInFloor_ == false) {
            [self->currentFrame_ loadNextFloorBlock];
          }
          else if (self->currentFrame_->ord_ == 0) {
            @throw nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException, INSTANCE));
          }
          else {
            JreStrongAssign(&self->currentFrame_, IOSObjectArray_Get(nil_chk(self->stack_), self->currentFrame_->ord_ - 1));
            JreStrongAssign(&self->currentTransition_, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transition_);
            return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
          }
        }
        isSubBlock = [((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_)) next];
        for (jint i = 0; i < suffix; i++) {
          if (IOSByteArray_Get(nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->bytes_), prefix + i) != IOSByteArray_Get(nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->suffixBytes_), self->currentFrame_->startBytePos_ + i)) {
            goto break_scanPrefix;
          }
        }
      }
      break_scanPrefix: ;
    }
  }
  else {
    jint prefix = self->currentFrame_->prefix_;
    jint suffix = self->currentFrame_->suffix_;
    if (self->currentFrame_->floorSuffixLeadStart_ == -1) {
      suffix++;
    }
    if (suffix == 0) {
      if (self->currentFrame_->ord_ == 0) {
        @throw nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException, INSTANCE));
      }
      JreStrongAssign(&self->currentFrame_, IOSObjectArray_Get(nil_chk(self->stack_), self->currentFrame_->ord_ - 1));
      JreStrongAssign(&self->currentTransition_, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transition_);
      prefix = self->currentFrame_->prefix_;
      suffix = ((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->length_ - self->currentFrame_->prefix_;
    }
    else {
    }
    while (true) {
      if (self->currentFrame_->nextEnt_ == self->currentFrame_->entCount_) {
        if (self->currentFrame_->isLastInFloor_ == false) {
          [self->currentFrame_ loadNextFloorBlock];
        }
        else if (self->currentFrame_->ord_ == 0) {
          @throw nil_chk(JreLoadStatic(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException, INSTANCE));
        }
        else {
          JreStrongAssign(&self->currentFrame_, IOSObjectArray_Get(nil_chk(self->stack_), self->currentFrame_->ord_ - 1));
          JreStrongAssign(&self->currentTransition_, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transition_);
          return OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
        }
      }
      isSubBlock = [((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_)) next];
      for (jint i = 0; i < suffix - 1; i++) {
        if (IOSByteArray_Get(nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->bytes_), prefix + i) != IOSByteArray_Get(nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->suffixBytes_), self->currentFrame_->startBytePos_ + i)) {
          goto break_scanFloor;
        }
      }
      if (((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->suffix_ >= suffix && (IOSByteArray_Get(nil_chk(self->currentFrame_->suffixBytes_), self->currentFrame_->startBytePos_ + suffix - 1) & (jint) 0xff) > floorSuffixLeadEnd) {
        break;
      }
    }
    break_scanFloor: ;
  }
  return isSubBlock;
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum__next(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self) {
  jboolean isSubBlock;
  if (self->useAutoPrefixTerm_) {
    isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_skipPastLastAutoPrefixTerm(self);
    JreAssert(self->useAutoPrefixTerm_ == false, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:516 condition failed: assert useAutoPrefixTerm == false;");
  }
  else {
    isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
  }
  while (true) {
    {
      JreAssert(JreObjectEqualsEquals(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transition_, self->currentTransition_), @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:524 condition failed: assert currentFrame.transition == currentTransition;");
      jint state;
      jint lastState;
      if (self->currentFrame_->suffix_ != 0) {
        IOSByteArray *suffixBytes = self->currentFrame_->suffixBytes_;
        jint label = IOSByteArray_Get(nil_chk(suffixBytes), self->currentFrame_->startBytePos_) & (jint) 0xff;
        if (label < ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->currentTransition_))->min_) {
          jint minTrans = self->currentTransition_->min_;
          while (self->currentFrame_->nextEnt_ < self->currentFrame_->entCount_) {
            isSubBlock = [self->currentFrame_ next];
            if ((IOSByteArray_Get(suffixBytes, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->startBytePos_) & (jint) 0xff) >= minTrans) {
              goto continue_nextTerm;
            }
          }
          isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
          goto continue_nextTerm;
        }
        while (label > self->currentTransition_->max_) {
          if (((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transitionIndex_ >= self->currentFrame_->transitionCount_ - 1) {
            if (self->currentFrame_->ord_ == 0) {
              JreStrongAssign(&self->currentFrame_, nil);
              return nil;
            }
            JreStrongAssign(&self->currentFrame_, IOSObjectArray_Get(nil_chk(self->stack_), self->currentFrame_->ord_ - 1));
            JreStrongAssign(&self->currentTransition_, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transition_);
            isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
            goto continue_nextTerm;
          }
          self->currentFrame_->transitionIndex_++;
          [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(self->automaton_)) getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:self->currentTransition_];
          if (label < ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->currentTransition_))->min_) {
            jint minTrans = self->currentTransition_->min_;
            while (((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->nextEnt_ < self->currentFrame_->entCount_) {
              isSubBlock = [self->currentFrame_ next];
              if ((IOSByteArray_Get(suffixBytes, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->startBytePos_) & (jint) 0xff) >= minTrans) {
                goto continue_nextTerm;
              }
            }
            isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
            goto continue_nextTerm;
          }
        }
        if (self->commonSuffix_ != nil && !isSubBlock) {
          jint termLen = ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->prefix_ + self->currentFrame_->suffix_;
          if (termLen < self->commonSuffix_->length_) {
            isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
            goto continue_nextTerm;
          }
          IOSByteArray *commonSuffixBytes = self->commonSuffix_->bytes_;
          jint lenInPrefix = self->commonSuffix_->length_ - self->currentFrame_->suffix_;
          JreAssert(self->commonSuffix_->offset_ == 0, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:601 condition failed: assert commonSuffix.offset == 0;");
          jint suffixBytesPos;
          jint commonSuffixBytesPos = 0;
          if (lenInPrefix > 0) {
            IOSByteArray *termBytes = ((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->bytes_;
            jint termBytesPos = self->currentFrame_->prefix_ - lenInPrefix;
            JreAssert(termBytesPos >= 0, @"org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java:611 condition failed: assert termBytesPos >= 0;");
            jint termBytesPosEnd = self->currentFrame_->prefix_;
            while (termBytesPos < termBytesPosEnd) {
              if (IOSByteArray_Get(nil_chk(termBytes), termBytesPos++) != IOSByteArray_Get(nil_chk(commonSuffixBytes), commonSuffixBytesPos++)) {
                isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
                goto continue_nextTerm;
              }
            }
            suffixBytesPos = self->currentFrame_->startBytePos_;
          }
          else {
            suffixBytesPos = self->currentFrame_->startBytePos_ + self->currentFrame_->suffix_ - self->commonSuffix_->length_;
          }
          jint commonSuffixBytesPosEnd = self->commonSuffix_->length_;
          while (commonSuffixBytesPos < commonSuffixBytesPosEnd) {
            if (IOSByteArray_Get(suffixBytes, suffixBytesPos++) != IOSByteArray_Get(nil_chk(commonSuffixBytes), commonSuffixBytesPos++)) {
              isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
              goto continue_nextTerm;
            }
          }
        }
        lastState = ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->state_;
        state = self->currentTransition_->dest_;
        jint end = self->currentFrame_->startBytePos_ + self->currentFrame_->suffix_;
        for (jint idx = self->currentFrame_->startBytePos_ + 1; idx < end; idx++) {
          lastState = state;
          state = [((OrgApacheLuceneUtilAutomatonRunAutomaton *) nil_chk(self->runAutomaton_)) stepWithInt:state withInt:IOSByteArray_Get(suffixBytes, idx) & (jint) 0xff];
          if (state == -1) {
            isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
            goto continue_nextTerm;
          }
        }
      }
      else {
        state = self->currentFrame_->state_;
        lastState = self->currentFrame_->lastState_;
      }
      if (isSubBlock) {
        OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_copyTerm(self);
        JreStrongAssign(&self->currentFrame_, OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_pushFrameWithInt_(self, state));
        JreStrongAssign(&self->currentTransition_, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->transition_);
        self->currentFrame_->lastState_ = lastState;
      }
      else if (((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->isAutoPrefixTerm_) {
        if (self->allowAutoPrefixTerms_) {
          if (self->currentFrame_->floorSuffixLeadEnd_ == -1) {
            self->useAutoPrefixTerm_ = (state == self->sinkState_);
          }
          else {
            if (self->currentFrame_->floorSuffixLeadStart_ == -1) {
              if ([((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(self->automaton_)) isAcceptWithInt:state]) {
                self->useAutoPrefixTerm_ = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_acceptsSuffixRangeWithInt_withInt_withInt_(self, state, 0, ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->floorSuffixLeadEnd_);
              }
            }
            else {
              self->useAutoPrefixTerm_ = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_acceptsSuffixRangeWithInt_withInt_withInt_(self, lastState, self->currentFrame_->floorSuffixLeadStart_, self->currentFrame_->floorSuffixLeadEnd_);
            }
          }
          if (self->useAutoPrefixTerm_) {
            OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_copyTerm(self);
            ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->termState_))->isRealTerm_ = false;
            return self->term_;
          }
          else {
          }
        }
        else {
        }
      }
      else if ([((OrgApacheLuceneUtilAutomatonRunAutomaton *) nil_chk(self->runAutomaton_)) isAcceptWithInt:state]) {
        OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_copyTerm(self);
        JreAssert(self->savedStartTerm_ == nil || [((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_)) compareToWithId:self->savedStartTerm_] > 0, JreStrcat("$$$$", @"saveStartTerm=", [((OrgApacheLuceneUtilBytesRef *) nil_chk(self->savedStartTerm_)) utf8ToString], @" term=", [((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_)) utf8ToString]));
        return self->term_;
      }
      else {
      }
      isSubBlock = OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_popPushNext(self);
    }
    continue_nextTerm: ;
  }
}

jboolean OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_acceptsSuffixRangeWithInt_withInt_withInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, jint state, jint start, jint end) {
  jint count = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(self->automaton_)) initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:self->scratchTransition_];
  for (jint i = 0; i < count; i++) {
    [self->automaton_ getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:self->scratchTransition_];
    if (start >= ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->scratchTransition_))->min_ && end <= self->scratchTransition_->max_ && self->scratchTransition_->dest_ == self->sinkState_) {
      return true;
    }
  }
  return false;
}

NSString *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_brToStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *b) {
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_initialize();
  @try {
    return JreStrcat("$C@", [((OrgApacheLuceneUtilBytesRef *) nil_chk(b)) utf8ToString], ' ', b);
  }
  @catch (JavaLangThrowable *t) {
    return [b description];
  }
}

void OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_copyTerm(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self) {
  jint len = ((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->prefix_ + self->currentFrame_->suffix_;
  if (((IOSByteArray *) nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_))->bytes_))->size_ < len) {
    JreStrongAssign(&self->term_->bytes_, OrgApacheLuceneUtilArrayUtil_growWithByteArray_withInt_(self->term_->bytes_, len));
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((OrgApacheLuceneCodecsBlocktreeIntersectTermsEnumFrame *) nil_chk(self->currentFrame_))->suffixBytes_, self->currentFrame_->startBytePos_, self->term_->bytes_, self->currentFrame_->prefix_, self->currentFrame_->suffix_);
  self->term_->length_ = len;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException)

@implementation OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangThrowable *)fillInStackTrace {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fillInStackTrace);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_INSTANCE, "LOrgApacheLuceneCodecsBlocktreeIntersectTermsEnum;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException = { "NoMoreTermsException", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x1a, 2, 1, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_INSTANCE, new_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException)
  }
}

@end

void OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_init(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *self) {
  JavaLangRuntimeException_init(self);
}

OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *new_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException, init)
}

OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException *create_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_NoMoreTermsException)
