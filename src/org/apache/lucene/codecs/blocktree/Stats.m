//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/blocktree/Stats.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/blocktree/SegmentTermsEnumFrame.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IOUtils.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/blocktree/Stats must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsBlocktreeStats () {
 @public
  jint startBlockCount_;
  jint endBlockCount_;
}

@end

@implementation OrgApacheLuceneCodecsBlocktreeStats

- (instancetype)initWithNSString:(NSString *)segment
                    withNSString:(NSString *)field {
  OrgApacheLuceneCodecsBlocktreeStats_initWithNSString_withNSString_(self, segment, field);
  return self;
}

- (void)startBlockWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame:(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *)frame
                                                              withBoolean:(jboolean)isFloor {
  totalBlockCount_++;
  if (isFloor) {
    if (((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(frame))->fp_ == frame->fpOrig_) {
      floorBlockCount_++;
    }
    floorSubBlockCount_++;
  }
  else {
    nonFloorBlockCount_++;
  }
  if (((IOSIntArray *) nil_chk(blockCountByPrefixLen_))->size_ <= ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(frame))->prefix_) {
    JreStrongAssign(&blockCountByPrefixLen_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(blockCountByPrefixLen_, 1 + frame->prefix_));
  }
  (*IOSIntArray_GetRef(nil_chk(blockCountByPrefixLen_), frame->prefix_))++;
  startBlockCount_++;
  totalBlockSuffixBytes_ += [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(frame->suffixesReader_)) length];
  totalBlockStatsBytes_ += [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(frame->statsReader_)) length];
}

- (void)endBlockWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame:(OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *)frame {
  jint termCount = ((OrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame *) nil_chk(frame))->isLeafBlock_ ? frame->entCount_ : ((OrgApacheLuceneCodecsBlockTermState *) nil_chk(frame->state_))->termBlockOrd_;
  jint subBlockCount = frame->entCount_ - termCount;
  totalTermCount_ += termCount;
  if (termCount != 0 && subBlockCount != 0) {
    mixedBlockCount_++;
  }
  else if (termCount != 0) {
    termsOnlyBlockCount_++;
  }
  else if (subBlockCount != 0) {
    subBlocksOnlyBlockCount_++;
  }
  else {
    @throw create_JavaLangIllegalStateException_init();
  }
  endBlockCount_++;
  jlong otherBytes = frame->fpEnd_ - frame->fp_ - [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(frame->suffixesReader_)) length] - [((OrgApacheLuceneStoreByteArrayDataInput *) nil_chk(frame->statsReader_)) length];
  JreAssert(otherBytes > 0, JreStrcat("$J$J$J", @"otherBytes=", otherBytes, @" frame.fp=", frame->fp_, @" frame.fpEnd=", frame->fpEnd_));
  totalBlockOtherBytes_ += otherBytes;
}

- (void)termWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  totalTermBytes_ += ((OrgApacheLuceneUtilBytesRef *) nil_chk(term))->length_;
}

- (void)finish {
  JreAssert(startBlockCount_ == endBlockCount_, JreStrcat("$I$I", @"startBlockCount=", startBlockCount_, @" endBlockCount=", endBlockCount_));
  JreAssert(totalBlockCount_ == floorSubBlockCount_ + nonFloorBlockCount_, JreStrcat("$I$I$I", @"floorSubBlockCount=", floorSubBlockCount_, @" nonFloorBlockCount=", nonFloorBlockCount_, @" totalBlockCount=", totalBlockCount_));
  JreAssert(totalBlockCount_ == mixedBlockCount_ + termsOnlyBlockCount_ + subBlocksOnlyBlockCount_, JreStrcat("$I$I$I$I", @"totalBlockCount=", totalBlockCount_, @" mixedBlockCount=", mixedBlockCount_, @" subBlocksOnlyBlockCount=", subBlocksOnlyBlockCount_, @" termsOnlyBlockCount=", termsOnlyBlockCount_));
}

- (NSString *)description {
  JavaIoByteArrayOutputStream *bos = create_JavaIoByteArrayOutputStream_initWithInt_(1024);
  JavaIoPrintStream *out;
  @try {
    out = create_JavaIoPrintStream_initWithJavaIoOutputStream_withBoolean_withNSString_(bos, false, JreLoadStatic(OrgApacheLuceneUtilIOUtils, UTF_8));
  }
  @catch (JavaIoUnsupportedEncodingException *bogus) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(bogus);
  }
  [((JavaIoPrintStream *) nil_chk(out)) printlnWithNSString:@"  index FST:"];
  [out printlnWithNSString:JreStrcat("$J$", @"    ", indexNumBytes_, @" bytes")];
  [out printlnWithNSString:@"  terms:"];
  [out printlnWithNSString:JreStrcat("$J$", @"    ", totalTermCount_, @" terms")];
  [out printlnWithNSString:JreStrcat("$J$$", @"    ", totalTermBytes_, @" bytes", (totalTermCount_ != 0 ? JreStrcat("$$$", @" (", NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"%.1f", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(((jdouble) totalTermBytes_) / totalTermCount_) } count:1 type:NSObject_class_()]), @" bytes/term)") : @""))];
  [out printlnWithNSString:@"  blocks:"];
  [out printlnWithNSString:JreStrcat("$I$", @"    ", totalBlockCount_, @" blocks")];
  [out printlnWithNSString:JreStrcat("$I$", @"    ", termsOnlyBlockCount_, @" terms-only blocks")];
  [out printlnWithNSString:JreStrcat("$I$", @"    ", subBlocksOnlyBlockCount_, @" sub-block-only blocks")];
  [out printlnWithNSString:JreStrcat("$I$", @"    ", mixedBlockCount_, @" mixed blocks")];
  [out printlnWithNSString:JreStrcat("$I$", @"    ", floorBlockCount_, @" floor blocks")];
  [out printlnWithNSString:JreStrcat("$I$", @"    ", (totalBlockCount_ - floorSubBlockCount_), @" non-floor blocks")];
  [out printlnWithNSString:JreStrcat("$I$", @"    ", floorSubBlockCount_, @" floor sub-blocks")];
  [out printlnWithNSString:JreStrcat("$J$$", @"    ", totalBlockSuffixBytes_, @" term suffix bytes", (totalBlockCount_ != 0 ? JreStrcat("$$$", @" (", NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"%.1f", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(((jdouble) totalBlockSuffixBytes_) / totalBlockCount_) } count:1 type:NSObject_class_()]), @" suffix-bytes/block)") : @""))];
  [out printlnWithNSString:JreStrcat("$J$$", @"    ", totalBlockStatsBytes_, @" term stats bytes", (totalBlockCount_ != 0 ? JreStrcat("$$$", @" (", NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"%.1f", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(((jdouble) totalBlockStatsBytes_) / totalBlockCount_) } count:1 type:NSObject_class_()]), @" stats-bytes/block)") : @""))];
  [out printlnWithNSString:JreStrcat("$J$$", @"    ", totalBlockOtherBytes_, @" other bytes", (totalBlockCount_ != 0 ? JreStrcat("$$$", @" (", NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"%.1f", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(((jdouble) totalBlockOtherBytes_) / totalBlockCount_) } count:1 type:NSObject_class_()]), @" other-bytes/block)") : @""))];
  if (totalBlockCount_ != 0) {
    [out printlnWithNSString:@"    by prefix length:"];
    jint total = 0;
    for (jint prefix = 0; prefix < ((IOSIntArray *) nil_chk(blockCountByPrefixLen_))->size_; prefix++) {
      jint blockCount = IOSIntArray_Get(blockCountByPrefixLen_, prefix);
      total += blockCount;
      if (blockCount != 0) {
        [out printlnWithNSString:JreStrcat("$$$I", @"      ", NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"%2d", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(prefix) } count:1 type:NSObject_class_()]), @": ", blockCount)];
      }
    }
    JreAssert(totalBlockCount_ == total, @"org/apache/lucene/codecs/blocktree/Stats.java:185 condition failed: assert totalBlockCount == total;");
  }
  @try {
    return [bos toStringWithNSString:JreLoadStatic(OrgApacheLuceneUtilIOUtils, UTF_8)];
  }
  @catch (JavaIoUnsupportedEncodingException *bogus) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(bogus);
  }
}

- (void)dealloc {
  RELEASE_(blockCountByPrefixLen_);
  RELEASE_(segment_);
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(startBlockWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame:withBoolean:);
  methods[2].selector = @selector(endBlockWithOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame:);
  methods[3].selector = @selector(termWithOrgApacheLuceneUtilBytesRef:);
  methods[4].selector = @selector(finish);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "indexNumBytes_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalTermCount_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalTermBytes_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "nonFloorBlockCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "floorBlockCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "floorSubBlockCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mixedBlockCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "termsOnlyBlockCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "subBlocksOnlyBlockCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalBlockCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "blockCountByPrefixLen_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startBlockCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endBlockCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalBlockSuffixBytes_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalBlockStatsBytes_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalBlockOtherBytes_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segment_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "startBlock", "LOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame;Z", "endBlock", "LOrgApacheLuceneCodecsBlocktreeSegmentTermsEnumFrame;", "term", "LOrgApacheLuceneUtilBytesRef;", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeStats = { "Stats", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x1, 6, 18, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeStats;
}

@end

void OrgApacheLuceneCodecsBlocktreeStats_initWithNSString_withNSString_(OrgApacheLuceneCodecsBlocktreeStats *self, NSString *segment, NSString *field) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->blockCountByPrefixLen_, [IOSIntArray newArrayWithLength:10]);
  JreStrongAssign(&self->segment_, segment);
  JreStrongAssign(&self->field_, field);
}

OrgApacheLuceneCodecsBlocktreeStats *new_OrgApacheLuceneCodecsBlocktreeStats_initWithNSString_withNSString_(NSString *segment, NSString *field) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeStats, initWithNSString_withNSString_, segment, field)
}

OrgApacheLuceneCodecsBlocktreeStats *create_OrgApacheLuceneCodecsBlocktreeStats_initWithNSString_withNSString_(NSString *segment, NSString *field) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeStats, initWithNSString_withNSString_, segment, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeStats)
