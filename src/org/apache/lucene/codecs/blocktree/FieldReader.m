//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/blocktree/FieldReader.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/blocktree/FieldReader.h"
#include "org/apache/lucene/codecs/blocktree/IntersectTermsEnum.h"
#include "org/apache/lucene/codecs/blocktree/SegmentTermsEnum.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/ByteArrayDataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "org/apache/lucene/util/fst/FST.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/blocktree/FieldReader must not be compiled with ARC (-fobjc-arc)"
#if !__has_feature(objc_arc_weak)
#error "org/apache/lucene/codecs/blocktree/FieldReader must be compiled with weak references support (-fobjc-weak)"
#endif
#endif

inline jlong OrgApacheLuceneCodecsBlocktreeFieldReader_get_BASE_RAM_BYTES_USED(void);
static jlong OrgApacheLuceneCodecsBlocktreeFieldReader_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneCodecsBlocktreeFieldReader, BASE_RAM_BYTES_USED, jlong)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsBlocktreeFieldReader)

@implementation OrgApacheLuceneCodecsBlocktreeFieldReader

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader:(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *)parent
                                         withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                                                  withLong:(jlong)numTerms
                                           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)rootCode
                                                                  withLong:(jlong)sumTotalTermFreq
                                                                  withLong:(jlong)sumDocFreq
                                                                   withInt:(jint)docCount
                                                                  withLong:(jlong)indexStartFP
                                                                   withInt:(jint)longsSize
                                        withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)indexIn
                                           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
                                           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm {
  OrgApacheLuceneCodecsBlocktreeFieldReader_initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, parent, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, longsSize, indexIn, minTerm, maxTerm);
  return self;
}

- (OrgApacheLuceneUtilBytesRef *)getMin {
  if (minTerm_ == nil) {
    return [super getMin];
  }
  else {
    return minTerm_;
  }
}

- (OrgApacheLuceneUtilBytesRef *)getMax {
  if (maxTerm_ == nil) {
    return [super getMax];
  }
  else {
    return maxTerm_;
  }
}

- (OrgApacheLuceneCodecsBlocktreeStats *)getStats {
  return [create_OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_(self) computeBlockStats];
}

- (jboolean)hasFreqs {
  return [((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS)] >= 0;
}

- (jboolean)hasOffsets {
  return [((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0;
}

- (jboolean)hasPositions {
  return [((OrgApacheLuceneIndexIndexOptions *) nil_chk([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS)] >= 0;
}

- (jboolean)hasPayloads {
  return [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) hasPayloads];
}

- (OrgApacheLuceneIndexTermsEnum *)iterator {
  return create_OrgApacheLuceneCodecsBlocktreeSegmentTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_(self);
}

- (jlong)size {
  return numTerms_;
}

- (jlong)getSumTotalTermFreq {
  return sumTotalTermFreq_;
}

- (jlong)getSumDocFreq {
  return sumDocFreq_;
}

- (jint)getDocCount {
  return docCount_;
}

- (OrgApacheLuceneIndexTermsEnum *)intersectWithOrgApacheLuceneUtilAutomatonCompiledAutomaton:(OrgApacheLuceneUtilAutomatonCompiledAutomaton *)compiled
                                                              withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm {
  return create_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(self, ((OrgApacheLuceneUtilAutomatonCompiledAutomaton *) nil_chk(compiled))->automaton_, compiled->runAutomaton_, compiled->commonSuffixRef_, startTerm, compiled->sinkState_);
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneCodecsBlocktreeFieldReader_BASE_RAM_BYTES_USED + ((index_ != nil) ? [((OrgApacheLuceneUtilFstFST *) nil_chk(index_)) ramBytesUsed] : 0);
}

- (id<JavaUtilCollection>)getChildResources {
  if (index_ == nil) {
    return JavaUtilCollections_emptyList();
  }
  else {
    return JavaUtilCollections_singletonWithId_(OrgApacheLuceneUtilAccountables_namedAccountableWithNSString_withOrgApacheLuceneUtilAccountable_(@"term index", index_));
  }
}

- (NSString *)description {
  return JreStrcat("$J$J$J$IC", @"BlockTreeTerms(terms=", numTerms_, @",postings=", sumDocFreq_, @",positions=", sumTotalTermFreq_, @",docs=", docCount_, ')');
}

- (void)__javaClone:(OrgApacheLuceneCodecsBlocktreeFieldReader *)original {
  [super __javaClone:original];
  [parent_ release];
}

- (void)dealloc {
  RELEASE_(fieldInfo_);
  RELEASE_(rootCode_);
  RELEASE_(minTerm_);
  RELEASE_(maxTerm_);
  RELEASE_(index_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsBlocktreeStats;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x1, 2, 3, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader:withOrgApacheLuceneIndexFieldInfo:withLong:withOrgApacheLuceneUtilBytesRef:withLong:withLong:withInt:withLong:withInt:withOrgApacheLuceneStoreIndexInput:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:);
  methods[1].selector = @selector(getMin);
  methods[2].selector = @selector(getMax);
  methods[3].selector = @selector(getStats);
  methods[4].selector = @selector(hasFreqs);
  methods[5].selector = @selector(hasOffsets);
  methods[6].selector = @selector(hasPositions);
  methods[7].selector = @selector(hasPayloads);
  methods[8].selector = @selector(iterator);
  methods[9].selector = @selector(size);
  methods[10].selector = @selector(getSumTotalTermFreq);
  methods[11].selector = @selector(getSumDocFreq);
  methods[12].selector = @selector(getDocCount);
  methods[13].selector = @selector(intersectWithOrgApacheLuceneUtilAutomatonCompiledAutomaton:withOrgApacheLuceneUtilBytesRef:);
  methods[14].selector = @selector(ramBytesUsed);
  methods[15].selector = @selector(getChildResources);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED", "J", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "numTerms_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldInfo_", "LOrgApacheLuceneIndexFieldInfo;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sumTotalTermFreq_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sumDocFreq_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docCount_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "indexStartFP_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "rootBlockFP_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "rootCode_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "minTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "longsSize_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "parent_", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "index_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader;LOrgApacheLuceneIndexFieldInfo;JLOrgApacheLuceneUtilBytesRef;JJIJILOrgApacheLuceneStoreIndexInput;LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;", "LJavaIoIOException;", "intersect", "LOrgApacheLuceneUtilAutomatonCompiledAutomaton;LOrgApacheLuceneUtilBytesRef;", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "toString", &OrgApacheLuceneCodecsBlocktreeFieldReader_BASE_RAM_BYTES_USED, "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/BytesRef;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeFieldReader = { "FieldReader", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x11, 17, 14, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeFieldReader;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsBlocktreeFieldReader class]) {
    OrgApacheLuceneCodecsBlocktreeFieldReader_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneCodecsBlocktreeFieldReader_class_()) + 3 * OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneUtilBytesRef_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsBlocktreeFieldReader)
  }
}

@end

void OrgApacheLuceneCodecsBlocktreeFieldReader_initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeFieldReader *self, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *parent, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, OrgApacheLuceneUtilBytesRef *rootCode, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jlong indexStartFP, jint longsSize, OrgApacheLuceneStoreIndexInput *indexIn, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  OrgApacheLuceneIndexTerms_init(self);
  JreAssert(numTerms > 0, @"org/apache/lucene/codecs/blocktree/FieldReader.java:72 condition failed: assert numTerms > 0;");
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  self->parent_ = parent;
  self->numTerms_ = numTerms;
  self->sumTotalTermFreq_ = sumTotalTermFreq;
  self->sumDocFreq_ = sumDocFreq;
  self->docCount_ = docCount;
  self->indexStartFP_ = indexStartFP;
  JreStrongAssign(&self->rootCode_, rootCode);
  self->longsSize_ = longsSize;
  JreStrongAssign(&self->minTerm_, minTerm);
  JreStrongAssign(&self->maxTerm_, maxTerm);
  self->rootBlockFP_ = JreURShift64([(create_OrgApacheLuceneStoreByteArrayDataInput_initWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(rootCode))->bytes_, rootCode->offset_, rootCode->length_)) readVLong], OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAGS_NUM_BITS);
  if (indexIn != nil) {
    OrgApacheLuceneStoreIndexInput *clone = [indexIn java_clone];
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(clone)) seekWithLong:indexStartFP];
    JreStrongAssignAndConsume(&self->index_, new_OrgApacheLuceneUtilFstFST_initWithOrgApacheLuceneStoreDataInput_withOrgApacheLuceneUtilFstOutputs_(clone, OrgApacheLuceneUtilFstByteSequenceOutputs_getSingleton()));
  }
  else {
    JreStrongAssign(&self->index_, nil);
  }
}

OrgApacheLuceneCodecsBlocktreeFieldReader *new_OrgApacheLuceneCodecsBlocktreeFieldReader_initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *parent, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, OrgApacheLuceneUtilBytesRef *rootCode, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jlong indexStartFP, jint longsSize, OrgApacheLuceneStoreIndexInput *indexIn, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeFieldReader, initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_, parent, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, longsSize, indexIn, minTerm, maxTerm)
}

OrgApacheLuceneCodecsBlocktreeFieldReader *create_OrgApacheLuceneCodecsBlocktreeFieldReader_initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader *parent, OrgApacheLuceneIndexFieldInfo *fieldInfo, jlong numTerms, OrgApacheLuceneUtilBytesRef *rootCode, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jlong indexStartFP, jint longsSize, OrgApacheLuceneStoreIndexInput *indexIn, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeFieldReader, initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_withOrgApacheLuceneIndexFieldInfo_withLong_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withInt_withLong_withInt_withOrgApacheLuceneStoreIndexInput_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_, parent, fieldInfo, numTerms, rootCode, sumTotalTermFreq, sumDocFreq, docCount, indexStartFP, longsSize, indexIn, minTerm, maxTerm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeFieldReader)
