//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.h"
#include "org/apache/lucene/codecs/blocktree/BitSetTermsEnum.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/RAMOutputStream.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/fst/Builder.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter () {
 @public
  OrgApacheLuceneStoreIndexOutput *termsOut_;
  OrgApacheLuceneStoreIndexOutput *indexOut_;
  id<JavaUtilList> fields_;
  /*!
   @brief Reused in getAutoPrefixTermsEnum:
   */
  OrgApacheLuceneIndexTermsEnum *prefixTermsEnum_;
  /*!
   @brief Reused in getAutoPrefixTermsEnum:
   */
  OrgApacheLuceneIndexPostingsEnum *prefixDocsEnum_;
  OrgApacheLuceneStoreRAMOutputStream *scratchBytes_;
  OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef_;
  jboolean closed_;
}

/*!
 @brief Writes the terms file trailer.
 */
- (void)writeTrailerWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                                               withLong:(jlong)dirStart;

/*!
 @brief Writes the index file trailer.
 */
- (void)writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)indexOut
                                                    withLong:(jlong)dirStart;

- (OrgApacheLuceneIndexTermsEnum *)getAutoPrefixTermsEnumWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                    withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *)prefix;

+ (void)writeBytesRefWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, termsOut_, OrgApacheLuceneStoreIndexOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, indexOut_, OrgApacheLuceneStoreIndexOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, fields_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, prefixTermsEnum_, OrgApacheLuceneIndexTermsEnum *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, prefixDocsEnum_, OrgApacheLuceneIndexPostingsEnum *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, scratchBytes_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, scratchIntsRef_, OrgApacheLuceneUtilIntsRefBuilder *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *self, OrgApacheLuceneStoreIndexOutput *outArg, jlong dirStart);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *self, OrgApacheLuceneStoreIndexOutput *indexOut, jlong dirStart);

__attribute__((unused)) static OrgApacheLuceneIndexTermsEnum *OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_getAutoPrefixTermsEnumWithOrgApacheLuceneIndexTerms_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *self, OrgApacheLuceneIndexTerms *terms, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefix);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneStoreIndexOutput *outArg, OrgApacheLuceneUtilBytesRef *bytes);

@interface OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData : NSObject {
 @public
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  OrgApacheLuceneUtilBytesRef *rootCode_;
  jlong numTerms_;
  jlong indexStartFP_;
  jlong sumTotalTermFreq_;
  jlong sumDocFreq_;
  jint docCount_;
  jint longsSize_;
  OrgApacheLuceneUtilBytesRef *minTerm_;
  OrgApacheLuceneUtilBytesRef *maxTerm_;
}

- (instancetype)initWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)rootCode
                                             withLong:(jlong)numTerms
                                             withLong:(jlong)indexStartFP
                                             withLong:(jlong)sumTotalTermFreq
                                             withLong:(jlong)sumDocFreq
                                              withInt:(jint)docCount
                                              withInt:(jint)longsSize
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData, rootCode_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData, minTerm_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData, maxTerm_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData *self, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilBytesRef *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilBytesRef *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilBytesRef *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData)

@interface OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry : NSObject {
 @public
  jboolean isTerm_;
}

- (instancetype)initWithBoolean:(jboolean)isTerm;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry_initWithBoolean_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *self, jboolean isTerm);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry)

@interface OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm : OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry {
 @public
  IOSByteArray *termBytes_;
  OrgApacheLuceneCodecsBlockTermState *state_;
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefixTerm_;
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *other_;
}

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
            withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)state
withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *)prefixTerm;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm, termBytes_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm, state_, OrgApacheLuceneCodecsBlockTermState *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm, prefixTerm_, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm, other_, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *self, OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefixTerm);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefixTerm) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefixTerm);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm)

@interface OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock : OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry {
 @public
  OrgApacheLuceneUtilBytesRef *prefix_;
  jlong fp_;
  OrgApacheLuceneUtilFstFST *index_;
  id<JavaUtilList> subIndices_;
  jboolean hasTerms_;
  jboolean isFloor_;
  jint floorLeadByte_;
}

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix
                                           withLong:(jlong)fp
                                        withBoolean:(jboolean)hasTerms
                                        withBoolean:(jboolean)isFloor
                                            withInt:(jint)floorLeadByte
                                   withJavaUtilList:(id<JavaUtilList>)subIndices;

- (NSString *)description;

- (void)compileIndexWithJavaUtilList:(id<JavaUtilList>)blocks
withOrgApacheLuceneStoreRAMOutputStream:(OrgApacheLuceneStoreRAMOutputStream *)scratchBytes
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef;

- (void)appendWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
                  withOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)subIndex
          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock, prefix_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock, index_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock, subIndices_, id<JavaUtilList>)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilFstBuilder *builder, OrgApacheLuceneUtilFstFST *subIndex, OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock)

@interface OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter () {
 @public
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *this$0_;
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  jint longsSize_;
  jlong numTerms_;
  OrgApacheLuceneUtilBytesRefBuilder *lastTerm_;
  IOSIntArray *prefixStarts_;
  IOSLongArray *longs_;
  id<JavaUtilList> pending_;
  id<JavaUtilList> newBlocks_;
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *firstPendingTerm_;
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *lastPendingTerm_;
  OrgApacheLuceneStoreRAMOutputStream *suffixWriter_;
  OrgApacheLuceneStoreRAMOutputStream *statsWriter_;
  OrgApacheLuceneStoreRAMOutputStream *metaWriter_;
  OrgApacheLuceneStoreRAMOutputStream *bytesWriter_;
}

/*!
 @brief Writes the specified slice (start is inclusive, end is exclusive)
   from pending stack as a new block.If isFloor is true, there
   were too many (more than maxItemsInBlock) entries sharing the
   same prefix, and so we broke it into multiple floor blocks where
   we record the starting label of the suffix of each floor block.
 */
- (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *)writeBlockWithInt:(jint)prefixLength
                                                                           withBoolean:(jboolean)isFloor
                                                                               withInt:(jint)floorLeadLabel
                                                                               withInt:(jint)start
                                                                               withInt:(jint)end
                                                                           withBoolean:(jboolean)hasTerms
                                                                           withBoolean:(jboolean)hasPrefixTerms
                                                                           withBoolean:(jboolean)hasSubBlocks;

/*!
 @brief Pushes the new term to the top of the stack, and writes new blocks.
 */
- (void)pushTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, lastTerm_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, prefixStarts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, longs_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, pending_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, newBlocks_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, firstPendingTerm_, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, lastPendingTerm_, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, suffixWriter_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, statsWriter_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, metaWriter_, OrgApacheLuceneStoreRAMOutputStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, bytesWriter_, OrgApacheLuceneStoreRAMOutputStream *)

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter *self, jint prefixLength, jboolean isFloor, jint floorLeadLabel, jint start, jint end, jboolean hasTerms, jboolean hasPrefixTerms, jboolean hasSubBlocks);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter *self, OrgApacheLuceneUtilBytesRef *text);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter)

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_EMPTY_BYTES_REF;

@implementation OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter

+ (jint)DEFAULT_MIN_BLOCK_SIZE {
  return OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_DEFAULT_MIN_BLOCK_SIZE;
}

+ (jint)DEFAULT_MAX_BLOCK_SIZE {
  return OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_DEFAULT_MAX_BLOCK_SIZE;
}

+ (OrgApacheLuceneUtilBytesRef *)EMPTY_BYTES_REF {
  return OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_EMPTY_BYTES_REF;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state
                  withOrgApacheLuceneCodecsPostingsWriterBase:(OrgApacheLuceneCodecsPostingsWriterBase *)postingsWriter
                                                      withInt:(jint)minItemsInBlock
                                                      withInt:(jint)maxItemsInBlock {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(self, state, postingsWriter, minItemsInBlock, maxItemsInBlock);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state
                  withOrgApacheLuceneCodecsPostingsWriterBase:(OrgApacheLuceneCodecsPostingsWriterBase *)postingsWriter
                                                      withInt:(jint)minItemsInBlock
                                                      withInt:(jint)maxItemsInBlock
                                                      withInt:(jint)minItemsInAutoPrefix
                                                      withInt:(jint)maxItemsInAutoPrefix {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_withInt_withInt_(self, state, postingsWriter, minItemsInBlock, maxItemsInBlock, minItemsInAutoPrefix, maxItemsInAutoPrefix);
  return self;
}

- (void)writeTrailerWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                                               withLong:(jlong)dirStart {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(self, outArg, dirStart);
}

- (void)writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)indexOut
                                                    withLong:(jlong)dirStart {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(self, indexOut, dirStart);
}

+ (void)validateSettingsWithInt:(jint)minItemsInBlock
                        withInt:(jint)maxItemsInBlock {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_validateSettingsWithInt_withInt_(minItemsInBlock, maxItemsInBlock);
}

+ (void)validateAutoPrefixSettingsWithInt:(jint)minItemsInAutoPrefix
                                  withInt:(jint)maxItemsInAutoPrefix {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_validateAutoPrefixSettingsWithInt_withInt_(minItemsInAutoPrefix, maxItemsInAutoPrefix);
}

- (void)writeWithOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)fields {
  NSString *lastField = nil;
  for (NSString * __strong field in nil_chk(fields)) {
    JreAssert(lastField == nil || [lastField compareToWithId:field] < 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:408 condition failed: assert lastField == null || lastField.compareTo(field) < 0;");
    lastField = field;
    OrgApacheLuceneIndexTerms *terms = JreRetainedLocalValue([fields termsWithNSString:field]);
    if (terms == nil) {
      continue;
    }
    OrgApacheLuceneIndexFieldInfo *fieldInfo = JreRetainedLocalValue([((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos_)) fieldInfoWithNSString:field]);
    id<JavaUtilList> prefixTerms;
    if (minItemsInAutoPrefix_ != 0) {
      if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS)) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$C", @"ranges can only be indexed with IndexOptions.DOCS (field: ", fieldInfo->name_, ')'));
      }
      prefixTerms = create_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_initPackagePrivateWithOrgApacheLuceneIndexTerms_withInt_withInt_(terms, minItemsInAutoPrefix_, maxItemsInAutoPrefix_)->prefixes_;
    }
    else {
      prefixTerms = nil;
    }
    OrgApacheLuceneIndexTermsEnum *termsEnum = JreRetainedLocalValue([terms iterator]);
    OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter *termsWriter = create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(self, [fieldInfos_ fieldInfoWithNSString:field]);
    jint prefixTermUpto = 0;
    while (true) {
      OrgApacheLuceneUtilBytesRef *term = JreRetainedLocalValue([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next]);
      if (prefixTerms != nil) {
        while (prefixTermUpto < [prefixTerms size] && (term == nil || [((OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *) nil_chk([prefixTerms getWithInt:prefixTermUpto])) compareToWithOrgApacheLuceneUtilBytesRef:term] <= 0)) {
          OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefixTerm = JreRetainedLocalValue([prefixTerms getWithInt:prefixTermUpto]);
          [termsWriter writeWithOrgApacheLuceneUtilBytesRef:((OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *) nil_chk(prefixTerm))->term_ withOrgApacheLuceneIndexTermsEnum:OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_getAutoPrefixTermsEnumWithOrgApacheLuceneIndexTerms_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(self, terms, prefixTerm) withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:prefixTerm];
          prefixTermUpto++;
        }
      }
      if (term == nil) {
        break;
      }
      [termsWriter writeWithOrgApacheLuceneUtilBytesRef:term withOrgApacheLuceneIndexTermsEnum:termsEnum withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:nil];
    }
    JreAssert(prefixTerms == nil || prefixTermUpto == [prefixTerms size], @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:459 condition failed: assert prefixTerms == null || prefixTermUpto == prefixTerms.size();");
    [termsWriter finish];
  }
}

- (OrgApacheLuceneIndexTermsEnum *)getAutoPrefixTermsEnumWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                    withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *)prefix {
  return OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_getAutoPrefixTermsEnumWithOrgApacheLuceneIndexTerms_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(self, terms, prefix);
}

+ (jlong)encodeOutputWithLong:(jlong)fp
                  withBoolean:(jboolean)hasTerms
                  withBoolean:(jboolean)isFloor {
  return OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_encodeOutputWithLong_withBoolean_withBoolean_(fp, hasTerms, isFloor);
}

+ (NSString *)brToStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b {
  return OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(b);
}

+ (NSString *)brToStringWithByteArray:(IOSByteArray *)b {
  return OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_brToStringWithByteArray_(b);
}

- (void)close {
  if (closed_) {
    return;
  }
  closed_ = true;
  jboolean success = false;
  @try {
    jlong dirStart = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(termsOut_)) getFilePointer];
    jlong indexDirStart = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(indexOut_)) getFilePointer];
    [termsOut_ writeVIntWithInt:[((id<JavaUtilList>) nil_chk(fields_)) size]];
    for (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData * __strong field in fields_) {
      [termsOut_ writeVIntWithInt:((OrgApacheLuceneIndexFieldInfo *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData *) nil_chk(field))->fieldInfo_))->number_];
      JreAssert(field->numTerms_ > 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1184 condition failed: assert field.numTerms > 0;");
      [termsOut_ writeVLongWithLong:field->numTerms_];
      [termsOut_ writeVIntWithInt:((OrgApacheLuceneUtilBytesRef *) nil_chk(field->rootCode_))->length_];
      [termsOut_ writeBytesWithByteArray:field->rootCode_->bytes_ withInt:field->rootCode_->offset_ withInt:field->rootCode_->length_];
      JreAssert([field->fieldInfo_ getIndexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE), @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1188 condition failed: assert field.fieldInfo.getIndexOptions() != IndexOptions.NONE;");
      if ([field->fieldInfo_ getIndexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS)) {
        [termsOut_ writeVLongWithLong:field->sumTotalTermFreq_];
      }
      [termsOut_ writeVLongWithLong:field->sumDocFreq_];
      [termsOut_ writeVIntWithInt:field->docCount_];
      [termsOut_ writeVIntWithInt:field->longsSize_];
      [indexOut_ writeVLongWithLong:field->indexStartFP_];
      OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(termsOut_, field->minTerm_);
      OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(termsOut_, field->maxTerm_);
    }
    OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(self, termsOut_, dirStart);
    OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(termsOut_);
    OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(self, indexOut_, indexDirStart);
    OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(indexOut_);
    success = true;
  }
  @finally {
    if (success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ termsOut_, indexOut_, postingsWriter_ } count:3 type:JavaIoCloseable_class_()]);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ termsOut_, indexOut_, postingsWriter_ } count:3 type:JavaIoCloseable_class_()]);
    }
  }
}

+ (void)writeBytesRefWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg
                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(outArg, bytes);
}

- (void)dealloc {
  RELEASE_(termsOut_);
  RELEASE_(indexOut_);
  RELEASE_(postingsWriter_);
  RELEASE_(fieldInfos_);
  RELEASE_(fields_);
  RELEASE_(prefixDocs_);
  RELEASE_(prefixFixedBitsTermsEnum_);
  RELEASE_(prefixTermsEnum_);
  RELEASE_(prefixDocsEnum_);
  RELEASE_(scratchBytes_);
  RELEASE_(scratchIntsRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x2, 11, 12, 1, -1, -1, -1 },
    { NULL, "J", 0x8, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 15, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0xa, 18, 19, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentWriteState:withOrgApacheLuceneCodecsPostingsWriterBase:withInt:withInt:);
  methods[1].selector = @selector(initWithOrgApacheLuceneIndexSegmentWriteState:withOrgApacheLuceneCodecsPostingsWriterBase:withInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(writeTrailerWithOrgApacheLuceneStoreIndexOutput:withLong:);
  methods[3].selector = @selector(writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput:withLong:);
  methods[4].selector = @selector(validateSettingsWithInt:withInt:);
  methods[5].selector = @selector(validateAutoPrefixSettingsWithInt:withInt:);
  methods[6].selector = @selector(writeWithOrgApacheLuceneIndexFields:);
  methods[7].selector = @selector(getAutoPrefixTermsEnumWithOrgApacheLuceneIndexTerms:withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:);
  methods[8].selector = @selector(encodeOutputWithLong:withBoolean:withBoolean:);
  methods[9].selector = @selector(brToStringWithOrgApacheLuceneUtilBytesRef:);
  methods[10].selector = @selector(brToStringWithByteArray:);
  methods[11].selector = @selector(close);
  methods[12].selector = @selector(writeBytesRefWithOrgApacheLuceneStoreIndexOutput:withOrgApacheLuceneUtilBytesRef:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MIN_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_DEFAULT_MIN_BLOCK_SIZE, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MAX_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_DEFAULT_MAX_BLOCK_SIZE, 0x19, -1, -1, -1, -1 },
    { "termsOut_", "LOrgApacheLuceneStoreIndexOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "indexOut_", "LOrgApacheLuceneStoreIndexOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxDoc_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "minItemsInBlock_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxItemsInBlock_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "minItemsInAutoPrefix_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "maxItemsInAutoPrefix_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "postingsWriter_", "LOrgApacheLuceneCodecsPostingsWriterBase;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldInfos_", "LOrgApacheLuceneIndexFieldInfos;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fields_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
    { "prefixDocs_", "LOrgApacheLuceneUtilFixedBitSet;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefixFixedBitsTermsEnum_", "LOrgApacheLuceneCodecsBlocktreeBitSetTermsEnum;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefixTermsEnum_", "LOrgApacheLuceneIndexTermsEnum;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prefixDocsEnum_", "LOrgApacheLuceneIndexPostingsEnum;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scratchBytes_", "LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "scratchIntsRef_", "LOrgApacheLuceneUtilIntsRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "EMPTY_BYTES_REF", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x18, -1, 21, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentWriteState;LOrgApacheLuceneCodecsPostingsWriterBase;II", "LJavaIoIOException;", "LOrgApacheLuceneIndexSegmentWriteState;LOrgApacheLuceneCodecsPostingsWriterBase;IIII", "writeTrailer", "LOrgApacheLuceneStoreIndexOutput;J", "writeIndexTrailer", "validateSettings", "II", "validateAutoPrefixSettings", "write", "LOrgApacheLuceneIndexFields;", "getAutoPrefixTermsEnum", "LOrgApacheLuceneIndexTerms;LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;", "encodeOutput", "JZZ", "brToString", "LOrgApacheLuceneUtilBytesRef;", "[B", "writeBytesRef", "LOrgApacheLuceneStoreIndexOutput;LOrgApacheLuceneUtilBytesRef;", "Ljava/util/List<Lorg/apache/lucene/codecs/blocktree/BlockTreeTermsWriter$FieldMetaData;>;", &OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_EMPTY_BYTES_REF, "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData;LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry;LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm;LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock;LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter = { "BlockTreeTermsWriter", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x11, 13, 20, -1, 22, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_EMPTY_BYTES_REF, new_OrgApacheLuceneUtilBytesRef_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter)
  }
}

@end

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *self, OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock) {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_withInt_withInt_(self, state, postingsWriter, minItemsInBlock, maxItemsInBlock, 0, 0);
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_, state, postingsWriter, minItemsInBlock, maxItemsInBlock)
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_(OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_, state, postingsWriter, minItemsInBlock, maxItemsInBlock)
}

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_withInt_withInt_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *self, OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock, jint minItemsInAutoPrefix, jint maxItemsInAutoPrefix) {
  OrgApacheLuceneCodecsFieldsConsumer_init(self);
  JreStrongAssignAndConsume(&self->fields_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->scratchBytes_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->scratchIntsRef_, new_OrgApacheLuceneUtilIntsRefBuilder_init());
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_validateSettingsWithInt_withInt_(minItemsInBlock, maxItemsInBlock);
  self->minItemsInBlock_ = minItemsInBlock;
  self->maxItemsInBlock_ = maxItemsInBlock;
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_validateAutoPrefixSettingsWithInt_withInt_(minItemsInAutoPrefix, maxItemsInAutoPrefix);
  if (minItemsInAutoPrefix != 0) {
    JreStrongAssignAndConsume(&self->prefixDocs_, new_OrgApacheLuceneUtilFixedBitSet_initWithInt_([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_)) maxDoc]));
    JreStrongAssignAndConsume(&self->prefixFixedBitsTermsEnum_, new_OrgApacheLuceneCodecsBlocktreeBitSetTermsEnum_initPackagePrivateWithOrgApacheLuceneUtilBitSet_(self->prefixDocs_));
  }
  else {
    JreStrongAssign(&self->prefixDocs_, nil);
    JreStrongAssign(&self->prefixFixedBitsTermsEnum_, nil);
  }
  self->minItemsInAutoPrefix_ = minItemsInAutoPrefix;
  self->maxItemsInAutoPrefix_ = maxItemsInAutoPrefix;
  self->maxDoc_ = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_)) maxDoc];
  JreStrongAssign(&self->fieldInfos_, state->fieldInfos_);
  JreStrongAssign(&self->postingsWriter_, postingsWriter);
  NSString *termsName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_TERMS_EXTENSION);
  JreStrongAssign(&self->termsOut_, [((OrgApacheLuceneStoreDirectory *) nil_chk(state->directory_)) createOutputWithNSString:termsName withOrgApacheLuceneStoreIOContext:state->context_]);
  jboolean success = false;
  OrgApacheLuceneStoreIndexOutput *indexOut = nil;
  @try {
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(self->termsOut_, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_TERMS_CODEC_NAME, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    if (minItemsInAutoPrefix == 0) {
      [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->termsOut_)) writeByteWithByte:(jbyte) 0];
    }
    else {
      [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->termsOut_)) writeByteWithByte:(jbyte) 1];
    }
    NSString *indexName = OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(state->segmentInfo_->name_, state->segmentSuffix_, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_TERMS_INDEX_EXTENSION);
    indexOut = [state->directory_ createOutputWithNSString:indexName withOrgApacheLuceneStoreIOContext:state->context_];
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(indexOut, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_TERMS_INDEX_CODEC_NAME, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_VERSION_CURRENT, [state->segmentInfo_ getId], state->segmentSuffix_);
    [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(postingsWriter)) init__WithOrgApacheLuceneStoreIndexOutput:self->termsOut_ withOrgApacheLuceneIndexSegmentWriteState:state];
    JreStrongAssign(&self->indexOut_, indexOut);
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->termsOut_, indexOut } count:2 type:JavaIoCloseable_class_()]);
    }
  }
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_withInt_withInt_(OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock, jint minItemsInAutoPrefix, jint maxItemsInAutoPrefix) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_withInt_withInt_, state, postingsWriter, minItemsInBlock, maxItemsInBlock, minItemsInAutoPrefix, maxItemsInAutoPrefix)
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_withInt_withInt_(OrgApacheLuceneIndexSegmentWriteState *state, OrgApacheLuceneCodecsPostingsWriterBase *postingsWriter, jint minItemsInBlock, jint maxItemsInBlock, jint minItemsInAutoPrefix, jint maxItemsInAutoPrefix) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, initWithOrgApacheLuceneIndexSegmentWriteState_withOrgApacheLuceneCodecsPostingsWriterBase_withInt_withInt_withInt_withInt_, state, postingsWriter, minItemsInBlock, maxItemsInBlock, minItemsInAutoPrefix, maxItemsInAutoPrefix)
}

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *self, OrgApacheLuceneStoreIndexOutput *outArg, jlong dirStart) {
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeLongWithLong:dirStart];
}

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeIndexTrailerWithOrgApacheLuceneStoreIndexOutput_withLong_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *self, OrgApacheLuceneStoreIndexOutput *indexOut, jlong dirStart) {
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(indexOut)) writeLongWithLong:dirStart];
}

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_validateSettingsWithInt_withInt_(jint minItemsInBlock, jint maxItemsInBlock) {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initialize();
  if (minItemsInBlock <= 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"minItemsInBlock must be >= 2; got ", minItemsInBlock));
  }
  if (minItemsInBlock > maxItemsInBlock) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=", maxItemsInBlock, @" minItemsInBlock=", minItemsInBlock));
  }
  if (2 * (minItemsInBlock - 1) > maxItemsInBlock) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=", maxItemsInBlock, @" minItemsInBlock=", minItemsInBlock));
  }
}

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_validateAutoPrefixSettingsWithInt_withInt_(jint minItemsInAutoPrefix, jint maxItemsInAutoPrefix) {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initialize();
  if (minItemsInAutoPrefix != 0) {
    if (minItemsInAutoPrefix < 2) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"minItemsInAutoPrefix must be at least 2; got minItemsInAutoPrefix=", minItemsInAutoPrefix));
    }
    if (minItemsInAutoPrefix > maxItemsInAutoPrefix) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"maxItemsInAutoPrefix must be >= minItemsInAutoPrefix; got maxItemsInAutoPrefix=", maxItemsInAutoPrefix, @" minItemsInAutoPrefix=", minItemsInAutoPrefix));
    }
    if (2 * (minItemsInAutoPrefix - 1) > maxItemsInAutoPrefix) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"maxItemsInAutoPrefix must be at least 2*(minItemsInAutoPrefix-1); got maxItemsInAutoPrefix=", maxItemsInAutoPrefix, @" minItemsInAutoPrefix=", minItemsInAutoPrefix));
    }
  }
  else if (maxItemsInAutoPrefix != 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxItemsInAutoPrefix must be 0 (disabled) when minItemsInAutoPrefix is 0");
  }
}

OrgApacheLuceneIndexTermsEnum *OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_getAutoPrefixTermsEnumWithOrgApacheLuceneIndexTerms_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *self, OrgApacheLuceneIndexTerms *terms, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefix) {
  JreAssert(self->prefixDocs_ != nil, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:468 condition failed: assert prefixDocs != null;");
  [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(self->prefixDocs_)) clearWithInt:0 withInt:[self->prefixDocs_ length]];
  JreStrongAssign(&self->prefixTermsEnum_, [((OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *) nil_chk(prefix)) getTermsEnumWithOrgApacheLuceneIndexTermsEnum:[((OrgApacheLuceneIndexTerms *) nil_chk(terms)) iterator]]);
  while ([((OrgApacheLuceneIndexTermsEnum *) nil_chk(self->prefixTermsEnum_)) next] != nil) {
    JreStrongAssign(&self->prefixDocsEnum_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(self->prefixTermsEnum_)) postingsWithOrgApacheLuceneIndexPostingsEnum:self->prefixDocsEnum_ withInt:0]);
    [self->prefixDocs_ or__WithOrgApacheLuceneSearchDocIdSetIterator:self->prefixDocsEnum_];
  }
  return self->prefixFixedBitsTermsEnum_;
}

jlong OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_encodeOutputWithLong_withBoolean_withBoolean_(jlong fp, jboolean hasTerms, jboolean isFloor) {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initialize();
  JreAssert(fp < (JreLShift64(1LL, 62)), @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:487 condition failed: assert fp < (1L << 62);");
  return (JreLShift64(fp, 2)) | (hasTerms ? OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_HAS_TERMS : 0) | (isFloor ? OrgApacheLuceneCodecsBlocktreeBlockTreeTermsReader_OUTPUT_FLAG_IS_FLOOR : 0);
}

NSString *OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *b) {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initialize();
  if (b == nil) {
    return @"(null)";
  }
  else {
    @try {
      return JreStrcat("$C@", [b utf8ToString], ' ', b);
    }
    @catch (JavaLangThrowable *t) {
      return [b description];
    }
  }
}

NSString *OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_brToStringWithByteArray_(IOSByteArray *b) {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initialize();
  return OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(create_OrgApacheLuceneUtilBytesRef_initWithByteArray_(b));
}

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_writeBytesRefWithOrgApacheLuceneStoreIndexOutput_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneStoreIndexOutput *outArg, OrgApacheLuceneUtilBytesRef *bytes) {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_initialize();
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(outArg)) writeVIntWithInt:((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes))->length_];
  [outArg writeBytesWithByteArray:bytes->bytes_ withInt:bytes->offset_ withInt:bytes->length_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter)

@implementation OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData

- (instancetype)initWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)rootCode
                                             withLong:(jlong)numTerms
                                             withLong:(jlong)indexStartFP
                                             withLong:(jlong)sumTotalTermFreq
                                             withLong:(jlong)sumDocFreq
                                              withInt:(jint)docCount
                                              withInt:(jint)longsSize
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(self, fieldInfo, rootCode, numTerms, indexStartFP, sumTotalTermFreq, sumDocFreq, docCount, longsSize, minTerm, maxTerm);
  return self;
}

- (void)dealloc {
  RELEASE_(fieldInfo_);
  RELEASE_(rootCode_);
  RELEASE_(minTerm_);
  RELEASE_(maxTerm_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneUtilBytesRef:withLong:withLong:withLong:withLong:withInt:withInt:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fieldInfo_", "LOrgApacheLuceneIndexFieldInfo;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "rootCode_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "numTerms_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "indexStartFP_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "sumTotalTermFreq_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "sumDocFreq_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "docCount_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "longsSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "minTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "maxTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexFieldInfo;LOrgApacheLuceneUtilBytesRef;JJJJIILOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData = { "FieldMetaData", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0xa, 1, 10, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData;
}

@end

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData *self, OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilBytesRef *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  NSObject_init(self);
  JreAssert(numTerms > 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:246 condition failed: assert numTerms > 0;");
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreAssert(rootCode != nil, JreStrcat("$$$J", @"field=", ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo))->name_, @" numTerms=", numTerms));
  JreStrongAssign(&self->rootCode_, rootCode);
  self->indexStartFP_ = indexStartFP;
  self->numTerms_ = numTerms;
  self->sumTotalTermFreq_ = sumTotalTermFreq;
  self->sumDocFreq_ = sumDocFreq;
  self->docCount_ = docCount;
  self->longsSize_ = longsSize;
  JreStrongAssign(&self->minTerm_, minTerm);
  JreStrongAssign(&self->maxTerm_, maxTerm);
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilBytesRef *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData, initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_, fieldInfo, rootCode, numTerms, indexStartFP, sumTotalTermFreq, sumDocFreq, docCount, longsSize, minTerm, maxTerm)
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexFieldInfo *fieldInfo, OrgApacheLuceneUtilBytesRef *rootCode, jlong numTerms, jlong indexStartFP, jlong sumTotalTermFreq, jlong sumDocFreq, jint docCount, jint longsSize, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData, initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_, fieldInfo, rootCode, numTerms, indexStartFP, sumTotalTermFreq, sumDocFreq, docCount, longsSize, minTerm, maxTerm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData)

@implementation OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry

- (instancetype)initWithBoolean:(jboolean)isTerm {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, isTerm);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isTerm_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry = { "PendingEntry", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0xa, 1, 1, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry;
}

@end

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry_initWithBoolean_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *self, jboolean isTerm) {
  NSObject_init(self);
  self->isTerm_ = isTerm;
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry, initWithBoolean_, isTerm)
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry_initWithBoolean_(jboolean isTerm) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry, initWithBoolean_, isTerm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry)

@implementation OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
            withOrgApacheLuceneCodecsBlockTermState:(OrgApacheLuceneCodecsBlockTermState *)state
withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *)prefixTerm {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(self, term, state, prefixTerm);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$", @"TERM: ", OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_brToStringWithByteArray_(termBytes_));
}

- (void)dealloc {
  RELEASE_(termBytes_);
  RELEASE_(state_);
  RELEASE_(prefixTerm_);
  RELEASE_(other_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneCodecsBlockTermState:withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termBytes_", "[B", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "state_", "LOrgApacheLuceneCodecsBlockTermState;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "prefixTerm_", "LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "other_", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneCodecsBlockTermState;LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;", "toString", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm = { "PendingTerm", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x1a, 2, 4, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm;
}

@end

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *self, OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefixTerm) {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, true);
  JreStrongAssignAndConsume(&self->termBytes_, [IOSByteArray newArrayWithLength:((OrgApacheLuceneUtilBytesRef *) nil_chk(term))->length_]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(term->bytes_, term->offset_, self->termBytes_, 0, term->length_);
  JreStrongAssign(&self->state_, state);
  JreStrongAssign(&self->prefixTerm_, prefixTerm);
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefixTerm) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm, initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_, term, state, prefixTerm)
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(OrgApacheLuceneUtilBytesRef *term, OrgApacheLuceneCodecsBlockTermState *state, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefixTerm) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm, initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_, term, state, prefixTerm)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm)

@implementation OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix
                                           withLong:(jlong)fp
                                        withBoolean:(jboolean)hasTerms
                                        withBoolean:(jboolean)isFloor
                                            withInt:(jint)floorLeadByte
                                   withJavaUtilList:(id<JavaUtilList>)subIndices {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(self, prefix, fp, hasTerms, isFloor, floorLeadByte, subIndices);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$", @"BLOCK: prefix=", OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(prefix_));
}

- (void)compileIndexWithJavaUtilList:(id<JavaUtilList>)blocks
withOrgApacheLuceneStoreRAMOutputStream:(OrgApacheLuceneStoreRAMOutputStream *)scratchBytes
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef {
  JreAssert((isFloor_ && [((id<JavaUtilList>) nil_chk(blocks)) size] > 1) || (isFloor_ == false && [((id<JavaUtilList>) nil_chk(blocks)) size] == 1), JreStrcat("$Z$@", @"isFloor=", isFloor_, @" blocks=", blocks));
  JreAssert(JreObjectEqualsEquals(self, [((id<JavaUtilList>) nil_chk(blocks)) getWithInt:0]), @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:571 condition failed: assert this == blocks.get(0);");
  JreAssert([((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(scratchBytes)) getFilePointer] == 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:573 condition failed: assert scratchBytes.getFilePointer() == 0;");
  [scratchBytes writeVLongWithLong:OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_encodeOutputWithLong_withBoolean_withBoolean_(fp_, hasTerms_, isFloor_)];
  if (isFloor_) {
    [scratchBytes writeVIntWithInt:[blocks size] - 1];
    for (jint i = 1; i < [blocks size]; i++) {
      OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *sub = JreRetainedLocalValue([blocks getWithInt:i]);
      JreAssert(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *) nil_chk(sub))->floorLeadByte_ != -1, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:583 condition failed: assert sub.floorLeadByte != -1;");
      [scratchBytes writeByteWithByte:(jbyte) sub->floorLeadByte_];
      JreAssert(sub->fp_ > fp_, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:588 condition failed: assert sub.fp > fp;");
      [scratchBytes writeVLongWithLong:(JreLShift64((sub->fp_ - fp_), 1)) | (sub->hasTerms_ ? 1 : 0)];
    }
  }
  OrgApacheLuceneUtilFstByteSequenceOutputs *outputs = OrgApacheLuceneUtilFstByteSequenceOutputs_getSingleton();
  OrgApacheLuceneUtilFstBuilder *indexBuilder = create_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withInt_withInt_withBoolean_withBoolean_withInt_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withBoolean_withInt_(JreLoadEnum(OrgApacheLuceneUtilFstFST_INPUT_TYPE, BYTE1), 0, 0, true, false, JavaLangInteger_MAX_VALUE, outputs, false, OrgApacheLuceneUtilPackedPackedInts_COMPACT, true, 15);
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:(jint) [scratchBytes getFilePointer]];
  JreAssert(bytes->size_ > 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:603 condition failed: assert bytes.length > 0;");
  [scratchBytes writeToWithByteArray:bytes withInt:0];
  [indexBuilder addWithOrgApacheLuceneUtilIntsRef:OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(prefix_, scratchIntsRef) withId:create_OrgApacheLuceneUtilBytesRef_initWithByteArray_withInt_withInt_(bytes, 0, bytes->size_)];
  [scratchBytes reset];
  for (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock * __strong block in blocks) {
    if (((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *) nil_chk(block))->subIndices_ != nil) {
      for (OrgApacheLuceneUtilFstFST * __strong subIndex in block->subIndices_) {
        OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRefBuilder_(self, indexBuilder, subIndex, scratchIntsRef);
      }
      JreStrongAssign(&block->subIndices_, nil);
    }
  }
  JreStrongAssign(&index_, [indexBuilder finish]);
  JreAssert(subIndices_ == nil, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:620 condition failed: assert subIndices == null;");
}

- (void)appendWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)builder
                  withOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)subIndex
          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratchIntsRef {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRefBuilder_(self, builder, subIndex, scratchIntsRef);
}

- (void)dealloc {
  RELEASE_(prefix_);
  RELEASE_(index_);
  RELEASE_(subIndices_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, 6, -1, -1 },
    { NULL, "V", 0x2, 7, 8, 5, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilBytesRef:withLong:withBoolean:withBoolean:withInt:withJavaUtilList:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(compileIndexWithJavaUtilList:withOrgApacheLuceneStoreRAMOutputStream:withOrgApacheLuceneUtilIntsRefBuilder:);
  methods[3].selector = @selector(appendWithOrgApacheLuceneUtilFstBuilder:withOrgApacheLuceneUtilFstFST:withOrgApacheLuceneUtilIntsRefBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "prefix_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "fp_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "index_", "LOrgApacheLuceneUtilFstFST;", .constantValue.asLong = 0, 0x1, -1, -1, 10, -1 },
    { "subIndices_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 11, -1 },
    { "hasTerms_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "isFloor_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "floorLeadByte_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilBytesRef;JZZILJavaUtilList;", "(Lorg/apache/lucene/util/BytesRef;JZZILjava/util/List<Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/BytesRef;>;>;)V", "toString", "compileIndex", "LJavaUtilList;LOrgApacheLuceneStoreRAMOutputStream;LOrgApacheLuceneUtilIntsRefBuilder;", "LJavaIoIOException;", "(Ljava/util/List<Lorg/apache/lucene/codecs/blocktree/BlockTreeTermsWriter$PendingBlock;>;Lorg/apache/lucene/store/RAMOutputStream;Lorg/apache/lucene/util/IntsRefBuilder;)V", "append", "LOrgApacheLuceneUtilFstBuilder;LOrgApacheLuceneUtilFstFST;LOrgApacheLuceneUtilIntsRefBuilder;", "(Lorg/apache/lucene/util/fst/Builder<Lorg/apache/lucene/util/BytesRef;>;Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/BytesRef;>;Lorg/apache/lucene/util/IntsRefBuilder;)V", "Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/BytesRef;>;", "Ljava/util/List<Lorg/apache/lucene/util/fst/FST<Lorg/apache/lucene/util/BytesRef;>;>;", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock = { "PendingBlock", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x1a, 4, 7, 12, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock;
}

@end

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry_initWithBoolean_(self, false);
  JreStrongAssign(&self->prefix_, prefix);
  self->fp_ = fp;
  self->hasTerms_ = hasTerms;
  self->isFloor_ = isFloor;
  self->floorLeadByte_ = floorLeadByte;
  JreStrongAssign(&self->subIndices_, subIndices);
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock, initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_, prefix, fp, hasTerms, isFloor, floorLeadByte, subIndices)
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(OrgApacheLuceneUtilBytesRef *prefix, jlong fp, jboolean hasTerms, jboolean isFloor, jint floorLeadByte, id<JavaUtilList> subIndices) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock, initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_, prefix, fp, hasTerms, isFloor, floorLeadByte, subIndices)
}

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_appendWithOrgApacheLuceneUtilFstBuilder_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *self, OrgApacheLuceneUtilFstBuilder *builder, OrgApacheLuceneUtilFstFST *subIndex, OrgApacheLuceneUtilIntsRefBuilder *scratchIntsRef) {
  OrgApacheLuceneUtilFstBytesRefFSTEnum *subIndexEnum = create_OrgApacheLuceneUtilFstBytesRefFSTEnum_initWithOrgApacheLuceneUtilFstFST_(subIndex);
  OrgApacheLuceneUtilFstBytesRefFSTEnum_InputOutput *indexEnt;
  while ((indexEnt = [subIndexEnum next]) != nil) {
    [((OrgApacheLuceneUtilFstBuilder *) nil_chk(builder)) addWithOrgApacheLuceneUtilIntsRef:OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(((OrgApacheLuceneUtilFstBytesRefFSTEnum_InputOutput *) nil_chk(indexEnt))->input_, scratchIntsRef) withId:indexEnt->output_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock)

@implementation OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter

- (void)writeBlocksWithInt:(jint)prefixLength
                   withInt:(jint)count {
  JreAssert(count > 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:684 condition failed: assert count > 0;");
  JreAssert(prefixLength > 0 || count == [((id<JavaUtilList>) nil_chk(pending_)) size], @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:693 condition failed: assert prefixLength > 0 || count == pending.size();");
  jint lastSuffixLeadLabel = -1;
  jboolean hasTerms = false;
  jboolean hasPrefixTerms = false;
  jboolean hasSubBlocks = false;
  jint start = [((id<JavaUtilList>) nil_chk(pending_)) size] - count;
  jint end = [pending_ size];
  jint nextBlockStart = start;
  jint nextFloorLeadLabel = -1;
  for (jint i = start; i < end; i++) {
    OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *ent = JreRetainedLocalValue([pending_ getWithInt:i]);
    jint suffixLeadLabel;
    if (((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *) nil_chk(ent))->isTerm_) {
      OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *term = (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *) cast_chk(ent, [OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm class]);
      if (((IOSByteArray *) nil_chk(term->termBytes_))->size_ == prefixLength) {
        JreAssert(lastSuffixLeadLabel == -1, JreStrcat("$I$I", @"i=", i, @" lastSuffixLeadLabel=", lastSuffixLeadLabel));
        suffixLeadLabel = -1;
      }
      else {
        suffixLeadLabel = IOSByteArray_Get(term->termBytes_, prefixLength) & (jint) 0xff;
      }
    }
    else {
      OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *block = (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *) cast_chk(ent, [OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock class]);
      JreAssert(((OrgApacheLuceneUtilBytesRef *) nil_chk(block->prefix_))->length_ > prefixLength, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:728 condition failed: assert block.prefix.length > prefixLength;");
      suffixLeadLabel = IOSByteArray_Get(nil_chk(block->prefix_->bytes_), block->prefix_->offset_ + prefixLength) & (jint) 0xff;
    }
    if (suffixLeadLabel != lastSuffixLeadLabel) {
      jint itemsInBlock = i - nextBlockStart;
      if (itemsInBlock >= this$0_->minItemsInBlock_ && end - nextBlockStart > this$0_->maxItemsInBlock_) {
        jboolean isFloor = itemsInBlock < count;
        [((id<JavaUtilList>) nil_chk(newBlocks_)) addWithId:OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_(self, prefixLength, isFloor, nextFloorLeadLabel, nextBlockStart, i, hasTerms, hasPrefixTerms, hasSubBlocks)];
        hasTerms = false;
        hasSubBlocks = false;
        hasPrefixTerms = false;
        nextFloorLeadLabel = suffixLeadLabel;
        nextBlockStart = i;
      }
      lastSuffixLeadLabel = suffixLeadLabel;
    }
    if (ent->isTerm_) {
      hasTerms = true;
      hasPrefixTerms |= (((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *) cast_chk(ent, [OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm class]))->prefixTerm_ != nil);
    }
    else {
      hasSubBlocks = true;
    }
  }
  if (nextBlockStart < end) {
    jint itemsInBlock = end - nextBlockStart;
    jboolean isFloor = itemsInBlock < count;
    [((id<JavaUtilList>) nil_chk(newBlocks_)) addWithId:OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_(self, prefixLength, isFloor, nextFloorLeadLabel, nextBlockStart, end, hasTerms, hasPrefixTerms, hasSubBlocks)];
  }
  JreAssert([((id<JavaUtilList>) nil_chk(newBlocks_)) isEmpty] == false, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:769 condition failed: assert newBlocks.isEmpty() == false;");
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *firstBlock = JreRetainedLocalValue([newBlocks_ getWithInt:0]);
  JreAssert(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *) nil_chk(firstBlock))->isFloor_ || [newBlocks_ size] == 1, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:773 condition failed: assert firstBlock.isFloor || newBlocks.size() == 1;");
  [firstBlock compileIndexWithJavaUtilList:newBlocks_ withOrgApacheLuceneStoreRAMOutputStream:this$0_->scratchBytes_ withOrgApacheLuceneUtilIntsRefBuilder:this$0_->scratchIntsRef_];
  [((id<JavaUtilList>) nil_chk([pending_ subListWithInt:[pending_ size] - count withInt:[pending_ size]])) clear];
  [pending_ addWithId:firstBlock];
  [newBlocks_ clear];
}

- (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *)writeBlockWithInt:(jint)prefixLength
                                                                           withBoolean:(jboolean)isFloor
                                                                               withInt:(jint)floorLeadLabel
                                                                               withInt:(jint)start
                                                                               withInt:(jint)end
                                                                           withBoolean:(jboolean)hasTerms
                                                                           withBoolean:(jboolean)hasPrefixTerms
                                                                           withBoolean:(jboolean)hasSubBlocks {
  return OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_(self, prefixLength, isFloor, floorLeadLabel, start, end, hasTerms, hasPrefixTerms, hasSubBlocks);
}

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter:(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *)outer$
                                         withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(self, outer$, fieldInfo);
  return self;
}

- (void)writeWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text
           withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum
withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *)prefixTerm {
  OrgApacheLuceneCodecsBlockTermState *state = JreRetainedLocalValue([((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(this$0_->postingsWriter_)) writeTermWithOrgApacheLuceneUtilBytesRef:text withOrgApacheLuceneIndexTermsEnum:termsEnum withOrgApacheLuceneUtilFixedBitSet:docsSeen_]);
  if (state != nil) {
    JreAssert(state->docFreq_ != 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1044 condition failed: assert state.docFreq != 0;");
    JreAssert([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions] == JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS) || state->totalTermFreq_ >= state->docFreq_, JreStrcat("$@", @"postingsWriter=", this$0_->postingsWriter_));
    OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, text);
    OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *term = create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneCodecsBlockTermState_withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_(text, state, prefixTerm);
    [((id<JavaUtilList>) nil_chk(pending_)) addWithId:term];
    if (prefixTerm == nil) {
      sumDocFreq_ += state->docFreq_;
      sumTotalTermFreq_ += state->totalTermFreq_;
      numTerms_++;
      if (firstPendingTerm_ == nil) {
        JreStrongAssign(&firstPendingTerm_, term);
      }
      JreStrongAssign(&lastPendingTerm_, term);
    }
  }
}

- (void)pushTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text {
  OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, text);
}

- (void)finish {
  if (numTerms_ > 0) {
    OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, create_OrgApacheLuceneUtilBytesRef_init());
    OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, create_OrgApacheLuceneUtilBytesRef_init());
    [self writeBlocksWithInt:0 withInt:[((id<JavaUtilList>) nil_chk(pending_)) size]];
    JreAssert([pending_ size] == 1 && !((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *) nil_chk([pending_ getWithInt:0]))->isTerm_, JreStrcat("$I$@", @"pending.size()=", [pending_ size], @" pending=", pending_));
    OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *root = (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *) cast_chk([pending_ getWithInt:0], [OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock class]);
    JreAssert(((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *) nil_chk(root))->prefix_))->length_ == 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1119 condition failed: assert root.prefix.length == 0;");
    JreAssert([((OrgApacheLuceneUtilFstFST *) nil_chk(root->index_)) getEmptyOutput] != nil, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1120 condition failed: assert root.index.getEmptyOutput() != null;");
    indexStartFP_ = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(this$0_->indexOut_)) getFilePointer];
    [((OrgApacheLuceneUtilFstFST *) nil_chk(root->index_)) saveWithOrgApacheLuceneStoreDataOutput:this$0_->indexOut_];
    JreAssert(firstPendingTerm_ != nil, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1136 condition failed: assert firstPendingTerm != null;");
    OrgApacheLuceneUtilBytesRef *minTerm = create_OrgApacheLuceneUtilBytesRef_initWithByteArray_(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *) nil_chk(firstPendingTerm_))->termBytes_);
    JreAssert(lastPendingTerm_ != nil, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1139 condition failed: assert lastPendingTerm != null;");
    OrgApacheLuceneUtilBytesRef *maxTerm = create_OrgApacheLuceneUtilBytesRef_initWithByteArray_(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *) nil_chk(lastPendingTerm_))->termBytes_);
    [((id<JavaUtilList>) nil_chk(this$0_->fields_)) addWithId:create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_FieldMetaData_initWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilBytesRef_withLong_withLong_withLong_withLong_withInt_withInt_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(fieldInfo_, [((OrgApacheLuceneUtilFstFST *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *) nil_chk(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *) cast_chk([pending_ getWithInt:0], [OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock class]))))->index_)) getEmptyOutput], numTerms_, indexStartFP_, sumTotalTermFreq_, sumDocFreq_, [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(docsSeen_)) cardinality], longsSize_, minTerm, maxTerm)];
  }
  else {
    JreAssert(sumTotalTermFreq_ == 0 || ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) getIndexOptions] == JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS) && sumTotalTermFreq_ == -1), @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1152 condition failed: assert sumTotalTermFreq == 0 || fieldInfo.getIndexOptions() == IndexOptions.DOCS && sumTotalTermFreq == -1;");
    JreAssert(sumDocFreq_ == 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1153 condition failed: assert sumDocFreq == 0;");
    JreAssert([((OrgApacheLuceneUtilFixedBitSet *) nil_chk(docsSeen_)) cardinality] == 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1154 condition failed: assert docsSeen.cardinality() == 0;");
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fieldInfo_);
  RELEASE_(docsSeen_);
  RELEASE_(lastTerm_);
  RELEASE_(prefixStarts_);
  RELEASE_(longs_);
  RELEASE_(pending_);
  RELEASE_(newBlocks_);
  RELEASE_(firstPendingTerm_);
  RELEASE_(lastPendingTerm_);
  RELEASE_(suffixWriter_);
  RELEASE_(statsWriter_);
  RELEASE_(metaWriter_);
  RELEASE_(bytesWriter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x0, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock;", 0x2, 3, 4, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(writeBlocksWithInt:withInt:);
  methods[1].selector = @selector(writeBlockWithInt:withBoolean:withInt:withInt:withInt:withBoolean:withBoolean:withBoolean:);
  methods[2].selector = @selector(initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter:withOrgApacheLuceneIndexFieldInfo:);
  methods[3].selector = @selector(writeWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermsEnum:withOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:);
  methods[4].selector = @selector(pushTermWithOrgApacheLuceneUtilBytesRef:);
  methods[5].selector = @selector(finish);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "fieldInfo_", "LOrgApacheLuceneIndexFieldInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "longsSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numTerms_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "docsSeen_", "LOrgApacheLuceneUtilFixedBitSet;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "sumTotalTermFreq_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sumDocFreq_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "indexStartFP_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastTerm_", "LOrgApacheLuceneUtilBytesRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prefixStarts_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "longs_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pending_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "newBlocks_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 11, -1 },
    { "firstPendingTerm_", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastPendingTerm_", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suffixWriter_", "LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "statsWriter_", "LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "metaWriter_", "LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bytesWriter_", "LOrgApacheLuceneStoreRAMOutputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "writeBlocks", "II", "LJavaIoIOException;", "writeBlock", "IZIIIZZZ", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter;LOrgApacheLuceneIndexFieldInfo;", "write", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneIndexTermsEnum;LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;", "pushTerm", "LOrgApacheLuceneUtilBytesRef;", "Ljava/util/List<Lorg/apache/lucene/codecs/blocktree/BlockTreeTermsWriter$PendingEntry;>;", "Ljava/util/List<Lorg/apache/lucene/codecs/blocktree/BlockTreeTermsWriter$PendingBlock;>;", "LOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter = { "TermsWriter", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x0, 6, 19, 12, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter;
}

@end

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_writeBlockWithInt_withBoolean_withInt_withInt_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter *self, jint prefixLength, jboolean isFloor, jint floorLeadLabel, jint start, jint end, jboolean hasTerms, jboolean hasPrefixTerms, jboolean hasSubBlocks) {
  JreAssert(end > start, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:794 condition failed: assert end > start;");
  jlong startFP = [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->this$0_->termsOut_)) getFilePointer];
  jboolean hasFloorLeadLabel = isFloor && floorLeadLabel != -1;
  OrgApacheLuceneUtilBytesRef *prefix = create_OrgApacheLuceneUtilBytesRef_initWithInt_(prefixLength + (hasFloorLeadLabel ? 1 : 0));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->lastTerm_)) get]))->bytes_, 0, prefix->bytes_, 0, prefixLength);
  prefix->length_ = prefixLength;
  jint numEntries = end - start;
  jint code = JreLShift32(numEntries, 1);
  if (end == [((id<JavaUtilList>) nil_chk(self->pending_)) size]) {
    code |= 1;
  }
  [self->this$0_->termsOut_ writeVIntWithInt:code];
  jboolean isLeafBlock = hasSubBlocks == false && hasPrefixTerms == false;
  id<JavaUtilList> subIndices;
  jboolean absolute = true;
  if (isLeafBlock) {
    subIndices = nil;
    for (jint i = start; i < end; i++) {
      OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *ent = JreRetainedLocalValue([self->pending_ getWithInt:i]);
      JreAssert(((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *) nil_chk(ent))->isTerm_, JreStrcat("$I", @"i=", i));
      OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *term = (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *) cast_chk(ent, [OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm class]);
      JreAssert(term->prefixTerm_ == nil, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:842 condition failed: assert term.prefixTerm == null;");
      JreAssert(OrgApacheLuceneUtilStringHelper_startsWithWithByteArray_withOrgApacheLuceneUtilBytesRef_(term->termBytes_, prefix), JreStrcat("$@$@", @"term.term=", term->termBytes_, @" prefix=", prefix));
      OrgApacheLuceneCodecsBlockTermState *state = JreRetainedLocalValue(term->state_);
      jint suffix = ((IOSByteArray *) nil_chk(term->termBytes_))->size_ - prefixLength;
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:suffix];
      [self->suffixWriter_ writeBytesWithByteArray:term->termBytes_ withInt:prefixLength withInt:suffix];
      JreAssert(floorLeadLabel == -1 || (IOSByteArray_Get(term->termBytes_, prefixLength) & (jint) 0xff) >= floorLeadLabel, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:857 condition failed: assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;");
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->statsWriter_)) writeVIntWithInt:((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state))->docFreq_];
      if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(self->fieldInfo_)) getIndexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS)) {
        JreAssert(state->totalTermFreq_ >= state->docFreq_, JreStrcat("J$I", state->totalTermFreq_, @" vs ", state->docFreq_));
        [self->statsWriter_ writeVLongWithLong:state->totalTermFreq_ - state->docFreq_];
      }
      [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(self->this$0_->postingsWriter_)) encodeTermWithLongArray:self->longs_ withOrgApacheLuceneStoreDataOutput:self->bytesWriter_ withOrgApacheLuceneIndexFieldInfo:self->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state withBoolean:absolute];
      for (jint pos = 0; pos < self->longsSize_; pos++) {
        JreAssert(IOSLongArray_Get(nil_chk(self->longs_), pos) >= 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:869 condition failed: assert longs[pos] >= 0;");
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->metaWriter_)) writeVLongWithLong:IOSLongArray_Get(self->longs_, pos)];
      }
      [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->bytesWriter_)) writeToWithOrgApacheLuceneStoreDataOutput:self->metaWriter_];
      [self->bytesWriter_ reset];
      absolute = false;
    }
  }
  else {
    subIndices = create_JavaUtilArrayList_init();
    jboolean sawAutoPrefixTerm = false;
    for (jint i = start; i < end; i++) {
      OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *ent = JreRetainedLocalValue([self->pending_ getWithInt:i]);
      if (((OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingEntry *) nil_chk(ent))->isTerm_) {
        OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *term = (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm *) cast_chk(ent, [OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingTerm class]);
        JreAssert(OrgApacheLuceneUtilStringHelper_startsWithWithByteArray_withOrgApacheLuceneUtilBytesRef_(term->termBytes_, prefix), JreStrcat("$@$@", @"term.term=", term->termBytes_, @" prefix=", prefix));
        OrgApacheLuceneCodecsBlockTermState *state = JreRetainedLocalValue(term->state_);
        jint suffix = ((IOSByteArray *) nil_chk(term->termBytes_))->size_ - prefixLength;
        if (self->this$0_->minItemsInAutoPrefix_ == 0) {
          [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:JreLShift32(suffix, 1)];
          [self->suffixWriter_ writeBytesWithByteArray:term->termBytes_ withInt:prefixLength withInt:suffix];
        }
        else {
          code = JreLShift32(suffix, 2);
          jint floorLeadEnd = -1;
          if (term->prefixTerm_ != nil) {
            JreAssert(self->this$0_->minItemsInAutoPrefix_ > 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:910 condition failed: assert minItemsInAutoPrefix > 0;");
            sawAutoPrefixTerm = true;
            OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefixTerm = JreRetainedLocalValue(term->prefixTerm_);
            floorLeadEnd = prefixTerm->floorLeadEnd_;
            JreAssert(floorLeadEnd != -1, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:914 condition failed: assert floorLeadEnd != -1;");
            if (prefixTerm->floorLeadStart_ == -2) {
              code |= 2;
            }
            else {
              code |= 3;
            }
          }
          [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:code];
          [self->suffixWriter_ writeBytesWithByteArray:term->termBytes_ withInt:prefixLength withInt:suffix];
          if (floorLeadEnd != -1) {
            [self->suffixWriter_ writeByteWithByte:(jbyte) floorLeadEnd];
          }
          JreAssert(floorLeadLabel == -1 || (IOSByteArray_Get(term->termBytes_, prefixLength) & (jint) 0xff) >= floorLeadLabel, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:928 condition failed: assert floorLeadLabel == -1 || (term.termBytes[prefixLength] & 0xff) >= floorLeadLabel;");
        }
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->statsWriter_)) writeVIntWithInt:((OrgApacheLuceneCodecsBlockTermState *) nil_chk(state))->docFreq_];
        if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(self->fieldInfo_)) getIndexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS)) {
          JreAssert(state->totalTermFreq_ >= state->docFreq_, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:934 condition failed: assert state.totalTermFreq >= state.docFreq;");
          [self->statsWriter_ writeVLongWithLong:state->totalTermFreq_ - state->docFreq_];
        }
        [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(self->this$0_->postingsWriter_)) encodeTermWithLongArray:self->longs_ withOrgApacheLuceneStoreDataOutput:self->bytesWriter_ withOrgApacheLuceneIndexFieldInfo:self->fieldInfo_ withOrgApacheLuceneCodecsBlockTermState:state withBoolean:absolute];
        for (jint pos = 0; pos < self->longsSize_; pos++) {
          JreAssert(IOSLongArray_Get(nil_chk(self->longs_), pos) >= 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:949 condition failed: assert longs[pos] >= 0;");
          [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->metaWriter_)) writeVLongWithLong:IOSLongArray_Get(self->longs_, pos)];
        }
        [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->bytesWriter_)) writeToWithOrgApacheLuceneStoreDataOutput:self->metaWriter_];
        [self->bytesWriter_ reset];
        absolute = false;
      }
      else {
        OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *block = (OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock *) cast_chk(ent, [OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock class]);
        JreAssert(OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(block->prefix_, prefix), @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:957 condition failed: assert StringHelper.startsWith(block.prefix, prefix);");
        jint suffix = ((OrgApacheLuceneUtilBytesRef *) nil_chk(block->prefix_))->length_ - prefixLength;
        JreAssert(OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(block->prefix_, prefix), @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:959 condition failed: assert StringHelper.startsWith(block.prefix, prefix);");
        JreAssert(suffix > 0, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:961 condition failed: assert suffix > 0;");
        if (self->this$0_->minItemsInAutoPrefix_ == 0) {
          [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:(JreLShift32(suffix, 1)) | 1];
        }
        else {
          [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) writeVIntWithInt:(JreLShift32(suffix, 2)) | 1];
        }
        [self->suffixWriter_ writeBytesWithByteArray:block->prefix_->bytes_ withInt:prefixLength withInt:suffix];
        JreAssert(floorLeadLabel == -1 || (IOSByteArray_Get(nil_chk(block->prefix_->bytes_), prefixLength) & (jint) 0xff) >= floorLeadLabel, JreStrcat("$I$I", @"floorLeadLabel=", floorLeadLabel, @" suffixLead=", (IOSByteArray_Get(nil_chk(block->prefix_->bytes_), prefixLength) & (jint) 0xff)));
        JreAssert(block->fp_ < startFP, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:981 condition failed: assert block.fp < startFP;");
        [self->suffixWriter_ writeVLongWithLong:startFP - block->fp_];
        [subIndices addWithId:block->index_];
      }
    }
    JreAssert([subIndices size] != 0 || sawAutoPrefixTerm, @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:988 condition failed: assert subIndices.size() != 0 || sawAutoPrefixTerm;");
  }
  [self->this$0_->termsOut_ writeVIntWithInt:(jint) (JreLShift64([((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->suffixWriter_)) getFilePointer], 1)) | (isLeafBlock ? 1 : 0)];
  [self->suffixWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->termsOut_];
  [self->suffixWriter_ reset];
  [self->this$0_->termsOut_ writeVIntWithInt:(jint) [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->statsWriter_)) getFilePointer]];
  [self->statsWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->termsOut_];
  [self->statsWriter_ reset];
  [self->this$0_->termsOut_ writeVIntWithInt:(jint) [((OrgApacheLuceneStoreRAMOutputStream *) nil_chk(self->metaWriter_)) getFilePointer]];
  [self->metaWriter_ writeToWithOrgApacheLuceneStoreDataOutput:self->this$0_->termsOut_];
  [self->metaWriter_ reset];
  if (hasFloorLeadLabel) {
    *IOSByteArray_GetRef(nil_chk(prefix->bytes_), prefix->length_++) = (jbyte) floorLeadLabel;
  }
  return create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_PendingBlock_initWithOrgApacheLuceneUtilBytesRef_withLong_withBoolean_withBoolean_withInt_withJavaUtilList_(prefix, startFP, hasTerms, isFloor, floorLeadLabel, subIndices);
}

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter *self, OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->lastTerm_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->prefixStarts_, [IOSIntArray newArrayWithLength:8]);
  JreStrongAssignAndConsume(&self->pending_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->newBlocks_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->suffixWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->statsWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->metaWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssignAndConsume(&self->bytesWriter_, new_OrgApacheLuceneStoreRAMOutputStream_init());
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreAssert([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE), @"org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.java:1024 condition failed: assert fieldInfo.getIndexOptions() != IndexOptions.NONE;");
  JreStrongAssignAndConsume(&self->docsSeen_, new_OrgApacheLuceneUtilFixedBitSet_initWithInt_(outer$->maxDoc_));
  self->longsSize_ = [((OrgApacheLuceneCodecsPostingsWriterBase *) nil_chk(outer$->postingsWriter_)) setFieldWithOrgApacheLuceneIndexFieldInfo:fieldInfo];
  JreStrongAssignAndConsume(&self->longs_, [IOSLongArray newArrayWithLength:self->longsSize_]);
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter *new_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter *create_OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter, initWithOrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_withOrgApacheLuceneIndexFieldInfo_, outer$, fieldInfo)
}

void OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter *self, OrgApacheLuceneUtilBytesRef *text) {
  jint limit = JavaLangMath_minWithInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->lastTerm_)) length], ((OrgApacheLuceneUtilBytesRef *) nil_chk(text))->length_);
  jint pos = 0;
  while (pos < limit && [self->lastTerm_ byteAtWithInt:pos] == IOSByteArray_Get(nil_chk(text->bytes_), text->offset_ + pos)) {
    pos++;
  }
  for (jint i = [self->lastTerm_ length] - 1; i >= pos; i--) {
    jint prefixTopSize = [((id<JavaUtilList>) nil_chk(self->pending_)) size] - IOSIntArray_Get(nil_chk(self->prefixStarts_), i);
    if (prefixTopSize >= self->this$0_->minItemsInBlock_) {
      [self writeBlocksWithInt:i + 1 withInt:prefixTopSize];
      *IOSIntArray_GetRef(nil_chk(self->prefixStarts_), i) -= prefixTopSize - 1;
    }
  }
  if (((IOSIntArray *) nil_chk(self->prefixStarts_))->size_ < text->length_) {
    JreStrongAssign(&self->prefixStarts_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(self->prefixStarts_, text->length_));
  }
  for (jint i = pos; i < text->length_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->prefixStarts_), i) = [((id<JavaUtilList>) nil_chk(self->pending_)) size];
  }
  [self->lastTerm_ copyBytesWithOrgApacheLuceneUtilBytesRef:text];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter_TermsWriter)
