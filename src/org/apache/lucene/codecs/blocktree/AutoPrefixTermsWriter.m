//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.h"
#include "org/apache/lucene/index/FilteredTermsEnum.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/StringHelper.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter () {
 @public
  jint minItemsInPrefix_;
  jint maxItemsInPrefix_;
  OrgApacheLuceneUtilBytesRefBuilder *lastTerm_;
  IOSIntArray *prefixStarts_;
  id<JavaUtilList> pending_;
}

/*!
 @brief Pushes the new term to the top of the stack, and writes new blocks.
 */
- (void)pushTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text;

- (void)savePrefixWithInt:(jint)prefixLength
                  withInt:(jint)floorLeadStart
                  withInt:(jint)floorLeadEnd;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter, lastTerm_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter, prefixStarts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter, pending_, id<JavaUtilList>)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter *self, OrgApacheLuceneUtilBytesRef *text);

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_savePrefixWithInt_withInt_withInt_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter *self, jint prefixLength, jint floorLeadStart, jint floorLeadEnd);

@interface OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm ()

/*!
 @brief Returns the leading term for this prefix term, e.g."
 foo" (for
   the foo* prefix) or "foom" (for the foo[m-z]* case).
 */
+ (OrgApacheLuceneUtilBytesRef *)toBytesRefWithByteArray:(IOSByteArray *)prefix
                                                 withInt:(jint)floorLeadStart;

@end

__attribute__((unused)) static OrgApacheLuceneUtilBytesRef *OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_toBytesRefWithByteArray_withInt_(IOSByteArray *prefix, jint floorLeadStart);

@interface OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1 : OrgApacheLuceneIndexFilteredTermsEnum {
 @public
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *this$0_;
  OrgApacheLuceneUtilBytesRef *val$prefixRef_;
}

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *)outer$
                                                       withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)capture$0
                                                     withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)tenum;

- (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)acceptWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1)

__attribute__((unused)) static void OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1_initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1 *self, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *outer$, OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum);

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1 *new_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1_initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *outer$, OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1 *create_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1_initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *outer$, OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum);

@implementation OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter

+ (NSString *)brToStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b {
  return OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(b);
}

- (instancetype)initPackagePrivateWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                                                        withInt:(jint)minItemsInPrefix
                                                        withInt:(jint)maxItemsInPrefix {
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_initPackagePrivateWithOrgApacheLuceneIndexTerms_withInt_withInt_(self, terms, minItemsInPrefix, maxItemsInPrefix);
  return self;
}

- (void)pushTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text {
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, text);
}

- (void)savePrefixesWithInt:(jint)prefixLength
                    withInt:(jint)count {
  JreAssert(count > 0, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:273 condition failed: assert count > 0;");
  jint lastSuffixLeadLabel = -2;
  jint start = [((id<JavaUtilList>) nil_chk(pending_)) size] - count;
  JreAssert(start >= 0, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:287 condition failed: assert start >=0;");
  id o = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(pending_)) getWithInt:start]);
  jboolean skippedEmptyStringSuffix = false;
  if ([o isKindOfClass:[IOSByteArray class]]) {
    if (((IOSByteArray *) nil_chk(((IOSByteArray *) cast_chk(o, [IOSByteArray class]))))->size_ == prefixLength) {
      start++;
      count--;
      skippedEmptyStringSuffix = true;
    }
  }
  else {
    OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *prefix = (OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *) cast_chk(o, [OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm class]);
    if (((IOSByteArray *) nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *) nil_chk(prefix))->term_))->bytes_))->size_ == prefixLength) {
      start++;
      count--;
      skippedEmptyStringSuffix = true;
    }
  }
  jint end = [((id<JavaUtilList>) nil_chk(pending_)) size];
  jint nextBlockStart = start;
  jint nextFloorLeadLabel = -1;
  jint prefixCount = 0;
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *lastPTEntry = nil;
  for (jint i = start; i < end; i++) {
    IOSByteArray *termBytes;
    o = [((id<JavaUtilList>) nil_chk(pending_)) getWithInt:i];
    OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *ptEntry;
    if ([o isKindOfClass:[IOSByteArray class]]) {
      ptEntry = nil;
      termBytes = (IOSByteArray *) cast_chk(o, [IOSByteArray class]);
    }
    else {
      ptEntry = (OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *) cast_chk(o, [OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm class]);
      termBytes = ((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *) nil_chk(ptEntry))->term_))->bytes_;
      if (((IOSByteArray *) nil_chk(ptEntry->prefix_))->size_ != prefixLength) {
        JreAssert(ptEntry->prefix_->size_ > prefixLength, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:329 condition failed: assert ptEntry.prefix.length > prefixLength;");
        ptEntry = nil;
      }
    }
    JreAssert(((IOSByteArray *) nil_chk(termBytes))->size_ > prefixLength, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:337 condition failed: assert termBytes.length > prefixLength;");
    jint suffixLeadLabel = IOSByteArray_Get(termBytes, prefixLength) & (jint) 0xff;
    if (suffixLeadLabel != lastSuffixLeadLabel) {
      JreAssert(suffixLeadLabel > lastSuffixLeadLabel, JreStrcat("$I$I", @"suffixLeadLabel=", suffixLeadLabel, @" vs lastSuffixLeadLabel=", lastSuffixLeadLabel));
      jint itemsInBlock = i - nextBlockStart;
      if (itemsInBlock >= minItemsInPrefix_ && end - nextBlockStart > maxItemsInPrefix_) {
        if (lastPTEntry != nil) {
          lastSuffixLeadLabel = lastPTEntry->floorLeadEnd_;
        }
        OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_savePrefixWithInt_withInt_withInt_(self, prefixLength, nextFloorLeadLabel, lastSuffixLeadLabel);
        prefixCount++;
        nextFloorLeadLabel = suffixLeadLabel;
        nextBlockStart = i;
      }
      if (nextFloorLeadLabel == -1) {
        nextFloorLeadLabel = suffixLeadLabel;
      }
      lastSuffixLeadLabel = suffixLeadLabel;
    }
    lastPTEntry = ptEntry;
  }
  if (nextBlockStart < end) {
    if (lastPTEntry != nil) {
      lastSuffixLeadLabel = lastPTEntry->floorLeadEnd_;
    }
    JreAssert(lastSuffixLeadLabel >= nextFloorLeadLabel, JreStrcat("$I$I", @"lastSuffixLeadLabel=", lastSuffixLeadLabel, @" nextFloorLeadLabel=", nextFloorLeadLabel));
    if (prefixCount == 0) {
      if (prefixLength > 0) {
        OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_savePrefixWithInt_withInt_withInt_(self, prefixLength, -2, (jint) 0xff);
        prefixCount++;
        if (skippedEmptyStringSuffix) {
          count++;
        }
      }
      else {
      }
    }
    else {
      if (lastSuffixLeadLabel == -2) {
        lastSuffixLeadLabel = (jint) 0xff;
      }
      OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_savePrefixWithInt_withInt_withInt_(self, prefixLength, nextFloorLeadLabel, lastSuffixLeadLabel);
      prefixCount++;
    }
  }
  [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(pending_)) subListWithInt:[pending_ size] - count withInt:[((id<JavaUtilList>) nil_chk(pending_)) size]])) clear];
  for (jint i = 0; i < prefixCount; i++) {
    OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *pt = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(prefixes_)) getWithInt:[prefixes_ size] - (prefixCount - i)]);
    [((id<JavaUtilList>) nil_chk(pending_)) addWithId:pt];
  }
}

- (void)savePrefixWithInt:(jint)prefixLength
                  withInt:(jint)floorLeadStart
                  withInt:(jint)floorLeadEnd {
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_savePrefixWithInt_withInt_withInt_(self, prefixLength, floorLeadStart, floorLeadEnd);
}

- (void)dealloc {
  RELEASE_(prefixes_);
  RELEASE_(lastTerm_);
  RELEASE_(prefixStarts_);
  RELEASE_(pending_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 1, 3, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(brToStringWithOrgApacheLuceneUtilBytesRef:);
  methods[1].selector = @selector(initPackagePrivateWithOrgApacheLuceneIndexTerms:withInt:withInt:);
  methods[2].selector = @selector(pushTermWithOrgApacheLuceneUtilBytesRef:);
  methods[3].selector = @selector(savePrefixesWithInt:withInt:);
  methods[4].selector = @selector(savePrefixWithInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "prefixes_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 9, -1 },
    { "minItemsInPrefix_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxItemsInPrefix_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lastTerm_", "LOrgApacheLuceneUtilBytesRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prefixStarts_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pending_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "brToString", "LOrgApacheLuceneUtilBytesRef;", "LOrgApacheLuceneIndexTerms;II", "LJavaIoIOException;", "pushTerm", "savePrefixes", "II", "savePrefix", "III", "Ljava/util/List<Lorg/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter$PrefixTerm;>;", "Ljava/util/List<Ljava/lang/Object;>;", "LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter = { "AutoPrefixTermsWriter", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x0, 5, 6, -1, 11, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter;
}

@end

NSString *OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *b) {
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_initialize();
  @try {
    return JreStrcat("$C@", [((OrgApacheLuceneUtilBytesRef *) nil_chk(b)) utf8ToString], ' ', b);
  }
  @catch (JavaLangThrowable *t) {
    return [b description];
  }
}

void OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_initPackagePrivateWithOrgApacheLuceneIndexTerms_withInt_withInt_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter *self, OrgApacheLuceneIndexTerms *terms, jint minItemsInPrefix, jint maxItemsInPrefix) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->prefixes_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->lastTerm_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->prefixStarts_, [IOSIntArray newArrayWithLength:8]);
  JreStrongAssignAndConsume(&self->pending_, new_JavaUtilArrayList_init());
  self->minItemsInPrefix_ = minItemsInPrefix;
  self->maxItemsInPrefix_ = maxItemsInPrefix;
  OrgApacheLuceneIndexTermsEnum *termsEnum = JreRetainedLocalValue([((OrgApacheLuceneIndexTerms *) nil_chk(terms)) iterator]);
  while (true) {
    OrgApacheLuceneUtilBytesRef *term = JreRetainedLocalValue([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next]);
    if (term == nil) {
      break;
    }
    OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, term);
  }
  if ([((id<JavaUtilList>) nil_chk(self->pending_)) size] > 1) {
    OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(self, JreLoadStatic(OrgApacheLuceneCodecsBlocktreeBlockTreeTermsWriter, EMPTY_BYTES_REF));
    while ([((id<JavaUtilList>) nil_chk(self->pending_)) size] >= minItemsInPrefix) {
      [self savePrefixesWithInt:0 withInt:[((id<JavaUtilList>) nil_chk(self->pending_)) size]];
    }
  }
  JavaUtilCollections_sortWithJavaUtilList_(self->prefixes_);
}

OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter *new_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_initPackagePrivateWithOrgApacheLuceneIndexTerms_withInt_withInt_(OrgApacheLuceneIndexTerms *terms, jint minItemsInPrefix, jint maxItemsInPrefix) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter, initPackagePrivateWithOrgApacheLuceneIndexTerms_withInt_withInt_, terms, minItemsInPrefix, maxItemsInPrefix)
}

OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter *create_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_initPackagePrivateWithOrgApacheLuceneIndexTerms_withInt_withInt_(OrgApacheLuceneIndexTerms *terms, jint minItemsInPrefix, jint maxItemsInPrefix) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter, initPackagePrivateWithOrgApacheLuceneIndexTerms_withInt_withInt_, terms, minItemsInPrefix, maxItemsInPrefix)
}

void OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_pushTermWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter *self, OrgApacheLuceneUtilBytesRef *text) {
  jint limit = JavaLangMath_minWithInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->lastTerm_)) length], ((OrgApacheLuceneUtilBytesRef *) nil_chk(text))->length_);
  jint pos = 0;
  while (pos < limit && [self->lastTerm_ byteAtWithInt:pos] == IOSByteArray_Get(nil_chk(text->bytes_), text->offset_ + pos)) {
    pos++;
  }
  for (jint i = [self->lastTerm_ length] - 1; i >= pos; i--) {
    jint prefixTopSize = [((id<JavaUtilList>) nil_chk(self->pending_)) size] - IOSIntArray_Get(nil_chk(self->prefixStarts_), i);
    while (prefixTopSize >= self->minItemsInPrefix_) {
      [self savePrefixesWithInt:i + 1 withInt:prefixTopSize];
      prefixTopSize = [((id<JavaUtilList>) nil_chk(self->pending_)) size] - IOSIntArray_Get(nil_chk(self->prefixStarts_), i);
    }
  }
  if (((IOSIntArray *) nil_chk(self->prefixStarts_))->size_ < text->length_) {
    JreStrongAssign(&self->prefixStarts_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(self->prefixStarts_, text->length_));
  }
  for (jint i = pos; i < text->length_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->prefixStarts_), i) = [((id<JavaUtilList>) nil_chk(self->pending_)) size];
  }
  [self->lastTerm_ copyBytesWithOrgApacheLuceneUtilBytesRef:text];
  if (text->length_ > 0 || [((id<JavaUtilList>) nil_chk(self->pending_)) isEmpty]) {
    IOSByteArray *termBytes = [IOSByteArray arrayWithLength:text->length_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(text->bytes_, text->offset_, termBytes, 0, text->length_);
    [((id<JavaUtilList>) nil_chk(self->pending_)) addWithId:termBytes];
  }
}

void OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_savePrefixWithInt_withInt_withInt_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter *self, jint prefixLength, jint floorLeadStart, jint floorLeadEnd) {
  IOSByteArray *prefix = [IOSByteArray arrayWithLength:prefixLength];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->lastTerm_)) bytes], 0, prefix, 0, prefixLength);
  JreAssert(floorLeadStart != -1, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:429 condition failed: assert floorLeadStart != -1;");
  JreAssert(floorLeadEnd != -1, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:430 condition failed: assert floorLeadEnd != -1;");
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *pt = create_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_initWithByteArray_withInt_withInt_(prefix, floorLeadStart, floorLeadEnd);
  [((id<JavaUtilList>) nil_chk(self->prefixes_)) addWithId:pt];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter)

@implementation OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm

- (instancetype)initWithByteArray:(IOSByteArray *)prefix
                          withInt:(jint)floorLeadStart
                          withInt:(jint)floorLeadEnd {
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_initWithByteArray_withInt_withInt_(self, prefix, floorLeadStart, floorLeadEnd);
  return self;
}

- (NSString *)description {
  NSString *s = OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_brToStringWithOrgApacheLuceneUtilBytesRef_(create_OrgApacheLuceneUtilBytesRef_initWithByteArray_(prefix_));
  if (floorLeadStart_ == -2) {
    JreStrAppend(&s, "$$C", @"[-", JavaLangInteger_toHexStringWithInt_(floorLeadEnd_), ']');
  }
  else {
    JreStrAppend(&s, "C$C$C", '[', JavaLangInteger_toHexStringWithInt_(floorLeadStart_), '-', JavaLangInteger_toHexStringWithInt_(floorLeadEnd_), ']');
  }
  return s;
}

- (jint)compareToWithId:(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *)other {
  cast_chk(other, [OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm class]);
  jint cmp = [((OrgApacheLuceneUtilBytesRef *) nil_chk(term_)) compareToWithId:((OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *) nil_chk(other))->term_];
  if (cmp == 0) {
    if (((IOSByteArray *) nil_chk(prefix_))->size_ != other->prefix_->size_) {
      return prefix_->size_ - other->prefix_->size_;
    }
    cmp = other->floorLeadEnd_ - floorLeadEnd_;
  }
  return cmp;
}

+ (OrgApacheLuceneUtilBytesRef *)toBytesRefWithByteArray:(IOSByteArray *)prefix
                                                 withInt:(jint)floorLeadStart {
  return OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_toBytesRefWithByteArray_withInt_(prefix, floorLeadStart);
}

- (jint)compareToWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  return [((OrgApacheLuceneUtilBytesRef *) nil_chk(self->term_)) compareToWithId:term];
}

- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)inArg {
  OrgApacheLuceneUtilBytesRef *prefixRef = create_OrgApacheLuceneUtilBytesRef_initWithByteArray_(prefix_);
  return create_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1_initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_(self, prefixRef, inArg);
}

- (void)dealloc {
  RELEASE_(prefix_);
  RELEASE_(term_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 6, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithByteArray:withInt:withInt:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(compareToWithId:);
  methods[3].selector = @selector(toBytesRefWithByteArray:withInt:);
  methods[4].selector = @selector(compareToWithOrgApacheLuceneUtilBytesRef:);
  methods[5].selector = @selector(getTermsEnumWithOrgApacheLuceneIndexTermsEnum:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "prefix_", "[B", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "floorLeadStart_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "floorLeadEnd_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "term_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[BII", "toString", "compareTo", "LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;", "toBytesRef", "[BI", "LOrgApacheLuceneUtilBytesRef;", "getTermsEnum", "LOrgApacheLuceneIndexTermsEnum;", "LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter;", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter$PrefixTerm;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm = { "PrefixTerm", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x19, 6, 4, 9, -1, -1, 10, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;
}

@end

void OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_initWithByteArray_withInt_withInt_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *self, IOSByteArray *prefix, jint floorLeadStart, jint floorLeadEnd) {
  NSObject_init(self);
  JreStrongAssign(&self->prefix_, prefix);
  self->floorLeadStart_ = floorLeadStart;
  self->floorLeadEnd_ = floorLeadEnd;
  JreStrongAssign(&self->term_, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_toBytesRefWithByteArray_withInt_(prefix, floorLeadStart));
  JreAssert(floorLeadEnd >= floorLeadStart, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:75 condition failed: assert floorLeadEnd >= floorLeadStart;");
  JreAssert(floorLeadEnd >= 0, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:76 condition failed: assert floorLeadEnd >= 0;");
  JreAssert(floorLeadStart == -2 || floorLeadStart >= 0, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:77 condition failed: assert floorLeadStart == -2 || floorLeadStart >= 0;");
  JreAssert(((IOSByteArray *) nil_chk(prefix))->size_ > 0 || floorLeadStart != -2 || floorLeadEnd != (jint) 0xff, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:80 condition failed: assert prefix.length > 0 || floorLeadStart != -2 || floorLeadEnd != 0xff;");
}

OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *new_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_initWithByteArray_withInt_withInt_(IOSByteArray *prefix, jint floorLeadStart, jint floorLeadEnd) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm, initWithByteArray_withInt_withInt_, prefix, floorLeadStart, floorLeadEnd)
}

OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *create_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_initWithByteArray_withInt_withInt_(IOSByteArray *prefix, jint floorLeadStart, jint floorLeadEnd) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm, initWithByteArray_withInt_withInt_, prefix, floorLeadStart, floorLeadEnd)
}

OrgApacheLuceneUtilBytesRef *OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_toBytesRefWithByteArray_withInt_(IOSByteArray *prefix, jint floorLeadStart) {
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_initialize();
  OrgApacheLuceneUtilBytesRef *br;
  if (floorLeadStart != -2) {
    JreAssert(floorLeadStart >= 0, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:116 condition failed: assert floorLeadStart >= 0;");
    br = create_OrgApacheLuceneUtilBytesRef_initWithInt_(((IOSByteArray *) nil_chk(prefix))->size_ + 1);
  }
  else {
    br = create_OrgApacheLuceneUtilBytesRef_initWithInt_(((IOSByteArray *) nil_chk(prefix))->size_);
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(prefix, 0, br->bytes_, 0, prefix->size_);
  br->length_ = prefix->size_;
  if (floorLeadStart != -2) {
    JreAssert(floorLeadStart >= 0, @"org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter.java:124 condition failed: assert floorLeadStart >= 0;");
    *IOSByteArray_GetRef(nil_chk(br->bytes_), br->length_++) = (jbyte) floorLeadStart;
  }
  return br;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm)

@implementation OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1

- (instancetype)initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *)outer$
                                                       withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)capture$0
                                                     withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)tenum {
  OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1_initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_(self, outer$, capture$0, tenum);
  return self;
}

- (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)acceptWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  if (OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(term, val$prefixRef_) && (this$0_->floorLeadEnd_ == -1 || ((OrgApacheLuceneUtilBytesRef *) nil_chk(term))->length_ == ((OrgApacheLuceneUtilBytesRef *) nil_chk(val$prefixRef_))->length_ || (IOSByteArray_Get(nil_chk(term->bytes_), term->offset_ + val$prefixRef_->length_) & (jint) 0xff) <= this$0_->floorLeadEnd_)) {
    return JreRetainedLocalValue(JreLoadEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, YES));
  }
  else {
    return JreRetainedLocalValue(JreLoadEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, END));
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$prefixRef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermsEnum:);
  methods[1].selector = @selector(acceptWithOrgApacheLuceneUtilBytesRef:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$prefixRef_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneIndexTermsEnum;", "accept", "LOrgApacheLuceneUtilBytesRef;", "LOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm;", "getTermsEnumWithOrgApacheLuceneIndexTermsEnum:" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1 = { "", "org.apache.lucene.codecs.blocktree", ptrTable, methods, fields, 7, 0x8010, 2, 2, 3, -1, 4, -1, -1 };
  return &_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1;
}

@end

void OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1_initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1 *self, OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *outer$, OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$prefixRef_, capture$0);
  OrgApacheLuceneIndexFilteredTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_(self, tenum);
  {
    [self setInitialSeekTermWithOrgApacheLuceneUtilBytesRef:outer$->term_];
  }
}

OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1 *new_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1_initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *outer$, OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1, initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_, outer$, capture$0, tenum)
}

OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1 *create_OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1_initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm *outer$, OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_1, initWithOrgApacheLuceneCodecsBlocktreeAutoPrefixTermsWriter_PrefixTerm_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_, outer$, capture$0, tenum)
}
