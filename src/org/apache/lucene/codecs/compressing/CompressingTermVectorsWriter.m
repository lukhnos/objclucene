//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/SecurityException.h"
#include "java/lang/System.h"
#include "java/util/ArrayDeque.h"
#include "java/util/Arrays.h"
#include "java/util/Deque.h"
#include "java/util/Iterator.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeSet.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexReader.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsReader.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "org/apache/lucene/codecs/compressing/MatchingReaders.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/GrowableByteArrayDataOutput.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/packed/BlockPackedWriter.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@class OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData;
@class OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData;

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter () {
 @public
  NSString *segment_;
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *indexWriter_;
  OrgApacheLuceneStoreIndexOutput *vectorsStream_;
  OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode_;
  OrgApacheLuceneCodecsCompressingCompressor *compressor_;
  jint chunkSize_;
  jlong numChunks_;
  jlong numDirtyChunks_;
  jint numDocs_;
  id<JavaUtilDeque> pendingDocs_;
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *curDoc_;
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *curField_;
  OrgApacheLuceneUtilBytesRef *lastTerm_;
  IOSIntArray *positionsBuf_;
  IOSIntArray *startOffsetsBuf_;
  IOSIntArray *lengthsBuf_;
  IOSIntArray *payloadLengthsBuf_;
  OrgApacheLuceneUtilGrowableByteArrayDataOutput *termSuffixes_;
  OrgApacheLuceneUtilGrowableByteArrayDataOutput *payloadBytes_;
  OrgApacheLuceneUtilPackedBlockPackedWriter *writer_;
}

- (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *)addDocDataWithInt:(jint)numVectorFields;

- (jboolean)triggerFlush;

- (void)flush;

- (jint)flushNumFieldsWithInt:(jint)chunkDocs;

/*!
 @brief Returns a sorted array containing unique field numbers
 */
- (IOSIntArray *)flushFieldNums;

- (void)flushFieldsWithInt:(jint)totalFields
              withIntArray:(IOSIntArray *)fieldNums;

- (void)flushFlagsWithInt:(jint)totalFields
             withIntArray:(IOSIntArray *)fieldNums;

- (void)flushNumTermsWithInt:(jint)totalFields;

- (void)flushTermLengths;

- (void)flushTermFreqs;

- (void)flushPositions;

- (void)flushOffsetsWithIntArray:(IOSIntArray *)fieldNums;

- (void)flushPayloadLengths;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, segment_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, indexWriter_, OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, vectorsStream_, OrgApacheLuceneStoreIndexOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, compressionMode_, OrgApacheLuceneCodecsCompressingCompressionMode *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, compressor_, OrgApacheLuceneCodecsCompressingCompressor *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, pendingDocs_, id<JavaUtilDeque>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, curDoc_, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, curField_, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, lastTerm_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, positionsBuf_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, startOffsetsBuf_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, lengthsBuf_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, payloadLengthsBuf_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, termSuffixes_, OrgApacheLuceneUtilGrowableByteArrayDataOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, payloadBytes_, OrgApacheLuceneUtilGrowableByteArrayDataOutput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, writer_, OrgApacheLuceneUtilPackedBlockPackedWriter *)

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_addDocDataWithInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint numVectorFields);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_triggerFlush(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flush(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self);

__attribute__((unused)) static jint OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushNumFieldsWithInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint chunkDocs);

__attribute__((unused)) static IOSIntArray *OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFieldNums(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFieldsWithInt_withIntArray_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint totalFields, IOSIntArray *fieldNums);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFlagsWithInt_withIntArray_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint totalFields, IOSIntArray *fieldNums);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushNumTermsWithInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint totalFields);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushTermLengths(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushTermFreqs(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushPositions(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushOffsetsWithIntArray_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, IOSIntArray *fieldNums);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushPayloadLengths(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self);

/*!
 @brief a pending doc
 */
@interface OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData : NSObject {
 @public
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *this$0_;
  jint numFields_;
  id<JavaUtilDeque> fields_;
  jint posStart_;
  jint offStart_;
  jint payStart_;
}

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *)outer$
                                                                             withInt:(jint)numFields
                                                                             withInt:(jint)posStart
                                                                             withInt:(jint)offStart
                                                                             withInt:(jint)payStart;

- (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *)addFieldWithInt:(jint)fieldNum
                                                                                    withInt:(jint)numTerms
                                                                                withBoolean:(jboolean)positions
                                                                                withBoolean:(jboolean)offsets
                                                                                withBoolean:(jboolean)payloads;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData, fields_, id<JavaUtilDeque>)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint numFields, jint posStart, jint offStart, jint payStart);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint numFields, jint posStart, jint offStart, jint payStart) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *create_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint numFields, jint posStart, jint offStart, jint payStart);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData)

/*!
 @brief a pending field
 */
@interface OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData : NSObject {
 @public
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *this$0_;
  jboolean hasPositions_;
  jboolean hasOffsets_;
  jboolean hasPayloads_;
  jint fieldNum_;
  jint flags_;
  jint numTerms_;
  IOSIntArray *freqs_;
  IOSIntArray *prefixLengths_;
  IOSIntArray *suffixLengths_;
  jint posStart_;
  jint offStart_;
  jint payStart_;
  jint totalPositions_;
  jint ord_;
}

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *)outer$
                                                                             withInt:(jint)fieldNum
                                                                             withInt:(jint)numTerms
                                                                         withBoolean:(jboolean)positions
                                                                         withBoolean:(jboolean)offsets
                                                                         withBoolean:(jboolean)payloads
                                                                             withInt:(jint)posStart
                                                                             withInt:(jint)offStart
                                                                             withInt:(jint)payStart;

- (void)addTermWithInt:(jint)freq
               withInt:(jint)prefixLength
               withInt:(jint)suffixLength;

- (void)addPositionWithInt:(jint)position
                   withInt:(jint)startOffset
                   withInt:(jint)length
                   withInt:(jint)payloadLength;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData, freqs_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData, prefixLengths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData, suffixLengths_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint fieldNum, jint numTerms, jboolean positions, jboolean offsets, jboolean payloads, jint posStart, jint offStart, jint payStart);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint fieldNum, jint numTerms, jboolean positions, jboolean offsets, jboolean payloads, jint posStart, jint offStart, jint payStart) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *create_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint fieldNum, jint numTerms, jboolean positions, jboolean offsets, jboolean payloads, jint posStart, jint offStart, jint payStart);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter)

NSString *OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_EXTENSION = @"tvd";
NSString *OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_INDEX_EXTENSION = @"tvx";
NSString *OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_IDX = @"Index";
NSString *OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_DAT = @"Data";
jint OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FLAGS_BITS;
NSString *OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED_SYSPROP;
jboolean OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED;

@implementation OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter

+ (jint)MAX_DOCUMENTS_PER_CHUNK {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_MAX_DOCUMENTS_PER_CHUNK;
}

+ (NSString *)VECTORS_EXTENSION {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_EXTENSION;
}

+ (NSString *)VECTORS_INDEX_EXTENSION {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_INDEX_EXTENSION;
}

+ (NSString *)CODEC_SFX_IDX {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_IDX;
}

+ (NSString *)CODEC_SFX_DAT {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_DAT;
}

+ (jint)VERSION_START {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_START;
}

+ (jint)VERSION_CHUNK_STATS {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CHUNK_STATS;
}

+ (jint)VERSION_CURRENT {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CURRENT;
}

+ (jint)PACKED_BLOCK_SIZE {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PACKED_BLOCK_SIZE;
}

+ (jint)POSITIONS {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_POSITIONS;
}

+ (jint)OFFSETS {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS;
}

+ (jint)PAYLOADS {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PAYLOADS;
}

+ (jint)FLAGS_BITS {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FLAGS_BITS;
}

+ (NSString *)BULK_MERGE_ENABLED_SYSPROP {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED_SYSPROP;
}

+ (jboolean)BULK_MERGE_ENABLED {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED;
}

- (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *)addDocDataWithInt:(jint)numVectorFields {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_addDocDataWithInt_(self, numVectorFields);
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                  withOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si
                                         withNSString:(NSString *)segmentSuffix
                    withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context
                                         withNSString:(NSString *)formatName
  withOrgApacheLuceneCodecsCompressingCompressionMode:(OrgApacheLuceneCodecsCompressingCompressionMode *)compressionMode
                                              withInt:(jint)chunkSize
                                              withInt:(jint)blockSize {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_(self, directory, si, segmentSuffix, context, formatName, compressionMode, chunkSize, blockSize);
  return self;
}

- (void)close {
  @try {
    OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ vectorsStream_, indexWriter_ } count:2 type:JavaIoCloseable_class_()]);
  }
  @finally {
    JreStrongAssign(&vectorsStream_, nil);
    JreStrongAssign(&indexWriter_, nil);
  }
}

- (void)startDocumentWithInt:(jint)numVectorFields {
  JreStrongAssign(&curDoc_, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_addDocDataWithInt_(self, numVectorFields));
}

- (void)finishDocument {
  [((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(termSuffixes_)) writeBytesWithByteArray:((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(payloadBytes_))->bytes_ withInt:payloadBytes_->length_];
  payloadBytes_->length_ = 0;
  ++numDocs_;
  if (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_triggerFlush(self)) {
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flush(self);
  }
  JreStrongAssign(&curDoc_, nil);
}

- (void)startFieldWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)info
                                            withInt:(jint)numTerms
                                        withBoolean:(jboolean)positions
                                        withBoolean:(jboolean)offsets
                                        withBoolean:(jboolean)payloads {
  JreStrongAssign(&curField_, [((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(curDoc_)) addFieldWithInt:((OrgApacheLuceneIndexFieldInfo *) nil_chk(info))->number_ withInt:numTerms withBoolean:positions withBoolean:offsets withBoolean:payloads]);
  ((OrgApacheLuceneUtilBytesRef *) nil_chk(lastTerm_))->length_ = 0;
}

- (void)finishField {
  JreStrongAssign(&curField_, nil);
}

- (void)startTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
                                         withInt:(jint)freq {
  JreAssert(freq >= 1, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:298 condition failed: assert freq >= 1;");
  jint prefix = OrgApacheLuceneUtilStringHelper_bytesDifferenceWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(lastTerm_, term);
  [((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(curField_)) addTermWithInt:freq withInt:prefix withInt:((OrgApacheLuceneUtilBytesRef *) nil_chk(term))->length_ - prefix];
  [((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(termSuffixes_)) writeBytesWithByteArray:term->bytes_ withInt:term->offset_ + prefix withInt:term->length_ - prefix];
  if (((IOSByteArray *) nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(lastTerm_))->bytes_))->size_ < term->length_) {
    JreStrongAssignAndConsume(&lastTerm_->bytes_, [IOSByteArray newArrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(term->length_, 1)]);
  }
  lastTerm_->offset_ = 0;
  lastTerm_->length_ = term->length_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(term->bytes_, term->offset_, lastTerm_->bytes_, 0, term->length_);
}

- (void)addPositionWithInt:(jint)position
                   withInt:(jint)startOffset
                   withInt:(jint)endOffset
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)payload {
  JreAssert(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(curField_))->flags_ != 0, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:314 condition failed: assert curField.flags != 0;");
  [curField_ addPositionWithInt:position withInt:startOffset withInt:endOffset - startOffset withInt:payload == nil ? 0 : payload->length_];
  if (((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(curField_))->hasPayloads_ && payload != nil) {
    [((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(payloadBytes_)) writeBytesWithByteArray:payload->bytes_ withInt:payload->offset_ withInt:payload->length_];
  }
}

- (jboolean)triggerFlush {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_triggerFlush(self);
}

- (void)flush {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flush(self);
}

- (jint)flushNumFieldsWithInt:(jint)chunkDocs {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushNumFieldsWithInt_(self, chunkDocs);
}

- (IOSIntArray *)flushFieldNums {
  return OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFieldNums(self);
}

- (void)flushFieldsWithInt:(jint)totalFields
              withIntArray:(IOSIntArray *)fieldNums {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFieldsWithInt_withIntArray_(self, totalFields, fieldNums);
}

- (void)flushFlagsWithInt:(jint)totalFields
             withIntArray:(IOSIntArray *)fieldNums {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFlagsWithInt_withIntArray_(self, totalFields, fieldNums);
}

- (void)flushNumTermsWithInt:(jint)totalFields {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushNumTermsWithInt_(self, totalFields);
}

- (void)flushTermLengths {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushTermLengths(self);
}

- (void)flushTermFreqs {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushTermFreqs(self);
}

- (void)flushPositions {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushPositions(self);
}

- (void)flushOffsetsWithIntArray:(IOSIntArray *)fieldNums {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushOffsetsWithIntArray_(self, fieldNums);
}

- (void)flushPayloadLengths {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushPayloadLengths(self);
}

- (void)finishWithOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fis
                                         withInt:(jint)numDocs {
  if (![((id<JavaUtilDeque>) nil_chk(pendingDocs_)) isEmpty]) {
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flush(self);
    numDirtyChunks_++;
  }
  if (numDocs != self->numDocs_) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"Wrote ", self->numDocs_, @" docs, finish called with numDocs=", numDocs));
  }
  [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *) nil_chk(indexWriter_)) finishWithInt:numDocs withLong:[((OrgApacheLuceneStoreIndexOutput *) nil_chk(vectorsStream_)) getFilePointer]];
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(vectorsStream_)) writeVLongWithLong:numChunks_];
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(vectorsStream_)) writeVLongWithLong:numDirtyChunks_];
  OrgApacheLuceneCodecsCodecUtil_writeFooterWithOrgApacheLuceneStoreIndexOutput_(vectorsStream_);
}

- (void)addProxWithInt:(jint)numProx
withOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)positions
withOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)offsets {
  JreAssert((((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(curField_))->hasPositions_) == (positions != nil), @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:666 condition failed: assert (curField.hasPositions) == (positions != null);");
  JreAssert((curField_->hasOffsets_) == (offsets != nil), @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:667 condition failed: assert (curField.hasOffsets) == (offsets != null);");
  if (curField_->hasPositions_) {
    jint posStart = curField_->posStart_ + curField_->totalPositions_;
    if (posStart + numProx > ((IOSIntArray *) nil_chk(positionsBuf_))->size_) {
      JreStrongAssign(&positionsBuf_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(positionsBuf_, posStart + numProx));
    }
    jint position = 0;
    if (((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(curField_))->hasPayloads_) {
      jint payStart = curField_->payStart_ + curField_->totalPositions_;
      if (payStart + numProx > ((IOSIntArray *) nil_chk(payloadLengthsBuf_))->size_) {
        JreStrongAssign(&payloadLengthsBuf_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_withInt_(payloadLengthsBuf_, payStart + numProx));
      }
      for (jint i = 0; i < numProx; ++i) {
        jint code = [((OrgApacheLuceneStoreDataInput *) nil_chk(positions)) readVInt];
        if ((code & 1) != 0) {
          jint payloadLength = [positions readVInt];
          *IOSIntArray_GetRef(nil_chk(payloadLengthsBuf_), payStart + i) = payloadLength;
          [((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(payloadBytes_)) copyBytesWithOrgApacheLuceneStoreDataInput:positions withLong:payloadLength];
        }
        else {
          *IOSIntArray_GetRef(nil_chk(payloadLengthsBuf_), payStart + i) = 0;
        }
        position += JreURShift32(code, 1);
        *IOSIntArray_GetRef(nil_chk(positionsBuf_), posStart + i) = position;
      }
    }
    else {
      for (jint i = 0; i < numProx; ++i) {
        position += (JreURShift32([((OrgApacheLuceneStoreDataInput *) nil_chk(positions)) readVInt], 1));
        *IOSIntArray_GetRef(nil_chk(positionsBuf_), posStart + i) = position;
      }
    }
  }
  if (((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(curField_))->hasOffsets_) {
    jint offStart = curField_->offStart_ + curField_->totalPositions_;
    if (offStart + numProx > ((IOSIntArray *) nil_chk(startOffsetsBuf_))->size_) {
      jint newLength = OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(offStart + numProx, 4);
      JreStrongAssign(&startOffsetsBuf_, JavaUtilArrays_copyOfWithIntArray_withInt_(startOffsetsBuf_, newLength));
      JreStrongAssign(&lengthsBuf_, JavaUtilArrays_copyOfWithIntArray_withInt_(lengthsBuf_, newLength));
    }
    jint lastOffset = 0;
    jint startOffset;
    jint endOffset;
    for (jint i = 0; i < numProx; ++i) {
      startOffset = lastOffset + [((OrgApacheLuceneStoreDataInput *) nil_chk(offsets)) readVInt];
      endOffset = startOffset + [offsets readVInt];
      lastOffset = endOffset;
      *IOSIntArray_GetRef(nil_chk(startOffsetsBuf_), offStart + i) = startOffset;
      *IOSIntArray_GetRef(nil_chk(lengthsBuf_), offStart + i) = endOffset - startOffset;
    }
  }
  ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(curField_))->totalPositions_ += numProx;
}

- (jint)mergeWithOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState {
  jint docCount = 0;
  jint numReaders = ((IOSIntArray *) nil_chk(((OrgApacheLuceneIndexMergeState *) nil_chk(mergeState))->maxDocs_))->size_;
  OrgApacheLuceneCodecsCompressingMatchingReaders *matching = create_OrgApacheLuceneCodecsCompressingMatchingReaders_initPackagePrivateWithOrgApacheLuceneIndexMergeState_(mergeState);
  for (jint readerIndex = 0; readerIndex < numReaders; readerIndex++) {
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *matchingVectorsReader = nil;
    OrgApacheLuceneCodecsTermVectorsReader *vectorsReader = IOSObjectArray_Get(nil_chk(mergeState->termVectorsReaders_), readerIndex);
    if (IOSBooleanArray_Get(nil_chk(matching->matchingReaders_), readerIndex)) {
      if (vectorsReader != nil && [vectorsReader isKindOfClass:[OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader class]]) {
        matchingVectorsReader = (OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *) cast_chk(vectorsReader, [OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader class]);
      }
    }
    jint maxDoc = IOSIntArray_Get(mergeState->maxDocs_, readerIndex);
    id<OrgApacheLuceneUtilBits> liveDocs = IOSObjectArray_Get(nil_chk(mergeState->liveDocs_), readerIndex);
    if (matchingVectorsReader != nil && JreObjectEqualsEquals([matchingVectorsReader getCompressionMode], compressionMode_) && [matchingVectorsReader getChunkSize] == chunkSize_ && [matchingVectorsReader getVersion] == OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CURRENT && [matchingVectorsReader getPackedIntsVersion] == OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT && OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED && liveDocs == nil && ![self tooDirtyWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:matchingVectorsReader]) {
      [matchingVectorsReader checkIntegrity];
      if (![((id<JavaUtilDeque>) nil_chk(pendingDocs_)) isEmpty]) {
        OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flush(self);
        numDirtyChunks_++;
      }
      OrgApacheLuceneStoreIndexInput *rawDocs = JreRetainedLocalValue([matchingVectorsReader getVectorsStream]);
      OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader *index = JreRetainedLocalValue([matchingVectorsReader getIndexReader]);
      [((OrgApacheLuceneStoreIndexInput *) nil_chk(rawDocs)) seekWithLong:[((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexReader *) nil_chk(index)) getStartPointerWithInt:0]];
      jint docID = 0;
      while (docID < maxDoc) {
        jint base = [rawDocs readVInt];
        if (base != docID) {
          @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I", @"invalid state: base=", base, @", docID=", docID), rawDocs);
        }
        jint bufferedDocs = [rawDocs readVInt];
        [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *) nil_chk(indexWriter_)) writeIndexWithInt:bufferedDocs withLong:[((OrgApacheLuceneStoreIndexOutput *) nil_chk(vectorsStream_)) getFilePointer]];
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(vectorsStream_)) writeVIntWithInt:docCount];
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(vectorsStream_)) writeVIntWithInt:bufferedDocs];
        docID += bufferedDocs;
        docCount += bufferedDocs;
        numDocs_ += bufferedDocs;
        if (docID > maxDoc) {
          @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$I$I$I", @"invalid state: base=", base, @", count=", bufferedDocs, @", maxDoc=", maxDoc), rawDocs);
        }
        jlong end;
        if (docID == maxDoc) {
          end = [matchingVectorsReader getMaxPointer];
        }
        else {
          end = [index getStartPointerWithInt:docID];
        }
        [((OrgApacheLuceneStoreIndexOutput *) nil_chk(vectorsStream_)) copyBytesWithOrgApacheLuceneStoreDataInput:rawDocs withLong:end - [rawDocs getFilePointer]];
      }
      if ([rawDocs getFilePointer] != [matchingVectorsReader getMaxPointer]) {
        @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withOrgApacheLuceneStoreDataInput_(JreStrcat("$J$J", @"invalid state: pos=", [rawDocs getFilePointer], @", max=", [matchingVectorsReader getMaxPointer]), rawDocs);
      }
      numChunks_ += [matchingVectorsReader getNumChunks];
      numDirtyChunks_ += [matchingVectorsReader getNumDirtyChunks];
    }
    else {
      if (vectorsReader != nil) {
        [vectorsReader checkIntegrity];
      }
      for (jint i = 0; i < maxDoc; i++) {
        if (liveDocs != nil && [liveDocs getWithInt:i] == false) {
          continue;
        }
        OrgApacheLuceneIndexFields *vectors;
        if (vectorsReader == nil) {
          vectors = nil;
        }
        else {
          vectors = [vectorsReader getWithInt:i];
        }
        [self addAllDocVectorsWithOrgApacheLuceneIndexFields:vectors withOrgApacheLuceneIndexMergeState:mergeState];
        ++docCount;
      }
    }
  }
  [self finishWithOrgApacheLuceneIndexFieldInfos:mergeState->mergeFieldInfos_ withInt:docCount];
  return docCount;
}

- (jboolean)tooDirtyWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *)candidate {
  return [((OrgApacheLuceneCodecsCompressingCompressingTermVectorsReader *) nil_chk(candidate)) getNumDirtyChunks] > 1024 || [candidate getNumDirtyChunks] * 100 > [candidate getNumChunks];
}

- (void)dealloc {
  RELEASE_(segment_);
  RELEASE_(indexWriter_);
  RELEASE_(vectorsStream_);
  RELEASE_(compressionMode_);
  RELEASE_(compressor_);
  RELEASE_(pendingDocs_);
  RELEASE_(curDoc_);
  RELEASE_(curField_);
  RELEASE_(lastTerm_);
  RELEASE_(positionsBuf_);
  RELEASE_(startOffsetsBuf_);
  RELEASE_(lengthsBuf_);
  RELEASE_(payloadLengthsBuf_);
  RELEASE_(termSuffixes_);
  RELEASE_(payloadBytes_);
  RELEASE_(writer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData;", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 3, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 1, 3, -1, -1, -1 },
    { NULL, "[I", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 13, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 3, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 23, 3, -1, -1, -1 },
    { NULL, "Z", 0x0, 24, 25, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addDocDataWithInt:);
  methods[1].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfo:withNSString:withOrgApacheLuceneStoreIOContext:withNSString:withOrgApacheLuceneCodecsCompressingCompressionMode:withInt:withInt:);
  methods[2].selector = @selector(close);
  methods[3].selector = @selector(startDocumentWithInt:);
  methods[4].selector = @selector(finishDocument);
  methods[5].selector = @selector(startFieldWithOrgApacheLuceneIndexFieldInfo:withInt:withBoolean:withBoolean:withBoolean:);
  methods[6].selector = @selector(finishField);
  methods[7].selector = @selector(startTermWithOrgApacheLuceneUtilBytesRef:withInt:);
  methods[8].selector = @selector(addPositionWithInt:withInt:withInt:withOrgApacheLuceneUtilBytesRef:);
  methods[9].selector = @selector(triggerFlush);
  methods[10].selector = @selector(flush);
  methods[11].selector = @selector(flushNumFieldsWithInt:);
  methods[12].selector = @selector(flushFieldNums);
  methods[13].selector = @selector(flushFieldsWithInt:withIntArray:);
  methods[14].selector = @selector(flushFlagsWithInt:withIntArray:);
  methods[15].selector = @selector(flushNumTermsWithInt:);
  methods[16].selector = @selector(flushTermLengths);
  methods[17].selector = @selector(flushTermFreqs);
  methods[18].selector = @selector(flushPositions);
  methods[19].selector = @selector(flushOffsetsWithIntArray:);
  methods[20].selector = @selector(flushPayloadLengths);
  methods[21].selector = @selector(finishWithOrgApacheLuceneIndexFieldInfos:withInt:);
  methods[22].selector = @selector(addProxWithInt:withOrgApacheLuceneStoreDataInput:withOrgApacheLuceneStoreDataInput:);
  methods[23].selector = @selector(mergeWithOrgApacheLuceneIndexMergeState:);
  methods[24].selector = @selector(tooDirtyWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_DOCUMENTS_PER_CHUNK", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_MAX_DOCUMENTS_PER_CHUNK, 0x18, -1, -1, -1, -1 },
    { "VECTORS_EXTENSION", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 26, -1, -1 },
    { "VECTORS_INDEX_EXTENSION", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 27, -1, -1 },
    { "CODEC_SFX_IDX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 28, -1, -1 },
    { "CODEC_SFX_DAT", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "VERSION_START", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_START, 0x18, -1, -1, -1, -1 },
    { "VERSION_CHUNK_STATS", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CHUNK_STATS, 0x18, -1, -1, -1, -1 },
    { "VERSION_CURRENT", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CURRENT, 0x18, -1, -1, -1, -1 },
    { "PACKED_BLOCK_SIZE", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PACKED_BLOCK_SIZE, 0x18, -1, -1, -1, -1 },
    { "POSITIONS", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_POSITIONS, 0x18, -1, -1, -1, -1 },
    { "OFFSETS", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS, 0x18, -1, -1, -1, -1 },
    { "PAYLOADS", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PAYLOADS, 0x18, -1, -1, -1, -1 },
    { "FLAGS_BITS", "I", .constantValue.asLong = 0, 0x18, -1, 30, -1, -1 },
    { "segment_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "indexWriter_", "LOrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "vectorsStream_", "LOrgApacheLuceneStoreIndexOutput;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compressionMode_", "LOrgApacheLuceneCodecsCompressingCompressionMode;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "compressor_", "LOrgApacheLuceneCodecsCompressingCompressor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "chunkSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numChunks_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numDirtyChunks_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numDocs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingDocs_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x12, -1, -1, 31, -1 },
    { "curDoc_", "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "curField_", "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "positionsBuf_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startOffsetsBuf_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lengthsBuf_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "payloadLengthsBuf_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termSuffixes_", "LOrgApacheLuceneUtilGrowableByteArrayDataOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "payloadBytes_", "LOrgApacheLuceneUtilGrowableByteArrayDataOutput;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "writer_", "LOrgApacheLuceneUtilPackedBlockPackedWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "BULK_MERGE_ENABLED_SYSPROP", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 32, -1, -1 },
    { "BULK_MERGE_ENABLED", "Z", .constantValue.asLong = 0, 0x18, -1, 33, -1, -1 },
  };
  static const void *ptrTable[] = { "addDocData", "I", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexSegmentInfo;LNSString;LOrgApacheLuceneStoreIOContext;LNSString;LOrgApacheLuceneCodecsCompressingCompressionMode;II", "LJavaIoIOException;", "startDocument", "startField", "LOrgApacheLuceneIndexFieldInfo;IZZZ", "startTerm", "LOrgApacheLuceneUtilBytesRef;I", "addPosition", "IIILOrgApacheLuceneUtilBytesRef;", "flushNumFields", "flushFields", "I[I", "flushFlags", "flushNumTerms", "flushOffsets", "[I", "finish", "LOrgApacheLuceneIndexFieldInfos;I", "addProx", "ILOrgApacheLuceneStoreDataInput;LOrgApacheLuceneStoreDataInput;", "merge", "LOrgApacheLuceneIndexMergeState;", "tooDirty", "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsReader;", &OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_EXTENSION, &OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_INDEX_EXTENSION, &OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_IDX, &OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_DAT, &OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FLAGS_BITS, "Ljava/util/Deque<Lorg/apache/lucene/codecs/compressing/CompressingTermVectorsWriter$DocData;>;", &OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED_SYSPROP, &OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED, "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData;LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter = { "CompressingTermVectorsWriter", "org.apache.lucene.codecs.compressing", ptrTable, methods, fields, 7, 0x11, 25, 35, -1, 34, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter class]) {
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FLAGS_BITS = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_POSITIONS | OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS | OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PAYLOADS);
    JreStrongAssign(&OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED_SYSPROP, JreStrcat("$$", [OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_class_() getName], @".enableBulkMerge"));
    {
      jboolean v = true;
      @try {
        v = JavaLangBoolean_parseBooleanWithNSString_(JavaLangSystem_getPropertyWithNSString_withNSString_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED_SYSPROP, @"true"));
      }
      @catch (JavaLangSecurityException *ignored) {
      }
      OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_BULK_MERGE_ENABLED = v;
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter)
  }
}

@end

OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_addDocDataWithInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint numVectorFields) {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *last = nil;
  for (id<JavaUtilIterator> it = JreRetainedLocalValue([((id<JavaUtilDeque>) nil_chk(self->pendingDocs_)) descendingIterator]); [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *doc = [it next];
    if (![((id<JavaUtilDeque>) nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(doc))->fields_)) isEmpty]) {
      last = [doc->fields_ getLast];
      break;
    }
  }
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *doc;
  if (last == nil) {
    doc = create_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_(self, numVectorFields, 0, 0, 0);
  }
  else {
    jint posStart = last->posStart_ + (last->hasPositions_ ? last->totalPositions_ : 0);
    jint offStart = last->offStart_ + (last->hasOffsets_ ? last->totalPositions_ : 0);
    jint payStart = last->payStart_ + (last->hasPayloads_ ? last->totalPositions_ : 0);
    doc = create_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_(self, numVectorFields, posStart, offStart, payStart);
  }
  [self->pendingDocs_ addWithId:doc];
  return doc;
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfo *si, NSString *segmentSuffix, OrgApacheLuceneStoreIOContext *context, NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint blockSize) {
  OrgApacheLuceneCodecsTermVectorsWriter_init(self);
  JreAssert(directory != nil, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:211 condition failed: assert directory != null;");
  JreStrongAssign(&self->segment_, ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(si))->name_);
  JreStrongAssign(&self->compressionMode_, compressionMode);
  JreStrongAssign(&self->compressor_, [((OrgApacheLuceneCodecsCompressingCompressionMode *) nil_chk(compressionMode)) newCompressor]);
  self->chunkSize_ = chunkSize;
  self->numDocs_ = 0;
  JreStrongAssignAndConsume(&self->pendingDocs_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->termSuffixes_, new_OrgApacheLuceneUtilGrowableByteArrayDataOutput_initWithInt_(OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(chunkSize, 1)));
  JreStrongAssignAndConsume(&self->payloadBytes_, new_OrgApacheLuceneUtilGrowableByteArrayDataOutput_initWithInt_(OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(1, 1)));
  JreStrongAssignAndConsume(&self->lastTerm_, new_OrgApacheLuceneUtilBytesRef_initWithInt_(OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(30, 1)));
  jboolean success = false;
  OrgApacheLuceneStoreIndexOutput *indexStream = JreRetainedLocalValue([((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) createOutputWithNSString:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(self->segment_, segmentSuffix, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_INDEX_EXTENSION) withOrgApacheLuceneStoreIOContext:context]);
  @try {
    JreStrongAssign(&self->vectorsStream_, [directory createOutputWithNSString:OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(self->segment_, segmentSuffix, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VECTORS_EXTENSION) withOrgApacheLuceneStoreIOContext:context]);
    NSString *codecNameIdx = JreStrcat("$$", formatName, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_IDX);
    NSString *codecNameDat = JreStrcat("$$", formatName, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_CODEC_SFX_DAT);
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(indexStream, codecNameIdx, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CURRENT, [si getId], segmentSuffix);
    OrgApacheLuceneCodecsCodecUtil_writeIndexHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_withByteArray_withNSString_(self->vectorsStream_, codecNameDat, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_VERSION_CURRENT, [si getId], segmentSuffix);
    JreAssert(OrgApacheLuceneCodecsCodecUtil_indexHeaderLengthWithNSString_withNSString_(codecNameDat, segmentSuffix) == [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) getFilePointer], @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:234 condition failed: assert CodecUtil.indexHeaderLength(codecNameDat, segmentSuffix) == vectorsStream.getFilePointer();");
    JreAssert(OrgApacheLuceneCodecsCodecUtil_indexHeaderLengthWithNSString_withNSString_(codecNameIdx, segmentSuffix) == [((OrgApacheLuceneStoreIndexOutput *) nil_chk(indexStream)) getFilePointer], @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:235 condition failed: assert CodecUtil.indexHeaderLength(codecNameIdx, segmentSuffix) == indexStream.getFilePointer();");
    JreStrongAssignAndConsume(&self->indexWriter_, new_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter_initWithOrgApacheLuceneStoreIndexOutput_withInt_(indexStream, blockSize));
    indexStream = nil;
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeVIntWithInt:OrgApacheLuceneUtilPackedPackedInts_VERSION_CURRENT];
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeVIntWithInt:chunkSize];
    JreStrongAssignAndConsume(&self->writer_, new_OrgApacheLuceneUtilPackedBlockPackedWriter_initWithOrgApacheLuceneStoreDataOutput_withInt_(self->vectorsStream_, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PACKED_BLOCK_SIZE));
    JreStrongAssignAndConsume(&self->positionsBuf_, [IOSIntArray newArrayWithLength:1024]);
    JreStrongAssignAndConsume(&self->startOffsetsBuf_, [IOSIntArray newArrayWithLength:1024]);
    JreStrongAssignAndConsume(&self->lengthsBuf_, [IOSIntArray newArrayWithLength:1024]);
    JreStrongAssignAndConsume(&self->payloadLengthsBuf_, [IOSIntArray newArrayWithLength:1024]);
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->vectorsStream_, indexStream, self->indexWriter_ } count:3 type:JavaIoCloseable_class_()]);
    }
  }
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfo *si, NSString *segmentSuffix, OrgApacheLuceneStoreIOContext *context, NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint blockSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_, directory, si, segmentSuffix, context, formatName, compressionMode, chunkSize, blockSize)
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *create_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfo *si, NSString *segmentSuffix, OrgApacheLuceneStoreIOContext *context, NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint blockSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_, directory, si, segmentSuffix, context, formatName, compressionMode, chunkSize, blockSize)
}

jboolean OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_triggerFlush(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self) {
  return ((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(self->termSuffixes_))->length_ >= self->chunkSize_ || [((id<JavaUtilDeque>) nil_chk(self->pendingDocs_)) size] >= OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_MAX_DOCUMENTS_PER_CHUNK;
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flush(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self) {
  jint chunkDocs = [((id<JavaUtilDeque>) nil_chk(self->pendingDocs_)) size];
  JreAssert(chunkDocs > 0, JavaLangInteger_valueOfWithInt_(chunkDocs));
  [((OrgApacheLuceneCodecsCompressingCompressingStoredFieldsIndexWriter *) nil_chk(self->indexWriter_)) writeIndexWithInt:chunkDocs withLong:[((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) getFilePointer]];
  jint docBase = self->numDocs_ - chunkDocs;
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeVIntWithInt:docBase];
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeVIntWithInt:chunkDocs];
  jint totalFields = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushNumFieldsWithInt_(self, chunkDocs);
  if (totalFields > 0) {
    IOSIntArray *fieldNums = OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFieldNums(self);
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFieldsWithInt_withIntArray_(self, totalFields, fieldNums);
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFlagsWithInt_withIntArray_(self, totalFields, fieldNums);
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushNumTermsWithInt_(self, totalFields);
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushTermLengths(self);
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushTermFreqs(self);
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushPositions(self);
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushOffsetsWithIntArray_(self, fieldNums);
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushPayloadLengths(self);
    [((OrgApacheLuceneCodecsCompressingCompressor *) nil_chk(self->compressor_)) compressWithByteArray:((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(self->termSuffixes_))->bytes_ withInt:0 withInt:self->termSuffixes_->length_ withOrgApacheLuceneStoreDataOutput:self->vectorsStream_];
  }
  [self->pendingDocs_ clear];
  JreStrongAssign(&self->curDoc_, nil);
  JreStrongAssign(&self->curField_, nil);
  ((OrgApacheLuceneUtilGrowableByteArrayDataOutput *) nil_chk(self->termSuffixes_))->length_ = 0;
  self->numChunks_++;
}

jint OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushNumFieldsWithInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint chunkDocs) {
  if (chunkDocs == 1) {
    jint numFields = ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk([((id<JavaUtilDeque>) nil_chk(self->pendingDocs_)) getFirst]))->numFields_;
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeVIntWithInt:numFields];
    return numFields;
  }
  else {
    [((OrgApacheLuceneUtilPackedBlockPackedWriter *) nil_chk(self->writer_)) resetWithOrgApacheLuceneStoreDataOutput:self->vectorsStream_];
    jint totalFields = 0;
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
      [self->writer_ addWithLong:((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->numFields_];
      totalFields += dd->numFields_;
    }
    [self->writer_ finish];
    return totalFields;
  }
}

IOSIntArray *OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFieldNums(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self) {
  id<JavaUtilSortedSet> fieldNums = create_JavaUtilTreeSet_init();
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      [fieldNums addWithId:JavaLangInteger_valueOfWithInt_(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->fieldNum_)];
    }
  }
  jint numDistinctFields = [fieldNums size];
  JreAssert(numDistinctFields > 0, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:399 condition failed: assert numDistinctFields > 0;");
  jint bitsRequired = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_([((JavaLangInteger *) nil_chk([fieldNums last])) intValue]);
  jint token = (JreLShift32(JavaLangMath_minWithInt_withInt_(numDistinctFields - 1, (jint) 0x07), 5)) | bitsRequired;
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeByteWithByte:(jbyte) token];
  if (numDistinctFields - 1 >= (jint) 0x07) {
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeVIntWithInt:numDistinctFields - 1 - (jint) 0x07];
  }
  OrgApacheLuceneUtilPackedPackedInts_Writer *writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(self->vectorsStream_, JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), [fieldNums size], bitsRequired, 1);
  for (JavaLangInteger * __strong fieldNum in fieldNums) {
    [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) addWithLong:[((JavaLangInteger *) nil_chk(fieldNum)) intValue]];
  }
  [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) finish];
  IOSIntArray *fns = [IOSIntArray arrayWithLength:[fieldNums size]];
  jint i = 0;
  for (JavaLangInteger * __strong key in fieldNums) {
    *IOSIntArray_GetRef(fns, i++) = [((JavaLangInteger *) nil_chk(key)) intValue];
  }
  return fns;
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFieldsWithInt_withIntArray_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint totalFields, IOSIntArray *fieldNums) {
  OrgApacheLuceneUtilPackedPackedInts_Writer *writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(self->vectorsStream_, JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), totalFields, OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(((IOSIntArray *) nil_chk(fieldNums))->size_ - 1), 1);
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      jint fieldNumIndex = JavaUtilArrays_binarySearchWithIntArray_withInt_(fieldNums, ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->fieldNum_);
      JreAssert(fieldNumIndex >= 0, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:425 condition failed: assert fieldNumIndex >= 0;");
      [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) addWithLong:fieldNumIndex];
    }
  }
  [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) finish];
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushFlagsWithInt_withIntArray_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint totalFields, IOSIntArray *fieldNums) {
  jboolean nonChangingFlags = true;
  IOSIntArray *fieldFlags = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(fieldNums))->size_];
  JavaUtilArrays_fillWithIntArray_withInt_(fieldFlags, -1);
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      jint fieldNumOff = JavaUtilArrays_binarySearchWithIntArray_withInt_(fieldNums, ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->fieldNum_);
      JreAssert(fieldNumOff >= 0, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:441 condition failed: assert fieldNumOff >= 0;");
      if (IOSIntArray_Get(fieldFlags, fieldNumOff) == -1) {
        *IOSIntArray_GetRef(fieldFlags, fieldNumOff) = fd->flags_;
      }
      else if (IOSIntArray_Get(fieldFlags, fieldNumOff) != fd->flags_) {
        nonChangingFlags = false;
        goto break_outer;
      }
    }
  }
  break_outer: ;
  if (nonChangingFlags) {
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeVIntWithInt:0];
    OrgApacheLuceneUtilPackedPackedInts_Writer *writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(self->vectorsStream_, JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), fieldFlags->size_, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FLAGS_BITS, 1);
    {
      IOSIntArray *a__ = fieldFlags;
      jint const *b__ = a__->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint flags = *b__++;
        JreAssert(flags >= 0, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:456 condition failed: assert flags >= 0;");
        [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) addWithLong:flags];
      }
    }
    JreAssert([((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) ord] == fieldFlags->size_ - 1, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:459 condition failed: assert writer.ord() == fieldFlags.length - 1;");
    [writer finish];
  }
  else {
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeVIntWithInt:1];
    OrgApacheLuceneUtilPackedPackedInts_Writer *writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(self->vectorsStream_, JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), totalFields, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FLAGS_BITS, 1);
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in self->pendingDocs_) {
      for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
        [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) addWithLong:((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->flags_];
      }
    }
    JreAssert([((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) ord] == totalFields - 1, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:470 condition failed: assert writer.ord() == totalFields - 1;");
    [writer finish];
  }
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushNumTermsWithInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, jint totalFields) {
  jint maxNumTerms = 0;
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      maxNumTerms |= ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->numTerms_;
    }
  }
  jint bitsRequired = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(maxNumTerms);
  [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeVIntWithInt:bitsRequired];
  OrgApacheLuceneUtilPackedPackedInts_Writer *writer = OrgApacheLuceneUtilPackedPackedInts_getWriterNoHeaderWithOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneUtilPackedPackedInts_Format_withInt_withInt_withInt_(self->vectorsStream_, JreLoadEnum(OrgApacheLuceneUtilPackedPackedInts_Format, PACKED), totalFields, bitsRequired, 1);
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in self->pendingDocs_) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      [((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) addWithLong:((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->numTerms_];
    }
  }
  JreAssert([((OrgApacheLuceneUtilPackedPackedInts_Writer *) nil_chk(writer)) ord] == totalFields - 1, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:491 condition failed: assert writer.ord() == totalFields - 1;");
  [writer finish];
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushTermLengths(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self) {
  [((OrgApacheLuceneUtilPackedBlockPackedWriter *) nil_chk(self->writer_)) resetWithOrgApacheLuceneStoreDataOutput:self->vectorsStream_];
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      for (jint i = 0; i < ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->numTerms_; ++i) {
        [self->writer_ addWithLong:IOSIntArray_Get(nil_chk(fd->prefixLengths_), i)];
      }
    }
  }
  [self->writer_ finish];
  [self->writer_ resetWithOrgApacheLuceneStoreDataOutput:self->vectorsStream_];
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in self->pendingDocs_) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      for (jint i = 0; i < ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->numTerms_; ++i) {
        [self->writer_ addWithLong:IOSIntArray_Get(nil_chk(fd->suffixLengths_), i)];
      }
    }
  }
  [self->writer_ finish];
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushTermFreqs(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self) {
  [((OrgApacheLuceneUtilPackedBlockPackedWriter *) nil_chk(self->writer_)) resetWithOrgApacheLuceneStoreDataOutput:self->vectorsStream_];
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      for (jint i = 0; i < ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->numTerms_; ++i) {
        [self->writer_ addWithLong:IOSIntArray_Get(nil_chk(fd->freqs_), i) - 1];
      }
    }
  }
  [self->writer_ finish];
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushPositions(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self) {
  [((OrgApacheLuceneUtilPackedBlockPackedWriter *) nil_chk(self->writer_)) resetWithOrgApacheLuceneStoreDataOutput:self->vectorsStream_];
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      if (((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->hasPositions_) {
        jint pos = 0;
        for (jint i = 0; i < fd->numTerms_; ++i) {
          jint previousPosition = 0;
          for (jint j = 0; j < IOSIntArray_Get(nil_chk(fd->freqs_), i); ++j) {
            jint position = IOSIntArray_Get(nil_chk(self->positionsBuf_), fd->posStart_ + pos++);
            [self->writer_ addWithLong:position - previousPosition];
            previousPosition = position;
          }
        }
        JreAssert(pos == fd->totalPositions_, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:542 condition failed: assert pos == fd.totalPositions;");
      }
    }
  }
  [self->writer_ finish];
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushOffsetsWithIntArray_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self, IOSIntArray *fieldNums) {
  jboolean hasOffsets = false;
  IOSLongArray *sumPos = [IOSLongArray arrayWithLength:((IOSIntArray *) nil_chk(fieldNums))->size_];
  IOSLongArray *sumOffsets = [IOSLongArray arrayWithLength:fieldNums->size_];
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      hasOffsets |= ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->hasOffsets_;
      if (fd->hasOffsets_ && fd->hasPositions_) {
        jint fieldNumOff = JavaUtilArrays_binarySearchWithIntArray_withInt_(fieldNums, fd->fieldNum_);
        jint pos = 0;
        for (jint i = 0; i < fd->numTerms_; ++i) {
          jint previousPos = 0;
          jint previousOff = 0;
          for (jint j = 0; j < IOSIntArray_Get(nil_chk(fd->freqs_), i); ++j) {
            jint position = IOSIntArray_Get(nil_chk(self->positionsBuf_), fd->posStart_ + pos);
            jint startOffset = IOSIntArray_Get(nil_chk(self->startOffsetsBuf_), fd->offStart_ + pos);
            *IOSLongArray_GetRef(sumPos, fieldNumOff) += position - previousPos;
            *IOSLongArray_GetRef(sumOffsets, fieldNumOff) += startOffset - previousOff;
            previousPos = position;
            previousOff = startOffset;
            ++pos;
          }
        }
        JreAssert(pos == fd->totalPositions_, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:572 condition failed: assert pos == fd.totalPositions;");
      }
    }
  }
  if (!hasOffsets) {
    return;
  }
  IOSFloatArray *charsPerTerm = [IOSFloatArray arrayWithLength:fieldNums->size_];
  for (jint i = 0; i < fieldNums->size_; ++i) {
    *IOSFloatArray_GetRef(charsPerTerm, i) = (IOSLongArray_Get(sumPos, i) <= 0 || IOSLongArray_Get(sumOffsets, i) <= 0) ? 0 : (jfloat) ((jdouble) IOSLongArray_Get(sumOffsets, i) / IOSLongArray_Get(sumPos, i));
  }
  for (jint i = 0; i < fieldNums->size_; ++i) {
    [((OrgApacheLuceneStoreIndexOutput *) nil_chk(self->vectorsStream_)) writeIntWithInt:JavaLangFloat_floatToRawIntBitsWithFloat_(IOSFloatArray_Get(charsPerTerm, i))];
  }
  [((OrgApacheLuceneUtilPackedBlockPackedWriter *) nil_chk(self->writer_)) resetWithOrgApacheLuceneStoreDataOutput:self->vectorsStream_];
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in self->pendingDocs_) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      if ((((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->flags_ & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS) != 0) {
        jint fieldNumOff = JavaUtilArrays_binarySearchWithIntArray_withInt_(fieldNums, fd->fieldNum_);
        jfloat cpt = IOSFloatArray_Get(charsPerTerm, fieldNumOff);
        jint pos = 0;
        for (jint i = 0; i < fd->numTerms_; ++i) {
          jint previousPos = 0;
          jint previousOff = 0;
          for (jint j = 0; j < IOSIntArray_Get(nil_chk(fd->freqs_), i); ++j) {
            jint position = fd->hasPositions_ ? IOSIntArray_Get(nil_chk(self->positionsBuf_), fd->posStart_ + pos) : 0;
            jint startOffset = IOSIntArray_Get(nil_chk(self->startOffsetsBuf_), fd->offStart_ + pos);
            [self->writer_ addWithLong:startOffset - previousOff - JreFpToInt((cpt * (position - previousPos)))];
            previousPos = position;
            previousOff = startOffset;
            ++pos;
          }
        }
      }
    }
  }
  [self->writer_ finish];
  [self->writer_ resetWithOrgApacheLuceneStoreDataOutput:self->vectorsStream_];
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in self->pendingDocs_) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      if ((((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->flags_ & OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS) != 0) {
        jint pos = 0;
        for (jint i = 0; i < fd->numTerms_; ++i) {
          for (jint j = 0; j < IOSIntArray_Get(nil_chk(fd->freqs_), i); ++j) {
            [self->writer_ addWithLong:IOSIntArray_Get(nil_chk(self->lengthsBuf_), fd->offStart_ + pos++) - IOSIntArray_Get(nil_chk(fd->prefixLengths_), i) - IOSIntArray_Get(nil_chk(fd->suffixLengths_), i)];
          }
        }
        JreAssert(pos == fd->totalPositions_, @"org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter.java:627 condition failed: assert pos == fd.totalPositions;");
      }
    }
  }
  [self->writer_ finish];
}

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_flushPayloadLengths(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *self) {
  [((OrgApacheLuceneUtilPackedBlockPackedWriter *) nil_chk(self->writer_)) resetWithOrgApacheLuceneStoreDataOutput:self->vectorsStream_];
  for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData * __strong dd in nil_chk(self->pendingDocs_)) {
    for (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData * __strong fd in nil_chk(((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *) nil_chk(dd))->fields_)) {
      if (((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(fd))->hasPayloads_) {
        for (jint i = 0; i < fd->totalPositions_; ++i) {
          [self->writer_ addWithLong:IOSIntArray_Get(nil_chk(self->payloadLengthsBuf_), fd->payStart_ + i)];
        }
      }
    }
  }
  [self->writer_ finish];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter)

@implementation OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *)outer$
                                                                             withInt:(jint)numFields
                                                                             withInt:(jint)posStart
                                                                             withInt:(jint)offStart
                                                                             withInt:(jint)payStart {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_(self, outer$, numFields, posStart, offStart, payStart);
  return self;
}

- (OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *)addFieldWithInt:(jint)fieldNum
                                                                                    withInt:(jint)numTerms
                                                                                withBoolean:(jboolean)positions
                                                                                withBoolean:(jboolean)offsets
                                                                                withBoolean:(jboolean)payloads {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *field;
  if ([((id<JavaUtilDeque>) nil_chk(fields_)) isEmpty]) {
    field = create_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_(this$0_, fieldNum, numTerms, positions, offsets, payloads, posStart_, offStart_, payStart_);
  }
  else {
    OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *last = [fields_ getLast];
    jint posStart = ((OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *) nil_chk(last))->posStart_ + (last->hasPositions_ ? last->totalPositions_ : 0);
    jint offStart = last->offStart_ + (last->hasOffsets_ ? last->totalPositions_ : 0);
    jint payStart = last->payStart_ + (last->hasPayloads_ ? last->totalPositions_ : 0);
    field = create_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_(this$0_, fieldNum, numTerms, positions, offsets, payloads, posStart, offStart, payStart);
  }
  [fields_ addWithId:field];
  return field;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(fields_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData;", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter:withInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(addFieldWithInt:withInt:withBoolean:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "numFields_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fields_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "posStart_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "offStart_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "payStart_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter;IIII", "addField", "IIZZZ", "Ljava/util/Deque<Lorg/apache/lucene/codecs/compressing/CompressingTermVectorsWriter$FieldData;>;", "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData = { "DocData", "org.apache.lucene.codecs.compressing", ptrTable, methods, fields, 7, 0x2, 2, 6, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint numFields, jint posStart, jint offStart, jint payStart) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->numFields_ = numFields;
  JreStrongAssignAndConsume(&self->fields_, new_JavaUtilArrayDeque_initWithInt_(numFields));
  self->posStart_ = posStart;
  self->offStart_ = offStart;
  self->payStart_ = payStart;
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint numFields, jint posStart, jint offStart, jint payStart) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData, initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_, outer$, numFields, posStart, offStart, payStart)
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData *create_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint numFields, jint posStart, jint offStart, jint payStart) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData, initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withInt_withInt_, outer$, numFields, posStart, offStart, payStart)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_DocData)

@implementation OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData

- (instancetype)initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter:(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *)outer$
                                                                             withInt:(jint)fieldNum
                                                                             withInt:(jint)numTerms
                                                                         withBoolean:(jboolean)positions
                                                                         withBoolean:(jboolean)offsets
                                                                         withBoolean:(jboolean)payloads
                                                                             withInt:(jint)posStart
                                                                             withInt:(jint)offStart
                                                                             withInt:(jint)payStart {
  OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_(self, outer$, fieldNum, numTerms, positions, offsets, payloads, posStart, offStart, payStart);
  return self;
}

- (void)addTermWithInt:(jint)freq
               withInt:(jint)prefixLength
               withInt:(jint)suffixLength {
  *IOSIntArray_GetRef(nil_chk(freqs_), ord_) = freq;
  *IOSIntArray_GetRef(nil_chk(prefixLengths_), ord_) = prefixLength;
  *IOSIntArray_GetRef(nil_chk(suffixLengths_), ord_) = suffixLength;
  ++ord_;
}

- (void)addPositionWithInt:(jint)position
                   withInt:(jint)startOffset
                   withInt:(jint)length
                   withInt:(jint)payloadLength {
  if (hasPositions_) {
    if (posStart_ + totalPositions_ == ((IOSIntArray *) nil_chk(this$0_->positionsBuf_))->size_) {
      JreStrongAssign(&this$0_->positionsBuf_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_(this$0_->positionsBuf_));
    }
    *IOSIntArray_GetRef(nil_chk(this$0_->positionsBuf_), posStart_ + totalPositions_) = position;
  }
  if (hasOffsets_) {
    if (offStart_ + totalPositions_ == ((IOSIntArray *) nil_chk(this$0_->startOffsetsBuf_))->size_) {
      jint newLength = OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(offStart_ + totalPositions_, 4);
      JreStrongAssign(&this$0_->startOffsetsBuf_, JavaUtilArrays_copyOfWithIntArray_withInt_(this$0_->startOffsetsBuf_, newLength));
      JreStrongAssign(&this$0_->lengthsBuf_, JavaUtilArrays_copyOfWithIntArray_withInt_(this$0_->lengthsBuf_, newLength));
    }
    *IOSIntArray_GetRef(nil_chk(this$0_->startOffsetsBuf_), offStart_ + totalPositions_) = startOffset;
    *IOSIntArray_GetRef(nil_chk(this$0_->lengthsBuf_), offStart_ + totalPositions_) = length;
  }
  if (hasPayloads_) {
    if (payStart_ + totalPositions_ == ((IOSIntArray *) nil_chk(this$0_->payloadLengthsBuf_))->size_) {
      JreStrongAssign(&this$0_->payloadLengthsBuf_, OrgApacheLuceneUtilArrayUtil_growWithIntArray_(this$0_->payloadLengthsBuf_));
    }
    *IOSIntArray_GetRef(nil_chk(this$0_->payloadLengthsBuf_), payStart_ + totalPositions_) = payloadLength;
  }
  ++totalPositions_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(freqs_);
  RELEASE_(prefixLengths_);
  RELEASE_(suffixLengths_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter:withInt:withInt:withBoolean:withBoolean:withBoolean:withInt:withInt:withInt:);
  methods[1].selector = @selector(addTermWithInt:withInt:withInt:);
  methods[2].selector = @selector(addPositionWithInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "hasPositions_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "hasOffsets_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "hasPayloads_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldNum_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "numTerms_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "freqs_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "prefixLengths_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "suffixLengths_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "posStart_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "offStart_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "payStart_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "totalPositions_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ord_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter;IIZZZIII", "addTerm", "III", "addPosition", "IIII", "LOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData = { "FieldData", "org.apache.lucene.codecs.compressing", ptrTable, methods, fields, 7, 0x2, 3, 15, 5, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *self, OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint fieldNum, jint numTerms, jboolean positions, jboolean offsets, jboolean payloads, jint posStart, jint offStart, jint payStart) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  self->fieldNum_ = fieldNum;
  self->numTerms_ = numTerms;
  self->hasPositions_ = positions;
  self->hasOffsets_ = offsets;
  self->hasPayloads_ = payloads;
  self->flags_ = (positions ? OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_POSITIONS : 0) | (offsets ? OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_OFFSETS : 0) | (payloads ? OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_PAYLOADS : 0);
  JreStrongAssignAndConsume(&self->freqs_, [IOSIntArray newArrayWithLength:numTerms]);
  JreStrongAssignAndConsume(&self->prefixLengths_, [IOSIntArray newArrayWithLength:numTerms]);
  JreStrongAssignAndConsume(&self->suffixLengths_, [IOSIntArray newArrayWithLength:numTerms]);
  self->posStart_ = posStart;
  self->offStart_ = offStart;
  self->payStart_ = payStart;
  self->totalPositions_ = 0;
  self->ord_ = 0;
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *new_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint fieldNum, jint numTerms, jboolean positions, jboolean offsets, jboolean payloads, jint posStart, jint offStart, jint payStart) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData, initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_, outer$, fieldNum, numTerms, positions, offsets, payloads, posStart, offStart, payStart)
}

OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData *create_OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData_initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter *outer$, jint fieldNum, jint numTerms, jboolean positions, jboolean offsets, jboolean payloads, jint posStart, jint offStart, jint payStart) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData, initWithOrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_withInt_withInt_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_, outer$, fieldNum, numTerms, positions, offsets, payloads, posStart, offStart, payStart)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingTermVectorsWriter_FieldData)
