//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/compressing/LZ4.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/lucene/codecs/compressing/LZ4.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/util/packed/PackedInts.h"

@class OrgApacheLuceneCodecsCompressingLZ4_Match;

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/compressing/LZ4 must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsCompressingLZ4 ()

- (instancetype)initPackagePrivate;

+ (jint)hash__WithInt:(jint)i
              withInt:(jint)hashBits;

+ (jint)hashHCWithInt:(jint)i;

+ (jint)readIntWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)i;

+ (jboolean)readIntEqualsWithByteArray:(IOSByteArray *)buf
                               withInt:(jint)i
                               withInt:(jint)j;

+ (jint)commonBytesWithByteArray:(IOSByteArray *)b
                         withInt:(jint)o1
                         withInt:(jint)o2
                         withInt:(jint)limit;

+ (jint)commonBytesBackwardWithByteArray:(IOSByteArray *)b
                                 withInt:(jint)o1
                                 withInt:(jint)o2
                                 withInt:(jint)l1
                                 withInt:(jint)l2;

+ (void)encodeLenWithInt:(jint)l
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg;

+ (void)encodeLiteralsWithByteArray:(IOSByteArray *)bytes
                            withInt:(jint)token
                            withInt:(jint)anchor
                            withInt:(jint)literalLen
 withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg;

+ (void)encodeLastLiteralsWithByteArray:(IOSByteArray *)bytes
                                withInt:(jint)anchor
                                withInt:(jint)literalLen
     withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg;

+ (void)encodeSequenceWithByteArray:(IOSByteArray *)bytes
                            withInt:(jint)anchor
                            withInt:(jint)matchRef
                            withInt:(jint)matchOff
                            withInt:(jint)matchLen
 withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg;

+ (void)copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match:(OrgApacheLuceneCodecsCompressingLZ4_Match *)m1
              withOrgApacheLuceneCodecsCompressingLZ4_Match:(OrgApacheLuceneCodecsCompressingLZ4_Match *)m2 OBJC_METHOD_FAMILY_NONE;

@end

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingLZ4_initPackagePrivate(OrgApacheLuceneCodecsCompressingLZ4 *self);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingLZ4 *new_OrgApacheLuceneCodecsCompressingLZ4_initPackagePrivate(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingLZ4 *create_OrgApacheLuceneCodecsCompressingLZ4_initPackagePrivate(void);

__attribute__((unused)) static jint OrgApacheLuceneCodecsCompressingLZ4_hash__WithInt_withInt_(jint i, jint hashBits);

__attribute__((unused)) static jint OrgApacheLuceneCodecsCompressingLZ4_hashHCWithInt_(jint i);

__attribute__((unused)) static jint OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(IOSByteArray *buf, jint i);

__attribute__((unused)) static jboolean OrgApacheLuceneCodecsCompressingLZ4_readIntEqualsWithByteArray_withInt_withInt_(IOSByteArray *buf, jint i, jint j);

__attribute__((unused)) static jint OrgApacheLuceneCodecsCompressingLZ4_commonBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *b, jint o1, jint o2, jint limit);

__attribute__((unused)) static jint OrgApacheLuceneCodecsCompressingLZ4_commonBytesBackwardWithByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *b, jint o1, jint o2, jint l1, jint l2);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingLZ4_encodeLenWithInt_withOrgApacheLuceneStoreDataOutput_(jint l, OrgApacheLuceneStoreDataOutput *outArg);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingLZ4_encodeLiteralsWithByteArray_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(IOSByteArray *bytes, jint token, jint anchor, jint literalLen, OrgApacheLuceneStoreDataOutput *outArg);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingLZ4_encodeLastLiteralsWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(IOSByteArray *bytes, jint anchor, jint literalLen, OrgApacheLuceneStoreDataOutput *outArg);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingLZ4_encodeSequenceWithByteArray_withInt_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(IOSByteArray *bytes, jint anchor, jint matchRef, jint matchOff, jint matchLen, OrgApacheLuceneStoreDataOutput *outArg);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(OrgApacheLuceneCodecsCompressingLZ4_Match *m1, OrgApacheLuceneCodecsCompressingLZ4_Match *m2);

@interface OrgApacheLuceneCodecsCompressingLZ4_HashTable () {
 @public
  jint hashLog_;
  OrgApacheLuceneUtilPackedPackedInts_Mutable *hashTable_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingLZ4_HashTable, hashTable_, OrgApacheLuceneUtilPackedPackedInts_Mutable *)

@interface OrgApacheLuceneCodecsCompressingLZ4_Match : NSObject {
 @public
  jint start_;
  jint ref_;
  jint len_;
}

- (instancetype)init;

- (void)fixWithInt:(jint)correction;

- (jint)end;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCompressingLZ4_Match)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingLZ4_Match_init(OrgApacheLuceneCodecsCompressingLZ4_Match *self);

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingLZ4_Match *new_OrgApacheLuceneCodecsCompressingLZ4_Match_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneCodecsCompressingLZ4_Match *create_OrgApacheLuceneCodecsCompressingLZ4_Match_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCompressingLZ4_Match)

@interface OrgApacheLuceneCodecsCompressingLZ4_HCHashTable () {
 @public
  jint base_;
  IOSIntArray *hashTable_;
  IOSShortArray *chainTable_;
}

- (void)resetWithInt:(jint)base;

- (jint)hashPointerWithByteArray:(IOSByteArray *)bytes
                         withInt:(jint)off;

- (jint)nextWithInt:(jint)off;

- (void)addHashWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)off;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable, hashTable_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable, chainTable_, IOSShortArray *)

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_resetWithInt_(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self, jint base);

__attribute__((unused)) static jint OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_hashPointerWithByteArray_withInt_(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self, IOSByteArray *bytes, jint off);

__attribute__((unused)) static jint OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_nextWithInt_(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self, jint off);

__attribute__((unused)) static void OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_addHashWithByteArray_withInt_(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self, IOSByteArray *bytes, jint off);

@implementation OrgApacheLuceneCodecsCompressingLZ4

+ (jint)MEMORY_USAGE {
  return OrgApacheLuceneCodecsCompressingLZ4_MEMORY_USAGE;
}

+ (jint)MIN_MATCH {
  return OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH;
}

+ (jint)MAX_DISTANCE {
  return OrgApacheLuceneCodecsCompressingLZ4_MAX_DISTANCE;
}

+ (jint)LAST_LITERALS {
  return OrgApacheLuceneCodecsCompressingLZ4_LAST_LITERALS;
}

+ (jint)HASH_LOG_HC {
  return OrgApacheLuceneCodecsCompressingLZ4_HASH_LOG_HC;
}

+ (jint)HASH_TABLE_SIZE_HC {
  return OrgApacheLuceneCodecsCompressingLZ4_HASH_TABLE_SIZE_HC;
}

+ (jint)OPTIMAL_ML {
  return OrgApacheLuceneCodecsCompressingLZ4_OPTIMAL_ML;
}

- (instancetype)initPackagePrivate {
  OrgApacheLuceneCodecsCompressingLZ4_initPackagePrivate(self);
  return self;
}

+ (jint)hash__WithInt:(jint)i
              withInt:(jint)hashBits {
  return OrgApacheLuceneCodecsCompressingLZ4_hash__WithInt_withInt_(i, hashBits);
}

+ (jint)hashHCWithInt:(jint)i {
  return OrgApacheLuceneCodecsCompressingLZ4_hashHCWithInt_(i);
}

+ (jint)readIntWithByteArray:(IOSByteArray *)buf
                     withInt:(jint)i {
  return OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(buf, i);
}

+ (jboolean)readIntEqualsWithByteArray:(IOSByteArray *)buf
                               withInt:(jint)i
                               withInt:(jint)j {
  return OrgApacheLuceneCodecsCompressingLZ4_readIntEqualsWithByteArray_withInt_withInt_(buf, i, j);
}

+ (jint)commonBytesWithByteArray:(IOSByteArray *)b
                         withInt:(jint)o1
                         withInt:(jint)o2
                         withInt:(jint)limit {
  return OrgApacheLuceneCodecsCompressingLZ4_commonBytesWithByteArray_withInt_withInt_withInt_(b, o1, o2, limit);
}

+ (jint)commonBytesBackwardWithByteArray:(IOSByteArray *)b
                                 withInt:(jint)o1
                                 withInt:(jint)o2
                                 withInt:(jint)l1
                                 withInt:(jint)l2 {
  return OrgApacheLuceneCodecsCompressingLZ4_commonBytesBackwardWithByteArray_withInt_withInt_withInt_withInt_(b, o1, o2, l1, l2);
}

+ (jint)decompressWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)compressed
                                            withInt:(jint)decompressedLen
                                      withByteArray:(IOSByteArray *)dest
                                            withInt:(jint)dOff {
  return OrgApacheLuceneCodecsCompressingLZ4_decompressWithOrgApacheLuceneStoreDataInput_withInt_withByteArray_withInt_(compressed, decompressedLen, dest, dOff);
}

+ (void)encodeLenWithInt:(jint)l
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneCodecsCompressingLZ4_encodeLenWithInt_withOrgApacheLuceneStoreDataOutput_(l, outArg);
}

+ (void)encodeLiteralsWithByteArray:(IOSByteArray *)bytes
                            withInt:(jint)token
                            withInt:(jint)anchor
                            withInt:(jint)literalLen
 withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneCodecsCompressingLZ4_encodeLiteralsWithByteArray_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(bytes, token, anchor, literalLen, outArg);
}

+ (void)encodeLastLiteralsWithByteArray:(IOSByteArray *)bytes
                                withInt:(jint)anchor
                                withInt:(jint)literalLen
     withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneCodecsCompressingLZ4_encodeLastLiteralsWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(bytes, anchor, literalLen, outArg);
}

+ (void)encodeSequenceWithByteArray:(IOSByteArray *)bytes
                            withInt:(jint)anchor
                            withInt:(jint)matchRef
                            withInt:(jint)matchOff
                            withInt:(jint)matchLen
 withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg {
  OrgApacheLuceneCodecsCompressingLZ4_encodeSequenceWithByteArray_withInt_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(bytes, anchor, matchRef, matchOff, matchLen, outArg);
}

+ (void)compressWithByteArray:(IOSByteArray *)bytes
                      withInt:(jint)off
                      withInt:(jint)len
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
withOrgApacheLuceneCodecsCompressingLZ4_HashTable:(OrgApacheLuceneCodecsCompressingLZ4_HashTable *)ht {
  OrgApacheLuceneCodecsCompressingLZ4_compressWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneCodecsCompressingLZ4_HashTable_(bytes, off, len, outArg, ht);
}

+ (void)copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match:(OrgApacheLuceneCodecsCompressingLZ4_Match *)m1
              withOrgApacheLuceneCodecsCompressingLZ4_Match:(OrgApacheLuceneCodecsCompressingLZ4_Match *)m2 {
  OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(m1, m2);
}

+ (void)compressHCWithByteArray:(IOSByteArray *)src
                        withInt:(jint)srcOff
                        withInt:(jint)srcLen
withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg
withOrgApacheLuceneCodecsCompressingLZ4_HCHashTable:(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *)ht {
  OrgApacheLuceneCodecsCompressingLZ4_compressHCWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneCodecsCompressingLZ4_HCHashTable_(src, srcOff, srcLen, outArg, ht);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 13, 14, -1, -1, -1 },
    { NULL, "V", 0xa, 15, 16, 14, -1, -1, -1 },
    { NULL, "V", 0xa, 17, 18, 14, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 20, 14, -1, -1, -1 },
    { NULL, "V", 0xa, 21, 22, 14, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 24, 14, -1, -1, -1 },
    { NULL, "V", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 27, 28, 14, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(hash__WithInt:withInt:);
  methods[2].selector = @selector(hashHCWithInt:);
  methods[3].selector = @selector(readIntWithByteArray:withInt:);
  methods[4].selector = @selector(readIntEqualsWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(commonBytesWithByteArray:withInt:withInt:withInt:);
  methods[6].selector = @selector(commonBytesBackwardWithByteArray:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(decompressWithOrgApacheLuceneStoreDataInput:withInt:withByteArray:withInt:);
  methods[8].selector = @selector(encodeLenWithInt:withOrgApacheLuceneStoreDataOutput:);
  methods[9].selector = @selector(encodeLiteralsWithByteArray:withInt:withInt:withInt:withOrgApacheLuceneStoreDataOutput:);
  methods[10].selector = @selector(encodeLastLiteralsWithByteArray:withInt:withInt:withOrgApacheLuceneStoreDataOutput:);
  methods[11].selector = @selector(encodeSequenceWithByteArray:withInt:withInt:withInt:withInt:withOrgApacheLuceneStoreDataOutput:);
  methods[12].selector = @selector(compressWithByteArray:withInt:withInt:withOrgApacheLuceneStoreDataOutput:withOrgApacheLuceneCodecsCompressingLZ4_HashTable:);
  methods[13].selector = @selector(copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match:withOrgApacheLuceneCodecsCompressingLZ4_Match:);
  methods[14].selector = @selector(compressHCWithByteArray:withInt:withInt:withOrgApacheLuceneStoreDataOutput:withOrgApacheLuceneCodecsCompressingLZ4_HCHashTable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MEMORY_USAGE", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingLZ4_MEMORY_USAGE, 0x18, -1, -1, -1, -1 },
    { "MIN_MATCH", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, 0x18, -1, -1, -1, -1 },
    { "MAX_DISTANCE", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingLZ4_MAX_DISTANCE, 0x18, -1, -1, -1, -1 },
    { "LAST_LITERALS", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingLZ4_LAST_LITERALS, 0x18, -1, -1, -1, -1 },
    { "HASH_LOG_HC", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingLZ4_HASH_LOG_HC, 0x18, -1, -1, -1, -1 },
    { "HASH_TABLE_SIZE_HC", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingLZ4_HASH_TABLE_SIZE_HC, 0x18, -1, -1, -1, -1 },
    { "OPTIMAL_ML", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingLZ4_OPTIMAL_ML, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "hash", "II", "hashHC", "I", "readInt", "[BI", "readIntEquals", "[BII", "commonBytes", "[BIII", "commonBytesBackward", "[BIIII", "decompress", "LOrgApacheLuceneStoreDataInput;I[BI", "LJavaIoIOException;", "encodeLen", "ILOrgApacheLuceneStoreDataOutput;", "encodeLiterals", "[BIIILOrgApacheLuceneStoreDataOutput;", "encodeLastLiterals", "[BIILOrgApacheLuceneStoreDataOutput;", "encodeSequence", "[BIIIILOrgApacheLuceneStoreDataOutput;", "compress", "[BIILOrgApacheLuceneStoreDataOutput;LOrgApacheLuceneCodecsCompressingLZ4_HashTable;", "copyTo", "LOrgApacheLuceneCodecsCompressingLZ4_Match;LOrgApacheLuceneCodecsCompressingLZ4_Match;", "compressHC", "[BIILOrgApacheLuceneStoreDataOutput;LOrgApacheLuceneCodecsCompressingLZ4_HCHashTable;", "LOrgApacheLuceneCodecsCompressingLZ4_HashTable;LOrgApacheLuceneCodecsCompressingLZ4_Match;LOrgApacheLuceneCodecsCompressingLZ4_HCHashTable;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingLZ4 = { "LZ4", "org.apache.lucene.codecs.compressing", ptrTable, methods, fields, 7, 0x10, 15, 7, -1, 29, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsCompressingLZ4;
}

@end

void OrgApacheLuceneCodecsCompressingLZ4_initPackagePrivate(OrgApacheLuceneCodecsCompressingLZ4 *self) {
  NSObject_init(self);
}

OrgApacheLuceneCodecsCompressingLZ4 *new_OrgApacheLuceneCodecsCompressingLZ4_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingLZ4, initPackagePrivate)
}

OrgApacheLuceneCodecsCompressingLZ4 *create_OrgApacheLuceneCodecsCompressingLZ4_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingLZ4, initPackagePrivate)
}

jint OrgApacheLuceneCodecsCompressingLZ4_hash__WithInt_withInt_(jint i, jint hashBits) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  return JreURShift32((i * -1640531535), (32 - hashBits));
}

jint OrgApacheLuceneCodecsCompressingLZ4_hashHCWithInt_(jint i) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  return OrgApacheLuceneCodecsCompressingLZ4_hash__WithInt_withInt_(i, OrgApacheLuceneCodecsCompressingLZ4_HASH_LOG_HC);
}

jint OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(IOSByteArray *buf, jint i) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  return (JreLShift32((IOSByteArray_Get(nil_chk(buf), i) & (jint) 0xFF), 24)) | (JreLShift32((IOSByteArray_Get(buf, i + 1) & (jint) 0xFF), 16)) | (JreLShift32((IOSByteArray_Get(buf, i + 2) & (jint) 0xFF), 8)) | (IOSByteArray_Get(buf, i + 3) & (jint) 0xFF);
}

jboolean OrgApacheLuceneCodecsCompressingLZ4_readIntEqualsWithByteArray_withInt_withInt_(IOSByteArray *buf, jint i, jint j) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  return OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(buf, i) == OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(buf, j);
}

jint OrgApacheLuceneCodecsCompressingLZ4_commonBytesWithByteArray_withInt_withInt_withInt_(IOSByteArray *b, jint o1, jint o2, jint limit) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  JreAssert(o1 < o2, @"org/apache/lucene/codecs/compressing/LZ4.java:63 condition failed: assert o1 < o2;");
  jint count = 0;
  while (o2 < limit && IOSByteArray_Get(nil_chk(b), o1++) == IOSByteArray_Get(b, o2++)) {
    ++count;
  }
  return count;
}

jint OrgApacheLuceneCodecsCompressingLZ4_commonBytesBackwardWithByteArray_withInt_withInt_withInt_withInt_(IOSByteArray *b, jint o1, jint o2, jint l1, jint l2) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  jint count = 0;
  while (o1 > l1 && o2 > l2 && IOSByteArray_Get(nil_chk(b), --o1) == IOSByteArray_Get(b, --o2)) {
    ++count;
  }
  return count;
}

jint OrgApacheLuceneCodecsCompressingLZ4_decompressWithOrgApacheLuceneStoreDataInput_withInt_withByteArray_withInt_(OrgApacheLuceneStoreDataInput *compressed, jint decompressedLen, IOSByteArray *dest, jint dOff) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  jint destEnd = ((IOSByteArray *) nil_chk(dest))->size_;
  do {
    jint token = [((OrgApacheLuceneStoreDataInput *) nil_chk(compressed)) readByte] & (jint) 0xFF;
    jint literalLen = JreURShift32(token, 4);
    if (literalLen != 0) {
      if (literalLen == (jint) 0x0F) {
        jbyte len;
        while ((len = [compressed readByte]) == (jbyte) (jint) 0xFF) {
          literalLen += (jint) 0xFF;
        }
        literalLen += len & (jint) 0xFF;
      }
      [compressed readBytesWithByteArray:dest withInt:dOff withInt:literalLen];
      dOff += literalLen;
    }
    if (dOff >= decompressedLen) {
      break;
    }
    jint matchDec = ([compressed readByte] & (jint) 0xFF) | (JreLShift32(([compressed readByte] & (jint) 0xFF), 8));
    JreAssert(matchDec > 0, @"org/apache/lucene/codecs/compressing/LZ4.java:111 condition failed: assert matchDec > 0;");
    jint matchLen = token & (jint) 0x0F;
    if (matchLen == (jint) 0x0F) {
      jint len;
      while ((len = [compressed readByte]) == (jbyte) (jint) 0xFF) {
        matchLen += (jint) 0xFF;
      }
      matchLen += len & (jint) 0xFF;
    }
    matchLen += OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH;
    jint fastLen = (matchLen + 7) & (jint) 0xFFFFFFF8;
    if (matchDec < matchLen || dOff + fastLen > destEnd) {
      for (jint ref = dOff - matchDec, end = dOff + matchLen; dOff < end; ++ref, ++dOff) {
        *IOSByteArray_GetRef(dest, dOff) = IOSByteArray_Get(dest, ref);
      }
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(dest, dOff - matchDec, dest, dOff, fastLen);
      dOff += matchLen;
    }
  }
  while (dOff < decompressedLen);
  return dOff;
}

void OrgApacheLuceneCodecsCompressingLZ4_encodeLenWithInt_withOrgApacheLuceneStoreDataOutput_(jint l, OrgApacheLuceneStoreDataOutput *outArg) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  while (l >= (jint) 0xFF) {
    [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) (jint) 0xFF];
    l -= (jint) 0xFF;
  }
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) l];
}

void OrgApacheLuceneCodecsCompressingLZ4_encodeLiteralsWithByteArray_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(IOSByteArray *bytes, jint token, jint anchor, jint literalLen, OrgApacheLuceneStoreDataOutput *outArg) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) token];
  if (literalLen >= (jint) 0x0F) {
    OrgApacheLuceneCodecsCompressingLZ4_encodeLenWithInt_withOrgApacheLuceneStoreDataOutput_(literalLen - (jint) 0x0F, outArg);
  }
  [outArg writeBytesWithByteArray:bytes withInt:anchor withInt:literalLen];
}

void OrgApacheLuceneCodecsCompressingLZ4_encodeLastLiteralsWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(IOSByteArray *bytes, jint anchor, jint literalLen, OrgApacheLuceneStoreDataOutput *outArg) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  jint token = JreLShift32(JavaLangMath_minWithInt_withInt_(literalLen, (jint) 0x0F), 4);
  OrgApacheLuceneCodecsCompressingLZ4_encodeLiteralsWithByteArray_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(bytes, token, anchor, literalLen, outArg);
}

void OrgApacheLuceneCodecsCompressingLZ4_encodeSequenceWithByteArray_withInt_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(IOSByteArray *bytes, jint anchor, jint matchRef, jint matchOff, jint matchLen, OrgApacheLuceneStoreDataOutput *outArg) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  jint literalLen = matchOff - anchor;
  JreAssert(matchLen >= 4, @"org/apache/lucene/codecs/compressing/LZ4.java:167 condition failed: assert matchLen >= 4;");
  jint token = (JreLShift32(JavaLangMath_minWithInt_withInt_(literalLen, (jint) 0x0F), 4)) | JavaLangMath_minWithInt_withInt_(matchLen - 4, (jint) 0x0F);
  OrgApacheLuceneCodecsCompressingLZ4_encodeLiteralsWithByteArray_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(bytes, token, anchor, literalLen, outArg);
  jint matchDec = matchOff - matchRef;
  JreAssert(matchDec > 0 && matchDec < JreLShift32(1, 16), @"org/apache/lucene/codecs/compressing/LZ4.java:174 condition failed: assert matchDec > 0 && matchDec < 1 << 16;");
  [((OrgApacheLuceneStoreDataOutput *) nil_chk(outArg)) writeByteWithByte:(jbyte) matchDec];
  [outArg writeByteWithByte:(jbyte) (JreURShift32(matchDec, 8))];
  if (matchLen >= OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH + (jint) 0x0F) {
    OrgApacheLuceneCodecsCompressingLZ4_encodeLenWithInt_withOrgApacheLuceneStoreDataOutput_(matchLen - (jint) 0x0F - OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, outArg);
  }
}

void OrgApacheLuceneCodecsCompressingLZ4_compressWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneCodecsCompressingLZ4_HashTable_(IOSByteArray *bytes, jint off, jint len, OrgApacheLuceneStoreDataOutput *outArg, OrgApacheLuceneCodecsCompressingLZ4_HashTable *ht) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  jint base = off;
  jint end = off + len;
  jint anchor = off++;
  if (len > OrgApacheLuceneCodecsCompressingLZ4_LAST_LITERALS + OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH) {
    jint limit = end - OrgApacheLuceneCodecsCompressingLZ4_LAST_LITERALS;
    jint matchLimit = limit - OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH;
    [((OrgApacheLuceneCodecsCompressingLZ4_HashTable *) nil_chk(ht)) resetWithInt:len];
    jint hashLog = ht->hashLog_;
    OrgApacheLuceneUtilPackedPackedInts_Mutable *hashTable = ht->hashTable_;
    while (off <= limit) {
      jint ref;
      while (true) {
        if (off >= matchLimit) {
          goto break_main;
        }
        jint v = OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(bytes, off);
        jint h = OrgApacheLuceneCodecsCompressingLZ4_hash__WithInt_withInt_(v, hashLog);
        ref = base + (jint) [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(hashTable)) getWithInt:h];
        JreAssert(OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(off - base) <= [hashTable getBitsPerValue], @"org/apache/lucene/codecs/compressing/LZ4.java:232 condition failed: assert PackedInts.bitsRequired(off - base) <= hashTable.getBitsPerValue();");
        [hashTable setWithInt:h withLong:off - base];
        if (off - ref < OrgApacheLuceneCodecsCompressingLZ4_MAX_DISTANCE && OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(bytes, ref) == v) {
          break;
        }
        ++off;
      }
      jint matchLen = OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH + OrgApacheLuceneCodecsCompressingLZ4_commonBytesWithByteArray_withInt_withInt_withInt_(bytes, ref + OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, off + OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, limit);
      OrgApacheLuceneCodecsCompressingLZ4_encodeSequenceWithByteArray_withInt_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(bytes, anchor, ref, off, matchLen, outArg);
      off += matchLen;
      anchor = off;
    }
    break_main: ;
  }
  jint literalLen = end - anchor;
  JreAssert(literalLen >= OrgApacheLuceneCodecsCompressingLZ4_LAST_LITERALS || literalLen == len, @"org/apache/lucene/codecs/compressing/LZ4.java:251 condition failed: assert literalLen >= LAST_LITERALS || literalLen == len;");
  OrgApacheLuceneCodecsCompressingLZ4_encodeLastLiteralsWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(bytes, anchor, end - anchor, outArg);
}

void OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(OrgApacheLuceneCodecsCompressingLZ4_Match *m1, OrgApacheLuceneCodecsCompressingLZ4_Match *m2) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  ((OrgApacheLuceneCodecsCompressingLZ4_Match *) nil_chk(m2))->len_ = ((OrgApacheLuceneCodecsCompressingLZ4_Match *) nil_chk(m1))->len_;
  m2->start_ = m1->start_;
  m2->ref_ = m1->ref_;
}

void OrgApacheLuceneCodecsCompressingLZ4_compressHCWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_withOrgApacheLuceneCodecsCompressingLZ4_HCHashTable_(IOSByteArray *src, jint srcOff, jint srcLen, OrgApacheLuceneStoreDataOutput *outArg, OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *ht) {
  OrgApacheLuceneCodecsCompressingLZ4_initialize();
  jint srcEnd = srcOff + srcLen;
  jint matchLimit = srcEnd - OrgApacheLuceneCodecsCompressingLZ4_LAST_LITERALS;
  jint mfLimit = matchLimit - OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH;
  jint sOff = srcOff;
  jint anchor = sOff++;
  OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_resetWithInt_(nil_chk(ht), srcOff);
  OrgApacheLuceneCodecsCompressingLZ4_Match *match0 = create_OrgApacheLuceneCodecsCompressingLZ4_Match_init();
  OrgApacheLuceneCodecsCompressingLZ4_Match *match1 = create_OrgApacheLuceneCodecsCompressingLZ4_Match_init();
  OrgApacheLuceneCodecsCompressingLZ4_Match *match2 = create_OrgApacheLuceneCodecsCompressingLZ4_Match_init();
  OrgApacheLuceneCodecsCompressingLZ4_Match *match3 = create_OrgApacheLuceneCodecsCompressingLZ4_Match_init();
  while (sOff <= mfLimit) {
    {
      if (![ht insertAndFindBestMatchWithByteArray:src withInt:sOff withInt:matchLimit withOrgApacheLuceneCodecsCompressingLZ4_Match:match1]) {
        ++sOff;
        continue;
      }
      OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(match1, match0);
      while (true) {
        {
          JreAssert(match1->start_ >= anchor, @"org/apache/lucene/codecs/compressing/LZ4.java:440 condition failed: assert match1.start >= anchor;");
          if ([match1 end] >= mfLimit || ![ht insertAndFindWiderMatchWithByteArray:src withInt:[match1 end] - 2 withInt:match1->start_ + 1 withInt:matchLimit withInt:match1->len_ withOrgApacheLuceneCodecsCompressingLZ4_Match:match2]) {
            OrgApacheLuceneCodecsCompressingLZ4_encodeSequenceWithByteArray_withInt_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(src, anchor, match1->ref_, match1->start_, match1->len_, outArg);
            anchor = sOff = [match1 end];
            goto continue_main;
          }
          if (match0->start_ < match1->start_) {
            if (match2->start_ < match1->start_ + match0->len_) {
              OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(match0, match1);
            }
          }
          JreAssert(match2->start_ > match1->start_, @"org/apache/lucene/codecs/compressing/LZ4.java:454 condition failed: assert match2.start > match1.start;");
          if (match2->start_ - match1->start_ < 3) {
            OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(match2, match1);
            goto continue_search2;
          }
          while (true) {
            {
              if (match2->start_ - match1->start_ < OrgApacheLuceneCodecsCompressingLZ4_OPTIMAL_ML) {
                jint newMatchLen = match1->len_;
                if (newMatchLen > OrgApacheLuceneCodecsCompressingLZ4_OPTIMAL_ML) {
                  newMatchLen = OrgApacheLuceneCodecsCompressingLZ4_OPTIMAL_ML;
                }
                if (match1->start_ + newMatchLen > [match2 end] - OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH) {
                  newMatchLen = match2->start_ - match1->start_ + match2->len_ - OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH;
                }
                jint correction = newMatchLen - (match2->start_ - match1->start_);
                if (correction > 0) {
                  [match2 fixWithInt:correction];
                }
              }
              if (match2->start_ + match2->len_ >= mfLimit || ![ht insertAndFindWiderMatchWithByteArray:src withInt:[match2 end] - 3 withInt:match2->start_ withInt:matchLimit withInt:match2->len_ withOrgApacheLuceneCodecsCompressingLZ4_Match:match3]) {
                if (match2->start_ < [match1 end]) {
                  match1->len_ = match2->start_ - match1->start_;
                }
                OrgApacheLuceneCodecsCompressingLZ4_encodeSequenceWithByteArray_withInt_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(src, anchor, match1->ref_, match1->start_, match1->len_, outArg);
                anchor = sOff = [match1 end];
                OrgApacheLuceneCodecsCompressingLZ4_encodeSequenceWithByteArray_withInt_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(src, anchor, match2->ref_, match2->start_, match2->len_, outArg);
                anchor = sOff = [match2 end];
                goto continue_main;
              }
              if (match3->start_ < [match1 end] + 3) {
                if (match3->start_ >= [match1 end]) {
                  if (match2->start_ < [match1 end]) {
                    jint correction = [match1 end] - match2->start_;
                    [match2 fixWithInt:correction];
                    if (match2->len_ < OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH) {
                      OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(match3, match2);
                    }
                  }
                  OrgApacheLuceneCodecsCompressingLZ4_encodeSequenceWithByteArray_withInt_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(src, anchor, match1->ref_, match1->start_, match1->len_, outArg);
                  anchor = sOff = [match1 end];
                  OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(match3, match1);
                  OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(match2, match0);
                  goto continue_search2;
                }
                OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(match3, match2);
                goto continue_search3;
              }
              if (match2->start_ < [match1 end]) {
                if (match2->start_ - match1->start_ < (jint) 0x0F) {
                  if (match1->len_ > OrgApacheLuceneCodecsCompressingLZ4_OPTIMAL_ML) {
                    match1->len_ = OrgApacheLuceneCodecsCompressingLZ4_OPTIMAL_ML;
                  }
                  if ([match1 end] > [match2 end] - OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH) {
                    match1->len_ = [match2 end] - match1->start_ - OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH;
                  }
                  jint correction = [match1 end] - match2->start_;
                  [match2 fixWithInt:correction];
                }
                else {
                  match1->len_ = match2->start_ - match1->start_;
                }
              }
              OrgApacheLuceneCodecsCompressingLZ4_encodeSequenceWithByteArray_withInt_withInt_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(src, anchor, match1->ref_, match1->start_, match1->len_, outArg);
              anchor = sOff = [match1 end];
              OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(match2, match1);
              OrgApacheLuceneCodecsCompressingLZ4_copyToWithOrgApacheLuceneCodecsCompressingLZ4_Match_withOrgApacheLuceneCodecsCompressingLZ4_Match_(match3, match2);
              goto continue_search3;
            }
            continue_search3: ;
          }
        }
        continue_search2: ;
      }
    }
    continue_main: ;
  }
  OrgApacheLuceneCodecsCompressingLZ4_encodeLastLiteralsWithByteArray_withInt_withInt_withOrgApacheLuceneStoreDataOutput_(src, anchor, srcEnd - anchor, outArg);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingLZ4)

@implementation OrgApacheLuceneCodecsCompressingLZ4_HashTable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneCodecsCompressingLZ4_HashTable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)resetWithInt:(jint)len {
  jint bitsPerOffset = OrgApacheLuceneUtilPackedPackedInts_bitsRequiredWithLong_(len - OrgApacheLuceneCodecsCompressingLZ4_LAST_LITERALS);
  jint bitsPerOffsetLog = 32 - JavaLangInteger_numberOfLeadingZerosWithInt_(bitsPerOffset - 1);
  hashLog_ = OrgApacheLuceneCodecsCompressingLZ4_MEMORY_USAGE + 3 - bitsPerOffsetLog;
  if (hashTable_ == nil || [hashTable_ size] < JreLShift32(1, hashLog_) || [((OrgApacheLuceneUtilPackedPackedInts_Mutable *) nil_chk(hashTable_)) getBitsPerValue] < bitsPerOffset) {
    JreStrongAssign(&hashTable_, OrgApacheLuceneUtilPackedPackedInts_getMutableWithInt_withInt_withFloat_(JreLShift32(1, hashLog_), bitsPerOffset, OrgApacheLuceneUtilPackedPackedInts_DEFAULT));
  }
  else {
    [hashTable_ clear];
  }
}

- (void)dealloc {
  RELEASE_(hashTable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(resetWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hashLog_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashTable_", "LOrgApacheLuceneUtilPackedPackedInts_Mutable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "reset", "I", "LOrgApacheLuceneCodecsCompressingLZ4;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingLZ4_HashTable = { "HashTable", "org.apache.lucene.codecs.compressing", ptrTable, methods, fields, 7, 0x18, 2, 2, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsCompressingLZ4_HashTable;
}

@end

void OrgApacheLuceneCodecsCompressingLZ4_HashTable_init(OrgApacheLuceneCodecsCompressingLZ4_HashTable *self) {
  NSObject_init(self);
}

OrgApacheLuceneCodecsCompressingLZ4_HashTable *new_OrgApacheLuceneCodecsCompressingLZ4_HashTable_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingLZ4_HashTable, init)
}

OrgApacheLuceneCodecsCompressingLZ4_HashTable *create_OrgApacheLuceneCodecsCompressingLZ4_HashTable_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingLZ4_HashTable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingLZ4_HashTable)

@implementation OrgApacheLuceneCodecsCompressingLZ4_Match

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneCodecsCompressingLZ4_Match_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)fixWithInt:(jint)correction {
  start_ += correction;
  ref_ += correction;
  len_ -= correction;
}

- (jint)end {
  return start_ + len_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fixWithInt:);
  methods[2].selector = @selector(end);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "start_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "ref_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "len_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "fix", "I", "LOrgApacheLuceneCodecsCompressingLZ4;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingLZ4_Match = { "Match", "org.apache.lucene.codecs.compressing", ptrTable, methods, fields, 7, 0xa, 3, 3, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsCompressingLZ4_Match;
}

@end

void OrgApacheLuceneCodecsCompressingLZ4_Match_init(OrgApacheLuceneCodecsCompressingLZ4_Match *self) {
  NSObject_init(self);
}

OrgApacheLuceneCodecsCompressingLZ4_Match *new_OrgApacheLuceneCodecsCompressingLZ4_Match_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingLZ4_Match, init)
}

OrgApacheLuceneCodecsCompressingLZ4_Match *create_OrgApacheLuceneCodecsCompressingLZ4_Match_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingLZ4_Match, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingLZ4_Match)

@implementation OrgApacheLuceneCodecsCompressingLZ4_HCHashTable

+ (jint)MAX_ATTEMPTS {
  return OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MAX_ATTEMPTS;
}

+ (jint)MASK {
  return OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MASK;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)resetWithInt:(jint)base {
  OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_resetWithInt_(self, base);
}

- (jint)hashPointerWithByteArray:(IOSByteArray *)bytes
                         withInt:(jint)off {
  return OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_hashPointerWithByteArray_withInt_(self, bytes, off);
}

- (jint)nextWithInt:(jint)off {
  return OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_nextWithInt_(self, off);
}

- (void)addHashWithByteArray:(IOSByteArray *)bytes
                     withInt:(jint)off {
  OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_addHashWithByteArray_withInt_(self, bytes, off);
}

- (void)insertWithInt:(jint)off
        withByteArray:(IOSByteArray *)bytes {
  for (; nextToUpdate_ < off; ++nextToUpdate_) {
    OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_addHashWithByteArray_withInt_(self, bytes, nextToUpdate_);
  }
}

- (jboolean)insertAndFindBestMatchWithByteArray:(IOSByteArray *)buf
                                        withInt:(jint)off
                                        withInt:(jint)matchLimit
  withOrgApacheLuceneCodecsCompressingLZ4_Match:(OrgApacheLuceneCodecsCompressingLZ4_Match *)match {
  ((OrgApacheLuceneCodecsCompressingLZ4_Match *) nil_chk(match))->start_ = off;
  match->len_ = 0;
  jint delta = 0;
  jint repl = 0;
  [self insertWithInt:off withByteArray:buf];
  jint ref = OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_hashPointerWithByteArray_withInt_(self, buf, off);
  if (ref >= off - 4 && ref <= off && ref >= base_) {
    if (OrgApacheLuceneCodecsCompressingLZ4_readIntEqualsWithByteArray_withInt_withInt_(buf, ref, off)) {
      delta = off - ref;
      repl = match->len_ = OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH + OrgApacheLuceneCodecsCompressingLZ4_commonBytesWithByteArray_withInt_withInt_withInt_(buf, ref + OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, off + OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, matchLimit);
      match->ref_ = ref;
    }
    ref = OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_nextWithInt_(self, ref);
  }
  for (jint i = 0; i < OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MAX_ATTEMPTS; ++i) {
    if (ref < JavaLangMath_maxWithInt_withInt_(base_, off - OrgApacheLuceneCodecsCompressingLZ4_MAX_DISTANCE + 1) || ref > off) {
      break;
    }
    if (IOSByteArray_Get(nil_chk(buf), ref + match->len_) == IOSByteArray_Get(buf, off + match->len_) && OrgApacheLuceneCodecsCompressingLZ4_readIntEqualsWithByteArray_withInt_withInt_(buf, ref, off)) {
      jint matchLen = OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH + OrgApacheLuceneCodecsCompressingLZ4_commonBytesWithByteArray_withInt_withInt_withInt_(buf, ref + OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, off + OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, matchLimit);
      if (matchLen > match->len_) {
        match->ref_ = ref;
        match->len_ = matchLen;
      }
    }
    ref = OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_nextWithInt_(self, ref);
  }
  if (repl != 0) {
    jint ptr = off;
    jint end = off + repl - (OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH - 1);
    while (ptr < end - delta) {
      *IOSShortArray_GetRef(nil_chk(chainTable_), ptr & OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MASK) = (jshort) delta;
      ++ptr;
    }
    do {
      *IOSShortArray_GetRef(nil_chk(chainTable_), ptr & OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MASK) = (jshort) delta;
      *IOSIntArray_GetRef(nil_chk(hashTable_), OrgApacheLuceneCodecsCompressingLZ4_hashHCWithInt_(OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(buf, ptr))) = ptr;
      ++ptr;
    }
    while (ptr < end);
    nextToUpdate_ = end;
  }
  return match->len_ != 0;
}

- (jboolean)insertAndFindWiderMatchWithByteArray:(IOSByteArray *)buf
                                         withInt:(jint)off
                                         withInt:(jint)startLimit
                                         withInt:(jint)matchLimit
                                         withInt:(jint)minLen
   withOrgApacheLuceneCodecsCompressingLZ4_Match:(OrgApacheLuceneCodecsCompressingLZ4_Match *)match {
  ((OrgApacheLuceneCodecsCompressingLZ4_Match *) nil_chk(match))->len_ = minLen;
  [self insertWithInt:off withByteArray:buf];
  jint delta = off - startLimit;
  jint ref = OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_hashPointerWithByteArray_withInt_(self, buf, off);
  for (jint i = 0; i < OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MAX_ATTEMPTS; ++i) {
    if (ref < JavaLangMath_maxWithInt_withInt_(base_, off - OrgApacheLuceneCodecsCompressingLZ4_MAX_DISTANCE + 1) || ref > off) {
      break;
    }
    if (IOSByteArray_Get(nil_chk(buf), ref - delta + match->len_) == IOSByteArray_Get(buf, startLimit + match->len_) && OrgApacheLuceneCodecsCompressingLZ4_readIntEqualsWithByteArray_withInt_withInt_(buf, ref, off)) {
      jint matchLenForward = OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH + OrgApacheLuceneCodecsCompressingLZ4_commonBytesWithByteArray_withInt_withInt_withInt_(buf, ref + OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, off + OrgApacheLuceneCodecsCompressingLZ4_MIN_MATCH, matchLimit);
      jint matchLenBackward = OrgApacheLuceneCodecsCompressingLZ4_commonBytesBackwardWithByteArray_withInt_withInt_withInt_withInt_(buf, ref, off, base_, startLimit);
      jint matchLen = matchLenBackward + matchLenForward;
      if (matchLen > match->len_) {
        match->len_ = matchLen;
        match->ref_ = ref - matchLenBackward;
        match->start_ = off - matchLenBackward;
      }
    }
    ref = OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_nextWithInt_(self, ref);
  }
  return match->len_ > minLen;
}

- (void)dealloc {
  RELEASE_(hashTable_);
  RELEASE_(chainTable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(resetWithInt:);
  methods[2].selector = @selector(hashPointerWithByteArray:withInt:);
  methods[3].selector = @selector(nextWithInt:);
  methods[4].selector = @selector(addHashWithByteArray:withInt:);
  methods[5].selector = @selector(insertWithInt:withByteArray:);
  methods[6].selector = @selector(insertAndFindBestMatchWithByteArray:withInt:withInt:withOrgApacheLuceneCodecsCompressingLZ4_Match:);
  methods[7].selector = @selector(insertAndFindWiderMatchWithByteArray:withInt:withInt:withInt:withInt:withOrgApacheLuceneCodecsCompressingLZ4_Match:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_ATTEMPTS", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MAX_ATTEMPTS, 0x18, -1, -1, -1, -1 },
    { "MASK", "I", .constantValue.asInt = OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MASK, 0x18, -1, -1, -1, -1 },
    { "nextToUpdate_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "base_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashTable_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "chainTable_", "[S", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "reset", "I", "hashPointer", "[BI", "next", "addHash", "insert", "I[B", "insertAndFindBestMatch", "[BIILOrgApacheLuceneCodecsCompressingLZ4_Match;", "insertAndFindWiderMatch", "[BIIIILOrgApacheLuceneCodecsCompressingLZ4_Match;", "LOrgApacheLuceneCodecsCompressingLZ4;" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingLZ4_HCHashTable = { "HCHashTable", "org.apache.lucene.codecs.compressing", ptrTable, methods, fields, 7, 0x18, 8, 6, 12, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsCompressingLZ4_HCHashTable;
}

@end

void OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_init(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->hashTable_, [IOSIntArray newArrayWithLength:OrgApacheLuceneCodecsCompressingLZ4_HASH_TABLE_SIZE_HC]);
  JreStrongAssignAndConsume(&self->chainTable_, [IOSShortArray newArrayWithLength:OrgApacheLuceneCodecsCompressingLZ4_MAX_DISTANCE]);
}

OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *new_OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable, init)
}

OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *create_OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable, init)
}

void OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_resetWithInt_(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self, jint base) {
  self->base_ = base;
  self->nextToUpdate_ = base;
  JavaUtilArrays_fillWithIntArray_withInt_(self->hashTable_, -1);
  JavaUtilArrays_fillWithShortArray_withShort_(self->chainTable_, (jshort) 0);
}

jint OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_hashPointerWithByteArray_withInt_(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self, IOSByteArray *bytes, jint off) {
  jint v = OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(bytes, off);
  jint h = OrgApacheLuceneCodecsCompressingLZ4_hashHCWithInt_(v);
  return IOSIntArray_Get(nil_chk(self->hashTable_), h);
}

jint OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_nextWithInt_(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self, jint off) {
  return off - (IOSShortArray_Get(nil_chk(self->chainTable_), off & OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MASK) & (jint) 0xFFFF);
}

void OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_addHashWithByteArray_withInt_(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable *self, IOSByteArray *bytes, jint off) {
  jint v = OrgApacheLuceneCodecsCompressingLZ4_readIntWithByteArray_withInt_(bytes, off);
  jint h = OrgApacheLuceneCodecsCompressingLZ4_hashHCWithInt_(v);
  jint delta = off - IOSIntArray_Get(nil_chk(self->hashTable_), h);
  JreAssert(delta > 0, JavaLangInteger_valueOfWithInt_(delta));
  if (delta >= OrgApacheLuceneCodecsCompressingLZ4_MAX_DISTANCE) {
    delta = OrgApacheLuceneCodecsCompressingLZ4_MAX_DISTANCE - 1;
  }
  *IOSShortArray_GetRef(nil_chk(self->chainTable_), off & OrgApacheLuceneCodecsCompressingLZ4_HCHashTable_MASK) = (jshort) delta;
  *IOSIntArray_GetRef(self->hashTable_, h) = off;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingLZ4_HCHashTable)
