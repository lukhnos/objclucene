//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat () {
 @public
  NSString *formatName_;
  NSString *segmentSuffix_;
  OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode_;
  jint chunkSize_;
  jint maxDocsPerChunk_;
  jint blockSize_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat, formatName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat, segmentSuffix_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat, compressionMode_, OrgApacheLuceneCodecsCompressingCompressionMode *)

@implementation OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat

- (instancetype)initWithNSString:(NSString *)formatName
withOrgApacheLuceneCodecsCompressingCompressionMode:(OrgApacheLuceneCodecsCompressingCompressionMode *)compressionMode
                         withInt:(jint)chunkSize
                         withInt:(jint)maxDocsPerChunk
                         withInt:(jint)blockSize {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat_initWithNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(self, formatName, compressionMode, chunkSize, maxDocsPerChunk, blockSize);
  return self;
}

- (instancetype)initWithNSString:(NSString *)formatName
                    withNSString:(NSString *)segmentSuffix
withOrgApacheLuceneCodecsCompressingCompressionMode:(OrgApacheLuceneCodecsCompressingCompressionMode *)compressionMode
                         withInt:(jint)chunkSize
                         withInt:(jint)maxDocsPerChunk
                         withInt:(jint)blockSize {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat_initWithNSString_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(self, formatName, segmentSuffix, compressionMode, chunkSize, maxDocsPerChunk, blockSize);
  return self;
}

- (OrgApacheLuceneCodecsStoredFieldsReader *)fieldsReaderWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                                                       withOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si
                                                        withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fn
                                                         withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  return create_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_(directory, si, segmentSuffix_, fn, context, formatName_, compressionMode_);
}

- (OrgApacheLuceneCodecsStoredFieldsWriter *)fieldsWriterWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                                                       withOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)si
                                                         withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  return create_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withNSString_withOrgApacheLuceneStoreIOContext_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(directory, si, segmentSuffix_, context, formatName_, compressionMode_, chunkSize_, maxDocsPerChunk_, blockSize_);
}

- (NSString *)description {
  return JreStrcat("$$@$I$I$IC", [[self java_getClass] getSimpleName], @"(compressionMode=", compressionMode_, @", chunkSize=", chunkSize_, @", maxDocsPerChunk=", maxDocsPerChunk_, @", blockSize=", blockSize_, ')');
}

- (void)dealloc {
  RELEASE_(formatName_);
  RELEASE_(segmentSuffix_);
  RELEASE_(compressionMode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsStoredFieldsReader;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneCodecsStoredFieldsWriter;", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withOrgApacheLuceneCodecsCompressingCompressionMode:withInt:withInt:withInt:);
  methods[1].selector = @selector(initWithNSString:withNSString:withOrgApacheLuceneCodecsCompressingCompressionMode:withInt:withInt:withInt:);
  methods[2].selector = @selector(fieldsReaderWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfo:withOrgApacheLuceneIndexFieldInfos:withOrgApacheLuceneStoreIOContext:);
  methods[3].selector = @selector(fieldsWriterWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfo:withOrgApacheLuceneStoreIOContext:);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "formatName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "segmentSuffix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "compressionMode_", "LOrgApacheLuceneCodecsCompressingCompressionMode;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "chunkSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxDocsPerChunk_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "blockSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgApacheLuceneCodecsCompressingCompressionMode;III", "LNSString;LNSString;LOrgApacheLuceneCodecsCompressingCompressionMode;III", "fieldsReader", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexSegmentInfo;LOrgApacheLuceneIndexFieldInfos;LOrgApacheLuceneStoreIOContext;", "LJavaIoIOException;", "fieldsWriter", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexSegmentInfo;LOrgApacheLuceneStoreIOContext;", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat = { "CompressingStoredFieldsFormat", "org.apache.lucene.codecs.compressing", ptrTable, methods, fields, 7, 0x1, 5, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat;
}

@end

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat_initWithNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat *self, NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint maxDocsPerChunk, jint blockSize) {
  OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat_initWithNSString_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(self, formatName, @"", compressionMode, chunkSize, maxDocsPerChunk, blockSize);
}

OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat *new_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat_initWithNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint maxDocsPerChunk, jint blockSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat, initWithNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_, formatName, compressionMode, chunkSize, maxDocsPerChunk, blockSize)
}

OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat *create_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat_initWithNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(NSString *formatName, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint maxDocsPerChunk, jint blockSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat, initWithNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_, formatName, compressionMode, chunkSize, maxDocsPerChunk, blockSize)
}

void OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat_initWithNSString_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat *self, NSString *formatName, NSString *segmentSuffix, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint maxDocsPerChunk, jint blockSize) {
  OrgApacheLuceneCodecsStoredFieldsFormat_init(self);
  JreStrongAssign(&self->formatName_, formatName);
  JreStrongAssign(&self->segmentSuffix_, segmentSuffix);
  JreStrongAssign(&self->compressionMode_, compressionMode);
  if (chunkSize < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"chunkSize must be >= 1");
  }
  self->chunkSize_ = chunkSize;
  if (maxDocsPerChunk < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxDocsPerChunk must be >= 1");
  }
  self->maxDocsPerChunk_ = maxDocsPerChunk;
  if (blockSize < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"blockSize must be >= 1");
  }
  self->blockSize_ = blockSize;
}

OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat *new_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat_initWithNSString_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(NSString *formatName, NSString *segmentSuffix, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint maxDocsPerChunk, jint blockSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat, initWithNSString_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_, formatName, segmentSuffix, compressionMode, chunkSize, maxDocsPerChunk, blockSize)
}

OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat *create_OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat_initWithNSString_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_(NSString *formatName, NSString *segmentSuffix, OrgApacheLuceneCodecsCompressingCompressionMode *compressionMode, jint chunkSize, jint maxDocsPerChunk, jint blockSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat, initWithNSString_withNSString_withOrgApacheLuceneCodecsCompressingCompressionMode_withInt_withInt_withInt_, formatName, segmentSuffix, compressionMode, chunkSize, maxDocsPerChunk, blockSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneCodecsCompressingCompressingStoredFieldsFormat)
