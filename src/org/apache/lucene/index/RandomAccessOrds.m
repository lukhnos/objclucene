//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/RandomAccessOrds.java
//

#include "J2ObjC_source.h"
#include "org/apache/lucene/index/RandomAccessOrds.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/RandomAccessOrds must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneIndexRandomAccessOrds

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexRandomAccessOrds_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)ordAtWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)cardinality {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ordAtWithInt:);
  methods[2].selector = @selector(cardinality);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "ordAt", "I" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexRandomAccessOrds = { "RandomAccessOrds", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x401, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexRandomAccessOrds;
}

@end

void OrgApacheLuceneIndexRandomAccessOrds_init(OrgApacheLuceneIndexRandomAccessOrds *self) {
  OrgApacheLuceneIndexSortedSetDocValues_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexRandomAccessOrds)
