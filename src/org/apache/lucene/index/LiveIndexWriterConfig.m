//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/LiveIndexWriterConfig.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/DocumentsWriterPerThreadPool.h"
#include "org/apache/lucene/index/FlushByRamOrCountsPolicy.h"
#include "org/apache/lucene/index/FlushPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/KeepOnlyLastCommitDeletionPolicy.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/TieredMergePolicy.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/util/InfoStream.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/LiveIndexWriterConfig must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexLiveIndexWriterConfig () {
 @public
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  volatile_jint maxBufferedDocs_;
  volatile_jdouble ramBufferSizeMB_;
  volatile_jint maxBufferedDeleteTerms_;
  volatile_id mergedSegmentWarmer_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexLiveIndexWriterConfig, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexLiveIndexWriterConfig, mergedSegmentWarmer_, OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexLiveIndexWriterConfig__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexLiveIndexWriterConfig__Annotations$1(void);

@implementation OrgApacheLuceneIndexLiveIndexWriterConfig

- (instancetype)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  OrgApacheLuceneIndexLiveIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(self, analyzer);
  return self;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  return analyzer_;
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setMaxBufferedDeleteTermsWithInt:(jint)maxBufferedDeleteTerms {
  if (maxBufferedDeleteTerms != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && maxBufferedDeleteTerms < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxBufferedDeleteTerms must at least be 1 when enabled");
  }
  JreAssignVolatileInt(&self->maxBufferedDeleteTerms_, maxBufferedDeleteTerms);
  return self;
}

- (jint)getMaxBufferedDeleteTerms {
  return JreLoadVolatileInt(&maxBufferedDeleteTerms_);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setRAMBufferSizeMBWithDouble:(jdouble)ramBufferSizeMB {
  @synchronized(self) {
    if (ramBufferSizeMB != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && ramBufferSizeMB <= 0.0) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"ramBufferSize should be > 0.0 MB when enabled");
    }
    if (ramBufferSizeMB == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && JreLoadVolatileInt(&maxBufferedDocs_) == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"at least one of ramBufferSize and maxBufferedDocs must be enabled");
    }
    JreAssignVolatileDouble(&self->ramBufferSizeMB_, ramBufferSizeMB);
    return JreRetainedLocalValue(self);
  }
}

- (jdouble)getRAMBufferSizeMB {
  return JreLoadVolatileDouble(&ramBufferSizeMB_);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setMaxBufferedDocsWithInt:(jint)maxBufferedDocs {
  @synchronized(self) {
    if (maxBufferedDocs != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && maxBufferedDocs < 2) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxBufferedDocs must at least be 2 when enabled");
    }
    if (maxBufferedDocs == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && JreLoadVolatileDouble(&ramBufferSizeMB_) == OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"at least one of ramBufferSize and maxBufferedDocs must be enabled");
    }
    JreAssignVolatileInt(&self->maxBufferedDocs_, maxBufferedDocs);
    return JreRetainedLocalValue(self);
  }
}

- (jint)getMaxBufferedDocs {
  return JreLoadVolatileInt(&maxBufferedDocs_);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setMergePolicyWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy {
  if (mergePolicy == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"mergePolicy must not be null");
  }
  JreVolatileStrongAssign(&self->mergePolicy_, mergePolicy);
  return self;
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setMergedSegmentWarmerWithOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer:(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)mergeSegmentWarmer {
  JreVolatileStrongAssign(&self->mergedSegmentWarmer_, mergeSegmentWarmer);
  return self;
}

- (OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *)getMergedSegmentWarmer {
  return JreLoadVolatileId(&mergedSegmentWarmer_);
}

- (OrgApacheLuceneIndexIndexWriterConfig_OpenMode *)getOpenMode {
  return JreLoadVolatileId(&openMode_);
}

- (OrgApacheLuceneIndexIndexDeletionPolicy *)getIndexDeletionPolicy {
  return JreLoadVolatileId(&delPolicy_);
}

- (OrgApacheLuceneIndexIndexCommit *)getIndexCommit {
  return JreLoadVolatileId(&commit_);
}

- (OrgApacheLuceneSearchSimilaritiesSimilarity *)getSimilarity {
  return JreLoadVolatileId(&similarity_);
}

- (OrgApacheLuceneIndexMergeScheduler *)getMergeScheduler {
  return JreLoadVolatileId(&mergeScheduler_);
}

- (jlong)getWriteLockTimeout {
  return JreLoadVolatileLong(&writeLockTimeout_);
}

- (OrgApacheLuceneCodecsCodec *)getCodec {
  return JreLoadVolatileId(&codec_);
}

- (OrgApacheLuceneIndexMergePolicy *)getMergePolicy {
  return JreLoadVolatileId(&mergePolicy_);
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool *)getIndexerThreadPool {
  return JreLoadVolatileId(&indexerThreadPool_);
}

- (jboolean)getReaderPooling {
  return JreLoadVolatileBoolean(&readerPooling_);
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain *)getIndexingChain {
  return JreLoadVolatileId(&indexingChain_);
}

- (jint)getRAMPerThreadHardLimitMB {
  return JreLoadVolatileInt(&perThreadHardLimitMB_);
}

- (OrgApacheLuceneIndexFlushPolicy *)getFlushPolicy {
  return JreLoadVolatileId(&flushPolicy_);
}

- (OrgApacheLuceneUtilInfoStream *)getInfoStream {
  return JreLoadVolatileId(&infoStream_);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)setUseCompoundFileWithBoolean:(jboolean)useCompoundFile {
  JreAssignVolatileBoolean(&self->useCompoundFile_, useCompoundFile);
  return self;
}

- (jboolean)getUseCompoundFile {
  return JreLoadVolatileBoolean(&useCompoundFile_);
}

- (jboolean)getCommitOnClose {
  return commitOnClose_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"analyzer="])) appendWithNSString:analyzer_ == nil ? @"null" : [[analyzer_ java_getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"ramBufferSizeMB="])) appendWithDouble:[self getRAMBufferSizeMB]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxBufferedDocs="])) appendWithInt:[self getMaxBufferedDocs]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxBufferedDeleteTerms="])) appendWithInt:[self getMaxBufferedDeleteTerms]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergedSegmentWarmer="])) appendWithId:[self getMergedSegmentWarmer]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"delPolicy="])) appendWithNSString:[[((OrgApacheLuceneIndexIndexDeletionPolicy *) nil_chk([self getIndexDeletionPolicy])) java_getClass] getName]])) appendWithNSString:@"\n"];
  OrgApacheLuceneIndexIndexCommit *commit = JreRetainedLocalValue([self getIndexCommit]);
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"commit="])) appendWithId:commit == nil ? @"null" : (id) commit])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"openMode="])) appendWithId:[self getOpenMode]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"similarity="])) appendWithNSString:[[((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk([self getSimilarity])) java_getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergeScheduler="])) appendWithId:[self getMergeScheduler]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"default WRITE_LOCK_TIMEOUT="])) appendWithLong:OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"writeLockTimeout="])) appendWithLong:[self getWriteLockTimeout]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"codec="])) appendWithId:[self getCodec]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"infoStream="])) appendWithNSString:[[((OrgApacheLuceneUtilInfoStream *) nil_chk([self getInfoStream])) java_getClass] getName]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergePolicy="])) appendWithId:[self getMergePolicy]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"indexerThreadPool="])) appendWithId:[self getIndexerThreadPool]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"readerPooling="])) appendWithBoolean:[self getReaderPooling]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"perThreadHardLimitMB="])) appendWithInt:[self getRAMPerThreadHardLimitMB]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"useCompoundFile="])) appendWithBoolean:[self getUseCompoundFile]])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"commitOnClose="])) appendWithBoolean:[self getCommitOnClose]])) appendWithNSString:@"\n"];
  return [sb description];
}

- (void)__javaClone:(OrgApacheLuceneIndexLiveIndexWriterConfig *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&mergedSegmentWarmer_, &original->mergedSegmentWarmer_);
  JreCloneVolatileStrong(&delPolicy_, &original->delPolicy_);
  JreCloneVolatileStrong(&commit_, &original->commit_);
  JreCloneVolatileStrong(&openMode_, &original->openMode_);
  JreCloneVolatileStrong(&similarity_, &original->similarity_);
  JreCloneVolatileStrong(&mergeScheduler_, &original->mergeScheduler_);
  JreCloneVolatileStrong(&indexingChain_, &original->indexingChain_);
  JreCloneVolatileStrong(&codec_, &original->codec_);
  JreCloneVolatileStrong(&infoStream_, &original->infoStream_);
  JreCloneVolatileStrong(&mergePolicy_, &original->mergePolicy_);
  JreCloneVolatileStrong(&indexerThreadPool_, &original->indexerThreadPool_);
  JreCloneVolatileStrong(&flushPolicy_, &original->flushPolicy_);
}

- (void)dealloc {
  RELEASE_(analyzer_);
  JreReleaseVolatile(&mergedSegmentWarmer_);
  JreReleaseVolatile(&delPolicy_);
  JreReleaseVolatile(&commit_);
  JreReleaseVolatile(&openMode_);
  JreReleaseVolatile(&similarity_);
  JreReleaseVolatile(&mergeScheduler_);
  JreReleaseVolatile(&indexingChain_);
  JreReleaseVolatile(&codec_);
  JreReleaseVolatile(&infoStream_);
  JreReleaseVolatile(&mergePolicy_);
  JreReleaseVolatile(&indexerThreadPool_);
  JreReleaseVolatile(&flushPolicy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLiveIndexWriterConfig;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLiveIndexWriterConfig;", 0x21, 3, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLiveIndexWriterConfig;", 0x21, 5, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLiveIndexWriterConfig;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLiveIndexWriterConfig;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexDeletionPolicy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexCommit;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSimilaritiesSimilarity;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergeScheduler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, 10, -1 },
    { NULL, "LOrgApacheLuceneCodecsCodec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterPerThreadPool;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFlushPolicy;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilInfoStream;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLiveIndexWriterConfig;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneAnalysisAnalyzer:);
  methods[1].selector = @selector(getAnalyzer);
  methods[2].selector = @selector(setMaxBufferedDeleteTermsWithInt:);
  methods[3].selector = @selector(getMaxBufferedDeleteTerms);
  methods[4].selector = @selector(setRAMBufferSizeMBWithDouble:);
  methods[5].selector = @selector(getRAMBufferSizeMB);
  methods[6].selector = @selector(setMaxBufferedDocsWithInt:);
  methods[7].selector = @selector(getMaxBufferedDocs);
  methods[8].selector = @selector(setMergePolicyWithOrgApacheLuceneIndexMergePolicy:);
  methods[9].selector = @selector(setMergedSegmentWarmerWithOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer:);
  methods[10].selector = @selector(getMergedSegmentWarmer);
  methods[11].selector = @selector(getOpenMode);
  methods[12].selector = @selector(getIndexDeletionPolicy);
  methods[13].selector = @selector(getIndexCommit);
  methods[14].selector = @selector(getSimilarity);
  methods[15].selector = @selector(getMergeScheduler);
  methods[16].selector = @selector(getWriteLockTimeout);
  methods[17].selector = @selector(getCodec);
  methods[18].selector = @selector(getMergePolicy);
  methods[19].selector = @selector(getIndexerThreadPool);
  methods[20].selector = @selector(getReaderPooling);
  methods[21].selector = @selector(getIndexingChain);
  methods[22].selector = @selector(getRAMPerThreadHardLimitMB);
  methods[23].selector = @selector(getFlushPolicy);
  methods[24].selector = @selector(getInfoStream);
  methods[25].selector = @selector(setUseCompoundFileWithBoolean:);
  methods[26].selector = @selector(getUseCompoundFile);
  methods[27].selector = @selector(getCommitOnClose);
  methods[28].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxBufferedDocs_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "ramBufferSizeMB_", "D", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "maxBufferedDeleteTerms_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mergedSegmentWarmer_", "LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "delPolicy_", "LOrgApacheLuceneIndexIndexDeletionPolicy;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "commit_", "LOrgApacheLuceneIndexIndexCommit;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "openMode_", "LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilaritiesSimilarity;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "mergeScheduler_", "LOrgApacheLuceneIndexMergeScheduler;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "writeLockTimeout_", "J", .constantValue.asLong = 0, 0x44, -1, -1, -1, 14 },
    { "indexingChain_", "LOrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "codec_", "LOrgApacheLuceneCodecsCodec;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "infoStream_", "LOrgApacheLuceneUtilInfoStream;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "mergePolicy_", "LOrgApacheLuceneIndexMergePolicy;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "indexerThreadPool_", "LOrgApacheLuceneIndexDocumentsWriterPerThreadPool;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "readerPooling_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "flushPolicy_", "LOrgApacheLuceneIndexFlushPolicy;", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "perThreadHardLimitMB_", "I", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "useCompoundFile_", "Z", .constantValue.asLong = 0, 0x44, -1, -1, -1, -1 },
    { "commitOnClose_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneAnalysisAnalyzer;", "setMaxBufferedDeleteTerms", "I", "setRAMBufferSizeMB", "D", "setMaxBufferedDocs", "setMergePolicy", "LOrgApacheLuceneIndexMergePolicy;", "setMergedSegmentWarmer", "LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;", (void *)&OrgApacheLuceneIndexLiveIndexWriterConfig__Annotations$0, "setUseCompoundFile", "Z", "toString", (void *)&OrgApacheLuceneIndexLiveIndexWriterConfig__Annotations$1 };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexLiveIndexWriterConfig = { "LiveIndexWriterConfig", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 29, 21, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexLiveIndexWriterConfig;
}

@end

void OrgApacheLuceneIndexLiveIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneIndexLiveIndexWriterConfig *self, OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  NSObject_init(self);
  JreAssignVolatileBoolean(&self->useCompoundFile_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_USE_COMPOUND_FILE_SYSTEM);
  self->commitOnClose_ = OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_COMMIT_ON_CLOSE;
  JreStrongAssign(&self->analyzer_, analyzer);
  JreAssignVolatileDouble(&self->ramBufferSizeMB_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_RAM_BUFFER_SIZE_MB);
  JreAssignVolatileInt(&self->maxBufferedDocs_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_BUFFERED_DOCS);
  JreAssignVolatileInt(&self->maxBufferedDeleteTerms_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_MAX_BUFFERED_DELETE_TERMS);
  JreVolatileStrongAssign(&self->mergedSegmentWarmer_, nil);
  JreVolatileStrongAssign(&self->delPolicy_, create_OrgApacheLuceneIndexKeepOnlyLastCommitDeletionPolicy_init());
  JreVolatileStrongAssign(&self->commit_, nil);
  JreAssignVolatileBoolean(&self->useCompoundFile_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_USE_COMPOUND_FILE_SYSTEM);
  JreVolatileStrongAssign(&self->openMode_, JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE_OR_APPEND));
  JreVolatileStrongAssign(&self->similarity_, OrgApacheLuceneSearchIndexSearcher_getDefaultSimilarity());
  JreVolatileStrongAssign(&self->mergeScheduler_, create_OrgApacheLuceneIndexConcurrentMergeScheduler_init());
  JreAssignVolatileLong(&self->writeLockTimeout_, OrgApacheLuceneIndexIndexWriterConfig_WRITE_LOCK_TIMEOUT);
  JreVolatileStrongAssign(&self->indexingChain_, JreLoadStatic(OrgApacheLuceneIndexDocumentsWriterPerThread, defaultIndexingChain));
  JreVolatileStrongAssign(&self->codec_, OrgApacheLuceneCodecsCodec_getDefault());
  if (JreLoadVolatileId(&self->codec_) == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  JreVolatileStrongAssign(&self->infoStream_, OrgApacheLuceneUtilInfoStream_getDefault());
  JreVolatileStrongAssign(&self->mergePolicy_, create_OrgApacheLuceneIndexTieredMergePolicy_init());
  JreVolatileStrongAssign(&self->flushPolicy_, create_OrgApacheLuceneIndexFlushByRamOrCountsPolicy_initPackagePrivate());
  JreAssignVolatileBoolean(&self->readerPooling_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_READER_POOLING);
  JreVolatileStrongAssign(&self->indexerThreadPool_, create_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_initPackagePrivate());
  JreAssignVolatileInt(&self->perThreadHardLimitMB_, OrgApacheLuceneIndexIndexWriterConfig_DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB);
}

OrgApacheLuceneIndexLiveIndexWriterConfig *new_OrgApacheLuceneIndexLiveIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexLiveIndexWriterConfig, initWithOrgApacheLuceneAnalysisAnalyzer_, analyzer)
}

OrgApacheLuceneIndexLiveIndexWriterConfig *create_OrgApacheLuceneIndexLiveIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *analyzer) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexLiveIndexWriterConfig, initWithOrgApacheLuceneAnalysisAnalyzer_, analyzer)
}

IOSObjectArray *OrgApacheLuceneIndexLiveIndexWriterConfig__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheLuceneIndexLiveIndexWriterConfig__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexLiveIndexWriterConfig)
