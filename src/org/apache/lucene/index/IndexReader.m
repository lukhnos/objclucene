//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/IndexReader.java
//

#include "J2ObjC_source.h"
#include "java/lang/Error.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/WeakHashMap.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/document/DocumentStoredFieldVisitor.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/util/IOUtils.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/IndexReader must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexIndexReader () {
 @public
  jboolean closed_;
  jboolean closedByChild_;
  JavaUtilConcurrentAtomicAtomicInteger *refCount_;
  id<JavaUtilSet> readerClosedListeners_;
  id<JavaUtilSet> parentReaders_;
}

- (void)notifyReaderClosedListenersWithJavaLangThrowable:(JavaLangThrowable *)th;

- (void)reportCloseToParentReaders;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexReader, refCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexReader, readerClosedListeners_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexReader, parentReaders_, id<JavaUtilSet>)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexReader_notifyReaderClosedListenersWithJavaLangThrowable_(OrgApacheLuceneIndexIndexReader *self, JavaLangThrowable *th);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexReader_reportCloseToParentReaders(OrgApacheLuceneIndexIndexReader *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexReader_tryIncRef(OrgApacheLuceneIndexIndexReader *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexReader_decRef(OrgApacheLuceneIndexIndexReader *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexReader_ensureOpen(OrgApacheLuceneIndexIndexReader *self);

__attribute__((unused)) static jint OrgApacheLuceneIndexIndexReader_numDeletedDocs(OrgApacheLuceneIndexIndexReader *self);

@interface OrgApacheLuceneIndexIndexReader_ReaderClosedListener : NSObject

@end

@implementation OrgApacheLuceneIndexIndexReader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexIndexReader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addReaderClosedListenerWithOrgApacheLuceneIndexIndexReader_ReaderClosedListener:(id<OrgApacheLuceneIndexIndexReader_ReaderClosedListener>)listener {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  [((id<JavaUtilSet>) nil_chk(readerClosedListeners_)) addWithId:listener];
}

- (void)removeReaderClosedListenerWithOrgApacheLuceneIndexIndexReader_ReaderClosedListener:(id<OrgApacheLuceneIndexIndexReader_ReaderClosedListener>)listener {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  [((id<JavaUtilSet>) nil_chk(readerClosedListeners_)) removeWithId:listener];
}

- (void)registerParentReaderWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  [((id<JavaUtilSet>) nil_chk(parentReaders_)) addWithId:reader];
}

- (void)notifyReaderClosedListenersWithJavaLangThrowable:(JavaLangThrowable *)th {
  OrgApacheLuceneIndexIndexReader_notifyReaderClosedListenersWithJavaLangThrowable_(self, th);
}

- (void)reportCloseToParentReaders {
  OrgApacheLuceneIndexIndexReader_reportCloseToParentReaders(self);
}

- (jint)getRefCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(refCount_)) get];
}

- (void)incRef {
  if (!OrgApacheLuceneIndexIndexReader_tryIncRef(self)) {
    OrgApacheLuceneIndexIndexReader_ensureOpen(self);
  }
}

- (jboolean)tryIncRef {
  return OrgApacheLuceneIndexIndexReader_tryIncRef(self);
}

- (void)decRef {
  OrgApacheLuceneIndexIndexReader_decRef(self);
}

- (void)ensureOpen {
  OrgApacheLuceneIndexIndexReader_ensureOpen(self);
}

- (jboolean)isEqual:(id)obj {
  return (JreObjectEqualsEquals(self, obj));
}

- (NSUInteger)hash {
  return JavaLangSystem_identityHashCodeWithId_(self);
}

- (OrgApacheLuceneIndexFields *)getTermVectorsWithInt:(jint)docID {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexTerms *)getTermVectorWithInt:(jint)docID
                                       withNSString:(NSString *)field {
  OrgApacheLuceneIndexFields *vectors = JreRetainedLocalValue([self getTermVectorsWithInt:docID]);
  if (vectors == nil) {
    return nil;
  }
  return [vectors termsWithNSString:field];
}

- (jint)numDocs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)maxDoc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)numDeletedDocs {
  return OrgApacheLuceneIndexIndexReader_numDeletedDocs(self);
}

- (void)documentWithInt:(jint)docID
withOrgApacheLuceneIndexStoredFieldVisitor:(OrgApacheLuceneIndexStoredFieldVisitor *)visitor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgApacheLuceneDocumentDocument *)documentWithInt:(jint)docID {
  OrgApacheLuceneDocumentDocumentStoredFieldVisitor *visitor = create_OrgApacheLuceneDocumentDocumentStoredFieldVisitor_init();
  [self documentWithInt:docID withOrgApacheLuceneIndexStoredFieldVisitor:visitor];
  return [visitor getDocument];
}

- (OrgApacheLuceneDocumentDocument *)documentWithInt:(jint)docID
                                     withJavaUtilSet:(id<JavaUtilSet>)fieldsToLoad {
  OrgApacheLuceneDocumentDocumentStoredFieldVisitor *visitor = create_OrgApacheLuceneDocumentDocumentStoredFieldVisitor_initWithJavaUtilSet_(fieldsToLoad);
  [self documentWithInt:docID withOrgApacheLuceneIndexStoredFieldVisitor:visitor];
  return [visitor getDocument];
}

- (jboolean)hasDeletions {
  return OrgApacheLuceneIndexIndexReader_numDeletedDocs(self) > 0;
}

- (void)close {
  @synchronized(self) {
    if (!closed_) {
      OrgApacheLuceneIndexIndexReader_decRef(self);
      closed_ = true;
    }
  }
}

- (void)doClose {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgApacheLuceneIndexIndexReaderContext *)getContext {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)leaves {
  return [((OrgApacheLuceneIndexIndexReaderContext *) nil_chk([self getContext])) leaves];
}

- (id)getCoreCacheKey {
  return self;
}

- (id)getCombinedCoreAndDeletesKey {
  return self;
}

- (jint)docFreqWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)totalTermFreqWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getSumDocFreqWithNSString:(NSString *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getDocCountWithNSString:(NSString *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getSumTotalTermFreqWithNSString:(NSString *)field {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(refCount_);
  RELEASE_(readerClosedListeners_);
  RELEASE_(parentReaders_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 8, -1, -1, -1 },
    { NULL, "Z", 0x11, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 11, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFields;", 0x401, 12, 13, 7, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerms;", 0x11, 14, 15, 7, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 16, 17, 7, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentDocument;", 0x11, 16, 13, 7, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneDocumentDocument;", 0x11, 16, 18, 7, 19, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x31, -1, -1, 7, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 7, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexReaderContext;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x11, -1, -1, -1, 20, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 21, 22, 7, -1, -1, -1 },
    { NULL, "J", 0x401, 23, 22, 7, -1, -1, -1 },
    { NULL, "J", 0x401, 24, 25, 7, -1, -1, -1 },
    { NULL, "I", 0x401, 26, 25, 7, -1, -1, -1 },
    { NULL, "J", 0x401, 27, 25, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addReaderClosedListenerWithOrgApacheLuceneIndexIndexReader_ReaderClosedListener:);
  methods[2].selector = @selector(removeReaderClosedListenerWithOrgApacheLuceneIndexIndexReader_ReaderClosedListener:);
  methods[3].selector = @selector(registerParentReaderWithOrgApacheLuceneIndexIndexReader:);
  methods[4].selector = @selector(notifyReaderClosedListenersWithJavaLangThrowable:);
  methods[5].selector = @selector(reportCloseToParentReaders);
  methods[6].selector = @selector(getRefCount);
  methods[7].selector = @selector(incRef);
  methods[8].selector = @selector(tryIncRef);
  methods[9].selector = @selector(decRef);
  methods[10].selector = @selector(ensureOpen);
  methods[11].selector = @selector(isEqual:);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(getTermVectorsWithInt:);
  methods[14].selector = @selector(getTermVectorWithInt:withNSString:);
  methods[15].selector = @selector(numDocs);
  methods[16].selector = @selector(maxDoc);
  methods[17].selector = @selector(numDeletedDocs);
  methods[18].selector = @selector(documentWithInt:withOrgApacheLuceneIndexStoredFieldVisitor:);
  methods[19].selector = @selector(documentWithInt:);
  methods[20].selector = @selector(documentWithInt:withJavaUtilSet:);
  methods[21].selector = @selector(hasDeletions);
  methods[22].selector = @selector(close);
  methods[23].selector = @selector(doClose);
  methods[24].selector = @selector(getContext);
  methods[25].selector = @selector(leaves);
  methods[26].selector = @selector(getCoreCacheKey);
  methods[27].selector = @selector(getCombinedCoreAndDeletesKey);
  methods[28].selector = @selector(docFreqWithOrgApacheLuceneIndexTerm:);
  methods[29].selector = @selector(totalTermFreqWithOrgApacheLuceneIndexTerm:);
  methods[30].selector = @selector(getSumDocFreqWithNSString:);
  methods[31].selector = @selector(getDocCountWithNSString:);
  methods[32].selector = @selector(getSumTotalTermFreqWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closedByChild_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "refCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readerClosedListeners_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "parentReaders_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
  };
  static const void *ptrTable[] = { "addReaderClosedListener", "LOrgApacheLuceneIndexIndexReader_ReaderClosedListener;", "removeReaderClosedListener", "registerParentReader", "LOrgApacheLuceneIndexIndexReader;", "notifyReaderClosedListeners", "LJavaLangThrowable;", "LJavaIoIOException;", "LOrgApacheLuceneStoreAlreadyClosedException;", "equals", "LNSObject;", "hashCode", "getTermVectors", "I", "getTermVector", "ILNSString;", "document", "ILOrgApacheLuceneIndexStoredFieldVisitor;", "ILJavaUtilSet;", "(ILjava/util/Set<Ljava/lang/String;>;)Lorg/apache/lucene/document/Document;", "()Ljava/util/List<Lorg/apache/lucene/index/LeafReaderContext;>;", "docFreq", "LOrgApacheLuceneIndexTerm;", "totalTermFreq", "getSumDocFreq", "LNSString;", "getDocCount", "getSumTotalTermFreq", "Ljava/util/Set<Lorg/apache/lucene/index/IndexReader$ReaderClosedListener;>;", "Ljava/util/Set<Lorg/apache/lucene/index/IndexReader;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexReader = { "IndexReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x401, 33, 5, -1, 1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexReader;
}

@end

void OrgApacheLuceneIndexIndexReader_init(OrgApacheLuceneIndexIndexReader *self) {
  NSObject_init(self);
  self->closed_ = false;
  self->closedByChild_ = false;
  JreStrongAssignAndConsume(&self->refCount_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(1));
  JreStrongAssign(&self->readerClosedListeners_, JavaUtilCollections_synchronizedSetWithJavaUtilSet_(create_JavaUtilLinkedHashSet_init()));
  JreStrongAssign(&self->parentReaders_, JavaUtilCollections_synchronizedSetWithJavaUtilSet_(JavaUtilCollections_newSetFromMapWithJavaUtilMap_(create_JavaUtilWeakHashMap_init())));
  if (!([self isKindOfClass:[OrgApacheLuceneIndexCompositeReader class]] || [self isKindOfClass:[OrgApacheLuceneIndexLeafReader class]])) @throw create_JavaLangError_initWithNSString_(@"IndexReader should never be directly extended, subclass LeafReader or CompositeReader instead.");
}

void OrgApacheLuceneIndexIndexReader_notifyReaderClosedListenersWithJavaLangThrowable_(OrgApacheLuceneIndexIndexReader *self, JavaLangThrowable *th) {
  @synchronized(self->readerClosedListeners_) {
    for (id<OrgApacheLuceneIndexIndexReader_ReaderClosedListener> __strong listener in nil_chk(self->readerClosedListeners_)) {
      @try {
        [((id<OrgApacheLuceneIndexIndexReader_ReaderClosedListener>) nil_chk(listener)) onCloseWithOrgApacheLuceneIndexIndexReader:self];
      }
      @catch (JavaLangThrowable *t) {
        if (th == nil) {
          th = t;
        }
        else {
          [th addSuppressedWithJavaLangThrowable:t];
        }
      }
    }
    OrgApacheLuceneUtilIOUtils_reThrowUncheckedWithJavaLangThrowable_(th);
  }
}

void OrgApacheLuceneIndexIndexReader_reportCloseToParentReaders(OrgApacheLuceneIndexIndexReader *self) {
  @synchronized(self->parentReaders_) {
    for (OrgApacheLuceneIndexIndexReader * __strong parent in nil_chk(self->parentReaders_)) {
      ((OrgApacheLuceneIndexIndexReader *) nil_chk(parent))->closedByChild_ = true;
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(parent->refCount_)) addAndGetWithInt:0];
      OrgApacheLuceneIndexIndexReader_reportCloseToParentReaders(parent);
    }
  }
}

jboolean OrgApacheLuceneIndexIndexReader_tryIncRef(OrgApacheLuceneIndexIndexReader *self) {
  jint count;
  while ((count = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->refCount_)) get]) > 0) {
    if ([self->refCount_ compareAndSetWithInt:count withInt:count + 1]) {
      return true;
    }
  }
  return false;
}

void OrgApacheLuceneIndexIndexReader_decRef(OrgApacheLuceneIndexIndexReader *self) {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->refCount_)) get] <= 0) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"this IndexReader is closed");
  }
  jint rc = [self->refCount_ decrementAndGet];
  if (rc == 0) {
    self->closed_ = true;
    JavaLangThrowable *throwable = nil;
    @try {
      [self doClose];
    }
    @catch (JavaLangThrowable *th) {
      throwable = th;
    }
    @finally {
      @try {
        OrgApacheLuceneIndexIndexReader_reportCloseToParentReaders(self);
      }
      @finally {
        OrgApacheLuceneIndexIndexReader_notifyReaderClosedListenersWithJavaLangThrowable_(self, throwable);
      }
    }
  }
  else if (rc < 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"too many decRef calls: refCount is ", rc, @" after decrement"));
  }
}

void OrgApacheLuceneIndexIndexReader_ensureOpen(OrgApacheLuceneIndexIndexReader *self) {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->refCount_)) get] <= 0) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"this IndexReader is closed");
  }
  if (self->closedByChild_) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"this IndexReader cannot be used anymore as one of its child readers was closed");
  }
}

jint OrgApacheLuceneIndexIndexReader_numDeletedDocs(OrgApacheLuceneIndexIndexReader *self) {
  return [self maxDoc] - [self numDocs];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexReader)

@implementation OrgApacheLuceneIndexIndexReader_ReaderClosedListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onCloseWithOrgApacheLuceneIndexIndexReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onClose", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexReader_ReaderClosedListener = { "ReaderClosedListener", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x609, 1, 0, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexReader_ReaderClosedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexReader_ReaderClosedListener)
