//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/MultiFields.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/MultiBits.h"
#include "org/apache/lucene/index/MultiFields.h"
#include "org/apache/lucene/index/MultiTerms.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/MergedIterator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/MultiFields must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexMultiFields () {
 @public
  IOSObjectArray *subs_;
  IOSObjectArray *subSlices_;
  id<JavaUtilMap> terms_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiFields, subs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiFields, subSlices_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiFields, terms_, id<JavaUtilMap>)

@implementation OrgApacheLuceneIndexMultiFields

+ (OrgApacheLuceneIndexFields *)getFieldsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return OrgApacheLuceneIndexMultiFields_getFieldsWithOrgApacheLuceneIndexIndexReader_(reader);
}

+ (id<OrgApacheLuceneUtilBits>)getLiveDocsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return OrgApacheLuceneIndexMultiFields_getLiveDocsWithOrgApacheLuceneIndexIndexReader_(reader);
}

+ (OrgApacheLuceneIndexTerms *)getTermsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)r
                                                              withNSString:(NSString *)field {
  return OrgApacheLuceneIndexMultiFields_getTermsWithOrgApacheLuceneIndexIndexReader_withNSString_(r, field);
}

+ (OrgApacheLuceneIndexPostingsEnum *)getTermDocsEnumWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)r
                                                                            withNSString:(NSString *)field
                                                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  return OrgApacheLuceneIndexMultiFields_getTermDocsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_(r, field, term);
}

+ (OrgApacheLuceneIndexPostingsEnum *)getTermDocsEnumWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)r
                                                                            withNSString:(NSString *)field
                                                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
                                                                                 withInt:(jint)flags {
  return OrgApacheLuceneIndexMultiFields_getTermDocsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_withInt_(r, field, term, flags);
}

+ (OrgApacheLuceneIndexPostingsEnum *)getTermPositionsEnumWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)r
                                                                                 withNSString:(NSString *)field
                                                              withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  return OrgApacheLuceneIndexMultiFields_getTermPositionsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_(r, field, term);
}

+ (OrgApacheLuceneIndexPostingsEnum *)getTermPositionsEnumWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)r
                                                                                 withNSString:(NSString *)field
                                                              withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
                                                                                      withInt:(jint)flags {
  return OrgApacheLuceneIndexMultiFields_getTermPositionsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_withInt_(r, field, term, flags);
}

- (instancetype)initWithOrgApacheLuceneIndexFieldsArray:(IOSObjectArray *)subs
               withOrgApacheLuceneIndexReaderSliceArray:(IOSObjectArray *)subSlices {
  OrgApacheLuceneIndexMultiFields_initWithOrgApacheLuceneIndexFieldsArray_withOrgApacheLuceneIndexReaderSliceArray_(self, subs, subSlices);
  return self;
}

- (id<JavaUtilIterator>)iterator {
  IOSObjectArray *subIterators = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(subs_))->size_ type:JavaUtilIterator_class_()];
  for (jint i = 0; i < subs_->size_; i++) {
    IOSObjectArray_Set(subIterators, i, [((OrgApacheLuceneIndexFields *) nil_chk(IOSObjectArray_Get(subs_, i))) iterator]);
  }
  return create_OrgApacheLuceneUtilMergedIterator_initWithJavaUtilIteratorArray_(subIterators);
}

- (OrgApacheLuceneIndexTerms *)termsWithNSString:(NSString *)field {
  OrgApacheLuceneIndexTerms *result = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(terms_)) getWithId:field]);
  if (result != nil) return result;
  id<JavaUtilList> subs2 = create_JavaUtilArrayList_init();
  id<JavaUtilList> slices2 = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subs_))->size_; i++) {
    OrgApacheLuceneIndexTerms *terms = [((OrgApacheLuceneIndexFields *) nil_chk(IOSObjectArray_Get(subs_, i))) termsWithNSString:field];
    if (terms != nil) {
      [subs2 addWithId:terms];
      [slices2 addWithId:IOSObjectArray_Get(nil_chk(subSlices_), i)];
    }
  }
  if ([subs2 size] == 0) {
    result = nil;
  }
  else {
    result = create_OrgApacheLuceneIndexMultiTerms_initWithOrgApacheLuceneIndexTermsArray_withOrgApacheLuceneIndexReaderSliceArray_([subs2 toArrayWithNSObjectArray:JreLoadStatic(OrgApacheLuceneIndexTerms, EMPTY_ARRAY)], [slices2 toArrayWithNSObjectArray:JreLoadStatic(OrgApacheLuceneIndexReaderSlice, EMPTY_ARRAY)]);
    [terms_ putWithId:field withId:result];
  }
  return result;
}

- (jint)size {
  return -1;
}

+ (OrgApacheLuceneIndexFieldInfos *)getMergedFieldInfosWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return OrgApacheLuceneIndexMultiFields_getMergedFieldInfosWithOrgApacheLuceneIndexIndexReader_(reader);
}

+ (id<JavaUtilCollection>)getIndexedFieldsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return OrgApacheLuceneIndexMultiFields_getIndexedFieldsWithOrgApacheLuceneIndexIndexReader_(reader);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(subs_);
  RELEASE_(subSlices_);
  RELEASE_(terms_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneIndexFields;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBits;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerms;", 0x9, 4, 5, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x9, 6, 7, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x9, 6, 8, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x9, 9, 7, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x9, 9, 8, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTerms;", 0x1, 12, 13, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldInfos;", 0x9, 14, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x9, 15, 1, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getFieldsWithOrgApacheLuceneIndexIndexReader:);
  methods[1].selector = @selector(getLiveDocsWithOrgApacheLuceneIndexIndexReader:);
  methods[2].selector = @selector(getTermsWithOrgApacheLuceneIndexIndexReader:withNSString:);
  methods[3].selector = @selector(getTermDocsEnumWithOrgApacheLuceneIndexIndexReader:withNSString:withOrgApacheLuceneUtilBytesRef:);
  methods[4].selector = @selector(getTermDocsEnumWithOrgApacheLuceneIndexIndexReader:withNSString:withOrgApacheLuceneUtilBytesRef:withInt:);
  methods[5].selector = @selector(getTermPositionsEnumWithOrgApacheLuceneIndexIndexReader:withNSString:withOrgApacheLuceneUtilBytesRef:);
  methods[6].selector = @selector(getTermPositionsEnumWithOrgApacheLuceneIndexIndexReader:withNSString:withOrgApacheLuceneUtilBytesRef:withInt:);
  methods[7].selector = @selector(initWithOrgApacheLuceneIndexFieldsArray:withOrgApacheLuceneIndexReaderSliceArray:);
  methods[8].selector = @selector(iterator);
  methods[9].selector = @selector(termsWithNSString:);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(getMergedFieldInfosWithOrgApacheLuceneIndexIndexReader:);
  methods[12].selector = @selector(getIndexedFieldsWithOrgApacheLuceneIndexIndexReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subs_", "[LOrgApacheLuceneIndexFields;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "subSlices_", "[LOrgApacheLuceneIndexReaderSlice;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "terms_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "getFields", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "getLiveDocs", "getTerms", "LOrgApacheLuceneIndexIndexReader;LNSString;", "getTermDocsEnum", "LOrgApacheLuceneIndexIndexReader;LNSString;LOrgApacheLuceneUtilBytesRef;", "LOrgApacheLuceneIndexIndexReader;LNSString;LOrgApacheLuceneUtilBytesRef;I", "getTermPositionsEnum", "[LOrgApacheLuceneIndexFields;[LOrgApacheLuceneIndexReaderSlice;", "()Ljava/util/Iterator<Ljava/lang/String;>;", "terms", "LNSString;", "getMergedFieldInfos", "getIndexedFields", "(Lorg/apache/lucene/index/IndexReader;)Ljava/util/Collection<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/index/Terms;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiFields = { "MultiFields", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x11, 13, 3, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexMultiFields;
}

@end

OrgApacheLuceneIndexFields *OrgApacheLuceneIndexMultiFields_getFieldsWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneIndexMultiFields_initialize();
  id<JavaUtilList> leaves = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) leaves];
  {
    id<JavaUtilList> fields;
    id<JavaUtilList> slices;
    switch ([((id<JavaUtilList>) nil_chk(leaves)) size]) {
      case 1:
      return [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk([leaves getWithInt:0])) reader])) fields];
      default:
      fields = create_JavaUtilArrayList_init();
      slices = create_JavaUtilArrayList_init();
      for (OrgApacheLuceneIndexLeafReaderContext * __strong ctx in leaves) {
        OrgApacheLuceneIndexLeafReader *r = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(ctx)) reader];
        OrgApacheLuceneIndexFields *f = [((OrgApacheLuceneIndexLeafReader *) nil_chk(r)) fields];
        [fields addWithId:f];
        [slices addWithId:create_OrgApacheLuceneIndexReaderSlice_initWithInt_withInt_withInt_(ctx->docBase_, [r maxDoc], [fields size] - 1)];
      }
      if ([fields size] == 1) {
        return [fields getWithInt:0];
      }
      else {
        return create_OrgApacheLuceneIndexMultiFields_initWithOrgApacheLuceneIndexFieldsArray_withOrgApacheLuceneIndexReaderSliceArray_([fields toArrayWithNSObjectArray:JreLoadStatic(OrgApacheLuceneIndexFields, EMPTY_ARRAY)], [slices toArrayWithNSObjectArray:JreLoadStatic(OrgApacheLuceneIndexReaderSlice, EMPTY_ARRAY)]);
      }
    }
  }
}

id<OrgApacheLuceneUtilBits> OrgApacheLuceneIndexMultiFields_getLiveDocsWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneIndexMultiFields_initialize();
  if ([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) hasDeletions]) {
    id<JavaUtilList> leaves = [reader leaves];
    jint size = [((id<JavaUtilList>) nil_chk(leaves)) size];
    JreAssert(size > 0, @"A reader with deletions must have at least one leave");
    if (size == 1) {
      return [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk([leaves getWithInt:0])) reader])) getLiveDocs];
    }
    IOSObjectArray *liveDocs = [IOSObjectArray arrayWithLength:size type:OrgApacheLuceneUtilBits_class_()];
    IOSIntArray *starts = [IOSIntArray arrayWithLength:size + 1];
    for (jint i = 0; i < size; i++) {
      OrgApacheLuceneIndexLeafReaderContext *ctx = [leaves getWithInt:i];
      IOSObjectArray_Set(liveDocs, i, [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(ctx)) reader])) getLiveDocs]);
      *IOSIntArray_GetRef(starts, i) = ctx->docBase_;
    }
    *IOSIntArray_GetRef(starts, size) = [reader maxDoc];
    return create_OrgApacheLuceneIndexMultiBits_initPackagePrivateWithOrgApacheLuceneUtilBitsArray_withIntArray_withBoolean_(liveDocs, starts, true);
  }
  else {
    return nil;
  }
}

OrgApacheLuceneIndexTerms *OrgApacheLuceneIndexMultiFields_getTermsWithOrgApacheLuceneIndexIndexReader_withNSString_(OrgApacheLuceneIndexIndexReader *r, NSString *field) {
  OrgApacheLuceneIndexMultiFields_initialize();
  return [((OrgApacheLuceneIndexFields *) nil_chk(OrgApacheLuceneIndexMultiFields_getFieldsWithOrgApacheLuceneIndexIndexReader_(r))) termsWithNSString:field];
}

OrgApacheLuceneIndexPostingsEnum *OrgApacheLuceneIndexMultiFields_getTermDocsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexIndexReader *r, NSString *field, OrgApacheLuceneUtilBytesRef *term) {
  OrgApacheLuceneIndexMultiFields_initialize();
  return OrgApacheLuceneIndexMultiFields_getTermDocsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_withInt_(r, field, term, OrgApacheLuceneIndexPostingsEnum_FREQS);
}

OrgApacheLuceneIndexPostingsEnum *OrgApacheLuceneIndexMultiFields_getTermDocsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneIndexIndexReader *r, NSString *field, OrgApacheLuceneUtilBytesRef *term, jint flags) {
  OrgApacheLuceneIndexMultiFields_initialize();
  JreAssert(field != nil, @"org/apache/lucene/index/MultiFields.java:137 condition failed: assert field != null;");
  JreAssert(term != nil, @"org/apache/lucene/index/MultiFields.java:138 condition failed: assert term != null;");
  OrgApacheLuceneIndexTerms *terms = OrgApacheLuceneIndexMultiFields_getTermsWithOrgApacheLuceneIndexIndexReader_withNSString_(r, field);
  if (terms != nil) {
    OrgApacheLuceneIndexTermsEnum *termsEnum = [terms iterator];
    if ([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekExactWithOrgApacheLuceneUtilBytesRef:term]) {
      return [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:nil withInt:flags];
    }
  }
  return nil;
}

OrgApacheLuceneIndexPostingsEnum *OrgApacheLuceneIndexMultiFields_getTermPositionsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexIndexReader *r, NSString *field, OrgApacheLuceneUtilBytesRef *term) {
  OrgApacheLuceneIndexMultiFields_initialize();
  return OrgApacheLuceneIndexMultiFields_getTermPositionsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_withInt_(r, field, term, OrgApacheLuceneIndexPostingsEnum_ALL);
}

OrgApacheLuceneIndexPostingsEnum *OrgApacheLuceneIndexMultiFields_getTermPositionsEnumWithOrgApacheLuceneIndexIndexReader_withNSString_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneIndexIndexReader *r, NSString *field, OrgApacheLuceneUtilBytesRef *term, jint flags) {
  OrgApacheLuceneIndexMultiFields_initialize();
  JreAssert(field != nil, @"org/apache/lucene/index/MultiFields.java:164 condition failed: assert field != null;");
  JreAssert(term != nil, @"org/apache/lucene/index/MultiFields.java:165 condition failed: assert term != null;");
  OrgApacheLuceneIndexTerms *terms = OrgApacheLuceneIndexMultiFields_getTermsWithOrgApacheLuceneIndexIndexReader_withNSString_(r, field);
  if (terms != nil) {
    OrgApacheLuceneIndexTermsEnum *termsEnum = [terms iterator];
    if ([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekExactWithOrgApacheLuceneUtilBytesRef:term]) {
      return [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:nil withInt:flags];
    }
  }
  return nil;
}

void OrgApacheLuceneIndexMultiFields_initWithOrgApacheLuceneIndexFieldsArray_withOrgApacheLuceneIndexReaderSliceArray_(OrgApacheLuceneIndexMultiFields *self, IOSObjectArray *subs, IOSObjectArray *subSlices) {
  OrgApacheLuceneIndexFields_init(self);
  JreStrongAssignAndConsume(&self->terms_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssign(&self->subs_, subs);
  JreStrongAssign(&self->subSlices_, subSlices);
}

OrgApacheLuceneIndexMultiFields *new_OrgApacheLuceneIndexMultiFields_initWithOrgApacheLuceneIndexFieldsArray_withOrgApacheLuceneIndexReaderSliceArray_(IOSObjectArray *subs, IOSObjectArray *subSlices) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiFields, initWithOrgApacheLuceneIndexFieldsArray_withOrgApacheLuceneIndexReaderSliceArray_, subs, subSlices)
}

OrgApacheLuceneIndexMultiFields *create_OrgApacheLuceneIndexMultiFields_initWithOrgApacheLuceneIndexFieldsArray_withOrgApacheLuceneIndexReaderSliceArray_(IOSObjectArray *subs, IOSObjectArray *subSlices) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiFields, initWithOrgApacheLuceneIndexFieldsArray_withOrgApacheLuceneIndexReaderSliceArray_, subs, subSlices)
}

OrgApacheLuceneIndexFieldInfos *OrgApacheLuceneIndexMultiFields_getMergedFieldInfosWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneIndexMultiFields_initialize();
  OrgApacheLuceneIndexFieldInfos_Builder *builder = create_OrgApacheLuceneIndexFieldInfos_Builder_init();
  for (OrgApacheLuceneIndexLeafReaderContext * __strong ctx in nil_chk([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) leaves])) {
    [builder addWithOrgApacheLuceneIndexFieldInfos:[((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(ctx)) reader])) getFieldInfos]];
  }
  return [builder finish];
}

id<JavaUtilCollection> OrgApacheLuceneIndexMultiFields_getIndexedFieldsWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneIndexMultiFields_initialize();
  id<JavaUtilCollection> fields = create_JavaUtilHashSet_init();
  for (OrgApacheLuceneIndexFieldInfo * __strong fieldInfo in nil_chk(OrgApacheLuceneIndexMultiFields_getMergedFieldInfosWithOrgApacheLuceneIndexIndexReader_(reader))) {
    if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getIndexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE)) {
      [fields addWithId:fieldInfo->name_];
    }
  }
  return fields;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiFields)
