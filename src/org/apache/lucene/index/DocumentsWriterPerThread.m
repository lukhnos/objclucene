//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DocumentsWriterPerThread.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Throwable.h"
#include "java/text/NumberFormat.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/index/AbortingException.h"
#include "org/apache/lucene/index/BufferedUpdates.h"
#include "org/apache/lucene/index/DefaultIndexingChain.h"
#include "org/apache/lucene/index/DocConsumer.h"
#include "org/apache/lucene/index/DocumentsWriterDeleteQueue.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FrozenBufferedUpdates.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/util/IntBlockPool.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/Version.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/DocumentsWriterPerThread must not be compiled with ARC (-fobjc-arc)"
#if !__has_feature(objc_arc_weak)
#error "org/apache/lucene/index/DocumentsWriterPerThread must be compiled with weak references support (-fobjc-weak)"
#endif
#endif

@interface OrgApacheLuceneIndexDocumentsWriterPerThread () {
 @public
  OrgApacheLuceneIndexSegmentInfo *segmentInfo_;
  OrgApacheLuceneIndexFieldInfos_Builder *fieldInfos_;
  OrgApacheLuceneUtilInfoStream *infoStream_;
  jint numDocsInRAM_;
  OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *deleteSlice_;
  JavaTextNumberFormat *nf_;
  JavaUtilConcurrentAtomicAtomicLong *pendingNumDocs_;
  OrgApacheLuceneIndexLiveIndexWriterConfig *indexWriterConfig_;
  jboolean enableTestPoints_;
  WEAK_ OrgApacheLuceneIndexIndexWriter *indexWriter_;
  id<JavaUtilSet> filesToDelete_;
}

/*!
 @brief Anything that will add N docs to the index should reserve first to
   make sure it's allowed.
 */
- (void)reserveOneDoc;

- (void)finishDocumentWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, segmentInfo_, OrgApacheLuceneIndexSegmentInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, fieldInfos_, OrgApacheLuceneIndexFieldInfos_Builder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, infoStream_, OrgApacheLuceneUtilInfoStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, deleteSlice_, OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, nf_, JavaTextNumberFormat *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, pendingNumDocs_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, indexWriterConfig_, OrgApacheLuceneIndexLiveIndexWriterConfig *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread, filesToDelete_, id<JavaUtilSet>)

inline jboolean OrgApacheLuceneIndexDocumentsWriterPerThread_get_INFO_VERBOSE(void);
#define OrgApacheLuceneIndexDocumentsWriterPerThread_INFO_VERBOSE false
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexDocumentsWriterPerThread, INFO_VERBOSE, jboolean)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, NSString *message);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(OrgApacheLuceneIndexDocumentsWriterPerThread *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, OrgApacheLuceneIndexTerm *delTerm);

@interface OrgApacheLuceneIndexDocumentsWriterPerThread_1 : OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain

- (instancetype)init;

- (OrgApacheLuceneIndexDocConsumer *)getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)documentsWriterPerThread;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterPerThread_1)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_1_init(OrgApacheLuceneIndexDocumentsWriterPerThread_1 *self);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread_1 *new_OrgApacheLuceneIndexDocumentsWriterPerThread_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread_1 *create_OrgApacheLuceneIndexDocumentsWriterPerThread_1_init(void);

@interface OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment ()

- (instancetype)initWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)segmentInfo
                           withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos
                      withOrgApacheLuceneIndexBufferedUpdates:(OrgApacheLuceneIndexBufferedUpdates *)segmentUpdates
                           withOrgApacheLuceneUtilMutableBits:(id<OrgApacheLuceneUtilMutableBits>)liveDocs
                                                      withInt:(jint)delCount;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *self, OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *new_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *create_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount);

@interface OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator : OrgApacheLuceneUtilIntBlockPool_Allocator {
 @public
  OrgApacheLuceneUtilCounter *bytesUsed_;
}

- (instancetype)initWithOrgApacheLuceneUtilCounter:(OrgApacheLuceneUtilCounter *)bytesUsed;

- (IOSIntArray *)getIntBlock;

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)offset
                              withInt:(jint)length;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator, bytesUsed_, OrgApacheLuceneUtilCounter *)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *self, OrgApacheLuceneUtilCounter *bytesUsed);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *new_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneUtilCounter *bytesUsed) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *create_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneUtilCounter *bytesUsed);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexDocumentsWriterPerThread)

OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain *OrgApacheLuceneIndexDocumentsWriterPerThread_defaultIndexingChain;

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread

+ (OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain *)defaultIndexingChain {
  return OrgApacheLuceneIndexDocumentsWriterPerThread_defaultIndexingChain;
}

+ (jint)BYTE_BLOCK_NOT_MASK {
  return OrgApacheLuceneIndexDocumentsWriterPerThread_BYTE_BLOCK_NOT_MASK;
}

+ (jint)MAX_TERM_LENGTH_UTF8 {
  return OrgApacheLuceneIndexDocumentsWriterPerThread_MAX_TERM_LENGTH_UTF8;
}

- (void)abort {
  aborted_ = true;
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
      [infoStream_ messageWithNSString:@"DWPT" withNSString:@"now abort"];
    }
    @try {
      [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) abort];
    }
    @catch (JavaLangThrowable *t) {
    }
    [((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_)) clear];
  }
  @finally {
    if ([infoStream_ isEnabledWithNSString:@"DWPT"]) {
      [infoStream_ messageWithNSString:@"DWPT" withNSString:@"done abort"];
    }
  }
}

- (instancetype)initPackagePrivateWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                         withNSString:(NSString *)segmentName
                                    withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directoryOrig
                                    withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                        withOrgApacheLuceneIndexLiveIndexWriterConfig:(OrgApacheLuceneIndexLiveIndexWriterConfig *)indexWriterConfig
                                    withOrgApacheLuceneUtilInfoStream:(OrgApacheLuceneUtilInfoStream *)infoStream
                   withOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)deleteQueue
                           withOrgApacheLuceneIndexFieldInfos_Builder:(OrgApacheLuceneIndexFieldInfos_Builder *)fieldInfos
                               withJavaUtilConcurrentAtomicAtomicLong:(JavaUtilConcurrentAtomicAtomicLong *)pendingNumDocs
                                                          withBoolean:(jboolean)enableTestPoints {
  OrgApacheLuceneIndexDocumentsWriterPerThread_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_(self, writer, segmentName, directoryOrig, directory, indexWriterConfig, infoStream, deleteQueue, fieldInfos, pendingNumDocs, enableTestPoints);
  return self;
}

- (OrgApacheLuceneIndexFieldInfos_Builder *)getFieldInfosBuilder {
  return fieldInfos_;
}

- (void)testPointWithNSString:(NSString *)message {
  OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(self, message);
}

- (void)reserveOneDoc {
  OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(self);
}

- (void)updateDocumentWithJavaLangIterable:(id<JavaLangIterable>)doc
       withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
              withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(self, @"DocumentsWriterPerThread addDocument start");
  JreAssert(deleteQueue_ != nil, @"org/apache/lucene/index/DocumentsWriterPerThread.java:222 condition failed: assert deleteQueue != null;");
  OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(self);
  JreStrongAssign(&((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(docState_))->doc_, doc);
  JreStrongAssign(&docState_->analyzer_, analyzer);
  docState_->docID_ = numDocsInRAM_;
  jboolean success = false;
  @try {
    @try {
      [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) processDocument];
    }
    @finally {
      [docState_ clear];
    }
    success = true;
  }
  @finally {
    if (!success) {
      [self deleteDocIDWithInt:docState_->docID_];
      numDocsInRAM_++;
    }
  }
  OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(self, delTerm);
}

- (jint)updateDocumentsWithJavaLangIterable:(id<JavaLangIterable>)docs
        withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
               withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(self, @"DocumentsWriterPerThread addDocuments start");
  JreAssert(deleteQueue_ != nil, @"org/apache/lucene/index/DocumentsWriterPerThread.java:256 condition failed: assert deleteQueue != null;");
  JreStrongAssign(&((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(docState_))->analyzer_, analyzer);
  jint docCount = 0;
  jboolean allDocsIndexed = false;
  @try {
    for (id<JavaLangIterable> __strong doc in nil_chk(docs)) {
      OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(self);
      JreStrongAssign(&docState_->doc_, doc);
      docState_->docID_ = numDocsInRAM_;
      docCount++;
      jboolean success = false;
      @try {
        [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) processDocument];
        success = true;
      }
      @finally {
        if (!success) {
          numDocsInRAM_++;
        }
      }
      OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(self, nil);
    }
    allDocsIndexed = true;
    if (delTerm != nil) {
      [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(deleteQueue_)) addWithOrgApacheLuceneIndexTerm:delTerm withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice:deleteSlice_];
      JreAssert([((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(deleteSlice_)) isTailItemWithId:delTerm], @"expected the delete term as the tail item");
      [deleteSlice_ applyWithOrgApacheLuceneIndexBufferedUpdates:pendingUpdates_ withInt:numDocsInRAM_ - docCount];
    }
  }
  @finally {
    if (!allDocsIndexed && !aborted_) {
      jint docID = numDocsInRAM_ - 1;
      jint endDocID = docID - docCount;
      while (docID > endDocID) {
        [self deleteDocIDWithInt:docID];
        docID--;
      }
    }
    [docState_ clear];
  }
  return docCount;
}

- (void)finishDocumentWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(self, delTerm);
}

- (void)deleteDocIDWithInt:(jint)docIDUpto {
  [((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_)) addDocIDWithInt:docIDUpto];
}

- (jint)numDeleteTerms {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_))->numTermDeletes_)) get];
}

- (jint)getNumDocsInRAM {
  return numDocsInRAM_;
}

- (OrgApacheLuceneIndexFrozenBufferedUpdates *)prepareFlush {
  JreAssert(numDocsInRAM_ > 0, @"org/apache/lucene/index/DocumentsWriterPerThread.java:380 condition failed: assert numDocsInRAM > 0;");
  OrgApacheLuceneIndexFrozenBufferedUpdates *globalUpdates = [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(deleteQueue_)) freezeGlobalBufferWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice:deleteSlice_];
  if (deleteSlice_ != nil) {
    [deleteSlice_ applyWithOrgApacheLuceneIndexBufferedUpdates:pendingUpdates_ withInt:numDocsInRAM_];
    JreAssert([deleteSlice_ isEmpty], @"org/apache/lucene/index/DocumentsWriterPerThread.java:387 condition failed: assert deleteSlice.isEmpty();");
    [deleteSlice_ reset];
  }
  return globalUpdates;
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *)flush {
  JreAssert(numDocsInRAM_ > 0, @"org/apache/lucene/index/DocumentsWriterPerThread.java:395 condition failed: assert numDocsInRAM > 0;");
  JreAssert([((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(deleteSlice_)) isEmpty], @"all deletes must be applied in prepareFlush");
  [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(segmentInfo_)) setMaxDocWithInt:numDocsInRAM_];
  OrgApacheLuceneIndexSegmentWriteState *flushState = create_OrgApacheLuceneIndexSegmentWriteState_initWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneStoreIOContext_(infoStream_, directory_, segmentInfo_, [((OrgApacheLuceneIndexFieldInfos_Builder *) nil_chk(fieldInfos_)) finish], pendingUpdates_, create_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreFlushInfo_(create_OrgApacheLuceneStoreFlushInfo_initWithInt_withLong_(numDocsInRAM_, [self bytesUsed])));
  jdouble startMBUsed = [self bytesUsed] / 1024. / 1024.;
  if ([((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_))->docIDs_)) size] > 0) {
    JreStrongAssign(&flushState->liveDocs_, [((OrgApacheLuceneCodecsLiveDocsFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(codec_)) liveDocsFormat])) newLiveDocsWithInt:numDocsInRAM_]);
    for (JavaLangInteger *boxed__ in pendingUpdates_->docIDs_) {
      jint delDocID = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      [((id<OrgApacheLuceneUtilMutableBits>) nil_chk(flushState->liveDocs_)) clearWithInt:delDocID];
    }
    flushState->delCountOnFlush_ = [pendingUpdates_->docIDs_ size];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(pendingUpdates_->bytesUsed_)) addAndGetWithLong:-[pendingUpdates_->docIDs_ size] * JreLoadStatic(OrgApacheLuceneIndexBufferedUpdates, BYTES_PER_DEL_DOCID)];
    [pendingUpdates_->docIDs_ clear];
  }
  if (aborted_) {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
      [infoStream_ messageWithNSString:@"DWPT" withNSString:@"flush: skip because aborting is set"];
    }
    return nil;
  }
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
    [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$$$I", @"flush postings as segment ", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(flushState->segmentInfo_))->name_, @" numDocs=", numDocsInRAM_)];
  }
  @try {
    [((OrgApacheLuceneIndexDocConsumer *) nil_chk(consumer_)) flushWithOrgApacheLuceneIndexSegmentWriteState:flushState];
    [((id<JavaUtilMap>) nil_chk(pendingUpdates_->terms_)) clear];
    [segmentInfo_ setFilesWithJavaUtilCollection:create_JavaUtilHashSet_initWithJavaUtilCollection_([((OrgApacheLuceneStoreTrackingDirectoryWrapper *) nil_chk(directory_)) getCreatedFiles])];
    OrgApacheLuceneIndexSegmentCommitInfo *segmentInfoPerCommit = create_OrgApacheLuceneIndexSegmentCommitInfo_initWithOrgApacheLuceneIndexSegmentInfo_withInt_withLong_withLong_withLong_(segmentInfo_, 0, -1LL, -1LL, -1LL);
    if ([infoStream_ isEnabledWithNSString:@"DWPT"]) {
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$I$", @"new segment has ", (flushState->liveDocs_ == nil ? 0 : flushState->delCountOnFlush_), @" deleted docs")];
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$$$$$$$$$$", @"new segment has ", ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(flushState->fieldInfos_)) hasVectors] ? @"vectors" : @"no vectors"), @"; ", ([flushState->fieldInfos_ hasNorms] ? @"norms" : @"no norms"), @"; ", ([flushState->fieldInfos_ hasDocValues] ? @"docValues" : @"no docValues"), @"; ", ([flushState->fieldInfos_ hasProx] ? @"prox" : @"no prox"), @"; ", ([flushState->fieldInfos_ hasFreq] ? @"freqs" : @"no freqs"))];
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$@", @"flushedFiles=", [segmentInfoPerCommit files])];
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$@", @"flushed codec=", codec_)];
    }
    OrgApacheLuceneIndexBufferedUpdates *segmentDeletes;
    if ([((id<JavaUtilMap>) nil_chk(pendingUpdates_->queries_)) isEmpty] && [((id<JavaUtilMap>) nil_chk(pendingUpdates_->numericUpdates_)) isEmpty] && [((id<JavaUtilMap>) nil_chk(pendingUpdates_->binaryUpdates_)) isEmpty]) {
      [pendingUpdates_ clear];
      segmentDeletes = nil;
    }
    else {
      segmentDeletes = pendingUpdates_;
    }
    if ([infoStream_ isEnabledWithNSString:@"DWPT"]) {
      jdouble newSegmentSize = [segmentInfoPerCommit sizeInBytes] / 1024. / 1024.;
      [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$$$$$$$$", @"flushed: segment=", segmentInfo_->name_, @" ramUsed=", [((JavaTextNumberFormat *) nil_chk(nf_)) formatWithDouble:startMBUsed], @" MB newFlushedSize=", [nf_ formatWithDouble:newSegmentSize], @" MB docs/MB=", [nf_ formatWithDouble:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(flushState->segmentInfo_)) maxDoc] / newSegmentSize])];
    }
    JreAssert(segmentInfo_ != nil, @"org/apache/lucene/index/DocumentsWriterPerThread.java:460 condition failed: assert segmentInfo != null;");
    OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *fs = create_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(segmentInfoPerCommit, flushState->fieldInfos_, segmentDeletes, flushState->liveDocs_, flushState->delCountOnFlush_);
    [self sealFlushedSegmentWithOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment:fs];
    return fs;
  }
  @catch (JavaLangThrowable *th) {
    [self abort];
    @throw nil_chk(OrgApacheLuceneIndexAbortingException_wrapWithJavaLangThrowable_(th));
  }
}

- (id<JavaUtilSet>)pendingFilesToDelete {
  return filesToDelete_;
}

- (void)sealFlushedSegmentWithOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment:(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *)flushedSegment {
  JreAssert(flushedSegment != nil, @"org/apache/lucene/index/DocumentsWriterPerThread.java:483 condition failed: assert flushedSegment != null;");
  OrgApacheLuceneIndexSegmentCommitInfo *newSegment = JreRetainedLocalValue(((OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *) nil_chk(flushedSegment))->segmentInfo_);
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(newSegment))->info_, OrgApacheLuceneIndexIndexWriter_SOURCE_FLUSH);
  OrgApacheLuceneStoreIOContext *context = create_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreFlushInfo_(create_OrgApacheLuceneStoreFlushInfo_initWithInt_withLong_([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(newSegment->info_)) maxDoc], [newSegment sizeInBytes]));
  jboolean success = false;
  @try {
    if ([((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(indexWriterConfig_)) getUseCompoundFile]) {
      id<JavaUtilSet> originalFiles = JreRetainedLocalValue([newSegment->info_ files]);
      [((OrgApacheLuceneIndexIndexWriter *) nil_chk(indexWriter_)) createCompoundFileWithOrgApacheLuceneUtilInfoStream:infoStream_ withOrgApacheLuceneStoreTrackingDirectoryWrapper:create_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(directory_) withOrgApacheLuceneIndexSegmentInfo:newSegment->info_ withOrgApacheLuceneStoreIOContext:context];
      [((id<JavaUtilSet>) nil_chk(filesToDelete_)) addAllWithJavaUtilCollection:originalFiles];
      [newSegment->info_ setUseCompoundFileWithBoolean:true];
    }
    [((OrgApacheLuceneCodecsSegmentInfoFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(codec_)) segmentInfoFormat])) writeWithOrgApacheLuceneStoreDirectory:directory_ withOrgApacheLuceneIndexSegmentInfo:newSegment->info_ withOrgApacheLuceneStoreIOContext:context];
    if (flushedSegment->liveDocs_ != nil) {
      jint delCount = flushedSegment->delCount_;
      JreAssert(delCount > 0, @"org/apache/lucene/index/DocumentsWriterPerThread.java:516 condition failed: assert delCount > 0;");
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
        [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$I$J", @"flush: write ", delCount, @" deletes gen=", [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(flushedSegment->segmentInfo_)) getDelGen])];
      }
      OrgApacheLuceneIndexSegmentCommitInfo *info = JreRetainedLocalValue(flushedSegment->segmentInfo_);
      OrgApacheLuceneCodecsCodec *codec = JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_ getCodec]);
      [((OrgApacheLuceneCodecsLiveDocsFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(codec)) liveDocsFormat])) writeLiveDocsWithOrgApacheLuceneUtilMutableBits:flushedSegment->liveDocs_ withOrgApacheLuceneStoreDirectory:directory_ withOrgApacheLuceneIndexSegmentCommitInfo:info withInt:delCount withOrgApacheLuceneStoreIOContext:context];
      [newSegment setDelCountWithInt:delCount];
      [newSegment advanceDelGen];
    }
    success = true;
  }
  @finally {
    if (!success) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWPT"]) {
        [infoStream_ messageWithNSString:@"DWPT" withNSString:JreStrcat("$$", @"hit exception creating compound file for newly flushed segment ", newSegment->info_->name_)];
      }
    }
  }
}

- (OrgApacheLuceneIndexSegmentInfo *)getSegmentInfo {
  return segmentInfo_;
}

- (jlong)bytesUsed {
  return [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) get] + [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(((OrgApacheLuceneIndexBufferedUpdates *) nil_chk(pendingUpdates_))->bytesUsed_)) get];
}

- (NSString *)description {
  return JreStrcat("$@$$$Z$I$@C", @"DocumentsWriterPerThread [pendingDeletes=", pendingUpdates_, @", segment=", (segmentInfo_ != nil ? segmentInfo_->name_ : @"null"), @", aborted=", aborted_, @", numDocsInRAM=", numDocsInRAM_, @", deleteQueue=", deleteQueue_, ']');
}

- (void)__javaClone:(OrgApacheLuceneIndexDocumentsWriterPerThread *)original {
  [super __javaClone:original];
  [indexWriter_ release];
}

- (void)dealloc {
  RELEASE_(codec_);
  RELEASE_(directory_);
  RELEASE_(directoryOrig_);
  RELEASE_(docState_);
  RELEASE_(consumer_);
  RELEASE_(bytesUsed_);
  RELEASE_(flushState_);
  RELEASE_(pendingUpdates_);
  RELEASE_(segmentInfo_);
  RELEASE_(fieldInfos_);
  RELEASE_(infoStream_);
  RELEASE_(deleteQueue_);
  RELEASE_(deleteSlice_);
  RELEASE_(nf_);
  RELEASE_(byteBlockAllocator_);
  RELEASE_(intBlockAllocator_);
  RELEASE_(pendingNumDocs_);
  RELEASE_(indexWriterConfig_);
  RELEASE_(filesToDelete_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldInfos_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, 7, -1, -1 },
    { NULL, "I", 0x1, 8, 5, 6, 9, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFrozenBufferedUpdates;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment;", 0x0, -1, -1, 6, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "V", 0x0, 15, 16, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentInfo;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(abort);
  methods[1].selector = @selector(initPackagePrivateWithOrgApacheLuceneIndexIndexWriter:withNSString:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexLiveIndexWriterConfig:withOrgApacheLuceneUtilInfoStream:withOrgApacheLuceneIndexDocumentsWriterDeleteQueue:withOrgApacheLuceneIndexFieldInfos_Builder:withJavaUtilConcurrentAtomicAtomicLong:withBoolean:);
  methods[2].selector = @selector(getFieldInfosBuilder);
  methods[3].selector = @selector(testPointWithNSString:);
  methods[4].selector = @selector(reserveOneDoc);
  methods[5].selector = @selector(updateDocumentWithJavaLangIterable:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexTerm:);
  methods[6].selector = @selector(updateDocumentsWithJavaLangIterable:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexTerm:);
  methods[7].selector = @selector(finishDocumentWithOrgApacheLuceneIndexTerm:);
  methods[8].selector = @selector(deleteDocIDWithInt:);
  methods[9].selector = @selector(numDeleteTerms);
  methods[10].selector = @selector(getNumDocsInRAM);
  methods[11].selector = @selector(prepareFlush);
  methods[12].selector = @selector(flush);
  methods[13].selector = @selector(pendingFilesToDelete);
  methods[14].selector = @selector(sealFlushedSegmentWithOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment:);
  methods[15].selector = @selector(getSegmentInfo);
  methods[16].selector = @selector(bytesUsed);
  methods[17].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defaultIndexingChain", "LOrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "INFO_VERBOSE", "Z", .constantValue.asBOOL = OrgApacheLuceneIndexDocumentsWriterPerThread_INFO_VERBOSE, 0x1a, -1, -1, -1, -1 },
    { "codec_", "LOrgApacheLuceneCodecsCodec;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "directory_", "LOrgApacheLuceneStoreTrackingDirectoryWrapper;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "directoryOrig_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docState_", "LOrgApacheLuceneIndexDocumentsWriterPerThread_DocState;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "consumer_", "LOrgApacheLuceneIndexDocConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bytesUsed_", "LOrgApacheLuceneUtilCounter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "flushState_", "LOrgApacheLuceneIndexSegmentWriteState;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pendingUpdates_", "LOrgApacheLuceneIndexBufferedUpdates;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "segmentInfo_", "LOrgApacheLuceneIndexSegmentInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "aborted_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fieldInfos_", "LOrgApacheLuceneIndexFieldInfos_Builder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "infoStream_", "LOrgApacheLuceneUtilInfoStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numDocsInRAM_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "deleteQueue_", "LOrgApacheLuceneIndexDocumentsWriterDeleteQueue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "deleteSlice_", "LOrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "nf_", "LJavaTextNumberFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "byteBlockAllocator_", "LOrgApacheLuceneUtilByteBlockPool_Allocator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "intBlockAllocator_", "LOrgApacheLuceneUtilIntBlockPool_Allocator;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "pendingNumDocs_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "indexWriterConfig_", "LOrgApacheLuceneIndexLiveIndexWriterConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "enableTestPoints_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "indexWriter_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "filesToDelete_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "BYTE_BLOCK_NOT_MASK", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriterPerThread_BYTE_BLOCK_NOT_MASK, 0x18, -1, -1, -1, -1 },
    { "MAX_TERM_LENGTH_UTF8", "I", .constantValue.asInt = OrgApacheLuceneIndexDocumentsWriterPerThread_MAX_TERM_LENGTH_UTF8, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexWriter;LNSString;LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexLiveIndexWriterConfig;LOrgApacheLuceneUtilInfoStream;LOrgApacheLuceneIndexDocumentsWriterDeleteQueue;LOrgApacheLuceneIndexFieldInfos_Builder;LJavaUtilConcurrentAtomicAtomicLong;Z", "LJavaIoIOException;", "testPoint", "LNSString;", "updateDocument", "LJavaLangIterable;LOrgApacheLuceneAnalysisAnalyzer;LOrgApacheLuceneIndexTerm;", "LJavaIoIOException;LOrgApacheLuceneIndexAbortingException;", "(Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;)V", "updateDocuments", "(Ljava/lang/Iterable<+Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;>;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;)I", "finishDocument", "LOrgApacheLuceneIndexTerm;", "deleteDocID", "I", "()Ljava/util/Set<Ljava/lang/String;>;", "sealFlushedSegment", "LOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment;", "toString", &OrgApacheLuceneIndexDocumentsWriterPerThread_defaultIndexingChain, "Ljava/util/Set<Ljava/lang/String;>;", "LOrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain;LOrgApacheLuceneIndexDocumentsWriterPerThread_DocState;LOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment;LOrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread = { "DocumentsWriterPerThread", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 18, 27, -1, 20, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexDocumentsWriterPerThread class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexDocumentsWriterPerThread_defaultIndexingChain, new_OrgApacheLuceneIndexDocumentsWriterPerThread_1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexDocumentsWriterPerThread)
  }
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, OrgApacheLuceneIndexIndexWriter *writer, NSString *segmentName, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexLiveIndexWriterConfig *indexWriterConfig, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue, OrgApacheLuceneIndexFieldInfos_Builder *fieldInfos, JavaUtilConcurrentAtomicAtomicLong *pendingNumDocs, jboolean enableTestPoints) {
  NSObject_init(self);
  self->aborted_ = false;
  JreStrongAssign(&self->nf_, JavaTextNumberFormat_getInstanceWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, ROOT)));
  JreStrongAssignAndConsume(&self->filesToDelete_, new_JavaUtilHashSet_init());
  self->indexWriter_ = writer;
  JreStrongAssign(&self->directoryOrig_, directoryOrig);
  JreStrongAssignAndConsume(&self->directory_, new_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(directory));
  JreStrongAssign(&self->fieldInfos_, fieldInfos);
  JreStrongAssign(&self->indexWriterConfig_, indexWriterConfig);
  JreStrongAssign(&self->infoStream_, infoStream);
  JreStrongAssign(&self->codec_, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(indexWriterConfig)) getCodec]);
  JreStrongAssignAndConsume(&self->docState_, new_OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(self, infoStream));
  JreStrongAssign(&self->docState_->similarity_, [indexWriterConfig getSimilarity]);
  JreStrongAssign(&self->pendingNumDocs_, pendingNumDocs);
  JreStrongAssign(&self->bytesUsed_, OrgApacheLuceneUtilCounter_newCounter());
  JreStrongAssignAndConsume(&self->byteBlockAllocator_, new_OrgApacheLuceneUtilByteBlockPool_DirectTrackingAllocator_initWithOrgApacheLuceneUtilCounter_(self->bytesUsed_));
  JreStrongAssignAndConsume(&self->pendingUpdates_, new_OrgApacheLuceneIndexBufferedUpdates_initPackagePrivate());
  JreStrongAssignAndConsume(&self->intBlockAllocator_, new_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(self->bytesUsed_));
  JreStrongAssign(&self->deleteQueue_, deleteQueue);
  JreAssert(self->numDocsInRAM_ == 0, JreStrcat("$I", @"num docs ", self->numDocsInRAM_));
  [self->pendingUpdates_ clear];
  JreStrongAssign(&self->deleteSlice_, [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(deleteQueue)) newSlice]);
  JreStrongAssignAndConsume(&self->segmentInfo_, new_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneUtilVersion_withNSString_withInt_withBoolean_withOrgApacheLuceneCodecsCodec_withJavaUtilMap_withByteArray_withJavaUtilMap_(directoryOrig, JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST), segmentName, -1, false, self->codec_, JavaUtilCollections_emptyMap(), OrgApacheLuceneUtilStringHelper_randomId(), create_JavaUtilHashMap_init()));
  JreAssert(self->numDocsInRAM_ == 0, @"org/apache/lucene/index/DocumentsWriterPerThread.java:189 condition failed: assert numDocsInRAM == 0;");
  JreStrongAssign(&self->consumer_, [((OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain *) nil_chk([indexWriterConfig getIndexingChain])) getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:self]);
  self->enableTestPoints_ = enableTestPoints;
}

OrgApacheLuceneIndexDocumentsWriterPerThread *new_OrgApacheLuceneIndexDocumentsWriterPerThread_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_(OrgApacheLuceneIndexIndexWriter *writer, NSString *segmentName, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexLiveIndexWriterConfig *indexWriterConfig, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue, OrgApacheLuceneIndexFieldInfos_Builder *fieldInfos, JavaUtilConcurrentAtomicAtomicLong *pendingNumDocs, jboolean enableTestPoints) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread, initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_, writer, segmentName, directoryOrig, directory, indexWriterConfig, infoStream, deleteQueue, fieldInfos, pendingNumDocs, enableTestPoints)
}

OrgApacheLuceneIndexDocumentsWriterPerThread *create_OrgApacheLuceneIndexDocumentsWriterPerThread_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_(OrgApacheLuceneIndexIndexWriter *writer, NSString *segmentName, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexLiveIndexWriterConfig *indexWriterConfig, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue, OrgApacheLuceneIndexFieldInfos_Builder *fieldInfos, JavaUtilConcurrentAtomicAtomicLong *pendingNumDocs, jboolean enableTestPoints) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread, initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_, writer, segmentName, directoryOrig, directory, indexWriterConfig, infoStream, deleteQueue, fieldInfos, pendingNumDocs, enableTestPoints)
}

void OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, NSString *message) {
  if (self->enableTestPoints_) {
    JreAssert([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"TP"], @"org/apache/lucene/index/DocumentsWriterPerThread.java:205 condition failed: assert infoStream.isEnabled(\"TP\");");
    [self->infoStream_ messageWithNSString:@"TP" withNSString:message];
  }
}

void OrgApacheLuceneIndexDocumentsWriterPerThread_reserveOneDoc(OrgApacheLuceneIndexDocumentsWriterPerThread *self) {
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) incrementAndGet] > OrgApacheLuceneIndexIndexWriter_getActualMaxDocs()) {
    [self->pendingNumDocs_ decrementAndGet];
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"number of documents in the index cannot exceed ", OrgApacheLuceneIndexIndexWriter_getActualMaxDocs()));
  }
}

void OrgApacheLuceneIndexDocumentsWriterPerThread_finishDocumentWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexDocumentsWriterPerThread *self, OrgApacheLuceneIndexTerm *delTerm) {
  jboolean applySlice = self->numDocsInRAM_ != 0;
  if (delTerm != nil) {
    [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(self->deleteQueue_)) addWithOrgApacheLuceneIndexTerm:delTerm withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice:self->deleteSlice_];
    JreAssert([((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(self->deleteSlice_)) isTailItemWithId:delTerm], @"expected the delete term as the tail item");
  }
  else {
    applySlice &= [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(self->deleteQueue_)) updateSliceWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice:self->deleteSlice_];
  }
  if (applySlice) {
    [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(self->deleteSlice_)) applyWithOrgApacheLuceneIndexBufferedUpdates:self->pendingUpdates_ withInt:self->numDocsInRAM_];
  }
  else {
    [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue_DeleteSlice *) nil_chk(self->deleteSlice_)) reset];
  }
  ++self->numDocsInRAM_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneIndexDocConsumer *)getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)documentsWriterPerThread {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocConsumer;", 0x400, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getChain", "LOrgApacheLuceneIndexDocumentsWriterPerThread;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain = { "IndexingChain", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x408, 2, 0, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain_init(OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriterPerThread_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneIndexDocConsumer *)getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)documentsWriterPerThread {
  return create_OrgApacheLuceneIndexDefaultIndexingChain_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(documentsWriterPerThread);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocConsumer;", 0x0, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getChainWithOrgApacheLuceneIndexDocumentsWriterPerThread:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getChain", "LOrgApacheLuceneIndexDocumentsWriterPerThread;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_1 = { "", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_1;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_1_init(OrgApacheLuceneIndexDocumentsWriterPerThread_1 *self) {
  OrgApacheLuceneIndexDocumentsWriterPerThread_IndexingChain_init(self);
}

OrgApacheLuceneIndexDocumentsWriterPerThread_1 *new_OrgApacheLuceneIndexDocumentsWriterPerThread_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread_1, init)
}

OrgApacheLuceneIndexDocumentsWriterPerThread_1 *create_OrgApacheLuceneIndexDocumentsWriterPerThread_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread_1, init)
}

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_DocState

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)docWriter
                                   withOrgApacheLuceneUtilInfoStream:(OrgApacheLuceneUtilInfoStream *)infoStream {
  OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(self, docWriter, infoStream);
  return self;
}

- (void)testPointWithNSString:(NSString *)name {
  OrgApacheLuceneIndexDocumentsWriterPerThread_testPointWithNSString_(nil_chk(docWriter_), name);
}

- (void)clear {
  JreStrongAssign(&doc_, nil);
  JreStrongAssign(&analyzer_, nil);
}

- (void)__javaClone:(OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *)original {
  [super __javaClone:original];
  [docWriter_ release];
}

- (void)dealloc {
  RELEASE_(analyzer_);
  RELEASE_(infoStream_);
  RELEASE_(similarity_);
  RELEASE_(doc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDocumentsWriterPerThread:withOrgApacheLuceneUtilInfoStream:);
  methods[1].selector = @selector(testPointWithNSString:);
  methods[2].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docWriter_", "LOrgApacheLuceneIndexDocumentsWriterPerThread;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "infoStream_", "LOrgApacheLuceneUtilInfoStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilaritiesSimilarity;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "doc_", "LJavaLangIterable;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocumentsWriterPerThread;LOrgApacheLuceneUtilInfoStream;", "testPoint", "LNSString;", "Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;", "LOrgApacheLuceneIndexDocumentsWriterPerThread;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_DocState = { "DocState", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8, 3, 6, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_DocState;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *self, OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter, OrgApacheLuceneUtilInfoStream *infoStream) {
  NSObject_init(self);
  self->docWriter_ = docWriter;
  JreStrongAssign(&self->infoStream_, infoStream);
}

OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *new_OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter, OrgApacheLuceneUtilInfoStream *infoStream) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread_DocState, initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_, docWriter, infoStream)
}

OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *create_OrgApacheLuceneIndexDocumentsWriterPerThread_DocState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_(OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter, OrgApacheLuceneUtilInfoStream *infoStream) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread_DocState, initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneUtilInfoStream_, docWriter, infoStream)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread_DocState)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment

- (instancetype)initWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)segmentInfo
                           withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos
                      withOrgApacheLuceneIndexBufferedUpdates:(OrgApacheLuceneIndexBufferedUpdates *)segmentUpdates
                           withOrgApacheLuceneUtilMutableBits:(id<OrgApacheLuceneUtilMutableBits>)liveDocs
                                                      withInt:(jint)delCount {
  OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(self, segmentInfo, fieldInfos, segmentUpdates, liveDocs, delCount);
  return self;
}

- (void)dealloc {
  RELEASE_(segmentInfo_);
  RELEASE_(fieldInfos_);
  RELEASE_(segmentUpdates_);
  RELEASE_(liveDocs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentCommitInfo:withOrgApacheLuceneIndexFieldInfos:withOrgApacheLuceneIndexBufferedUpdates:withOrgApacheLuceneUtilMutableBits:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "segmentInfo_", "LOrgApacheLuceneIndexSegmentCommitInfo;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldInfos_", "LOrgApacheLuceneIndexFieldInfos;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "segmentUpdates_", "LOrgApacheLuceneIndexFrozenBufferedUpdates;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "liveDocs_", "LOrgApacheLuceneUtilMutableBits;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "delCount_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentCommitInfo;LOrgApacheLuceneIndexFieldInfos;LOrgApacheLuceneIndexBufferedUpdates;LOrgApacheLuceneUtilMutableBits;I", "LOrgApacheLuceneIndexDocumentsWriterPerThread;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment = { "FlushedSegment", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8, 1, 5, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *self, OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount) {
  NSObject_init(self);
  JreStrongAssign(&self->segmentInfo_, segmentInfo);
  JreStrongAssign(&self->fieldInfos_, fieldInfos);
  JreStrongAssign(&self->segmentUpdates_, segmentUpdates != nil && [segmentUpdates any] ? create_OrgApacheLuceneIndexFrozenBufferedUpdates_initPackagePrivateWithOrgApacheLuceneIndexBufferedUpdates_withBoolean_(segmentUpdates, true) : nil);
  JreStrongAssign(&self->liveDocs_, liveDocs);
  self->delCount_ = delCount;
}

OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *new_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment, initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_, segmentInfo, fieldInfos, segmentUpdates, liveDocs, delCount)
}

OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *create_OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *segmentInfo, OrgApacheLuceneIndexFieldInfos *fieldInfos, OrgApacheLuceneIndexBufferedUpdates *segmentUpdates, id<OrgApacheLuceneUtilMutableBits> liveDocs, jint delCount) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment, initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexFieldInfos_withOrgApacheLuceneIndexBufferedUpdates_withOrgApacheLuceneUtilMutableBits_withInt_, segmentInfo, fieldInfos, segmentUpdates, liveDocs, delCount)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment)

@implementation OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator

- (instancetype)initWithOrgApacheLuceneUtilCounter:(OrgApacheLuceneUtilCounter *)bytesUsed {
  OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(self, bytesUsed);
  return self;
}

- (IOSIntArray *)getIntBlock {
  IOSIntArray *b = [IOSIntArray arrayWithLength:OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE];
  [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT];
  return b;
}

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)offset
                              withInt:(jint)length {
  [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:-(length * (OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT))];
}

- (void)dealloc {
  RELEASE_(bytesUsed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilCounter:);
  methods[1].selector = @selector(getIntBlock);
  methods[2].selector = @selector(recycleIntBlocksWithIntArray2:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bytesUsed_", "LOrgApacheLuceneUtilCounter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilCounter;", "recycleIntBlocks", "[[III", "LOrgApacheLuceneIndexDocumentsWriterPerThread;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator = { "IntBlockAllocator", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0xa, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator;
}

@end

void OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *self, OrgApacheLuceneUtilCounter *bytesUsed) {
  OrgApacheLuceneUtilIntBlockPool_Allocator_initWithInt_(self, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE);
  JreStrongAssign(&self->bytesUsed_, bytesUsed);
}

OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *new_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneUtilCounter *bytesUsed) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator, initWithOrgApacheLuceneUtilCounter_, bytesUsed)
}

OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator *create_OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator_initWithOrgApacheLuceneUtilCounter_(OrgApacheLuceneUtilCounter *bytesUsed) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator, initWithOrgApacheLuceneUtilCounter_, bytesUsed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterPerThread_IntBlockAllocator)
