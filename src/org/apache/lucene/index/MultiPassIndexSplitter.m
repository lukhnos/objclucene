//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./misc/src/java/org/apache/lucene/index/MultiPassIndexSplitter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/FilterCodecReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/MultiPassIndexSplitter.h"
#include "org/apache/lucene/index/MultiReader.h"
#include "org/apache/lucene/index/SlowCodecReaderWrapper.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/lukhnos/portmobile/file/Files.h"
#include "org/lukhnos/portmobile/file/Path.h"
#include "org/lukhnos/portmobile/file/Paths.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/MultiPassIndexSplitter must not be compiled with ARC (-fobjc-arc)"
#endif

/*!
 @brief This class emulates deletions on the underlying index.
 */
@interface OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader : OrgApacheLuceneIndexBaseCompositeReader

- (instancetype)initWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

+ (IOSObjectArray *)initSubReadersWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader OBJC_METHOD_FAMILY_NONE;

- (void)deleteDocumentWithInt:(jint)docID;

- (void)undeleteAll;

- (void)doClose;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader)

__attribute__((unused)) static void OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader *self, OrgApacheLuceneIndexIndexReader *reader);

__attribute__((unused)) static OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader *new_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader *create_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initSubReadersWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader)

@interface OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader : OrgApacheLuceneIndexFilterCodecReader {
 @public
  OrgApacheLuceneUtilFixedBitSet *liveDocs_;
}

- (instancetype)initWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader;

- (jint)numDocs;

- (void)undeleteAll;

- (void)deleteDocumentWithInt:(jint)n;

- (id<OrgApacheLuceneUtilBits>)getLiveDocs;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader, liveDocs_, OrgApacheLuceneUtilFixedBitSet *)

__attribute__((unused)) static void OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader_initWithOrgApacheLuceneIndexCodecReader_(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader *self, OrgApacheLuceneIndexCodecReader *reader);

__attribute__((unused)) static OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader *new_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader_initWithOrgApacheLuceneIndexCodecReader_(OrgApacheLuceneIndexCodecReader *reader) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader *create_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader_initWithOrgApacheLuceneIndexCodecReader_(OrgApacheLuceneIndexCodecReader *reader);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader)

@implementation OrgApacheLuceneIndexMultiPassIndexSplitter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexMultiPassIndexSplitter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)splitWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)inArg
          withOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)outputs
                                     withBoolean:(jboolean)seq {
  if (outputs == nil || outputs->size_ < 2) {
    @throw create_JavaIoIOException_initWithNSString_(@"Invalid number of outputs.");
  }
  if (inArg == nil || [inArg numDocs] < 2) {
    @throw create_JavaIoIOException_initWithNSString_(@"Not enough documents for splitting");
  }
  jint numParts = outputs->size_;
  OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader *input = create_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initWithOrgApacheLuceneIndexIndexReader_(inArg);
  jint maxDoc = [input maxDoc];
  jint partLen = JreIntDiv(maxDoc, numParts);
  for (jint i = 0; i < numParts; i++) {
    [input undeleteAll];
    if (seq) {
      jint lo = partLen * i;
      jint hi = lo + partLen;
      for (jint j = 0; j < lo; j++) {
        [input deleteDocumentWithInt:j];
      }
      if (i < numParts - 1) {
        for (jint j = hi; j < maxDoc; j++) {
          [input deleteDocumentWithInt:j];
        }
      }
    }
    else {
      for (jint j = 0; j < maxDoc; j++) {
        if (JreIntMod((j + numParts - i), numParts) != 0) {
          [input deleteDocumentWithInt:j];
        }
      }
    }
    OrgApacheLuceneIndexIndexWriter *w = create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(IOSObjectArray_Get(outputs, i), [create_OrgApacheLuceneIndexIndexWriterConfig_initWithOrgApacheLuceneAnalysisAnalyzer_(nil) setOpenModeWithOrgApacheLuceneIndexIndexWriterConfig_OpenMode:JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE)]);
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$I$", @"Writing part ", (i + 1), @" ...")];
    id<JavaUtilList> sr = [input getSequentialSubReaders];
    [w addIndexesWithOrgApacheLuceneIndexCodecReaderArray:[((id<JavaUtilList>) nil_chk(sr)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[sr size] type:OrgApacheLuceneIndexCodecReader_class_()]]];
    [w close];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Done."];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgApacheLuceneIndexMultiPassIndexSplitter_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(splitWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneStoreDirectoryArray:withBoolean:);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "split", "LOrgApacheLuceneIndexIndexReader;[LOrgApacheLuceneStoreDirectory;Z", "LJavaIoIOException;", "main", "[LNSString;", "LJavaLangException;", "LOrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader;LOrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiPassIndexSplitter = { "MultiPassIndexSplitter", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, 6, -1, -1, -1 };
  return &_OrgApacheLuceneIndexMultiPassIndexSplitter;
}

@end

void OrgApacheLuceneIndexMultiPassIndexSplitter_init(OrgApacheLuceneIndexMultiPassIndexSplitter *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexMultiPassIndexSplitter *new_OrgApacheLuceneIndexMultiPassIndexSplitter_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiPassIndexSplitter, init)
}

OrgApacheLuceneIndexMultiPassIndexSplitter *create_OrgApacheLuceneIndexMultiPassIndexSplitter_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiPassIndexSplitter, init)
}

void OrgApacheLuceneIndexMultiPassIndexSplitter_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheLuceneIndexMultiPassIndexSplitter_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ < 5) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"Usage: MultiPassIndexSplitter -out <outputDir> -num <numParts> [-seq] <inputIndex1> [<inputIndex2 ...]"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"\tinputIndex\tpath to input index, multiple values are ok"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"\t-out ouputDir\tpath to output directory to contain partial indexes"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"\t-num numParts\tnumber of parts to produce"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:@"\t-seq\tsequential docid-range split (default is round-robin)"];
    JavaLangSystem_exitWithInt_(-1);
  }
  JavaUtilArrayList *indexes = create_JavaUtilArrayList_init();
  NSString *outDir = nil;
  jint numParts = -1;
  jboolean seq = false;
  for (jint i = 0; i < args->size_; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-out"]) {
      outDir = IOSObjectArray_Get(args, ++i);
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-num"]) {
      numParts = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(args, ++i));
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(args, i))) isEqual:@"-seq"]) {
      seq = true;
    }
    else {
      OrgLukhnosPortmobileFilePath *file = OrgLukhnosPortmobileFilePaths_getWithNSString_(IOSObjectArray_Get(args, i));
      if (!OrgLukhnosPortmobileFileFiles_isDirectoryWithOrgLukhnosPortmobileFilePath_(file)) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Invalid input path - skipping: ", file)];
        continue;
      }
      OrgApacheLuceneStoreDirectory *dir = OrgApacheLuceneStoreFSDirectory_openWithOrgLukhnosPortmobileFilePath_(file);
      @try {
        if (!OrgApacheLuceneIndexDirectoryReader_indexExistsWithOrgApacheLuceneStoreDirectory_(dir)) {
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Invalid input index - skipping: ", file)];
          continue;
        }
      }
      @catch (JavaLangException *e) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Invalid input index - skipping: ", file)];
        continue;
      }
      [indexes addWithId:OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneStoreDirectory_(dir)];
    }
  }
  if (outDir == nil) {
    @throw create_JavaLangException_initWithNSString_(@"Required argument missing: -out outputDir");
  }
  if (numParts < 2) {
    @throw create_JavaLangException_initWithNSString_(@"Invalid value of required argument: -num numParts");
  }
  if ([indexes size] == 0) {
    @throw create_JavaLangException_initWithNSString_(@"No input indexes to process");
  }
  OrgLukhnosPortmobileFilePath *out = OrgLukhnosPortmobileFilePaths_getWithNSString_(outDir);
  OrgLukhnosPortmobileFileFiles_createDirectoriesWithOrgLukhnosPortmobileFilePath_(out);
  IOSObjectArray *dirs = [IOSObjectArray arrayWithLength:numParts type:OrgApacheLuceneStoreDirectory_class_()];
  for (jint i = 0; i < numParts; i++) {
    IOSObjectArray_Set(dirs, i, OrgApacheLuceneStoreFSDirectory_openWithOrgLukhnosPortmobileFilePath_([((OrgLukhnosPortmobileFilePath *) nil_chk(out)) resolveWithNSString:JreStrcat("$I", @"part-", i)]));
  }
  OrgApacheLuceneIndexMultiPassIndexSplitter *splitter = create_OrgApacheLuceneIndexMultiPassIndexSplitter_init();
  OrgApacheLuceneIndexIndexReader *input;
  if ([indexes size] == 1) {
    input = [indexes getWithInt:0];
  }
  else {
    input = create_OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_([indexes toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[indexes size] type:OrgApacheLuceneIndexIndexReader_class_()]]);
  }
  [splitter splitWithOrgApacheLuceneIndexIndexReader:input withOrgApacheLuceneStoreDirectoryArray:dirs withBoolean:seq];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiPassIndexSplitter)

@implementation OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader

- (instancetype)initWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initWithOrgApacheLuceneIndexIndexReader_(self, reader);
  return self;
}

+ (IOSObjectArray *)initSubReadersWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  return OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initSubReadersWithOrgApacheLuceneIndexIndexReader_(reader);
}

- (void)deleteDocumentWithInt:(jint)docID {
  jint i = [self readerIndexWithInt:docID];
  [((OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader *) nil_chk([((id<JavaUtilList>) nil_chk([self getSequentialSubReaders])) getWithInt:i])) deleteDocumentWithInt:docID - [self readerBaseWithInt:i]];
}

- (void)undeleteAll {
  for (OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader * __strong r in nil_chk([self getSequentialSubReaders])) {
    [((OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader *) nil_chk(r)) undeleteAll];
  }
}

- (void)doClose {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader;", 0xa, 2, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexReader:);
  methods[1].selector = @selector(initSubReadersWithOrgApacheLuceneIndexIndexReader:);
  methods[2].selector = @selector(deleteDocumentWithInt:);
  methods[3].selector = @selector(undeleteAll);
  methods[4].selector = @selector(doClose);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "initSubReaders", "deleteDocument", "I", "LOrgApacheLuceneIndexMultiPassIndexSplitter;", "Lorg/apache/lucene/index/BaseCompositeReader<Lorg/apache/lucene/index/MultiPassIndexSplitter$FakeDeleteLeafIndexReader;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader = { "FakeDeleteIndexReader", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x1a, 5, 0, 5, -1, -1, 6, -1 };
  return &_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader;
}

@end

void OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader *self, OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneIndexBaseCompositeReader_initWithOrgApacheLuceneIndexIndexReaderArray_(self, OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initSubReadersWithOrgApacheLuceneIndexIndexReader_(reader));
}

OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader *new_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader, initWithOrgApacheLuceneIndexIndexReader_, reader)
}

OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader *create_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader, initWithOrgApacheLuceneIndexIndexReader_, reader)
}

IOSObjectArray *OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initSubReadersWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *reader) {
  OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader_initialize();
  id<JavaUtilList> leaves = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) leaves];
  IOSObjectArray *subs = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(leaves)) size] type:OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader_class_()];
  jint i = 0;
  for (OrgApacheLuceneIndexLeafReaderContext * __strong ctx in leaves) {
    IOSObjectArray_SetAndConsume(subs, i++, new_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader_initWithOrgApacheLuceneIndexCodecReader_(OrgApacheLuceneIndexSlowCodecReaderWrapper_wrapWithOrgApacheLuceneIndexLeafReader_([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(ctx)) reader])));
  }
  return subs;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteIndexReader)

@implementation OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader

- (instancetype)initWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader {
  OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader_initWithOrgApacheLuceneIndexCodecReader_(self, reader);
  return self;
}

- (jint)numDocs {
  return [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(liveDocs_)) cardinality];
}

- (void)undeleteAll {
  jint maxDoc = [((OrgApacheLuceneIndexCodecReader *) nil_chk(in_)) maxDoc];
  JreStrongAssignAndConsume(&liveDocs_, new_OrgApacheLuceneUtilFixedBitSet_initWithInt_([in_ maxDoc]));
  if ([in_ hasDeletions]) {
    id<OrgApacheLuceneUtilBits> oldLiveDocs = [in_ getLiveDocs];
    JreAssert(oldLiveDocs != nil, @"org/apache/lucene/index/MultiPassIndexSplitter.java:233 condition failed: assert oldLiveDocs != null;");
    for (jint i = 0; i < maxDoc; i++) {
      if ([((id<OrgApacheLuceneUtilBits>) nil_chk(oldLiveDocs)) getWithInt:i]) [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(liveDocs_)) setWithInt:i];
    }
  }
  else {
    [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(liveDocs_)) setWithInt:0 withInt:maxDoc];
  }
}

- (void)deleteDocumentWithInt:(jint)n {
  [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(liveDocs_)) clearWithInt:n];
}

- (id<OrgApacheLuceneUtilBits>)getLiveDocs {
  return liveDocs_;
}

- (void)dealloc {
  RELEASE_(liveDocs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBits;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexCodecReader:);
  methods[1].selector = @selector(numDocs);
  methods[2].selector = @selector(undeleteAll);
  methods[3].selector = @selector(deleteDocumentWithInt:);
  methods[4].selector = @selector(getLiveDocs);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "liveDocs_", "LOrgApacheLuceneUtilFixedBitSet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCodecReader;", "deleteDocument", "I", "LOrgApacheLuceneIndexMultiPassIndexSplitter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader = { "FakeDeleteLeafIndexReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1a, 5, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader;
}

@end

void OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader_initWithOrgApacheLuceneIndexCodecReader_(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader *self, OrgApacheLuceneIndexCodecReader *reader) {
  OrgApacheLuceneIndexFilterCodecReader_initWithOrgApacheLuceneIndexCodecReader_(self, reader);
  [self undeleteAll];
}

OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader *new_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader_initWithOrgApacheLuceneIndexCodecReader_(OrgApacheLuceneIndexCodecReader *reader) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader, initWithOrgApacheLuceneIndexCodecReader_, reader)
}

OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader *create_OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader_initWithOrgApacheLuceneIndexCodecReader_(OrgApacheLuceneIndexCodecReader *reader) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader, initWithOrgApacheLuceneIndexCodecReader_, reader)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiPassIndexSplitter_FakeDeleteLeafIndexReader)
