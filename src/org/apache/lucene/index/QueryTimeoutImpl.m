//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/QueryTimeoutImpl.java
//

#include "J2ObjC_source.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/apache/lucene/index/QueryTimeoutImpl.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/QueryTimeoutImpl must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexQueryTimeoutImpl () {
 @public
  /*!
   @brief The local variable to store the time beyond which, the processing should exit.
   */
  JavaLangLong *timeoutAt_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexQueryTimeoutImpl, timeoutAt_, JavaLangLong *)

@implementation OrgApacheLuceneIndexQueryTimeoutImpl

- (instancetype)initWithLong:(jlong)timeAllowed {
  OrgApacheLuceneIndexQueryTimeoutImpl_initWithLong_(self, timeAllowed);
  return self;
}

- (JavaLangLong *)getTimeoutAt {
  return timeoutAt_;
}

- (jboolean)shouldExit {
  return timeoutAt_ != nil && JavaLangSystem_nanoTime() - [((JavaLangLong *) nil_chk(timeoutAt_)) longLongValue] > 0;
}

- (void)reset {
  JreStrongAssign(&timeoutAt_, nil);
}

- (NSString *)description {
  return JreStrcat("$@$JC", @"timeoutAt: ", timeoutAt_, @" (System.nanoTime(): ", JavaLangSystem_nanoTime(), ')');
}

- (void)dealloc {
  RELEASE_(timeoutAt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(getTimeoutAt);
  methods[2].selector = @selector(shouldExit);
  methods[3].selector = @selector(reset);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "timeoutAt_", "LJavaLangLong;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "toString" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexQueryTimeoutImpl = { "QueryTimeoutImpl", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexQueryTimeoutImpl;
}

@end

void OrgApacheLuceneIndexQueryTimeoutImpl_initWithLong_(OrgApacheLuceneIndexQueryTimeoutImpl *self, jlong timeAllowed) {
  NSObject_init(self);
  if (timeAllowed < 0LL) {
    timeAllowed = JavaLangLong_MAX_VALUE;
  }
  JreStrongAssign(&self->timeoutAt_, JavaLangLong_valueOfWithLong_(JavaLangSystem_nanoTime() + [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, NANOSECONDS))) convertWithLong:timeAllowed withJavaUtilConcurrentTimeUnit:JreLoadEnum(JavaUtilConcurrentTimeUnit, MILLISECONDS)]));
}

OrgApacheLuceneIndexQueryTimeoutImpl *new_OrgApacheLuceneIndexQueryTimeoutImpl_initWithLong_(jlong timeAllowed) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexQueryTimeoutImpl, initWithLong_, timeAllowed)
}

OrgApacheLuceneIndexQueryTimeoutImpl *create_OrgApacheLuceneIndexQueryTimeoutImpl_initWithLong_(jlong timeAllowed) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexQueryTimeoutImpl, initWithLong_, timeAllowed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexQueryTimeoutImpl)
