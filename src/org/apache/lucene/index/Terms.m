//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/Terms.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/index/AutomatonTermsEnum.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/Terms must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexTerms_1 : OrgApacheLuceneIndexAutomatonTermsEnum {
 @public
  OrgApacheLuceneUtilBytesRef *val$startTerm_;
}

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)capture$0
                  withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)tenum
  withOrgApacheLuceneUtilAutomatonCompiledAutomaton:(OrgApacheLuceneUtilAutomatonCompiledAutomaton *)compiled;

- (OrgApacheLuceneUtilBytesRef *)nextSeekTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexTerms_1)

__attribute__((unused)) static void OrgApacheLuceneIndexTerms_1_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneIndexTerms_1 *self, OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled);

__attribute__((unused)) static OrgApacheLuceneIndexTerms_1 *new_OrgApacheLuceneIndexTerms_1_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexTerms_1 *create_OrgApacheLuceneIndexTerms_1_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexTerms)

IOSObjectArray *OrgApacheLuceneIndexTerms_EMPTY_ARRAY;

@implementation OrgApacheLuceneIndexTerms

+ (IOSObjectArray *)EMPTY_ARRAY {
  return OrgApacheLuceneIndexTerms_EMPTY_ARRAY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexTerms_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgApacheLuceneIndexTermsEnum *)iterator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexTermsEnum *)intersectWithOrgApacheLuceneUtilAutomatonCompiledAutomaton:(OrgApacheLuceneUtilAutomatonCompiledAutomaton *)compiled
                                                              withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm {
  OrgApacheLuceneIndexTermsEnum *termsEnum = JreRetainedLocalValue([self iterator]);
  if (((OrgApacheLuceneUtilAutomatonCompiledAutomaton *) nil_chk(compiled))->type_ != JreLoadEnum(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NORMAL)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"please use CompiledAutomaton.getTermsEnum instead");
  }
  if (startTerm == nil) {
    return create_OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(termsEnum, compiled);
  }
  else {
    return create_OrgApacheLuceneIndexTerms_1_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(startTerm, termsEnum, compiled);
  }
}

- (jlong)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getSumTotalTermFreq {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getSumDocFreq {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getDocCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasFreqs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasOffsets {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasPositions {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasPayloads {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneUtilBytesRef *)getMin {
  return [((OrgApacheLuceneIndexTermsEnum *) nil_chk([self iterator])) next];
}

- (OrgApacheLuceneUtilBytesRef *)getMax {
  jlong size = [self size];
  if (size == 0) {
    return nil;
  }
  else if (size >= 0) {
    @try {
      OrgApacheLuceneIndexTermsEnum *iterator = JreRetainedLocalValue([self iterator]);
      [((OrgApacheLuceneIndexTermsEnum *) nil_chk(iterator)) seekExactWithLong:size - 1];
      return [iterator term];
    }
    @catch (JavaLangUnsupportedOperationException *e) {
    }
  }
  OrgApacheLuceneIndexTermsEnum *iterator = JreRetainedLocalValue([self iterator]);
  OrgApacheLuceneUtilBytesRef *v = JreRetainedLocalValue([((OrgApacheLuceneIndexTermsEnum *) nil_chk(iterator)) next]);
  if (v == nil) {
    return v;
  }
  OrgApacheLuceneUtilBytesRefBuilder *scratch = create_OrgApacheLuceneUtilBytesRefBuilder_init();
  [scratch appendWithByte:(jbyte) 0];
  while (true) {
    jint low = 0;
    jint high = 256;
    while (low != high) {
      jint mid = JreURShift32((low + high), 1);
      [scratch setByteAtWithInt:[scratch length] - 1 withByte:(jbyte) mid];
      if ([iterator seekCeilWithOrgApacheLuceneUtilBytesRef:[scratch get]] == JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, END)) {
        if (mid == 0) {
          [scratch setLengthWithInt:[scratch length] - 1];
          return [scratch get];
        }
        high = mid;
      }
      else {
        if (low == mid) {
          break;
        }
        low = mid;
      }
    }
    [scratch setLengthWithInt:[scratch length] + 1];
    [scratch growWithInt:[scratch length]];
  }
}

- (id)getStats {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithNSString:JreStrcat("$$", @"impl=", [[self java_getClass] getSimpleName])];
  [sb appendWithNSString:JreStrcat("$J", @",size=", [self size])];
  [sb appendWithNSString:JreStrcat("$I", @",docCount=", [self getDocCount])];
  [sb appendWithNSString:JreStrcat("$J", @",sumTotalTermFreq=", [self getSumTotalTermFreq])];
  [sb appendWithNSString:JreStrcat("$J", @",sumDocFreq=", [self getSumDocFreq])];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x1, 1, 2, 0, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(iterator);
  methods[2].selector = @selector(intersectWithOrgApacheLuceneUtilAutomatonCompiledAutomaton:withOrgApacheLuceneUtilBytesRef:);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(getSumTotalTermFreq);
  methods[5].selector = @selector(getSumDocFreq);
  methods[6].selector = @selector(getDocCount);
  methods[7].selector = @selector(hasFreqs);
  methods[8].selector = @selector(hasOffsets);
  methods[9].selector = @selector(hasPositions);
  methods[10].selector = @selector(hasPayloads);
  methods[11].selector = @selector(getMin);
  methods[12].selector = @selector(getMax);
  methods[13].selector = @selector(getStats);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ARRAY", "[LOrgApacheLuceneIndexTerms;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoIOException;", "intersect", "LOrgApacheLuceneUtilAutomatonCompiledAutomaton;LOrgApacheLuceneUtilBytesRef;", &OrgApacheLuceneIndexTerms_EMPTY_ARRAY };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTerms = { "Terms", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x401, 14, 1, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTerms;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexTerms class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexTerms_EMPTY_ARRAY, [IOSObjectArray newArrayWithLength:0 type:OrgApacheLuceneIndexTerms_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexTerms)
  }
}

@end

void OrgApacheLuceneIndexTerms_init(OrgApacheLuceneIndexTerms *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTerms)

@implementation OrgApacheLuceneIndexTerms_1

- (instancetype)initWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)capture$0
                  withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)tenum
  withOrgApacheLuceneUtilAutomatonCompiledAutomaton:(OrgApacheLuceneUtilAutomatonCompiledAutomaton *)compiled {
  OrgApacheLuceneIndexTerms_1_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(self, capture$0, tenum, compiled);
  return self;
}

- (OrgApacheLuceneUtilBytesRef *)nextSeekTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  if (term == nil) {
    term = val$startTerm_;
  }
  return JreRetainedLocalValue([super nextSeekTermWithOrgApacheLuceneUtilBytesRef:term]);
}

- (void)dealloc {
  RELEASE_(val$startTerm_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x4, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermsEnum:withOrgApacheLuceneUtilAutomatonCompiledAutomaton:);
  methods[1].selector = @selector(nextSeekTermWithOrgApacheLuceneUtilBytesRef:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$startTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneIndexTermsEnum;LOrgApacheLuceneUtilAutomatonCompiledAutomaton;", "nextSeekTerm", "LOrgApacheLuceneUtilBytesRef;", "LJavaIoIOException;", "LOrgApacheLuceneIndexTerms;", "intersectWithOrgApacheLuceneUtilAutomatonCompiledAutomaton:withOrgApacheLuceneUtilBytesRef:" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTerms_1 = { "", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8010, 2, 1, 4, -1, 5, -1, -1 };
  return &_OrgApacheLuceneIndexTerms_1;
}

@end

void OrgApacheLuceneIndexTerms_1_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneIndexTerms_1 *self, OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled) {
  JreStrongAssign(&self->val$startTerm_, capture$0);
  OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(self, tenum, compiled);
}

OrgApacheLuceneIndexTerms_1 *new_OrgApacheLuceneIndexTerms_1_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTerms_1, initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_, capture$0, tenum, compiled)
}

OrgApacheLuceneIndexTerms_1 *create_OrgApacheLuceneIndexTerms_1_initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneUtilBytesRef *capture$0, OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTerms_1, initWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_, capture$0, tenum, compiled)
}
