//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/IndexWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Iterable.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/CompoundFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/index/AbortingException.h"
#include "org/apache/lucene/index/BufferedUpdatesStream.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/DocValuesFieldUpdates.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "org/apache/lucene/index/DocValuesUpdate.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FlushPolicy.h"
#include "org/apache/lucene/index/FrozenBufferedUpdates.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexFileDeleter.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeRateLimiter.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/index/ReadersAndUpdates.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentMerger.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/StandardDirectoryReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/MatchAllDocsQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FilterDirectory.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "org/apache/lucene/store/LockValidatingDirectoryWrapper.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "org/apache/lucene/store/RateLimitedIndexOutput.h"
#include "org/apache/lucene/store/SleepingLockWrapper.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"
#include "org/apache/lucene/util/Constants.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"
#include "org/apache/lucene/util/Version.h"
#include "org/lukhnos/portmobile/file/NoSuchFileException.h"

@class OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates;

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/IndexWriter must not be compiled with ARC (-fobjc-arc)"
#if !__has_feature(objc_arc_weak)
#error "org/apache/lucene/index/IndexWriter must be compiled with weak references support (-fobjc-weak)"
#endif
#endif

@interface OrgApacheLuceneIndexIndexWriter () {
 @public
  OrgApacheLuceneStoreDirectory *directoryOrig_;
  OrgApacheLuceneStoreDirectory *directory_;
  OrgApacheLuceneStoreDirectory *mergeDirectory_;
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  JavaUtilConcurrentAtomicAtomicLong *changeCount_;
  volatile_jlong lastCommitChangeCount_;
  id<JavaUtilList> rollbackSegments_;
  id<JavaUtilCollection> filesToCommit_;
  OrgApacheLuceneIndexDocumentsWriter *docWriter_;
  id<JavaUtilQueue> eventQueue_;
  id<JavaUtilMap> segmentsToMerge_;
  jint mergeMaxNumSegments_;
  OrgApacheLuceneStoreLock *writeLock_;
  volatile_jboolean closed_;
  volatile_jboolean closing_;
  JavaUtilHashSet *mergingSegments_;
  OrgApacheLuceneIndexMergeScheduler *mergeScheduler_;
  JavaUtilLinkedList *pendingMerges_;
  id<JavaUtilSet> runningMerges_;
  id<JavaUtilList> mergeExceptions_;
  jlong mergeGen_;
  jboolean stopMerges_;
  jboolean didMessageState_;
  volatile_jboolean poolReaders_;
  OrgApacheLuceneIndexLiveIndexWriterConfig *config_;
  /*!
   @brief System.nanoTime() when commit started; used to write
   an infoStream message about how long commit took.
   */
  jlong startCommitTime_;
  id commitLock_;
  id fullFlushLock_;
  jboolean keepFullyDeletedSegments_;
}

/*!
 @brief Loads or returns the already loaded the global field number map for this <code>SegmentInfos</code>.
 If this <code>SegmentInfos</code> has no global field number map the returned instance is empty
 */
- (OrgApacheLuceneIndexFieldInfos_FieldNumbers *)getFieldNumberMap;

- (void)messageState;

/*!
 @brief Gracefully closes (commits, waits for merges), but calls rollback
  if there's an exc so the IndexWriter is always closed.This is called
  from <code>close</code> when <code>IndexWriterConfig.commitOnClose</code> is 
 <code>true</code>.
 */
- (void)shutdown;

- (jboolean)shouldCloseWithBoolean:(jboolean)waitForClose;

/*!
 @brief Returns true if any merges in pendingMerges or
   runningMerges are maxNumSegments merges.
 */
- (jboolean)maxNumSegmentsMergesPending;

- (void)maybeMergeWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy
                 withOrgApacheLuceneIndexMergeTrigger:(OrgApacheLuceneIndexMergeTrigger *)trigger
                                              withInt:(jint)maxNumSegments;

- (jboolean)updatePendingMergesWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy
                              withOrgApacheLuceneIndexMergeTrigger:(OrgApacheLuceneIndexMergeTrigger *)trigger
                                                           withInt:(jint)maxNumSegments;

- (void)rollbackInternal;

/*!
 @brief Aborts running merges.Be careful when using this
   method: when you abort a long-running merge, you lose
   a lot of work that must later be redone.
 */
- (void)abortMerges;

- (void)resetMergeExceptions;

- (void)noDupDirsWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs;

/*!
 @brief Acquires write locks on all the directories; be sure
   to match with a call to <code>IOUtils.close</code> in a
   finally clause.
 */
- (id<JavaUtilList>)acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs;

/*!
 @brief Copies the segment files as-is into the IndexWriter's directory.
 */
- (OrgApacheLuceneIndexSegmentCommitInfo *)copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                                                       withNSString:(NSString *)segName
                                                                  withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context OBJC_METHOD_FAMILY_NONE;

- (void)prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy;

- (void)commitInternalWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy;

- (void)finishCommit;

/*!
 @brief Returns true a segment was flushed or deletes were applied.
 */
- (jboolean)doFlushWithBoolean:(jboolean)applyAllDeletes;

- (void)ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

- (void)skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:(IOSObjectArray *)updatesIters
                                                                          withInt:(jint)deletedDoc;

- (void)maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                           withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState
                                                                      withInt:(jint)docUpto
                  withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates:(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *)holder
                                                            withNSStringArray:(IOSObjectArray *)mergingFields
                           withOrgApacheLuceneIndexDocValuesFieldUpdatesArray:(IOSObjectArray *)dvFieldUpdates
                  withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:(IOSObjectArray *)updatesIters
                                                                      withInt:(jint)curDoc;

/*!
 @brief Carefully merges deletes and updates for the segments we just merged.This
  is tricky because, although merging will clear all deletes (compacts the
  documents) and compact all the updates, new deletes and updates may have
  been flushed to the segments since the merge was started.
 This method
  "carries over" such new deletes and updates onto the newly merged segment,
  and saves the resulting deletes and updates files (incrementing the delete
  and DV generations for merge.info). If no deletes were flushed, no new
  deletes file is saved.
 */
- (OrgApacheLuceneIndexReadersAndUpdates *)commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                                                  withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState;

- (jboolean)commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                 withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState;

- (void)handleMergeExceptionWithJavaLangThrowable:(JavaLangThrowable *)t
     withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

- (void)_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

+ (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source
                                          withJavaUtilMap:(id<JavaUtilMap>)details;

- (void)closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                          withBoolean:(jboolean)suppressExceptions;

/*!
 @brief Does the actual (time-consuming) work of the merge,
   but without holding synchronized lock on IndexWriter
   instance
 */
- (jint)mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                            withOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy;

- (void)doWait;

- (jboolean)filesExistWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync;

/*!
 @brief Walk through all files referenced by the current
   segmentInfos and ask the Directory to sync each file,
   if it wasn't already.If that succeeds, then we
   prepare a new segments_N file but do not fully commit
   it.
 */
- (void)startCommitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync;

- (void)testPointWithNSString:(NSString *)message;

- (void)deletePendingFiles;

- (jboolean)processEventsWithBoolean:(jboolean)triggerMerge
                         withBoolean:(jboolean)forcePurge;

- (jboolean)processEventsWithJavaUtilQueue:(id<JavaUtilQueue>)queue
                               withBoolean:(jboolean)triggerMerge
                               withBoolean:(jboolean)forcePurge;

/*!
 @brief Anything that will add N docs to the index should reserve first to
   make sure it's allowed.This will throw <code>IllegalArgumentException</code>
  if it's not allowed.
 */
- (void)reserveDocsWithLong:(jlong)addedNumDocs;

/*!
 @brief Does a best-effort check, that the current index would accept this many additional docs, but does not actually reserve them.
 @throw IllegalArgumentExceptionif there would be too many docs
 */
- (void)testReserveDocsWithLong:(jlong)addedNumDocs;

- (void)tooManyDocsWithLong:(jlong)addedNumDocs;

/*!
 @brief Wraps the incoming <code>Directory</code> so that we assign a per-thread
   <code>MergeRateLimiter</code> to all created <code>IndexOutput</code>s.
 */
- (OrgApacheLuceneStoreDirectory *)addMergeRateLimitersWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)inArg;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, directoryOrig_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, directory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergeDirectory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, changeCount_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, rollbackSegments_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, filesToCommit_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, docWriter_, OrgApacheLuceneIndexDocumentsWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, eventQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, segmentsToMerge_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, writeLock_, OrgApacheLuceneStoreLock *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergingSegments_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergeScheduler_, OrgApacheLuceneIndexMergeScheduler *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, pendingMerges_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, runningMerges_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, mergeExceptions_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, config_, OrgApacheLuceneIndexLiveIndexWriterConfig *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, commitLock_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter, fullFlushLock_, id)

inline jint OrgApacheLuceneIndexIndexWriter_get_actualMaxDocs(void);
inline jint OrgApacheLuceneIndexIndexWriter_set_actualMaxDocs(jint value);
inline jint *OrgApacheLuceneIndexIndexWriter_getRef_actualMaxDocs(void);
static jint OrgApacheLuceneIndexIndexWriter_actualMaxDocs = 2147483519;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgApacheLuceneIndexIndexWriter, actualMaxDocs, jint)

inline jint OrgApacheLuceneIndexIndexWriter_get_UNBOUNDED_MAX_MERGE_SEGMENTS(void);
#define OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexIndexWriter, UNBOUNDED_MAX_MERGE_SEGMENTS, jint)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean failIfClosing);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_ensureOpen(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static OrgApacheLuceneIndexFieldInfos_FieldNumbers *OrgApacheLuceneIndexIndexWriter_getFieldNumberMap(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_messageState(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_shutdown(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean waitForClose);

__attribute__((unused)) static NSString *OrgApacheLuceneIndexIndexWriter_newSegmentName(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_maybeMerge(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy, OrgApacheLuceneIndexMergeTrigger *trigger, jint maxNumSegments);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy, OrgApacheLuceneIndexMergeTrigger *trigger, jint maxNumSegments);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_rollbackInternal(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_abortMerges(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs);

__attribute__((unused)) static id<JavaUtilList> OrgApacheLuceneIndexIndexWriter_acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs);

__attribute__((unused)) static OrgApacheLuceneIndexSegmentCommitInfo *OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo_withNSString_withOrgApacheLuceneStoreIOContext_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentCommitInfo *info, NSString *segName, OrgApacheLuceneStoreIOContext *context);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_finishCommit(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean applyAllDeletes);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *updatesIters, jint deletedDoc);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState, jint docUpto, OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *holder, IOSObjectArray *mergingFields, IOSObjectArray *dvFieldUpdates, IOSObjectArray *updatesIters, jint curDoc);

__attribute__((unused)) static OrgApacheLuceneIndexReadersAndUpdates *OrgApacheLuceneIndexIndexWriter_commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, JavaLangThrowable *t, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(OrgApacheLuceneIndexSegmentInfo *info, NSString *source, id<JavaUtilMap> details);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, jboolean suppressExceptions);

__attribute__((unused)) static jint OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergePolicy *mergePolicy);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_doWait(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(OrgApacheLuceneIndexIndexWriter *self, NSString *message);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_deletePendingFiles(OrgApacheLuceneIndexIndexWriter *self);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneStoreTrackingDirectoryWrapper *directory, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneStoreIOContext *context);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilCollection> files);

__attribute__((unused)) static jint OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean forced);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean forcePurge);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_processEventsWithJavaUtilQueue_withBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilQueue> queue, jboolean triggerMerge, jboolean forcePurge);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs);

__attribute__((unused)) static OrgApacheLuceneStoreDirectory *OrgApacheLuceneIndexIndexWriter_addMergeRateLimitersWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *inArg);

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$0(void);

@interface OrgApacheLuceneIndexIndexWriter_ReaderPool () {
 @public
  WEAK_ OrgApacheLuceneIndexIndexWriter *this$0_;
  id<JavaUtilMap> readerMap_;
}

- (jboolean)noDups;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_ReaderPool, readerMap_, id<JavaUtilMap>)

__attribute__((unused)) static jboolean OrgApacheLuceneIndexIndexWriter_ReaderPool_noDups(OrgApacheLuceneIndexIndexWriter_ReaderPool *self);

@interface OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates : NSObject {
 @public
  OrgApacheLuceneIndexReadersAndUpdates *mergedDeletesAndUpdates_;
  OrgApacheLuceneIndexMergePolicy_DocMap *docMap_;
  jboolean initializedWritableLiveDocs_;
}

- (instancetype)init;

- (void)init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool:(OrgApacheLuceneIndexIndexWriter_ReaderPool *)readerPool
                withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                          withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState
                                                 withBoolean:(jboolean)initWritableLiveDocs OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates, mergedDeletesAndUpdates_, OrgApacheLuceneIndexReadersAndUpdates *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates, docMap_, OrgApacheLuceneIndexMergePolicy_DocMap *)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *self);

__attribute__((unused)) static OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *new_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *create_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init(void);

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *self, OrgApacheLuceneIndexIndexWriter_ReaderPool *readerPool, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState, jboolean initWritableLiveDocs);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates)

@interface OrgApacheLuceneIndexIndexWriter_Event : NSObject

@end

@interface OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory : OrgApacheLuceneStoreFilterDirectory {
 @public
  WEAK_ OrgApacheLuceneIndexIndexWriter *this$0_;
}

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)outer$
                      withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)inArg;

- (OrgApacheLuceneStoreIndexOutput *)createOutputWithNSString:(NSString *)name
                            withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory)

__attribute__((unused)) static void OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory *self, OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *inArg);

__attribute__((unused)) static OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory *new_OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *inArg) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory *create_OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *inArg);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory)

NSString *OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME = @"write.lock";
NSString *OrgApacheLuceneIndexIndexWriter_SOURCE = @"source";
NSString *OrgApacheLuceneIndexIndexWriter_SOURCE_MERGE = @"merge";
NSString *OrgApacheLuceneIndexIndexWriter_SOURCE_FLUSH = @"flush";
NSString *OrgApacheLuceneIndexIndexWriter_SOURCE_ADDINDEXES_READERS = @"addIndexes(CodecReader...)";

@implementation OrgApacheLuceneIndexIndexWriter

+ (jint)MAX_DOCS {
  return OrgApacheLuceneIndexIndexWriter_MAX_DOCS;
}

+ (jint)MAX_POSITION {
  return OrgApacheLuceneIndexIndexWriter_MAX_POSITION;
}

+ (NSString *)WRITE_LOCK_NAME {
  return OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME;
}

+ (NSString *)SOURCE {
  return OrgApacheLuceneIndexIndexWriter_SOURCE;
}

+ (NSString *)SOURCE_MERGE {
  return OrgApacheLuceneIndexIndexWriter_SOURCE_MERGE;
}

+ (NSString *)SOURCE_FLUSH {
  return OrgApacheLuceneIndexIndexWriter_SOURCE_FLUSH;
}

+ (NSString *)SOURCE_ADDINDEXES_READERS {
  return OrgApacheLuceneIndexIndexWriter_SOURCE_ADDINDEXES_READERS;
}

+ (jint)MAX_TERM_LENGTH {
  return OrgApacheLuceneIndexIndexWriter_MAX_TERM_LENGTH;
}

+ (void)setMaxDocsWithInt:(jint)maxDocs {
  OrgApacheLuceneIndexIndexWriter_setMaxDocsWithInt_(maxDocs);
}

+ (jint)getActualMaxDocs {
  return OrgApacheLuceneIndexIndexWriter_getActualMaxDocs();
}

- (OrgApacheLuceneIndexDirectoryReader *)getReader {
  return [self getReaderWithBoolean:true];
}

- (OrgApacheLuceneIndexDirectoryReader *)getReaderWithBoolean:(jboolean)applyAllDeletes {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  jlong tStart = JavaLangSystem_currentTimeMillis();
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
    [infoStream_ messageWithNSString:@"IW" withNSString:@"flush at getReader"];
  }
  JreAssignVolatileBoolean(&poolReaders_, true);
  OrgApacheLuceneIndexDirectoryReader *r = nil;
  [self doBeforeFlush];
  jboolean anyChanges = false;
  jboolean success2 = false;
  @try {
    jboolean success = false;
    @synchronized(fullFlushLock_) {
      @try {
        anyChanges = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) flushAllThreads];
        if (!anyChanges) {
          [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushCount_)) incrementAndGet];
        }
        @synchronized(self) {
          anyChanges |= OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(self, applyAllDeletes);
          r = OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(self, segmentInfos_, applyAllDeletes);
          if ([infoStream_ isEnabledWithNSString:@"IW"]) {
            [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$J$@", @"return reader version=", [((OrgApacheLuceneIndexDirectoryReader *) nil_chk(r)) getVersion], @" reader=", r)];
          }
        }
        success = true;
      }
      @finally {
        [docWriter_ finishFullFlushWithOrgApacheLuceneIndexIndexWriter:self withBoolean:success];
        if (success) {
          OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, false, true);
          [self doAfterFlush];
        }
        else {
          if ([infoStream_ isEnabledWithNSString:@"IW"]) {
            [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during NRT reader"];
          }
        }
      }
    }
    if (anyChanges) {
      OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy], JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, FULL_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
    }
    if ([infoStream_ isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$J$", @"getReader took ", (JavaLangSystem_currentTimeMillis() - tStart), @" msec")];
    }
    success2 = true;
  }
  @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"getReader"];
    return nil;
  }
  @catch (JavaLangOutOfMemoryError *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"getReader"];
    return nil;
  }
  @finally {
    if (!success2) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ r } count:1 type:JavaIoCloseable_class_()]);
    }
  }
  return r;
}

- (jlong)ramBytesUsed {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) ramBytesUsed];
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (jint)numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  jint delCount = [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) getDelCount];
  OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:info withBoolean:false];
  if (rld != nil) {
    delCount += [rld getPendingDeleteCount];
  }
  return delCount;
}

- (void)ensureOpenWithBoolean:(jboolean)failIfClosing {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, failIfClosing);
}

- (void)ensureOpen {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)d
            withOrgApacheLuceneIndexIndexWriterConfig:(OrgApacheLuceneIndexIndexWriterConfig *)conf {
  OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(self, d, conf);
  return self;
}

+ (OrgApacheLuceneIndexFieldInfos *)readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)si {
  return OrgApacheLuceneIndexIndexWriter_readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo_(si);
}

- (OrgApacheLuceneIndexFieldInfos_FieldNumbers *)getFieldNumberMap {
  return OrgApacheLuceneIndexIndexWriter_getFieldNumberMap(self);
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)getConfig {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  return config_;
}

- (void)messageState {
  OrgApacheLuceneIndexIndexWriter_messageState(self);
}

- (void)shutdown {
  OrgApacheLuceneIndexIndexWriter_shutdown(self);
}

- (void)close {
  if ([((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getCommitOnClose]) {
    OrgApacheLuceneIndexIndexWriter_shutdown(self);
  }
  else {
    [self rollback];
  }
}

- (jboolean)shouldCloseWithBoolean:(jboolean)waitForClose {
  return OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(self, waitForClose);
}

- (OrgApacheLuceneStoreDirectory *)getDirectory {
  return directoryOrig_;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  return analyzer_;
}

- (jint)maxDoc {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs] + [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) totalMaxDoc];
  }
}

- (jint)numDocs {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    jint count = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs];
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(segmentInfos_)) {
      count += [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc] - [self numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    }
    return count;
  }
}

- (jboolean)hasDeletions {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    if ([((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) any]) {
      return true;
    }
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyDeletions]) {
      return true;
    }
    if ([((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) anyPendingDeletes]) {
      return true;
    }
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(segmentInfos_)) {
      if ([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) hasDeletions]) {
        return true;
      }
    }
    return false;
  }
}

- (void)addDocumentWithJavaLangIterable:(id<JavaLangIterable>)doc {
  [self updateDocumentWithOrgApacheLuceneIndexTerm:nil withJavaLangIterable:doc];
}

- (void)addDocumentsWithJavaLangIterable:(id<JavaLangIterable>)docs {
  [self updateDocumentsWithOrgApacheLuceneIndexTerm:nil withJavaLangIterable:docs];
}

- (void)updateDocumentsWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm
                               withJavaLangIterable:(id<JavaLangIterable>)docs {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    jboolean success = false;
    @try {
      if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocumentsWithJavaLangIterable:docs withOrgApacheLuceneAnalysisAnalyzer:analyzer_ withOrgApacheLuceneIndexTerm:delTerm]) {
        OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, true, false);
      }
      success = true;
    }
    @finally {
      if (!success) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception updating document"];
        }
      }
    }
  }
  @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocuments"];
  }
  @catch (JavaLangOutOfMemoryError *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocuments"];
  }
}

- (jboolean)tryDeleteDocumentWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)readerIn
                                                         withInt:(jint)docID {
  @synchronized(self) {
    OrgApacheLuceneIndexLeafReader *reader;
    if ([readerIn isKindOfClass:[OrgApacheLuceneIndexLeafReader class]]) {
      reader = (OrgApacheLuceneIndexLeafReader *) readerIn;
    }
    else {
      id<JavaUtilList> leaves = JreRetainedLocalValue([((OrgApacheLuceneIndexIndexReader *) nil_chk(readerIn)) leaves]);
      jint subIndex = OrgApacheLuceneIndexReaderUtil_subIndexWithInt_withJavaUtilList_(docID, leaves);
      reader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk([((id<JavaUtilList>) nil_chk(leaves)) getWithInt:subIndex])) reader];
      docID -= ((OrgApacheLuceneIndexLeafReaderContext *) nil_chk([leaves getWithInt:subIndex]))->docBase_;
      JreAssert(docID >= 0, @"org/apache/lucene/index/IndexWriter.java:1361 condition failed: assert docID >= 0;");
      JreAssert(docID < [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) maxDoc], @"org/apache/lucene/index/IndexWriter.java:1362 condition failed: assert docID < reader.maxDoc();");
    }
    if (!([reader isKindOfClass:[OrgApacheLuceneIndexSegmentReader class]])) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"the reader must be a SegmentReader or composite reader containing only SegmentReaders");
    }
    OrgApacheLuceneIndexSegmentCommitInfo *info = [((OrgApacheLuceneIndexSegmentReader *) nil_chk(((OrgApacheLuceneIndexSegmentReader *) cast_chk(reader, [OrgApacheLuceneIndexSegmentReader class])))) getSegmentInfo];
    if ([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) indexOfWithOrgApacheLuceneIndexSegmentCommitInfo:info] != -1) {
      OrgApacheLuceneIndexReadersAndUpdates *rld = JreRetainedLocalValue([((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:info withBoolean:false]);
      if (rld != nil) {
        @synchronized(bufferedUpdatesStream_) {
          [rld initWritableLiveDocs];
          if ([rld delete__WithInt:docID]) {
            jint fullDelCount = [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(rld->info_)) getDelCount] + [rld getPendingDeleteCount];
            if (fullDelCount == [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(rld->info_->info_)) maxDoc]) {
              if (![((JavaUtilHashSet *) nil_chk(mergingSegments_)) containsWithId:rld->info_]) {
                [segmentInfos_ removeWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_];
                [readerPool_ dropWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_];
                [self checkpoint];
              }
            }
            [self changed];
          }
          return true;
        }
      }
      else {
      }
    }
    else {
    }
    return false;
  }
}

- (void)deleteDocumentsWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) deleteTermsWithOrgApacheLuceneIndexTermArray:terms]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"deleteDocuments(Term..)"];
  }
}

- (void)deleteDocumentsWithOrgApacheLuceneSearchQueryArray:(IOSObjectArray *)queries {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  {
    IOSObjectArray *a__ = queries;
    OrgApacheLuceneSearchQuery * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneSearchQuery * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneSearchQuery *query = *b__++;
      if (JreObjectEqualsEquals([((OrgApacheLuceneSearchQuery *) nil_chk(query)) java_getClass], OrgApacheLuceneSearchMatchAllDocsQuery_class_())) {
        [self deleteAll];
        return;
      }
    }
  }
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) deleteQueriesWithOrgApacheLuceneSearchQueryArray:queries]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"deleteDocuments(Query..)"];
  }
}

- (void)updateDocumentWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                              withJavaLangIterable:(id<JavaLangIterable>)doc {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  @try {
    jboolean success = false;
    @try {
      if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocumentWithJavaLangIterable:doc withOrgApacheLuceneAnalysisAnalyzer:analyzer_ withOrgApacheLuceneIndexTerm:term]) {
        OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, true, false);
      }
      success = true;
    }
    @finally {
      if (!success) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception updating document"];
        }
      }
    }
  }
  @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocument"];
  }
  @catch (JavaLangOutOfMemoryError *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"updateDocument"];
  }
}

- (void)updateNumericDocValueWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                             withNSString:(NSString *)field
                                                 withLong:(jlong)value {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (![((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) containsWithNSString:field withOrgApacheLuceneIndexDocValuesType:JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NUMERIC)]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"can only update existing numeric-docvalues fields!");
  }
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocValuesWithOrgApacheLuceneIndexDocValuesUpdateArray:[IOSObjectArray arrayWithObjects:(id[]){ create_OrgApacheLuceneIndexDocValuesUpdate_NumericDocValuesUpdate_initWithOrgApacheLuceneIndexTerm_withNSString_withJavaLangLong_(term, field, JavaLangLong_valueOfWithLong_(value)) } count:1 type:OrgApacheLuceneIndexDocValuesUpdate_class_()]]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"updateNumericDocValue"];
  }
}

- (void)updateBinaryDocValueWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                            withNSString:(NSString *)field
                         withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)value {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (value == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"cannot update a field to a null value: ", field));
  }
  if (![((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) containsWithNSString:field withOrgApacheLuceneIndexDocValuesType:JreLoadEnum(OrgApacheLuceneIndexDocValuesType, BINARY)]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"can only update existing binary-docvalues fields!");
  }
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocValuesWithOrgApacheLuceneIndexDocValuesUpdateArray:[IOSObjectArray arrayWithObjects:(id[]){ create_OrgApacheLuceneIndexDocValuesUpdate_BinaryDocValuesUpdate_initWithOrgApacheLuceneIndexTerm_withNSString_withOrgApacheLuceneUtilBytesRef_(term, field, value) } count:1 type:OrgApacheLuceneIndexDocValuesUpdate_class_()]]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"updateBinaryDocValue"];
  }
}

- (void)updateDocValuesWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
              withOrgApacheLuceneDocumentFieldArray:(IOSObjectArray *)updates {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  IOSObjectArray *dvUpdates = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(updates))->size_ type:OrgApacheLuceneIndexDocValuesUpdate_class_()];
  for (jint i = 0; i < updates->size_; i++) {
    OrgApacheLuceneDocumentField *f = IOSObjectArray_Get(updates, i);
    OrgApacheLuceneIndexDocValuesType *dvType = [((OrgApacheLuceneDocumentFieldType *) nil_chk([((OrgApacheLuceneDocumentField *) nil_chk(f)) fieldType])) docValuesType];
    if (dvType == nil) {
      @throw create_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$$", @"DocValuesType cannot be null (field: \"", [f name], @"\")"));
    }
    if (dvType == JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NONE)) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"can only update NUMERIC or BINARY fields! field=", [f name]));
    }
    if (![((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) containsWithNSString:[f name] withOrgApacheLuceneIndexDocValuesType:dvType]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$@", @"can only update existing docvalues fields! field=", [f name], @", type=", dvType));
    }
    switch ([dvType ordinal]) {
      case OrgApacheLuceneIndexDocValuesType_Enum_NUMERIC:
      IOSObjectArray_SetAndConsume(dvUpdates, i, new_OrgApacheLuceneIndexDocValuesUpdate_NumericDocValuesUpdate_initWithOrgApacheLuceneIndexTerm_withNSString_withJavaLangLong_(term, [f name], (JavaLangLong *) cast_chk([f numericValue], [JavaLangLong class])));
      break;
      case OrgApacheLuceneIndexDocValuesType_Enum_BINARY:
      IOSObjectArray_SetAndConsume(dvUpdates, i, new_OrgApacheLuceneIndexDocValuesUpdate_BinaryDocValuesUpdate_initWithOrgApacheLuceneIndexTerm_withNSString_withOrgApacheLuceneUtilBytesRef_(term, [f name], [f binaryValue]));
      break;
      default:
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$@", @"can only update NUMERIC or BINARY fields: field=", [f name], @", type=", dvType));
    }
  }
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) updateDocValuesWithOrgApacheLuceneIndexDocValuesUpdateArray:dvUpdates]) {
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, true, false);
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"updateDocValues"];
  }
}

- (jint)getSegmentCount {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size];
  }
}

- (jint)getNumBufferedDocuments {
  @synchronized(self) {
    return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs];
  }
}

- (id<JavaUtilCollection>)getIndexFileNames {
  @synchronized(self) {
    return JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) filesWithBoolean:true]);
  }
}

- (jint)maxDocWithInt:(jint)i {
  @synchronized(self) {
    if (i >= 0 && i < [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size]) {
      return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) infoWithInt:i]))->info_)) maxDoc];
    }
    else {
      return -1;
    }
  }
}

- (jint)getFlushCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushCount_)) get];
}

- (jint)getFlushDeletesCount {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushDeletesCount_)) get];
}

- (NSString *)newSegmentName {
  return OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
}

- (void)forceMergeWithInt:(jint)maxNumSegments {
  [self forceMergeWithInt:maxNumSegments withBoolean:true];
}

- (void)forceMergeWithInt:(jint)maxNumSegments
              withBoolean:(jboolean)doWait {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  if (maxNumSegments < 1) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"maxNumSegments must be >= 1; got ", maxNumSegments));
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
    [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"forceMerge: index now ", [self segString])];
    [infoStream_ messageWithNSString:@"IW" withNSString:@"now flush at forceMerge"];
  }
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, true);
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(self);
    [((id<JavaUtilMap>) nil_chk(segmentsToMerge_)) clear];
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(segmentInfos_)) {
      [((id<JavaUtilMap>) nil_chk(segmentsToMerge_)) putWithId:info withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    }
    mergeMaxNumSegments_ = maxNumSegments;
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(pendingMerges_)) {
      ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ = maxNumSegments;
      [((id<JavaUtilMap>) nil_chk(segmentsToMerge_)) putWithId:merge->info_ withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    }
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(runningMerges_)) {
      ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ = maxNumSegments;
      [((id<JavaUtilMap>) nil_chk(segmentsToMerge_)) putWithId:merge->info_ withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    }
  }
  OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy], JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, EXPLICIT), maxNumSegments);
  if (doWait) {
    @synchronized(self) {
      while (true) {
        if (JreLoadVolatileId(&tragedy_) != nil) {
          @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot complete forceMerge", JreLoadVolatileId(&tragedy_));
        }
        if ([((id<JavaUtilList>) nil_chk(mergeExceptions_)) size] > 0) {
          jint size = [((id<JavaUtilList>) nil_chk(mergeExceptions_)) size];
          for (jint i = 0; i < size; i++) {
            OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [((id<JavaUtilList>) nil_chk(mergeExceptions_)) getWithInt:i];
            if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) {
              @throw create_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"background merge hit exception: ", [merge segString]), [merge getException]);
            }
          }
        }
        if (OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(self)) OrgApacheLuceneIndexIndexWriter_doWait(self);
        else break;
      }
    }
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  }
}

- (jboolean)maxNumSegmentsMergesPending {
  return OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(self);
}

- (void)forceMergeDeletesWithBoolean:(jboolean)doWait {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, true);
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
    [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"forceMergeDeletes: index now ", [self segString])];
  }
  OrgApacheLuceneIndexMergePolicy *mergePolicy = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy];
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec;
  jboolean newMergesFound = false;
  @synchronized(self) {
    spec = JreRetainedLocalValue([((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) findForcedDeletesMergesWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withOrgApacheLuceneIndexIndexWriter:self]);
    newMergesFound = (spec != nil);
    if (newMergesFound) {
      jint numMerges = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_MergeSpecification *) nil_chk(spec))->merges_)) size];
      for (jint i = 0; i < numMerges; i++) OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, [spec->merges_ getWithInt:i]);
    }
  }
  [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(mergeScheduler_)) mergeWithOrgApacheLuceneIndexIndexWriter:self withOrgApacheLuceneIndexMergeTrigger:JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, EXPLICIT) withBoolean:newMergesFound];
  if (spec != nil && doWait) {
    jint numMerges = [((id<JavaUtilList>) nil_chk(spec->merges_)) size];
    @synchronized(self) {
      jboolean running = true;
      while (running) {
        if (JreLoadVolatileId(&tragedy_) != nil) {
          @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot complete forceMergeDeletes", JreLoadVolatileId(&tragedy_));
        }
        running = false;
        for (jint i = 0; i < numMerges; i++) {
          OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [spec->merges_ getWithInt:i];
          if ([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) containsWithId:merge] || [((id<JavaUtilSet>) nil_chk(runningMerges_)) containsWithId:merge]) {
            running = true;
          }
          JavaLangThrowable *t = JreRetainedLocalValue([((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) getException]);
          if (t != nil) {
            @throw create_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"background merge hit exception: ", [merge segString]), t);
          }
        }
        if (running) OrgApacheLuceneIndexIndexWriter_doWait(self);
      }
    }
  }
}

- (void)forceMergeDeletes {
  [self forceMergeDeletesWithBoolean:true];
}

- (void)maybeMerge {
  OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
}

- (void)maybeMergeWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy
                 withOrgApacheLuceneIndexMergeTrigger:(OrgApacheLuceneIndexMergeTrigger *)trigger
                                              withInt:(jint)maxNumSegments {
  OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, mergePolicy, trigger, maxNumSegments);
}

- (jboolean)updatePendingMergesWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy
                              withOrgApacheLuceneIndexMergeTrigger:(OrgApacheLuceneIndexMergeTrigger *)trigger
                                                           withInt:(jint)maxNumSegments {
  return OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, mergePolicy, trigger, maxNumSegments);
}

- (id<JavaUtilCollection>)getMergingSegments {
  @synchronized(self) {
    return JreRetainedLocalValue(mergingSegments_);
  }
}

- (OrgApacheLuceneIndexMergePolicy_OneMerge *)getNextMerge {
  @synchronized(self) {
    if ([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) size] == 0) {
      return JreRetainedLocalValue(nil);
    }
    else {
      OrgApacheLuceneIndexMergePolicy_OneMerge *merge = JreRetainedLocalValue([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) removeFirst]);
      [((id<JavaUtilSet>) nil_chk(runningMerges_)) addWithId:merge];
      return JreRetainedLocalValue(merge);
    }
  }
}

- (jboolean)hasPendingMerges {
  @synchronized(self) {
    return [((JavaUtilLinkedList *) nil_chk(pendingMerges_)) size] != 0;
  }
}

- (void)rollback {
  @synchronized(commitLock_) {
    if (OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(self, true)) {
      OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
    }
  }
}

- (void)rollbackInternal {
  OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
}

- (void)deleteAll {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  jboolean success = false;
  @try {
    @synchronized(fullFlushLock_) {
      jlong abortedDocCount = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) lockAndAbortAllWithOrgApacheLuceneIndexIndexWriter:self];
      [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(pendingNumDocs_)) addAndGetWithLong:-abortedDocCount];
      OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, false, true);
      @synchronized(self) {
        @try {
          OrgApacheLuceneIndexIndexWriter_abortMerges(self);
          stopMerges_ = false;
          [pendingNumDocs_ addAndGetWithLong:-[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) totalMaxDoc]];
          [segmentInfos_ clear];
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withBoolean:false];
          [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool_)) dropAllWithBoolean:false];
          [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) incrementAndGet];
          [segmentInfos_ changed];
          [((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) clear];
          success = true;
        }
        @finally {
          [docWriter_ unlockAllAfterAbortAllWithOrgApacheLuceneIndexIndexWriter:self];
          if (!success) {
            if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
              [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during deleteAll"];
            }
          }
        }
      }
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"deleteAll"];
  }
}

- (void)abortMerges {
  OrgApacheLuceneIndexIndexWriter_abortMerges(self);
}

- (void)waitForMerges {
  [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(mergeScheduler_)) mergeWithOrgApacheLuceneIndexIndexWriter:self withOrgApacheLuceneIndexMergeTrigger:JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, CLOSING) withBoolean:false];
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:@"waitForMerges"];
    }
    while ([((JavaUtilLinkedList *) nil_chk(pendingMerges_)) size] > 0 || [((id<JavaUtilSet>) nil_chk(runningMerges_)) size] > 0) {
      OrgApacheLuceneIndexIndexWriter_doWait(self);
    }
    JreAssert(0 == [((JavaUtilHashSet *) nil_chk(mergingSegments_)) size], @"org/apache/lucene/index/IndexWriter.java:2305 condition failed: assert 0 == mergingSegments.size();");
    if ([infoStream_ isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:@"waitForMerges done"];
    }
  }
}

- (void)checkpoint {
  @synchronized(self) {
    [self changed];
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withBoolean:false];
  }
}

- (void)checkpointNoSIS {
  @synchronized(self) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) incrementAndGet];
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withBoolean:false];
  }
}

- (void)changed {
  @synchronized(self) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) incrementAndGet];
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) changed];
  }
}

- (void)publishFrozenUpdatesWithOrgApacheLuceneIndexFrozenBufferedUpdates:(OrgApacheLuceneIndexFrozenBufferedUpdates *)packet {
  @synchronized(self) {
    JreAssert(packet != nil && [packet any], @"org/apache/lucene/index/IndexWriter.java:2339 condition failed: assert packet != null && packet.any();");
    @synchronized(bufferedUpdatesStream_) {
      [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) pushWithOrgApacheLuceneIndexFrozenBufferedUpdates:packet];
    }
  }
}

- (void)publishFlushedSegmentWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)newSegment
                         withOrgApacheLuceneIndexFrozenBufferedUpdates:(OrgApacheLuceneIndexFrozenBufferedUpdates *)packet
                         withOrgApacheLuceneIndexFrozenBufferedUpdates:(OrgApacheLuceneIndexFrozenBufferedUpdates *)globalPacket {
  @try {
    @synchronized(self) {
      OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
      @synchronized(bufferedUpdatesStream_) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:@"publishFlushedSegment"];
        }
        if (globalPacket != nil && [globalPacket any]) {
          [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) pushWithOrgApacheLuceneIndexFrozenBufferedUpdates:globalPacket];
        }
        jlong nextGen;
        if (packet != nil && [packet any]) {
          nextGen = [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) pushWithOrgApacheLuceneIndexFrozenBufferedUpdates:packet];
        }
        else {
          nextGen = [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) getNextGen];
        }
        if ([infoStream_ isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$J$$", @"publish sets newSegment delGen=", nextGen, @" seg=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:newSegment])];
        }
        [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(newSegment)) setBufferedDeletesGenWithLong:nextGen];
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) addWithOrgApacheLuceneIndexSegmentCommitInfo:newSegment];
        [self checkpoint];
      }
    }
  }
  @finally {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushCount_)) incrementAndGet];
    [self doAfterFlush];
  }
}

- (void)resetMergeExceptions {
  OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(self);
}

- (void)noDupDirsWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs {
  OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
}

- (id<JavaUtilList>)acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs {
  return OrgApacheLuceneIndexIndexWriter_acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
}

- (void)addIndexesWithOrgApacheLuceneStoreDirectoryArray:(IOSObjectArray *)dirs {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
  id<JavaUtilList> locks = OrgApacheLuceneIndexIndexWriter_acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray_(self, dirs);
  jboolean successTop = false;
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:@"flush at addIndexes(Directory...)"];
    }
    OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, false, true);
    id<JavaUtilList> infos = create_JavaUtilArrayList_init();
    jlong totalMaxDoc = 0;
    id<JavaUtilList> commits = create_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(dirs))->size_);
    {
      IOSObjectArray *a__ = dirs;
      OrgApacheLuceneStoreDirectory * const *b__ = a__->buffer_;
      OrgApacheLuceneStoreDirectory * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneStoreDirectory *dir = *b__++;
        if ([infoStream_ isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@", @"addIndexes: process directory ", dir)];
        }
        OrgApacheLuceneIndexSegmentInfos *sis = OrgApacheLuceneIndexSegmentInfos_readLatestCommitWithOrgApacheLuceneStoreDirectory_(dir);
        totalMaxDoc += [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis)) totalMaxDoc];
        [commits addWithId:sis];
      }
    }
    OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(self, totalMaxDoc);
    jboolean success = false;
    @try {
      for (OrgApacheLuceneIndexSegmentInfos * __strong sis in commits) {
        for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(sis)) {
          JreAssert(![infos containsWithId:info], JreStrcat("$@$$", @"dup info dir=", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->dir_, @" name=", info->info_->name_));
          NSString *newSegName = OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
          if ([infoStream_ isEnabledWithNSString:@"IW"]) {
            [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$$@", @"addIndexes: process segment origName=", info->info_->name_, @" newName=", newSegName, @" info=", info)];
          }
          OrgApacheLuceneStoreIOContext *context = create_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreFlushInfo_(create_OrgApacheLuceneStoreFlushInfo_initWithInt_withLong_([info->info_ maxDoc], [info sizeInBytes]));
          OrgApacheLuceneIndexFieldInfos *fis = OrgApacheLuceneIndexIndexWriter_readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo_(info);
          for (OrgApacheLuceneIndexFieldInfo * __strong fi in nil_chk(fis)) {
            [((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(globalFieldNumberMap_)) addOrGetWithNSString:((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->name_ withInt:fi->number_ withOrgApacheLuceneIndexDocValuesType:[fi getDocValuesType]];
          }
          [infos addWithId:OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo_withNSString_withOrgApacheLuceneStoreIOContext_(self, info, newSegName, context)];
        }
      }
      success = true;
    }
    @finally {
      if (!success) {
        for (OrgApacheLuceneIndexSegmentCommitInfo * __strong sipc in infos) {
          OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(sipc)) files]);
        }
      }
    }
    @synchronized(self) {
      success = false;
      @try {
        OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
        OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(self, totalMaxDoc);
        success = true;
      }
      @finally {
        if (!success) {
          for (OrgApacheLuceneIndexSegmentCommitInfo * __strong sipc in infos) {
            OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(sipc)) files]);
          }
        }
      }
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) addAllWithJavaLangIterable:infos];
      [self checkpoint];
    }
    successTop = true;
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"addIndexes(Directory...)"];
  }
  @finally {
    if (successTop) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaLangIterable_(locks);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(locks);
    }
  }
  OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
}

- (void)addIndexesWithOrgApacheLuceneIndexCodecReaderArray:(IOSObjectArray *)readers {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  jlong numDocs = 0;
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:@"flush at addIndexes(CodecReader...)"];
    }
    OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, false, true);
    NSString *mergedName = OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
    {
      IOSObjectArray *a__ = readers;
      OrgApacheLuceneIndexCodecReader * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgApacheLuceneIndexCodecReader * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgApacheLuceneIndexCodecReader *leaf = *b__++;
        numDocs += [((OrgApacheLuceneIndexCodecReader *) nil_chk(leaf)) numDocs];
      }
    }
    OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(self, numDocs);
    OrgApacheLuceneStoreIOContext *context = create_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreMergeInfo_(create_OrgApacheLuceneStoreMergeInfo_initWithInt_withLong_withBoolean_withInt_((jint) numDocs, -1, false, -1));
    OrgApacheLuceneStoreTrackingDirectoryWrapper *trackingDir = create_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(directory_);
    OrgApacheLuceneIndexSegmentInfo *info = create_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneUtilVersion_withNSString_withInt_withBoolean_withOrgApacheLuceneCodecsCodec_withJavaUtilMap_withByteArray_withJavaUtilMap_(directoryOrig_, JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST), mergedName, -1, false, codec_, JavaUtilCollections_emptyMap(), OrgApacheLuceneUtilStringHelper_randomId(), create_JavaUtilHashMap_init());
    OrgApacheLuceneIndexSegmentMerger *merger = create_OrgApacheLuceneIndexSegmentMerger_initPackagePrivateWithJavaUtilList_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexFieldInfos_FieldNumbers_withOrgApacheLuceneStoreIOContext_(JavaUtilArrays_asListWithNSObjectArray_(readers), info, infoStream_, trackingDir, globalFieldNumberMap_, context);
    [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(rateLimiters_)) setWithId:create_OrgApacheLuceneIndexMergeRateLimiter_initWithOrgApacheLuceneIndexMergePolicy_OneMerge_(nil)];
    if (![merger shouldMerge]) {
      return;
    }
    jboolean success = false;
    @try {
      [merger merge];
      success = true;
    }
    @finally {
      if (!success) {
        @synchronized(self) {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refreshWithNSString:info->name_];
        }
      }
    }
    OrgApacheLuceneIndexSegmentCommitInfo *infoPerCommit = create_OrgApacheLuceneIndexSegmentCommitInfo_initWithOrgApacheLuceneIndexSegmentInfo_withInt_withLong_withLong_withLong_(info, 0, -1LL, -1LL, -1LL);
    [info setFilesWithJavaUtilCollection:create_JavaUtilHashSet_initWithJavaUtilCollection_([trackingDir getCreatedFiles])];
    [((id<JavaUtilSet>) nil_chk([trackingDir getCreatedFiles])) clear];
    OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(info, OrgApacheLuceneIndexIndexWriter_SOURCE_ADDINDEXES_READERS);
    OrgApacheLuceneIndexMergePolicy *mergePolicy = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy];
    jboolean useCompoundFile;
    @synchronized(self) {
      if (stopMerges_) {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [infoPerCommit files]);
        return;
      }
      OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
      useCompoundFile = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) useCompoundFileWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_ withOrgApacheLuceneIndexSegmentCommitInfo:infoPerCommit withOrgApacheLuceneIndexIndexWriter:self];
    }
    if (useCompoundFile) {
      id<JavaUtilCollection> filesToDelete = JreRetainedLocalValue([infoPerCommit files]);
      OrgApacheLuceneStoreTrackingDirectoryWrapper *trackingCFSDir = create_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(mergeDirectory_);
      @try {
        OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(self, infoStream_, trackingCFSDir, info, context);
      }
      @finally {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, filesToDelete);
      }
      [info setUseCompoundFileWithBoolean:true];
    }
    success = false;
    @try {
      [((OrgApacheLuceneCodecsSegmentInfoFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(codec_)) segmentInfoFormat])) writeWithOrgApacheLuceneStoreDirectory:trackingDir withOrgApacheLuceneIndexSegmentInfo:info withOrgApacheLuceneStoreIOContext:context];
      success = true;
    }
    @finally {
      if (!success) {
        @synchronized(self) {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refreshWithNSString:info->name_];
        }
      }
    }
    [info addFilesWithJavaUtilCollection:[trackingDir getCreatedFiles]];
    @synchronized(self) {
      if (stopMerges_) {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [infoPerCommit files]);
        return;
      }
      OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
      OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(self, numDocs);
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) addWithOrgApacheLuceneIndexSegmentCommitInfo:infoPerCommit];
      [self checkpoint];
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"addIndexes(CodecReader...)"];
  }
  OrgApacheLuceneIndexIndexWriter_maybeMerge(self);
}

- (OrgApacheLuceneIndexSegmentCommitInfo *)copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                                                       withNSString:(NSString *)segName
                                                                  withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  return OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo_withNSString_withOrgApacheLuceneStoreIOContext_(self, info, segName, context);
}

- (void)doAfterFlush {
}

- (void)doBeforeFlush {
}

- (void)prepareCommit {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy]);
}

- (void)prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy {
  OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(self, mergePolicy);
}

- (void)setCommitDataWithJavaUtilMap:(id<JavaUtilMap>)commitUserData {
  @synchronized(self) {
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) setUserDataWithJavaUtilMap:create_JavaUtilHashMap_initWithJavaUtilMap_(commitUserData)];
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) incrementAndGet];
  }
}

- (id<JavaUtilMap>)getCommitData {
  @synchronized(self) {
    return JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) getUserData]);
  }
}

- (void)commit {
  OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
  OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy]);
}

- (jboolean)hasUncommittedChanges {
  return [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(changeCount_)) get] != JreLoadVolatileLong(&lastCommitChangeCount_) || [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyChanges] || [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) any];
}

- (void)commitInternalWithOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy {
  OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(self, mergePolicy);
}

- (void)finishCommit {
  OrgApacheLuceneIndexIndexWriter_finishCommit(self);
}

- (jboolean)holdsFullFlushLock {
  return JavaLangThread_holdsLockWithId_(fullFlushLock_);
}

- (void)flushWithBoolean:(jboolean)triggerMerge
             withBoolean:(jboolean)applyAllDeletes {
  OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, triggerMerge, applyAllDeletes);
}

- (jboolean)doFlushWithBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(self, applyAllDeletes);
}

- (jboolean)maybeApplyDeletesWithBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(self, applyAllDeletes);
}

- (jboolean)applyAllDeletesAndUpdates {
  return OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(self);
}

- (OrgApacheLuceneIndexDocumentsWriter *)getDocsWriter {
  return docWriter_;
}

- (jint)numRamDocs {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumDocs];
  }
}

- (void)ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:(IOSObjectArray *)updatesIters
                                                                          withInt:(jint)deletedDoc {
  OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, updatesIters, deletedDoc);
}

- (void)maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                           withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState
                                                                      withInt:(jint)docUpto
                  withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates:(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *)holder
                                                            withNSStringArray:(IOSObjectArray *)mergingFields
                           withOrgApacheLuceneIndexDocValuesFieldUpdatesArray:(IOSObjectArray *)dvFieldUpdates
                  withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:(IOSObjectArray *)updatesIters
                                                                      withInt:(jint)curDoc {
  OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, curDoc);
}

- (OrgApacheLuceneIndexReadersAndUpdates *)commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                                                  withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState {
  return OrgApacheLuceneIndexIndexWriter_commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState);
}

- (jboolean)commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                 withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState {
  return OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState);
}

- (void)handleMergeExceptionWithJavaLangThrowable:(JavaLangThrowable *)t
     withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, t, merge);
}

- (void)mergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  jboolean success = false;
  [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(rateLimiters_)) setWithId:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_];
  jlong t0 = JavaLangSystem_currentTimeMillis();
  OrgApacheLuceneIndexMergePolicy *mergePolicy = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy];
  @try {
    @try {
      @try {
        OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
          [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$", @"now merge\n  merge=", [self segStringWithJavaLangIterable:merge->segments_], @"\n  index=", [self segString])];
        }
        OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergePolicy_(self, merge, mergePolicy);
        [self mergeSuccessWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
        success = true;
      }
      @catch (JavaLangThrowable *t) {
        OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, t, merge);
      }
    }
    @finally {
      @synchronized(self) {
        OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
        if (success == false) {
          if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
            [infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during merge"];
          }
          if (merge->info_ != nil && ![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_]) {
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refreshWithNSString:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_->info_))->name_];
          }
        }
        else if ([((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) getAbort] == false && (merge->maxNumSegments_ != -1 || (!JreLoadVolatileBoolean(&closed_) && !JreLoadVolatileBoolean(&closing_)))) {
          OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, mergePolicy, JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, MERGE_FINISHED), merge->maxNumSegments_);
        }
      }
    }
  }
  @catch (JavaLangThrowable *t) {
    [self tragicEventWithJavaLangThrowable:t withNSString:@"merge"];
  }
  if (merge->info_ != nil && [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) getAbort] == false) {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$J$I$", @"merge time ", (JavaLangSystem_currentTimeMillis() - t0), @" msec for ", [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_)) maxDoc], @" docs")];
    }
  }
}

- (void)mergeSuccessWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
}

- (jboolean)registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  return OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

+ (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source {
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(info, source);
}

+ (void)setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                                             withNSString:(NSString *)source
                                          withJavaUtilMap:(id<JavaUtilMap>)details {
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(info, source, details);
}

- (void)mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
}

- (void)closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                                                          withBoolean:(jboolean)suppressExceptions {
  OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(self, merge, suppressExceptions);
}

- (jint)mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                            withOrgApacheLuceneIndexMergePolicy:(OrgApacheLuceneIndexMergePolicy *)mergePolicy {
  return OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergePolicy_(self, merge, mergePolicy);
}

- (void)addMergeExceptionWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  @synchronized(self) {
    JreAssert([((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) getException] != nil, @"org/apache/lucene/index/IndexWriter.java:4268 condition failed: assert merge.getException() != null;");
    if (![((id<JavaUtilList>) nil_chk(mergeExceptions_)) containsWithId:merge] && mergeGen_ == merge->mergeGen_) {
      [((id<JavaUtilList>) nil_chk(mergeExceptions_)) addWithId:merge];
    }
  }
}

- (jint)getBufferedDeleteTermsSize {
  return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getBufferedDeleteTermsSize];
}

- (jint)getNumBufferedDeleteTerms {
  return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) getNumBufferedDeleteTerms];
}

- (OrgApacheLuceneIndexSegmentCommitInfo *)newestSegment {
  @synchronized(self) {
    return JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) size] > 0 ? [segmentInfos_ infoWithInt:[segmentInfos_ size] - 1] : nil);
  }
}

- (NSString *)segString {
  @synchronized(self) {
    return JreRetainedLocalValue([self segStringWithJavaLangIterable:segmentInfos_]);
  }
}

- (NSString *)segStringWithJavaLangIterable:(id<JavaLangIterable>)infos {
  @synchronized(self) {
    JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(infos)) {
      if ([buffer java_length] > 0) {
        [buffer appendWithChar:' '];
      }
      [buffer appendWithNSString:[self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info]];
    }
    return JreRetainedLocalValue([buffer description]);
  }
}

- (NSString *)segStringWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info {
  @synchronized(self) {
    return JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) toStringWithInt:[self numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info] - [info getDelCount]]);
  }
}

- (void)doWait {
  OrgApacheLuceneIndexIndexWriter_doWait(self);
}

- (void)setKeepFullyDeletedSegmentsWithBoolean:(jboolean)v {
  keepFullyDeletedSegments_ = v;
}

- (jboolean)getKeepFullyDeletedSegments {
  return keepFullyDeletedSegments_;
}

- (jboolean)filesExistWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync {
  return OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(self, toSync);
}

- (OrgApacheLuceneIndexSegmentInfos *)toLiveInfosWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)sis {
  @synchronized(self) {
    OrgApacheLuceneIndexSegmentInfos *newSIS = create_OrgApacheLuceneIndexSegmentInfos_init();
    id<JavaUtilMap> liveSIS = create_JavaUtilHashMap_init();
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(segmentInfos_)) {
      [liveSIS putWithId:info withId:info];
    }
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(sis)) {
      OrgApacheLuceneIndexSegmentCommitInfo *liveInfo = JreRetainedLocalValue([liveSIS getWithId:info]);
      if (liveInfo != nil) {
        info = liveInfo;
      }
      [newSIS addWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    }
    return JreRetainedLocalValue(newSIS);
  }
}

- (void)startCommitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)toSync {
  OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_(self, toSync);
}

+ (jboolean)isLockedWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexIndexWriter_isLockedWithOrgApacheLuceneStoreDirectory_(directory);
}

- (void)tragicEventWithJavaLangThrowable:(JavaLangThrowable *)tragedy
                            withNSString:(NSString *)location {
  if ([tragedy isKindOfClass:[OrgApacheLuceneIndexAbortingException class]]) {
    tragedy = [((JavaLangThrowable *) nil_chk(tragedy)) getCause];
  }
  JreAssert([tragedy isKindOfClass:[OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]] == false, @"org/apache/lucene/index/IndexWriter.java:4554 condition failed: assert tragedy instanceof MergePolicy.MergeAbortedException == false;");
  JreAssert(JavaLangThread_holdsLockWithId_(self) == false, @"org/apache/lucene/index/IndexWriter.java:4557 condition failed: assert Thread.holdsLock(this) == false;");
  JreAssert(tragedy != nil, @"org/apache/lucene/index/IndexWriter.java:4560 condition failed: assert tragedy != null;");
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
    [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$", @"hit tragic ", [[((JavaLangThrowable *) nil_chk(tragedy)) java_getClass] getSimpleName], @" inside ", location)];
  }
  @synchronized(self) {
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(tragedy);
    }
    JreVolatileStrongAssign(&self->tragedy_, tragedy);
  }
  if (OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(self, false)) {
    OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
  }
  OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(tragedy);
}

- (JavaLangThrowable *)getTragicException {
  return JreLoadVolatileId(&tragedy_);
}

- (jboolean)isOpen {
  return JreLoadVolatileBoolean(&closing_) == false && JreLoadVolatileBoolean(&closed_) == false;
}

- (void)testPointWithNSString:(NSString *)message {
  OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, message);
}

- (jboolean)nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    jboolean isCurrent = ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos))->version__ == ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_))->version__ && ![((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyChanges] && ![((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) any];
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"IW"]) {
      if (isCurrent == false) {
        [infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$Z$Z$Z", @"nrtIsCurrent: infoVersion matches: ", (infos->version__ == segmentInfos_->version__), @"; DW changes: ", [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(docWriter_)) anyChanges], @"; BD changes: ", [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) any])];
      }
    }
    return isCurrent;
  }
}

- (jboolean)isClosed {
  @synchronized(self) {
    return JreLoadVolatileBoolean(&closed_);
  }
}

- (void)deleteUnusedFiles {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) deletePendingFiles];
    [deleter_ revisitPolicy];
  }
}

- (void)deletePendingFiles {
  OrgApacheLuceneIndexIndexWriter_deletePendingFiles(self);
}

- (void)createCompoundFileWithOrgApacheLuceneUtilInfoStream:(OrgApacheLuceneUtilInfoStream *)infoStream
           withOrgApacheLuceneStoreTrackingDirectoryWrapper:(OrgApacheLuceneStoreTrackingDirectoryWrapper *)directory
                        withOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info
                          withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(self, infoStream, directory, info, context);
}

- (void)deleteNewFilesWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, files);
}

- (void)flushFailedWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  @synchronized(self) {
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) refreshWithNSString:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info))->name_];
  }
}

- (jint)purgeWithBoolean:(jboolean)forced {
  return OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(self, forced);
}

- (void)applyDeletesAndPurgeWithBoolean:(jboolean)forcePurge {
  @try {
    OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(self, forcePurge);
  }
  @finally {
    if (OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(self)) {
      OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy], JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, SEGMENT_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
    }
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(flushCount_)) incrementAndGet];
  }
}

- (void)doAfterSegmentFlushedWithBoolean:(jboolean)triggerMerge
                             withBoolean:(jboolean)forcePurge {
  @try {
    OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(self, forcePurge);
  }
  @finally {
    if (triggerMerge) {
      OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config_)) getMergePolicy], JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, SEGMENT_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
    }
  }
}

- (void)incRefDeleterWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) incRefWithOrgApacheLuceneIndexSegmentInfos:segmentInfos withBoolean:false];
  }
}

- (void)decRefDeleterWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpen(self);
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:segmentInfos];
  }
}

- (jboolean)processEventsWithBoolean:(jboolean)triggerMerge
                         withBoolean:(jboolean)forcePurge {
  return OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, triggerMerge, forcePurge);
}

- (jboolean)processEventsWithJavaUtilQueue:(id<JavaUtilQueue>)queue
                               withBoolean:(jboolean)triggerMerge
                               withBoolean:(jboolean)forcePurge {
  return OrgApacheLuceneIndexIndexWriter_processEventsWithJavaUtilQueue_withBoolean_withBoolean_(self, queue, triggerMerge, forcePurge);
}

+ (jboolean)slowFileExistsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                               withNSString:(NSString *)fileName {
  return OrgApacheLuceneIndexIndexWriter_slowFileExistsWithOrgApacheLuceneStoreDirectory_withNSString_(dir, fileName);
}

- (void)reserveDocsWithLong:(jlong)addedNumDocs {
  OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(self, addedNumDocs);
}

- (void)testReserveDocsWithLong:(jlong)addedNumDocs {
  OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(self, addedNumDocs);
}

- (void)tooManyDocsWithLong:(jlong)addedNumDocs {
  OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(self, addedNumDocs);
}

- (OrgApacheLuceneStoreDirectory *)addMergeRateLimitersWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)inArg {
  return OrgApacheLuceneIndexIndexWriter_addMergeRateLimitersWithOrgApacheLuceneStoreDirectory_(self, inArg);
}

- (void)__javaClone:(OrgApacheLuceneIndexIndexWriter *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&tragedy_, &original->tragedy_);
  JreCloneVolatileStrong(&pendingCommit_, &original->pendingCommit_);
}

- (void)dealloc {
  JreReleaseVolatile(&tragedy_);
  RELEASE_(directoryOrig_);
  RELEASE_(directory_);
  RELEASE_(mergeDirectory_);
  RELEASE_(analyzer_);
  RELEASE_(changeCount_);
  RELEASE_(rollbackSegments_);
  JreReleaseVolatile(&pendingCommit_);
  RELEASE_(filesToCommit_);
  RELEASE_(segmentInfos_);
  RELEASE_(globalFieldNumberMap_);
  RELEASE_(docWriter_);
  RELEASE_(eventQueue_);
  RELEASE_(deleter_);
  RELEASE_(segmentsToMerge_);
  RELEASE_(writeLock_);
  RELEASE_(mergingSegments_);
  RELEASE_(mergeScheduler_);
  RELEASE_(pendingMerges_);
  RELEASE_(runningMerges_);
  RELEASE_(mergeExceptions_);
  RELEASE_(flushCount_);
  RELEASE_(flushDeletesCount_);
  RELEASE_(readerPool_);
  RELEASE_(bufferedUpdatesStream_);
  RELEASE_(config_);
  RELEASE_(pendingNumDocs_);
  RELEASE_(rateLimiters_);
  RELEASE_(codec_);
  RELEASE_(infoStream_);
  RELEASE_(commitLock_);
  RELEASE_(fullFlushLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x0, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x0, 3, 4, 2, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 8, 4, 9, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, 9, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 10, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldInfos;", 0x8, 11, 7, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFieldInfos_FieldNumbers;", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLiveIndexWriterConfig;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x22, 12, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 2, 15, -1, -1 },
    { NULL, "V", 0x1, 16, 14, 2, 17, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 2, 20, -1, -1 },
    { NULL, "Z", 0x21, 21, 22, 2, -1, -1, -1 },
    { NULL, "V", 0x81, 23, 24, 2, -1, -1, -1 },
    { NULL, "V", 0x81, 23, 25, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 19, 2, 27, -1, -1 },
    { NULL, "V", 0x1, 28, 29, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, 2, -1, -1, -1 },
    { NULL, "V", 0x81, 32, 33, 2, -1, -1, -1 },
    { NULL, "I", 0x30, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x30, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x30, -1, -1, 2, 34, -1, -1 },
    { NULL, "I", 0x30, 35, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, 2, -1, -1, -1 },
    { NULL, "Z", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x12, 39, 40, 2, -1, -1, -1 },
    { NULL, "Z", 0x22, 41, 40, 2, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x21, -1, -1, -1, 42, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy_OneMerge;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 45, 46, 2, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x82, 47, 48, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x82, 49, 48, 2, 50, -1, -1 },
    { NULL, "V", 0x81, 51, 48, 2, -1, -1, -1 },
    { NULL, "V", 0x81, 51, 52, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentCommitInfo;", 0x2, 53, 54, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 56, 2, -1, -1, -1 },
    { NULL, "V", 0x31, 57, 58, -1, 59, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x31, -1, -1, -1, 60, -1, -1 },
    { NULL, "V", 0x11, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 61, 56, 2, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 62, 63, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 64, 4, 2, -1, -1, -1 },
    { NULL, "Z", 0x30, 65, 4, 2, -1, -1, -1 },
    { NULL, "Z", 0x30, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriter;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x31, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 71, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexReadersAndUpdates;", 0x22, 72, 73, 2, -1, -1, -1 },
    { NULL, "Z", 0x22, 74, 73, 2, -1, -1, -1 },
    { NULL, "V", 0x12, 75, 76, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 67, 2, -1, -1, -1 },
    { NULL, "V", 0x0, 78, 67, -1, -1, -1, -1 },
    { NULL, "Z", 0x30, 79, 67, 2, -1, -1, -1 },
    { NULL, "V", 0x30, 80, 67, 2, -1, -1, -1 },
    { NULL, "V", 0x22, 81, 67, 2, -1, -1, -1 },
    { NULL, "V", 0x8, 82, 83, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 82, 84, -1, 85, -1, -1 },
    { NULL, "V", 0x30, 86, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x32, 87, 88, 2, -1, -1, -1 },
    { NULL, "I", 0x2, 89, 90, 2, -1, -1, -1 },
    { NULL, "V", 0x20, 91, 67, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentCommitInfo;", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x20, 92, 14, -1, 93, -1, -1 },
    { NULL, "LNSString;", 0x20, 92, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 94, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 95, 96, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexSegmentInfos;", 0x20, 97, 96, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 98, 96, 2, -1, -1, -1 },
    { NULL, "Z", 0x9, 99, 100, 2, -1, 101, -1 },
    { NULL, "V", 0x0, 102, 103, 2, -1, -1, -1 },
    { NULL, "LJavaLangThrowable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 104, 105, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, 106, 96, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x10, 107, 108, 2, -1, -1, -1 },
    { NULL, "V", 0x30, 109, 110, 2, 111, -1, -1 },
    { NULL, "V", 0x30, 112, 113, 2, -1, -1, -1 },
    { NULL, "I", 0x10, 114, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x10, 115, 4, 2, -1, -1, -1 },
    { NULL, "V", 0x10, 116, 63, 2, -1, -1, -1 },
    { NULL, "V", 0x20, 117, 96, 2, -1, -1, -1 },
    { NULL, "V", 0x20, 118, 96, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 119, 63, 2, -1, -1, -1 },
    { NULL, "Z", 0x2, 119, 120, 2, 121, -1, -1 },
    { NULL, "Z", 0x8, 122, 123, 2, -1, -1, -1 },
    { NULL, "V", 0x2, 124, 125, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 126, 125, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 127, 125, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x2, 128, 100, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxDocsWithInt:);
  methods[1].selector = @selector(getActualMaxDocs);
  methods[2].selector = @selector(getReader);
  methods[3].selector = @selector(getReaderWithBoolean:);
  methods[4].selector = @selector(ramBytesUsed);
  methods[5].selector = @selector(getChildResources);
  methods[6].selector = @selector(numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:);
  methods[7].selector = @selector(ensureOpenWithBoolean:);
  methods[8].selector = @selector(ensureOpen);
  methods[9].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexWriterConfig:);
  methods[10].selector = @selector(readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo:);
  methods[11].selector = @selector(getFieldNumberMap);
  methods[12].selector = @selector(getConfig);
  methods[13].selector = @selector(messageState);
  methods[14].selector = @selector(shutdown);
  methods[15].selector = @selector(close);
  methods[16].selector = @selector(shouldCloseWithBoolean:);
  methods[17].selector = @selector(getDirectory);
  methods[18].selector = @selector(getAnalyzer);
  methods[19].selector = @selector(maxDoc);
  methods[20].selector = @selector(numDocs);
  methods[21].selector = @selector(hasDeletions);
  methods[22].selector = @selector(addDocumentWithJavaLangIterable:);
  methods[23].selector = @selector(addDocumentsWithJavaLangIterable:);
  methods[24].selector = @selector(updateDocumentsWithOrgApacheLuceneIndexTerm:withJavaLangIterable:);
  methods[25].selector = @selector(tryDeleteDocumentWithOrgApacheLuceneIndexIndexReader:withInt:);
  methods[26].selector = @selector(deleteDocumentsWithOrgApacheLuceneIndexTermArray:);
  methods[27].selector = @selector(deleteDocumentsWithOrgApacheLuceneSearchQueryArray:);
  methods[28].selector = @selector(updateDocumentWithOrgApacheLuceneIndexTerm:withJavaLangIterable:);
  methods[29].selector = @selector(updateNumericDocValueWithOrgApacheLuceneIndexTerm:withNSString:withLong:);
  methods[30].selector = @selector(updateBinaryDocValueWithOrgApacheLuceneIndexTerm:withNSString:withOrgApacheLuceneUtilBytesRef:);
  methods[31].selector = @selector(updateDocValuesWithOrgApacheLuceneIndexTerm:withOrgApacheLuceneDocumentFieldArray:);
  methods[32].selector = @selector(getSegmentCount);
  methods[33].selector = @selector(getNumBufferedDocuments);
  methods[34].selector = @selector(getIndexFileNames);
  methods[35].selector = @selector(maxDocWithInt:);
  methods[36].selector = @selector(getFlushCount);
  methods[37].selector = @selector(getFlushDeletesCount);
  methods[38].selector = @selector(newSegmentName);
  methods[39].selector = @selector(forceMergeWithInt:);
  methods[40].selector = @selector(forceMergeWithInt:withBoolean:);
  methods[41].selector = @selector(maxNumSegmentsMergesPending);
  methods[42].selector = @selector(forceMergeDeletesWithBoolean:);
  methods[43].selector = @selector(forceMergeDeletes);
  methods[44].selector = @selector(maybeMerge);
  methods[45].selector = @selector(maybeMergeWithOrgApacheLuceneIndexMergePolicy:withOrgApacheLuceneIndexMergeTrigger:withInt:);
  methods[46].selector = @selector(updatePendingMergesWithOrgApacheLuceneIndexMergePolicy:withOrgApacheLuceneIndexMergeTrigger:withInt:);
  methods[47].selector = @selector(getMergingSegments);
  methods[48].selector = @selector(getNextMerge);
  methods[49].selector = @selector(hasPendingMerges);
  methods[50].selector = @selector(rollback);
  methods[51].selector = @selector(rollbackInternal);
  methods[52].selector = @selector(deleteAll);
  methods[53].selector = @selector(abortMerges);
  methods[54].selector = @selector(waitForMerges);
  methods[55].selector = @selector(checkpoint);
  methods[56].selector = @selector(checkpointNoSIS);
  methods[57].selector = @selector(changed);
  methods[58].selector = @selector(publishFrozenUpdatesWithOrgApacheLuceneIndexFrozenBufferedUpdates:);
  methods[59].selector = @selector(publishFlushedSegmentWithOrgApacheLuceneIndexSegmentCommitInfo:withOrgApacheLuceneIndexFrozenBufferedUpdates:withOrgApacheLuceneIndexFrozenBufferedUpdates:);
  methods[60].selector = @selector(resetMergeExceptions);
  methods[61].selector = @selector(noDupDirsWithOrgApacheLuceneStoreDirectoryArray:);
  methods[62].selector = @selector(acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray:);
  methods[63].selector = @selector(addIndexesWithOrgApacheLuceneStoreDirectoryArray:);
  methods[64].selector = @selector(addIndexesWithOrgApacheLuceneIndexCodecReaderArray:);
  methods[65].selector = @selector(copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo:withNSString:withOrgApacheLuceneStoreIOContext:);
  methods[66].selector = @selector(doAfterFlush);
  methods[67].selector = @selector(doBeforeFlush);
  methods[68].selector = @selector(prepareCommit);
  methods[69].selector = @selector(prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy:);
  methods[70].selector = @selector(setCommitDataWithJavaUtilMap:);
  methods[71].selector = @selector(getCommitData);
  methods[72].selector = @selector(commit);
  methods[73].selector = @selector(hasUncommittedChanges);
  methods[74].selector = @selector(commitInternalWithOrgApacheLuceneIndexMergePolicy:);
  methods[75].selector = @selector(finishCommit);
  methods[76].selector = @selector(holdsFullFlushLock);
  methods[77].selector = @selector(flushWithBoolean:withBoolean:);
  methods[78].selector = @selector(doFlushWithBoolean:);
  methods[79].selector = @selector(maybeApplyDeletesWithBoolean:);
  methods[80].selector = @selector(applyAllDeletesAndUpdates);
  methods[81].selector = @selector(getDocsWriter);
  methods[82].selector = @selector(numRamDocs);
  methods[83].selector = @selector(ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[84].selector = @selector(skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:withInt:);
  methods[85].selector = @selector(maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergeState:withInt:withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates:withNSStringArray:withOrgApacheLuceneIndexDocValuesFieldUpdatesArray:withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray:withInt:);
  methods[86].selector = @selector(commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergeState:);
  methods[87].selector = @selector(commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergeState:);
  methods[88].selector = @selector(handleMergeExceptionWithJavaLangThrowable:withOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[89].selector = @selector(mergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[90].selector = @selector(mergeSuccessWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[91].selector = @selector(registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[92].selector = @selector(mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[93].selector = @selector(_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[94].selector = @selector(setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:withNSString:);
  methods[95].selector = @selector(setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo:withNSString:withJavaUtilMap:);
  methods[96].selector = @selector(mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[97].selector = @selector(closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge:withBoolean:);
  methods[98].selector = @selector(mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergePolicy:);
  methods[99].selector = @selector(addMergeExceptionWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[100].selector = @selector(getBufferedDeleteTermsSize);
  methods[101].selector = @selector(getNumBufferedDeleteTerms);
  methods[102].selector = @selector(newestSegment);
  methods[103].selector = @selector(segString);
  methods[104].selector = @selector(segStringWithJavaLangIterable:);
  methods[105].selector = @selector(segStringWithOrgApacheLuceneIndexSegmentCommitInfo:);
  methods[106].selector = @selector(doWait);
  methods[107].selector = @selector(setKeepFullyDeletedSegmentsWithBoolean:);
  methods[108].selector = @selector(getKeepFullyDeletedSegments);
  methods[109].selector = @selector(filesExistWithOrgApacheLuceneIndexSegmentInfos:);
  methods[110].selector = @selector(toLiveInfosWithOrgApacheLuceneIndexSegmentInfos:);
  methods[111].selector = @selector(startCommitWithOrgApacheLuceneIndexSegmentInfos:);
  methods[112].selector = @selector(isLockedWithOrgApacheLuceneStoreDirectory:);
  methods[113].selector = @selector(tragicEventWithJavaLangThrowable:withNSString:);
  methods[114].selector = @selector(getTragicException);
  methods[115].selector = @selector(isOpen);
  methods[116].selector = @selector(testPointWithNSString:);
  methods[117].selector = @selector(nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:);
  methods[118].selector = @selector(isClosed);
  methods[119].selector = @selector(deleteUnusedFiles);
  methods[120].selector = @selector(deletePendingFiles);
  methods[121].selector = @selector(createCompoundFileWithOrgApacheLuceneUtilInfoStream:withOrgApacheLuceneStoreTrackingDirectoryWrapper:withOrgApacheLuceneIndexSegmentInfo:withOrgApacheLuceneStoreIOContext:);
  methods[122].selector = @selector(deleteNewFilesWithJavaUtilCollection:);
  methods[123].selector = @selector(flushFailedWithOrgApacheLuceneIndexSegmentInfo:);
  methods[124].selector = @selector(purgeWithBoolean:);
  methods[125].selector = @selector(applyDeletesAndPurgeWithBoolean:);
  methods[126].selector = @selector(doAfterSegmentFlushedWithBoolean:withBoolean:);
  methods[127].selector = @selector(incRefDeleterWithOrgApacheLuceneIndexSegmentInfos:);
  methods[128].selector = @selector(decRefDeleterWithOrgApacheLuceneIndexSegmentInfos:);
  methods[129].selector = @selector(processEventsWithBoolean:withBoolean:);
  methods[130].selector = @selector(processEventsWithJavaUtilQueue:withBoolean:withBoolean:);
  methods[131].selector = @selector(slowFileExistsWithOrgApacheLuceneStoreDirectory:withNSString:);
  methods[132].selector = @selector(reserveDocsWithLong:);
  methods[133].selector = @selector(testReserveDocsWithLong:);
  methods[134].selector = @selector(tooManyDocsWithLong:);
  methods[135].selector = @selector(addMergeRateLimitersWithOrgApacheLuceneStoreDirectory:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_DOCS", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_MAX_DOCS, 0x19, -1, -1, -1, -1 },
    { "MAX_POSITION", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_MAX_POSITION, 0x19, -1, -1, -1, -1 },
    { "actualMaxDocs", "I", .constantValue.asLong = 0, 0xa, -1, 129, -1, -1 },
    { "enableTestPoints_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "UNBOUNDED_MAX_MERGE_SEGMENTS", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS, 0x1a, -1, -1, -1, -1 },
    { "WRITE_LOCK_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 130, -1, -1 },
    { "SOURCE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 131, -1, -1 },
    { "SOURCE_MERGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 132, -1, -1 },
    { "SOURCE_FLUSH", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 133, -1, -1 },
    { "SOURCE_ADDINDEXES_READERS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 134, -1, -1 },
    { "MAX_TERM_LENGTH", "I", .constantValue.asInt = OrgApacheLuceneIndexIndexWriter_MAX_TERM_LENGTH, 0x19, -1, -1, -1, -1 },
    { "tragedy_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "directoryOrig_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mergeDirectory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "changeCount_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lastCommitChangeCount_", "J", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "rollbackSegments_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 135, -1 },
    { "pendingCommit_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "pendingCommitChangeCount_", "J", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "filesToCommit_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x2, -1, -1, 136, -1 },
    { "segmentInfos_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "globalFieldNumberMap_", "LOrgApacheLuceneIndexFieldInfos_FieldNumbers;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docWriter_", "LOrgApacheLuceneIndexDocumentsWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "eventQueue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 137, -1 },
    { "deleter_", "LOrgApacheLuceneIndexIndexFileDeleter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "segmentsToMerge_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 138, -1 },
    { "mergeMaxNumSegments_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeLock_", "LOrgApacheLuceneStoreLock;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "closing_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "mergingSegments_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x2, -1, -1, 139, -1 },
    { "mergeScheduler_", "LOrgApacheLuceneIndexMergeScheduler;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pendingMerges_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x2, -1, -1, 140, -1 },
    { "runningMerges_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 141, -1 },
    { "mergeExceptions_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 142, -1 },
    { "mergeGen_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stopMerges_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "didMessageState_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flushCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "flushDeletesCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "readerPool_", "LOrgApacheLuceneIndexIndexWriter_ReaderPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bufferedUpdatesStream_", "LOrgApacheLuceneIndexBufferedUpdatesStream;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "poolReaders_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "config_", "LOrgApacheLuceneIndexLiveIndexWriterConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "startCommitTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingNumDocs_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "rateLimiters_", "LOrgApacheLuceneUtilCloseableThreadLocal;", .constantValue.asLong = 0, 0x10, -1, -1, 143, -1 },
    { "codec_", "LOrgApacheLuceneCodecsCodec;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "infoStream_", "LOrgApacheLuceneUtilInfoStream;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "commitLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fullFlushLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keepFullyDeletedSegments_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxDocs", "I", "LJavaIoIOException;", "getReader", "Z", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "numDeletedDocs", "LOrgApacheLuceneIndexSegmentCommitInfo;", "ensureOpen", "LOrgApacheLuceneStoreAlreadyClosedException;", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexWriterConfig;", "readFieldInfos", "shouldClose", "addDocument", "LJavaLangIterable;", "(Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;)V", "addDocuments", "(Ljava/lang/Iterable<+Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;>;)V", "updateDocuments", "LOrgApacheLuceneIndexTerm;LJavaLangIterable;", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable<+Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;>;)V", "tryDeleteDocument", "LOrgApacheLuceneIndexIndexReader;I", "deleteDocuments", "[LOrgApacheLuceneIndexTerm;", "[LOrgApacheLuceneSearchQuery;", "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;)V", "updateNumericDocValue", "LOrgApacheLuceneIndexTerm;LNSString;J", "updateBinaryDocValue", "LOrgApacheLuceneIndexTerm;LNSString;LOrgApacheLuceneUtilBytesRef;", "updateDocValues", "LOrgApacheLuceneIndexTerm;[LOrgApacheLuceneDocumentField;", "()Ljava/util/Collection<Ljava/lang/String;>;", "maxDoc", "forceMerge", "IZ", "forceMergeDeletes", "maybeMerge", "LOrgApacheLuceneIndexMergePolicy;LOrgApacheLuceneIndexMergeTrigger;I", "updatePendingMerges", "()Ljava/util/Collection<Lorg/apache/lucene/index/SegmentCommitInfo;>;", "publishFrozenUpdates", "LOrgApacheLuceneIndexFrozenBufferedUpdates;", "publishFlushedSegment", "LOrgApacheLuceneIndexSegmentCommitInfo;LOrgApacheLuceneIndexFrozenBufferedUpdates;LOrgApacheLuceneIndexFrozenBufferedUpdates;", "noDupDirs", "[LOrgApacheLuceneStoreDirectory;", "acquireWriteLocks", "([Lorg/apache/lucene/store/Directory;)Ljava/util/List<Lorg/apache/lucene/store/Lock;>;", "addIndexes", "[LOrgApacheLuceneIndexCodecReader;", "copySegmentAsIs", "LOrgApacheLuceneIndexSegmentCommitInfo;LNSString;LOrgApacheLuceneStoreIOContext;", "prepareCommitInternal", "LOrgApacheLuceneIndexMergePolicy;", "setCommitData", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "commitInternal", "flush", "ZZ", "doFlush", "maybeApplyDeletes", "ensureValidMerge", "LOrgApacheLuceneIndexMergePolicy_OneMerge;", "skipDeletedDoc", "[LOrgApacheLuceneIndexDocValuesFieldUpdates_Iterator;I", "maybeApplyMergedDVUpdates", "LOrgApacheLuceneIndexMergePolicy_OneMerge;LOrgApacheLuceneIndexMergeState;ILOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates;[LNSString;[LOrgApacheLuceneIndexDocValuesFieldUpdates;[LOrgApacheLuceneIndexDocValuesFieldUpdates_Iterator;I", "commitMergedDeletesAndUpdates", "LOrgApacheLuceneIndexMergePolicy_OneMerge;LOrgApacheLuceneIndexMergeState;", "commitMerge", "handleMergeException", "LJavaLangThrowable;LOrgApacheLuceneIndexMergePolicy_OneMerge;", "merge", "mergeSuccess", "registerMerge", "mergeInit", "_mergeInit", "setDiagnostics", "LOrgApacheLuceneIndexSegmentInfo;LNSString;", "LOrgApacheLuceneIndexSegmentInfo;LNSString;LJavaUtilMap;", "(Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "mergeFinish", "closeMergeReaders", "LOrgApacheLuceneIndexMergePolicy_OneMerge;Z", "mergeMiddle", "LOrgApacheLuceneIndexMergePolicy_OneMerge;LOrgApacheLuceneIndexMergePolicy;", "addMergeException", "segString", "(Ljava/lang/Iterable<Lorg/apache/lucene/index/SegmentCommitInfo;>;)Ljava/lang/String;", "setKeepFullyDeletedSegments", "filesExist", "LOrgApacheLuceneIndexSegmentInfos;", "toLiveInfos", "startCommit", "isLocked", "LOrgApacheLuceneStoreDirectory;", (void *)&OrgApacheLuceneIndexIndexWriter__Annotations$0, "tragicEvent", "LJavaLangThrowable;LNSString;", "testPoint", "LNSString;", "nrtIsCurrent", "createCompoundFile", "LOrgApacheLuceneUtilInfoStream;LOrgApacheLuceneStoreTrackingDirectoryWrapper;LOrgApacheLuceneIndexSegmentInfo;LOrgApacheLuceneStoreIOContext;", "deleteNewFiles", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/String;>;)V", "flushFailed", "LOrgApacheLuceneIndexSegmentInfo;", "purge", "applyDeletesAndPurge", "doAfterSegmentFlushed", "incRefDeleter", "decRefDeleter", "processEvents", "LJavaUtilQueue;ZZ", "(Ljava/util/Queue<Lorg/apache/lucene/index/IndexWriter$Event;>;ZZ)Z", "slowFileExists", "LOrgApacheLuceneStoreDirectory;LNSString;", "reserveDocs", "J", "testReserveDocs", "tooManyDocs", "addMergeRateLimiters", &OrgApacheLuceneIndexIndexWriter_actualMaxDocs, &OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME, &OrgApacheLuceneIndexIndexWriter_SOURCE, &OrgApacheLuceneIndexIndexWriter_SOURCE_MERGE, &OrgApacheLuceneIndexIndexWriter_SOURCE_FLUSH, &OrgApacheLuceneIndexIndexWriter_SOURCE_ADDINDEXES_READERS, "Ljava/util/List<Lorg/apache/lucene/index/SegmentCommitInfo;>;", "Ljava/util/Collection<Ljava/lang/String;>;", "Ljava/util/Queue<Lorg/apache/lucene/index/IndexWriter$Event;>;", "Ljava/util/Map<Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/lang/Boolean;>;", "Ljava/util/HashSet<Lorg/apache/lucene/index/SegmentCommitInfo;>;", "Ljava/util/LinkedList<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;", "Ljava/util/Set<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;", "Ljava/util/List<Lorg/apache/lucene/index/MergePolicy$OneMerge;>;", "Lorg/apache/lucene/util/CloseableThreadLocal<Lorg/apache/lucene/index/MergeRateLimiter;>;", "LOrgApacheLuceneIndexIndexWriter_ReaderPool;LOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates;LOrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;LOrgApacheLuceneIndexIndexWriter_Event;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter = { "IndexWriter", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 136, 54, -1, 144, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter;
}

@end

void OrgApacheLuceneIndexIndexWriter_setMaxDocsWithInt_(jint maxDocs) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  if (maxDocs > OrgApacheLuceneIndexIndexWriter_MAX_DOCS) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"maxDocs must be <= IndexWriter.MAX_DOCS=", OrgApacheLuceneIndexIndexWriter_MAX_DOCS, @"; got: ", maxDocs));
  }
  OrgApacheLuceneIndexIndexWriter_actualMaxDocs = maxDocs;
}

jint OrgApacheLuceneIndexIndexWriter_getActualMaxDocs() {
  OrgApacheLuceneIndexIndexWriter_initialize();
  return OrgApacheLuceneIndexIndexWriter_actualMaxDocs;
}

void OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean failIfClosing) {
  if (JreLoadVolatileBoolean(&self->closed_) || (failIfClosing && JreLoadVolatileBoolean(&self->closing_))) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_withJavaLangThrowable_(@"this IndexWriter is closed", JreLoadVolatileId(&self->tragedy_));
  }
}

void OrgApacheLuceneIndexIndexWriter_ensureOpen(OrgApacheLuceneIndexIndexWriter *self) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, true);
}

void OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexIndexWriterConfig *conf) {
  NSObject_init(self);
  self->enableTestPoints_ = false;
  JreStrongAssignAndConsume(&self->changeCount_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->segmentsToMerge_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->mergingSegments_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->pendingMerges_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->runningMerges_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->mergeExceptions_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->flushCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->flushDeletesCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  JreStrongAssignAndConsume(&self->readerPool_, new_OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(self));
  JreStrongAssignAndConsume(&self->pendingNumDocs_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  JreStrongAssignAndConsume(&self->rateLimiters_, new_OrgApacheLuceneUtilCloseableThreadLocal_init());
  JreStrongAssignAndConsume(&self->commitLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->fullFlushLock_, new_NSObject_init());
  [((OrgApacheLuceneIndexIndexWriterConfig *) nil_chk(conf)) setIndexWriterWithOrgApacheLuceneIndexIndexWriter:self];
  JreStrongAssign(&self->config_, conf);
  JreStrongAssign(&self->infoStream_, [self->config_ getInfoStream]);
  jlong timeout = [self->config_ getWriteLockTimeout];
  OrgApacheLuceneStoreDirectory *lockDir;
  if (timeout == 0) {
    lockDir = d;
  }
  else {
    lockDir = create_OrgApacheLuceneStoreSleepingLockWrapper_initWithOrgApacheLuceneStoreDirectory_withLong_(d, timeout);
  }
  JreStrongAssign(&self->writeLock_, [((OrgApacheLuceneStoreDirectory *) nil_chk(lockDir)) obtainLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME]);
  jboolean success = false;
  @try {
    JreStrongAssign(&self->directoryOrig_, d);
    JreStrongAssignAndConsume(&self->directory_, new_OrgApacheLuceneStoreLockValidatingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreLock_(d, self->writeLock_));
    JreStrongAssign(&self->mergeDirectory_, OrgApacheLuceneIndexIndexWriter_addMergeRateLimitersWithOrgApacheLuceneStoreDirectory_(self, self->directory_));
    JreStrongAssign(&self->analyzer_, [self->config_ getAnalyzer]);
    JreStrongAssign(&self->mergeScheduler_, [self->config_ getMergeScheduler]);
    [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) setInfoStreamWithOrgApacheLuceneUtilInfoStream:self->infoStream_];
    JreStrongAssign(&self->codec_, [self->config_ getCodec]);
    JreStrongAssignAndConsume(&self->bufferedUpdatesStream_, new_OrgApacheLuceneIndexBufferedUpdatesStream_initPackagePrivateWithOrgApacheLuceneUtilInfoStream_(self->infoStream_));
    JreAssignVolatileBoolean(&self->poolReaders_, [self->config_ getReaderPooling]);
    OrgApacheLuceneIndexIndexWriterConfig_OpenMode *mode = JreRetainedLocalValue([self->config_ getOpenMode]);
    jboolean create;
    if (mode == JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE)) {
      create = true;
    }
    else if (mode == JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, APPEND)) {
      create = false;
    }
    else {
      create = !OrgApacheLuceneIndexDirectoryReader_indexExistsWithOrgApacheLuceneStoreDirectory_(self->directory_);
    }
    jboolean initialIndexExists = true;
    IOSObjectArray *files = [self->directory_ listAll];
    OrgApacheLuceneIndexIndexCommit *commit = JreRetainedLocalValue([self->config_ getIndexCommit]);
    OrgApacheLuceneIndexStandardDirectoryReader *reader;
    if (commit == nil) {
      reader = nil;
    }
    else {
      reader = [commit getReader];
    }
    if (create) {
      if ([self->config_ getIndexCommit] != nil) {
        if (mode == JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE)) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"cannot use IndexWriterConfig.setIndexCommit() with OpenMode.CREATE");
        }
        else {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"cannot use IndexWriterConfig.setIndexCommit() when index has no commit");
        }
      }
      OrgApacheLuceneIndexSegmentInfos *sis = nil;
      @try {
        sis = OrgApacheLuceneIndexSegmentInfos_readLatestCommitWithOrgApacheLuceneStoreDirectory_(self->directory_);
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis)) clear];
      }
      @catch (JavaIoIOException *e) {
        initialIndexExists = false;
        sis = create_OrgApacheLuceneIndexSegmentInfos_init();
      }
      JreStrongAssign(&self->segmentInfos_, sis);
      JreStrongAssign(&self->rollbackSegments_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) createBackupSegmentInfos]);
      [self changed];
    }
    else if (reader != nil) {
      if (!JreObjectEqualsEquals([reader directory], [((OrgApacheLuceneIndexIndexCommit *) nil_chk(commit)) getDirectory])) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"IndexCommit's reader must have the same directory as the IndexCommit");
      }
      if (!JreObjectEqualsEquals([reader directory], self->directoryOrig_)) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"IndexCommit's reader must have the same directory passed to IndexWriter");
      }
      if ([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(reader->segmentInfos_)) getLastGeneration] == 0) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"index must already have an initial commit to open from reader");
      }
      JreStrongAssign(&self->segmentInfos_, [reader->segmentInfos_ java_clone]);
      OrgApacheLuceneIndexSegmentInfos *lastCommit;
      @try {
        lastCommit = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(self->directoryOrig_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) getSegmentsFileName]);
      }
      @catch (JavaIoIOException *ioe) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"the provided reader is stale: its prior commit file \"", [self->segmentInfos_ getSegmentsFileName], @"\" is missing from index"));
      }
      if (reader->writer_ != nil) {
        JreAssert(JreLoadVolatileBoolean(&reader->writer_->closed_), @"org/apache/lucene/index/IndexWriter.java:889 condition failed: assert reader.writer.closed;");
        [self->segmentInfos_ updateGenerationVersionAndCounterWithOrgApacheLuceneIndexSegmentInfos:reader->writer_->segmentInfos_];
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(lastCommit)) updateGenerationVersionAndCounterWithOrgApacheLuceneIndexSegmentInfos:reader->writer_->segmentInfos_];
      }
      JreStrongAssign(&self->rollbackSegments_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(lastCommit)) createBackupSegmentInfos]);
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@", @"init from reader ", reader)];
        OrgApacheLuceneIndexIndexWriter_messageState(self);
      }
    }
    else {
      NSString *lastSegmentsFile = OrgApacheLuceneIndexSegmentInfos_getLastCommitSegmentsFileNameWithNSStringArray_(files);
      if (lastSegmentsFile == nil) {
        @throw create_OrgApacheLuceneIndexIndexNotFoundException_initWithNSString_(JreStrcat("$@$$", @"no segments* file found in ", self->directory_, @": files: ", JavaUtilArrays_toStringWithNSObjectArray_(files)));
      }
      JreStrongAssign(&self->segmentInfos_, OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(self->directoryOrig_, lastSegmentsFile));
      if (commit != nil) {
        if (!JreObjectEqualsEquals([commit getDirectory], self->directoryOrig_)) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@", @"IndexCommit's directory doesn't match my directory, expected=", self->directoryOrig_, @", got=", [commit getDirectory]));
        }
        OrgApacheLuceneIndexSegmentInfos *oldInfos = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(self->directoryOrig_, [commit getSegmentsFileName]);
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) replaceWithOrgApacheLuceneIndexSegmentInfos:oldInfos];
        [self changed];
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$C", @"init: loaded commit \"", [commit getSegmentsFileName], '"')];
        }
      }
      JreStrongAssign(&self->rollbackSegments_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) createBackupSegmentInfos]);
    }
    [self->pendingNumDocs_ setWithLong:[self->segmentInfos_ totalMaxDoc]];
    JreStrongAssign(&self->globalFieldNumberMap_, OrgApacheLuceneIndexIndexWriter_getFieldNumberMap(self));
    [((OrgApacheLuceneIndexFlushPolicy *) nil_chk([self->config_ getFlushPolicy])) init__WithOrgApacheLuceneIndexLiveIndexWriterConfig:self->config_];
    JreStrongAssignAndConsume(&self->docWriter_, new_OrgApacheLuceneIndexDocumentsWriter_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(self, self->config_, self->directoryOrig_, self->directory_));
    JreStrongAssign(&self->eventQueue_, [self->docWriter_ eventQueue]);
    @synchronized(self) {
      JreStrongAssignAndConsume(&self->deleter_, new_OrgApacheLuceneIndexIndexFileDeleter_initPackagePrivateWithNSStringArray_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexIndexWriter_withBoolean_withBoolean_(files, self->directoryOrig_, self->directory_, [self->config_ getIndexDeletionPolicy], self->segmentInfos_, self->infoStream_, self, initialIndexExists, reader != nil));
      JreAssert(create || OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(self, self->segmentInfos_), @"org/apache/lucene/index/IndexWriter.java:958 condition failed: assert create || filesExist(segmentInfos);");
    }
    if (self->deleter_->startingCommitDeleted_) {
      [self changed];
    }
    if (reader != nil) {
      id<JavaUtilList> leaves = JreRetainedLocalValue([reader leaves]);
      JreAssert([self->segmentInfos_ size] == [((id<JavaUtilList>) nil_chk(leaves)) size], @"org/apache/lucene/index/IndexWriter.java:974 condition failed: assert segmentInfos.size() == leaves.size();");
      for (jint i = 0; i < [leaves size]; i++) {
        OrgApacheLuceneIndexLeafReaderContext *leaf = JreRetainedLocalValue([leaves getWithInt:i]);
        OrgApacheLuceneIndexSegmentReader *segReader = (OrgApacheLuceneIndexSegmentReader *) cast_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(leaf)) reader], [OrgApacheLuceneIndexSegmentReader class]);
        OrgApacheLuceneIndexSegmentReader *newReader = create_OrgApacheLuceneIndexSegmentReader_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexSegmentReader_withOrgApacheLuceneUtilBits_withInt_([self->segmentInfos_ infoWithInt:i], segReader, [((OrgApacheLuceneIndexSegmentReader *) nil_chk(segReader)) getLiveDocs], [segReader numDocs]);
        [((id<JavaUtilMap>) nil_chk(self->readerPool_->readerMap_)) putWithId:[newReader getSegmentInfo] withId:create_OrgApacheLuceneIndexReadersAndUpdates_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentReader_(self, newReader)];
      }
      [self->segmentInfos_ changed];
      [self changed];
    }
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$Z", @"init: create=", create)];
      OrgApacheLuceneIndexIndexWriter_messageState(self);
    }
    success = true;
  }
  @finally {
    if (!success) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"init: hit exception on init; releasing write lock"];
      }
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->writeLock_ } count:1 type:JavaIoCloseable_class_()]);
      JreStrongAssign(&self->writeLock_, nil);
    }
  }
}

OrgApacheLuceneIndexIndexWriter *new_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexIndexWriterConfig *conf) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_, d, conf)
}

OrgApacheLuceneIndexIndexWriter *create_OrgApacheLuceneIndexIndexWriter_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_(OrgApacheLuceneStoreDirectory *d, OrgApacheLuceneIndexIndexWriterConfig *conf) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_, d, conf)
}

OrgApacheLuceneIndexFieldInfos *OrgApacheLuceneIndexIndexWriter_readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo_(OrgApacheLuceneIndexSegmentCommitInfo *si) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  OrgApacheLuceneCodecsCodec *codec = JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(si))->info_)) getCodec]);
  OrgApacheLuceneCodecsFieldInfosFormat *reader = JreRetainedLocalValue([((OrgApacheLuceneCodecsCodec *) nil_chk(codec)) fieldInfosFormat]);
  if ([si hasFieldUpdates]) {
    NSString *segmentSuffix = JavaLangLong_toStringWithLong_withInt_([si getFieldInfosGen], JavaLangCharacter_MAX_RADIX);
    return [((OrgApacheLuceneCodecsFieldInfosFormat *) nil_chk(reader)) readWithOrgApacheLuceneStoreDirectory:si->info_->dir_ withOrgApacheLuceneIndexSegmentInfo:si->info_ withNSString:segmentSuffix withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READONCE)];
  }
  else if ([si->info_ getUseCompoundFile]) {
    OrgApacheLuceneStoreDirectory *cfs = [((OrgApacheLuceneCodecsCompoundFormat *) nil_chk([codec compoundFormat])) getCompoundReaderWithOrgApacheLuceneStoreDirectory:si->info_->dir_ withOrgApacheLuceneIndexSegmentInfo:si->info_ withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT)];
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      return [((OrgApacheLuceneCodecsFieldInfosFormat *) nil_chk(reader)) readWithOrgApacheLuceneStoreDirectory:cfs withOrgApacheLuceneIndexSegmentInfo:si->info_ withNSString:@"" withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READONCE)];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (cfs != nil) {
        if (__primaryException1 != nil) {
          @try {
            [cfs close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [cfs close];
        }
      }
    }
  }
  else {
    return [((OrgApacheLuceneCodecsFieldInfosFormat *) nil_chk(reader)) readWithOrgApacheLuceneStoreDirectory:si->info_->dir_ withOrgApacheLuceneIndexSegmentInfo:si->info_ withNSString:@"" withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READONCE)];
  }
}

OrgApacheLuceneIndexFieldInfos_FieldNumbers *OrgApacheLuceneIndexIndexWriter_getFieldNumberMap(OrgApacheLuceneIndexIndexWriter *self) {
  OrgApacheLuceneIndexFieldInfos_FieldNumbers *map = create_OrgApacheLuceneIndexFieldInfos_FieldNumbers_init();
  for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(self->segmentInfos_)) {
    OrgApacheLuceneIndexFieldInfos *fis = OrgApacheLuceneIndexIndexWriter_readFieldInfosWithOrgApacheLuceneIndexSegmentCommitInfo_(info);
    for (OrgApacheLuceneIndexFieldInfo * __strong fi in nil_chk(fis)) {
      [map addOrGetWithNSString:((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->name_ withInt:fi->number_ withOrgApacheLuceneIndexDocValuesType:[fi getDocValuesType]];
    }
  }
  return map;
}

void OrgApacheLuceneIndexIndexWriter_messageState(OrgApacheLuceneIndexIndexWriter *self) {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"] && self->didMessageState_ == false) {
    self->didMessageState_ = true;
    [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@$$$$C$", @"\ndir=", self->directoryOrig_, @"\nindex=", [self segString], @"\nversion=", [((OrgApacheLuceneUtilVersion *) nil_chk(JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST))) description], 0x000a, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) description])];
  }
}

void OrgApacheLuceneIndexIndexWriter_shutdown(OrgApacheLuceneIndexIndexWriter *self) {
  if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"cannot close: prepareCommit was already called with no corresponding call to commit");
  }
  if (OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(self, true)) {
    jboolean success = false;
    @try {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"now flush at close"];
      }
      OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(self, true, true);
      [self waitForMerges];
      OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getMergePolicy]);
      OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
      success = true;
    }
    @finally {
      if (success == false) {
        @try {
          OrgApacheLuceneIndexIndexWriter_rollbackInternal(self);
        }
        @catch (JavaLangThrowable *t) {
        }
      }
    }
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_shouldCloseWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean waitForClose) {
  @synchronized(self) {
    while (true) {
      if (JreLoadVolatileBoolean(&self->closed_) == false) {
        if (JreLoadVolatileBoolean(&self->closing_) == false) {
          JreAssignVolatileBoolean(&self->closing_, true);
          return true;
        }
        else if (waitForClose == false) {
          return false;
        }
        else {
          OrgApacheLuceneIndexIndexWriter_doWait(self);
        }
      }
      else {
        return false;
      }
    }
  }
}

NSString *OrgApacheLuceneIndexIndexWriter_newSegmentName(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self->segmentInfos_) {
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->changeCount_)) incrementAndGet];
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) changed];
    return JreStrcat("C$", '_', JavaLangInteger_toStringWithInt_withInt_(self->segmentInfos_->counter_++, JavaLangCharacter_MAX_RADIX));
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_maxNumSegmentsMergesPending(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->pendingMerges_)) {
      if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) return true;
    }
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->runningMerges_)) {
      if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) return true;
    }
    return false;
  }
}

void OrgApacheLuceneIndexIndexWriter_maybeMerge(OrgApacheLuceneIndexIndexWriter *self) {
  OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getMergePolicy], JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, EXPLICIT), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
}

void OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy, OrgApacheLuceneIndexMergeTrigger *trigger, jint maxNumSegments) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  jboolean newMergesFound = OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, mergePolicy, trigger, maxNumSegments);
  [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) mergeWithOrgApacheLuceneIndexIndexWriter:self withOrgApacheLuceneIndexMergeTrigger:trigger withBoolean:newMergesFound];
}

jboolean OrgApacheLuceneIndexIndexWriter_updatePendingMergesWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy, OrgApacheLuceneIndexMergeTrigger *trigger, jint maxNumSegments) {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_messageState(self);
    JreAssert(maxNumSegments == -1 || maxNumSegments > 0, @"org/apache/lucene/index/IndexWriter.java:1943 condition failed: assert maxNumSegments == -1 || maxNumSegments > 0;");
    JreAssert(trigger != nil, @"org/apache/lucene/index/IndexWriter.java:1944 condition failed: assert trigger != null;");
    if (self->stopMerges_) {
      return false;
    }
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      return false;
    }
    jboolean newMergesFound = false;
    OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec;
    if (maxNumSegments != OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS) {
      JreAssert(trigger == JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, EXPLICIT) || trigger == JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, MERGE_FINISHED), JreStrcat("$$", @"Expected EXPLICT or MERGE_FINISHED as trigger even with maxNumSegments set but was: ", [((OrgApacheLuceneIndexMergeTrigger *) nil_chk(trigger)) name]));
      spec = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) findForcedMergesWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withInt:maxNumSegments withJavaUtilMap:JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(self->segmentsToMerge_) withOrgApacheLuceneIndexIndexWriter:self];
      newMergesFound = (spec != nil);
      if (newMergesFound) {
        jint numMerges = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_MergeSpecification *) nil_chk(spec))->merges_)) size];
        for (jint i = 0; i < numMerges; i++) {
          OrgApacheLuceneIndexMergePolicy_OneMerge *merge = [spec->merges_ getWithInt:i];
          ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ = maxNumSegments;
        }
      }
    }
    else {
      spec = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) findMergesWithOrgApacheLuceneIndexMergeTrigger:trigger withOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withOrgApacheLuceneIndexIndexWriter:self];
    }
    newMergesFound = (spec != nil);
    if (newMergesFound) {
      jint numMerges = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_MergeSpecification *) nil_chk(spec))->merges_)) size];
      for (jint i = 0; i < numMerges; i++) {
        OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, [spec->merges_ getWithInt:i]);
      }
    }
    return newMergesFound;
  }
}

void OrgApacheLuceneIndexIndexWriter_rollbackInternal(OrgApacheLuceneIndexIndexWriter *self) {
  jboolean success = false;
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:@"rollback"];
  }
  @try {
    OrgApacheLuceneIndexIndexWriter_abortMerges(self);
    [((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(self->rateLimiters_)) close];
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"rollback: done finish merges"];
    }
    [((OrgApacheLuceneIndexMergeScheduler *) nil_chk(self->mergeScheduler_)) close];
    [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(self->bufferedUpdatesStream_)) clear];
    [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) close];
    [self->docWriter_ abortWithOrgApacheLuceneIndexIndexWriter:self];
    @synchronized(self) {
      if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(JreLoadVolatileId(&self->pendingCommit_))) rollbackCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
        @try {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_)];
        }
        @finally {
          JreVolatileStrongAssign(&self->pendingCommit_, nil);
          [self java_notifyAll];
        }
      }
      [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropAllWithBoolean:false];
      [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) rollbackSegmentInfosWithJavaUtilList:self->rollbackSegments_];
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"rollback: infos=", [self segStringWithJavaLangIterable:self->segmentInfos_])];
      }
      OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"rollback before checkpoint");
      if (JreLoadVolatileId(&self->tragedy_) == nil) {
        [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withBoolean:false];
        [self->deleter_ refresh];
        [self->deleter_ close];
      }
      JreAssignVolatileLong(&self->lastCommitChangeCount_, [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->changeCount_)) get]);
      JreAssignVolatileBoolean(&self->closed_, true);
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->writeLock_ } count:1 type:JavaIoCloseable_class_()]);
      JreStrongAssign(&self->writeLock_, nil);
    }
    success = true;
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"rollbackInternal"];
  }
  @finally {
    if (success == false) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->mergeScheduler_ } count:1 type:JavaIoCloseable_class_()]);
    }
    @synchronized(self) {
      if (success == false) {
        if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
          @try {
            [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(JreLoadVolatileId(&self->pendingCommit_))) rollbackCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_)];
          }
          @catch (JavaLangThrowable *t) {
          }
          JreVolatileStrongAssign(&self->pendingCommit_, nil);
        }
        OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ self->readerPool_, self->deleter_, self->writeLock_ } count:3 type:JavaIoCloseable_class_()]);
        JreStrongAssign(&self->writeLock_, nil);
      }
      JreAssignVolatileBoolean(&self->closed_, true);
      JreAssignVolatileBoolean(&self->closing_, false);
      [self java_notifyAll];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_abortMerges(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    self->stopMerges_ = true;
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->pendingMerges_)) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"now abort pending merge ", [self segStringWithJavaLangIterable:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_])];
      }
      [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_)) setAbort];
      OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
    }
    [self->pendingMerges_ clear];
    for (OrgApacheLuceneIndexMergePolicy_OneMerge * __strong merge in nil_chk(self->runningMerges_)) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"now abort running merge ", [self segStringWithJavaLangIterable:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_])];
      }
      [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_)) setAbort];
    }
    while ([((id<JavaUtilSet>) nil_chk(self->runningMerges_)) size] != 0) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$I$", @"now wait for ", [((id<JavaUtilSet>) nil_chk(self->runningMerges_)) size], @" running merge/s to abort")];
      }
      OrgApacheLuceneIndexIndexWriter_doWait(self);
    }
    [self java_notifyAll];
    JreAssert(0 == [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) size], @"org/apache/lucene/index/IndexWriter.java:2274 condition failed: assert 0 == mergingSegments.size();");
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"all running merges have aborted"];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_resetMergeExceptions(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    JreStrongAssignAndConsume(&self->mergeExceptions_, new_JavaUtilArrayList_init());
    self->mergeGen_++;
  }
}

void OrgApacheLuceneIndexIndexWriter_noDupDirsWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs) {
  JavaUtilHashSet *dups = create_JavaUtilHashSet_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(dirs))->size_; i++) {
    if ([dups containsWithId:IOSObjectArray_Get(dirs, i)]) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Directory ", IOSObjectArray_Get(dirs, i), @" appears more than once"));
    if (JreObjectEqualsEquals(IOSObjectArray_Get(dirs, i), self->directoryOrig_)) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot add directory to itself");
    [dups addWithId:IOSObjectArray_Get(dirs, i)];
  }
}

id<JavaUtilList> OrgApacheLuceneIndexIndexWriter_acquireWriteLocksWithOrgApacheLuceneStoreDirectoryArray_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *dirs) {
  id<JavaUtilList> locks = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(dirs))->size_; i++) {
    jboolean success = false;
    @try {
      OrgApacheLuceneStoreLock *lock = JreRetainedLocalValue([((OrgApacheLuceneStoreDirectory *) nil_chk(IOSObjectArray_Get(dirs, i))) obtainLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME]);
      [locks addWithId:lock];
      success = true;
    }
    @finally {
      if (success == false) {
        OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(locks);
      }
    }
  }
  return locks;
}

OrgApacheLuceneIndexSegmentCommitInfo *OrgApacheLuceneIndexIndexWriter_copySegmentAsIsWithOrgApacheLuceneIndexSegmentCommitInfo_withNSString_withOrgApacheLuceneStoreIOContext_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentCommitInfo *info, NSString *segName, OrgApacheLuceneStoreIOContext *context) {
  OrgApacheLuceneIndexSegmentInfo *newInfo = create_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneUtilVersion_withNSString_withInt_withBoolean_withOrgApacheLuceneCodecsCodec_withJavaUtilMap_withByteArray_withJavaUtilMap_(self->directoryOrig_, [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) getVersion], segName, [info->info_ maxDoc], [info->info_ getUseCompoundFile], [info->info_ getCodec], [info->info_ getDiagnostics], [info->info_ getId], [info->info_ getAttributes]);
  OrgApacheLuceneIndexSegmentCommitInfo *newInfoPerCommit = create_OrgApacheLuceneIndexSegmentCommitInfo_initWithOrgApacheLuceneIndexSegmentInfo_withInt_withLong_withLong_withLong_(newInfo, [info getDelCount], [info getDelGen], [info getFieldInfosGen], [info getDocValuesGen]);
  [newInfo setFilesWithJavaUtilCollection:[info files]];
  jboolean success = false;
  id<JavaUtilSet> copiedFiles = create_JavaUtilHashSet_init();
  @try {
    for (NSString * __strong file in nil_chk([info files])) {
      NSString *newFileName = [newInfo namedForThisSegmentWithNSString:file];
      JreAssert(!OrgApacheLuceneIndexIndexWriter_slowFileExistsWithOrgApacheLuceneStoreDirectory_withNSString_(self->directory_, newFileName), JreStrcat("$$$@", @"file \"", newFileName, @"\" already exists; newInfo.files=", [newInfo files]));
      [((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) copyFromWithOrgApacheLuceneStoreDirectory:info->info_->dir_ withNSString:file withNSString:newFileName withOrgApacheLuceneStoreIOContext:context];
      [copiedFiles addWithId:newFileName];
    }
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, copiedFiles);
    }
  }
  JreAssert([copiedFiles isEqual:[newInfoPerCommit files]], @"org/apache/lucene/index/IndexWriter.java:2747 condition failed: assert copiedFiles.equals(newInfoPerCommit.files());");
  return newInfoPerCommit;
}

void OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy) {
  self->startCommitTime_ = JavaLangSystem_nanoTime();
  @synchronized(self->commitLock_) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"prepareCommit: flush"];
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"  index before flush ", [self segString])];
    }
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot commit", JreLoadVolatileId(&self->tragedy_));
    }
    if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"prepareCommit was already called with no corresponding call to commit");
    }
    [self doBeforeFlush];
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startDoFlush");
    OrgApacheLuceneIndexSegmentInfos *toCommit = nil;
    jboolean anySegmentsFlushed = false;
    @try {
      @synchronized(self->fullFlushLock_) {
        jboolean flushSuccess = false;
        jboolean success = false;
        @try {
          anySegmentsFlushed = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) flushAllThreads];
          if (!anySegmentsFlushed) {
            [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->flushCount_)) incrementAndGet];
          }
          OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, false, true);
          flushSuccess = true;
          @synchronized(self) {
            OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(self, true);
            [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) commitWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
            if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->changeCount_)) get] != JreLoadVolatileLong(&self->lastCommitChangeCount_)) {
              [self->changeCount_ incrementAndGet];
              [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) changed];
            }
            toCommit = JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) java_clone]);
            JreAssignVolatileLong(&self->pendingCommitChangeCount_, [self->changeCount_ get]);
            JreStrongAssign(&self->filesToCommit_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(toCommit)) filesWithBoolean:false]);
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) incRefWithJavaUtilCollection:self->filesToCommit_];
          }
          success = true;
        }
        @finally {
          if (!success) {
            if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
              [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during prepareCommit"];
            }
          }
          [self->docWriter_ finishFullFlushWithOrgApacheLuceneIndexIndexWriter:self withBoolean:flushSuccess];
          [self doAfterFlush];
        }
      }
    }
    @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
      [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"prepareCommit"];
    }
    @catch (JavaLangOutOfMemoryError *tragedy) {
      [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"prepareCommit"];
    }
    jboolean success = false;
    @try {
      if (anySegmentsFlushed) {
        OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, mergePolicy, JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, FULL_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
      }
      OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_(self, toCommit);
      success = true;
    }
    @finally {
      if (!success) {
        @synchronized(self) {
          if (self->filesToCommit_ != nil) {
            [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWhileHandlingExceptionWithJavaUtilCollection:self->filesToCommit_];
            JreStrongAssign(&self->filesToCommit_, nil);
          }
        }
      }
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_commitInternalWithOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy *mergePolicy) {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: start"];
  }
  @synchronized(self->commitLock_) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: enter lock"];
    }
    if (JreLoadVolatileId(&self->pendingCommit_) == nil) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: now prepare"];
      }
      OrgApacheLuceneIndexIndexWriter_prepareCommitInternalWithOrgApacheLuceneIndexMergePolicy_(self, mergePolicy);
    }
    else {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: already prepared"];
      }
    }
    OrgApacheLuceneIndexIndexWriter_finishCommit(self);
  }
}

void OrgApacheLuceneIndexIndexWriter_finishCommit(OrgApacheLuceneIndexIndexWriter *self) {
  jboolean commitCompleted = false;
  jboolean finished = false;
  NSString *committedSegmentsFileName = nil;
  @try {
    @synchronized(self) {
      OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
      if (JreLoadVolatileId(&self->tragedy_) != nil) {
        @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot complete commit", JreLoadVolatileId(&self->tragedy_));
      }
      if (JreLoadVolatileId(&self->pendingCommit_) != nil) {
        @try {
          if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: pendingCommit != null"];
          }
          committedSegmentsFileName = JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(JreLoadVolatileId(&self->pendingCommit_))) finishCommitWithOrgApacheLuceneStoreDirectory:self->directory_]);
          commitCompleted = true;
          if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$C", @"commit: done writing segments file \"", committedSegmentsFileName, '"')];
          }
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) checkpointWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_) withBoolean:true];
          [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) updateGenerationWithOrgApacheLuceneIndexSegmentInfos:JreLoadVolatileId(&self->pendingCommit_)];
          JreAssignVolatileLong(&self->lastCommitChangeCount_, JreLoadVolatileLong(&self->pendingCommitChangeCount_));
          JreStrongAssign(&self->rollbackSegments_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(JreLoadVolatileId(&self->pendingCommit_))) createBackupSegmentInfos]);
          finished = true;
        }
        @finally {
          [self java_notifyAll];
          @try {
            if (finished) {
              [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithJavaUtilCollection:self->filesToCommit_];
            }
            else if (commitCompleted == false) {
              [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWhileHandlingExceptionWithJavaUtilCollection:self->filesToCommit_];
            }
          }
          @finally {
            JreVolatileStrongAssign(&self->pendingCommit_, nil);
            JreStrongAssign(&self->filesToCommit_, nil);
          }
        }
      }
      else {
        JreAssert(self->filesToCommit_ == nil, @"org/apache/lucene/index/IndexWriter.java:3049 condition failed: assert filesToCommit == null;");
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: pendingCommit == null; skip"];
        }
      }
    }
  }
  @catch (JavaLangThrowable *t) {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"hit exception during finishCommit: ", [t getMessage])];
    }
    if (commitCompleted) {
      [self tragicEventWithJavaLangThrowable:t withNSString:@"finishCommit"];
    }
    else {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
    }
  }
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"commit: took %.1f msec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_((JavaLangSystem_nanoTime() - self->startCommitTime_) / 1000000.0) } count:1 type:NSObject_class_()])];
    [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commit: done"];
  }
}

void OrgApacheLuceneIndexIndexWriter_flushWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(self, false);
  if (OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(self, applyAllDeletes) && triggerMerge) {
    OrgApacheLuceneIndexIndexWriter_maybeMergeWithOrgApacheLuceneIndexMergePolicy_withOrgApacheLuceneIndexMergeTrigger_withInt_(self, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getMergePolicy], JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, FULL_FLUSH), OrgApacheLuceneIndexIndexWriter_UNBOUNDED_MAX_MERGE_SEGMENTS);
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_doFlushWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes) {
  if (JreLoadVolatileId(&self->tragedy_) != nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot flush", JreLoadVolatileId(&self->tragedy_));
  }
  [self doBeforeFlush];
  OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startDoFlush");
  jboolean success = false;
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$Z", @"  start flush: applyAllDeletes=", applyAllDeletes)];
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"  index before flush ", [self segString])];
    }
    jboolean anyChanges = false;
    @synchronized(self->fullFlushLock_) {
      jboolean flushSuccess = false;
      @try {
        anyChanges = [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) flushAllThreads];
        if (!anyChanges) {
          [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->flushCount_)) incrementAndGet];
        }
        flushSuccess = true;
      }
      @finally {
        [self->docWriter_ finishFullFlushWithOrgApacheLuceneIndexIndexWriter:self withBoolean:flushSuccess];
        OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(self, false, true);
      }
    }
    @synchronized(self) {
      anyChanges |= OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(self, applyAllDeletes);
      [self doAfterFlush];
      success = true;
      return anyChanges;
    }
  }
  @catch (OrgApacheLuceneIndexAbortingException *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"doFlush"];
    return false;
  }
  @catch (JavaLangOutOfMemoryError *tragedy) {
    [self tragicEventWithJavaLangThrowable:tragedy withNSString:@"doFlush"];
    return false;
  }
  @finally {
    if (!success) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception during flush"];
      }
    }
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_maybeApplyDeletesWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean applyAllDeletes) {
  @synchronized(self) {
    if (applyAllDeletes) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"apply all deletes during flush"];
      }
      return OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(self);
    }
    else if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$I$J", @"don't apply deletes now delTermCount=", [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(self->bufferedUpdatesStream_)) numTerms], @" bytesUsed=", [self->bufferedUpdatesStream_ ramBytesUsed])];
    }
    return false;
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_applyAllDeletesAndUpdates(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->flushDeletesCount_)) incrementAndGet];
    OrgApacheLuceneIndexBufferedUpdatesStream_ApplyDeletesResult *result;
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$I", @"now apply all deletes for all segments maxDoc=", ([((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) getNumDocs] + [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) totalMaxDoc]))];
    }
    result = [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(self->bufferedUpdatesStream_)) applyDeletesAndUpdatesWithOrgApacheLuceneIndexIndexWriter_ReaderPool:self->readerPool_ withJavaUtilList:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) asList]];
    if (((OrgApacheLuceneIndexBufferedUpdatesStream_ApplyDeletesResult *) nil_chk(result))->anyDeletes_) {
      [self checkpoint];
    }
    if (!self->keepFullyDeletedSegments_ && result->allDeleted_ != nil) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"drop 100% deleted segments: ", [self segStringWithJavaLangIterable:result->allDeleted_])];
      }
      for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in result->allDeleted_) {
        if (![((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) containsWithId:info]) {
          [self->segmentInfos_ removeWithOrgApacheLuceneIndexSegmentCommitInfo:info];
          [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) addAndGetWithLong:-[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc]];
          [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:info];
        }
      }
      [self checkpoint];
    }
    [self->bufferedUpdatesStream_ pruneWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
    return result->anyDeletes_;
  }
}

void OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_)) {
      if (![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentCommitInfo:info]) {
        @throw create_OrgApacheLuceneIndexMergePolicy_MergeException_initWithNSString_withOrgApacheLuceneStoreDirectory_(JreStrcat("$$$$", @"MergePolicy selected a segment (", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_, @") that is not in the current index ", [self segString]), self->directoryOrig_);
      }
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(OrgApacheLuceneIndexIndexWriter *self, IOSObjectArray *updatesIters, jint deletedDoc) {
  {
    IOSObjectArray *a__ = updatesIters;
    OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *iter = *b__++;
      if ([((OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *) nil_chk(iter)) doc] == deletedDoc) {
        [iter nextDoc];
      }
      JreAssert([iter doc] > deletedDoc, JreStrcat("$I$I", @"updateDoc=", [iter doc], @" deletedDoc=", deletedDoc));
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState, jint docUpto, OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *holder, IOSObjectArray *mergingFields, IOSObjectArray *dvFieldUpdates, IOSObjectArray *updatesIters, jint curDoc) {
  jint newDoc = -1;
  for (jint idx = 0; idx < ((IOSObjectArray *) nil_chk(mergingFields))->size_; idx++) {
    OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *updatesIter = IOSObjectArray_Get(nil_chk(updatesIters), idx);
    if ([((OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *) nil_chk(updatesIter)) doc] == curDoc) {
      if (((OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *) nil_chk(holder))->mergedDeletesAndUpdates_ == nil) {
        OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(holder, self->readerPool_, merge, mergeState, false);
      }
      if (newDoc == -1) {
        newDoc = [((OrgApacheLuceneIndexMergePolicy_DocMap *) nil_chk(holder->docMap_)) mapWithInt:docUpto];
      }
      OrgApacheLuceneIndexDocValuesFieldUpdates *dvUpdates = IOSObjectArray_Get(nil_chk(dvFieldUpdates), idx);
      [((OrgApacheLuceneIndexDocValuesFieldUpdates *) nil_chk(dvUpdates)) addWithInt:newDoc withId:[updatesIter value]];
      [updatesIter nextDoc];
    }
    else {
      JreAssert([updatesIter doc] > curDoc, JreStrcat("$$$I$I", @"field=", IOSObjectArray_Get(mergingFields, idx), @" updateDoc=", [updatesIter doc], @" curDoc=", curDoc));
    }
  }
}

OrgApacheLuceneIndexReadersAndUpdates *OrgApacheLuceneIndexIndexWriter_commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState) {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startCommitMergeDeletes");
    id<JavaUtilList> sourceSegments = ((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_;
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"commitMergeDeletes ", [self segStringWithJavaLangIterable:merge->segments_])];
    }
    jint docUpto = 0;
    jlong minGen = JavaLangLong_MAX_VALUE;
    OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *holder = create_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init();
    OrgApacheLuceneIndexDocValuesFieldUpdates_Container *mergedDVUpdates = create_OrgApacheLuceneIndexDocValuesFieldUpdates_Container_init();
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(sourceSegments)) size]; i++) {
      OrgApacheLuceneIndexSegmentCommitInfo *info = JreRetainedLocalValue([sourceSegments getWithInt:i]);
      minGen = JavaLangMath_minWithLong_withLong_([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) getBufferedDeletesGen], minGen);
      jint maxDoc = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info->info_)) maxDoc];
      id<OrgApacheLuceneUtilBits> prevLiveDocs = [((OrgApacheLuceneIndexSegmentReader *) nil_chk([((id<JavaUtilList>) nil_chk(merge->readers_)) getWithInt:i])) getLiveDocs];
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:info withBoolean:false];
      JreAssert(rld != nil, JreStrcat("$$", @"seg=", info->info_->name_));
      id<OrgApacheLuceneUtilBits> currentLiveDocs = [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) getLiveDocs];
      id<JavaUtilMap> mergingFieldUpdates = [rld getMergingFieldUpdates];
      IOSObjectArray *mergingFields;
      IOSObjectArray *dvFieldUpdates;
      IOSObjectArray *updatesIters;
      if ([((id<JavaUtilMap>) nil_chk(mergingFieldUpdates)) isEmpty]) {
        mergingFields = nil;
        updatesIters = nil;
        dvFieldUpdates = nil;
      }
      else {
        mergingFields = [IOSObjectArray arrayWithLength:[mergingFieldUpdates size] type:NSString_class_()];
        dvFieldUpdates = [IOSObjectArray arrayWithLength:[mergingFieldUpdates size] type:OrgApacheLuceneIndexDocValuesFieldUpdates_class_()];
        updatesIters = [IOSObjectArray arrayWithLength:[mergingFieldUpdates size] type:OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator_class_()];
        jint idx = 0;
        for (id<JavaUtilMap_Entry> __strong e in nil_chk([mergingFieldUpdates entrySet])) {
          NSString *field = JreRetainedLocalValue([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]);
          OrgApacheLuceneIndexDocValuesFieldUpdates *updates = JreRetainedLocalValue([e getValue]);
          IOSObjectArray_Set(mergingFields, idx, field);
          IOSObjectArray_Set(dvFieldUpdates, idx, [mergedDVUpdates getUpdatesWithNSString:field withOrgApacheLuceneIndexDocValuesType:((OrgApacheLuceneIndexDocValuesFieldUpdates *) nil_chk(updates))->type_]);
          if (IOSObjectArray_Get(dvFieldUpdates, idx) == nil) {
            IOSObjectArray_Set(dvFieldUpdates, idx, [mergedDVUpdates newUpdatesWithNSString:field withOrgApacheLuceneIndexDocValuesType:updates->type_ withInt:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexMergeState *) nil_chk(mergeState))->segmentInfo_)) maxDoc]]);
          }
          IOSObjectArray_Set(updatesIters, idx, [updates iterator]);
          [((OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *) nil_chk(IOSObjectArray_Get(updatesIters, idx))) nextDoc];
          ++idx;
        }
      }
      if (prevLiveDocs != nil) {
        JreAssert(currentLiveDocs != nil, @"org/apache/lucene/index/IndexWriter.java:3344 condition failed: assert currentLiveDocs != null;");
        JreAssert([prevLiveDocs length] == maxDoc, @"org/apache/lucene/index/IndexWriter.java:3345 condition failed: assert prevLiveDocs.length() == maxDoc;");
        JreAssert([((id<OrgApacheLuceneUtilBits>) nil_chk(currentLiveDocs)) length] == maxDoc, @"org/apache/lucene/index/IndexWriter.java:3346 condition failed: assert currentLiveDocs.length() == maxDoc;");
        if (!JreObjectEqualsEquals(currentLiveDocs, prevLiveDocs)) {
          for (jint j = 0; j < maxDoc; j++) {
            if (![prevLiveDocs getWithInt:j]) {
              JreAssert(![currentLiveDocs getWithInt:j], @"org/apache/lucene/index/IndexWriter.java:3366 condition failed: assert !currentLiveDocs.get(j);");
            }
            else {
              if (![currentLiveDocs getWithInt:j]) {
                if (holder->mergedDeletesAndUpdates_ == nil || !holder->initializedWritableLiveDocs_) {
                  OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(holder, self->readerPool_, merge, mergeState, true);
                }
                [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(holder->mergedDeletesAndUpdates_)) delete__WithInt:[((OrgApacheLuceneIndexMergePolicy_DocMap *) nil_chk(holder->docMap_)) mapWithInt:docUpto]];
                if (mergingFields != nil) {
                  OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, updatesIters, j);
                }
              }
              else if (mergingFields != nil) {
                OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, j);
              }
              docUpto++;
            }
          }
        }
        else if (mergingFields != nil) {
          for (jint j = 0; j < maxDoc; j++) {
            if ([prevLiveDocs getWithInt:j]) {
              OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, j);
              docUpto++;
            }
            else {
              OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, updatesIters, j);
            }
          }
        }
        else {
          docUpto += [info->info_ maxDoc] - [info getDelCount] - [rld getPendingDeleteCount];
        }
      }
      else if (currentLiveDocs != nil) {
        JreAssert([currentLiveDocs length] == maxDoc, @"org/apache/lucene/index/IndexWriter.java:3399 condition failed: assert currentLiveDocs.length() == maxDoc;");
        for (jint j = 0; j < maxDoc; j++) {
          if (![currentLiveDocs getWithInt:j]) {
            if (holder->mergedDeletesAndUpdates_ == nil || !holder->initializedWritableLiveDocs_) {
              OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(holder, self->readerPool_, merge, mergeState, true);
            }
            [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(holder->mergedDeletesAndUpdates_)) delete__WithInt:[((OrgApacheLuceneIndexMergePolicy_DocMap *) nil_chk(holder->docMap_)) mapWithInt:docUpto]];
            if (mergingFields != nil) {
              OrgApacheLuceneIndexIndexWriter_skipDeletedDocWithOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, updatesIters, j);
            }
          }
          else if (mergingFields != nil) {
            OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, j);
          }
          docUpto++;
        }
      }
      else if (mergingFields != nil) {
        for (jint j = 0; j < maxDoc; j++) {
          OrgApacheLuceneIndexIndexWriter_maybeApplyMergedDVUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withInt_withOrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_withNSStringArray_withOrgApacheLuceneIndexDocValuesFieldUpdatesArray_withOrgApacheLuceneIndexDocValuesFieldUpdates_IteratorArray_withInt_(self, merge, mergeState, docUpto, holder, mergingFields, dvFieldUpdates, updatesIters, j);
          docUpto++;
        }
      }
      else {
        docUpto += [info->info_ maxDoc];
      }
    }
    JreAssert(docUpto == [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_)) maxDoc], @"org/apache/lucene/index/IndexWriter.java:3429 condition failed: assert docUpto == merge.info.info.maxDoc();");
    if ([mergedDVUpdates any]) {
      jboolean success = false;
      @try {
        [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(holder->mergedDeletesAndUpdates_)) writeFieldUpdatesWithOrgApacheLuceneStoreDirectory:self->directory_ withOrgApacheLuceneIndexDocValuesFieldUpdates_Container:mergedDVUpdates];
        success = true;
      }
      @finally {
        if (!success) {
          [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(holder->mergedDeletesAndUpdates_)) dropChanges];
          [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_];
        }
      }
    }
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      if (holder->mergedDeletesAndUpdates_ == nil) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"no new deletes or field updates since merge started"];
      }
      else {
        NSString *msg = JreStrcat("I$", [holder->mergedDeletesAndUpdates_ getPendingDeleteCount], @" new deletes");
        if ([mergedDVUpdates any]) {
          JreStrAppend(&msg, "$I$", @" and ", [mergedDVUpdates size], @" new field updates");
        }
        JreStrAppend(&msg, "$", @" since merge started");
        [self->infoStream_ messageWithNSString:@"IW" withNSString:msg];
      }
    }
    [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) setBufferedDeletesGenWithLong:minGen];
    return JreRetainedLocalValue(holder->mergedDeletesAndUpdates_);
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState) {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startCommitMerge");
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot complete merge", JreLoadVolatileId(&self->tragedy_));
    }
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$", @"commitMerge: ", [self segStringWithJavaLangIterable:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_], @" index=", [self segString])];
    }
    JreAssert(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_, @"org/apache/lucene/index/IndexWriter.java:3481 condition failed: assert merge.registerDone;");
    if ([((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) getAbort]) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"commitMerge: skip: it was aborted"];
      }
      [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_];
      OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) files]);
      return false;
    }
    OrgApacheLuceneIndexReadersAndUpdates *mergedUpdates = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_)) maxDoc] == 0 ? nil : OrgApacheLuceneIndexIndexWriter_commitMergedDeletesAndUpdatesWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState);
    JreAssert(![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_], @"org/apache/lucene/index/IndexWriter.java:3517 condition failed: assert !segmentInfos.contains(merge.info);");
    jboolean allDeleted = [((id<JavaUtilList>) nil_chk(merge->segments_)) size] == 0 || [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_ maxDoc] == 0 || (mergedUpdates != nil && [mergedUpdates getPendingDeleteCount] == [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_ maxDoc]);
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      if (allDeleted) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@$$", @"merged segment ", merge->info_, @" is 100% deleted", (self->keepFullyDeletedSegments_ ? @"" : @"; skipping insert"))];
      }
    }
    jboolean dropSegment = allDeleted && !self->keepFullyDeletedSegments_;
    JreAssert([merge->segments_ size] > 0 || dropSegment, @"org/apache/lucene/index/IndexWriter.java:3534 condition failed: assert merge.segments.size() > 0 || dropSegment;");
    JreAssert([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_ maxDoc] != 0 || self->keepFullyDeletedSegments_ || dropSegment, @"org/apache/lucene/index/IndexWriter.java:3536 condition failed: assert merge.info.info.maxDoc() != 0 || keepFullyDeletedSegments || dropSegment;");
    if (mergedUpdates != nil) {
      jboolean success = false;
      @try {
        if (dropSegment) {
          [mergedUpdates dropChanges];
        }
        [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) release__WithOrgApacheLuceneIndexReadersAndUpdates:mergedUpdates withBoolean:false];
        success = true;
      }
      @finally {
        if (!success) {
          [mergedUpdates dropChanges];
          [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_];
        }
      }
    }
    [self->segmentInfos_ applyMergeChangesWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge withBoolean:dropSegment];
    jint delDocCount = merge->totalMaxDoc_ - [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_ maxDoc];
    JreAssert(delDocCount >= 0, @"org/apache/lucene/index/IndexWriter.java:3566 condition failed: assert delDocCount >= 0;");
    [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) addAndGetWithLong:-delDocCount];
    if (dropSegment) {
      JreAssert(![self->segmentInfos_ containsWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_], @"org/apache/lucene/index/IndexWriter.java:3570 condition failed: assert !segmentInfos.contains(merge.info);");
      [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_];
      OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) files]);
    }
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(self, merge, false);
      success = true;
    }
    @finally {
      if (success) {
        [self checkpoint];
      }
      else {
        @try {
          [self checkpoint];
        }
        @catch (JavaLangThrowable *t) {
        }
      }
    }
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) deletePendingFiles];
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"after commitMerge: ", [self segString])];
    }
    if (merge->maxNumSegments_ != -1 && !dropSegment) {
      if (![((id<JavaUtilMap>) nil_chk(self->segmentsToMerge_)) containsKeyWithId:merge->info_]) {
        [((id<JavaUtilMap>) nil_chk(self->segmentsToMerge_)) putWithId:merge->info_ withId:JreLoadStatic(JavaLangBoolean, FALSE)];
      }
    }
    return true;
  }
}

void OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, JavaLangThrowable *t, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$@", @"handleMergeException: merge=", [self segStringWithJavaLangIterable:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->segments_], @" exc=", t)];
  }
  [((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge)) setExceptionWithJavaLangThrowable:t];
  [self addMergeExceptionWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
  if ([t isKindOfClass:[OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]]) {
    if (merge->isExternal_) {
      @throw nil_chk((OrgApacheLuceneIndexMergePolicy_MergeAbortedException *) t);
    }
  }
  else {
    OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_registerMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_) {
      return true;
    }
    JreAssert([((id<JavaUtilList>) nil_chk(merge->segments_)) size] > 0, @"org/apache/lucene/index/IndexWriter.java:3722 condition failed: assert merge.segments.size() > 0;");
    if (self->stopMerges_) {
      [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) setAbort];
      @throw create_OrgApacheLuceneIndexMergePolicy_MergeAbortedException_initWithNSString_(JreStrcat("$$", @"merge is aborted: ", [self segStringWithJavaLangIterable:merge->segments_]));
    }
    jboolean isExternal = false;
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in merge->segments_) {
      if ([((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) containsWithId:info]) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$$", @"reject merge ", [self segStringWithJavaLangIterable:merge->segments_], @": segment ", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" is already marked for merge")];
        }
        return false;
      }
      if (![((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) containsWithOrgApacheLuceneIndexSegmentCommitInfo:info]) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$$$", @"reject merge ", [self segStringWithJavaLangIterable:merge->segments_], @": segment ", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" does not exist in live infos")];
        }
        return false;
      }
      if (!JreObjectEqualsEquals(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->dir_, self->directoryOrig_)) {
        isExternal = true;
      }
      if ([((id<JavaUtilMap>) nil_chk(self->segmentsToMerge_)) containsKeyWithId:info]) {
        merge->maxNumSegments_ = self->mergeMaxNumSegments_;
      }
    }
    OrgApacheLuceneIndexIndexWriter_ensureValidMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
    [((JavaUtilLinkedList *) nil_chk(self->pendingMerges_)) addWithId:merge];
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$I$", @"add merge to pendingMerges: ", [self segStringWithJavaLangIterable:merge->segments_], @" [total ", [((JavaUtilLinkedList *) nil_chk(self->pendingMerges_)) size], @" pending]")];
    }
    merge->mergeGen_ = self->mergeGen_;
    merge->isExternal_ = isExternal;
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithNSString_(@"registerMerge merging= [");
      for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(self->mergingSegments_)) {
        [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_])) appendWithNSString:@", "];
      }
      [builder appendWithNSString:@"]"];
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:[builder description]];
      }
    }
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in merge->segments_) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"registerMerge info=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info])];
      }
      [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) addWithId:info];
    }
    JreAssert(JreLoadVolatileLong(&merge->estimatedMergeBytes_) == 0, @"org/apache/lucene/index/IndexWriter.java:3785 condition failed: assert merge.estimatedMergeBytes == 0;");
    JreAssert(JreLoadVolatileLong(&merge->totalMergeBytes_) == 0, @"org/apache/lucene/index/IndexWriter.java:3786 condition failed: assert merge.totalMergeBytes == 0;");
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in merge->segments_) {
      if ([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc] > 0) {
        jint delCount = [self numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info];
        JreAssert(delCount <= [info->info_ maxDoc], @"org/apache/lucene/index/IndexWriter.java:3790 condition failed: assert delCount <= info.info.maxDoc();");
        jdouble delRatio = ((jdouble) delCount) / [info->info_ maxDoc];
        JrePlusAssignVolatileLongD(&merge->estimatedMergeBytes_, [info sizeInBytes] * (1.0 - delRatio));
        JrePlusAssignVolatileLongJ(&merge->totalMergeBytes_, [info sizeInBytes]);
      }
    }
    merge->registerDone_ = true;
    return true;
  }
}

void OrgApacheLuceneIndexIndexWriter_mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
      success = true;
    }
    @finally {
      if (!success) {
        if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception in mergeInit"];
        }
        OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
      }
    }
  }
}

void OrgApacheLuceneIndexIndexWriter__mergeInitWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startMergeInit");
    JreAssert(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_, @"org/apache/lucene/index/IndexWriter.java:3824 condition failed: assert merge.registerDone;");
    JreAssert(merge->maxNumSegments_ == -1 || merge->maxNumSegments_ > 0, @"org/apache/lucene/index/IndexWriter.java:3825 condition failed: assert merge.maxNumSegments == -1 || merge.maxNumSegments > 0;");
    if (JreLoadVolatileId(&self->tragedy_) != nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot merge", JreLoadVolatileId(&self->tragedy_));
    }
    if (merge->info_ != nil) {
      return;
    }
    if ([((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(merge->rateLimiter_)) getAbort]) {
      return;
    }
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$I$", @"now apply deletes for ", [((id<JavaUtilList>) nil_chk(merge->segments_)) size], @" merging segments")];
    }
    OrgApacheLuceneIndexBufferedUpdatesStream_ApplyDeletesResult *result = [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(self->bufferedUpdatesStream_)) applyDeletesAndUpdatesWithOrgApacheLuceneIndexIndexWriter_ReaderPool:self->readerPool_ withJavaUtilList:merge->segments_];
    if (((OrgApacheLuceneIndexBufferedUpdatesStream_ApplyDeletesResult *) nil_chk(result))->anyDeletes_) {
      [self checkpoint];
    }
    if (!self->keepFullyDeletedSegments_ && result->allDeleted_ != nil) {
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@", @"drop 100% deleted segments: ", result->allDeleted_)];
      }
      for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in result->allDeleted_) {
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) removeWithOrgApacheLuceneIndexSegmentCommitInfo:info];
        [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) addAndGetWithLong:-[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc]];
        if ([((id<JavaUtilList>) nil_chk(merge->segments_)) containsWithId:info]) {
          [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) removeWithId:info];
          [merge->segments_ removeWithId:info];
        }
        [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) dropWithOrgApacheLuceneIndexSegmentCommitInfo:info];
      }
      [self checkpoint];
    }
    NSString *mergeSegmentName = OrgApacheLuceneIndexIndexWriter_newSegmentName(self);
    OrgApacheLuceneIndexSegmentInfo *si = create_OrgApacheLuceneIndexSegmentInfo_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneUtilVersion_withNSString_withInt_withBoolean_withOrgApacheLuceneCodecsCodec_withJavaUtilMap_withByteArray_withJavaUtilMap_(self->directoryOrig_, JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST), mergeSegmentName, -1, false, self->codec_, JavaUtilCollections_emptyMap(), OrgApacheLuceneUtilStringHelper_randomId(), create_JavaUtilHashMap_init());
    id<JavaUtilMap> details = create_JavaUtilHashMap_init();
    [details putWithId:@"mergeMaxNumSegments" withId:JreStrcat("I", merge->maxNumSegments_)];
    [details putWithId:@"mergeFactor" withId:JavaLangInteger_toStringWithInt_([((id<JavaUtilList>) nil_chk(merge->segments_)) size])];
    OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(si, OrgApacheLuceneIndexIndexWriter_SOURCE_MERGE, details);
    [merge setMergeInfoWithOrgApacheLuceneIndexSegmentCommitInfo:create_OrgApacheLuceneIndexSegmentCommitInfo_initWithOrgApacheLuceneIndexSegmentInfo_withInt_withLong_withLong_withLong_(si, 0, -1LL, -1LL, -1LL)];
    [self->bufferedUpdatesStream_ pruneWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_];
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$C$", @"merge seg=", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_))->name_, ' ', [self segStringWithJavaLangIterable:merge->segments_])];
    }
  }
}

void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_(OrgApacheLuceneIndexSegmentInfo *info, NSString *source) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(info, source, nil);
}

void OrgApacheLuceneIndexIndexWriter_setDiagnosticsWithOrgApacheLuceneIndexSegmentInfo_withNSString_withJavaUtilMap_(OrgApacheLuceneIndexSegmentInfo *info, NSString *source, id<JavaUtilMap> details) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  id<JavaUtilMap> diagnostics = create_JavaUtilHashMap_init();
  [diagnostics putWithId:@"source" withId:source];
  [diagnostics putWithId:@"lucene.version" withId:[((OrgApacheLuceneUtilVersion *) nil_chk(JreLoadStatic(OrgApacheLuceneUtilVersion, LATEST))) description]];
  [diagnostics putWithId:@"os" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, OS_NAME)];
  [diagnostics putWithId:@"os.arch" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, OS_ARCH)];
  [diagnostics putWithId:@"os.version" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, OS_VERSION)];
  [diagnostics putWithId:@"java.version" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, JAVA_VERSION)];
  [diagnostics putWithId:@"java.vendor" withId:JreLoadStatic(OrgApacheLuceneUtilConstants, JAVA_VENDOR)];
  [diagnostics putWithId:@"java.runtime.version" withId:JavaLangSystem_getPropertyWithNSString_withNSString_(@"java.runtime.version", @"undefined")];
  [diagnostics putWithId:@"java.vm.version" withId:JavaLangSystem_getPropertyWithNSString_withNSString_(@"java.vm.version", @"undefined")];
  [diagnostics putWithId:@"timestamp" withId:JavaLangLong_toStringWithLong_([create_JavaUtilDate_init() getTime])];
  if (details != nil) {
    [diagnostics putAllWithJavaUtilMap:details];
  }
  [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) setDiagnosticsWithJavaUtilMap:diagnostics];
}

void OrgApacheLuceneIndexIndexWriter_mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  @synchronized(self) {
    [self java_notifyAll];
    if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->registerDone_) {
      id<JavaUtilList> sourceSegments = merge->segments_;
      for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(sourceSegments)) {
        [((JavaUtilHashSet *) nil_chk(self->mergingSegments_)) removeWithId:info];
      }
      merge->registerDone_ = false;
    }
    [((id<JavaUtilSet>) nil_chk(self->runningMerges_)) removeWithId:merge];
  }
}

void OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, jboolean suppressExceptions) {
  @synchronized(self) {
    jint numSegments = [((id<JavaUtilList>) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->readers_)) size];
    JavaLangThrowable *th = nil;
    jboolean drop = !suppressExceptions;
    for (jint i = 0; i < numSegments; i++) {
      OrgApacheLuceneIndexSegmentReader *sr = [((id<JavaUtilList>) nil_chk(merge->readers_)) getWithInt:i];
      if (sr != nil) {
        @try {
          OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:[sr getSegmentInfo] withBoolean:false];
          JreAssert(rld != nil, @"org/apache/lucene/index/IndexWriter.java:3950 condition failed: assert rld != null;");
          if (drop) {
            [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) dropChanges];
          }
          else {
            [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) dropMergingUpdates];
          }
          [rld release__WithOrgApacheLuceneIndexSegmentReader:sr];
          [self->readerPool_ release__WithOrgApacheLuceneIndexReadersAndUpdates:rld];
          if (drop) {
            [self->readerPool_ dropWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_];
          }
        }
        @catch (JavaLangThrowable *t) {
          if (th == nil) {
            th = t;
          }
        }
        [((id<JavaUtilList>) nil_chk(merge->readers_)) setWithInt:i withId:nil];
      }
    }
    @try {
      [merge mergeFinished];
    }
    @catch (JavaLangThrowable *t) {
      if (th == nil) {
        th = t;
      }
    }
    if (!suppressExceptions) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(th);
    }
  }
}

jint OrgApacheLuceneIndexIndexWriter_mergeMiddleWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergePolicy_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergePolicy *mergePolicy) {
  [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_)) checkAbort];
  id<JavaUtilList> sourceSegments = JreRetainedLocalValue(merge->segments_);
  OrgApacheLuceneStoreIOContext *context = create_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreMergeInfo_([merge getStoreMergeInfo]);
  OrgApacheLuceneStoreTrackingDirectoryWrapper *dirWrapper = create_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(self->mergeDirectory_);
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
    [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"merging ", [self segStringWithJavaLangIterable:merge->segments_])];
  }
  JreStrongAssignAndConsume(&merge->readers_, new_JavaUtilArrayList_init());
  jboolean success = false;
  @try {
    jint segUpto = 0;
    while (segUpto < [((id<JavaUtilList>) nil_chk(sourceSegments)) size]) {
      OrgApacheLuceneIndexSegmentCommitInfo *info = [sourceSegments getWithInt:segUpto];
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:info withBoolean:true];
      OrgApacheLuceneIndexSegmentReader *reader;
      id<OrgApacheLuceneUtilBits> liveDocs;
      jint delCount;
      @synchronized(self) {
        reader = JreRetainedLocalValue([((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) getReaderForMergeWithOrgApacheLuceneStoreIOContext:context]);
        liveDocs = JreRetainedLocalValue([rld getReadOnlyLiveDocs]);
        delCount = [rld getPendingDeleteCount] + [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) getDelCount];
        JreAssert(reader != nil, @"org/apache/lucene/index/IndexWriter.java:4028 condition failed: assert reader != null;");
        JreAssert([rld verifyDocCounts], @"org/apache/lucene/index/IndexWriter.java:4029 condition failed: assert rld.verifyDocCounts();");
        if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
          if ([rld getPendingDeleteCount] != 0) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$I$I", @"seg=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" delCount=", [info getDelCount], @" pendingDelCount=", [rld getPendingDeleteCount])];
          }
          else if ([info getDelCount] != 0) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$I", @"seg=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" delCount=", [info getDelCount])];
          }
          else {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$", @"seg=", [self segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" no deletes")];
          }
        }
      }
      if ([((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) numDeletedDocs] != delCount) {
        JreAssert(delCount > [reader numDeletedDocs], @"org/apache/lucene/index/IndexWriter.java:4048 condition failed: assert delCount > reader.numDeletedDocs();");
        OrgApacheLuceneIndexSegmentReader *newReader;
        @synchronized(self) {
          newReader = create_OrgApacheLuceneIndexSegmentReader_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexSegmentReader_withOrgApacheLuceneUtilBits_withInt_(info, reader, liveDocs, [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info->info_)) maxDoc] - delCount);
        }
        jboolean released = false;
        @try {
          [rld release__WithOrgApacheLuceneIndexSegmentReader:reader];
          released = true;
        }
        @finally {
          if (!released) {
            [newReader decRef];
          }
        }
        reader = newReader;
      }
      [((id<JavaUtilList>) nil_chk(merge->readers_)) addWithId:reader];
      JreAssert(delCount <= [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info->info_)) maxDoc], JreStrcat("$I$I$I$I", @"delCount=", delCount, @" info.maxDoc=", [info->info_ maxDoc], @" rld.pendingDeleteCount=", [rld getPendingDeleteCount], @" info.getDelCount()=", [info getDelCount]));
      segUpto++;
    }
    OrgApacheLuceneIndexSegmentMerger *merger = create_OrgApacheLuceneIndexSegmentMerger_initPackagePrivateWithJavaUtilList_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexFieldInfos_FieldNumbers_withOrgApacheLuceneStoreIOContext_([merge getMergeReaders], ((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_, self->infoStream_, dirWrapper, self->globalFieldNumberMap_, context);
    [merge->rateLimiter_ checkAbort];
    JreAssignVolatileLong(&merge->mergeStartNS_, JavaLangSystem_nanoTime());
    jboolean success3 = false;
    @try {
      if ([merger shouldMerge]) {
        [merger merge];
      }
      success3 = true;
    }
    @finally {
      if (!success3) {
        @synchronized(self) {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) refreshWithNSString:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_))->name_];
        }
      }
    }
    OrgApacheLuceneIndexMergeState *mergeState = JreRetainedLocalValue(merger->mergeState_);
    JreAssert(JreObjectEqualsEquals(((OrgApacheLuceneIndexMergeState *) nil_chk(mergeState))->segmentInfo_, ((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_), @"org/apache/lucene/index/IndexWriter.java:4104 condition failed: assert mergeState.segmentInfo == merge.info.info;");
    [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(merge->info_->info_)) setFilesWithJavaUtilCollection:create_JavaUtilHashSet_initWithJavaUtilCollection_([dirWrapper getCreatedFiles])];
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      if ([merger shouldMerge]) {
        jlong t1 = JavaLangSystem_nanoTime();
        jdouble sec = (t1 - JreLoadVolatileLong(&merge->mergeStartNS_)) / 1000000000.;
        jdouble segmentMB = ([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) sizeInBytes] / 1024. / 1024.);
        jdouble stoppedSec = [merge->rateLimiter_ getTotalStoppedNS] / 1000000000.;
        jdouble throttleSec = [merge->rateLimiter_ getTotalPausedNS] / 1000000000.;
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@$I$$$$$$$$$$$$", @"merge codec=", self->codec_, @" maxDoc=", [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_ maxDoc], @"; merged segment has ", ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(mergeState->mergeFieldInfos_)) hasVectors] ? @"vectors" : @"no vectors"), @"; ", ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(mergeState->mergeFieldInfos_)) hasNorms] ? @"norms" : @"no norms"), @"; ", ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(mergeState->mergeFieldInfos_)) hasDocValues] ? @"docValues" : @"no docValues"), @"; ", ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(mergeState->mergeFieldInfos_)) hasProx] ? @"prox" : @"no prox"), @"; ", ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(mergeState->mergeFieldInfos_)) hasProx] ? @"freqs" : @"no freqs"), @"; ", NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"%.1f sec (%.1f sec stopped, %.1f sec paused) to merge segment [%.2f MB, %.2f MB/sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(sec), JavaLangDouble_valueOfWithDouble_(stoppedSec), JavaLangDouble_valueOfWithDouble_(throttleSec), JavaLangDouble_valueOfWithDouble_(segmentMB), JavaLangDouble_valueOfWithDouble_(segmentMB / sec) } count:5 type:NSObject_class_()]))];
      }
      else {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:@"skip merging fully deleted segments"];
      }
    }
    if ([merger shouldMerge] == false) {
      JreAssert([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_ maxDoc] == 0, @"org/apache/lucene/index/IndexWriter.java:4134 condition failed: assert merge.info.info.maxDoc() == 0;");
      OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState);
      return 0;
    }
    JreAssert([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_ maxDoc] > 0, @"org/apache/lucene/index/IndexWriter.java:4139 condition failed: assert merge.info.info.maxDoc() > 0;");
    jboolean useCompoundFile;
    @synchronized(self) {
      useCompoundFile = [((OrgApacheLuceneIndexMergePolicy *) nil_chk(mergePolicy)) useCompoundFileWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_ withOrgApacheLuceneIndexSegmentCommitInfo:merge->info_ withOrgApacheLuceneIndexIndexWriter:self];
    }
    if (useCompoundFile) {
      success = false;
      id<JavaUtilCollection> filesToRemove = JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) files]);
      OrgApacheLuceneStoreTrackingDirectoryWrapper *trackingCFSDir = create_OrgApacheLuceneStoreTrackingDirectoryWrapper_initWithOrgApacheLuceneStoreDirectory_(self->mergeDirectory_);
      @try {
        OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(self, self->infoStream_, trackingCFSDir, ((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_, context);
        success = true;
      }
      @catch (JavaLangThrowable *t) {
        @synchronized(self) {
          if ([merge->rateLimiter_ getAbort]) {
            if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
              [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit merge abort exception creating compound file during merge"];
            }
            return 0;
          }
          else {
            OrgApacheLuceneIndexIndexWriter_handleMergeExceptionWithJavaLangThrowable_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, t, merge);
          }
        }
      }
      @finally {
        if (success == false) {
          if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception creating compound file during merge"];
          }
          OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) files]);
        }
      }
      success = false;
      @synchronized(self) {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, filesToRemove);
        if ([merge->rateLimiter_ getAbort]) {
          if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:@"abort merge after building CFS"];
          }
          OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) files]);
          return 0;
        }
      }
      [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_ setUseCompoundFileWithBoolean:true];
    }
    else {
      success = false;
    }
    jboolean success2 = false;
    @try {
      [((OrgApacheLuceneCodecsSegmentInfoFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(self->codec_)) segmentInfoFormat])) writeWithOrgApacheLuceneStoreDirectory:self->directory_ withOrgApacheLuceneIndexSegmentInfo:((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_ withOrgApacheLuceneStoreIOContext:context];
      success2 = true;
    }
    @finally {
      if (!success2) {
        OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) files]);
      }
    }
    if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"merged segment size=%.3f MB vs estimate=%.3f MB", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_)) sizeInBytes] / 1024. / 1024.), JavaLangDouble_valueOfWithDouble_(JreLoadVolatileLong(&merge->estimatedMergeBytes_) / 1024 / 1024.) } count:2 type:NSObject_class_()])];
    }
    OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *mergedSegmentWarmer = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getMergedSegmentWarmer];
    if (JreLoadVolatileBoolean(&self->poolReaders_) && mergedSegmentWarmer != nil) {
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(self->readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:merge->info_ withBoolean:true];
      OrgApacheLuceneIndexSegmentReader *sr = [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) getReaderWithOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READ)];
      @try {
        [mergedSegmentWarmer warmWithOrgApacheLuceneIndexLeafReader:sr];
      }
      @finally {
        @synchronized(self) {
          [rld release__WithOrgApacheLuceneIndexSegmentReader:sr];
          [self->readerPool_ release__WithOrgApacheLuceneIndexReadersAndUpdates:rld];
        }
      }
    }
    if (!OrgApacheLuceneIndexIndexWriter_commitMergeWithOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_(self, merge, mergeState)) {
      return 0;
    }
    success = true;
  }
  @finally {
    if (success == false) {
      OrgApacheLuceneIndexIndexWriter_closeMergeReadersWithOrgApacheLuceneIndexMergePolicy_OneMerge_withBoolean_(self, merge, true);
    }
  }
  return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_)) maxDoc];
}

void OrgApacheLuceneIndexIndexWriter_doWait(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    @try {
      [self java_waitWithLong:1000];
    }
    @catch (JavaLangInterruptedException *ie) {
      @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
    }
  }
}

jboolean OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync) {
  id<JavaUtilCollection> files = JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(toSync)) filesWithBoolean:false]);
  for (NSString * __strong fileName in nil_chk(files)) {
    JreAssert(OrgApacheLuceneIndexIndexWriter_slowFileExistsWithOrgApacheLuceneStoreDirectory_withNSString_(self->directory_, fileName), JreStrcat("$$$$", @"file ", fileName, @" does not exist; files=", JavaUtilArrays_toStringWithNSObjectArray_([((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) listAll])));
    JreAssert([((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) existsWithNSString:fileName], JreStrcat("$$", @"IndexFileDeleter doesn't know about file ", fileName));
  }
  return true;
}

void OrgApacheLuceneIndexIndexWriter_startCommitWithOrgApacheLuceneIndexSegmentInfos_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneIndexSegmentInfos *toSync) {
  OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"startStartCommit");
  JreAssert(JreLoadVolatileId(&self->pendingCommit_) == nil, @"org/apache/lucene/index/IndexWriter.java:4389 condition failed: assert pendingCommit == null;");
  if (JreLoadVolatileId(&self->tragedy_) != nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_withJavaLangThrowable_(@"this writer hit an unrecoverable error; cannot commit", JreLoadVolatileId(&self->tragedy_));
  }
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"IW"]) {
      [self->infoStream_ messageWithNSString:@"IW" withNSString:@"startCommit(): start"];
    }
    @synchronized(self) {
      if (JreLoadVolatileLong(&self->lastCommitChangeCount_) > [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->changeCount_)) get]) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$J$@", @"lastCommitChangeCount=", JreLoadVolatileLong(&self->lastCommitChangeCount_), @",changeCount=", self->changeCount_));
      }
      if (JreLoadVolatileLong(&self->pendingCommitChangeCount_) == JreLoadVolatileLong(&self->lastCommitChangeCount_)) {
        if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:@"  skip startCommit(): no changes pending"];
        }
        @try {
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWithJavaUtilCollection:self->filesToCommit_];
        }
        @finally {
          JreStrongAssign(&self->filesToCommit_, nil);
        }
        return;
      }
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$$@", @"startCommit index=", [self segStringWithJavaLangIterable:[self toLiveInfosWithOrgApacheLuceneIndexSegmentInfos:toSync]], @" changeCount=", self->changeCount_)];
      }
      JreAssert(OrgApacheLuceneIndexIndexWriter_filesExistWithOrgApacheLuceneIndexSegmentInfos_(self, toSync), @"org/apache/lucene/index/IndexWriter.java:4423 condition failed: assert filesExist(toSync);");
    }
    OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"midStartCommit");
    jboolean pendingCommitSet = false;
    @try {
      OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"midStartCommit2");
      @synchronized(self) {
        JreAssert(JreLoadVolatileId(&self->pendingCommit_) == nil, @"org/apache/lucene/index/IndexWriter.java:4436 condition failed: assert pendingCommit == null;");
        JreAssert([((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) getGeneration] == [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(toSync)) getGeneration], @"org/apache/lucene/index/IndexWriter.java:4438 condition failed: assert segmentInfos.getGeneration() == toSync.getGeneration();");
        [toSync prepareCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
        if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
          [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$$C", @"startCommit: wrote pending segments file \"", OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS, @"", [toSync getGeneration]), '"')];
        }
        pendingCommitSet = true;
        JreVolatileStrongAssign(&self->pendingCommit_, toSync);
      }
      jboolean success = false;
      id<JavaUtilCollection> filesToSync;
      @try {
        filesToSync = [toSync filesWithBoolean:false];
        [((OrgApacheLuceneStoreDirectory *) nil_chk(self->directory_)) syncWithJavaUtilCollection:filesToSync];
        success = true;
      }
      @finally {
        if (!success) {
          pendingCommitSet = false;
          JreVolatileStrongAssign(&self->pendingCommit_, nil);
          [toSync rollbackCommitWithOrgApacheLuceneStoreDirectory:self->directory_];
        }
      }
      if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
        [self->infoStream_ messageWithNSString:@"IW" withNSString:JreStrcat("$@", @"done all syncs: ", filesToSync)];
      }
      OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"midStartCommitSuccess");
    }
    @finally {
      @synchronized(self) {
        [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) updateGenerationWithOrgApacheLuceneIndexSegmentInfos:toSync];
        if (!pendingCommitSet) {
          if ([self->infoStream_ isEnabledWithNSString:@"IW"]) {
            [self->infoStream_ messageWithNSString:@"IW" withNSString:@"hit exception committing segments file"];
          }
          [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) decRefWhileHandlingExceptionWithJavaUtilCollection:self->filesToCommit_];
          JreStrongAssign(&self->filesToCommit_, nil);
        }
      }
    }
  }
  @catch (JavaLangOutOfMemoryError *oom) {
    [self tragicEventWithJavaLangThrowable:oom withNSString:@"startCommit"];
  }
  OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(self, @"finishStartCommit");
}

jboolean OrgApacheLuceneIndexIndexWriter_isLockedWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  @try {
    [((OrgApacheLuceneStoreLock *) nil_chk([((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) obtainLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME])) close];
    return false;
  }
  @catch (OrgApacheLuceneStoreLockObtainFailedException *failed) {
    return true;
  }
}

void OrgApacheLuceneIndexIndexWriter_testPointWithNSString_(OrgApacheLuceneIndexIndexWriter *self, NSString *message) {
  if (self->enableTestPoints_) {
    JreAssert([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"TP"], @"org/apache/lucene/index/IndexWriter.java:4609 condition failed: assert infoStream.isEnabled(\"TP\");");
    [self->infoStream_ messageWithNSString:@"TP" withNSString:message];
  }
}

void OrgApacheLuceneIndexIndexWriter_deletePendingFiles(OrgApacheLuceneIndexIndexWriter *self) {
  @synchronized(self) {
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) deletePendingFiles];
  }
}

void OrgApacheLuceneIndexIndexWriter_createCompoundFileWithOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneStoreTrackingDirectoryWrapper_withOrgApacheLuceneIndexSegmentInfo_withOrgApacheLuceneStoreIOContext_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneUtilInfoStream *infoStream, OrgApacheLuceneStoreTrackingDirectoryWrapper *directory, OrgApacheLuceneIndexSegmentInfo *info, OrgApacheLuceneStoreIOContext *context) {
  if (![((id<JavaUtilSet>) nil_chk([((OrgApacheLuceneStoreTrackingDirectoryWrapper *) nil_chk(directory)) getCreatedFiles])) isEmpty]) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"pass a clean trackingdir for CFS creation");
  }
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream)) isEnabledWithNSString:@"IW"]) {
    [infoStream messageWithNSString:@"IW" withNSString:@"create compound file"];
  }
  jboolean success = false;
  @try {
    [((OrgApacheLuceneCodecsCompoundFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(info)) getCodec])) compoundFormat])) writeWithOrgApacheLuceneStoreDirectory:directory withOrgApacheLuceneIndexSegmentInfo:info withOrgApacheLuceneStoreIOContext:context];
    success = true;
  }
  @finally {
    if (!success) {
      OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(self, [directory getCreatedFiles]);
    }
  }
  [info setFilesWithJavaUtilCollection:create_JavaUtilHashSet_initWithJavaUtilCollection_([directory getCreatedFiles])];
}

void OrgApacheLuceneIndexIndexWriter_deleteNewFilesWithJavaUtilCollection_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilCollection> files) {
  @synchronized(self) {
    [((OrgApacheLuceneIndexIndexFileDeleter *) nil_chk(self->deleter_)) deleteNewFilesWithJavaUtilCollection:files];
  }
}

jint OrgApacheLuceneIndexIndexWriter_purgeWithBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean forced) {
  return [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(self->docWriter_)) purgeBufferWithOrgApacheLuceneIndexIndexWriter:self withBoolean:forced];
}

jboolean OrgApacheLuceneIndexIndexWriter_processEventsWithBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, jboolean triggerMerge, jboolean forcePurge) {
  return OrgApacheLuceneIndexIndexWriter_processEventsWithJavaUtilQueue_withBoolean_withBoolean_(self, self->eventQueue_, triggerMerge, forcePurge);
}

jboolean OrgApacheLuceneIndexIndexWriter_processEventsWithJavaUtilQueue_withBoolean_withBoolean_(OrgApacheLuceneIndexIndexWriter *self, id<JavaUtilQueue> queue, jboolean triggerMerge, jboolean forcePurge) {
  jboolean processed = false;
  if (JreLoadVolatileId(&self->tragedy_) == nil) {
    id<OrgApacheLuceneIndexIndexWriter_Event> event;
    while ((event = [((id<JavaUtilQueue>) nil_chk(queue)) poll]) != nil) {
      processed = true;
      [((id<OrgApacheLuceneIndexIndexWriter_Event>) nil_chk(event)) processWithOrgApacheLuceneIndexIndexWriter:self withBoolean:triggerMerge withBoolean:forcePurge];
    }
  }
  return processed;
}

jboolean OrgApacheLuceneIndexIndexWriter_slowFileExistsWithOrgApacheLuceneStoreDirectory_withNSString_(OrgApacheLuceneStoreDirectory *dir, NSString *fileName) {
  OrgApacheLuceneIndexIndexWriter_initialize();
  @try {
    [((OrgApacheLuceneStoreIndexInput *) nil_chk([((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) openInputWithNSString:fileName withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT)])) close];
    return true;
  }
  @catch (OrgLukhnosPortmobileFileNoSuchFileException *e) {
    return false;
  }
  @catch (JavaIoFileNotFoundException *e) {
    return false;
  }
}

void OrgApacheLuceneIndexIndexWriter_reserveDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs) {
  JreAssert(addedNumDocs >= 0, @"org/apache/lucene/index/IndexWriter.java:4808 condition failed: assert addedNumDocs >= 0;");
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) addAndGetWithLong:addedNumDocs] > OrgApacheLuceneIndexIndexWriter_actualMaxDocs) {
    [self->pendingNumDocs_ addAndGetWithLong:-addedNumDocs];
    OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(self, addedNumDocs);
  }
}

void OrgApacheLuceneIndexIndexWriter_testReserveDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs) {
  JreAssert(addedNumDocs >= 0, @"org/apache/lucene/index/IndexWriter.java:4820 condition failed: assert addedNumDocs >= 0;");
  if ([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) get] + addedNumDocs > OrgApacheLuceneIndexIndexWriter_actualMaxDocs) {
    OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(self, addedNumDocs);
  }
}

void OrgApacheLuceneIndexIndexWriter_tooManyDocsWithLong_(OrgApacheLuceneIndexIndexWriter *self, jlong addedNumDocs) {
  JreAssert(addedNumDocs >= 0, @"org/apache/lucene/index/IndexWriter.java:4827 condition failed: assert addedNumDocs >= 0;");
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$J$JC", @"number of documents in the index cannot exceed ", OrgApacheLuceneIndexIndexWriter_actualMaxDocs, @" (current document count is ", [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->pendingNumDocs_)) get], @"; added numDocs is ", addedNumDocs, ')'));
}

OrgApacheLuceneStoreDirectory *OrgApacheLuceneIndexIndexWriter_addMergeRateLimitersWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *self, OrgApacheLuceneStoreDirectory *inArg) {
  return create_OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(self, inArg);
}

IOSObjectArray *OrgApacheLuceneIndexIndexWriter__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter)

@implementation OrgApacheLuceneIndexIndexWriter_ReaderPool

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)outer$ {
  OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(self, outer$);
  return self;
}

- (jboolean)infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info {
  @synchronized(self) {
    jint idx = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(this$0_->segmentInfos_)) indexOfWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    JreAssert(idx != -1, JreStrcat("$@$", @"info=", info, @" isn't live"));
    JreAssert(JreObjectEqualsEquals([this$0_->segmentInfos_ infoWithInt:idx], info), JreStrcat("$@$", @"info=", info, @" doesn't match live info in segmentInfos"));
    return true;
  }
}

- (void)dropWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info {
  @synchronized(self) {
    OrgApacheLuceneIndexReadersAndUpdates *rld = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
    if (rld != nil) {
      JreAssert(JreObjectEqualsEquals(info, rld->info_), @"org/apache/lucene/index/IndexWriter.java:509 condition failed: assert info == rld.info;");
      [readerMap_ removeWithId:info];
      [rld dropReaders];
    }
  }
}

- (jboolean)anyPendingDeletes {
  @synchronized(self) {
    for (OrgApacheLuceneIndexReadersAndUpdates * __strong rld in nil_chk([((id<JavaUtilMap>) nil_chk(readerMap_)) values])) {
      if ([((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) getPendingDeleteCount] != 0) {
        return true;
      }
    }
    return false;
  }
}

- (void)release__WithOrgApacheLuceneIndexReadersAndUpdates:(OrgApacheLuceneIndexReadersAndUpdates *)rld {
  @synchronized(self) {
    [self release__WithOrgApacheLuceneIndexReadersAndUpdates:rld withBoolean:true];
  }
}

- (void)release__WithOrgApacheLuceneIndexReadersAndUpdates:(OrgApacheLuceneIndexReadersAndUpdates *)rld
                                               withBoolean:(jboolean)assertInfoLive {
  @synchronized(self) {
    [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) decRef];
    JreAssert([rld refCount] >= 1, @"org/apache/lucene/index/IndexWriter.java:536 condition failed: assert rld.refCount() >= 1;");
    if (!JreLoadVolatileBoolean(&this$0_->poolReaders_) && [rld refCount] == 1) {
      if ([rld writeLiveDocsWithOrgApacheLuceneStoreDirectory:this$0_->directory_]) {
        JreAssert(assertInfoLive == false || [self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_], @"org/apache/lucene/index/IndexWriter.java:544 condition failed: assert assertInfoLive == false || infoIsLive(rld.info);");
        [this$0_ checkpointNoSIS];
      }
      [rld dropReaders];
      [((id<JavaUtilMap>) nil_chk(readerMap_)) removeWithId:rld->info_];
    }
  }
}

- (void)close {
  [self dropAllWithBoolean:false];
}

- (void)dropAllWithBoolean:(jboolean)doSave {
  @synchronized(self) {
    JavaLangThrowable *priorE = nil;
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(readerMap_)) entrySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((id<JavaUtilMap_Entry>) nil_chk([it next])) getValue];
      @try {
        if (doSave && [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) writeLiveDocsWithOrgApacheLuceneStoreDirectory:this$0_->directory_]) {
          JreAssert([self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld))->info_], @"org/apache/lucene/index/IndexWriter.java:578 condition failed: assert infoIsLive(rld.info);");
          [this$0_ checkpointNoSIS];
        }
      }
      @catch (JavaLangThrowable *t) {
        if (doSave) {
          OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
        }
        else if (priorE == nil) {
          priorE = t;
        }
      }
      [it remove];
      @try {
        [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) dropReaders];
      }
      @catch (JavaLangThrowable *t) {
        if (doSave) {
          OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
        }
        else if (priorE == nil) {
          priorE = t;
        }
      }
    }
    JreAssert([readerMap_ size] == 0, @"org/apache/lucene/index/IndexWriter.java:616 condition failed: assert readerMap.size() == 0;");
    OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(priorE);
  }
}

- (void)commitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos {
  @synchronized(self) {
    for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk(infos)) {
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info];
      if (rld != nil) {
        JreAssert(JreObjectEqualsEquals(rld->info_, info), @"org/apache/lucene/index/IndexWriter.java:630 condition failed: assert rld.info == info;");
        if ([rld writeLiveDocsWithOrgApacheLuceneStoreDirectory:this$0_->directory_]) {
          JreAssert([self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:info], @"org/apache/lucene/index/IndexWriter.java:633 condition failed: assert infoIsLive(info);");
          [this$0_ checkpointNoSIS];
        }
      }
    }
  }
}

- (OrgApacheLuceneIndexReadersAndUpdates *)getWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                                            withBoolean:(jboolean)create {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(this$0_, false);
    JreAssert(JreObjectEqualsEquals(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->dir_, this$0_->directoryOrig_), JreStrcat("$@$@", @"info.dir=", info->info_->dir_, @" vs ", this$0_->directoryOrig_));
    OrgApacheLuceneIndexReadersAndUpdates *rld = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(readerMap_)) getWithId:info]);
    if (rld == nil) {
      if (!create) {
        return JreRetainedLocalValue(nil);
      }
      rld = create_OrgApacheLuceneIndexReadersAndUpdates_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentCommitInfo_(this$0_, info);
      [readerMap_ putWithId:info withId:rld];
    }
    else {
      JreAssert(JreObjectEqualsEquals(rld->info_, info), JreStrcat("$@$@$Z$Z", @"rld.info=", rld->info_, @" info=", info, @" isLive?=", [self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:rld->info_], @" vs ", [self infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:info]));
    }
    if (create) {
      [rld incRef];
    }
    JreAssert(OrgApacheLuceneIndexIndexWriter_ReaderPool_noDups(self), @"org/apache/lucene/index/IndexWriter.java:677 condition failed: assert noDups();");
    return JreRetainedLocalValue(rld);
  }
}

- (jboolean)noDups {
  return OrgApacheLuceneIndexIndexWriter_ReaderPool_noDups(self);
}

- (void)__javaClone:(OrgApacheLuceneIndexIndexWriter_ReaderPool *)original {
  [super __javaClone:original];
  [this$0_ release];
}

- (void)dealloc {
  RELEASE_(readerMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 2, 4, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 7, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x20, 8, 9, 4, -1, -1, -1 },
    { NULL, "V", 0x21, 10, 11, 4, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexReadersAndUpdates;", 0x21, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexWriter:);
  methods[1].selector = @selector(infoIsLiveWithOrgApacheLuceneIndexSegmentCommitInfo:);
  methods[2].selector = @selector(dropWithOrgApacheLuceneIndexSegmentCommitInfo:);
  methods[3].selector = @selector(anyPendingDeletes);
  methods[4].selector = @selector(release__WithOrgApacheLuceneIndexReadersAndUpdates:);
  methods[5].selector = @selector(release__WithOrgApacheLuceneIndexReadersAndUpdates:withBoolean:);
  methods[6].selector = @selector(close);
  methods[7].selector = @selector(dropAllWithBoolean:);
  methods[8].selector = @selector(commitWithOrgApacheLuceneIndexSegmentInfos:);
  methods[9].selector = @selector(getWithOrgApacheLuceneIndexSegmentCommitInfo:withBoolean:);
  methods[10].selector = @selector(noDups);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "readerMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 14, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexWriter;", "infoIsLive", "LOrgApacheLuceneIndexSegmentCommitInfo;", "drop", "LJavaIoIOException;", "release", "LOrgApacheLuceneIndexReadersAndUpdates;", "LOrgApacheLuceneIndexReadersAndUpdates;Z", "dropAll", "Z", "commit", "LOrgApacheLuceneIndexSegmentInfos;", "get", "LOrgApacheLuceneIndexSegmentCommitInfo;Z", "Ljava/util/Map<Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/ReadersAndUpdates;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_ReaderPool = { "ReaderPool", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 11, 2, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter_ReaderPool;
}

@end

void OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter_ReaderPool *self, OrgApacheLuceneIndexIndexWriter *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->readerMap_, new_JavaUtilHashMap_init());
}

OrgApacheLuceneIndexIndexWriter_ReaderPool *new_OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter *outer$) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter_ReaderPool, initWithOrgApacheLuceneIndexIndexWriter_, outer$)
}

OrgApacheLuceneIndexIndexWriter_ReaderPool *create_OrgApacheLuceneIndexIndexWriter_ReaderPool_initWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexIndexWriter *outer$) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter_ReaderPool, initWithOrgApacheLuceneIndexIndexWriter_, outer$)
}

jboolean OrgApacheLuceneIndexIndexWriter_ReaderPool_noDups(OrgApacheLuceneIndexIndexWriter_ReaderPool *self) {
  id<JavaUtilSet> seen = create_JavaUtilHashSet_init();
  for (OrgApacheLuceneIndexSegmentCommitInfo * __strong info in nil_chk([((id<JavaUtilMap>) nil_chk(self->readerMap_)) keySet])) {
    JreAssert(![seen containsWithId:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_], @"org/apache/lucene/index/IndexWriter.java:687 condition failed: assert !seen.contains(info.info.name);");
    [seen addWithId:info->info_->name_];
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_ReaderPool)

@implementation OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool:(OrgApacheLuceneIndexIndexWriter_ReaderPool *)readerPool
                withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge
                          withOrgApacheLuceneIndexMergeState:(OrgApacheLuceneIndexMergeState *)mergeState
                                                 withBoolean:(jboolean)initWritableLiveDocs {
  OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(self, readerPool, merge, mergeState, initWritableLiveDocs);
}

- (void)dealloc {
  RELEASE_(mergedDeletesAndUpdates_);
  RELEASE_(docMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool:withOrgApacheLuceneIndexMergePolicy_OneMerge:withOrgApacheLuceneIndexMergeState:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mergedDeletesAndUpdates_", "LOrgApacheLuceneIndexReadersAndUpdates;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docMap_", "LOrgApacheLuceneIndexMergePolicy_DocMap;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "initializedWritableLiveDocs_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "init", "LOrgApacheLuceneIndexIndexWriter_ReaderPool;LOrgApacheLuceneIndexMergePolicy_OneMerge;LOrgApacheLuceneIndexMergeState;Z", "LJavaIoIOException;", "LOrgApacheLuceneIndexIndexWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates = { "MergedDeletesAndUpdates", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0xa, 2, 3, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates;
}

@end

void OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mergedDeletesAndUpdates_, nil);
  JreStrongAssign(&self->docMap_, nil);
  self->initializedWritableLiveDocs_ = false;
}

OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *new_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates, init)
}

OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *create_OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates, init)
}

void OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates_init__WithOrgApacheLuceneIndexIndexWriter_ReaderPool_withOrgApacheLuceneIndexMergePolicy_OneMerge_withOrgApacheLuceneIndexMergeState_withBoolean_(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates *self, OrgApacheLuceneIndexIndexWriter_ReaderPool *readerPool, OrgApacheLuceneIndexMergePolicy_OneMerge *merge, OrgApacheLuceneIndexMergeState *mergeState, jboolean initWritableLiveDocs) {
  if (self->mergedDeletesAndUpdates_ == nil) {
    JreStrongAssign(&self->mergedDeletesAndUpdates_, [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(readerPool)) getWithOrgApacheLuceneIndexSegmentCommitInfo:((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->info_ withBoolean:true]);
    JreStrongAssign(&self->docMap_, [merge getDocMapWithOrgApacheLuceneIndexMergeState:mergeState]);
    JreAssert([((OrgApacheLuceneIndexMergePolicy_DocMap *) nil_chk(self->docMap_)) isConsistentWithInt:[((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(merge->info_))->info_)) maxDoc]], @"org/apache/lucene/index/IndexWriter.java:3242 condition failed: assert docMap.isConsistent(merge.info.info.maxDoc());");
  }
  if (initWritableLiveDocs && !self->initializedWritableLiveDocs_) {
    [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(self->mergedDeletesAndUpdates_)) initWritableLiveDocs];
    self->initializedWritableLiveDocs_ = true;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_MergedDeletesAndUpdates)

@implementation OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)warmWithOrgApacheLuceneIndexLeafReader:(OrgApacheLuceneIndexLeafReader *)reader {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(warmWithOrgApacheLuceneIndexLeafReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "warm", "LOrgApacheLuceneIndexLeafReader;", "LJavaIoIOException;", "LOrgApacheLuceneIndexIndexWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer = { "IndexReaderWarmer", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x409, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer;
}

@end

void OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer_init(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_IndexReaderWarmer)

@implementation OrgApacheLuceneIndexIndexWriter_Event

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(processWithOrgApacheLuceneIndexIndexWriter:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "process", "LOrgApacheLuceneIndexIndexWriter;ZZ", "LJavaIoIOException;", "LOrgApacheLuceneIndexIndexWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_Event = { "Event", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x608, 1, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter_Event;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_Event)

@implementation OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory

- (instancetype)initWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)outer$
                      withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)inArg {
  OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(self, outer$, inArg);
  return self;
}

- (OrgApacheLuceneStoreIndexOutput *)createOutputWithNSString:(NSString *)name
                            withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context {
  [self ensureOpen];
  OrgApacheLuceneIndexIndexWriter_ensureOpenWithBoolean_(this$0_, false);
  JreAssert(((OrgApacheLuceneStoreIOContext *) nil_chk(context))->context_ == JreLoadEnum(OrgApacheLuceneStoreIOContext_Context, MERGE), JreStrcat("$@", @"got context=", context->context_));
  OrgApacheLuceneIndexMergeRateLimiter *rateLimiter = JreRetainedLocalValue([((OrgApacheLuceneUtilCloseableThreadLocal *) nil_chk(this$0_->rateLimiters_)) get]);
  JreAssert(rateLimiter != nil, @"org/apache/lucene/index/IndexWriter.java:4853 condition failed: assert rateLimiter != null;");
  return create_OrgApacheLuceneStoreRateLimitedIndexOutput_initWithOrgApacheLuceneStoreRateLimiter_withOrgApacheLuceneStoreIndexOutput_(rateLimiter, [((OrgApacheLuceneStoreDirectory *) nil_chk(in_)) createOutputWithNSString:name withOrgApacheLuceneStoreIOContext:context]);
}

- (void)__javaClone:(OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreIndexOutput;", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(createOutputWithNSString:withOrgApacheLuceneStoreIOContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneStoreDirectory;", "createOutput", "LNSString;LOrgApacheLuceneStoreIOContext;", "LJavaIoIOException;", "LOrgApacheLuceneIndexIndexWriter;", "addMergeRateLimitersWithOrgApacheLuceneStoreDirectory:" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory = { "InnerFilterDirectory", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x0, 2, 1, 4, -1, 5, -1, -1 };
  return &_OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory;
}

@end

void OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory *self, OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *inArg) {
  self->this$0_ = outer$;
  OrgApacheLuceneStoreFilterDirectory_initWithOrgApacheLuceneStoreDirectory_(self, inArg);
}

OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory *new_OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *inArg) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory, initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_, outer$, inArg)
}

OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory *create_OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory_initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *outer$, OrgApacheLuceneStoreDirectory *inArg) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory, initWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneStoreDirectory_, outer$, inArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexWriter_1InnerFilterDirectory)
