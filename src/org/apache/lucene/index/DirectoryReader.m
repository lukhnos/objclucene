//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DirectoryReader.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexFileNames.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/StandardDirectoryReader.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/lukhnos/portmobile/file/NoSuchFileException.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/DirectoryReader must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneIndexDirectoryReader

+ (OrgApacheLuceneIndexDirectoryReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneStoreDirectory_(directory);
}

+ (OrgApacheLuceneIndexDirectoryReader *)openWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                     withBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneIndexIndexWriter_withBoolean_(writer, applyAllDeletes);
}

+ (OrgApacheLuceneIndexDirectoryReader *)openWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneIndexIndexCommit_(commit);
}

+ (OrgApacheLuceneIndexDirectoryReader *)openIfChangedWithOrgApacheLuceneIndexDirectoryReader:(OrgApacheLuceneIndexDirectoryReader *)oldReader {
  return OrgApacheLuceneIndexDirectoryReader_openIfChangedWithOrgApacheLuceneIndexDirectoryReader_(oldReader);
}

+ (OrgApacheLuceneIndexDirectoryReader *)openIfChangedWithOrgApacheLuceneIndexDirectoryReader:(OrgApacheLuceneIndexDirectoryReader *)oldReader
                                                          withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexDirectoryReader_openIfChangedWithOrgApacheLuceneIndexDirectoryReader_withOrgApacheLuceneIndexIndexCommit_(oldReader, commit);
}

+ (OrgApacheLuceneIndexDirectoryReader *)openIfChangedWithOrgApacheLuceneIndexDirectoryReader:(OrgApacheLuceneIndexDirectoryReader *)oldReader
                                                          withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                                  withBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexDirectoryReader_openIfChangedWithOrgApacheLuceneIndexDirectoryReader_withOrgApacheLuceneIndexIndexWriter_withBoolean_(oldReader, writer, applyAllDeletes);
}

+ (id<JavaUtilList>)listCommitsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  return OrgApacheLuceneIndexDirectoryReader_listCommitsWithOrgApacheLuceneStoreDirectory_(dir);
}

+ (jboolean)indexExistsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  return OrgApacheLuceneIndexDirectoryReader_indexExistsWithOrgApacheLuceneStoreDirectory_(directory);
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
              withOrgApacheLuceneIndexLeafReaderArray:(IOSObjectArray *)segmentReaders {
  OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_(self, directory, segmentReaders);
  return self;
}

- (OrgApacheLuceneStoreDirectory *)directory {
  return directory_;
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenIfChanged {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                                withBoolean:(jboolean)applyAllDeletes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getVersion {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isCurrent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgApacheLuceneIndexIndexCommit *)getIndexCommit {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(directory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x9, 5, 6, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x9, 5, 7, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x9, 5, 8, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 9, 1, 2, 10, -1, -1 },
    { NULL, "Z", 0x9, 11, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 12, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x404, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x404, 13, 4, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x404, 13, 3, 2, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexCommit;", 0x401, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(openWithOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(openWithOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[2].selector = @selector(openWithOrgApacheLuceneIndexIndexCommit:);
  methods[3].selector = @selector(openIfChangedWithOrgApacheLuceneIndexDirectoryReader:);
  methods[4].selector = @selector(openIfChangedWithOrgApacheLuceneIndexDirectoryReader:withOrgApacheLuceneIndexIndexCommit:);
  methods[5].selector = @selector(openIfChangedWithOrgApacheLuceneIndexDirectoryReader:withOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[6].selector = @selector(listCommitsWithOrgApacheLuceneStoreDirectory:);
  methods[7].selector = @selector(indexExistsWithOrgApacheLuceneStoreDirectory:);
  methods[8].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexLeafReaderArray:);
  methods[9].selector = @selector(directory);
  methods[10].selector = @selector(doOpenIfChanged);
  methods[11].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:);
  methods[12].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[13].selector = @selector(getVersion);
  methods[14].selector = @selector(isCurrent);
  methods[15].selector = @selector(getIndexCommit);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "open", "LOrgApacheLuceneStoreDirectory;", "LJavaIoIOException;", "LOrgApacheLuceneIndexIndexWriter;Z", "LOrgApacheLuceneIndexIndexCommit;", "openIfChanged", "LOrgApacheLuceneIndexDirectoryReader;", "LOrgApacheLuceneIndexDirectoryReader;LOrgApacheLuceneIndexIndexCommit;", "LOrgApacheLuceneIndexDirectoryReader;LOrgApacheLuceneIndexIndexWriter;Z", "listCommits", "(Lorg/apache/lucene/store/Directory;)Ljava/util/List<Lorg/apache/lucene/index/IndexCommit;>;", "indexExists", "LOrgApacheLuceneStoreDirectory;[LOrgApacheLuceneIndexLeafReader;", "doOpenIfChanged", "Lorg/apache/lucene/index/BaseCompositeReader<Lorg/apache/lucene/index/LeafReader;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDirectoryReader = { "DirectoryReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x401, 16, 1, -1, -1, -1, 14, -1 };
  return &_OrgApacheLuceneIndexDirectoryReader;
}

@end

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  return OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexCommit_(directory, nil);
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneIndexIndexWriter_withBoolean_(OrgApacheLuceneIndexIndexWriter *writer, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  return [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getReaderWithBoolean:applyAllDeletes];
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexDirectoryReader_openWithOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexIndexCommit *commit) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  return OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexCommit_([((OrgApacheLuceneIndexIndexCommit *) nil_chk(commit)) getDirectory], commit);
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexDirectoryReader_openIfChangedWithOrgApacheLuceneIndexDirectoryReader_(OrgApacheLuceneIndexDirectoryReader *oldReader) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  OrgApacheLuceneIndexDirectoryReader *newReader = [((OrgApacheLuceneIndexDirectoryReader *) nil_chk(oldReader)) doOpenIfChanged];
  JreAssert(!JreObjectEqualsEquals(newReader, oldReader), @"org/apache/lucene/index/DirectoryReader.java:124 condition failed: assert newReader != oldReader;");
  return newReader;
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexDirectoryReader_openIfChangedWithOrgApacheLuceneIndexDirectoryReader_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexDirectoryReader *oldReader, OrgApacheLuceneIndexIndexCommit *commit) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  OrgApacheLuceneIndexDirectoryReader *newReader = [((OrgApacheLuceneIndexDirectoryReader *) nil_chk(oldReader)) doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:commit];
  JreAssert(!JreObjectEqualsEquals(newReader, oldReader), @"org/apache/lucene/index/DirectoryReader.java:137 condition failed: assert newReader != oldReader;");
  return newReader;
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexDirectoryReader_openIfChangedWithOrgApacheLuceneIndexDirectoryReader_withOrgApacheLuceneIndexIndexWriter_withBoolean_(OrgApacheLuceneIndexDirectoryReader *oldReader, OrgApacheLuceneIndexIndexWriter *writer, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  OrgApacheLuceneIndexDirectoryReader *newReader = [((OrgApacheLuceneIndexDirectoryReader *) nil_chk(oldReader)) doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:writer withBoolean:applyAllDeletes];
  JreAssert(!JreObjectEqualsEquals(newReader, oldReader), @"org/apache/lucene/index/DirectoryReader.java:204 condition failed: assert newReader != oldReader;");
  return newReader;
}

id<JavaUtilList> OrgApacheLuceneIndexDirectoryReader_listCommitsWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  IOSObjectArray *files = [((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) listAll];
  id<JavaUtilList> commits = create_JavaUtilArrayList_init();
  OrgApacheLuceneIndexSegmentInfos *latest = OrgApacheLuceneIndexSegmentInfos_readLatestCommitWithOrgApacheLuceneStoreDirectory_(dir);
  jlong currentGen = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(latest)) getGeneration];
  [commits addWithId:create_OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(nil, latest, dir)];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(files))->size_; i++) {
    NSString *fileName = IOSObjectArray_Get(files, i);
    if ([((NSString *) nil_chk(fileName)) java_hasPrefix:OrgApacheLuceneIndexIndexFileNames_SEGMENTS] && ![fileName isEqual:OrgApacheLuceneIndexIndexFileNames_OLD_SEGMENTS_GEN] && OrgApacheLuceneIndexSegmentInfos_generationFromSegmentsFileNameWithNSString_(fileName) < currentGen) {
      OrgApacheLuceneIndexSegmentInfos *sis = nil;
      @try {
        sis = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(dir, fileName);
      }
      @catch (JavaIoFileNotFoundException *fnfe) {
      }
      @catch (OrgLukhnosPortmobileFileNoSuchFileException *fnfe) {
      }
      if (sis != nil) {
        [commits addWithId:create_OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(nil, sis, dir)];
      }
    }
  }
  JavaUtilCollections_sortWithJavaUtilList_(commits);
  return commits;
}

jboolean OrgApacheLuceneIndexDirectoryReader_indexExistsWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexDirectoryReader_initialize();
  IOSObjectArray *files = [((OrgApacheLuceneStoreDirectory *) nil_chk(directory)) listAll];
  NSString *prefix = JreStrcat("$C", OrgApacheLuceneIndexIndexFileNames_SEGMENTS, '_');
  {
    IOSObjectArray *a__ = files;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *file = *b__++;
      if ([((NSString *) nil_chk(file)) java_hasPrefix:prefix]) {
        return true;
      }
    }
  }
  return false;
}

void OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_(OrgApacheLuceneIndexDirectoryReader *self, OrgApacheLuceneStoreDirectory *directory, IOSObjectArray *segmentReaders) {
  OrgApacheLuceneIndexBaseCompositeReader_initWithOrgApacheLuceneIndexIndexReaderArray_(self, segmentReaders);
  JreStrongAssign(&self->directory_, directory);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDirectoryReader)
