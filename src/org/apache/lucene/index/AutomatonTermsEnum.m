//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/AutomatonTermsEnum.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/apache/lucene/index/AutomatonTermsEnum.h"
#include "org/apache/lucene/index/FilteredTermsEnum.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/IntsRefBuilder.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/automaton/Transition.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/AutomatonTermsEnum must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexAutomatonTermsEnum () {
 @public
  OrgApacheLuceneUtilAutomatonByteRunAutomaton *runAutomaton_;
  OrgApacheLuceneUtilBytesRef *commonSuffixRef_;
  jboolean finite_;
  OrgApacheLuceneUtilAutomatonAutomaton *automaton_;
  IOSLongArray *visited_;
  jlong curGen_;
  OrgApacheLuceneUtilBytesRefBuilder *seekBytesRef_;
  jboolean linear_;
  OrgApacheLuceneUtilBytesRef *linearUpperBound_;
  OrgApacheLuceneUtilAutomatonTransition *transition_;
  OrgApacheLuceneUtilIntsRefBuilder *savedStates_;
}

/*!
 @brief Sets the enum to operate in linear fashion, as we have found
  a looping transition at position: we set an upper bound and 
  act like a TermRangeQuery for this portion of the term space.
 */
- (void)setLinearWithInt:(jint)position;

/*!
 @brief Increments the byte buffer to the next String in binary order after s that will not put
  the machine into a reject state.If such a string does not exist, returns
  false.
 The correctness of this method depends upon the automaton being deterministic,
  and having no transitions to dead states.
 @return true if more possible solutions exist for the DFA
 */
- (jboolean)nextString;

/*!
 @brief Returns the next String in lexicographic order that will not put
  the machine into a reject state.
 This method traverses the DFA from the given position in the String,
  starting at the given state. 
  If this cannot satisfy the machine, returns false. This method will
  walk the minimal path, in lexicographic order, as long as possible. 
  If this method returns false, then there might still be more solutions,
  it is necessary to backtrack to find out.
 @param state current non-reject state
 @param position useful portion of the string
 @return true if more possible solutions exist for the DFA from this
          position
 */
- (jboolean)nextStringWithInt:(jint)state
                      withInt:(jint)position;

/*!
 @brief Attempts to backtrack thru the string after encountering a dead end
  at some given position.Returns false if no more possible strings 
  can match.
 @param position current position in the input String
 @return <code>position >= 0</code> if more possible solutions exist for the DFA
 */
- (jint)backtrackWithInt:(jint)position;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, runAutomaton_, OrgApacheLuceneUtilAutomatonByteRunAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, commonSuffixRef_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, automaton_, OrgApacheLuceneUtilAutomatonAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, visited_, IOSLongArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, seekBytesRef_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, linearUpperBound_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, transition_, OrgApacheLuceneUtilAutomatonTransition *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexAutomatonTermsEnum, savedStates_, OrgApacheLuceneUtilIntsRefBuilder *)

__attribute__((unused)) static void OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint position);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexAutomatonTermsEnum_nextString(OrgApacheLuceneIndexAutomatonTermsEnum *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexAutomatonTermsEnum_nextStringWithInt_withInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint state, jint position);

__attribute__((unused)) static jint OrgApacheLuceneIndexAutomatonTermsEnum_backtrackWithInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint position);

@implementation OrgApacheLuceneIndexAutomatonTermsEnum

- (instancetype)initWithOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)tenum
    withOrgApacheLuceneUtilAutomatonCompiledAutomaton:(OrgApacheLuceneUtilAutomatonCompiledAutomaton *)compiled {
  OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(self, tenum, compiled);
  return self;
}

- (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)acceptWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  if (commonSuffixRef_ == nil || OrgApacheLuceneUtilStringHelper_endsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(term, commonSuffixRef_)) {
    if ([((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(runAutomaton_)) runWithByteArray:((OrgApacheLuceneUtilBytesRef *) nil_chk(term))->bytes_ withInt:term->offset_ withInt:term->length_]) return linear_ ? JreLoadEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, YES) : JreLoadEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, YES_AND_SEEK);
    else return (linear_ && [term compareToWithId:linearUpperBound_] < 0) ? JreLoadEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, NO) : JreLoadEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, NO_AND_SEEK);
  }
  else {
    return (linear_ && [((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) compareToWithId:linearUpperBound_] < 0) ? JreLoadEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, NO) : JreLoadEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, NO_AND_SEEK);
  }
}

- (OrgApacheLuceneUtilBytesRef *)nextSeekTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  if (term == nil) {
    JreAssert([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(seekBytesRef_)) length] == 0, @"org/apache/lucene/index/AutomatonTermsEnum.java:111 condition failed: assert seekBytesRef.length() == 0;");
    if ([((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(runAutomaton_)) isAcceptWithInt:[runAutomaton_ getInitialState]]) {
      return [seekBytesRef_ get];
    }
  }
  else {
    [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(seekBytesRef_)) copyBytesWithOrgApacheLuceneUtilBytesRef:term];
  }
  if (OrgApacheLuceneIndexAutomatonTermsEnum_nextString(self)) {
    return [seekBytesRef_ get];
  }
  else {
    return nil;
  }
}

- (void)setLinearWithInt:(jint)position {
  OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(self, position);
}

- (jboolean)nextString {
  return OrgApacheLuceneIndexAutomatonTermsEnum_nextString(self);
}

- (jboolean)nextStringWithInt:(jint)state
                      withInt:(jint)position {
  return OrgApacheLuceneIndexAutomatonTermsEnum_nextStringWithInt_withInt_(self, state, position);
}

- (jint)backtrackWithInt:(jint)position {
  return OrgApacheLuceneIndexAutomatonTermsEnum_backtrackWithInt_(self, position);
}

- (void)dealloc {
  RELEASE_(runAutomaton_);
  RELEASE_(commonSuffixRef_);
  RELEASE_(automaton_);
  RELEASE_(visited_);
  RELEASE_(seekBytesRef_);
  RELEASE_(linearUpperBound_);
  RELEASE_(transition_);
  RELEASE_(savedStates_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x4, 3, 2, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexTermsEnum:withOrgApacheLuceneUtilAutomatonCompiledAutomaton:);
  methods[1].selector = @selector(acceptWithOrgApacheLuceneUtilBytesRef:);
  methods[2].selector = @selector(nextSeekTermWithOrgApacheLuceneUtilBytesRef:);
  methods[3].selector = @selector(setLinearWithInt:);
  methods[4].selector = @selector(nextString);
  methods[5].selector = @selector(nextStringWithInt:withInt:);
  methods[6].selector = @selector(backtrackWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "runAutomaton_", "LOrgApacheLuceneUtilAutomatonByteRunAutomaton;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "commonSuffixRef_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "finite_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "automaton_", "LOrgApacheLuceneUtilAutomatonAutomaton;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "visited_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "curGen_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "seekBytesRef_", "LOrgApacheLuceneUtilBytesRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "linear_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "linearUpperBound_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "transition_", "LOrgApacheLuceneUtilAutomatonTransition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "savedStates_", "LOrgApacheLuceneUtilIntsRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexTermsEnum;LOrgApacheLuceneUtilAutomatonCompiledAutomaton;", "accept", "LOrgApacheLuceneUtilBytesRef;", "nextSeekTerm", "LJavaIoIOException;", "setLinear", "I", "nextString", "II", "backtrack" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexAutomatonTermsEnum = { "AutomatonTermsEnum", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 7, 11, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexAutomatonTermsEnum;
}

@end

void OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneIndexAutomatonTermsEnum *self, OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled) {
  OrgApacheLuceneIndexFilteredTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_(self, tenum);
  JreStrongAssignAndConsume(&self->seekBytesRef_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  self->linear_ = false;
  JreStrongAssignAndConsume(&self->linearUpperBound_, new_OrgApacheLuceneUtilBytesRef_initWithInt_(10));
  JreStrongAssignAndConsume(&self->transition_, new_OrgApacheLuceneUtilAutomatonTransition_init());
  JreStrongAssignAndConsume(&self->savedStates_, new_OrgApacheLuceneUtilIntsRefBuilder_init());
  self->finite_ = [((JavaLangBoolean *) nil_chk(((OrgApacheLuceneUtilAutomatonCompiledAutomaton *) nil_chk(compiled))->finite_)) booleanValue];
  JreStrongAssign(&self->runAutomaton_, compiled->runAutomaton_);
  JreAssert(self->runAutomaton_ != nil, @"org/apache/lucene/index/AutomatonTermsEnum.java:81 condition failed: assert this.runAutomaton != null;");
  JreStrongAssign(&self->commonSuffixRef_, compiled->commonSuffixRef_);
  JreStrongAssign(&self->automaton_, compiled->automaton_);
  JreStrongAssignAndConsume(&self->visited_, [IOSLongArray newArrayWithLength:[((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(self->runAutomaton_)) getSize]]);
}

OrgApacheLuceneIndexAutomatonTermsEnum *new_OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexAutomatonTermsEnum, initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_, tenum, compiled)
}

OrgApacheLuceneIndexAutomatonTermsEnum *create_OrgApacheLuceneIndexAutomatonTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_(OrgApacheLuceneIndexTermsEnum *tenum, OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexAutomatonTermsEnum, initWithOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilAutomatonCompiledAutomaton_, tenum, compiled)
}

void OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint position) {
  JreAssert(self->linear_ == false, @"org/apache/lucene/index/AutomatonTermsEnum.java:136 condition failed: assert linear == false;");
  jint state = [((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(self->runAutomaton_)) getInitialState];
  JreAssert(state == 0, @"org/apache/lucene/index/AutomatonTermsEnum.java:139 condition failed: assert state == 0;");
  jint maxInterval = (jint) 0xff;
  for (jint i = 0; i < position; i++) {
    state = [self->runAutomaton_ stepWithInt:state withInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) byteAtWithInt:i] & (jint) 0xff];
    JreAssert(state >= 0, JreStrcat("$I", @"state=", state));
  }
  jint numTransitions = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(self->automaton_)) getNumTransitionsWithInt:state];
  [self->automaton_ initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:self->transition_];
  for (jint i = 0; i < numTransitions; i++) {
    [self->automaton_ getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:self->transition_];
    if (((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->min_ <= ([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) byteAtWithInt:position] & (jint) 0xff) && ([self->seekBytesRef_ byteAtWithInt:position] & (jint) 0xff) <= ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->max_) {
      maxInterval = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->max_;
      break;
    }
  }
  if (maxInterval != (jint) 0xff) maxInterval++;
  jint length = position + 1;
  if (((IOSByteArray *) nil_chk(((OrgApacheLuceneUtilBytesRef *) nil_chk(self->linearUpperBound_))->bytes_))->size_ < length) JreStrongAssignAndConsume(&self->linearUpperBound_->bytes_, [IOSByteArray newArrayWithLength:length]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) bytes], 0, self->linearUpperBound_->bytes_, 0, position);
  *IOSByteArray_GetRef(nil_chk(self->linearUpperBound_->bytes_), position) = (jbyte) maxInterval;
  self->linearUpperBound_->length_ = length;
  self->linear_ = true;
}

jboolean OrgApacheLuceneIndexAutomatonTermsEnum_nextString(OrgApacheLuceneIndexAutomatonTermsEnum *self) {
  jint state;
  jint pos = 0;
  [((OrgApacheLuceneUtilIntsRefBuilder *) nil_chk(self->savedStates_)) growWithInt:[((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) length] + 1];
  [self->savedStates_ setIntAtWithInt:0 withInt:[((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(self->runAutomaton_)) getInitialState]];
  while (true) {
    self->curGen_++;
    self->linear_ = false;
    for (state = [self->savedStates_ intAtWithInt:pos]; pos < [self->seekBytesRef_ length]; pos++) {
      *IOSLongArray_GetRef(nil_chk(self->visited_), state) = self->curGen_;
      jint nextState = [self->runAutomaton_ stepWithInt:state withInt:[self->seekBytesRef_ byteAtWithInt:pos] & (jint) 0xff];
      if (nextState == -1) break;
      [self->savedStates_ setIntAtWithInt:pos + 1 withInt:nextState];
      if (!self->finite_ && !self->linear_ && IOSLongArray_Get(self->visited_, nextState) == self->curGen_) {
        OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(self, pos);
      }
      state = nextState;
    }
    if (OrgApacheLuceneIndexAutomatonTermsEnum_nextStringWithInt_withInt_(self, state, pos)) {
      return true;
    }
    else {
      if ((pos = OrgApacheLuceneIndexAutomatonTermsEnum_backtrackWithInt_(self, pos)) < 0) return false;
      jint newState = [self->runAutomaton_ stepWithInt:[self->savedStates_ intAtWithInt:pos] withInt:[self->seekBytesRef_ byteAtWithInt:pos] & (jint) 0xff];
      if (newState >= 0 && [self->runAutomaton_ isAcceptWithInt:newState]) return true;
      if (!self->finite_) pos = 0;
    }
  }
}

jboolean OrgApacheLuceneIndexAutomatonTermsEnum_nextStringWithInt_withInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint state, jint position) {
  jint c = 0;
  if (position < [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) length]) {
    c = [self->seekBytesRef_ byteAtWithInt:position] & (jint) 0xff;
    if (c++ == (jint) 0xff) return false;
  }
  [self->seekBytesRef_ setLengthWithInt:position];
  *IOSLongArray_GetRef(nil_chk(self->visited_), state) = self->curGen_;
  jint numTransitions = [((OrgApacheLuceneUtilAutomatonAutomaton *) nil_chk(self->automaton_)) getNumTransitionsWithInt:state];
  [self->automaton_ initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:self->transition_];
  for (jint i = 0; i < numTransitions; i++) {
    [self->automaton_ getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:self->transition_];
    if (((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->max_ >= c) {
      jint nextChar = JavaLangMath_maxWithInt_withInt_(c, self->transition_->min_);
      [self->seekBytesRef_ growWithInt:[self->seekBytesRef_ length] + 1];
      [self->seekBytesRef_ appendWithByte:(jbyte) nextChar];
      state = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->dest_;
      while (IOSLongArray_Get(self->visited_, state) != self->curGen_ && ![((OrgApacheLuceneUtilAutomatonByteRunAutomaton *) nil_chk(self->runAutomaton_)) isAcceptWithInt:state]) {
        *IOSLongArray_GetRef(self->visited_, state) = self->curGen_;
        [self->automaton_ initTransitionWithInt:state withOrgApacheLuceneUtilAutomatonTransition:self->transition_];
        [self->automaton_ getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:self->transition_];
        state = ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->dest_;
        [self->seekBytesRef_ growWithInt:[self->seekBytesRef_ length] + 1];
        [self->seekBytesRef_ appendWithByte:(jbyte) ((OrgApacheLuceneUtilAutomatonTransition *) nil_chk(self->transition_))->min_];
        if (!self->finite_ && !self->linear_ && IOSLongArray_Get(self->visited_, state) == self->curGen_) {
          OrgApacheLuceneIndexAutomatonTermsEnum_setLinearWithInt_(self, [self->seekBytesRef_ length] - 1);
        }
      }
      return true;
    }
  }
  return false;
}

jint OrgApacheLuceneIndexAutomatonTermsEnum_backtrackWithInt_(OrgApacheLuceneIndexAutomatonTermsEnum *self, jint position) {
  while (position-- > 0) {
    jint nextChar = [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(self->seekBytesRef_)) byteAtWithInt:position] & (jint) 0xff;
    if (nextChar++ != (jint) 0xff) {
      [self->seekBytesRef_ setByteAtWithInt:position withByte:(jbyte) nextChar];
      [self->seekBytesRef_ setLengthWithInt:position + 1];
      return position;
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexAutomatonTermsEnum)
