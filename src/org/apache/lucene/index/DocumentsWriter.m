//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DocumentsWriter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Iterable.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Queue.h"
#include "java/util/Set.h"
#include "java/util/concurrent/ConcurrentLinkedQueue.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/AbortingException.h"
#include "org/apache/lucene/index/BufferedUpdatesStream.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/DocumentsWriterDeleteQueue.h"
#include "org/apache/lucene/index/DocumentsWriterFlushControl.h"
#include "org/apache/lucene/index/DocumentsWriterFlushQueue.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/DocumentsWriterPerThreadPool.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FlushPolicy.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/InfoStream.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/DocumentsWriter must not be compiled with ARC (-fobjc-arc)"
#if !__has_feature(objc_arc_weak)
#error "org/apache/lucene/index/DocumentsWriter must be compiled with weak references support (-fobjc-weak)"
#endif
#endif

@interface OrgApacheLuceneIndexDocumentsWriter () {
 @public
  OrgApacheLuceneStoreDirectory *directoryOrig_;
  OrgApacheLuceneStoreDirectory *directory_;
  volatile_jboolean closed_;
  OrgApacheLuceneUtilInfoStream *infoStream_;
  OrgApacheLuceneIndexLiveIndexWriterConfig *config_;
  JavaUtilConcurrentAtomicAtomicInteger *numDocsInRAM_;
  OrgApacheLuceneIndexDocumentsWriterFlushQueue *ticketQueue_;
  volatile_jboolean pendingChangesInCurrentFullFlush_;
  WEAK_ OrgApacheLuceneIndexIndexWriter *writer_;
  id<JavaUtilQueue> events_;
  volatile_id currentFullFlushDelQueue_;
}

- (jboolean)applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)deleteQueue;

- (void)ensureOpen;

/*!
 @brief Returns how many documents were aborted.
 */
- (jint)abortThreadStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread;

- (jboolean)preUpdate;

- (jboolean)postUpdateWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)flushingDWPT
                                                           withBoolean:(jboolean)hasEvents;

- (void)ensureInitializedWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)state;

- (jboolean)doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)flushingDWPT;

- (jboolean)setFlushingDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)session;

- (void)putEventWithOrgApacheLuceneIndexIndexWriter_Event:(id<OrgApacheLuceneIndexIndexWriter_Event>)event;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, directoryOrig_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, directory_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, infoStream_, OrgApacheLuceneUtilInfoStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, config_, OrgApacheLuceneIndexLiveIndexWriterConfig *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, numDocsInRAM_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, ticketQueue_, OrgApacheLuceneIndexDocumentsWriterFlushQueue *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, events_, id<JavaUtilQueue>)
J2OBJC_VOLATILE_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter, currentFullFlushDelQueue_, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriter_applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_ensureOpen(OrgApacheLuceneIndexDocumentsWriter *self);

__attribute__((unused)) static jint OrgApacheLuceneIndexDocumentsWriter_abortThreadStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriter_preUpdate(OrgApacheLuceneIndexDocumentsWriter *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriter_postUpdateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withBoolean_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT, jboolean hasEvents);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_ensureInitializedWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *state);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriter_doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriter_setFlushingDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *session);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_putEventWithOrgApacheLuceneIndexIndexWriter_Event_(OrgApacheLuceneIndexDocumentsWriter *self, id<OrgApacheLuceneIndexIndexWriter_Event> event);

@interface OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent () {
 @public
  jint instCount_;
}

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_init(OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent *self);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent *new_OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent *create_OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_init(void);

@interface OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent () {
 @public
  jint instCount_;
}

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_init(OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent *self);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent *new_OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent *create_OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_init(void);

@interface OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent () {
 @public
  jint instCount_;
}

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_init(OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent *self);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent *new_OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent *create_OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_init(void);

@interface OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent () {
 @public
  OrgApacheLuceneIndexSegmentInfo *info_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent, info_, OrgApacheLuceneIndexSegmentInfo *)

@interface OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent () {
 @public
  id<JavaUtilCollection> files_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent, files_, id<JavaUtilCollection>)

@implementation OrgApacheLuceneIndexDocumentsWriter

- (instancetype)initPackagePrivateWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                        withOrgApacheLuceneIndexLiveIndexWriterConfig:(OrgApacheLuceneIndexLiveIndexWriterConfig *)config
                                    withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directoryOrig
                                    withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexDocumentsWriter_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(self, writer, config, directoryOrig, directory);
  return self;
}

- (jboolean)deleteQueriesWithOrgApacheLuceneSearchQueryArray:(IOSObjectArray *)queries {
  @synchronized(self) {
    OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue = JreLoadVolatileId(&self->deleteQueue_);
    [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(deleteQueue)) addDeleteWithOrgApacheLuceneSearchQueryArray:queries];
    [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) doOnDelete];
    return OrgApacheLuceneIndexDocumentsWriter_applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, deleteQueue);
  }
}

- (jboolean)deleteTermsWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  @synchronized(self) {
    OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue = JreLoadVolatileId(&self->deleteQueue_);
    [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(deleteQueue)) addDeleteWithOrgApacheLuceneIndexTermArray:terms];
    [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) doOnDelete];
    return OrgApacheLuceneIndexDocumentsWriter_applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, deleteQueue);
  }
}

- (jboolean)updateDocValuesWithOrgApacheLuceneIndexDocValuesUpdateArray:(IOSObjectArray *)updates {
  @synchronized(self) {
    OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue = JreLoadVolatileId(&self->deleteQueue_);
    [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(deleteQueue)) addDocValuesUpdatesWithOrgApacheLuceneIndexDocValuesUpdateArray:updates];
    [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) doOnDelete];
    return OrgApacheLuceneIndexDocumentsWriter_applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, deleteQueue);
  }
}

- (OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)currentDeleteSession {
  return JreLoadVolatileId(&deleteQueue_);
}

- (jboolean)applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)deleteQueue {
  return OrgApacheLuceneIndexDocumentsWriter_applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, deleteQueue);
}

- (jint)purgeBufferWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                           withBoolean:(jboolean)forced {
  if (forced) {
    return [((OrgApacheLuceneIndexDocumentsWriterFlushQueue *) nil_chk(ticketQueue_)) forcePurgeWithOrgApacheLuceneIndexIndexWriter:writer];
  }
  else {
    return [((OrgApacheLuceneIndexDocumentsWriterFlushQueue *) nil_chk(ticketQueue_)) tryPurgeWithOrgApacheLuceneIndexIndexWriter:writer];
  }
}

- (jint)getNumDocs {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(numDocsInRAM_)) get];
}

- (void)ensureOpen {
  OrgApacheLuceneIndexDocumentsWriter_ensureOpen(self);
}

- (void)abortWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  @synchronized(self) {
    JreAssert(!JavaLangThread_holdsLockWithId_(writer), @"IndexWriter lock should never be hold when aborting");
    jboolean success = false;
    @try {
      [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&deleteQueue_))) clear];
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DW"]) {
        [infoStream_ messageWithNSString:@"DW" withNSString:@"abort"];
      }
      jint limit = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getActiveThreadStateCount];
      for (jint i = 0; i < limit; i++) {
        OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread = [perThreadPool_ getThreadStateWithInt:i];
        [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) lock];
        @try {
          OrgApacheLuceneIndexDocumentsWriter_abortThreadStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
        }
        @finally {
          [perThread unlock];
        }
      }
      [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) abortPendingFlushes];
      [flushControl_ waitForFlush];
      success = true;
    }
    @finally {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DW"]) {
        [infoStream_ messageWithNSString:@"DW" withNSString:JreStrcat("$Z", @"done abort success=", success)];
      }
    }
  }
}

- (jlong)lockAndAbortAllWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)indexWriter {
  @synchronized(self) {
    JreAssert([((OrgApacheLuceneIndexIndexWriter *) nil_chk(indexWriter)) holdsFullFlushLock], @"org/apache/lucene/index/DocumentsWriter.java:239 condition failed: assert indexWriter.holdsFullFlushLock();");
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DW"]) {
      [infoStream_ messageWithNSString:@"DW" withNSString:@"lockAndAbortAll"];
    }
    jlong abortedDocCount = 0;
    jboolean success = false;
    @try {
      [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&deleteQueue_))) clear];
      jint limit = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getMaxThreadStates];
      [perThreadPool_ setAbort];
      for (jint i = 0; i < limit; i++) {
        OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread = [perThreadPool_ getThreadStateWithInt:i];
        [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) lock];
        abortedDocCount += OrgApacheLuceneIndexDocumentsWriter_abortThreadStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
      }
      [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&deleteQueue_))) clear];
      [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) abortPendingFlushes];
      [flushControl_ waitForFlush];
      success = true;
      return abortedDocCount;
    }
    @finally {
      if ([infoStream_ isEnabledWithNSString:@"DW"]) {
        [infoStream_ messageWithNSString:@"DW" withNSString:JreStrcat("$Z", @"finished lockAndAbortAll success=", success)];
      }
      if (success == false) {
        [self unlockAllAfterAbortAllWithOrgApacheLuceneIndexIndexWriter:indexWriter];
      }
    }
  }
}

- (jint)abortThreadStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  return OrgApacheLuceneIndexDocumentsWriter_abortThreadStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
}

- (void)unlockAllAfterAbortAllWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)indexWriter {
  @synchronized(self) {
    JreAssert([((OrgApacheLuceneIndexIndexWriter *) nil_chk(indexWriter)) holdsFullFlushLock], @"org/apache/lucene/index/DocumentsWriter.java:290 condition failed: assert indexWriter.holdsFullFlushLock();");
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DW"]) {
      [infoStream_ messageWithNSString:@"DW" withNSString:@"unlockAll"];
    }
    jint limit = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getMaxThreadStates];
    [perThreadPool_ clearAbort];
    for (jint i = 0; i < limit; i++) {
      @try {
        OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread = [perThreadPool_ getThreadStateWithInt:i];
        if ([((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) isHeldByCurrentThread]) {
          [perThread unlock];
        }
      }
      @catch (JavaLangThrowable *e) {
        if ([infoStream_ isEnabledWithNSString:@"DW"]) {
          [infoStream_ messageWithNSString:@"DW" withNSString:JreStrcat("$I$$", @"unlockAll: could not unlock state: ", i, @" msg:", [e getMessage])];
        }
      }
    }
  }
}

- (jboolean)anyChanges {
  jboolean anyChanges = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(numDocsInRAM_)) get] != 0 || [self anyDeletions] || [((OrgApacheLuceneIndexDocumentsWriterFlushQueue *) nil_chk(ticketQueue_)) hasTickets] || JreLoadVolatileBoolean(&pendingChangesInCurrentFullFlush_);
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DW"] && anyChanges) {
    [infoStream_ messageWithNSString:@"DW" withNSString:JreStrcat("$I$Z$Z$Z", @"anyChanges? numDocsInRam=", [numDocsInRAM_ get], @" deletes=", [self anyDeletions], @" hasTickets:", [((OrgApacheLuceneIndexDocumentsWriterFlushQueue *) nil_chk(ticketQueue_)) hasTickets], @" pendingChangesInFullFlush: ", JreLoadVolatileBoolean(&pendingChangesInCurrentFullFlush_))];
  }
  return anyChanges;
}

- (jint)getBufferedDeleteTermsSize {
  return [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&deleteQueue_))) getBufferedUpdatesTermsSize];
}

- (jint)getNumBufferedDeleteTerms {
  return [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&deleteQueue_))) numGlobalTermDeletes];
}

- (jboolean)anyDeletions {
  return [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&deleteQueue_))) anyChanges];
}

- (void)close {
  JreAssignVolatileBoolean(&closed_, true);
  [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) setClosed];
}

- (jboolean)preUpdate {
  return OrgApacheLuceneIndexDocumentsWriter_preUpdate(self);
}

- (jboolean)postUpdateWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)flushingDWPT
                                                           withBoolean:(jboolean)hasEvents {
  return OrgApacheLuceneIndexDocumentsWriter_postUpdateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withBoolean_(self, flushingDWPT, hasEvents);
}

- (void)ensureInitializedWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)state {
  OrgApacheLuceneIndexDocumentsWriter_ensureInitializedWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, state);
}

- (jboolean)updateDocumentsWithJavaLangIterable:(id<JavaLangIterable>)docs
            withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                   withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  jboolean hasEvents = OrgApacheLuceneIndexDocumentsWriter_preUpdate(self);
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread = [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) obtainAndLock];
  OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT;
  @try {
    OrgApacheLuceneIndexDocumentsWriter_ensureOpen(self);
    OrgApacheLuceneIndexDocumentsWriter_ensureInitializedWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
    JreAssert([((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) isInitialized], @"org/apache/lucene/index/DocumentsWriter.java:413 condition failed: assert perThread.isInitialized();");
    OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt = perThread->dwpt_;
    jint dwptNumDocs = [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(dwpt)) getNumDocsInRAM];
    @try {
      [dwpt updateDocumentsWithJavaLangIterable:docs withOrgApacheLuceneAnalysisAnalyzer:analyzer withOrgApacheLuceneIndexTerm:delTerm];
    }
    @catch (OrgApacheLuceneIndexAbortingException *ae) {
      [flushControl_ doOnAbortWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
      [dwpt abort];
      @throw ae;
    }
    @finally {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(numDocsInRAM_)) addAndGetWithInt:[dwpt getNumDocsInRAM] - dwptNumDocs];
    }
    jboolean isUpdate = delTerm != nil;
    flushingDWPT = [flushControl_ doAfterDocumentWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread withBoolean:isUpdate];
  }
  @finally {
    [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) release__WithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
  }
  return OrgApacheLuceneIndexDocumentsWriter_postUpdateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withBoolean_(self, flushingDWPT, hasEvents);
}

- (jboolean)updateDocumentWithJavaLangIterable:(id<JavaLangIterable>)doc
           withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                  withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)delTerm {
  jboolean hasEvents = OrgApacheLuceneIndexDocumentsWriter_preUpdate(self);
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread = [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) obtainAndLock];
  OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT;
  @try {
    OrgApacheLuceneIndexDocumentsWriter_ensureOpen(self);
    OrgApacheLuceneIndexDocumentsWriter_ensureInitializedWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
    JreAssert([((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) isInitialized], @"org/apache/lucene/index/DocumentsWriter.java:450 condition failed: assert perThread.isInitialized();");
    OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt = perThread->dwpt_;
    jint dwptNumDocs = [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(dwpt)) getNumDocsInRAM];
    @try {
      [dwpt updateDocumentWithJavaLangIterable:doc withOrgApacheLuceneAnalysisAnalyzer:analyzer withOrgApacheLuceneIndexTerm:delTerm];
    }
    @catch (OrgApacheLuceneIndexAbortingException *ae) {
      [flushControl_ doOnAbortWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
      [dwpt abort];
      @throw ae;
    }
    @finally {
      [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(numDocsInRAM_)) addAndGetWithInt:[dwpt getNumDocsInRAM] - dwptNumDocs];
    }
    jboolean isUpdate = delTerm != nil;
    flushingDWPT = [flushControl_ doAfterDocumentWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread withBoolean:isUpdate];
  }
  @finally {
    [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) release__WithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
  }
  return OrgApacheLuceneIndexDocumentsWriter_postUpdateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withBoolean_(self, flushingDWPT, hasEvents);
}

- (jboolean)doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)flushingDWPT {
  return OrgApacheLuceneIndexDocumentsWriter_doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread_(self, flushingDWPT);
}

- (void)subtractFlushedNumDocsWithInt:(jint)numFlushed {
  jint oldValue = [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(numDocsInRAM_)) get];
  while (![numDocsInRAM_ compareAndSetWithInt:oldValue withInt:oldValue - numFlushed]) {
    oldValue = [numDocsInRAM_ get];
  }
  JreAssert([numDocsInRAM_ get] >= 0, @"org/apache/lucene/index/DocumentsWriter.java:578 condition failed: assert numDocsInRAM.get() >= 0;");
}

- (jboolean)setFlushingDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)session {
  return OrgApacheLuceneIndexDocumentsWriter_setFlushingDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, session);
}

- (jboolean)flushAllThreads {
  OrgApacheLuceneIndexDocumentsWriterDeleteQueue *flushingDeleteQueue;
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DW"]) {
    [infoStream_ messageWithNSString:@"DW" withNSString:@"startFullFlush"];
  }
  @synchronized(self) {
    JreAssignVolatileBoolean(&pendingChangesInCurrentFullFlush_, [self anyChanges]);
    flushingDeleteQueue = JreLoadVolatileId(&deleteQueue_);
    [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) markForFullFlush];
    JreAssert(OrgApacheLuceneIndexDocumentsWriter_setFlushingDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, flushingDeleteQueue), @"org/apache/lucene/index/DocumentsWriter.java:609 condition failed: assert setFlushingDeleteQueue(flushingDeleteQueue);");
  }
  JreAssert(JreLoadVolatileId(&currentFullFlushDelQueue_) != nil, @"org/apache/lucene/index/DocumentsWriter.java:611 condition failed: assert currentFullFlushDelQueue != null;");
  JreAssert(!JreObjectEqualsEquals(JreLoadVolatileId(&currentFullFlushDelQueue_), JreLoadVolatileId(&deleteQueue_)), @"org/apache/lucene/index/DocumentsWriter.java:612 condition failed: assert currentFullFlushDelQueue != deleteQueue;");
  jboolean anythingFlushed = false;
  @try {
    OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT;
    while ((flushingDWPT = [flushControl_ nextPendingFlush]) != nil) {
      anythingFlushed |= OrgApacheLuceneIndexDocumentsWriter_doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread_(self, flushingDWPT);
    }
    [flushControl_ waitForFlush];
    if (!anythingFlushed && [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(flushingDeleteQueue)) anyChanges]) {
      if ([infoStream_ isEnabledWithNSString:@"DW"]) {
        [infoStream_ messageWithNSString:@"DW" withNSString:JreStrcat("$$", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @": flush naked frozen global deletes")];
      }
      [((OrgApacheLuceneIndexDocumentsWriterFlushQueue *) nil_chk(ticketQueue_)) addDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:flushingDeleteQueue];
    }
    [((OrgApacheLuceneIndexDocumentsWriterFlushQueue *) nil_chk(ticketQueue_)) forcePurgeWithOrgApacheLuceneIndexIndexWriter:writer_];
    JreAssert(![((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(flushingDeleteQueue)) anyChanges] && ![ticketQueue_ hasTickets], @"org/apache/lucene/index/DocumentsWriter.java:630 condition failed: assert !flushingDeleteQueue.anyChanges() && !ticketQueue.hasTickets();");
  }
  @finally {
    JreAssert(JreObjectEqualsEquals(flushingDeleteQueue, JreLoadVolatileId(&currentFullFlushDelQueue_)), @"org/apache/lucene/index/DocumentsWriter.java:632 condition failed: assert flushingDeleteQueue == currentFullFlushDelQueue;");
  }
  return anythingFlushed;
}

- (void)finishFullFlushWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)indexWriter
                                               withBoolean:(jboolean)success {
  JreAssert([((OrgApacheLuceneIndexIndexWriter *) nil_chk(indexWriter)) holdsFullFlushLock], @"org/apache/lucene/index/DocumentsWriter.java:638 condition failed: assert indexWriter.holdsFullFlushLock();");
  @try {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DW"]) {
      [infoStream_ messageWithNSString:@"DW" withNSString:JreStrcat("$$Z", [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) getName], @" finishFullFlush success=", success)];
    }
    JreAssert(OrgApacheLuceneIndexDocumentsWriter_setFlushingDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, nil), @"org/apache/lucene/index/DocumentsWriter.java:643 condition failed: assert setFlushingDeleteQueue(null);");
    if (success) {
      [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) finishFullFlush];
    }
    else {
      [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) abortFullFlushes];
    }
  }
  @finally {
    JreAssignVolatileBoolean(&pendingChangesInCurrentFullFlush_, false);
  }
}

- (OrgApacheLuceneIndexLiveIndexWriterConfig *)getIndexWriterConfig {
  return config_;
}

- (void)putEventWithOrgApacheLuceneIndexIndexWriter_Event:(id<OrgApacheLuceneIndexIndexWriter_Event>)event {
  OrgApacheLuceneIndexDocumentsWriter_putEventWithOrgApacheLuceneIndexIndexWriter_Event_(self, event);
}

- (jlong)ramBytesUsed {
  return [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(flushControl_)) ramBytesUsed];
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (id<JavaUtilQueue>)eventQueue {
  return events_;
}

- (void)__javaClone:(OrgApacheLuceneIndexDocumentsWriter *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&deleteQueue_, &original->deleteQueue_);
  [writer_ release];
  JreCloneVolatileStrong(&currentFullFlushDelQueue_, &original->currentFullFlushDelQueue_);
}

- (void)dealloc {
  RELEASE_(directoryOrig_);
  RELEASE_(directory_);
  RELEASE_(infoStream_);
  RELEASE_(config_);
  RELEASE_(numDocsInRAM_);
  JreReleaseVolatile(&deleteQueue_);
  RELEASE_(ticketQueue_);
  RELEASE_(perThreadPool_);
  RELEASE_(flushPolicy_);
  RELEASE_(flushControl_);
  RELEASE_(events_);
  JreReleaseVolatile(&currentFullFlushDelQueue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0xa0, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0xa0, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0xa0, 6, 7, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterDeleteQueue;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, 3, -1, -1, -1 },
    { NULL, "I", 0x0, 10, 11, 3, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 12, -1, -1, -1 },
    { NULL, "V", 0x20, 13, 14, -1, -1, -1, -1 },
    { NULL, "J", 0x20, 15, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 18, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, 19, -1, -1, -1 },
    { NULL, "Z", 0x2, 20, 21, 19, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 17, 3, -1, -1, -1 },
    { NULL, "Z", 0x0, 23, 24, 19, 25, -1, -1 },
    { NULL, "Z", 0x0, 26, 24, 19, 27, -1, -1 },
    { NULL, "Z", 0x2, 28, 29, 19, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x22, 32, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, 19, -1, -1, -1 },
    { NULL, "V", 0x0, 33, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexLiveIndexWriterConfig;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 36, -1, -1 },
    { NULL, "LJavaUtilQueue;", 0x1, -1, -1, -1, 37, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexLiveIndexWriterConfig:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(deleteQueriesWithOrgApacheLuceneSearchQueryArray:);
  methods[2].selector = @selector(deleteTermsWithOrgApacheLuceneIndexTermArray:);
  methods[3].selector = @selector(updateDocValuesWithOrgApacheLuceneIndexDocValuesUpdateArray:);
  methods[4].selector = @selector(currentDeleteSession);
  methods[5].selector = @selector(applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:);
  methods[6].selector = @selector(purgeBufferWithOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[7].selector = @selector(getNumDocs);
  methods[8].selector = @selector(ensureOpen);
  methods[9].selector = @selector(abortWithOrgApacheLuceneIndexIndexWriter:);
  methods[10].selector = @selector(lockAndAbortAllWithOrgApacheLuceneIndexIndexWriter:);
  methods[11].selector = @selector(abortThreadStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:);
  methods[12].selector = @selector(unlockAllAfterAbortAllWithOrgApacheLuceneIndexIndexWriter:);
  methods[13].selector = @selector(anyChanges);
  methods[14].selector = @selector(getBufferedDeleteTermsSize);
  methods[15].selector = @selector(getNumBufferedDeleteTerms);
  methods[16].selector = @selector(anyDeletions);
  methods[17].selector = @selector(close);
  methods[18].selector = @selector(preUpdate);
  methods[19].selector = @selector(postUpdateWithOrgApacheLuceneIndexDocumentsWriterPerThread:withBoolean:);
  methods[20].selector = @selector(ensureInitializedWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:);
  methods[21].selector = @selector(updateDocumentsWithJavaLangIterable:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexTerm:);
  methods[22].selector = @selector(updateDocumentWithJavaLangIterable:withOrgApacheLuceneAnalysisAnalyzer:withOrgApacheLuceneIndexTerm:);
  methods[23].selector = @selector(doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:);
  methods[24].selector = @selector(subtractFlushedNumDocsWithInt:);
  methods[25].selector = @selector(setFlushingDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:);
  methods[26].selector = @selector(flushAllThreads);
  methods[27].selector = @selector(finishFullFlushWithOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[28].selector = @selector(getIndexWriterConfig);
  methods[29].selector = @selector(putEventWithOrgApacheLuceneIndexIndexWriter_Event:);
  methods[30].selector = @selector(ramBytesUsed);
  methods[31].selector = @selector(getChildResources);
  methods[32].selector = @selector(eventQueue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "directoryOrig_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "directory_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "infoStream_", "LOrgApacheLuceneUtilInfoStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "config_", "LOrgApacheLuceneIndexLiveIndexWriterConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numDocsInRAM_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "deleteQueue_", "LOrgApacheLuceneIndexDocumentsWriterDeleteQueue;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "ticketQueue_", "LOrgApacheLuceneIndexDocumentsWriterFlushQueue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pendingChangesInCurrentFullFlush_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "perThreadPool_", "LOrgApacheLuceneIndexDocumentsWriterPerThreadPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "flushPolicy_", "LOrgApacheLuceneIndexFlushPolicy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "flushControl_", "LOrgApacheLuceneIndexDocumentsWriterFlushControl;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "writer_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "events_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 38, -1 },
    { "currentFullFlushDelQueue_", "LOrgApacheLuceneIndexDocumentsWriterDeleteQueue;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexLiveIndexWriterConfig;LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneStoreDirectory;", "deleteQueries", "[LOrgApacheLuceneSearchQuery;", "LJavaIoIOException;", "deleteTerms", "[LOrgApacheLuceneIndexTerm;", "updateDocValues", "[LOrgApacheLuceneIndexDocValuesUpdate;", "applyAllDeletes", "LOrgApacheLuceneIndexDocumentsWriterDeleteQueue;", "purgeBuffer", "LOrgApacheLuceneIndexIndexWriter;Z", "LOrgApacheLuceneStoreAlreadyClosedException;", "abort", "LOrgApacheLuceneIndexIndexWriter;", "lockAndAbortAll", "abortThreadState", "LOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState;", "unlockAllAfterAbortAll", "LJavaIoIOException;LOrgApacheLuceneIndexAbortingException;", "postUpdate", "LOrgApacheLuceneIndexDocumentsWriterPerThread;Z", "ensureInitialized", "updateDocuments", "LJavaLangIterable;LOrgApacheLuceneAnalysisAnalyzer;LOrgApacheLuceneIndexTerm;", "(Ljava/lang/Iterable<+Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;>;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;)Z", "updateDocument", "(Ljava/lang/Iterable<+Lorg/apache/lucene/index/IndexableField;>;Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/index/Term;)Z", "doFlush", "LOrgApacheLuceneIndexDocumentsWriterPerThread;", "subtractFlushedNumDocs", "I", "setFlushingDeleteQueue", "finishFullFlush", "putEvent", "LOrgApacheLuceneIndexIndexWriter_Event;", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "()Ljava/util/Queue<Lorg/apache/lucene/index/IndexWriter$Event;>;", "Ljava/util/Queue<Lorg/apache/lucene/index/IndexWriter$Event;>;", "LOrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent;LOrgApacheLuceneIndexDocumentsWriter_MergePendingEvent;LOrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent;LOrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent;LOrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter = { "DocumentsWriter", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 33, 15, -1, 39, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexLiveIndexWriterConfig *config, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->numDocsInRAM_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
  JreVolatileStrongAssign(&self->deleteQueue_, create_OrgApacheLuceneIndexDocumentsWriterDeleteQueue_initPackagePrivate());
  JreStrongAssignAndConsume(&self->ticketQueue_, new_OrgApacheLuceneIndexDocumentsWriterFlushQueue_initPackagePrivate());
  JreVolatileStrongAssign(&self->currentFullFlushDelQueue_, nil);
  JreStrongAssign(&self->directoryOrig_, directoryOrig);
  JreStrongAssign(&self->directory_, directory);
  JreStrongAssign(&self->config_, config);
  JreStrongAssign(&self->infoStream_, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config)) getInfoStream]);
  JreStrongAssign(&self->perThreadPool_, [config getIndexerThreadPool]);
  JreStrongAssign(&self->flushPolicy_, [config getFlushPolicy]);
  self->writer_ = writer;
  JreStrongAssignAndConsume(&self->events_, new_JavaUtilConcurrentConcurrentLinkedQueue_init());
  JreStrongAssignAndConsume(&self->flushControl_, new_OrgApacheLuceneIndexDocumentsWriterFlushControl_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_(self, config, ((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer))->bufferedUpdatesStream_));
}

OrgApacheLuceneIndexDocumentsWriter *new_OrgApacheLuceneIndexDocumentsWriter_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexLiveIndexWriterConfig *config, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter, initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_, writer, config, directoryOrig, directory)
}

OrgApacheLuceneIndexDocumentsWriter *create_OrgApacheLuceneIndexDocumentsWriter_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexLiveIndexWriterConfig *config, OrgApacheLuceneStoreDirectory *directoryOrig, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter, initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_, writer, config, directoryOrig, directory)
}

jboolean OrgApacheLuceneIndexDocumentsWriter_applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *deleteQueue) {
  if ([((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(self->flushControl_)) getAndResetApplyAllDeletes]) {
    if (deleteQueue != nil && ![self->flushControl_ isFullFlush]) {
      [((OrgApacheLuceneIndexDocumentsWriterFlushQueue *) nil_chk(self->ticketQueue_)) addDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:deleteQueue];
    }
    OrgApacheLuceneIndexDocumentsWriter_putEventWithOrgApacheLuceneIndexIndexWriter_Event_(self, JreLoadStatic(OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent, INSTANCE));
    return true;
  }
  return false;
}

void OrgApacheLuceneIndexDocumentsWriter_ensureOpen(OrgApacheLuceneIndexDocumentsWriter *self) {
  if (JreLoadVolatileBoolean(&self->closed_)) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"this IndexWriter is closed");
  }
}

jint OrgApacheLuceneIndexDocumentsWriter_abortThreadStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread) {
  JreAssert([((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) isHeldByCurrentThread], @"org/apache/lucene/index/DocumentsWriter.java:272 condition failed: assert perThread.isHeldByCurrentThread();");
  if ([perThread isInitialized]) {
    @try {
      jint abortedDocCount = [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(perThread->dwpt_)) getNumDocsInRAM];
      [self subtractFlushedNumDocsWithInt:abortedDocCount];
      [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(perThread->dwpt_)) abort];
      return abortedDocCount;
    }
    @finally {
      [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(self->flushControl_)) doOnAbortWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
    }
  }
  else {
    [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(self->flushControl_)) doOnAbortWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
    return 0;
  }
}

jboolean OrgApacheLuceneIndexDocumentsWriter_preUpdate(OrgApacheLuceneIndexDocumentsWriter *self) {
  OrgApacheLuceneIndexDocumentsWriter_ensureOpen(self);
  jboolean hasEvents = false;
  if ([((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(self->flushControl_)) anyStalledThreads] || [self->flushControl_ numQueuedFlushes] > 0) {
    if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"DW"]) {
      [self->infoStream_ messageWithNSString:@"DW" withNSString:@"DocumentsWriter has queued dwpt; will hijack this thread to flush pending segment(s)"];
    }
    do {
      OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT;
      while ((flushingDWPT = [self->flushControl_ nextPendingFlush]) != nil) {
        hasEvents |= OrgApacheLuceneIndexDocumentsWriter_doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread_(self, flushingDWPT);
      }
      if ([self->infoStream_ isEnabledWithNSString:@"DW"] && [self->flushControl_ anyStalledThreads]) {
        [self->infoStream_ messageWithNSString:@"DW" withNSString:@"WARNING DocumentsWriter has stalled threads; waiting"];
      }
      [self->flushControl_ waitIfStalled];
    }
    while ([self->flushControl_ numQueuedFlushes] != 0);
    if ([self->infoStream_ isEnabledWithNSString:@"DW"]) {
      [self->infoStream_ messageWithNSString:@"DW" withNSString:@"continue indexing after helping out flushing DocumentsWriter is healthy"];
    }
  }
  return hasEvents;
}

jboolean OrgApacheLuceneIndexDocumentsWriter_postUpdateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withBoolean_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT, jboolean hasEvents) {
  hasEvents |= OrgApacheLuceneIndexDocumentsWriter_applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, JreLoadVolatileId(&self->deleteQueue_));
  if (flushingDWPT != nil) {
    hasEvents |= OrgApacheLuceneIndexDocumentsWriter_doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread_(self, flushingDWPT);
  }
  else {
    OrgApacheLuceneIndexDocumentsWriterPerThread *nextPendingFlush = [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(self->flushControl_)) nextPendingFlush];
    if (nextPendingFlush != nil) {
      hasEvents |= OrgApacheLuceneIndexDocumentsWriter_doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread_(self, nextPendingFlush);
    }
  }
  return hasEvents;
}

void OrgApacheLuceneIndexDocumentsWriter_ensureInitializedWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *state) {
  if (((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(state))->dwpt_ == nil) {
    OrgApacheLuceneIndexFieldInfos_Builder *infos = create_OrgApacheLuceneIndexFieldInfos_Builder_initWithOrgApacheLuceneIndexFieldInfos_FieldNumbers_(((OrgApacheLuceneIndexIndexWriter *) nil_chk(self->writer_))->globalFieldNumberMap_);
    JreStrongAssignAndConsume(&state->dwpt_, new_OrgApacheLuceneIndexDocumentsWriterPerThread_initPackagePrivateWithOrgApacheLuceneIndexIndexWriter_withNSString_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneUtilInfoStream_withOrgApacheLuceneIndexDocumentsWriterDeleteQueue_withOrgApacheLuceneIndexFieldInfos_Builder_withJavaUtilConcurrentAtomicAtomicLong_withBoolean_(self->writer_, [self->writer_ newSegmentName], self->directoryOrig_, self->directory_, self->config_, self->infoStream_, JreLoadVolatileId(&self->deleteQueue_), infos, self->writer_->pendingNumDocs_, self->writer_->enableTestPoints_));
  }
}

jboolean OrgApacheLuceneIndexDocumentsWriter_doFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT) {
  jboolean hasEvents = false;
  while (flushingDWPT != nil) {
    hasEvents = true;
    jboolean success = false;
    OrgApacheLuceneIndexDocumentsWriterFlushQueue_SegmentFlushTicket *ticket = nil;
    @try {
      JreAssert(JreLoadVolatileId(&self->currentFullFlushDelQueue_) == nil || JreObjectEqualsEquals(flushingDWPT->deleteQueue_, JreLoadVolatileId(&self->currentFullFlushDelQueue_)), JreStrcat("$@$@CZ", @"expected: ", JreLoadVolatileId(&self->currentFullFlushDelQueue_), @"but was: ", flushingDWPT->deleteQueue_, ' ', [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(self->flushControl_)) isFullFlush]));
      @try {
        ticket = [((OrgApacheLuceneIndexDocumentsWriterFlushQueue *) nil_chk(self->ticketQueue_)) addFlushTicketWithOrgApacheLuceneIndexDocumentsWriterPerThread:flushingDWPT];
        jint flushingDocsInRam = [flushingDWPT getNumDocsInRAM];
        jboolean dwptSuccess = false;
        @try {
          OrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment *newSegment = [flushingDWPT flush];
          [self->ticketQueue_ addSegmentWithOrgApacheLuceneIndexDocumentsWriterFlushQueue_SegmentFlushTicket:ticket withOrgApacheLuceneIndexDocumentsWriterPerThread_FlushedSegment:newSegment];
          dwptSuccess = true;
        }
        @finally {
          [self subtractFlushedNumDocsWithInt:flushingDocsInRam];
          if (![((id<JavaUtilSet>) nil_chk([flushingDWPT pendingFilesToDelete])) isEmpty]) {
            OrgApacheLuceneIndexDocumentsWriter_putEventWithOrgApacheLuceneIndexIndexWriter_Event_(self, create_OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent_initWithJavaUtilCollection_([flushingDWPT pendingFilesToDelete]));
            hasEvents = true;
          }
          if (!dwptSuccess) {
            OrgApacheLuceneIndexDocumentsWriter_putEventWithOrgApacheLuceneIndexIndexWriter_Event_(self, create_OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent_initWithOrgApacheLuceneIndexSegmentInfo_([flushingDWPT getSegmentInfo]));
            hasEvents = true;
          }
        }
        success = true;
      }
      @finally {
        if (!success && ticket != nil) {
          [self->ticketQueue_ markTicketFailedWithOrgApacheLuceneIndexDocumentsWriterFlushQueue_SegmentFlushTicket:ticket];
        }
      }
      if ([self->ticketQueue_ getTicketCount] >= [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(self->perThreadPool_)) getActiveThreadStateCount]) {
        OrgApacheLuceneIndexDocumentsWriter_putEventWithOrgApacheLuceneIndexIndexWriter_Event_(self, JreLoadStatic(OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent, INSTANCE));
        break;
      }
    }
    @finally {
      [self->flushControl_ doAfterFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:flushingDWPT];
    }
    flushingDWPT = [self->flushControl_ nextPendingFlush];
  }
  if (hasEvents) {
    OrgApacheLuceneIndexDocumentsWriter_putEventWithOrgApacheLuceneIndexIndexWriter_Event_(self, JreLoadStatic(OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent, INSTANCE));
  }
  jdouble ramBufferSizeMB = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getRAMBufferSizeMB];
  if (ramBufferSizeMB != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && [((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(self->flushControl_)) getDeleteBytesUsed] > (1024 * 1024 * ramBufferSizeMB / 2)) {
    hasEvents = true;
    if (!OrgApacheLuceneIndexDocumentsWriter_applyAllDeletesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, JreLoadVolatileId(&self->deleteQueue_))) {
      if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(self->infoStream_)) isEnabledWithNSString:@"DW"]) {
        [self->infoStream_ messageWithNSString:@"DW" withNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"force apply deletes bytesUsed=%.1f MB vs ramBuffer=%.1f MB", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_([((OrgApacheLuceneIndexDocumentsWriterFlushControl *) nil_chk(self->flushControl_)) getDeleteBytesUsed] / (1024. * 1024.)), JavaLangDouble_valueOfWithDouble_(ramBufferSizeMB) } count:2 type:NSObject_class_()])];
      }
      OrgApacheLuceneIndexDocumentsWriter_putEventWithOrgApacheLuceneIndexIndexWriter_Event_(self, JreLoadStatic(OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent, INSTANCE));
    }
  }
  return hasEvents;
}

jboolean OrgApacheLuceneIndexDocumentsWriter_setFlushingDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriter *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *session) {
  @synchronized(self) {
    JreVolatileStrongAssign(&self->currentFullFlushDelQueue_, session);
    return true;
  }
}

void OrgApacheLuceneIndexDocumentsWriter_putEventWithOrgApacheLuceneIndexIndexWriter_Event_(OrgApacheLuceneIndexDocumentsWriter *self, id<OrgApacheLuceneIndexIndexWriter_Event> event) {
  [((id<JavaUtilQueue>) nil_chk(self->events_)) addWithId:event];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent)

id<OrgApacheLuceneIndexIndexWriter_Event> OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_INSTANCE;

@implementation OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent

+ (id<OrgApacheLuceneIndexIndexWriter_Event>)INSTANCE {
  return OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_INSTANCE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)processWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                       withBoolean:(jboolean)triggerMerge
                                       withBoolean:(jboolean)forcePurge {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) applyDeletesAndPurgeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processWithOrgApacheLuceneIndexIndexWriter:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgApacheLuceneIndexIndexWriter_Event;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "instCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "process", "LOrgApacheLuceneIndexIndexWriter;ZZ", "LJavaIoIOException;", &OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_INSTANCE, "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent = { "ApplyDeletesEvent", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x18, 2, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_INSTANCE, new_OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent)
  }
}

@end

void OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_init(OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent *self) {
  NSObject_init(self);
  self->instCount_ = 0;
  JreAssert(self->instCount_ == 0, @"org/apache/lucene/index/DocumentsWriter.java:679 condition failed: assert instCount == 0;");
  self->instCount_++;
}

OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent *new_OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent, init)
}

OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent *create_OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_ApplyDeletesEvent)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent)

id<OrgApacheLuceneIndexIndexWriter_Event> OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_INSTANCE;

@implementation OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent

+ (id<OrgApacheLuceneIndexIndexWriter_Event>)INSTANCE {
  return OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_INSTANCE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)processWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                       withBoolean:(jboolean)triggerMerge
                                       withBoolean:(jboolean)forcePurge {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) doAfterSegmentFlushedWithBoolean:triggerMerge withBoolean:forcePurge];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processWithOrgApacheLuceneIndexIndexWriter:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgApacheLuceneIndexIndexWriter_Event;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "instCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "process", "LOrgApacheLuceneIndexIndexWriter;ZZ", "LJavaIoIOException;", &OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_INSTANCE, "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent = { "MergePendingEvent", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x18, 2, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_INSTANCE, new_OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent)
  }
}

@end

void OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_init(OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent *self) {
  NSObject_init(self);
  self->instCount_ = 0;
  JreAssert(self->instCount_ == 0, @"org/apache/lucene/index/DocumentsWriter.java:693 condition failed: assert instCount == 0;");
  self->instCount_++;
}

OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent *new_OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent, init)
}

OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent *create_OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_MergePendingEvent)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent)

id<OrgApacheLuceneIndexIndexWriter_Event> OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_INSTANCE;

@implementation OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent

+ (id<OrgApacheLuceneIndexIndexWriter_Event>)INSTANCE {
  return OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_INSTANCE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)processWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                       withBoolean:(jboolean)triggerMerge
                                       withBoolean:(jboolean)forcePurge {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) purgeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processWithOrgApacheLuceneIndexIndexWriter:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgApacheLuceneIndexIndexWriter_Event;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "instCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "process", "LOrgApacheLuceneIndexIndexWriter;ZZ", "LJavaIoIOException;", &OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_INSTANCE, "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent = { "ForcedPurgeEvent", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x18, 2, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_INSTANCE, new_OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent)
  }
}

@end

void OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_init(OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent *self) {
  NSObject_init(self);
  self->instCount_ = 0;
  JreAssert(self->instCount_ == 0, @"org/apache/lucene/index/DocumentsWriter.java:707 condition failed: assert instCount == 0;");
  self->instCount_++;
}

OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent *new_OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent, init)
}

OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent *create_OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_ForcedPurgeEvent)

@implementation OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent

- (instancetype)initWithOrgApacheLuceneIndexSegmentInfo:(OrgApacheLuceneIndexSegmentInfo *)info {
  OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent_initWithOrgApacheLuceneIndexSegmentInfo_(self, info);
  return self;
}

- (void)processWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                       withBoolean:(jboolean)triggerMerge
                                       withBoolean:(jboolean)forcePurge {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) flushFailedWithOrgApacheLuceneIndexSegmentInfo:info_];
}

- (void)dealloc {
  RELEASE_(info_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentInfo:);
  methods[1].selector = @selector(processWithOrgApacheLuceneIndexIndexWriter:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "info_", "LOrgApacheLuceneIndexSegmentInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentInfo;", "process", "LOrgApacheLuceneIndexIndexWriter;ZZ", "LJavaIoIOException;", "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent = { "FlushFailedEvent", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8, 2, 1, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent_initWithOrgApacheLuceneIndexSegmentInfo_(OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent *self, OrgApacheLuceneIndexSegmentInfo *info) {
  NSObject_init(self);
  JreStrongAssign(&self->info_, info);
}

OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent *new_OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent_initWithOrgApacheLuceneIndexSegmentInfo_(OrgApacheLuceneIndexSegmentInfo *info) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent, initWithOrgApacheLuceneIndexSegmentInfo_, info)
}

OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent *create_OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent_initWithOrgApacheLuceneIndexSegmentInfo_(OrgApacheLuceneIndexSegmentInfo *info) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent, initWithOrgApacheLuceneIndexSegmentInfo_, info)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_FlushFailedEvent)

@implementation OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)files {
  OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent_initWithJavaUtilCollection_(self, files);
  return self;
}

- (void)processWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                       withBoolean:(jboolean)triggerMerge
                                       withBoolean:(jboolean)forcePurge {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) deleteNewFilesWithJavaUtilCollection:files_];
}

- (void)dealloc {
  RELEASE_(files_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilCollection:);
  methods[1].selector = @selector(processWithOrgApacheLuceneIndexIndexWriter:withBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "files_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/String;>;)V", "process", "LOrgApacheLuceneIndexIndexWriter;ZZ", "LJavaIoIOException;", "Ljava/util/Collection<Ljava/lang/String;>;", "LOrgApacheLuceneIndexDocumentsWriter;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent = { "DeleteNewFilesEvent", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8, 2, 1, 6, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent;
}

@end

void OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent_initWithJavaUtilCollection_(OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent *self, id<JavaUtilCollection> files) {
  NSObject_init(self);
  JreStrongAssign(&self->files_, files);
}

OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent *new_OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent_initWithJavaUtilCollection_(id<JavaUtilCollection> files) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent, initWithJavaUtilCollection_, files)
}

OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent *create_OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent_initWithJavaUtilCollection_(id<JavaUtilCollection> files) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent, initWithJavaUtilCollection_, files)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriter_DeleteNewFilesEvent)
