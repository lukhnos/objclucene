//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/MultiTermsEnum.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/apache/lucene/index/MultiPostingsEnum.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/PriorityQueue.h"

@class OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue;

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/MultiTermsEnum must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneIndexMultiTermsEnum () {
 @public
  OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *queue_;
  IOSObjectArray *subs_;
  IOSObjectArray *currentSubs_;
  IOSObjectArray *top_;
  IOSObjectArray *subDocs_;
  OrgApacheLuceneUtilBytesRef *lastSeek_;
  jboolean lastSeekExact_;
  OrgApacheLuceneUtilBytesRefBuilder *lastSeekScratch_;
  jint numTop_;
  jint numSubs_;
  OrgApacheLuceneUtilBytesRef *current_;
}

- (void)pullTop;

- (void)pushTop;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, queue_, OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, subs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, currentSubs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, top_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, subDocs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, lastSeek_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, lastSeekScratch_, OrgApacheLuceneUtilBytesRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum, current_, OrgApacheLuceneUtilBytesRef *)

inline id<JavaUtilComparator> OrgApacheLuceneIndexMultiTermsEnum_get_INDEX_COMPARATOR(void);
static id<JavaUtilComparator> OrgApacheLuceneIndexMultiTermsEnum_INDEX_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexMultiTermsEnum, INDEX_COMPARATOR, id<JavaUtilComparator>)

__attribute__((unused)) static void OrgApacheLuceneIndexMultiTermsEnum_pullTop(OrgApacheLuceneIndexMultiTermsEnum *self);

__attribute__((unused)) static void OrgApacheLuceneIndexMultiTermsEnum_pushTop(OrgApacheLuceneIndexMultiTermsEnum *self);

@interface OrgApacheLuceneIndexMultiTermsEnum_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)o1
               withId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexMultiTermsEnum_1)

__attribute__((unused)) static void OrgApacheLuceneIndexMultiTermsEnum_1_init(OrgApacheLuceneIndexMultiTermsEnum_1 *self);

__attribute__((unused)) static OrgApacheLuceneIndexMultiTermsEnum_1 *new_OrgApacheLuceneIndexMultiTermsEnum_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexMultiTermsEnum_1 *create_OrgApacheLuceneIndexMultiTermsEnum_1_init(void);

@interface OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice () {
 @public
  OrgApacheLuceneIndexReaderSlice *subSlice_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice, subSlice_, OrgApacheLuceneIndexReaderSlice *)

@interface OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue : OrgApacheLuceneUtilPriorityQueue {
 @public
  IOSIntArray *stack_;
}

- (instancetype)initWithInt:(jint)size;

- (jboolean)lessThanWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)termsA
                    withId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)termsB;

/*!
 @brief Add the <code>top()</code> slice as well as all slices that are positionned
   on the same term to <code>tops</code> and return how many of them there are.
 */
- (jint)fillTopWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSliceArray:(IOSObjectArray *)tops;

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)getWithInt:(jint)i;

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)pop;

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)top;

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)insertWithOverflowWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)arg0;

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)addWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)arg0;

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)getSentinelObject;

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)updateTopWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)arg0;

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)updateTop;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue, stack_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *self, jint size);

__attribute__((unused)) static OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *new_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *create_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(jint size);

__attribute__((unused)) static OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_getWithInt_(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *self, jint i);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexMultiTermsEnum)

@implementation OrgApacheLuceneIndexMultiTermsEnum

- (jint)getMatchCount {
  return numTop_;
}

- (IOSObjectArray *)getMatchArray {
  return top_;
}

- (instancetype)initWithOrgApacheLuceneIndexReaderSliceArray:(IOSObjectArray *)slices {
  OrgApacheLuceneIndexMultiTermsEnum_initWithOrgApacheLuceneIndexReaderSliceArray_(self, slices);
  return self;
}

- (OrgApacheLuceneUtilBytesRef *)term {
  return current_;
}

- (OrgApacheLuceneIndexTermsEnum *)resetWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndexArray:(IOSObjectArray *)termsEnumsIndex {
  JreAssert(((IOSObjectArray *) nil_chk(termsEnumsIndex))->size_ <= ((IOSObjectArray *) nil_chk(top_))->size_, @"org/apache/lucene/index/MultiTermsEnum.java:104 condition failed: assert termsEnumsIndex.length <= top.length;");
  numSubs_ = 0;
  numTop_ = 0;
  [((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(queue_)) clear];
  for (jint i = 0; i < termsEnumsIndex->size_; i++) {
    OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *termsEnumIndex = IOSObjectArray_Get(termsEnumsIndex, i);
    JreAssert(termsEnumIndex != nil, @"org/apache/lucene/index/MultiTermsEnum.java:111 condition failed: assert termsEnumIndex != null;");
    OrgApacheLuceneUtilBytesRef *term = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *) nil_chk(termsEnumIndex))->termsEnum_)) next];
    if (term != nil) {
      OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *entry_ = IOSObjectArray_Get(nil_chk(subs_), termsEnumIndex->subIndex_);
      [((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(entry_)) resetWithOrgApacheLuceneIndexTermsEnum:termsEnumIndex->termsEnum_ withOrgApacheLuceneUtilBytesRef:term];
      [queue_ addWithId:entry_];
      IOSObjectArray_Set(nil_chk(currentSubs_), numSubs_++, entry_);
    }
    else {
    }
  }
  if ([queue_ size] == 0) {
    return JreLoadStatic(OrgApacheLuceneIndexTermsEnum, EMPTY);
  }
  else {
    return self;
  }
}

- (jboolean)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  [((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(queue_)) clear];
  numTop_ = 0;
  jboolean seekOpt = false;
  if (lastSeek_ != nil && [lastSeek_ compareToWithId:term] <= 0) {
    seekOpt = true;
  }
  JreStrongAssign(&lastSeek_, nil);
  lastSeekExact_ = true;
  for (jint i = 0; i < numSubs_; i++) {
    jboolean status;
    if (seekOpt) {
      OrgApacheLuceneUtilBytesRef *curTerm = ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->current_;
      if (curTerm != nil) {
        jint cmp = [((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) compareToWithId:curTerm];
        if (cmp == 0) {
          status = true;
        }
        else if (cmp < 0) {
          status = false;
        }
        else {
          status = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) seekExactWithOrgApacheLuceneUtilBytesRef:term];
        }
      }
      else {
        status = false;
      }
    }
    else {
      status = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->terms_)) seekExactWithOrgApacheLuceneUtilBytesRef:term];
    }
    if (status) {
      IOSObjectArray_Set(nil_chk(top_), numTop_++, IOSObjectArray_Get(currentSubs_, i));
      JreStrongAssign(&current_, JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) term]));
      JreAssert([((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) isEqual:((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_], @"org/apache/lucene/index/MultiTermsEnum.java:173 condition failed: assert term.equals(currentSubs[i].current);");
    }
  }
  return numTop_ > 0;
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatus *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  [((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(queue_)) clear];
  numTop_ = 0;
  lastSeekExact_ = false;
  jboolean seekOpt = false;
  if (lastSeek_ != nil && [lastSeek_ compareToWithId:term] <= 0) {
    seekOpt = true;
  }
  [((OrgApacheLuceneUtilBytesRefBuilder *) nil_chk(lastSeekScratch_)) copyBytesWithOrgApacheLuceneUtilBytesRef:term];
  JreStrongAssign(&lastSeek_, [lastSeekScratch_ get]);
  for (jint i = 0; i < numSubs_; i++) {
    OrgApacheLuceneIndexTermsEnum_SeekStatus *status;
    if (seekOpt) {
      OrgApacheLuceneUtilBytesRef *curTerm = ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->current_;
      if (curTerm != nil) {
        jint cmp = [((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) compareToWithId:curTerm];
        if (cmp == 0) {
          status = JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND);
        }
        else if (cmp < 0) {
          status = JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, NOT_FOUND);
        }
        else {
          status = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) seekCeilWithOrgApacheLuceneUtilBytesRef:term];
        }
      }
      else {
        status = JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, END);
      }
    }
    else {
      status = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(currentSubs_), i)))->terms_)) seekCeilWithOrgApacheLuceneUtilBytesRef:term];
    }
    if (status == JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND)) {
      IOSObjectArray_Set(nil_chk(top_), numTop_++, IOSObjectArray_Get(currentSubs_, i));
      JreStrongAssign(&current_, JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) term]));
      [queue_ addWithId:IOSObjectArray_Get(currentSubs_, i)];
    }
    else {
      if (status == JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, NOT_FOUND)) {
        JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->terms_)) term]);
        JreAssert(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_ != nil, @"org/apache/lucene/index/MultiTermsEnum.java:229 condition failed: assert currentSubs[i].current != null;");
        [queue_ addWithId:IOSObjectArray_Get(currentSubs_, i)];
      }
      else {
        JreAssert(status == JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, END), @"org/apache/lucene/index/MultiTermsEnum.java:232 condition failed: assert status == SeekStatus.END;");
        JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(currentSubs_, i)))->current_, nil);
      }
    }
  }
  if (numTop_ > 0) {
    return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND);
  }
  else if ([queue_ size] > 0) {
    OrgApacheLuceneIndexMultiTermsEnum_pullTop(self);
    return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, NOT_FOUND);
  }
  else {
    return JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, END);
  }
}

- (void)seekExactWithLong:(jlong)ord {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jlong)ord {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)pullTop {
  OrgApacheLuceneIndexMultiTermsEnum_pullTop(self);
}

- (void)pushTop {
  OrgApacheLuceneIndexMultiTermsEnum_pushTop(self);
}

- (OrgApacheLuceneUtilBytesRef *)next {
  if (lastSeekExact_) {
    OrgApacheLuceneIndexTermsEnum_SeekStatus *status = [self seekCeilWithOrgApacheLuceneUtilBytesRef:current_];
    JreAssert(status == JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND), @"org/apache/lucene/index/MultiTermsEnum.java:295 condition failed: assert status == SeekStatus.FOUND;");
    lastSeekExact_ = false;
  }
  JreStrongAssign(&lastSeek_, nil);
  OrgApacheLuceneIndexMultiTermsEnum_pushTop(self);
  if ([((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(queue_)) size] > 0) {
    OrgApacheLuceneIndexMultiTermsEnum_pullTop(self);
  }
  else {
    JreStrongAssign(&current_, nil);
  }
  return current_;
}

- (jint)docFreq {
  jint sum = 0;
  for (jint i = 0; i < numTop_; i++) {
    sum += [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(top_), i)))->terms_)) docFreq];
  }
  return sum;
}

- (jlong)totalTermFreq {
  jlong sum = 0;
  for (jint i = 0; i < numTop_; i++) {
    jlong v = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(top_), i)))->terms_)) totalTermFreq];
    if (v == -1) {
      return v;
    }
    sum += v;
  }
  return sum;
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags {
  OrgApacheLuceneIndexMultiPostingsEnum *docsEnum;
  if (reuse != nil && [reuse isKindOfClass:[OrgApacheLuceneIndexMultiPostingsEnum class]]) {
    docsEnum = (OrgApacheLuceneIndexMultiPostingsEnum *) cast_chk(reuse, [OrgApacheLuceneIndexMultiPostingsEnum class]);
    if (![docsEnum canReuseWithOrgApacheLuceneIndexMultiTermsEnum:self]) {
      docsEnum = create_OrgApacheLuceneIndexMultiPostingsEnum_initWithOrgApacheLuceneIndexMultiTermsEnum_withInt_(self, ((IOSObjectArray *) nil_chk(subs_))->size_);
    }
  }
  else {
    docsEnum = create_OrgApacheLuceneIndexMultiPostingsEnum_initWithOrgApacheLuceneIndexMultiTermsEnum_withInt_(self, ((IOSObjectArray *) nil_chk(subs_))->size_);
  }
  jint upto = 0;
  OrgApacheLuceneUtilArrayUtil_timSortWithNSObjectArray_withInt_withInt_withJavaUtilComparator_(top_, 0, numTop_, OrgApacheLuceneIndexMultiTermsEnum_INDEX_COMPARATOR);
  for (jint i = 0; i < numTop_; i++) {
    OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *entry_ = IOSObjectArray_Get(nil_chk(top_), i);
    JreAssert(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(entry_))->index_ < ((IOSObjectArray *) nil_chk(docsEnum->subPostingsEnums_))->size_, JreStrcat("I$I$I", entry_->index_, @" vs ", docsEnum->subPostingsEnums_->size_, @"; ", ((IOSObjectArray *) nil_chk(subs_))->size_));
    OrgApacheLuceneIndexPostingsEnum *subPostingsEnum = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(entry_->terms_)) postingsWithOrgApacheLuceneIndexPostingsEnum:IOSObjectArray_Get(docsEnum->subPostingsEnums_, entry_->index_) withInt:flags];
    JreAssert(subPostingsEnum != nil, @"org/apache/lucene/index/MultiTermsEnum.java:360 condition failed: assert subPostingsEnum != null;");
    IOSObjectArray_Set(docsEnum->subPostingsEnums_, entry_->index_, subPostingsEnum);
    JreStrongAssign(&((OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(subDocs_), upto)))->postingsEnum_, subPostingsEnum);
    JreStrongAssign(&((OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice *) nil_chk(IOSObjectArray_Get(subDocs_, upto)))->slice_, entry_->subSlice_);
    upto++;
  }
  return [docsEnum resetWithOrgApacheLuceneIndexMultiPostingsEnum_EnumWithSliceArray:subDocs_ withInt:upto];
}

- (NSString *)description {
  return JreStrcat("$$C", @"MultiTermsEnum(", JavaUtilArrays_toStringWithNSObjectArray_(subs_), ')');
}

- (void)dealloc {
  RELEASE_(queue_);
  RELEASE_(subs_);
  RELEASE_(currentSubs_);
  RELEASE_(top_);
  RELEASE_(subDocs_);
  RELEASE_(lastSeek_);
  RELEASE_(lastSeekScratch_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum_SeekStatus;", 0x1, 6, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x1, 8, 9, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getMatchCount);
  methods[1].selector = @selector(getMatchArray);
  methods[2].selector = @selector(initWithOrgApacheLuceneIndexReaderSliceArray:);
  methods[3].selector = @selector(term);
  methods[4].selector = @selector(resetWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndexArray:);
  methods[5].selector = @selector(seekExactWithOrgApacheLuceneUtilBytesRef:);
  methods[6].selector = @selector(seekCeilWithOrgApacheLuceneUtilBytesRef:);
  methods[7].selector = @selector(seekExactWithLong:);
  methods[8].selector = @selector(ord);
  methods[9].selector = @selector(pullTop);
  methods[10].selector = @selector(pushTop);
  methods[11].selector = @selector(next);
  methods[12].selector = @selector(docFreq);
  methods[13].selector = @selector(totalTermFreq);
  methods[14].selector = @selector(postingsWithOrgApacheLuceneIndexPostingsEnum:withInt:);
  methods[15].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INDEX_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1a, -1, 11, 12, -1 },
    { "queue_", "LOrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "subs_", "[LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentSubs_", "[LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "top_", "[LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "subDocs_", "[LOrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lastSeek_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastSeekExact_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastSeekScratch_", "LOrgApacheLuceneUtilBytesRefBuilder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numSubs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "current_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LOrgApacheLuceneIndexReaderSlice;", "reset", "[LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex;", "LJavaIoIOException;", "seekExact", "LOrgApacheLuceneUtilBytesRef;", "seekCeil", "J", "postings", "LOrgApacheLuceneIndexPostingsEnum;I", "toString", &OrgApacheLuceneIndexMultiTermsEnum_INDEX_COMPARATOR, "Ljava/util/Comparator<Lorg/apache/lucene/index/MultiTermsEnum$TermsEnumWithSlice;>;", "LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex;LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;LOrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum = { "MultiTermsEnum", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x11, 16, 12, -1, 13, -1, -1, -1 };
  return &_OrgApacheLuceneIndexMultiTermsEnum;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexMultiTermsEnum class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexMultiTermsEnum_INDEX_COMPARATOR, new_OrgApacheLuceneIndexMultiTermsEnum_1_init());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexMultiTermsEnum)
  }
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_initWithOrgApacheLuceneIndexReaderSliceArray_(OrgApacheLuceneIndexMultiTermsEnum *self, IOSObjectArray *slices) {
  OrgApacheLuceneIndexTermsEnum_init(self);
  JreStrongAssignAndConsume(&self->lastSeekScratch_, new_OrgApacheLuceneUtilBytesRefBuilder_init());
  JreStrongAssignAndConsume(&self->queue_, new_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(((IOSObjectArray *) nil_chk(slices))->size_));
  JreStrongAssignAndConsume(&self->top_, [IOSObjectArray newArrayWithLength:slices->size_ type:OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_class_()]);
  JreStrongAssignAndConsume(&self->subs_, [IOSObjectArray newArrayWithLength:slices->size_ type:OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_class_()]);
  JreStrongAssignAndConsume(&self->subDocs_, [IOSObjectArray newArrayWithLength:slices->size_ type:OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice_class_()]);
  for (jint i = 0; i < slices->size_; i++) {
    IOSObjectArray_SetAndConsume(self->subs_, i, new_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(i, IOSObjectArray_Get(slices, i)));
    IOSObjectArray_SetAndConsume(self->subDocs_, i, new_OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice_init());
    JreStrongAssign(&((OrgApacheLuceneIndexMultiPostingsEnum_EnumWithSlice *) nil_chk(IOSObjectArray_Get(self->subDocs_, i)))->slice_, IOSObjectArray_Get(slices, i));
  }
  JreStrongAssignAndConsume(&self->currentSubs_, [IOSObjectArray newArrayWithLength:slices->size_ type:OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_class_()]);
}

OrgApacheLuceneIndexMultiTermsEnum *new_OrgApacheLuceneIndexMultiTermsEnum_initWithOrgApacheLuceneIndexReaderSliceArray_(IOSObjectArray *slices) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiTermsEnum, initWithOrgApacheLuceneIndexReaderSliceArray_, slices)
}

OrgApacheLuceneIndexMultiTermsEnum *create_OrgApacheLuceneIndexMultiTermsEnum_initWithOrgApacheLuceneIndexReaderSliceArray_(IOSObjectArray *slices) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiTermsEnum, initWithOrgApacheLuceneIndexReaderSliceArray_, slices)
}

void OrgApacheLuceneIndexMultiTermsEnum_pullTop(OrgApacheLuceneIndexMultiTermsEnum *self) {
  JreAssert(self->numTop_ == 0, @"org/apache/lucene/index/MultiTermsEnum.java:266 condition failed: assert numTop == 0;");
  self->numTop_ = [((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(self->queue_)) fillTopWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSliceArray:self->top_];
  JreStrongAssign(&self->current_, ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(nil_chk(self->top_), 0)))->current_);
}

void OrgApacheLuceneIndexMultiTermsEnum_pushTop(OrgApacheLuceneIndexMultiTermsEnum *self) {
  for (jint i = 0; i < self->numTop_; i++) {
    OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *top = JreRetainedLocalValue([((OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *) nil_chk(self->queue_)) top]);
    JreStrongAssign(&((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(top))->current_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(top->terms_)) next]);
    if (top->current_ == nil) {
      [self->queue_ pop];
    }
    else {
      [self->queue_ updateTop];
    }
  }
  self->numTop_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiTermsEnum)

@implementation OrgApacheLuceneIndexMultiTermsEnum_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexMultiTermsEnum_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)o1
               withId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)o2 {
  return ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(o1))->index_ - ((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(o2))->index_;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;", "LOrgApacheLuceneIndexMultiTermsEnum;", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/apache/lucene/index/MultiTermsEnum$TermsEnumWithSlice;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum_1 = { "", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_OrgApacheLuceneIndexMultiTermsEnum_1;
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_1_init(OrgApacheLuceneIndexMultiTermsEnum_1 *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexMultiTermsEnum_1 *new_OrgApacheLuceneIndexMultiTermsEnum_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiTermsEnum_1, init)
}

OrgApacheLuceneIndexMultiTermsEnum_1 *create_OrgApacheLuceneIndexMultiTermsEnum_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiTermsEnum_1, init)
}

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex)

IOSObjectArray *OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_EMPTY_ARRAY;

@implementation OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex

+ (IOSObjectArray *)EMPTY_ARRAY {
  return OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_EMPTY_ARRAY;
}

- (instancetype)initWithOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum
                                              withInt:(jint)subIndex {
  OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_initWithOrgApacheLuceneIndexTermsEnum_withInt_(self, termsEnum, subIndex);
  return self;
}

- (void)dealloc {
  RELEASE_(termsEnum_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexTermsEnum:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY_ARRAY", "[LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex;", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "subIndex_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "termsEnum_", "LOrgApacheLuceneIndexTermsEnum;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexTermsEnum;I", &OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_EMPTY_ARRAY, "LOrgApacheLuceneIndexMultiTermsEnum;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex = { "TermsEnumIndex", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8, 1, 3, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_EMPTY_ARRAY, [IOSObjectArray newArrayWithLength:0 type:OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex)
  }
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_initWithOrgApacheLuceneIndexTermsEnum_withInt_(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *self, OrgApacheLuceneIndexTermsEnum *termsEnum, jint subIndex) {
  NSObject_init(self);
  JreStrongAssign(&self->termsEnum_, termsEnum);
  self->subIndex_ = subIndex;
}

OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *new_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_initWithOrgApacheLuceneIndexTermsEnum_withInt_(OrgApacheLuceneIndexTermsEnum *termsEnum, jint subIndex) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex, initWithOrgApacheLuceneIndexTermsEnum_withInt_, termsEnum, subIndex)
}

OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex *create_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex_initWithOrgApacheLuceneIndexTermsEnum_withInt_(OrgApacheLuceneIndexTermsEnum *termsEnum, jint subIndex) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex, initWithOrgApacheLuceneIndexTermsEnum_withInt_, termsEnum, subIndex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumIndex)

@implementation OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice

- (instancetype)initWithInt:(jint)index
withOrgApacheLuceneIndexReaderSlice:(OrgApacheLuceneIndexReaderSlice *)subSlice {
  OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(self, index, subSlice);
  return self;
}

- (void)resetWithOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)terms
               withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  JreStrongAssign(&self->terms_, terms);
  JreStrongAssign(&current_, term);
}

- (NSString *)description {
  return JreStrcat("$C@", [((OrgApacheLuceneIndexReaderSlice *) nil_chk(subSlice_)) description], ':', terms_);
}

- (void)dealloc {
  RELEASE_(subSlice_);
  RELEASE_(terms_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgApacheLuceneIndexReaderSlice:);
  methods[1].selector = @selector(resetWithOrgApacheLuceneIndexTermsEnum:withOrgApacheLuceneUtilBytesRef:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subSlice_", "LOrgApacheLuceneIndexReaderSlice;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "terms_", "LOrgApacheLuceneIndexTermsEnum;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "current_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgApacheLuceneIndexReaderSlice;", "reset", "LOrgApacheLuceneIndexTermsEnum;LOrgApacheLuceneUtilBytesRef;", "toString", "LOrgApacheLuceneIndexMultiTermsEnum;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice = { "TermsEnumWithSlice", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x18, 3, 4, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *self, jint index, OrgApacheLuceneIndexReaderSlice *subSlice) {
  NSObject_init(self);
  JreStrongAssign(&self->subSlice_, subSlice);
  self->index_ = index;
  JreAssert(((OrgApacheLuceneIndexReaderSlice *) nil_chk(subSlice))->length_ >= 0, JreStrcat("$I", @"length=", subSlice->length_));
}

OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *new_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(jint index, OrgApacheLuceneIndexReaderSlice *subSlice) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice, initWithInt_withOrgApacheLuceneIndexReaderSlice_, index, subSlice)
}

OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *create_OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice_initWithInt_withOrgApacheLuceneIndexReaderSlice_(jint index, OrgApacheLuceneIndexReaderSlice *subSlice) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice, initWithInt_withOrgApacheLuceneIndexReaderSlice_, index, subSlice)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice)

@implementation OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(self, size);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)termsA
                    withId:(OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)termsB {
  return [((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(termsA))->current_)) compareToWithId:((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(termsB))->current_] < 0;
}

- (jint)fillTopWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSliceArray:(IOSObjectArray *)tops {
  jint size = [self size];
  if (size == 0) {
    return 0;
  }
  IOSObjectArray_Set(nil_chk(tops), 0, [self top]);
  jint numTop = 1;
  *IOSIntArray_GetRef(nil_chk(stack_), 0) = 1;
  jint stackLen = 1;
  while (stackLen != 0) {
    jint index = IOSIntArray_Get(stack_, --stackLen);
    jint leftChild = JreLShift32(index, 1);
    for (jint child = leftChild, end = JavaLangMath_minWithInt_withInt_(size, leftChild + 1); child <= end; ++child) {
      OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *te = OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_getWithInt_(self, child);
      if ([((OrgApacheLuceneUtilBytesRef *) nil_chk(((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(te))->current_)) isEqual:((OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) nil_chk(IOSObjectArray_Get(tops, 0)))->current_]) {
        IOSObjectArray_Set(tops, numTop++, te);
        *IOSIntArray_GetRef(stack_, stackLen++) = child;
      }
    }
  }
  return numTop;
}

- (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *)getWithInt:(jint)i {
  return OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_getWithInt_(self, i);
}

- (void)dealloc {
  RELEASE_(stack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;", 0x2, 5, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(lessThanWithId:withId:);
  methods[2].selector = @selector(fillTopWithOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSliceArray:);
  methods[3].selector = @selector(getWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stack_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "lessThan", "LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;", "fillTop", "[LOrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice;", "get", "LOrgApacheLuceneIndexMultiTermsEnum;", "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/index/MultiTermsEnum$TermsEnumWithSlice;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue = { "TermMergeQueue", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1a, 4, 1, 6, -1, -1, 7, -1 };
  return &_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue;
}

@end

void OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *self, jint size) {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_(self, size);
  JreStrongAssignAndConsume(&self->stack_, [IOSIntArray newArrayWithLength:size]);
}

OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *new_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue, initWithInt_, size)
}

OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *create_OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue, initWithInt_, size)
}

OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue_getWithInt_(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue *self, jint i) {
  return (OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice *) cast_chk(IOSObjectArray_Get(nil_chk([self getHeapArray]), i), [OrgApacheLuceneIndexMultiTermsEnum_TermsEnumWithSlice class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiTermsEnum_TermMergeQueue)
