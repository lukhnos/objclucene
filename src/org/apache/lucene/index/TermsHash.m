//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/TermsHash.java
//

#include "J2ObjC_source.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/TermsHash.h"
#include "org/apache/lucene/index/TermsHashPerField.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/util/IntBlockPool.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/TermsHash must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneIndexTermsHash

- (instancetype)initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)docWriter
                                                                       withBoolean:(jboolean)trackAllocations
                                                 withOrgApacheLuceneIndexTermsHash:(OrgApacheLuceneIndexTermsHash *)nextTermsHash {
  OrgApacheLuceneIndexTermsHash_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withBoolean_withOrgApacheLuceneIndexTermsHash_(self, docWriter, trackAllocations, nextTermsHash);
  return self;
}

- (void)abort {
  @try {
    [self reset];
  }
  @finally {
    if (nextTermsHash_ != nil) {
      [nextTermsHash_ abort];
    }
  }
}

- (void)reset {
  [((OrgApacheLuceneUtilIntBlockPool *) nil_chk(intPool_)) resetWithBoolean:false withBoolean:false];
  [((OrgApacheLuceneUtilByteBlockPool *) nil_chk(bytePool_)) resetWithBoolean:false withBoolean:false];
}

- (void)flushWithJavaUtilMap:(id<JavaUtilMap>)fieldsToFlush
withOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  if (nextTermsHash_ != nil) {
    id<JavaUtilMap> nextChildFields = create_JavaUtilHashMap_init();
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(fieldsToFlush)) entrySet])) {
      [nextChildFields putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:((OrgApacheLuceneIndexTermsHashPerField *) nil_chk([entry_ getValue]))->nextPerField_];
    }
    [nextTermsHash_ flushWithJavaUtilMap:nextChildFields withOrgApacheLuceneIndexSegmentWriteState:state];
  }
}

- (OrgApacheLuceneIndexTermsHashPerField *)addFieldWithOrgApacheLuceneIndexFieldInvertState:(OrgApacheLuceneIndexFieldInvertState *)fieldInvertState
                                                          withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)finishDocument {
  if (nextTermsHash_ != nil) {
    [nextTermsHash_ finishDocument];
  }
}

- (void)startDocument {
  if (nextTermsHash_ != nil) {
    [nextTermsHash_ startDocument];
  }
}

- (void)dealloc {
  RELEASE_(nextTermsHash_);
  RELEASE_(intPool_);
  RELEASE_(bytePool_);
  RELEASE_(termBytePool_);
  RELEASE_(bytesUsed_);
  RELEASE_(docState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, 3, 4, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsHashPerField;", 0x400, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread:withBoolean:withOrgApacheLuceneIndexTermsHash:);
  methods[1].selector = @selector(abort);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(flushWithJavaUtilMap:withOrgApacheLuceneIndexSegmentWriteState:);
  methods[4].selector = @selector(addFieldWithOrgApacheLuceneIndexFieldInvertState:withOrgApacheLuceneIndexFieldInfo:);
  methods[5].selector = @selector(finishDocument);
  methods[6].selector = @selector(startDocument);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nextTermsHash_", "LOrgApacheLuceneIndexTermsHash;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "intPool_", "LOrgApacheLuceneUtilIntBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bytePool_", "LOrgApacheLuceneUtilByteBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "termBytePool_", "LOrgApacheLuceneUtilByteBlockPool;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bytesUsed_", "LOrgApacheLuceneUtilCounter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docState_", "LOrgApacheLuceneIndexDocumentsWriterPerThread_DocState;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "trackAllocations_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocumentsWriterPerThread;ZLOrgApacheLuceneIndexTermsHash;", "flush", "LJavaUtilMap;LOrgApacheLuceneIndexSegmentWriteState;", "LJavaIoIOException;", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/index/TermsHashPerField;>;Lorg/apache/lucene/index/SegmentWriteState;)V", "addField", "LOrgApacheLuceneIndexFieldInvertState;LOrgApacheLuceneIndexFieldInfo;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermsHash = { "TermsHash", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x400, 7, 7, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermsHash;
}

@end

void OrgApacheLuceneIndexTermsHash_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withBoolean_withOrgApacheLuceneIndexTermsHash_(OrgApacheLuceneIndexTermsHash *self, OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter, jboolean trackAllocations, OrgApacheLuceneIndexTermsHash *nextTermsHash) {
  NSObject_init(self);
  JreStrongAssign(&self->docState_, ((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(docWriter))->docState_);
  self->trackAllocations_ = trackAllocations;
  JreStrongAssign(&self->nextTermsHash_, nextTermsHash);
  JreStrongAssign(&self->bytesUsed_, trackAllocations ? docWriter->bytesUsed_ : OrgApacheLuceneUtilCounter_newCounter());
  JreStrongAssignAndConsume(&self->intPool_, new_OrgApacheLuceneUtilIntBlockPool_initWithOrgApacheLuceneUtilIntBlockPool_Allocator_(docWriter->intBlockAllocator_));
  JreStrongAssignAndConsume(&self->bytePool_, new_OrgApacheLuceneUtilByteBlockPool_initWithOrgApacheLuceneUtilByteBlockPool_Allocator_(docWriter->byteBlockAllocator_));
  if (nextTermsHash != nil) {
    JreStrongAssign(&self->termBytePool_, self->bytePool_);
    JreStrongAssign(&nextTermsHash->termBytePool_, self->bytePool_);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermsHash)
