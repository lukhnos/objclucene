//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/CheckIndex.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/PrintStream.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Package.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/NumberFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Deque.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/codecs/NormsProducer.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/document/DocumentStoredFieldVisitor.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/CheckIndex.h"
#include "org/apache/lucene/index/CodecReader.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexNotFoundException.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/RandomAccessOrds.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/FSDirectory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/Lock.h"
#include "org/apache/lucene/util/Accountables.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefBuilder.h"
#include "org/apache/lucene/util/CommandLineUtil.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/LongBitSet.h"
#include "org/apache/lucene/util/StringHelper.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/util/automaton/Automata.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/lukhnos/portmobile/file/Path.h"
#include "org/lukhnos/portmobile/file/Paths.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/CheckIndex must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexCheckIndex () {
 @public
  JavaIoPrintStream *infoStream_;
  OrgApacheLuceneStoreDirectory *dir_;
  OrgApacheLuceneStoreLock *writeLock_;
  volatile_jboolean closed_;
  jboolean crossCheckTermVectors_;
  jboolean failFast_;
  jboolean verbose_;
  jboolean checksumsOnly_;
}

- (void)ensureOpen;

+ (void)msgWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                    withNSString:(NSString *)msg;

/*!
 @brief Visits all terms in the range minTerm (inclusive) to maxTerm (exclusive), marking all doc IDs encountered into allDocsSeen, and
   returning the total number of terms visited.
 */
+ (jlong)getDocsFromTermRangeWithNSString:(NSString *)field
                                  withInt:(jint)maxDoc
        withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum
       withOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)docsSeen
          withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
          withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm
                              withBoolean:(jboolean)isIntersect;

/*!
 @brief Test Terms.intersect on this range, and validates that it returns the same doc ids as using non-intersect TermsEnum.Returns true if
   any fake terms were seen.
 */
+ (jboolean)checkSingleTermRangeWithNSString:(NSString *)field
                                     withInt:(jint)maxDoc
               withOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
             withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
             withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm
          withOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)normalDocs
          withOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)intersectDocs;

/*!
 @brief Make an effort to visit "fake" (e.g.auto-prefix) terms.
 We do this by running term range intersections across an initially wide
   interval of terms, at different boundaries, and then gradually decrease the interval.  This is not guaranteed to hit all non-real
   terms (doing that in general is non-trivial), but it should hit many of them, and validate their postings against the postings for the
   real terms.
 */
+ (void)checkTermRangesWithNSString:(NSString *)field
                            withInt:(jint)maxDoc
      withOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                           withLong:(jlong)numTerms;

/*!
 @brief checks Fields api is consistent with itself.
 searcher is optional, to verify with queries. Can be null.
 */
+ (OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *)checkFieldsWithOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)fields
                                                                         withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)liveDocs
                                                                                             withInt:(jint)maxDoc
                                                                  withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos
                                                                                         withBoolean:(jboolean)doPrint
                                                                                         withBoolean:(jboolean)isVectors
                                                                               withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                                                                                         withBoolean:(jboolean)verbose;

+ (void)checkBinaryDocValuesWithNSString:(NSString *)fieldName
                                 withInt:(jint)maxDoc
 withOrgApacheLuceneIndexBinaryDocValues:(OrgApacheLuceneIndexBinaryDocValues *)dv
             withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField;

+ (void)checkSortedDocValuesWithNSString:(NSString *)fieldName
                                 withInt:(jint)maxDoc
 withOrgApacheLuceneIndexSortedDocValues:(OrgApacheLuceneIndexSortedDocValues *)dv
             withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField;

+ (void)checkSortedSetDocValuesWithNSString:(NSString *)fieldName
                                    withInt:(jint)maxDoc
 withOrgApacheLuceneIndexSortedSetDocValues:(OrgApacheLuceneIndexSortedSetDocValues *)dv
                withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField;

+ (void)checkSortedNumericDocValuesWithNSString:(NSString *)fieldName
                                        withInt:(jint)maxDoc
 withOrgApacheLuceneIndexSortedNumericDocValues:(OrgApacheLuceneIndexSortedNumericDocValues *)ndv
                    withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField;

+ (void)checkNumericDocValuesWithNSString:(NSString *)fieldName
                                  withInt:(jint)maxDoc
 withOrgApacheLuceneIndexNumericDocValues:(OrgApacheLuceneIndexNumericDocValues *)ndv
              withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField;

+ (void)checkDocValuesWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fi
             withOrgApacheLuceneCodecsDocValuesProducer:(OrgApacheLuceneCodecsDocValuesProducer *)dvReader
                                                withInt:(jint)maxDoc
                                  withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
withOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus:(OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *)status;

+ (jboolean)testAsserts;

+ (jboolean)assertsOn;

+ (jint)doMainWithNSStringArray:(IOSObjectArray *)args;

+ (jdouble)nsToSecWithLong:(jlong)ns;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexCheckIndex, infoStream_, JavaIoPrintStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexCheckIndex, dir_, OrgApacheLuceneStoreDirectory *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexCheckIndex, writeLock_, OrgApacheLuceneStoreLock *)

inline jboolean OrgApacheLuceneIndexCheckIndex_get_assertsOn_(void);
inline jboolean OrgApacheLuceneIndexCheckIndex_set_assertsOn_(jboolean value);
inline jboolean *OrgApacheLuceneIndexCheckIndex_getRef_assertsOn_(void);
static jboolean OrgApacheLuceneIndexCheckIndex_assertsOn_;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgApacheLuceneIndexCheckIndex, assertsOn_, jboolean)

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_ensureOpen(OrgApacheLuceneIndexCheckIndex *self);

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(JavaIoPrintStream *outArg, NSString *msg);

__attribute__((unused)) static jlong OrgApacheLuceneIndexCheckIndex_getDocsFromTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_(NSString *field, jint maxDoc, OrgApacheLuceneIndexTermsEnum *termsEnum, OrgApacheLuceneUtilFixedBitSet *docsSeen, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm, jboolean isIntersect);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexCheckIndex_checkSingleTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTerms_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(NSString *field, jint maxDoc, OrgApacheLuceneIndexTerms *terms, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm, OrgApacheLuceneUtilFixedBitSet *normalDocs, OrgApacheLuceneUtilFixedBitSet *intersectDocs);

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_checkTermRangesWithNSString_withInt_withOrgApacheLuceneIndexTerms_withLong_(NSString *field, jint maxDoc, OrgApacheLuceneIndexTerms *terms, jlong numTerms);

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *OrgApacheLuceneIndexCheckIndex_checkFieldsWithOrgApacheLuceneIndexFields_withOrgApacheLuceneUtilBits_withInt_withOrgApacheLuceneIndexFieldInfos_withBoolean_withBoolean_withJavaIoPrintStream_withBoolean_(OrgApacheLuceneIndexFields *fields, id<OrgApacheLuceneUtilBits> liveDocs, jint maxDoc, OrgApacheLuceneIndexFieldInfos *fieldInfos, jboolean doPrint, jboolean isVectors, JavaIoPrintStream *infoStream, jboolean verbose);

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_checkBinaryDocValuesWithNSString_withInt_withOrgApacheLuceneIndexBinaryDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexBinaryDocValues *dv, id<OrgApacheLuceneUtilBits> docsWithField);

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_checkSortedDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexSortedDocValues *dv, id<OrgApacheLuceneUtilBits> docsWithField);

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_checkSortedSetDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedSetDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexSortedSetDocValues *dv, id<OrgApacheLuceneUtilBits> docsWithField);

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_checkSortedNumericDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedNumericDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexSortedNumericDocValues *ndv, id<OrgApacheLuceneUtilBits> docsWithField);

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_checkNumericDocValuesWithNSString_withInt_withOrgApacheLuceneIndexNumericDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexNumericDocValues *ndv, id<OrgApacheLuceneUtilBits> docsWithField);

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_checkDocValuesWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsDocValuesProducer_withInt_withJavaIoPrintStream_withOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus_(OrgApacheLuceneIndexFieldInfo *fi, OrgApacheLuceneCodecsDocValuesProducer *dvReader, jint maxDoc, JavaIoPrintStream *infoStream, OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *status);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexCheckIndex_testAsserts(void);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexCheckIndex_assertsOn(void);

__attribute__((unused)) static jint OrgApacheLuceneIndexCheckIndex_doMainWithNSStringArray_(IOSObjectArray *args);

__attribute__((unused)) static jdouble OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(jlong ns);

@interface OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus_init(OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *self);

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *new_OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *create_OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus_init(void);

@interface OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus_init(OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *self);

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *new_OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *create_OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus_init(void);

@interface OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init(OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *self);

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *new_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *create_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init(void);

@implementation OrgApacheLuceneIndexCheckIndex

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(self, dir);
  return self;
}

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                         withOrgApacheLuceneStoreLock:(OrgApacheLuceneStoreLock *)writeLock {
  OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreLock_(self, dir, writeLock);
  return self;
}

- (void)ensureOpen {
  OrgApacheLuceneIndexCheckIndex_ensureOpen(self);
}

- (void)close {
  JreAssignVolatileBoolean(&closed_, true);
  OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ writeLock_ } count:1 type:JavaIoCloseable_class_()]);
}

- (void)setCrossCheckTermVectorsWithBoolean:(jboolean)v {
  crossCheckTermVectors_ = v;
}

- (jboolean)getCrossCheckTermVectors {
  return crossCheckTermVectors_;
}

- (void)setFailFastWithBoolean:(jboolean)v {
  failFast_ = v;
}

- (jboolean)getFailFast {
  return failFast_;
}

- (jboolean)getChecksumsOnly {
  return checksumsOnly_;
}

- (void)setChecksumsOnlyWithBoolean:(jboolean)v {
  checksumsOnly_ = v;
}

- (void)setInfoStreamWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                               withBoolean:(jboolean)verbose {
  JreStrongAssign(&infoStream_, outArg);
  self->verbose_ = verbose;
}

- (void)setInfoStreamWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [self setInfoStreamWithJavaIoPrintStream:outArg withBoolean:false];
}

+ (void)msgWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                    withNSString:(NSString *)msg {
  OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(outArg, msg);
}

- (OrgApacheLuceneIndexCheckIndex_Status *)checkIndex {
  return [self checkIndexWithJavaUtilList:nil];
}

- (OrgApacheLuceneIndexCheckIndex_Status *)checkIndexWithJavaUtilList:(id<JavaUtilList>)onlySegments {
  OrgApacheLuceneIndexCheckIndex_ensureOpen(self);
  jlong startNS = JavaLangSystem_nanoTime();
  JavaTextNumberFormat *nf = JavaTextNumberFormat_getInstanceWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, ROOT));
  OrgApacheLuceneIndexSegmentInfos *sis = nil;
  OrgApacheLuceneIndexCheckIndex_Status *result = create_OrgApacheLuceneIndexCheckIndex_Status_init();
  JreStrongAssign(&result->dir_, dir_);
  IOSObjectArray *files = [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) listAll];
  NSString *lastSegmentsFile = OrgApacheLuceneIndexSegmentInfos_getLastCommitSegmentsFileNameWithNSStringArray_(files);
  if (lastSegmentsFile == nil) {
    @throw create_OrgApacheLuceneIndexIndexNotFoundException_initWithNSString_(JreStrcat("$@$$", @"no segments* file found in ", dir_, @": files: ", JavaUtilArrays_toStringWithNSObjectArray_(files)));
  }
  @try {
    sis = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(dir_, lastSegmentsFile);
  }
  @catch (JavaLangThrowable *t) {
    if (failFast_) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"ERROR: could not read any segments file in directory");
    result->missingSegments_ = true;
    if (infoStream_ != nil) [t printStackTraceWithJavaIoPrintStream:infoStream_];
    return result;
  }
  OrgApacheLuceneUtilVersion *oldest = nil;
  OrgApacheLuceneUtilVersion *newest = nil;
  NSString *oldSegs = nil;
  for (OrgApacheLuceneIndexSegmentCommitInfo * __strong si in nil_chk(sis)) {
    OrgApacheLuceneUtilVersion *version_ = JreRetainedLocalValue([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(si))->info_)) getVersion]);
    if (version_ == nil) {
      oldSegs = @"pre-3.1";
    }
    else {
      if (oldest == nil || [version_ onOrAfterWithOrgApacheLuceneUtilVersion:oldest] == false) {
        oldest = version_;
      }
      if (newest == nil || [version_ onOrAfterWithOrgApacheLuceneUtilVersion:newest]) {
        newest = version_;
      }
    }
  }
  jint numSegments = [sis size];
  NSString *segmentsFileName = [sis getSegmentsFileName];
  OrgApacheLuceneStoreIndexInput *input = nil;
  @try {
    input = [((OrgApacheLuceneStoreDirectory *) nil_chk(dir_)) openInputWithNSString:segmentsFileName withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READONCE)];
  }
  @catch (JavaLangThrowable *t) {
    if (failFast_) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"ERROR: could not open segments file in directory");
    if (infoStream_ != nil) [t printStackTraceWithJavaIoPrintStream:infoStream_];
    result->cantOpenSegments_ = true;
    return result;
  }
  @try {
    [((OrgApacheLuceneStoreIndexInput *) nil_chk(input)) readInt];
  }
  @catch (JavaLangThrowable *t) {
    if (failFast_) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"ERROR: could not read segment file version in directory");
    if (infoStream_ != nil) [t printStackTraceWithJavaIoPrintStream:infoStream_];
    result->missingSegmentVersion_ = true;
    return result;
  }
  @finally {
    if (input != nil) [input close];
  }
  NSString *sFormat = @"";
  jboolean skip = false;
  JreStrongAssign(&result->segmentsFileName_, segmentsFileName);
  result->numSegments_ = numSegments;
  JreStrongAssign(&result->userData_, [sis getUserData]);
  NSString *userDataString;
  if ([((id<JavaUtilMap>) nil_chk([sis getUserData])) size] > 0) {
    userDataString = JreStrcat("$@", @" userData=", [sis getUserData]);
  }
  else {
    userDataString = @"";
  }
  NSString *versionString = @"";
  if (oldSegs != nil) {
    if (newest != nil) {
      versionString = JreStrcat("$$$@C", @"versions=[", oldSegs, @" .. ", newest, ']');
    }
    else {
      versionString = JreStrcat("$$", @"version=", oldSegs);
    }
  }
  else if (newest != nil) {
    versionString = [((OrgApacheLuceneUtilVersion *) nil_chk(oldest)) isEqual:newest] ? (JreStrcat("$@", @"version=", oldest)) : (JreStrcat("$@$@C", @"versions=[", oldest, @" .. ", newest, ']'));
  }
  OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$$$IC$$$$$$", @"Segments file=", segmentsFileName, @" numSegments=", numSegments, ' ', versionString, @" id=", OrgApacheLuceneUtilStringHelper_idToStringWithByteArray_([sis getId]), @" format=", sFormat, userDataString));
  if (onlySegments != nil) {
    result->partial_ = true;
    if (infoStream_ != nil) {
      [infoStream_ printWithNSString:@"\nChecking only these segments:"];
      for (NSString * __strong s in onlySegments) {
        [((JavaIoPrintStream *) nil_chk(infoStream_)) printWithNSString:JreStrcat("C$", ' ', s)];
      }
    }
    [((id<JavaUtilList>) nil_chk(result->segmentsChecked_)) addAllWithJavaUtilCollection:onlySegments];
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @":");
  }
  if (skip) {
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting");
    result->toolOutOfDate_ = true;
    return result;
  }
  JreStrongAssign(&result->newSegments_, [sis java_clone]);
  [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) clear];
  result->maxSegmentName_ = -1;
  for (jint i = 0; i < numSegments; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [sis infoWithInt:i];
    jint segmentName = JavaLangInteger_parseIntWithNSString_withInt_([((NSString *) nil_chk(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_)) java_substring:1], JavaLangCharacter_MAX_RADIX);
    if (segmentName > result->maxSegmentName_) {
      result->maxSegmentName_ = segmentName;
    }
    if (onlySegments != nil && ![onlySegments containsWithId:info->info_->name_]) {
      continue;
    }
    OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus *segInfoStat = create_OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init();
    [((id<JavaUtilList>) nil_chk(result->segmentInfos_)) addWithId:segInfoStat];
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$I$I$$$I", @"  ", (1 + i), @" of ", numSegments, @": name=", info->info_->name_, @" maxDoc=", [info->info_ maxDoc]));
    JreStrongAssign(&segInfoStat->name_, info->info_->name_);
    segInfoStat->maxDoc_ = [info->info_ maxDoc];
    JreStrongAssign(&segInfoStat->version__, [info->info_ getVersion]);
    if ([info->info_ maxDoc] <= 0 && [((OrgApacheLuceneUtilVersion *) nil_chk(segInfoStat->version__)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadStatic(OrgApacheLuceneUtilVersion, LUCENE_4_5_0)]) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"illegal number of documents: maxDoc=", [info->info_ maxDoc]));
    }
    jint toLoseDocCount = [info->info_ maxDoc];
    OrgApacheLuceneIndexSegmentReader *reader = nil;
    @try {
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$@", @"    version=", segInfoStat->version__));
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$$", @"    id=", OrgApacheLuceneUtilStringHelper_idToStringWithByteArray_([info->info_ getId])));
      OrgApacheLuceneCodecsCodec *codec = [info->info_ getCodec];
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$@", @"    codec=", codec));
      JreStrongAssign(&segInfoStat->codec_, codec);
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$Z", @"    compound=", [info->info_ getUseCompoundFile]));
      segInfoStat->compound_ = [info->info_ getUseCompoundFile];
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$I", @"    numFiles=", [((id<JavaUtilCollection>) nil_chk([info files])) size]));
      segInfoStat->numFiles_ = [((id<JavaUtilCollection>) nil_chk([info files])) size];
      segInfoStat->sizeMB_ = [info sizeInBytes] / (1024. * 1024.);
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$$", @"    size (MB)=", [((JavaTextNumberFormat *) nil_chk(nf)) formatWithDouble:segInfoStat->sizeMB_]));
      id<JavaUtilMap> diagnostics = JreRetainedLocalValue([info->info_ getDiagnostics]);
      JreStrongAssign(&segInfoStat->diagnostics_, diagnostics);
      if ([((id<JavaUtilMap>) nil_chk(diagnostics)) size] > 0) {
        OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$@", @"    diagnostics = ", diagnostics));
      }
      if (![info hasDeletions]) {
        OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"    no deletions");
        segInfoStat->hasDeletions_ = false;
      }
      else {
        OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$JC", @"    has deletions [delGen=", [info getDelGen], ']'));
        segInfoStat->hasDeletions_ = true;
        segInfoStat->deletionsGen_ = [info getDelGen];
      }
      jlong startOpenReaderNS = JavaLangSystem_nanoTime();
      if (infoStream_ != nil) [infoStream_ printWithNSString:@"    test: open reader........."];
      reader = create_OrgApacheLuceneIndexSegmentReader_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneStoreIOContext_(info, JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT));
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startOpenReaderNS)) } count:1 type:NSObject_class_()]));
      segInfoStat->openReaderPassed_ = true;
      jlong startIntegrityNS = JavaLangSystem_nanoTime();
      if (infoStream_ != nil) [infoStream_ printWithNSString:@"    test: check integrity....."];
      [reader checkIntegrity];
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startIntegrityNS)) } count:1 type:NSObject_class_()]));
      if ([reader maxDoc] != [info->info_ maxDoc]) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"SegmentReader.maxDoc() ", [reader maxDoc], @" != SegmentInfo.maxDoc ", [info->info_ maxDoc]));
      }
      jint numDocs = [reader numDocs];
      toLoseDocCount = numDocs;
      if ([reader hasDeletions]) {
        if ([reader numDocs] != [info->info_ maxDoc] - [info getDelCount]) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"delete count mismatch: info=", ([info->info_ maxDoc] - [info getDelCount]), @" vs reader=", [reader numDocs]));
        }
        if (([info->info_ maxDoc] - [reader numDocs]) > [reader maxDoc]) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"too many deleted docs: maxDoc()=", [reader maxDoc], @" vs del count=", ([info->info_ maxDoc] - [reader numDocs])));
        }
        if ([info->info_ maxDoc] - [reader numDocs] != [info getDelCount]) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"delete count mismatch: info=", [info getDelCount], @" vs reader=", ([info->info_ maxDoc] - [reader numDocs])));
        }
      }
      else {
        if ([info getDelCount] != 0) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"delete count mismatch: info=", [info getDelCount], @" vs reader=", ([info->info_ maxDoc] - [reader numDocs])));
        }
      }
      if (checksumsOnly_ == false) {
        JreStrongAssign(&segInfoStat->liveDocStatus_, OrgApacheLuceneIndexCheckIndex_testLiveDocsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream_, failFast_));
        JreStrongAssign(&segInfoStat->fieldInfoStatus_, OrgApacheLuceneIndexCheckIndex_testFieldInfosWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream_, failFast_));
        JreStrongAssign(&segInfoStat->fieldNormStatus_, OrgApacheLuceneIndexCheckIndex_testFieldNormsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream_, failFast_));
        JreStrongAssign(&segInfoStat->termIndexStatus_, OrgApacheLuceneIndexCheckIndex_testPostingsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_withBoolean_(reader, infoStream_, verbose_, failFast_));
        JreStrongAssign(&segInfoStat->storedFieldStatus_, OrgApacheLuceneIndexCheckIndex_testStoredFieldsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream_, failFast_));
        JreStrongAssign(&segInfoStat->termVectorStatus_, OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_withBoolean_withBoolean_(reader, infoStream_, verbose_, crossCheckTermVectors_, failFast_));
        JreStrongAssign(&segInfoStat->docValuesStatus_, OrgApacheLuceneIndexCheckIndex_testDocValuesWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream_, failFast_));
        if (((OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *) nil_chk(segInfoStat->liveDocStatus_))->error_ != nil) {
          @throw create_JavaLangRuntimeException_initWithNSString_(@"Live docs test failed");
        }
        else if (((OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *) nil_chk(segInfoStat->fieldInfoStatus_))->error_ != nil) {
          @throw create_JavaLangRuntimeException_initWithNSString_(@"Field Info test failed");
        }
        else if (((OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *) nil_chk(segInfoStat->fieldNormStatus_))->error_ != nil) {
          @throw create_JavaLangRuntimeException_initWithNSString_(@"Field Norm test failed");
        }
        else if (((OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *) nil_chk(segInfoStat->termIndexStatus_))->error_ != nil) {
          @throw create_JavaLangRuntimeException_initWithNSString_(@"Term Index test failed");
        }
        else if (((OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *) nil_chk(segInfoStat->storedFieldStatus_))->error_ != nil) {
          @throw create_JavaLangRuntimeException_initWithNSString_(@"Stored Field test failed");
        }
        else if (((OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *) nil_chk(segInfoStat->termVectorStatus_))->error_ != nil) {
          @throw create_JavaLangRuntimeException_initWithNSString_(@"Term Vector test failed");
        }
        else if (((OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *) nil_chk(segInfoStat->docValuesStatus_))->error_ != nil) {
          @throw create_JavaLangRuntimeException_initWithNSString_(@"DocValues test failed");
        }
      }
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"");
      if (verbose_) {
        OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"detailed segment RAM usage: ");
        OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, OrgApacheLuceneUtilAccountables_toStringWithOrgApacheLuceneUtilAccountable_(reader));
      }
    }
    @catch (JavaLangThrowable *t) {
      if (failFast_) {
        OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(t);
      }
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"FAILED");
      NSString *comment;
      comment = @"exorciseIndex() would remove reference to this segment";
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$$$", @"    WARNING: ", comment, @"; full exception:"));
      if (infoStream_ != nil) [t printStackTraceWithJavaIoPrintStream:infoStream_];
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"");
      result->totLoseDocCount_ += toLoseDocCount;
      result->numBadSegments_++;
      continue;
    }
    @finally {
      if (reader != nil) [reader close];
    }
    [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) addWithOrgApacheLuceneIndexSegmentCommitInfo:[info java_clone]];
  }
  if (0 == result->numBadSegments_) {
    result->clean_ = true;
  }
  else OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$I$I$", @"WARNING: ", result->numBadSegments_, @" broken segments (containing ", result->totLoseDocCount_, @" documents) detected"));
  if (!(result->validCounter_ = (result->maxSegmentName_ < sis->counter_))) {
    result->clean_ = false;
    ((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_))->counter_ = result->maxSegmentName_ + 1;
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, JreStrcat("$I$I", @"ERROR: Next segment name counter ", sis->counter_, @" is not greater than max segment name ", result->maxSegmentName_));
  }
  if ([self getChecksumsOnly]) {
    jboolean old = false;
    jboolean ancient = false;
    for (OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus * __strong segment in nil_chk(result->segmentInfos_)) {
      old |= ![((OrgApacheLuceneUtilVersion *) nil_chk(((OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus *) nil_chk(segment))->version__)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadStatic(OrgApacheLuceneUtilVersion, LUCENE_5_0_0)];
      ancient |= ![((OrgApacheLuceneUtilVersion *) nil_chk(segment->version__)) onOrAfterWithOrgApacheLuceneUtilVersion:JreLoadStatic(OrgApacheLuceneUtilVersion, LUCENE_4_8_0)];
    }
    if (ancient) {
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"WARNING: Some segments are older than 4.8 and have no checksums. Run checkindex without -fast for full verification.");
    }
    else if (old) {
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"WARNING: Some segments are older than 5.0 and have no identifiers. Run checkindex without -fast for full verification.");
    }
  }
  if (result->clean_) {
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, @"No problems were detected with this index.\n");
  }
  OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream_, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"Took %.3f sec total.", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startNS)) } count:1 type:NSObject_class_()]));
  return result;
}

+ (OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *)testLiveDocsWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader
                                                                                   withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                                                                                             withBoolean:(jboolean)failFast {
  return OrgApacheLuceneIndexCheckIndex_testLiveDocsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream, failFast);
}

+ (OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *)testFieldInfosWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader
                                                                                       withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                                                                                                 withBoolean:(jboolean)failFast {
  return OrgApacheLuceneIndexCheckIndex_testFieldInfosWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream, failFast);
}

+ (OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *)testFieldNormsWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader
                                                                                       withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                                                                                                 withBoolean:(jboolean)failFast {
  return OrgApacheLuceneIndexCheckIndex_testFieldNormsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream, failFast);
}

+ (jlong)getDocsFromTermRangeWithNSString:(NSString *)field
                                  withInt:(jint)maxDoc
        withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum
       withOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)docsSeen
          withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
          withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm
                              withBoolean:(jboolean)isIntersect {
  return OrgApacheLuceneIndexCheckIndex_getDocsFromTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_(field, maxDoc, termsEnum, docsSeen, minTerm, maxTerm, isIntersect);
}

+ (jboolean)checkSingleTermRangeWithNSString:(NSString *)field
                                     withInt:(jint)maxDoc
               withOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
             withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)minTerm
             withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)maxTerm
          withOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)normalDocs
          withOrgApacheLuceneUtilFixedBitSet:(OrgApacheLuceneUtilFixedBitSet *)intersectDocs {
  return OrgApacheLuceneIndexCheckIndex_checkSingleTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTerms_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(field, maxDoc, terms, minTerm, maxTerm, normalDocs, intersectDocs);
}

+ (void)checkTermRangesWithNSString:(NSString *)field
                            withInt:(jint)maxDoc
      withOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                           withLong:(jlong)numTerms {
  OrgApacheLuceneIndexCheckIndex_checkTermRangesWithNSString_withInt_withOrgApacheLuceneIndexTerms_withLong_(field, maxDoc, terms, numTerms);
}

+ (OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *)checkFieldsWithOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)fields
                                                                         withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)liveDocs
                                                                                             withInt:(jint)maxDoc
                                                                  withOrgApacheLuceneIndexFieldInfos:(OrgApacheLuceneIndexFieldInfos *)fieldInfos
                                                                                         withBoolean:(jboolean)doPrint
                                                                                         withBoolean:(jboolean)isVectors
                                                                               withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                                                                                         withBoolean:(jboolean)verbose {
  return OrgApacheLuceneIndexCheckIndex_checkFieldsWithOrgApacheLuceneIndexFields_withOrgApacheLuceneUtilBits_withInt_withOrgApacheLuceneIndexFieldInfos_withBoolean_withBoolean_withJavaIoPrintStream_withBoolean_(fields, liveDocs, maxDoc, fieldInfos, doPrint, isVectors, infoStream, verbose);
}

+ (OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *)testPostingsWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader
                                                                                     withJavaIoPrintStream:(JavaIoPrintStream *)infoStream {
  return OrgApacheLuceneIndexCheckIndex_testPostingsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_(reader, infoStream);
}

+ (OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *)testPostingsWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader
                                                                                     withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                                                                                               withBoolean:(jboolean)verbose
                                                                                               withBoolean:(jboolean)failFast {
  return OrgApacheLuceneIndexCheckIndex_testPostingsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_withBoolean_(reader, infoStream, verbose, failFast);
}

+ (OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *)testStoredFieldsWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader
                                                                                           withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                                                                                                     withBoolean:(jboolean)failFast {
  return OrgApacheLuceneIndexCheckIndex_testStoredFieldsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream, failFast);
}

+ (OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *)testDocValuesWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader
                                                                                      withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                                                                                                withBoolean:(jboolean)failFast {
  return OrgApacheLuceneIndexCheckIndex_testDocValuesWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(reader, infoStream, failFast);
}

+ (void)checkBinaryDocValuesWithNSString:(NSString *)fieldName
                                 withInt:(jint)maxDoc
 withOrgApacheLuceneIndexBinaryDocValues:(OrgApacheLuceneIndexBinaryDocValues *)dv
             withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField {
  OrgApacheLuceneIndexCheckIndex_checkBinaryDocValuesWithNSString_withInt_withOrgApacheLuceneIndexBinaryDocValues_withOrgApacheLuceneUtilBits_(fieldName, maxDoc, dv, docsWithField);
}

+ (void)checkSortedDocValuesWithNSString:(NSString *)fieldName
                                 withInt:(jint)maxDoc
 withOrgApacheLuceneIndexSortedDocValues:(OrgApacheLuceneIndexSortedDocValues *)dv
             withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField {
  OrgApacheLuceneIndexCheckIndex_checkSortedDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedDocValues_withOrgApacheLuceneUtilBits_(fieldName, maxDoc, dv, docsWithField);
}

+ (void)checkSortedSetDocValuesWithNSString:(NSString *)fieldName
                                    withInt:(jint)maxDoc
 withOrgApacheLuceneIndexSortedSetDocValues:(OrgApacheLuceneIndexSortedSetDocValues *)dv
                withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField {
  OrgApacheLuceneIndexCheckIndex_checkSortedSetDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedSetDocValues_withOrgApacheLuceneUtilBits_(fieldName, maxDoc, dv, docsWithField);
}

+ (void)checkSortedNumericDocValuesWithNSString:(NSString *)fieldName
                                        withInt:(jint)maxDoc
 withOrgApacheLuceneIndexSortedNumericDocValues:(OrgApacheLuceneIndexSortedNumericDocValues *)ndv
                    withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField {
  OrgApacheLuceneIndexCheckIndex_checkSortedNumericDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedNumericDocValues_withOrgApacheLuceneUtilBits_(fieldName, maxDoc, ndv, docsWithField);
}

+ (void)checkNumericDocValuesWithNSString:(NSString *)fieldName
                                  withInt:(jint)maxDoc
 withOrgApacheLuceneIndexNumericDocValues:(OrgApacheLuceneIndexNumericDocValues *)ndv
              withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)docsWithField {
  OrgApacheLuceneIndexCheckIndex_checkNumericDocValuesWithNSString_withInt_withOrgApacheLuceneIndexNumericDocValues_withOrgApacheLuceneUtilBits_(fieldName, maxDoc, ndv, docsWithField);
}

+ (void)checkDocValuesWithOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fi
             withOrgApacheLuceneCodecsDocValuesProducer:(OrgApacheLuceneCodecsDocValuesProducer *)dvReader
                                                withInt:(jint)maxDoc
                                  withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
withOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus:(OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *)status {
  OrgApacheLuceneIndexCheckIndex_checkDocValuesWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsDocValuesProducer_withInt_withJavaIoPrintStream_withOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus_(fi, dvReader, maxDoc, infoStream, status);
}

+ (OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *)testTermVectorsWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader
                                                                                         withJavaIoPrintStream:(JavaIoPrintStream *)infoStream {
  return OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_(reader, infoStream);
}

+ (OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *)testTermVectorsWithOrgApacheLuceneIndexCodecReader:(OrgApacheLuceneIndexCodecReader *)reader
                                                                                         withJavaIoPrintStream:(JavaIoPrintStream *)infoStream
                                                                                                   withBoolean:(jboolean)verbose
                                                                                                   withBoolean:(jboolean)crossCheckTermVectors
                                                                                                   withBoolean:(jboolean)failFast {
  return OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_withBoolean_withBoolean_(reader, infoStream, verbose, crossCheckTermVectors, failFast);
}

- (void)exorciseIndexWithOrgApacheLuceneIndexCheckIndex_Status:(OrgApacheLuceneIndexCheckIndex_Status *)result {
  OrgApacheLuceneIndexCheckIndex_ensureOpen(self);
  if (((OrgApacheLuceneIndexCheckIndex_Status *) nil_chk(result))->partial_) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"can only exorcise an index that was fully checked (this status checked a subset of segments)");
  [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) changed];
  [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) commitWithOrgApacheLuceneStoreDirectory:result->dir_];
}

+ (jboolean)testAsserts {
  return OrgApacheLuceneIndexCheckIndex_testAsserts();
}

+ (jboolean)assertsOn {
  return OrgApacheLuceneIndexCheckIndex_assertsOn();
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgApacheLuceneIndexCheckIndex_mainWithNSStringArray_(args);
}

+ (jint)doMainWithNSStringArray:(IOSObjectArray *)args {
  return OrgApacheLuceneIndexCheckIndex_doMainWithNSStringArray_(args);
}

+ (jdouble)nsToSecWithLong:(jlong)ns {
  return OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(ns);
}

- (void)dealloc {
  RELEASE_(infoStream_);
  RELEASE_(dir_);
  RELEASE_(writeLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status;", 0x1, 12, 13, 1, 14, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus;", 0x9, 15, 16, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus;", 0x9, 17, 16, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus;", 0x9, 18, 16, 1, -1, -1, -1 },
    { NULL, "J", 0xa, 19, 20, 1, -1, -1, -1 },
    { NULL, "Z", 0xa, 21, 22, 1, -1, -1, -1 },
    { NULL, "V", 0xa, 23, 24, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;", 0xa, 25, 26, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;", 0x9, 27, 28, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;", 0x9, 27, 29, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus;", 0x9, 30, 16, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus;", 0x9, 31, 16, 1, -1, -1, -1 },
    { NULL, "V", 0xa, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 42, 43, 44, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus;", 0x9, 45, 28, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus;", 0x9, 45, 46, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, 1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 49, 50, 51, -1, -1, -1 },
    { NULL, "I", 0xa, 52, 50, 51, -1, -1, -1 },
    { NULL, "D", 0xa, 53, 54, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(initWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneStoreLock:);
  methods[2].selector = @selector(ensureOpen);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(setCrossCheckTermVectorsWithBoolean:);
  methods[5].selector = @selector(getCrossCheckTermVectors);
  methods[6].selector = @selector(setFailFastWithBoolean:);
  methods[7].selector = @selector(getFailFast);
  methods[8].selector = @selector(getChecksumsOnly);
  methods[9].selector = @selector(setChecksumsOnlyWithBoolean:);
  methods[10].selector = @selector(setInfoStreamWithJavaIoPrintStream:withBoolean:);
  methods[11].selector = @selector(setInfoStreamWithJavaIoPrintStream:);
  methods[12].selector = @selector(msgWithJavaIoPrintStream:withNSString:);
  methods[13].selector = @selector(checkIndex);
  methods[14].selector = @selector(checkIndexWithJavaUtilList:);
  methods[15].selector = @selector(testLiveDocsWithOrgApacheLuceneIndexCodecReader:withJavaIoPrintStream:withBoolean:);
  methods[16].selector = @selector(testFieldInfosWithOrgApacheLuceneIndexCodecReader:withJavaIoPrintStream:withBoolean:);
  methods[17].selector = @selector(testFieldNormsWithOrgApacheLuceneIndexCodecReader:withJavaIoPrintStream:withBoolean:);
  methods[18].selector = @selector(getDocsFromTermRangeWithNSString:withInt:withOrgApacheLuceneIndexTermsEnum:withOrgApacheLuceneUtilFixedBitSet:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:withBoolean:);
  methods[19].selector = @selector(checkSingleTermRangeWithNSString:withInt:withOrgApacheLuceneIndexTerms:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneUtilFixedBitSet:withOrgApacheLuceneUtilFixedBitSet:);
  methods[20].selector = @selector(checkTermRangesWithNSString:withInt:withOrgApacheLuceneIndexTerms:withLong:);
  methods[21].selector = @selector(checkFieldsWithOrgApacheLuceneIndexFields:withOrgApacheLuceneUtilBits:withInt:withOrgApacheLuceneIndexFieldInfos:withBoolean:withBoolean:withJavaIoPrintStream:withBoolean:);
  methods[22].selector = @selector(testPostingsWithOrgApacheLuceneIndexCodecReader:withJavaIoPrintStream:);
  methods[23].selector = @selector(testPostingsWithOrgApacheLuceneIndexCodecReader:withJavaIoPrintStream:withBoolean:withBoolean:);
  methods[24].selector = @selector(testStoredFieldsWithOrgApacheLuceneIndexCodecReader:withJavaIoPrintStream:withBoolean:);
  methods[25].selector = @selector(testDocValuesWithOrgApacheLuceneIndexCodecReader:withJavaIoPrintStream:withBoolean:);
  methods[26].selector = @selector(checkBinaryDocValuesWithNSString:withInt:withOrgApacheLuceneIndexBinaryDocValues:withOrgApacheLuceneUtilBits:);
  methods[27].selector = @selector(checkSortedDocValuesWithNSString:withInt:withOrgApacheLuceneIndexSortedDocValues:withOrgApacheLuceneUtilBits:);
  methods[28].selector = @selector(checkSortedSetDocValuesWithNSString:withInt:withOrgApacheLuceneIndexSortedSetDocValues:withOrgApacheLuceneUtilBits:);
  methods[29].selector = @selector(checkSortedNumericDocValuesWithNSString:withInt:withOrgApacheLuceneIndexSortedNumericDocValues:withOrgApacheLuceneUtilBits:);
  methods[30].selector = @selector(checkNumericDocValuesWithNSString:withInt:withOrgApacheLuceneIndexNumericDocValues:withOrgApacheLuceneUtilBits:);
  methods[31].selector = @selector(checkDocValuesWithOrgApacheLuceneIndexFieldInfo:withOrgApacheLuceneCodecsDocValuesProducer:withInt:withJavaIoPrintStream:withOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus:);
  methods[32].selector = @selector(testTermVectorsWithOrgApacheLuceneIndexCodecReader:withJavaIoPrintStream:);
  methods[33].selector = @selector(testTermVectorsWithOrgApacheLuceneIndexCodecReader:withJavaIoPrintStream:withBoolean:withBoolean:withBoolean:);
  methods[34].selector = @selector(exorciseIndexWithOrgApacheLuceneIndexCheckIndex_Status:);
  methods[35].selector = @selector(testAsserts);
  methods[36].selector = @selector(assertsOn);
  methods[37].selector = @selector(mainWithNSStringArray:);
  methods[38].selector = @selector(doMainWithNSStringArray:);
  methods[39].selector = @selector(nsToSecWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "infoStream_", "LJavaIoPrintStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dir_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeLock_", "LOrgApacheLuceneStoreLock;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "crossCheckTermVectors_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "failFast_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verbose_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "checksumsOnly_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "assertsOn_", "Z", .constantValue.asLong = 0, 0xa, 55, 56, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;", "LJavaIoIOException;", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneStoreLock;", "setCrossCheckTermVectors", "Z", "setFailFast", "setChecksumsOnly", "setInfoStream", "LJavaIoPrintStream;Z", "LJavaIoPrintStream;", "msg", "LJavaIoPrintStream;LNSString;", "checkIndex", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)Lorg/apache/lucene/index/CheckIndex$Status;", "testLiveDocs", "LOrgApacheLuceneIndexCodecReader;LJavaIoPrintStream;Z", "testFieldInfos", "testFieldNorms", "getDocsFromTermRange", "LNSString;ILOrgApacheLuceneIndexTermsEnum;LOrgApacheLuceneUtilFixedBitSet;LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;Z", "checkSingleTermRange", "LNSString;ILOrgApacheLuceneIndexTerms;LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneUtilFixedBitSet;LOrgApacheLuceneUtilFixedBitSet;", "checkTermRanges", "LNSString;ILOrgApacheLuceneIndexTerms;J", "checkFields", "LOrgApacheLuceneIndexFields;LOrgApacheLuceneUtilBits;ILOrgApacheLuceneIndexFieldInfos;ZZLJavaIoPrintStream;Z", "testPostings", "LOrgApacheLuceneIndexCodecReader;LJavaIoPrintStream;", "LOrgApacheLuceneIndexCodecReader;LJavaIoPrintStream;ZZ", "testStoredFields", "testDocValues", "checkBinaryDocValues", "LNSString;ILOrgApacheLuceneIndexBinaryDocValues;LOrgApacheLuceneUtilBits;", "checkSortedDocValues", "LNSString;ILOrgApacheLuceneIndexSortedDocValues;LOrgApacheLuceneUtilBits;", "checkSortedSetDocValues", "LNSString;ILOrgApacheLuceneIndexSortedSetDocValues;LOrgApacheLuceneUtilBits;", "checkSortedNumericDocValues", "LNSString;ILOrgApacheLuceneIndexSortedNumericDocValues;LOrgApacheLuceneUtilBits;", "checkNumericDocValues", "LNSString;ILOrgApacheLuceneIndexNumericDocValues;LOrgApacheLuceneUtilBits;", "checkDocValues", "LOrgApacheLuceneIndexFieldInfo;LOrgApacheLuceneCodecsDocValuesProducer;ILJavaIoPrintStream;LOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus;", "LJavaLangException;", "testTermVectors", "LOrgApacheLuceneIndexCodecReader;LJavaIoPrintStream;ZZZ", "exorciseIndex", "LOrgApacheLuceneIndexCheckIndex_Status;", "main", "[LNSString;", "LJavaIoIOException;LJavaLangInterruptedException;", "doMain", "nsToSec", "J", "assertsOn", &OrgApacheLuceneIndexCheckIndex_assertsOn_ };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex = { "CheckIndex", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 40, 9, -1, 48, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex;
}

@end

void OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexCheckIndex *self, OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreLock_(self, dir, [((OrgApacheLuceneStoreDirectory *) nil_chk(dir)) obtainLockWithNSString:OrgApacheLuceneIndexIndexWriter_WRITE_LOCK_NAME]);
}

OrgApacheLuceneIndexCheckIndex *new_OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex, initWithOrgApacheLuceneStoreDirectory_, dir)
}

OrgApacheLuceneIndexCheckIndex *create_OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex, initWithOrgApacheLuceneStoreDirectory_, dir)
}

void OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreLock_(OrgApacheLuceneIndexCheckIndex *self, OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneStoreLock *writeLock) {
  NSObject_init(self);
  JreStrongAssign(&self->dir_, dir);
  JreStrongAssign(&self->writeLock_, writeLock);
  JreStrongAssign(&self->infoStream_, nil);
}

OrgApacheLuceneIndexCheckIndex *new_OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreLock_(OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneStoreLock *writeLock) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreLock_, dir, writeLock)
}

OrgApacheLuceneIndexCheckIndex *create_OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreLock_(OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneStoreLock *writeLock) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex, initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneStoreLock_, dir, writeLock)
}

void OrgApacheLuceneIndexCheckIndex_ensureOpen(OrgApacheLuceneIndexCheckIndex *self) {
  if (JreLoadVolatileBoolean(&self->closed_)) {
    @throw create_OrgApacheLuceneStoreAlreadyClosedException_initWithNSString_(@"this instance is closed");
  }
}

void OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(JavaIoPrintStream *outArg, NSString *msg) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  if (outArg != nil) [outArg printlnWithNSString:msg];
}

OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *OrgApacheLuceneIndexCheckIndex_testLiveDocsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(OrgApacheLuceneIndexCodecReader *reader, JavaIoPrintStream *infoStream, jboolean failFast) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jlong startNS = JavaLangSystem_nanoTime();
  OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus_init();
  @try {
    if (infoStream != nil) [infoStream printWithNSString:@"    test: check live docs....."];
    jint numDocs = [((OrgApacheLuceneIndexCodecReader *) nil_chk(reader)) numDocs];
    if ([reader hasDeletions]) {
      id<OrgApacheLuceneUtilBits> liveDocs = JreRetainedLocalValue([reader getLiveDocs]);
      if (liveDocs == nil) {
        @throw create_JavaLangRuntimeException_initWithNSString_(@"segment should have deletions, but liveDocs is null");
      }
      else {
        jint numLive = 0;
        for (jint j = 0; j < [liveDocs length]; j++) {
          if ([liveDocs getWithInt:j]) {
            numLive++;
          }
        }
        if (numLive != numDocs) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"liveDocs count mismatch: info=", numDocs, @", vs bits=", numLive));
        }
      }
      status->numDeleted_ = [reader numDeletedDocs];
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [%d deleted docs] [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(status->numDeleted_), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startNS)) } count:2 type:NSObject_class_()]));
    }
    else {
      id<OrgApacheLuceneUtilBits> liveDocs = JreRetainedLocalValue([reader getLiveDocs]);
      if (liveDocs != nil) {
        for (jint j = 0; j < [liveDocs length]; j++) {
          if (![liveDocs getWithInt:j]) {
            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$", @"liveDocs mismatch: info says no deletions but doc ", j, @" is deleted."));
          }
        }
      }
      OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_((OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startNS))) } count:1 type:NSObject_class_()]));
    }
  }
  @catch (JavaLangThrowable *e) {
    if (failFast) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(e);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (infoStream != nil) {
      [e printStackTraceWithJavaIoPrintStream:infoStream];
    }
  }
  return status;
}

OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *OrgApacheLuceneIndexCheckIndex_testFieldInfosWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(OrgApacheLuceneIndexCodecReader *reader, JavaIoPrintStream *infoStream, jboolean failFast) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jlong startNS = JavaLangSystem_nanoTime();
  OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus_init();
  @try {
    if (infoStream != nil) {
      [infoStream printWithNSString:@"    test: field infos........."];
    }
    OrgApacheLuceneIndexFieldInfos *fieldInfos = JreRetainedLocalValue([((OrgApacheLuceneIndexCodecReader *) nil_chk(reader)) getFieldInfos]);
    for (OrgApacheLuceneIndexFieldInfo * __strong f in nil_chk(fieldInfos)) {
      [((OrgApacheLuceneIndexFieldInfo *) nil_chk(f)) checkConsistency];
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [%d fields] [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([fieldInfos size]), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startNS)) } count:2 type:NSObject_class_()]));
    status->totFields_ = [fieldInfos size];
  }
  @catch (JavaLangThrowable *e) {
    if (failFast) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(e);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (infoStream != nil) {
      [e printStackTraceWithJavaIoPrintStream:infoStream];
    }
  }
  return status;
}

OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *OrgApacheLuceneIndexCheckIndex_testFieldNormsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(OrgApacheLuceneIndexCodecReader *reader, JavaIoPrintStream *infoStream, jboolean failFast) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jlong startNS = JavaLangSystem_nanoTime();
  OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init();
  @try {
    if (infoStream != nil) {
      [infoStream printWithNSString:@"    test: field norms........."];
    }
    OrgApacheLuceneCodecsNormsProducer *normsReader = JreRetainedLocalValue([((OrgApacheLuceneIndexCodecReader *) nil_chk(reader)) getNormsReader]);
    if (normsReader != nil) {
      normsReader = [normsReader getMergeInstance];
    }
    for (OrgApacheLuceneIndexFieldInfo * __strong info in nil_chk([reader getFieldInfos])) {
      if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(info)) hasNorms]) {
        OrgApacheLuceneIndexCheckIndex_checkNumericDocValuesWithNSString_withInt_withOrgApacheLuceneIndexNumericDocValues_withOrgApacheLuceneUtilBits_(info->name_, [reader maxDoc], [((OrgApacheLuceneCodecsNormsProducer *) nil_chk(normsReader)) getNormsWithOrgApacheLuceneIndexFieldInfo:info], create_OrgApacheLuceneUtilBits_MatchAllBits_initWithInt_([reader maxDoc]));
        ++status->totFields_;
      }
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [%d fields] [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(status->totFields_), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startNS)) } count:2 type:NSObject_class_()]));
  }
  @catch (JavaLangThrowable *e) {
    if (failFast) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(e);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (infoStream != nil) {
      [e printStackTraceWithJavaIoPrintStream:infoStream];
    }
  }
  return status;
}

jlong OrgApacheLuceneIndexCheckIndex_getDocsFromTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_(NSString *field, jint maxDoc, OrgApacheLuceneIndexTermsEnum *termsEnum, OrgApacheLuceneUtilFixedBitSet *docsSeen, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm, jboolean isIntersect) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(docsSeen)) clearWithInt:0 withInt:[docsSeen length]];
  jlong termCount = 0;
  OrgApacheLuceneIndexPostingsEnum *postingsEnum = nil;
  OrgApacheLuceneUtilBytesRefBuilder *lastTerm = nil;
  while (true) {
    OrgApacheLuceneUtilBytesRef *term;
    if (isIntersect || termCount != 0) {
      term = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next];
    }
    else {
      term = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) term];
    }
    if (term == nil) {
      if (isIntersect == false) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"didn't see max term field=", field, @" term=", maxTerm));
      }
      return termCount;
    }
    JreAssert([term isValid], @"org/apache/lucene/index/CheckIndex.java:950 condition failed: assert term.isValid();");
    if (lastTerm == nil) {
      lastTerm = create_OrgApacheLuceneUtilBytesRefBuilder_init();
      [lastTerm copyBytesWithOrgApacheLuceneUtilBytesRef:term];
    }
    else {
      if ([((OrgApacheLuceneUtilBytesRef *) nil_chk([lastTerm get])) compareToWithId:term] >= 0) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$@", @"terms out of order: lastTerm=", lastTerm, @" term=", term));
      }
      [lastTerm copyBytesWithOrgApacheLuceneUtilBytesRef:term];
    }
    if ([term compareToWithId:minTerm] < 0) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"saw term before min term field=", field, @" term=", minTerm));
    }
    if (isIntersect == false) {
      jint cmp = [term compareToWithId:maxTerm];
      if (cmp == 0) {
        return termCount;
      }
      else if (cmp > 0) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"didn't see end term field=", field, @" term=", maxTerm));
      }
    }
    postingsEnum = [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:postingsEnum withInt:0];
    jint lastDoc = -1;
    while (true) {
      jint doc = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postingsEnum)) nextDoc];
      if (doc == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
        break;
      }
      if (doc <= lastDoc) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @": doc ", doc, @" <= lastDoc ", lastDoc));
      }
      if (doc >= maxDoc) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @": doc ", doc, @" >= maxDoc ", maxDoc));
      }
      [docsSeen setWithInt:doc];
      lastDoc = doc;
    }
    termCount++;
  }
}

jboolean OrgApacheLuceneIndexCheckIndex_checkSingleTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTerms_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(NSString *field, jint maxDoc, OrgApacheLuceneIndexTerms *terms, OrgApacheLuceneUtilBytesRef *minTerm, OrgApacheLuceneUtilBytesRef *maxTerm, OrgApacheLuceneUtilFixedBitSet *normalDocs, OrgApacheLuceneUtilFixedBitSet *intersectDocs) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  JreAssert([((OrgApacheLuceneUtilBytesRef *) nil_chk(minTerm)) compareToWithId:maxTerm] <= 0, @"org/apache/lucene/index/CheckIndex.java:1009 condition failed: assert minTerm.compareTo(maxTerm) <= 0;");
  OrgApacheLuceneIndexTermsEnum *termsEnum = JreRetainedLocalValue([((OrgApacheLuceneIndexTerms *) nil_chk(terms)) iterator]);
  OrgApacheLuceneIndexTermsEnum_SeekStatus *status = JreRetainedLocalValue([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekCeilWithOrgApacheLuceneUtilBytesRef:minTerm]);
  if (status != JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND)) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"failed to seek to existing term field=", field, @" term=", minTerm));
  }
  jlong normalTermCount = OrgApacheLuceneIndexCheckIndex_getDocsFromTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_(field, maxDoc, termsEnum, normalDocs, minTerm, maxTerm, false);
  jlong intersectTermCount = OrgApacheLuceneIndexCheckIndex_getDocsFromTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTermsEnum_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_(field, maxDoc, [terms intersectWithOrgApacheLuceneUtilAutomatonCompiledAutomaton:create_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonAutomata_makeBinaryIntervalWithOrgApacheLuceneUtilBytesRef_withBoolean_withOrgApacheLuceneUtilBytesRef_withBoolean_(minTerm, true, maxTerm, false), JavaLangBoolean_valueOfWithBoolean_(true), false, JavaLangInteger_MAX_VALUE, true) withOrgApacheLuceneUtilBytesRef:nil], intersectDocs, minTerm, maxTerm, true);
  if (intersectTermCount > normalTermCount) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$J$J", @"intersect returned too many terms: field=", field, @" intersectTermCount=", intersectTermCount, @" normalTermCount=", normalTermCount));
  }
  if ([((OrgApacheLuceneUtilFixedBitSet *) nil_chk(normalDocs)) isEqual:intersectDocs] == false) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I$@$@", @"intersect visited different docs than straight terms enum: ", [normalDocs cardinality], @" for straight enum, vs ", [((OrgApacheLuceneUtilFixedBitSet *) nil_chk(intersectDocs)) cardinality], @" for intersect, minTerm=", minTerm, @" maxTerm=", maxTerm));
  }
  return intersectTermCount != normalTermCount;
}

void OrgApacheLuceneIndexCheckIndex_checkTermRangesWithNSString_withInt_withOrgApacheLuceneIndexTerms_withLong_(NSString *field, jint maxDoc, OrgApacheLuceneIndexTerms *terms, jlong numTerms) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jdouble currentInterval = numTerms;
  OrgApacheLuceneUtilFixedBitSet *normalDocs = create_OrgApacheLuceneUtilFixedBitSet_initWithInt_(maxDoc);
  OrgApacheLuceneUtilFixedBitSet *intersectDocs = create_OrgApacheLuceneUtilFixedBitSet_initWithInt_(maxDoc);
  while (currentInterval >= 10.0) {
    OrgApacheLuceneIndexTermsEnum *termsEnum = JreRetainedLocalValue([((OrgApacheLuceneIndexTerms *) nil_chk(terms)) iterator]);
    jlong termCount = 0;
    id<JavaUtilDeque> termBounds = create_JavaUtilLinkedList_init();
    jlong lastTermAdded = JavaLangLong_MIN_VALUE;
    OrgApacheLuceneUtilBytesRefBuilder *lastTerm = nil;
    while (true) {
      OrgApacheLuceneUtilBytesRef *term = JreRetainedLocalValue([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next]);
      if (term == nil) {
        break;
      }
      if (termCount >= lastTermAdded + currentInterval / 4) {
        [termBounds addWithId:OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(term)];
        lastTermAdded = termCount;
        if ([termBounds size] == 5) {
          OrgApacheLuceneUtilBytesRef *minTerm = JreRetainedLocalValue([termBounds removeFirst]);
          OrgApacheLuceneUtilBytesRef *maxTerm = JreRetainedLocalValue([termBounds getLast]);
          OrgApacheLuceneIndexCheckIndex_checkSingleTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTerms_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(field, maxDoc, terms, minTerm, maxTerm, normalDocs, intersectDocs);
        }
      }
      termCount++;
      if (lastTerm == nil) {
        lastTerm = create_OrgApacheLuceneUtilBytesRefBuilder_init();
        [lastTerm copyBytesWithOrgApacheLuceneUtilBytesRef:term];
      }
      else {
        if ([((OrgApacheLuceneUtilBytesRef *) nil_chk([lastTerm get])) compareToWithId:term] >= 0) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$@", @"terms out of order: lastTerm=", lastTerm, @" term=", term));
        }
        [lastTerm copyBytesWithOrgApacheLuceneUtilBytesRef:term];
      }
    }
    if (lastTerm != nil && [termBounds isEmpty] == false) {
      OrgApacheLuceneUtilBytesRef *minTerm = JreRetainedLocalValue([termBounds removeFirst]);
      OrgApacheLuceneUtilBytesRef *maxTerm = JreRetainedLocalValue([lastTerm get]);
      OrgApacheLuceneIndexCheckIndex_checkSingleTermRangeWithNSString_withInt_withOrgApacheLuceneIndexTerms_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilFixedBitSet_withOrgApacheLuceneUtilFixedBitSet_(field, maxDoc, terms, minTerm, maxTerm, normalDocs, intersectDocs);
    }
    JreTimesAssignDoubleD(&currentInterval, .75);
  }
}

OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *OrgApacheLuceneIndexCheckIndex_checkFieldsWithOrgApacheLuceneIndexFields_withOrgApacheLuceneUtilBits_withInt_withOrgApacheLuceneIndexFieldInfos_withBoolean_withBoolean_withJavaIoPrintStream_withBoolean_(OrgApacheLuceneIndexFields *fields, id<OrgApacheLuceneUtilBits> liveDocs, jint maxDoc, OrgApacheLuceneIndexFieldInfos *fieldInfos, jboolean doPrint, jboolean isVectors, JavaIoPrintStream *infoStream, jboolean verbose) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jlong startNS;
  if (doPrint) {
    startNS = JavaLangSystem_nanoTime();
  }
  else {
    startNS = 0;
  }
  OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init();
  jint computedFieldCount = 0;
  OrgApacheLuceneIndexPostingsEnum *postings = nil;
  NSString *lastField = nil;
  for (NSString * __strong field in nil_chk(fields)) {
    if (lastField != nil && [((NSString *) nil_chk(field)) compareToWithId:lastField] <= 0) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$$", @"fields out of order: lastField=", lastField, @" field=", field));
    }
    lastField = field;
    OrgApacheLuceneIndexFieldInfo *fieldInfo = JreRetainedLocalValue([((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos)) fieldInfoWithNSString:field]);
    if (fieldInfo == nil) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"fieldsEnum inconsistent with fieldInfos, no fieldInfos for: ", field));
    }
    if ([fieldInfo getIndexOptions] == JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE)) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"fieldsEnum inconsistent with fieldInfos, isIndexed == false for: ", field));
    }
    computedFieldCount++;
    OrgApacheLuceneIndexTerms *terms = [fields termsWithNSString:field];
    if (terms == nil) {
      continue;
    }
    jboolean hasFreqs = [terms hasFreqs];
    jboolean hasPositions = [terms hasPositions];
    jboolean hasPayloads = [terms hasPayloads];
    jboolean hasOffsets = [terms hasOffsets];
    OrgApacheLuceneUtilBytesRef *maxTerm;
    OrgApacheLuceneUtilBytesRef *minTerm;
    if (isVectors) {
      maxTerm = nil;
      minTerm = nil;
    }
    else {
      OrgApacheLuceneUtilBytesRef *bb = JreRetainedLocalValue([terms getMin]);
      if (bb != nil) {
        JreAssert([bb isValid], @"org/apache/lucene/index/CheckIndex.java:1164 condition failed: assert bb.isValid();");
        minTerm = OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(bb);
      }
      else {
        minTerm = nil;
      }
      bb = [terms getMax];
      if (bb != nil) {
        JreAssert([bb isValid], @"org/apache/lucene/index/CheckIndex.java:1172 condition failed: assert bb.isValid();");
        maxTerm = OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(bb);
        if (minTerm == nil) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"field \"", field, @"\" has null minTerm but non-null maxTerm"));
        }
      }
      else {
        maxTerm = nil;
        if (minTerm != nil) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"field \"", field, @"\" has non-null minTerm but null maxTerm"));
        }
      }
    }
    jboolean expectedHasFreqs = (isVectors || [((OrgApacheLuceneIndexIndexOptions *) nil_chk([fieldInfo getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS)] >= 0);
    if (hasFreqs != expectedHasFreqs) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$Z$Z", @"field \"", field, @"\" should have hasFreqs=", expectedHasFreqs, @" but got ", hasFreqs));
    }
    if (hasFreqs == false) {
      if ([terms getSumTotalTermFreq] != -1) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$J$", @"field \"", field, @"\" hasFreqs is false, but Terms.getSumTotalTermFreq()=", [terms getSumTotalTermFreq], @" (should be -1)"));
      }
    }
    if (!isVectors) {
      jboolean expectedHasPositions = [((OrgApacheLuceneIndexIndexOptions *) nil_chk([fieldInfo getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS)] >= 0;
      if (hasPositions != expectedHasPositions) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$Z$Z", @"field \"", field, @"\" should have hasPositions=", expectedHasPositions, @" but got ", hasPositions));
      }
      jboolean expectedHasPayloads = [fieldInfo hasPayloads];
      if (hasPayloads != expectedHasPayloads) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$Z$Z", @"field \"", field, @"\" should have hasPayloads=", expectedHasPayloads, @" but got ", hasPayloads));
      }
      jboolean expectedHasOffsets = [((OrgApacheLuceneIndexIndexOptions *) nil_chk([fieldInfo getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS)] >= 0;
      if (hasOffsets != expectedHasOffsets) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$Z$Z", @"field \"", field, @"\" should have hasOffsets=", expectedHasOffsets, @" but got ", hasOffsets));
      }
    }
    OrgApacheLuceneIndexTermsEnum *termsEnum = [terms iterator];
    jboolean hasOrd = true;
    jlong termCountStart = status->delTermCount_ + status->termCount_;
    OrgApacheLuceneUtilBytesRefBuilder *lastTerm = nil;
    jlong sumTotalTermFreq = 0;
    jlong sumDocFreq = 0;
    OrgApacheLuceneUtilFixedBitSet *visitedDocs = create_OrgApacheLuceneUtilFixedBitSet_initWithInt_(maxDoc);
    while (true) {
      OrgApacheLuceneUtilBytesRef *term = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next];
      if (term == nil) {
        break;
      }
      JreAssert([term isValid], @"org/apache/lucene/index/CheckIndex.java:1233 condition failed: assert term.isValid();");
      if (lastTerm == nil) {
        lastTerm = create_OrgApacheLuceneUtilBytesRefBuilder_init();
        [lastTerm copyBytesWithOrgApacheLuceneUtilBytesRef:term];
      }
      else {
        if ([((OrgApacheLuceneUtilBytesRef *) nil_chk([lastTerm get])) compareToWithId:term] >= 0) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$@", @"terms out of order: lastTerm=", lastTerm, @" term=", term));
        }
        [lastTerm copyBytesWithOrgApacheLuceneUtilBytesRef:term];
      }
      if (isVectors == false) {
        if (minTerm == nil) {
          JreAssert(maxTerm == nil, @"org/apache/lucene/index/CheckIndex.java:1250 condition failed: assert maxTerm == null;");
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@$@", @"field=\"", field, @"\": invalid term: term=", term, @", minTerm=", minTerm));
        }
        if ([term compareToWithId:minTerm] < 0) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@$@", @"field=\"", field, @"\": invalid term: term=", term, @", minTerm=", minTerm));
        }
        if ([term compareToWithId:maxTerm] > 0) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@$@", @"field=\"", field, @"\": invalid term: term=", term, @", maxTerm=", maxTerm));
        }
      }
      jint docFreq = [termsEnum docFreq];
      if (docFreq <= 0) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$", @"docfreq: ", docFreq, @" is out of bounds"));
      }
      sumDocFreq += docFreq;
      postings = [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:postings withInt:OrgApacheLuceneIndexPostingsEnum_ALL];
      if (hasFreqs == false) {
        if ([termsEnum totalTermFreq] != -1) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$J$", @"field \"", field, @"\" hasFreqs is false, but TermsEnum.totalTermFreq()=", [termsEnum totalTermFreq], @" (should be -1)"));
        }
      }
      if (hasOrd) {
        jlong ord = -1;
        @try {
          ord = [termsEnum ord];
        }
        @catch (JavaLangUnsupportedOperationException *uoe) {
          hasOrd = false;
        }
        if (hasOrd) {
          jlong ordExpected = status->delTermCount_ + status->termCount_ - termCountStart;
          if (ord != ordExpected) {
            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J$J", @"ord mismatch: TermsEnum has ord=", ord, @" vs actual=", ordExpected));
          }
        }
      }
      jint lastDoc = -1;
      jint docCount = 0;
      jboolean hasNonDeletedDocs = false;
      jlong totalTermFreq = 0;
      while (true) {
        jint doc = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postings)) nextDoc];
        if (doc == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
          break;
        }
        [visitedDocs setWithInt:doc];
        jint freq = -1;
        if (hasFreqs) {
          freq = [postings freq];
          if (freq <= 0) {
            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$", @"term ", term, @": doc ", doc, @": freq ", freq, @" is out of bounds"));
          }
          totalTermFreq += freq;
        }
        else {
          if ([postings freq] != 1) {
            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$", @"term ", term, @": doc ", doc, @": freq ", freq, @" != 1 when Terms.hasFreqs() is false"));
          }
        }
        if (liveDocs == nil || [liveDocs getWithInt:doc]) {
          hasNonDeletedDocs = true;
          status->totFreq_++;
          if (freq >= 0) {
            status->totPos_ += freq;
          }
        }
        docCount++;
        if (doc <= lastDoc) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @": doc ", doc, @" <= lastDoc ", lastDoc));
        }
        if (doc >= maxDoc) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @": doc ", doc, @" >= maxDoc ", maxDoc));
        }
        lastDoc = doc;
        jint lastPos = -1;
        jint lastOffset = 0;
        if (hasPositions) {
          for (jint j = 0; j < freq; j++) {
            jint pos = [postings nextPosition];
            if (pos < 0) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$", @"term ", term, @": doc ", doc, @": pos ", pos, @" is out of bounds"));
            }
            if (pos > OrgApacheLuceneIndexIndexWriter_MAX_POSITION) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I", @"term ", term, @": doc ", doc, @": pos ", pos, @" > IndexWriter.MAX_POSITION=", OrgApacheLuceneIndexIndexWriter_MAX_POSITION));
            }
            if (pos < lastPos) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I", @"term ", term, @": doc ", doc, @": pos ", pos, @" < lastPos ", lastPos));
            }
            lastPos = pos;
            OrgApacheLuceneUtilBytesRef *payload = JreRetainedLocalValue([postings getPayload]);
            if (payload != nil) {
              JreAssert([payload isValid], @"org/apache/lucene/index/CheckIndex.java:1354 condition failed: assert payload.isValid();");
            }
            if (payload != nil && payload->length_ < 1) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I", @"term ", term, @": doc ", doc, @": pos ", pos, @" payload length is out of bounds ", payload->length_));
            }
            if (hasOffsets) {
              jint startOffset = [postings startOffset];
              jint endOffset = [postings endOffset];
              if (!isVectors) {
                if (startOffset < 0) {
                  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I$", @"term ", term, @": doc ", doc, @": pos ", pos, @": startOffset ", startOffset, @" is out of bounds"));
                }
                if (startOffset < lastOffset) {
                  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I$I", @"term ", term, @": doc ", doc, @": pos ", pos, @": startOffset ", startOffset, @" < lastStartOffset ", lastOffset));
                }
                if (endOffset < 0) {
                  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I$", @"term ", term, @": doc ", doc, @": pos ", pos, @": endOffset ", endOffset, @" is out of bounds"));
                }
                if (endOffset < startOffset) {
                  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I$I", @"term ", term, @": doc ", doc, @": pos ", pos, @": endOffset ", endOffset, @" < startOffset ", startOffset));
                }
              }
              lastOffset = startOffset;
            }
          }
        }
      }
      if (hasNonDeletedDocs) {
        status->termCount_++;
      }
      else {
        status->delTermCount_++;
      }
      jlong totalTermFreq2 = [termsEnum totalTermFreq];
      jboolean hasTotalTermFreq = hasFreqs && totalTermFreq2 != -1;
      if (docCount != docFreq) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @" docFreq=", docFreq, @" != tot docs w/o deletions ", docCount));
      }
      if (hasTotalTermFreq) {
        if (totalTermFreq2 <= 0) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J$", @"totalTermFreq: ", totalTermFreq2, @" is out of bounds"));
        }
        sumTotalTermFreq += totalTermFreq;
        if (totalTermFreq != totalTermFreq2) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$J$J", @"term ", term, @" totalTermFreq=", totalTermFreq2, @" != recomputed totalTermFreq=", totalTermFreq));
        }
      }
      if (hasPositions) {
        for (jint idx = 0; idx < 7; idx++) {
          jint skipDocID = (jint) (JreLongDiv(((idx + 1) * (jlong) maxDoc), 8));
          postings = [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:postings withInt:OrgApacheLuceneIndexPostingsEnum_ALL];
          jint docID = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postings)) advanceWithInt:skipDocID];
          if (docID == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
            break;
          }
          else {
            if (docID < skipDocID) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @": advance(docID=", skipDocID, @") returned docID=", docID));
            }
            jint freq = [postings freq];
            if (freq <= 0) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$", @"termFreq ", freq, @" is out of bounds"));
            }
            jint lastPosition = -1;
            jint lastOffset = 0;
            for (jint posUpto = 0; posUpto < freq; posUpto++) {
              jint pos = [postings nextPosition];
              if (pos < 0) {
                @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$", @"position ", pos, @" is out of bounds"));
              }
              if (pos < lastPosition) {
                @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"position ", pos, @" is < lastPosition ", lastPosition));
              }
              lastPosition = pos;
              if (hasOffsets) {
                jint startOffset = [postings startOffset];
                jint endOffset = [postings endOffset];
                if (!isVectors) {
                  if (startOffset < 0) {
                    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I$", @"term ", term, @": doc ", docID, @": pos ", pos, @": startOffset ", startOffset, @" is out of bounds"));
                  }
                  if (startOffset < lastOffset) {
                    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I$I", @"term ", term, @": doc ", docID, @": pos ", pos, @": startOffset ", startOffset, @" < lastStartOffset ", lastOffset));
                  }
                  if (endOffset < 0) {
                    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I$", @"term ", term, @": doc ", docID, @": pos ", pos, @": endOffset ", endOffset, @" is out of bounds"));
                  }
                  if (endOffset < startOffset) {
                    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I$I", @"term ", term, @": doc ", docID, @": pos ", pos, @": endOffset ", endOffset, @" < startOffset ", startOffset));
                  }
                }
                lastOffset = startOffset;
              }
            }
            jint nextDocID = [postings nextDoc];
            if (nextDocID == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
              break;
            }
            if (nextDocID <= docID) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I", @"term ", term, @": advance(docID=", skipDocID, @"), then .next() returned docID=", nextDocID, @" vs prev docID=", docID));
            }
          }
          if (isVectors) {
            break;
          }
        }
      }
      else {
        for (jint idx = 0; idx < 7; idx++) {
          jint skipDocID = (jint) (JreLongDiv(((idx + 1) * (jlong) maxDoc), 8));
          postings = [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:postings withInt:OrgApacheLuceneIndexPostingsEnum_NONE];
          jint docID = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postings)) advanceWithInt:skipDocID];
          if (docID == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
            break;
          }
          else {
            if (docID < skipDocID) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I", @"term ", term, @": advance(docID=", skipDocID, @") returned docID=", docID));
            }
            jint nextDocID = [postings nextDoc];
            if (nextDocID == OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
              break;
            }
            if (nextDocID <= docID) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$I$I$I", @"term ", term, @": advance(docID=", skipDocID, @"), then .next() returned docID=", nextDocID, @" vs prev docID=", docID));
            }
          }
          if (isVectors) {
            break;
          }
        }
      }
    }
    if (minTerm != nil && status->termCount_ + status->delTermCount_ == 0) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"field=\"", field, @"\": minTerm is non-null yet we saw no terms: ", minTerm));
    }
    OrgApacheLuceneIndexTerms *fieldTerms = [fields termsWithNSString:field];
    if (fieldTerms == nil) {
    }
    else {
      jlong fieldTermCount = (status->delTermCount_ + status->termCount_) - termCountStart;
      id stats = [fieldTerms getStats];
      JreAssert(stats != nil, @"org/apache/lucene/index/CheckIndex.java:1521 condition failed: assert stats != null;");
      if (status->blockTreeStats_ == nil) {
        JreStrongAssignAndConsume(&status->blockTreeStats_, new_JavaUtilHashMap_init());
      }
      [status->blockTreeStats_ putWithId:field withId:stats];
      if (sumTotalTermFreq != 0) {
        jlong v = [((OrgApacheLuceneIndexTerms *) nil_chk([fields termsWithNSString:field])) getSumTotalTermFreq];
        if (v != -1 && sumTotalTermFreq != v) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$CJ$J", @"sumTotalTermFreq for field ", field, '=', v, @" != recomputed sumTotalTermFreq=", sumTotalTermFreq));
        }
      }
      if (sumDocFreq != 0) {
        jlong v = [((OrgApacheLuceneIndexTerms *) nil_chk([fields termsWithNSString:field])) getSumDocFreq];
        if (v != -1 && sumDocFreq != v) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$CJ$J", @"sumDocFreq for field ", field, '=', v, @" != recomputed sumDocFreq=", sumDocFreq));
        }
      }
      jint v = [fieldTerms getDocCount];
      if (v != -1 && [visitedDocs cardinality] != v) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$CI$I", @"docCount for field ", field, '=', v, @" != recomputed docCount=", [visitedDocs cardinality]));
      }
      if (lastTerm != nil) {
        if ([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekCeilWithOrgApacheLuceneUtilBytesRef:[lastTerm get]] != JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND)) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$", @"seek to last term ", lastTerm, @" failed"));
        }
        if ([((OrgApacheLuceneUtilBytesRef *) nil_chk([termsEnum term])) isEqual:[lastTerm get]] == false) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$@", @"seek to last term ", [lastTerm get], @" returned FOUND but seeked to the wrong term ", [termsEnum term]));
        }
        jint expectedDocFreq = [termsEnum docFreq];
        OrgApacheLuceneIndexPostingsEnum *d = JreRetainedLocalValue([termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:nil withInt:OrgApacheLuceneIndexPostingsEnum_NONE]);
        jint docFreq = 0;
        while ([((OrgApacheLuceneIndexPostingsEnum *) nil_chk(d)) nextDoc] != OrgApacheLuceneSearchDocIdSetIterator_NO_MORE_DOCS) {
          docFreq++;
        }
        if (docFreq != expectedDocFreq) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@CI$I", @"docFreq for last term ", [lastTerm toBytesRef], '=', expectedDocFreq, @" != recomputed docFreq=", docFreq));
        }
      }
      jlong termCount = -1;
      if (fieldTermCount > 0) {
        termCount = [((OrgApacheLuceneIndexTerms *) nil_chk([fields termsWithNSString:field])) size];
        if (termCount != -1 && termCount != fieldTermCount) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J$J", @"termCount mismatch ", termCount, @" vs ", fieldTermCount));
        }
      }
      if (hasOrd && status->termCount_ - termCountStart > 0) {
        jint seekCount = (jint) JavaLangMath_minWithLong_withLong_(10000LL, termCount);
        if (seekCount > 0) {
          IOSObjectArray *seekTerms = [IOSObjectArray arrayWithLength:seekCount type:OrgApacheLuceneUtilBytesRef_class_()];
          for (jint i = seekCount - 1; i >= 0; i--) {
            jlong ord = i * (JreLongDiv(termCount, seekCount));
            [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekExactWithLong:ord];
            jlong actualOrd = [termsEnum ord];
            if (actualOrd != ord) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J$J", @"seek to ord ", ord, @" returned ord ", actualOrd));
            }
            IOSObjectArray_Set(seekTerms, i, OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_([termsEnum term]));
          }
          for (jint i = seekCount - 1; i >= 0; i--) {
            if ([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekCeilWithOrgApacheLuceneUtilBytesRef:IOSObjectArray_Get(seekTerms, i)] != JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, FOUND)) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$", @"seek to existing term ", IOSObjectArray_Get(seekTerms, i), @" failed"));
            }
            if ([((OrgApacheLuceneUtilBytesRef *) nil_chk([termsEnum term])) isEqual:IOSObjectArray_Get(seekTerms, i)] == false) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$@", @"seek to existing term ", IOSObjectArray_Get(seekTerms, i), @" returned FOUND but seeked to the wrong term ", [termsEnum term]));
            }
            postings = [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:postings withInt:OrgApacheLuceneIndexPostingsEnum_NONE];
            if (postings == nil) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"null DocsEnum from to existing term ", IOSObjectArray_Get(seekTerms, i)));
            }
          }
        }
      }
    }
  }
  jint fieldCount = [fields size];
  if (fieldCount != -1) {
    if (fieldCount < 0) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"invalid fieldCount: ", fieldCount));
    }
    if (fieldCount != computedFieldCount) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"fieldCount mismatch ", fieldCount, @" vs recomputed field count ", computedFieldCount));
    }
  }
  if (doPrint) {
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [%d terms; %d terms/docs pairs; %d tokens] [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(status->termCount_), JavaLangLong_valueOfWithLong_(status->totFreq_), JavaLangLong_valueOfWithLong_(status->totPos_), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startNS)) } count:4 type:NSObject_class_()]));
  }
  if (verbose && status->blockTreeStats_ != nil && infoStream != nil && status->termCount_ > 0) {
    for (id<JavaUtilMap_Entry> __strong ent in nil_chk([status->blockTreeStats_ entrySet])) {
      [infoStream printlnWithNSString:JreStrcat("$$$", @"      field \"", [((id<JavaUtilMap_Entry>) nil_chk(ent)) getKey], @"\":")];
      [infoStream printlnWithNSString:JreStrcat("$$", @"      ", [((NSString *) nil_chk([nil_chk([ent getValue]) description])) java_replace:@"\n" withSequence:@"\n      "])];
    }
  }
  return status;
}

OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *OrgApacheLuceneIndexCheckIndex_testPostingsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_(OrgApacheLuceneIndexCodecReader *reader, JavaIoPrintStream *infoStream) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  return OrgApacheLuceneIndexCheckIndex_testPostingsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_withBoolean_(reader, infoStream, false, false);
}

OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *OrgApacheLuceneIndexCheckIndex_testPostingsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_withBoolean_(OrgApacheLuceneIndexCodecReader *reader, JavaIoPrintStream *infoStream, jboolean verbose, jboolean failFast) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *status;
  jint maxDoc = [((OrgApacheLuceneIndexCodecReader *) nil_chk(reader)) maxDoc];
  @try {
    if (infoStream != nil) {
      [infoStream printWithNSString:@"    test: terms, freq, prox..."];
    }
    OrgApacheLuceneIndexFields *fields = [((OrgApacheLuceneCodecsFieldsProducer *) nil_chk([reader getPostingsReader])) getMergeInstance];
    OrgApacheLuceneIndexFieldInfos *fieldInfos = [reader getFieldInfos];
    status = OrgApacheLuceneIndexCheckIndex_checkFieldsWithOrgApacheLuceneIndexFields_withOrgApacheLuceneUtilBits_withInt_withOrgApacheLuceneIndexFieldInfos_withBoolean_withBoolean_withJavaIoPrintStream_withBoolean_(fields, [reader getLiveDocs], maxDoc, fieldInfos, true, false, infoStream, verbose);
  }
  @catch (JavaLangThrowable *e) {
    if (failFast) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(e);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, JreStrcat("$@", @"ERROR: ", e));
    status = create_OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init();
    JreStrongAssign(&status->error_, e);
    if (infoStream != nil) {
      [e printStackTraceWithJavaIoPrintStream:infoStream];
    }
  }
  return status;
}

OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *OrgApacheLuceneIndexCheckIndex_testStoredFieldsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(OrgApacheLuceneIndexCodecReader *reader, JavaIoPrintStream *infoStream, jboolean failFast) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jlong startNS = JavaLangSystem_nanoTime();
  OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init();
  @try {
    if (infoStream != nil) {
      [infoStream printWithNSString:@"    test: stored fields......."];
    }
    id<OrgApacheLuceneUtilBits> liveDocs = [((OrgApacheLuceneIndexCodecReader *) nil_chk(reader)) getLiveDocs];
    OrgApacheLuceneCodecsStoredFieldsReader *storedFields = JreRetainedLocalValue([((OrgApacheLuceneCodecsStoredFieldsReader *) nil_chk([reader getFieldsReader])) getMergeInstance]);
    for (jint j = 0; j < [reader maxDoc]; ++j) {
      OrgApacheLuceneDocumentDocumentStoredFieldVisitor *visitor = create_OrgApacheLuceneDocumentDocumentStoredFieldVisitor_init();
      [((OrgApacheLuceneCodecsStoredFieldsReader *) nil_chk(storedFields)) visitDocumentWithInt:j withOrgApacheLuceneIndexStoredFieldVisitor:visitor];
      OrgApacheLuceneDocumentDocument *doc = JreRetainedLocalValue([visitor getDocument]);
      if (liveDocs == nil || [liveDocs getWithInt:j]) {
        status->docCount_++;
        status->totFields_ += [((id<JavaUtilList>) nil_chk([((OrgApacheLuceneDocumentDocument *) nil_chk(doc)) getFields])) size];
      }
    }
    if (status->docCount_ != [reader numDocs]) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I$", @"docCount=", status->docCount_, @" but saw ", status->docCount_, @" undeleted docs"));
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [%d total field count; avg %.1f fields per doc] [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(status->totFields_), JavaLangFloat_valueOfWithFloat_((((jfloat) status->totFields_) / status->docCount_)), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startNS)) } count:3 type:NSObject_class_()]));
  }
  @catch (JavaLangThrowable *e) {
    if (failFast) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(e);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (infoStream != nil) {
      [e printStackTraceWithJavaIoPrintStream:infoStream];
    }
  }
  return status;
}

OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *OrgApacheLuceneIndexCheckIndex_testDocValuesWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_(OrgApacheLuceneIndexCodecReader *reader, JavaIoPrintStream *infoStream, jboolean failFast) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jlong startNS = JavaLangSystem_nanoTime();
  OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus_init();
  @try {
    if (infoStream != nil) {
      [infoStream printWithNSString:@"    test: docvalues..........."];
    }
    OrgApacheLuceneCodecsDocValuesProducer *dvReader = JreRetainedLocalValue([((OrgApacheLuceneIndexCodecReader *) nil_chk(reader)) getDocValuesReader]);
    if (dvReader != nil) {
      dvReader = [dvReader getMergeInstance];
    }
    for (OrgApacheLuceneIndexFieldInfo * __strong fieldInfo in nil_chk([reader getFieldInfos])) {
      if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) getDocValuesType] != JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NONE)) {
        status->totalValueFields_++;
        OrgApacheLuceneIndexCheckIndex_checkDocValuesWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsDocValuesProducer_withInt_withJavaIoPrintStream_withOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus_(fieldInfo, dvReader, [reader maxDoc], infoStream, status);
      }
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [%d docvalues fields; %d BINARY; %d NUMERIC; %d SORTED; %d SORTED_NUMERIC; %d SORTED_SET] [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(status->totalValueFields_), JavaLangLong_valueOfWithLong_(status->totalBinaryFields_), JavaLangLong_valueOfWithLong_(status->totalNumericFields_), JavaLangLong_valueOfWithLong_(status->totalSortedFields_), JavaLangLong_valueOfWithLong_(status->totalSortedNumericFields_), JavaLangLong_valueOfWithLong_(status->totalSortedSetFields_), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startNS)) } count:7 type:NSObject_class_()]));
  }
  @catch (JavaLangThrowable *e) {
    if (failFast) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(e);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (infoStream != nil) {
      [e printStackTraceWithJavaIoPrintStream:infoStream];
    }
  }
  return status;
}

void OrgApacheLuceneIndexCheckIndex_checkBinaryDocValuesWithNSString_withInt_withOrgApacheLuceneIndexBinaryDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexBinaryDocValues *dv, id<OrgApacheLuceneUtilBits> docsWithField) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  for (jint i = 0; i < maxDoc; i++) {
    OrgApacheLuceneUtilBytesRef *term = [((OrgApacheLuceneIndexBinaryDocValues *) nil_chk(dv)) getWithInt:i];
    JreAssert([((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) isValid], @"org/apache/lucene/index/CheckIndex.java:1782 condition failed: assert term.isValid();");
    if ([((id<OrgApacheLuceneUtilBits>) nil_chk(docsWithField)) getWithInt:i] == false && term->length_ > 0) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@$I", @"dv for field: ", fieldName, @" is missing but has value=", term, @" for doc: ", i));
    }
  }
}

void OrgApacheLuceneIndexCheckIndex_checkSortedDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexSortedDocValues *dv, id<OrgApacheLuceneUtilBits> docsWithField) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  OrgApacheLuceneIndexCheckIndex_checkBinaryDocValuesWithNSString_withInt_withOrgApacheLuceneIndexBinaryDocValues_withOrgApacheLuceneUtilBits_(fieldName, maxDoc, dv, docsWithField);
  jint maxOrd = [((OrgApacheLuceneIndexSortedDocValues *) nil_chk(dv)) getValueCount] - 1;
  OrgApacheLuceneUtilFixedBitSet *seenOrds = create_OrgApacheLuceneUtilFixedBitSet_initWithInt_([dv getValueCount]);
  jint maxOrd2 = -1;
  for (jint i = 0; i < maxDoc; i++) {
    jint ord = [dv getOrdWithInt:i];
    if (ord == -1) {
      if ([((id<OrgApacheLuceneUtilBits>) nil_chk(docsWithField)) getWithInt:i]) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$I", @"dv for field: ", fieldName, @" has -1 ord but is not marked missing for doc: ", i));
      }
    }
    else if (ord < -1 || ord > maxOrd) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"ord out of bounds: ", ord));
    }
    else {
      if (![((id<OrgApacheLuceneUtilBits>) nil_chk(docsWithField)) getWithInt:i]) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$I$I", @"dv for field: ", fieldName, @" is missing but has ord=", ord, @" for doc: ", i));
      }
      maxOrd2 = JavaLangMath_maxWithInt_withInt_(maxOrd2, ord);
      [seenOrds setWithInt:ord];
    }
  }
  if (maxOrd != maxOrd2) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$I$I", @"dv for field: ", fieldName, @" reports wrong maxOrd=", maxOrd, @" but this is not the case: ", maxOrd2));
  }
  if ([seenOrds cardinality] != [dv getValueCount]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$I$I", @"dv for field: ", fieldName, @" has holes in its ords, valueCount=", [dv getValueCount], @" but only used: ", [seenOrds cardinality]));
  }
  OrgApacheLuceneUtilBytesRef *lastValue = nil;
  for (jint i = 0; i <= maxOrd; i++) {
    OrgApacheLuceneUtilBytesRef *term = [dv lookupOrdWithInt:i];
    JreAssert([((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) isValid], @"org/apache/lucene/index/CheckIndex.java:1819 condition failed: assert term.isValid();");
    if (lastValue != nil) {
      if ([term compareToWithId:lastValue] <= 0) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@$@", @"dv for field: ", fieldName, @" has ords out of order: ", lastValue, @" >=", term));
      }
    }
    lastValue = OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(term);
  }
}

void OrgApacheLuceneIndexCheckIndex_checkSortedSetDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedSetDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexSortedSetDocValues *dv, id<OrgApacheLuceneUtilBits> docsWithField) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jlong maxOrd = [((OrgApacheLuceneIndexSortedSetDocValues *) nil_chk(dv)) getValueCount] - 1;
  OrgApacheLuceneUtilLongBitSet *seenOrds = create_OrgApacheLuceneUtilLongBitSet_initWithLong_([dv getValueCount]);
  jlong maxOrd2 = -1;
  for (jint i = 0; i < maxDoc; i++) {
    [dv setDocumentWithInt:i];
    jlong lastOrd = -1;
    jlong ord;
    if ([((id<OrgApacheLuceneUtilBits>) nil_chk(docsWithField)) getWithInt:i]) {
      jint ordCount = 0;
      while ((ord = [dv nextOrd]) != OrgApacheLuceneIndexSortedSetDocValues_NO_MORE_ORDS) {
        if (ord <= lastOrd) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J$J$I", @"ords out of order: ", ord, @" <= ", lastOrd, @" for doc: ", i));
        }
        if (ord < 0 || ord > maxOrd) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J", @"ord out of bounds: ", ord));
        }
        if ([dv isKindOfClass:[OrgApacheLuceneIndexRandomAccessOrds class]]) {
          jlong ord2 = [((OrgApacheLuceneIndexRandomAccessOrds *) dv) ordAtWithInt:ordCount];
          if (ord != ord2) {
            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$J$J$I", @"ordAt(", ordCount, @") inconsistent, expected=", ord, @",got=", ord2, @" for doc: ", i));
          }
        }
        lastOrd = ord;
        maxOrd2 = JavaLangMath_maxWithLong_withLong_(maxOrd2, ord);
        [seenOrds setWithLong:ord];
        ordCount++;
      }
      if (ordCount == 0) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$I", @"dv for field: ", fieldName, @" has no ordinals but is not marked missing for doc: ", i));
      }
      if ([dv isKindOfClass:[OrgApacheLuceneIndexRandomAccessOrds class]]) {
        jlong ordCount2 = [((OrgApacheLuceneIndexRandomAccessOrds *) dv) cardinality];
        if (ordCount != ordCount2) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$J$I", @"cardinality inconsistent, expected=", ordCount, @",got=", ordCount2, @" for doc: ", i));
        }
      }
    }
    else {
      jlong o = [dv nextOrd];
      if (o != OrgApacheLuceneIndexSortedSetDocValues_NO_MORE_ORDS) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$J$I", @"dv for field: ", fieldName, @" is marked missing but has ord=", o, @" for doc: ", i));
      }
      if ([dv isKindOfClass:[OrgApacheLuceneIndexRandomAccessOrds class]]) {
        jlong ordCount2 = [((OrgApacheLuceneIndexRandomAccessOrds *) dv) cardinality];
        if (ordCount2 != 0) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$J$I", @"dv for field: ", fieldName, @" is marked missing but has cardinality ", ordCount2, @" for doc: ", i));
        }
      }
    }
  }
  if (maxOrd != maxOrd2) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$J$J", @"dv for field: ", fieldName, @" reports wrong maxOrd=", maxOrd, @" but this is not the case: ", maxOrd2));
  }
  if ([seenOrds cardinality] != [dv getValueCount]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$J$J", @"dv for field: ", fieldName, @" has holes in its ords, valueCount=", [dv getValueCount], @" but only used: ", [seenOrds cardinality]));
  }
  OrgApacheLuceneUtilBytesRef *lastValue = nil;
  for (jlong i = 0; i <= maxOrd; i++) {
    OrgApacheLuceneUtilBytesRef *term = [dv lookupOrdWithLong:i];
    JreAssert([((OrgApacheLuceneUtilBytesRef *) nil_chk(term)) isValid], @"org/apache/lucene/index/CheckIndex.java:1889 condition failed: assert term.isValid();");
    if (lastValue != nil) {
      if ([term compareToWithId:lastValue] <= 0) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@$@", @"dv for field: ", fieldName, @" has ords out of order: ", lastValue, @" >=", term));
      }
    }
    lastValue = OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(term);
  }
}

void OrgApacheLuceneIndexCheckIndex_checkSortedNumericDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedNumericDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexSortedNumericDocValues *ndv, id<OrgApacheLuceneUtilBits> docsWithField) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  for (jint i = 0; i < maxDoc; i++) {
    [((OrgApacheLuceneIndexSortedNumericDocValues *) nil_chk(ndv)) setDocumentWithInt:i];
    jint count = [ndv count];
    if ([((id<OrgApacheLuceneUtilBits>) nil_chk(docsWithField)) getWithInt:i]) {
      if (count == 0) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$I", @"dv for field: ", fieldName, @" is not marked missing but has zero count for doc: ", i));
      }
      jlong previous = JavaLangLong_MIN_VALUE;
      for (jint j = 0; j < count; j++) {
        jlong value = [ndv valueAtWithInt:j];
        if (value < previous) {
          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$J$J$I", @"values out of order: ", value, @" < ", previous, @" for doc: ", i));
        }
        previous = value;
      }
    }
    else {
      if (count != 0) {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$I$I", @"dv for field: ", fieldName, @" is marked missing but has count=", count, @" for doc: ", i));
      }
    }
  }
}

void OrgApacheLuceneIndexCheckIndex_checkNumericDocValuesWithNSString_withInt_withOrgApacheLuceneIndexNumericDocValues_withOrgApacheLuceneUtilBits_(NSString *fieldName, jint maxDoc, OrgApacheLuceneIndexNumericDocValues *ndv, id<OrgApacheLuceneUtilBits> docsWithField) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  for (jint i = 0; i < maxDoc; i++) {
    jlong value = [((OrgApacheLuceneIndexNumericDocValues *) nil_chk(ndv)) getWithInt:i];
    if ([((id<OrgApacheLuceneUtilBits>) nil_chk(docsWithField)) getWithInt:i] == false && value != 0) {
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$J$I", @"dv for field: ", fieldName, @" is marked missing but has value=", value, @" for doc: ", i));
    }
  }
}

void OrgApacheLuceneIndexCheckIndex_checkDocValuesWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneCodecsDocValuesProducer_withInt_withJavaIoPrintStream_withOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus_(OrgApacheLuceneIndexFieldInfo *fi, OrgApacheLuceneCodecsDocValuesProducer *dvReader, jint maxDoc, JavaIoPrintStream *infoStream, OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *status) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  id<OrgApacheLuceneUtilBits> docsWithField = JreRetainedLocalValue([((OrgApacheLuceneCodecsDocValuesProducer *) nil_chk(dvReader)) getDocsWithFieldWithOrgApacheLuceneIndexFieldInfo:fi]);
  if (docsWithField == nil) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->name_, @" docsWithField does not exist"));
  }
  else if ([docsWithField length] != maxDoc) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$I$I", ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->name_, @" docsWithField has incorrect length: ", [docsWithField length], @",expected: ", maxDoc));
  }
  switch ([[((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi)) getDocValuesType] ordinal]) {
    case OrgApacheLuceneIndexDocValuesType_Enum_SORTED:
    ((OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *) nil_chk(status))->totalSortedFields_++;
    OrgApacheLuceneIndexCheckIndex_checkSortedDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedDocValues_withOrgApacheLuceneUtilBits_(fi->name_, maxDoc, [dvReader getSortedWithOrgApacheLuceneIndexFieldInfo:fi], docsWithField);
    break;
    case OrgApacheLuceneIndexDocValuesType_Enum_SORTED_NUMERIC:
    ((OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *) nil_chk(status))->totalSortedNumericFields_++;
    OrgApacheLuceneIndexCheckIndex_checkSortedNumericDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedNumericDocValues_withOrgApacheLuceneUtilBits_(fi->name_, maxDoc, [dvReader getSortedNumericWithOrgApacheLuceneIndexFieldInfo:fi], docsWithField);
    break;
    case OrgApacheLuceneIndexDocValuesType_Enum_SORTED_SET:
    ((OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *) nil_chk(status))->totalSortedSetFields_++;
    OrgApacheLuceneIndexCheckIndex_checkSortedSetDocValuesWithNSString_withInt_withOrgApacheLuceneIndexSortedSetDocValues_withOrgApacheLuceneUtilBits_(fi->name_, maxDoc, [dvReader getSortedSetWithOrgApacheLuceneIndexFieldInfo:fi], docsWithField);
    break;
    case OrgApacheLuceneIndexDocValuesType_Enum_BINARY:
    ((OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *) nil_chk(status))->totalBinaryFields_++;
    OrgApacheLuceneIndexCheckIndex_checkBinaryDocValuesWithNSString_withInt_withOrgApacheLuceneIndexBinaryDocValues_withOrgApacheLuceneUtilBits_(fi->name_, maxDoc, [dvReader getBinaryWithOrgApacheLuceneIndexFieldInfo:fi], docsWithField);
    break;
    case OrgApacheLuceneIndexDocValuesType_Enum_NUMERIC:
    ((OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *) nil_chk(status))->totalNumericFields_++;
    OrgApacheLuceneIndexCheckIndex_checkNumericDocValuesWithNSString_withInt_withOrgApacheLuceneIndexNumericDocValues_withOrgApacheLuceneUtilBits_(fi->name_, maxDoc, [dvReader getNumericWithOrgApacheLuceneIndexFieldInfo:fi], docsWithField);
    break;
    default:
    @throw create_JavaLangAssertionError_init();
  }
}

OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_(OrgApacheLuceneIndexCodecReader *reader, JavaIoPrintStream *infoStream) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  return OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_withBoolean_withBoolean_(reader, infoStream, false, false, false);
}

OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *OrgApacheLuceneIndexCheckIndex_testTermVectorsWithOrgApacheLuceneIndexCodecReader_withJavaIoPrintStream_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneIndexCodecReader *reader, JavaIoPrintStream *infoStream, jboolean verbose, jboolean crossCheckTermVectors, jboolean failFast) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jlong startNS = JavaLangSystem_nanoTime();
  OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *status = create_OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init();
  OrgApacheLuceneIndexFieldInfos *fieldInfos = [((OrgApacheLuceneIndexCodecReader *) nil_chk(reader)) getFieldInfos];
  @try {
    if (infoStream != nil) {
      [infoStream printWithNSString:@"    test: term vectors........"];
    }
    OrgApacheLuceneIndexPostingsEnum *postings = nil;
    OrgApacheLuceneIndexPostingsEnum *postingsDocs = nil;
    id<OrgApacheLuceneUtilBits> liveDocs = [reader getLiveDocs];
    OrgApacheLuceneIndexFields *postingsFields;
    if (crossCheckTermVectors) {
      postingsFields = [((OrgApacheLuceneCodecsFieldsProducer *) nil_chk([reader getPostingsReader])) getMergeInstance];
    }
    else {
      postingsFields = nil;
    }
    OrgApacheLuceneCodecsTermVectorsReader *vectorsReader = JreRetainedLocalValue([reader getTermVectorsReader]);
    if (vectorsReader != nil) {
      vectorsReader = [vectorsReader getMergeInstance];
      for (jint j = 0; j < [reader maxDoc]; ++j) {
        OrgApacheLuceneIndexFields *tfv = JreRetainedLocalValue([((OrgApacheLuceneCodecsTermVectorsReader *) nil_chk(vectorsReader)) getWithInt:j]);
        if (tfv != nil) {
          OrgApacheLuceneIndexCheckIndex_checkFieldsWithOrgApacheLuceneIndexFields_withOrgApacheLuceneUtilBits_withInt_withOrgApacheLuceneIndexFieldInfos_withBoolean_withBoolean_withJavaIoPrintStream_withBoolean_(tfv, nil, 1, fieldInfos, false, true, infoStream, verbose);
          jboolean doStats = liveDocs == nil || [liveDocs getWithInt:j];
          if (doStats) {
            status->docCount_++;
          }
          for (NSString * __strong field in tfv) {
            if (doStats) {
              status->totVectors_++;
            }
            OrgApacheLuceneIndexFieldInfo *fieldInfo = [((OrgApacheLuceneIndexFieldInfos *) nil_chk(fieldInfos)) fieldInfoWithNSString:field];
            if (![((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo)) hasVectors]) {
              @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$$$", @"docID=", j, @" has term vectors for field=", field, @" but FieldInfo has storeTermVector=false"));
            }
            if (crossCheckTermVectors) {
              OrgApacheLuceneIndexTerms *terms = JreRetainedLocalValue([tfv termsWithNSString:field]);
              OrgApacheLuceneIndexTermsEnum *termsEnum = JreRetainedLocalValue([((OrgApacheLuceneIndexTerms *) nil_chk(terms)) iterator]);
              jboolean postingsHasFreq = [((OrgApacheLuceneIndexIndexOptions *) nil_chk([fieldInfo getIndexOptions])) compareToWithId:JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS)] >= 0;
              jboolean postingsHasPayload = [fieldInfo hasPayloads];
              jboolean vectorsHasPayload = [terms hasPayloads];
              OrgApacheLuceneIndexTerms *postingsTerms = JreRetainedLocalValue([((OrgApacheLuceneIndexFields *) nil_chk(postingsFields)) termsWithNSString:field]);
              if (postingsTerms == nil) {
                @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$I", @"vector field=", field, @" does not exist in postings; doc=", j));
              }
              OrgApacheLuceneIndexTermsEnum *postingsTermsEnum = JreRetainedLocalValue([postingsTerms iterator]);
              jboolean hasProx = [terms hasOffsets] || [terms hasPositions];
              OrgApacheLuceneUtilBytesRef *term = nil;
              while ((term = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next]) != nil) {
                postings = [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:postings withInt:OrgApacheLuceneIndexPostingsEnum_ALL];
                JreAssert(postings != nil, @"org/apache/lucene/index/CheckIndex.java:2056 condition failed: assert postings != null;");
                if (![((OrgApacheLuceneIndexTermsEnum *) nil_chk(postingsTermsEnum)) seekExactWithOrgApacheLuceneUtilBytesRef:term]) {
                  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$I", @"vector term=", term, @" field=", field, @" does not exist in postings; doc=", j));
                }
                postingsDocs = [postingsTermsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:postingsDocs withInt:OrgApacheLuceneIndexPostingsEnum_ALL];
                JreAssert(postingsDocs != nil, @"org/apache/lucene/index/CheckIndex.java:2064 condition failed: assert postingsDocs != null;");
                jint advanceDoc = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postingsDocs)) advanceWithInt:j];
                if (advanceDoc != j) {
                  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$I$IC", @"vector term=", term, @" field=", field, @": doc=", j, @" was not found in postings (got: ", advanceDoc, ')'));
                }
                jint doc = [((OrgApacheLuceneIndexPostingsEnum *) nil_chk(postings)) nextDoc];
                if (doc != 0) {
                  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I$I", @"vector for doc ", j, @" didn't return docID=0: got docID=", doc));
                }
                if (postingsHasFreq) {
                  jint tf = [postings freq];
                  if (postingsHasFreq && [postingsDocs freq] != tf) {
                    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$I$I$I", @"vector term=", term, @" field=", field, @" doc=", j, @": freq=", tf, @" differs from postings freq=", [postingsDocs freq]));
                  }
                  if (hasProx) {
                    for (jint i = 0; i < tf; i++) {
                      jint pos = [postings nextPosition];
                      if ([postingsTerms hasPositions]) {
                        jint postingsPos = [postingsDocs nextPosition];
                        if ([terms hasPositions] && pos != postingsPos) {
                          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$I$I$I", @"vector term=", term, @" field=", field, @" doc=", j, @": pos=", pos, @" differs from postings pos=", postingsPos));
                        }
                      }
                      jint startOffset = [postings startOffset];
                      jint endOffset = [postings endOffset];
                      if (startOffset != -1 && endOffset != -1 && [postingsTerms hasOffsets]) {
                        jint postingsStartOffset = [postingsDocs startOffset];
                        jint postingsEndOffset = [postingsDocs endOffset];
                        if (startOffset != postingsStartOffset) {
                          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$I$I$I", @"vector term=", term, @" field=", field, @" doc=", j, @": startOffset=", startOffset, @" differs from postings startOffset=", postingsStartOffset));
                        }
                        if (endOffset != postingsEndOffset) {
                          @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$I$I$I", @"vector term=", term, @" field=", field, @" doc=", j, @": endOffset=", endOffset, @" differs from postings endOffset=", postingsEndOffset));
                        }
                      }
                      OrgApacheLuceneUtilBytesRef *payload = JreRetainedLocalValue([postings getPayload]);
                      if (payload != nil) {
                        JreAssert(vectorsHasPayload, @"org/apache/lucene/index/CheckIndex.java:2124 condition failed: assert vectorsHasPayload;");
                      }
                      if (postingsHasPayload && vectorsHasPayload) {
                        if (payload == nil) {
                          if ([postingsDocs getPayload] != nil) {
                            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$I$@", @"vector term=", term, @" field=", field, @" doc=", j, @" has no payload but postings does: ", [postingsDocs getPayload]));
                          }
                        }
                        else {
                          if ([postingsDocs getPayload] == nil) {
                            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$I$@$", @"vector term=", term, @" field=", field, @" doc=", j, @" has payload=", payload, @" but postings does not."));
                          }
                          OrgApacheLuceneUtilBytesRef *postingsPayload = JreRetainedLocalValue([postingsDocs getPayload]);
                          if (![payload isEqual:postingsPayload]) {
                            @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$$$I$@$@", @"vector term=", term, @" field=", field, @" doc=", j, @" has payload=", payload, @" but differs from postings payload=", postingsPayload));
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    jfloat vectorAvg = status->docCount_ == 0 ? 0 : status->totVectors_ / (jfloat) status->docCount_;
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangLong_valueOfWithLong_(status->totVectors_), JavaLangFloat_valueOfWithFloat_(vectorAvg), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(JavaLangSystem_nanoTime() - startNS)) } count:3 type:NSObject_class_()]));
  }
  @catch (JavaLangThrowable *e) {
    if (failFast) {
      OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(e);
    }
    OrgApacheLuceneIndexCheckIndex_msgWithJavaIoPrintStream_withNSString_(infoStream, JreStrcat("$$C", @"ERROR [", NSString_java_valueOf_([e getMessage]), ']'));
    JreStrongAssign(&status->error_, e);
    if (infoStream != nil) {
      [e printStackTraceWithJavaIoPrintStream:infoStream];
    }
  }
  return status;
}

jboolean OrgApacheLuceneIndexCheckIndex_testAsserts() {
  OrgApacheLuceneIndexCheckIndex_initialize();
  OrgApacheLuceneIndexCheckIndex_assertsOn_ = true;
  return true;
}

jboolean OrgApacheLuceneIndexCheckIndex_assertsOn() {
  OrgApacheLuceneIndexCheckIndex_initialize();
  JreAssert(OrgApacheLuceneIndexCheckIndex_testAsserts(), @"org/apache/lucene/index/CheckIndex.java:2200 condition failed: assert testAsserts();");
  return OrgApacheLuceneIndexCheckIndex_assertsOn_;
}

void OrgApacheLuceneIndexCheckIndex_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jint exitCode = OrgApacheLuceneIndexCheckIndex_doMainWithNSStringArray_(args);
  JavaLangSystem_exitWithInt_(exitCode);
}

jint OrgApacheLuceneIndexCheckIndex_doMainWithNSStringArray_(IOSObjectArray *args) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  jboolean doExorcise = false;
  jboolean doCrossCheckTermVectors = false;
  jboolean verbose = false;
  jboolean doChecksumsOnly = false;
  id<JavaUtilList> onlySegments = create_JavaUtilArrayList_init();
  NSString *indexPath = nil;
  NSString *dirImpl = nil;
  jint i = 0;
  while (i < ((IOSObjectArray *) nil_chk(args))->size_) {
    NSString *arg = IOSObjectArray_Get(args, i);
    if ([@"-fast" isEqual:arg]) {
      doChecksumsOnly = true;
    }
    else if ([@"-exorcise" isEqual:arg]) {
      doExorcise = true;
    }
    else if ([@"-crossCheckTermVectors" isEqual:arg]) {
      doCrossCheckTermVectors = true;
    }
    else if ([((NSString *) nil_chk(arg)) isEqual:@"-verbose"]) {
      verbose = true;
    }
    else if ([arg isEqual:@"-segment"]) {
      if (i == args->size_ - 1) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ERROR: missing name for -segment option"];
        return 1;
      }
      i++;
      [onlySegments addWithId:IOSObjectArray_Get(args, i)];
    }
    else if ([@"-dir-impl" isEqual:arg]) {
      if (i == args->size_ - 1) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ERROR: missing value for -dir-impl option"];
        return 1;
      }
      i++;
      dirImpl = IOSObjectArray_Get(args, i);
    }
    else {
      if (indexPath != nil) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"ERROR: unexpected extra argument '", IOSObjectArray_Get(args, i), '\'')];
        return 1;
      }
      indexPath = IOSObjectArray_Get(args, i);
    }
    i++;
  }
  if (indexPath == nil) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nERROR: index path not specified"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$$", @"\nUsage: java org.apache.lucene.index.CheckIndex pathToIndex [-exorcise] [-crossCheckTermVectors] [-segment X] [-segment Y] [-dir-impl X]\n\n  -exorcise: actually write a new segments_N file, removing any problematic segments\n  -fast: just verify file checksums, omitting logical integrity checks\n  -crossCheckTermVectors: verifies that term vectors match postings; THIS IS VERY SLOW!\n  -codec X: when exorcising, codec to write the new segments_N file with\n  -verbose: print additional details\n  -segment X: only check the specified segments.  This can be specified multiple\n              times, to check more than one segment, eg '-segment _2 -segment _a'.\n              You can't use this with the -exorcise option\n  -dir-impl X: use a specific ", [OrgApacheLuceneStoreFSDirectory_class_() getSimpleName], @" implementation. If no package is specified the ", [((JavaLangPackage *) nil_chk([OrgApacheLuceneStoreFSDirectory_class_() getPackage])) getName], @" package will be used.\n\n**WARNING**: -exorcise *LOSES DATA*. This should only be used on an emergency basis as it will cause\ndocuments (perhaps many) to be permanently removed from the index.  Always make\na backup copy of your index before running this!  Do not run this tool on an index\nthat is actively being written to.  You have been warned!\n\nRun without -exorcise, this tool will open the index, report version information\nand report any exceptions it hits and what action it would take if -exorcise were\nspecified.  With -exorcise, this tool will remove any segments that have issues and\nwrite a new segments_N file.  This means all documents contained in the affected\nsegments will be removed.\n\nThis tool exits with exit code 1 if the index cannot be opened or has any\ncorruption, else 0.\n")];
    return 1;
  }
  if (!OrgApacheLuceneIndexCheckIndex_assertsOn()) [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\nNOTE: testing will be more thorough if you run java with '-ea:org.apache.lucene...', so assertions are enabled"];
  if ([onlySegments size] == 0) onlySegments = nil;
  else if (doExorcise) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ERROR: cannot specify both -exorcise and -segment"];
    return 1;
  }
  if (doChecksumsOnly && doCrossCheckTermVectors) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"ERROR: cannot specify both -fast and -crossCheckTermVectors"];
    return 1;
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"\nOpening index @ ", indexPath, 0x000a)];
  OrgApacheLuceneStoreDirectory *directory = nil;
  OrgLukhnosPortmobileFilePath *path = OrgLukhnosPortmobileFilePaths_getWithNSString_(indexPath);
  @try {
    if (dirImpl == nil) {
      directory = OrgApacheLuceneStoreFSDirectory_openWithOrgLukhnosPortmobileFilePath_(path);
    }
    else {
      directory = OrgApacheLuceneUtilCommandLineUtil_newFSDirectoryWithNSString_withOrgLukhnosPortmobileFilePath_(dirImpl, path);
    }
  }
  @catch (JavaLangThrowable *t) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"ERROR: could not open directory \"", indexPath, @"\"; exiting")];
    [t printStackTraceWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out)];
    return 1;
  }
  {
    OrgApacheLuceneStoreDirectory *dir = directory;
    JavaLangThrowable *__primaryException2 = nil;
    @try {
      OrgApacheLuceneIndexCheckIndex *checker = create_OrgApacheLuceneIndexCheckIndex_initWithOrgApacheLuceneStoreDirectory_(dir);
      JavaLangThrowable *__primaryException1 = nil;
      @try {
        [checker setCrossCheckTermVectorsWithBoolean:doCrossCheckTermVectors];
        [checker setChecksumsOnlyWithBoolean:doChecksumsOnly];
        [checker setInfoStreamWithJavaIoPrintStream:JreLoadStatic(JavaLangSystem, out) withBoolean:verbose];
        OrgApacheLuceneIndexCheckIndex_Status *result = JreRetainedLocalValue([checker checkIndexWithJavaUtilList:onlySegments]);
        if (((OrgApacheLuceneIndexCheckIndex_Status *) nil_chk(result))->missingSegments_) {
          return 1;
        }
        if (!result->clean_) {
          if (!doExorcise) {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"WARNING: would write new segments file, and ", result->totLoseDocCount_, @" documents would be lost, if -exorcise were specified\n")];
          }
          else {
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"WARNING: ", result->totLoseDocCount_, @" documents will be lost\n")];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"NOTE: will write new segments file in 5 seconds; this will remove ", result->totLoseDocCount_, @" docs from the index. YOU WILL LOSE DATA. THIS IS YOUR LAST CHANCE TO CTRL+C!")];
            for (jint s = 0; s < 5; s++) {
              JavaLangThread_sleepWithLong_(1000);
              [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"  ", (5 - s), @"...")];
            }
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Writing..."];
            [checker exorciseIndexWithOrgApacheLuceneIndexCheckIndex_Status:result];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"OK"];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"Wrote new segments file \"", [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(result->newSegments_)) getSegmentsFileName], '"')];
          }
        }
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@""];
        if (result->clean_ == true) {
          return 0;
        }
        else {
          return 1;
        }
      }
      @catch (JavaLangThrowable *e) {
        __primaryException1 = e;
        @throw e;
      }
      @finally {
        if (checker != nil) {
          if (__primaryException1 != nil) {
            @try {
              [checker close];
            }
            @catch (JavaLangThrowable *e) {
              [__primaryException1 addSuppressedWithJavaLangThrowable:e];
            }
          }
          else {
            [checker close];
          }
        }
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException2 = e;
      @throw e;
    }
    @finally {
      if (dir != nil) {
        if (__primaryException2 != nil) {
          @try {
            [dir close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException2 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [dir close];
        }
      }
    }
  }
}

jdouble OrgApacheLuceneIndexCheckIndex_nsToSecWithLong_(jlong ns) {
  OrgApacheLuceneIndexCheckIndex_initialize();
  return ns / 1000000000.0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex)

@implementation OrgApacheLuceneIndexCheckIndex_Status

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(segmentsFileName_);
  RELEASE_(segmentsChecked_);
  RELEASE_(segmentInfos_);
  RELEASE_(dir_);
  RELEASE_(newSegments_);
  RELEASE_(userData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "clean_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "missingSegments_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "cantOpenSegments_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "missingSegmentVersion_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segmentsFileName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numSegments_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segmentsChecked_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 0, -1 },
    { "toolOutOfDate_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "segmentInfos_", "LJavaUtilList;", .constantValue.asLong = 0, 0x1, -1, -1, 1, -1 },
    { "dir_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "newSegments_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "totLoseDocCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numBadSegments_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "partial_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "maxSegmentName_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "validCounter_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "userData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1, -1, -1, 2, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Lorg/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgApacheLuceneIndexCheckIndex;", "LOrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus;LOrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus;LOrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus;LOrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus;LOrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;LOrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus;LOrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus;LOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status = { "Status", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x9, 1, 17, 3, 4, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_init(OrgApacheLuceneIndexCheckIndex_Status *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->segmentsChecked_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->segmentInfos_, new_JavaUtilArrayList_init());
}

OrgApacheLuceneIndexCheckIndex_Status *new_OrgApacheLuceneIndexCheckIndex_Status_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status, init)
}

OrgApacheLuceneIndexCheckIndex_Status *create_OrgApacheLuceneIndexCheckIndex_Status_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status)

@implementation OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(codec_);
  RELEASE_(diagnostics_);
  RELEASE_(liveDocStatus_);
  RELEASE_(fieldInfoStatus_);
  RELEASE_(fieldNormStatus_);
  RELEASE_(termIndexStatus_);
  RELEASE_(storedFieldStatus_);
  RELEASE_(termVectorStatus_);
  RELEASE_(docValuesStatus_);
  RELEASE_(version__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "codec_", "LOrgApacheLuceneCodecsCodec;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "maxDoc_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "compound_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "numFiles_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "sizeMB_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hasDeletions_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "deletionsGen_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "openReaderPassed_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "diagnostics_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1, -1, -1, 0, -1 },
    { "liveDocStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "fieldInfoStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "fieldNormStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "termIndexStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "storedFieldStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "termVectorStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "docValuesStatus_", "LOrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "version__", "LOrgApacheLuceneUtilVersion;", .constantValue.asLong = 0, 0x1, 1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "version", "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus = { "SegmentInfoStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x9, 1, 18, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init(OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus *new_OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus *create_OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_SegmentInfoStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "numDeleted_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus = { "LiveDocStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 2, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus_init(OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *self) {
  NSObject_init(self);
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *new_OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus *create_OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_LiveDocStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "totFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus = { "FieldInfoStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 2, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus_init(OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *self) {
  NSObject_init(self);
  self->totFields_ = 0LL;
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *new_OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus *create_OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_FieldInfoStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "totFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus = { "FieldNormStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 2, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init(OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *self) {
  NSObject_init(self);
  self->totFields_ = 0LL;
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *new_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus *create_OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_FieldNormStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  RELEASE_(blockTreeStats_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termCount_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "delTermCount_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totFreq_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totPos_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "blockTreeStats_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1, -1, -1, 0, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus = { "TermIndexStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 6, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init(OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *self) {
  NSObject_init(self);
  self->termCount_ = 0LL;
  self->delTermCount_ = 0LL;
  self->totFreq_ = 0LL;
  self->totPos_ = 0LL;
  JreStrongAssign(&self->error_, nil);
  JreStrongAssign(&self->blockTreeStats_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *new_OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus *create_OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_TermIndexStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus = { "StoredFieldStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 3, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init(OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *self) {
  NSObject_init(self);
  self->docCount_ = 0;
  self->totFields_ = 0;
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *new_OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus *create_OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_StoredFieldStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "docCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totVectors_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus = { "TermVectorStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 3, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init(OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *self) {
  NSObject_init(self);
  self->docCount_ = 0;
  self->totVectors_ = 0;
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *new_OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus *create_OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_TermVectorStatus)

@implementation OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(error_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "totalValueFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalNumericFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalBinaryFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalSortedFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalSortedNumericFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "totalSortedSetFields_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "error_", "LJavaLangThrowable;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexCheckIndex_Status;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus = { "DocValuesStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x19, 1, 7, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus;
}

@end

void OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus_init(OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *self) {
  NSObject_init(self);
  JreStrongAssign(&self->error_, nil);
}

OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *new_OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus, init)
}

OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus *create_OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexCheckIndex_Status_DocValuesStatus)
