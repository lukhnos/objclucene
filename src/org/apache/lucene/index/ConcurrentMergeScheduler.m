//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Runtime.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeRateLimiter.h"
#include "org/apache/lucene/index/MergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/CollectionUtil.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/ConcurrentMergeScheduler must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexConcurrentMergeScheduler () {
 @public
  jint maxThreadCount_;
  jint maxMergeCount_;
  /*!
   @brief true if we should rate-limit writes for each merge
   */
  jboolean doAutoIOThrottle_;
  jdouble forceMergeMBPerSec_;
  jboolean suppressExceptions_;
}

- (void)initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer OBJC_METHOD_FAMILY_NONE;

+ (NSString *)rateToStringWithDouble:(jdouble)mbPerSec;

- (jboolean)isBacklogWithLong:(jlong)now
withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge;

/*!
 @brief Tunes IO throttle when a new merge starts.
 */
- (void)updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)newMerge;

+ (jdouble)nsToSecWithLong:(jlong)ns;

+ (jdouble)bytesToMBWithLong:(jlong)bytes;

@end

/*!
 @brief Floor for IO write rate limit (we will never go any lower than this)
 */
inline jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_get_MIN_MERGE_MB_PER_SEC(void);
#define OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_MERGE_MB_PER_SEC 5.0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexConcurrentMergeScheduler, MIN_MERGE_MB_PER_SEC, jdouble)

/*!
 @brief Ceiling for IO write rate limit (we will never go any higher than this)
 */
inline jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_get_MAX_MERGE_MB_PER_SEC(void);
#define OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC 10240.0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexConcurrentMergeScheduler, MAX_MERGE_MB_PER_SEC, jdouble)

/*!
 @brief Initial value for IO write rate limit when doAutoIOThrottle is true
 */
inline jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_get_START_MB_PER_SEC(void);
#define OrgApacheLuceneIndexConcurrentMergeScheduler_START_MB_PER_SEC 20.0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexConcurrentMergeScheduler, START_MB_PER_SEC, jdouble)

/*!
 @brief Merges below this size are not counted in the maxThreadCount, i.e.they can freely run in their own thread (up until maxMergeCount).
 */
inline jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_get_MIN_BIG_MERGE_MB(void);
#define OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB 50.0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexConcurrentMergeScheduler, MIN_BIG_MERGE_MB, jdouble)

__attribute__((unused)) static void OrgApacheLuceneIndexConcurrentMergeScheduler_initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, OrgApacheLuceneIndexIndexWriter *writer);

__attribute__((unused)) static NSString *OrgApacheLuceneIndexConcurrentMergeScheduler_rateToStringWithDouble_(jdouble mbPerSec);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, jlong now, OrgApacheLuceneIndexMergePolicy_OneMerge *merge);

__attribute__((unused)) static void OrgApacheLuceneIndexConcurrentMergeScheduler_updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, OrgApacheLuceneIndexMergePolicy_OneMerge *newMerge);

__attribute__((unused)) static jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(jlong ns);

__attribute__((unused)) static jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(jlong bytes);

@interface OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread () {
 @public
  OrgApacheLuceneIndexConcurrentMergeScheduler *this$0_;
}

@end

NSString *OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_CPU_CORE_COUNT_PROPERTY = @"lucene.cms.override_core_count";
NSString *OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_SPINS_PROPERTY = @"lucene.cms.override_spins";

@implementation OrgApacheLuceneIndexConcurrentMergeScheduler

+ (jint)AUTO_DETECT_MERGES_AND_THREADS {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS;
}

+ (NSString *)DEFAULT_CPU_CORE_COUNT_PROPERTY {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_CPU_CORE_COUNT_PROPERTY;
}

+ (NSString *)DEFAULT_SPINS_PROPERTY {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_SPINS_PROPERTY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexConcurrentMergeScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setMaxMergesAndThreadsWithInt:(jint)maxMergeCount
                              withInt:(jint)maxThreadCount {
  @synchronized(self) {
    if (maxMergeCount == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS && maxThreadCount == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS) {
      self->maxMergeCount_ = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS;
      self->maxThreadCount_ = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS;
    }
    else if (maxMergeCount == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"both maxMergeCount and maxThreadCount must be AUTO_DETECT_MERGES_AND_THREADS");
    }
    else if (maxThreadCount == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"both maxMergeCount and maxThreadCount must be AUTO_DETECT_MERGES_AND_THREADS");
    }
    else {
      if (maxThreadCount < 1) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxThreadCount should be at least 1");
      }
      if (maxMergeCount < 1) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxMergeCount should be at least 1");
      }
      if (maxThreadCount > maxMergeCount) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"maxThreadCount should be <= maxMergeCount (= ", maxMergeCount, ')'));
      }
      self->maxThreadCount_ = maxThreadCount;
      self->maxMergeCount_ = maxMergeCount;
    }
  }
}

- (void)setDefaultMaxMergesAndThreadsWithBoolean:(jboolean)spins {
  @synchronized(self) {
    if (spins) {
      maxThreadCount_ = 1;
      maxMergeCount_ = 6;
    }
    else {
      jint coreCount = [((JavaLangRuntime *) nil_chk(JavaLangRuntime_getRuntime())) availableProcessors];
      @try {
        NSString *value = JavaLangSystem_getPropertyWithNSString_(OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_CPU_CORE_COUNT_PROPERTY);
        if (value != nil) {
          coreCount = JavaLangInteger_parseIntWithNSString_(value);
        }
      }
      @catch (JavaLangThrowable *ignored) {
      }
      maxThreadCount_ = JavaLangMath_maxWithInt_withInt_(1, JavaLangMath_minWithInt_withInt_(4, JreIntDiv(coreCount, 2)));
      maxMergeCount_ = maxThreadCount_ + 5;
    }
  }
}

- (void)setForceMergeMBPerSecWithDouble:(jdouble)v {
  @synchronized(self) {
    forceMergeMBPerSec_ = v;
    [self updateMergeThreads];
  }
}

- (jdouble)getForceMergeMBPerSec {
  @synchronized(self) {
    return forceMergeMBPerSec_;
  }
}

- (void)enableAutoIOThrottle {
  @synchronized(self) {
    doAutoIOThrottle_ = true;
    targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_START_MB_PER_SEC;
    [self updateMergeThreads];
  }
}

- (void)disableAutoIOThrottle {
  @synchronized(self) {
    doAutoIOThrottle_ = false;
    [self updateMergeThreads];
  }
}

- (jboolean)getAutoIOThrottle {
  @synchronized(self) {
    return doAutoIOThrottle_;
  }
}

- (jdouble)getIORateLimitMBPerSec {
  @synchronized(self) {
    if (doAutoIOThrottle_) {
      return targetMBPerSec_;
    }
    else {
      return JavaLangDouble_POSITIVE_INFINITY;
    }
  }
}

- (jint)getMaxThreadCount {
  @synchronized(self) {
    return maxThreadCount_;
  }
}

- (jint)getMaxMergeCount {
  @synchronized(self) {
    return maxMergeCount_;
  }
}

- (void)removeMergeThread {
  @synchronized(self) {
    JavaLangThread *currentThread = JavaLangThread_currentThread();
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(mergeThreads_)) size]; i++) {
      if (JreObjectEqualsEquals([mergeThreads_ getWithInt:i], currentThread)) {
        [mergeThreads_ removeWithInt:i];
        return;
      }
    }
    JreAssert(false, JreStrcat("$@$", @"merge thread ", currentThread, @" was not found"));
  }
}

- (void)updateMergeThreads {
  @synchronized(self) {
    id<JavaUtilList> activeMerges = create_JavaUtilArrayList_init();
    jint threadIdx = 0;
    while (threadIdx < [((id<JavaUtilList>) nil_chk(mergeThreads_)) size]) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *mergeThread = [mergeThreads_ getWithInt:threadIdx];
      if (![((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread)) isAlive]) {
        [mergeThreads_ removeWithInt:threadIdx];
        continue;
      }
      [activeMerges addWithId:mergeThread];
      threadIdx++;
    }
    OrgApacheLuceneUtilCollectionUtil_timSortWithJavaUtilList_(activeMerges);
    jint activeMergeCount = [activeMerges size];
    jint bigMergeCount = 0;
    for (threadIdx = activeMergeCount - 1; threadIdx >= 0; threadIdx--) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *mergeThread = JreRetainedLocalValue([activeMerges getWithInt:threadIdx]);
      if (JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread))->merge_))->estimatedMergeBytes_) > OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB * 1024 * 1024) {
        bigMergeCount = 1 + threadIdx;
        break;
      }
    }
    jlong now = JavaLangSystem_nanoTime();
    JavaLangStringBuilder *message;
    if ([self verbose]) {
      message = create_JavaLangStringBuilder_init();
      [message appendWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"updateMergeThreads ioThrottle=%s targetMBPerSec=%.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(doAutoIOThrottle_), JavaLangDouble_valueOfWithDouble_(targetMBPerSec_) } count:2 type:NSObject_class_()])];
    }
    else {
      message = nil;
    }
    for (threadIdx = 0; threadIdx < activeMergeCount; threadIdx++) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *mergeThread = JreRetainedLocalValue([activeMerges getWithInt:threadIdx]);
      OrgApacheLuceneIndexMergePolicy_OneMerge *merge = JreRetainedLocalValue(((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread))->merge_);
      jboolean doPause = threadIdx < bigMergeCount - maxThreadCount_;
      jdouble newMBPerSec;
      if (doPause) {
        newMBPerSec = 0.0;
      }
      else if (((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->maxNumSegments_ != -1) {
        newMBPerSec = forceMergeMBPerSec_;
      }
      else if (doAutoIOThrottle_ == false) {
        newMBPerSec = JavaLangDouble_POSITIVE_INFINITY;
      }
      else if (JreLoadVolatileLong(&merge->estimatedMergeBytes_) < OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB * 1024 * 1024) {
        newMBPerSec = JavaLangDouble_POSITIVE_INFINITY;
      }
      else {
        newMBPerSec = targetMBPerSec_;
      }
      jdouble curMBPerSec = [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->rateLimiter_)) getMBPerSec];
      if ([self verbose]) {
        jlong mergeStartNS = JreLoadVolatileLong(&merge->mergeStartNS_);
        if (mergeStartNS == -1) {
          mergeStartNS = now;
        }
        [((JavaLangStringBuilder *) nil_chk(message)) appendWithChar:0x000a];
        [message appendWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"merge thread %s estSize=%.1f MB (written=%.1f MB) runTime=%.1fs (stopped=%.1fs, paused=%.1fs) rate=%s\n", [IOSObjectArray arrayWithObjects:(id[]){ [mergeThread getName], JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&merge->estimatedMergeBytes_))), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&merge->rateLimiter_->totalBytesWritten_))), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(now - mergeStartNS)), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_([merge->rateLimiter_ getTotalStoppedNS])), JavaLangDouble_valueOfWithDouble_(OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_([merge->rateLimiter_ getTotalPausedNS])), OrgApacheLuceneIndexConcurrentMergeScheduler_rateToStringWithDouble_([merge->rateLimiter_ getMBPerSec]) } count:7 type:NSObject_class_()])];
        if (newMBPerSec != curMBPerSec) {
          if (newMBPerSec == 0.0) {
            [message appendWithNSString:@"  now stop"];
          }
          else if (curMBPerSec == 0.0) {
            if (newMBPerSec == JavaLangDouble_POSITIVE_INFINITY) {
              [message appendWithNSString:@"  now resume"];
            }
            else {
              [message appendWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"  now resume to %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(newMBPerSec) } count:1 type:NSObject_class_()])];
            }
          }
          else {
            [message appendWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"  now change from %.1f MB/sec to %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(curMBPerSec), JavaLangDouble_valueOfWithDouble_(newMBPerSec) } count:2 type:NSObject_class_()])];
          }
        }
        else if (curMBPerSec == 0.0) {
          [message appendWithNSString:@"  leave stopped"];
        }
        else {
          [message appendWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"  leave running at %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(curMBPerSec) } count:1 type:NSObject_class_()])];
        }
      }
      [merge->rateLimiter_ setMBPerSecWithDouble:newMBPerSec];
    }
    if ([self verbose]) {
      [self messageWithNSString:[((JavaLangStringBuilder *) nil_chk(message)) description]];
    }
  }
}

- (void)initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter_(self, writer);
}

+ (NSString *)rateToStringWithDouble:(jdouble)mbPerSec {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_rateToStringWithDouble_(mbPerSec);
}

- (void)close {
  [self sync];
}

- (void)sync {
  jboolean interrupted = false;
  @try {
    while (true) {
      OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *toSync = nil;
      @synchronized(self) {
        for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong t in nil_chk(mergeThreads_)) {
          if ([((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(t)) isAlive] && !JreObjectEqualsEquals(t, JavaLangThread_currentThread())) {
            toSync = JreRetainedLocalValue(t);
            break;
          }
        }
      }
      if (toSync != nil) {
        @try {
          [toSync join];
        }
        @catch (JavaLangInterruptedException *ie) {
          interrupted = true;
        }
      }
      else {
        break;
      }
    }
  }
  @finally {
    if (interrupted) [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
  }
}

- (jint)mergeThreadCount {
  @synchronized(self) {
    JavaLangThread *currentThread = JavaLangThread_currentThread();
    jint count = 0;
    for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong mergeThread in nil_chk(mergeThreads_)) {
      if (!JreObjectEqualsEquals(currentThread, mergeThread) && [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread)) isAlive] && [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(mergeThread->merge_))->rateLimiter_)) getAbort] == false) {
        count++;
      }
    }
    return count;
  }
}

- (void)mergeWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
            withOrgApacheLuceneIndexMergeTrigger:(OrgApacheLuceneIndexMergeTrigger *)trigger
                                     withBoolean:(jboolean)newMergesFound {
  @synchronized(self) {
    JreAssert(!JavaLangThread_holdsLockWithId_(writer), @"org/apache/lucene/index/ConcurrentMergeScheduler.java:462 condition failed: assert !Thread.holdsLock(writer);");
    OrgApacheLuceneIndexConcurrentMergeScheduler_initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter_(self, writer);
    if (trigger == JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, CLOSING)) {
      targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC;
      [self updateMergeThreads];
    }
    if ([self verbose]) {
      [self messageWithNSString:@"now merge"];
      [self messageWithNSString:JreStrcat("$$", @"  index: ", [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) segString])];
    }
    while (true) {
      if ([self maybeStallWithOrgApacheLuceneIndexIndexWriter:writer] == false) {
        break;
      }
      OrgApacheLuceneIndexMergePolicy_OneMerge *merge = JreRetainedLocalValue([((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getNextMerge]);
      if (merge == nil) {
        if ([self verbose]) {
          [self messageWithNSString:@"  no more merges pending; now return"];
        }
        return;
      }
      OrgApacheLuceneIndexConcurrentMergeScheduler_updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, merge);
      jboolean success = false;
      @try {
        if ([self verbose]) {
          [self messageWithNSString:JreStrcat("$$", @"  consider merge ", [writer segStringWithJavaLangIterable:merge->segments_])];
        }
        OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *merger = [self getMergeThreadWithOrgApacheLuceneIndexIndexWriter:writer withOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
        [((id<JavaUtilList>) nil_chk(mergeThreads_)) addWithId:merger];
        if ([self verbose]) {
          [self messageWithNSString:JreStrcat("$$C", @"    launch new thread [", [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(merger)) getName], ']')];
        }
        [((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(merger)) start];
        [self updateMergeThreads];
        success = true;
      }
      @finally {
        if (!success) {
          [writer mergeFinishWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
        }
      }
    }
  }
}

- (jboolean)maybeStallWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  @synchronized(self) {
    jlong startStallTime = 0;
    while ([((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) hasPendingMerges] && [self mergeThreadCount] >= maxMergeCount_) {
      if ([((id<JavaUtilList>) nil_chk(mergeThreads_)) containsWithId:JavaLangThread_currentThread()]) {
        return false;
      }
      if ([self verbose] && startStallTime == 0) {
        [self messageWithNSString:@"    too many merges; stalling..."];
      }
      startStallTime = JavaLangSystem_currentTimeMillis();
      [self doStall];
    }
    if ([self verbose] && startStallTime != 0) {
      [self messageWithNSString:JreStrcat("$J$", @"  stalled for ", (JavaLangSystem_currentTimeMillis() - startStallTime), @" msec")];
    }
    return true;
  }
}

- (void)doStall {
  @synchronized(self) {
    @try {
      [self java_waitWithLong:250];
    }
    @catch (JavaLangInterruptedException *ie) {
      @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(ie);
    }
  }
}

- (void)doMergeWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
      withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) mergeWithOrgApacheLuceneIndexMergePolicy_OneMerge:merge];
}

- (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *)getMergeThreadWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                   withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  @synchronized(self) {
    OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *thread = create_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, writer, merge);
    [thread setDaemonWithBoolean:true];
    [thread setNameWithNSString:JreStrcat("$I", @"Lucene Merge Thread #", mergeThreadCount_++)];
    return JreRetainedLocalValue(thread);
  }
}

- (void)handleMergeExceptionWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                        withJavaLangThrowable:(JavaLangThrowable *)exc {
  @throw create_OrgApacheLuceneIndexMergePolicy_MergeException_initWithJavaLangThrowable_withOrgApacheLuceneStoreDirectory_(exc, dir);
}

- (void)setSuppressExceptions {
  suppressExceptions_ = true;
}

- (void)clearSuppressExceptions {
  suppressExceptions_ = false;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(JreStrcat("$$", [[self java_getClass] getSimpleName], @": "));
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxThreadCount="])) appendWithInt:maxThreadCount_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxMergeCount="])) appendWithInt:maxMergeCount_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"ioThrottle="])) appendWithBoolean:doAutoIOThrottle_];
  return [sb description];
}

- (jboolean)isBacklogWithLong:(jlong)now
withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, now, merge);
}

- (void)updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)newMerge {
  OrgApacheLuceneIndexConcurrentMergeScheduler_updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(self, newMerge);
}

- (void)targetMBPerSecChanged {
}

+ (jdouble)nsToSecWithLong:(jlong)ns {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(ns);
}

+ (jdouble)bytesToMBWithLong:(jlong)bytes {
  return OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(bytes);
}

- (void)dealloc {
  RELEASE_(mergeThreads_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 5, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x24, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 6, 7, 8, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 9, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 10, 11, 8, -1, -1, -1 },
    { NULL, "Z", 0x24, 12, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x24, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, 8, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;", 0x24, 15, 14, 8, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 21, 22, 8, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "D", 0xa, 25, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setMaxMergesAndThreadsWithInt:withInt:);
  methods[2].selector = @selector(setDefaultMaxMergesAndThreadsWithBoolean:);
  methods[3].selector = @selector(setForceMergeMBPerSecWithDouble:);
  methods[4].selector = @selector(getForceMergeMBPerSec);
  methods[5].selector = @selector(enableAutoIOThrottle);
  methods[6].selector = @selector(disableAutoIOThrottle);
  methods[7].selector = @selector(getAutoIOThrottle);
  methods[8].selector = @selector(getIORateLimitMBPerSec);
  methods[9].selector = @selector(getMaxThreadCount);
  methods[10].selector = @selector(getMaxMergeCount);
  methods[11].selector = @selector(removeMergeThread);
  methods[12].selector = @selector(updateMergeThreads);
  methods[13].selector = @selector(initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter:);
  methods[14].selector = @selector(rateToStringWithDouble:);
  methods[15].selector = @selector(close);
  methods[16].selector = @selector(sync);
  methods[17].selector = @selector(mergeThreadCount);
  methods[18].selector = @selector(mergeWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergeTrigger:withBoolean:);
  methods[19].selector = @selector(maybeStallWithOrgApacheLuceneIndexIndexWriter:);
  methods[20].selector = @selector(doStall);
  methods[21].selector = @selector(doMergeWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[22].selector = @selector(getMergeThreadWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[23].selector = @selector(handleMergeExceptionWithOrgApacheLuceneStoreDirectory:withJavaLangThrowable:);
  methods[24].selector = @selector(setSuppressExceptions);
  methods[25].selector = @selector(clearSuppressExceptions);
  methods[26].selector = @selector(description);
  methods[27].selector = @selector(isBacklogWithLong:withOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[28].selector = @selector(updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[29].selector = @selector(targetMBPerSecChanged);
  methods[30].selector = @selector(nsToSecWithLong:);
  methods[31].selector = @selector(bytesToMBWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "AUTO_DETECT_MERGES_AND_THREADS", "I", .constantValue.asInt = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_CPU_CORE_COUNT_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "DEFAULT_SPINS_PROPERTY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "mergeThreads_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 28, -1 },
    { "maxThreadCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxMergeCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mergeThreadCount_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "MIN_MERGE_MB_PER_SEC", "D", .constantValue.asDouble = OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_MERGE_MB_PER_SEC, 0x1a, -1, -1, -1, -1 },
    { "MAX_MERGE_MB_PER_SEC", "D", .constantValue.asDouble = OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC, 0x1a, -1, -1, -1, -1 },
    { "START_MB_PER_SEC", "D", .constantValue.asDouble = OrgApacheLuceneIndexConcurrentMergeScheduler_START_MB_PER_SEC, 0x1a, -1, -1, -1, -1 },
    { "MIN_BIG_MERGE_MB", "D", .constantValue.asDouble = OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB, 0x1a, -1, -1, -1, -1 },
    { "targetMBPerSec_", "D", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "doAutoIOThrottle_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forceMergeMBPerSec_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "suppressExceptions_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxMergesAndThreads", "II", "setDefaultMaxMergesAndThreads", "Z", "setForceMergeMBPerSec", "D", "initDynamicDefaults", "LOrgApacheLuceneIndexIndexWriter;", "LJavaIoIOException;", "rateToString", "merge", "LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexMergeTrigger;Z", "maybeStall", "doMerge", "LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexMergePolicy_OneMerge;", "getMergeThread", "handleMergeException", "LOrgApacheLuceneStoreDirectory;LJavaLangThrowable;", "toString", "isBacklog", "JLOrgApacheLuceneIndexMergePolicy_OneMerge;", "updateIOThrottle", "LOrgApacheLuceneIndexMergePolicy_OneMerge;", "nsToSec", "J", "bytesToMB", &OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_CPU_CORE_COUNT_PROPERTY, &OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_SPINS_PROPERTY, "Ljava/util/List<Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;>;", "LOrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexConcurrentMergeScheduler = { "ConcurrentMergeScheduler", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 32, 15, -1, 29, -1, -1, -1 };
  return &_OrgApacheLuceneIndexConcurrentMergeScheduler;
}

@end

void OrgApacheLuceneIndexConcurrentMergeScheduler_init(OrgApacheLuceneIndexConcurrentMergeScheduler *self) {
  OrgApacheLuceneIndexMergeScheduler_init(self);
  JreStrongAssignAndConsume(&self->mergeThreads_, new_JavaUtilArrayList_init());
  self->maxThreadCount_ = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS;
  self->maxMergeCount_ = OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS;
  self->targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_START_MB_PER_SEC;
  self->doAutoIOThrottle_ = true;
  self->forceMergeMBPerSec_ = JavaLangDouble_POSITIVE_INFINITY;
}

OrgApacheLuceneIndexConcurrentMergeScheduler *new_OrgApacheLuceneIndexConcurrentMergeScheduler_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler, init)
}

OrgApacheLuceneIndexConcurrentMergeScheduler *create_OrgApacheLuceneIndexConcurrentMergeScheduler_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler, init)
}

void OrgApacheLuceneIndexConcurrentMergeScheduler_initDynamicDefaultsWithOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, OrgApacheLuceneIndexIndexWriter *writer) {
  @synchronized(self) {
    if (self->maxThreadCount_ == OrgApacheLuceneIndexConcurrentMergeScheduler_AUTO_DETECT_MERGES_AND_THREADS) {
      jboolean spins = OrgApacheLuceneUtilIOUtils_spinsWithOrgApacheLuceneStoreDirectory_([((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getDirectory]);
      @try {
        NSString *value = JavaLangSystem_getPropertyWithNSString_(OrgApacheLuceneIndexConcurrentMergeScheduler_DEFAULT_SPINS_PROPERTY);
        if (value != nil) {
          spins = JavaLangBoolean_parseBooleanWithNSString_(value);
        }
      }
      @catch (JavaLangThrowable *ignored) {
      }
      [self setDefaultMaxMergesAndThreadsWithBoolean:spins];
      if ([self verbose]) {
        [self messageWithNSString:JreStrcat("$Z$I$I", @"initDynamicDefaults spins=", spins, @" maxThreadCount=", self->maxThreadCount_, @" maxMergeCount=", self->maxMergeCount_)];
      }
    }
  }
}

NSString *OrgApacheLuceneIndexConcurrentMergeScheduler_rateToStringWithDouble_(jdouble mbPerSec) {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initialize();
  if (mbPerSec == 0.0) {
    return @"stopped";
  }
  else if (mbPerSec == JavaLangDouble_POSITIVE_INFINITY) {
    return @"unlimited";
  }
  else {
    return NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"%.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(mbPerSec) } count:1 type:NSObject_class_()]);
  }
}

jboolean OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, jlong now, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  jdouble mergeMB = OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(merge))->estimatedMergeBytes_));
  for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong mergeThread in nil_chk(self->mergeThreads_)) {
    jlong mergeStartNS = JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread))->merge_))->mergeStartNS_);
    if ([mergeThread isAlive] && !JreObjectEqualsEquals(mergeThread->merge_, merge) && mergeStartNS != -1 && JreLoadVolatileLong(&mergeThread->merge_->estimatedMergeBytes_) >= OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB * 1024 * 1024 && OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(now - mergeStartNS) > 3.0) {
      jdouble otherMergeMB = OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&mergeThread->merge_->estimatedMergeBytes_));
      jdouble ratio = otherMergeMB / mergeMB;
      if (ratio > 0.3 && ratio < 3.0) {
        return true;
      }
    }
  }
  return false;
}

void OrgApacheLuceneIndexConcurrentMergeScheduler_updateIOThrottleWithOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *self, OrgApacheLuceneIndexMergePolicy_OneMerge *newMerge) {
  @synchronized(self) {
    if (self->doAutoIOThrottle_ == false) {
      return;
    }
    jdouble mergeMB = OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(newMerge))->estimatedMergeBytes_));
    if (mergeMB < OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_BIG_MERGE_MB) {
      return;
    }
    jlong now = JavaLangSystem_nanoTime();
    jboolean newBacklog = OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, now, newMerge);
    jboolean curBacklog = false;
    if (newBacklog == false) {
      if ([((id<JavaUtilList>) nil_chk(self->mergeThreads_)) size] > self->maxThreadCount_) {
        curBacklog = true;
      }
      else {
        for (OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread * __strong mergeThread in self->mergeThreads_) {
          if (OrgApacheLuceneIndexConcurrentMergeScheduler_isBacklogWithLong_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, now, ((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(mergeThread))->merge_)) {
            curBacklog = true;
            break;
          }
        }
      }
    }
    jdouble curMBPerSec = self->targetMBPerSec_;
    if (newBacklog) {
      JreTimesAssignDoubleD(&self->targetMBPerSec_, 1.20);
      if (self->targetMBPerSec_ > OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC) {
        self->targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_MAX_MERGE_MB_PER_SEC;
      }
      if ([self verbose]) {
        if (curMBPerSec == self->targetMBPerSec_) {
          [self messageWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"io throttle: new merge backlog; leave IO rate at ceiling %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
        }
        else {
          [self messageWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"io throttle: new merge backlog; increase IO rate to %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
        }
      }
    }
    else if (curBacklog) {
      if ([self verbose]) {
        [self messageWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"io throttle: current merge backlog; leave IO rate at %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
      }
    }
    else {
      JreDivideAssignDoubleD(&self->targetMBPerSec_, 1.10);
      if (self->targetMBPerSec_ < OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_MERGE_MB_PER_SEC) {
        self->targetMBPerSec_ = OrgApacheLuceneIndexConcurrentMergeScheduler_MIN_MERGE_MB_PER_SEC;
      }
      if ([self verbose]) {
        if (curMBPerSec == self->targetMBPerSec_) {
          [self messageWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"io throttle: no merge backlog; leave IO rate at floor %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
        }
        else {
          [self messageWithNSString:NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"io throttle: no merge backlog; decrease IO rate to %.1f MB/sec", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(self->targetMBPerSec_) } count:1 type:NSObject_class_()])];
        }
      }
    }
    jdouble rate;
    if (newMerge->maxNumSegments_ != -1) {
      rate = self->forceMergeMBPerSec_;
    }
    else {
      rate = self->targetMBPerSec_;
    }
    [((OrgApacheLuceneIndexMergeRateLimiter *) nil_chk(newMerge->rateLimiter_)) setMBPerSecWithDouble:rate];
    [self targetMBPerSecChanged];
  }
}

jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_nsToSecWithLong_(jlong ns) {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initialize();
  return ns / 1000000000.0;
}

jdouble OrgApacheLuceneIndexConcurrentMergeScheduler_bytesToMBWithLong_(jlong bytes) {
  OrgApacheLuceneIndexConcurrentMergeScheduler_initialize();
  return bytes / 1024. / 1024.;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexConcurrentMergeScheduler)

@implementation OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread

- (instancetype)initWithOrgApacheLuceneIndexConcurrentMergeScheduler:(OrgApacheLuceneIndexConcurrentMergeScheduler *)outer$
                                 withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                        withOrgApacheLuceneIndexMergePolicy_OneMerge:(OrgApacheLuceneIndexMergePolicy_OneMerge *)merge {
  OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(self, outer$, writer, merge);
  return self;
}

- (jint)compareToWithId:(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *)other {
  cast_chk(other, [OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread class]);
  return JavaLangLong_compareWithLong_withLong_(JreLoadVolatileLong(&((OrgApacheLuceneIndexMergePolicy_OneMerge *) nil_chk(((OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *) nil_chk(other))->merge_))->estimatedMergeBytes_), JreLoadVolatileLong(&merge_->estimatedMergeBytes_));
}

- (void)run {
  @try {
    if ([this$0_ verbose]) {
      [this$0_ messageWithNSString:@"  merge thread: start"];
    }
    [this$0_ doMergeWithOrgApacheLuceneIndexIndexWriter:writer_ withOrgApacheLuceneIndexMergePolicy_OneMerge:merge_];
    if ([this$0_ verbose]) {
      [this$0_ messageWithNSString:@"  merge thread: done"];
    }
    @try {
      [this$0_ mergeWithOrgApacheLuceneIndexIndexWriter:writer_ withOrgApacheLuceneIndexMergeTrigger:JreLoadEnum(OrgApacheLuceneIndexMergeTrigger, MERGE_FINISHED) withBoolean:true];
    }
    @catch (OrgApacheLuceneStoreAlreadyClosedException *ace) {
    }
    @catch (JavaIoIOException *ioe) {
      @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(ioe);
    }
  }
  @catch (JavaLangThrowable *exc) {
    if ([exc isKindOfClass:[OrgApacheLuceneIndexMergePolicy_MergeAbortedException class]]) {
    }
    else if (this$0_->suppressExceptions_ == false) {
      [this$0_ handleMergeExceptionWithOrgApacheLuceneStoreDirectory:[((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer_)) getDirectory] withJavaLangThrowable:exc];
    }
  }
  @finally {
    @synchronized(this$0_) {
      [this$0_ removeMergeThread];
      [this$0_ updateMergeThreads];
      [this$0_ java_notifyAll];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(writer_);
  RELEASE_(merge_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexConcurrentMergeScheduler:withOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexMergePolicy_OneMerge:);
  methods[1].selector = @selector(compareToWithId:);
  methods[2].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexConcurrentMergeScheduler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "writer_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "merge_", "LOrgApacheLuceneIndexMergePolicy_OneMerge;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexConcurrentMergeScheduler;LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexMergePolicy_OneMerge;", "compareTo", "LOrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;", "LOrgApacheLuceneIndexConcurrentMergeScheduler;", "Ljava/lang/Thread;Ljava/lang/Comparable<Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread = { "MergeThread", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x4, 3, 3, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread;
}

@end

void OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *self, OrgApacheLuceneIndexConcurrentMergeScheduler *outer$, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThread_init(self);
  JreStrongAssign(&self->writer_, writer);
  JreStrongAssign(&self->merge_, merge);
}

OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *new_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *outer$, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread, initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_, outer$, writer, merge)
}

OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread *create_OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread_initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_(OrgApacheLuceneIndexConcurrentMergeScheduler *outer$, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexMergePolicy_OneMerge *merge) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread, initWithOrgApacheLuceneIndexConcurrentMergeScheduler_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexMergePolicy_OneMerge_, outer$, writer, merge)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexConcurrentMergeScheduler_MergeThread)
