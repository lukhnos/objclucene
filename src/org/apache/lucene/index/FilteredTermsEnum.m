//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/FilteredTermsEnum.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/lucene/index/FilteredTermsEnum.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/util/BytesRef.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/FilteredTermsEnum must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexFilteredTermsEnum () {
 @public
  OrgApacheLuceneUtilBytesRef *initialSeekTerm_;
  jboolean doSeek_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexFilteredTermsEnum, initialSeekTerm_, OrgApacheLuceneUtilBytesRef *)

__attribute__((unused)) static void OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_initWithNSString_withInt_(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *self, NSString *__name, jint __ordinal);

@implementation OrgApacheLuceneIndexFilteredTermsEnum

- (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)acceptWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)tenum {
  OrgApacheLuceneIndexFilteredTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_(self, tenum);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)tenum
                                          withBoolean:(jboolean)startWithSeek {
  OrgApacheLuceneIndexFilteredTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withBoolean_(self, tenum, startWithSeek);
  return self;
}

- (void)setInitialSeekTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  JreStrongAssign(&self->initialSeekTerm_, term);
}

- (OrgApacheLuceneUtilBytesRef *)nextSeekTermWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)currentTerm {
  OrgApacheLuceneUtilBytesRef *t = initialSeekTerm_;
  JreStrongAssign(&initialSeekTerm_, nil);
  return t;
}

- (OrgApacheLuceneUtilAttributeSource *)attributes {
  return [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) attributes];
}

- (OrgApacheLuceneUtilBytesRef *)term {
  return [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) term];
}

- (jint)docFreq {
  return [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) docFreq];
}

- (jlong)totalTermFreq {
  return [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) totalTermFreq];
}

- (jboolean)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", [[self java_getClass] getName], @" does not support seeking"));
}

- (OrgApacheLuceneIndexTermsEnum_SeekStatus *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", [[self java_getClass] getName], @" does not support seeking"));
}

- (void)seekExactWithLong:(jlong)ord {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", [[self java_getClass] getName], @" does not support seeking"));
}

- (jlong)ord {
  return [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) ord];
}

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags {
  return [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) postingsWithOrgApacheLuceneIndexPostingsEnum:reuse withInt:flags];
}

- (void)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term
               withOrgApacheLuceneIndexTermState:(OrgApacheLuceneIndexTermState *)state {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$", [[self java_getClass] getName], @" does not support seeking"));
}

- (OrgApacheLuceneIndexTermState *)termState {
  JreAssert(tenum_ != nil, @"org/apache/lucene/index/FilteredTermsEnum.java:199 condition failed: assert tenum != null;");
  return [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) termState];
}

- (OrgApacheLuceneUtilBytesRef *)next {
  for (; ; ) {
    if (doSeek_) {
      doSeek_ = false;
      OrgApacheLuceneUtilBytesRef *t = [self nextSeekTermWithOrgApacheLuceneUtilBytesRef:actualTerm_];
      JreAssert(actualTerm_ == nil || t == nil || [t compareToWithId:actualTerm_] > 0, JreStrcat("$@$@", @"curTerm=", actualTerm_, @" seekTerm=", t));
      if (t == nil || [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) seekCeilWithOrgApacheLuceneUtilBytesRef:t] == JreLoadEnum(OrgApacheLuceneIndexTermsEnum_SeekStatus, END)) {
        return nil;
      }
      JreStrongAssign(&actualTerm_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) term]);
    }
    else {
      JreStrongAssign(&actualTerm_, [((OrgApacheLuceneIndexTermsEnum *) nil_chk(tenum_)) next]);
      if (actualTerm_ == nil) {
        return nil;
      }
    }
    switch ([[self acceptWithOrgApacheLuceneUtilBytesRef:actualTerm_] ordinal]) {
      case OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_Enum_YES_AND_SEEK:
      doSeek_ = true;
      case OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_Enum_YES:
      return actualTerm_;
      case OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_Enum_NO_AND_SEEK:
      doSeek_ = true;
      break;
      case OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_Enum_END:
      return nil;
    }
  }
}

- (void)dealloc {
  RELEASE_(initialSeekTerm_);
  RELEASE_(actualTerm_);
  RELEASE_(tenum_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", 0x404, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 5, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x4, 6, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilAttributeSource;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsEnum_SeekStatus;", 0x1, 8, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 9, 2, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexPostingsEnum;", 0x1, 10, 11, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 12, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermState;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x1, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(acceptWithOrgApacheLuceneUtilBytesRef:);
  methods[1].selector = @selector(initWithOrgApacheLuceneIndexTermsEnum:);
  methods[2].selector = @selector(initWithOrgApacheLuceneIndexTermsEnum:withBoolean:);
  methods[3].selector = @selector(setInitialSeekTermWithOrgApacheLuceneUtilBytesRef:);
  methods[4].selector = @selector(nextSeekTermWithOrgApacheLuceneUtilBytesRef:);
  methods[5].selector = @selector(attributes);
  methods[6].selector = @selector(term);
  methods[7].selector = @selector(docFreq);
  methods[8].selector = @selector(totalTermFreq);
  methods[9].selector = @selector(seekExactWithOrgApacheLuceneUtilBytesRef:);
  methods[10].selector = @selector(seekCeilWithOrgApacheLuceneUtilBytesRef:);
  methods[11].selector = @selector(seekExactWithLong:);
  methods[12].selector = @selector(ord);
  methods[13].selector = @selector(postingsWithOrgApacheLuceneIndexPostingsEnum:withInt:);
  methods[14].selector = @selector(seekExactWithOrgApacheLuceneUtilBytesRef:withOrgApacheLuceneIndexTermState:);
  methods[15].selector = @selector(termState);
  methods[16].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "initialSeekTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "doSeek_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "actualTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "tenum_", "LOrgApacheLuceneIndexTermsEnum;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "accept", "LOrgApacheLuceneUtilBytesRef;", "LJavaIoIOException;", "LOrgApacheLuceneIndexTermsEnum;", "LOrgApacheLuceneIndexTermsEnum;Z", "setInitialSeekTerm", "nextSeekTerm", "seekExact", "seekCeil", "J", "postings", "LOrgApacheLuceneIndexPostingsEnum;I", "LOrgApacheLuceneUtilBytesRef;LOrgApacheLuceneIndexTermState;", "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexFilteredTermsEnum = { "FilteredTermsEnum", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x401, 17, 4, -1, 13, -1, -1, -1 };
  return &_OrgApacheLuceneIndexFilteredTermsEnum;
}

@end

void OrgApacheLuceneIndexFilteredTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_(OrgApacheLuceneIndexFilteredTermsEnum *self, OrgApacheLuceneIndexTermsEnum *tenum) {
  OrgApacheLuceneIndexFilteredTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withBoolean_(self, tenum, true);
}

void OrgApacheLuceneIndexFilteredTermsEnum_initWithOrgApacheLuceneIndexTermsEnum_withBoolean_(OrgApacheLuceneIndexFilteredTermsEnum *self, OrgApacheLuceneIndexTermsEnum *tenum, jboolean startWithSeek) {
  OrgApacheLuceneIndexTermsEnum_init(self);
  JreAssert(tenum != nil, @"org/apache/lucene/index/FilteredTermsEnum.java:85 condition failed: assert tenum != null;");
  JreStrongAssign(&self->tenum_, tenum);
  self->doSeek_ = startWithSeek;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexFilteredTermsEnum)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus)

OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_values_[5];

@implementation OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus

+ (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)YES_ {
  return JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, YES);
}

+ (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)YES_AND_SEEK {
  return JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, YES_AND_SEEK);
}

+ (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)NO_ {
  return JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, NO);
}

+ (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)NO_AND_SEEK {
  return JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, NO_AND_SEEK);
}

+ (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)END {
  return JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, END);
}

+ (IOSObjectArray *)values {
  return OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_values();
}

+ (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *)valueOfWithNSString:(NSString *)name {
  return OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_valueOfWithNSString_(name);
}

- (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_Enum)toNSEnum {
  return (OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "YES", "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "YES_AND_SEEK", "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "NO", "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "NO_AND_SEEK", "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "END", "LOrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, YES), &JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, YES_AND_SEEK), &JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, NO), &JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, NO_AND_SEEK), &JreEnum(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus, END), "LOrgApacheLuceneIndexFilteredTermsEnum;", "Ljava/lang/Enum<Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus = { "AcceptStatus", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x401c, 2, 5, 7, -1, -1, 8, -1 };
  return &_OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 5; i++) {
      ((void)(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_initWithNSString_withInt_(e, JreEnumConstantName(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus)
  }
}

@end

void OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_initWithNSString_withInt_(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_values() {
  OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_initialize();
  return [IOSObjectArray arrayWithObjects:OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_values_ count:5 type:OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_class_()];
}

OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_valueOfWithNSString_(NSString *name) {
  OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_initialize();
  for (int i = 0; i < 5; i++) {
    OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *e = OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus *OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_fromOrdinal(NSUInteger ordinal) {
  OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexFilteredTermsEnum_AcceptStatus)
