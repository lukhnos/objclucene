//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/LogMergePolicy.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/LogMergePolicy.h"
#include "org/apache/lucene/index/MergePolicy.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/util/InfoStream.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/LogMergePolicy must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexLogMergePolicy ()

/*!
 @brief Returns the merges necessary to merge the index, taking the max merge
  size or max merge docs into consideration.This method attempts to respect
  the <code>maxNumSegments</code> parameter, however it might be, due to size
  constraints, that more than that number of segments will remain in the
  index.
 Also, this method does not guarantee that exactly <code>maxNumSegments</code>
  will remain, but &lt;= that number.
 */
- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                              withInt:(jint)maxNumSegments
                                                                                                              withInt:(jint)last
                                                                                  withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

/*!
 @brief Returns the merges necessary to forceMerge the index.This method constraints
  the returned merges only by the <code>maxNumSegments</code> parameter, and
  guaranteed that exactly that number of segments will remain in the index.
 */
- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                                   withInt:(jint)maxNumSegments
                                                                                                                   withInt:(jint)last
                                                                                       withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

@end

__attribute__((unused)) static OrgApacheLuceneIndexMergePolicy_MergeSpecification *OrgApacheLuceneIndexLogMergePolicy_findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexLogMergePolicy *self, OrgApacheLuceneIndexSegmentInfos *infos, jint maxNumSegments, jint last, OrgApacheLuceneIndexIndexWriter *writer);

__attribute__((unused)) static OrgApacheLuceneIndexMergePolicy_MergeSpecification *OrgApacheLuceneIndexLogMergePolicy_findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexLogMergePolicy *self, OrgApacheLuceneIndexSegmentInfos *infos, jint maxNumSegments, jint last, OrgApacheLuceneIndexIndexWriter *writer);

@interface OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel : NSObject < JavaLangComparable > {
 @public
  OrgApacheLuceneIndexSegmentCommitInfo *info_;
  jfloat level_;
  jint index_;
}

- (instancetype)initWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                    withFloat:(jfloat)level
                                                      withInt:(jint)index;

- (jint)compareToWithId:(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *)other;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel, info_, OrgApacheLuceneIndexSegmentCommitInfo *)

__attribute__((unused)) static void OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *self, OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index);

__attribute__((unused)) static OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *new_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *create_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel)

@implementation OrgApacheLuceneIndexLogMergePolicy

+ (jdouble)LEVEL_LOG_SPAN {
  return OrgApacheLuceneIndexLogMergePolicy_LEVEL_LOG_SPAN;
}

+ (jint)DEFAULT_MERGE_FACTOR {
  return OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MERGE_FACTOR;
}

+ (jint)DEFAULT_MAX_MERGE_DOCS {
  return OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MAX_MERGE_DOCS;
}

+ (jdouble)DEFAULT_NO_CFS_RATIO {
  return OrgApacheLuceneIndexLogMergePolicy_DEFAULT_NO_CFS_RATIO;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexLogMergePolicy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)verboseWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  return writer != nil && [((OrgApacheLuceneUtilInfoStream *) nil_chk(writer->infoStream_)) isEnabledWithNSString:@"LMP"];
}

- (void)messageWithNSString:(NSString *)message
withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
    [((OrgApacheLuceneUtilInfoStream *) nil_chk(((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer))->infoStream_)) messageWithNSString:@"LMP" withNSString:message];
  }
}

- (jint)getMergeFactor {
  return mergeFactor_;
}

- (void)setMergeFactorWithInt:(jint)mergeFactor {
  if (mergeFactor < 2) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"mergeFactor cannot be less than 2");
  self->mergeFactor_ = mergeFactor;
}

- (void)setCalibrateSizeByDeletesWithBoolean:(jboolean)calibrateSizeByDeletes {
  self->calibrateSizeByDeletes_ = calibrateSizeByDeletes;
}

- (jboolean)getCalibrateSizeByDeletes {
  return calibrateSizeByDeletes_;
}

- (jlong)sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                       withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  if (calibrateSizeByDeletes_) {
    jint delCount = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    JreAssert(delCount <= [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc], @"org/apache/lucene/index/LogMergePolicy.java:155 condition failed: assert delCount <= info.info.maxDoc();");
    return ([info->info_ maxDoc] - (jlong) delCount);
  }
  else {
    return [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_)) maxDoc];
  }
}

- (jlong)sizeBytesWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                        withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  if (calibrateSizeByDeletes_) {
    return [super sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer];
  }
  return [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info)) sizeInBytes];
}

- (jboolean)isMergedWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                 withInt:(jint)maxNumSegments
                                         withJavaUtilMap:(id<JavaUtilMap>)segmentsToMerge
                     withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  jint numSegments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size];
  jint numToMerge = 0;
  OrgApacheLuceneIndexSegmentCommitInfo *mergeInfo = nil;
  jboolean segmentIsOriginal = false;
  for (jint i = 0; i < numSegments && numToMerge <= maxNumSegments; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [infos infoWithInt:i];
    JavaLangBoolean *isOriginal = [((id<JavaUtilMap>) nil_chk(segmentsToMerge)) getWithId:info];
    if (isOriginal != nil) {
      segmentIsOriginal = [isOriginal booleanValue];
      numToMerge++;
      mergeInfo = info;
    }
  }
  return numToMerge <= maxNumSegments && (numToMerge != 1 || !segmentIsOriginal || [self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:mergeInfo withOrgApacheLuceneIndexIndexWriter:writer]);
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                              withInt:(jint)maxNumSegments
                                                                                                              withInt:(jint)last
                                                                                  withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  return OrgApacheLuceneIndexLogMergePolicy_findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(self, infos, maxNumSegments, last, writer);
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                                   withInt:(jint)maxNumSegments
                                                                                                                   withInt:(jint)last
                                                                                       withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  return OrgApacheLuceneIndexLogMergePolicy_findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(self, infos, maxNumSegments, last, writer);
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                     withInt:(jint)maxNumSegments
                                                                                             withJavaUtilMap:(id<JavaUtilMap>)segmentsToMerge
                                                                         withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  JreAssert(maxNumSegments > 0, @"org/apache/lucene/index/LogMergePolicy.java:314 condition failed: assert maxNumSegments > 0;");
  if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
    [self messageWithNSString:JreStrcat("$I$@", @"findForcedMerges: maxNumSegs=", maxNumSegments, @" segsToMerge=", segmentsToMerge) withOrgApacheLuceneIndexIndexWriter:writer];
  }
  if ([self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withInt:maxNumSegments withJavaUtilMap:segmentsToMerge withOrgApacheLuceneIndexIndexWriter:writer]) {
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:@"already merged; skip" withOrgApacheLuceneIndexIndexWriter:writer];
    }
    return nil;
  }
  jint last = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size];
  while (last > 0) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [infos infoWithInt:--last];
    if ([((id<JavaUtilMap>) nil_chk(segmentsToMerge)) getWithId:info] != nil) {
      last++;
      break;
    }
  }
  if (last == 0) {
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:@"last == 0; skip" withOrgApacheLuceneIndexIndexWriter:writer];
    }
    return nil;
  }
  if (maxNumSegments == 1 && last == 1 && [self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:0] withOrgApacheLuceneIndexIndexWriter:writer]) {
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:@"already 1 seg; skip" withOrgApacheLuceneIndexIndexWriter:writer];
    }
    return nil;
  }
  jboolean anyTooLarge = false;
  for (jint i = 0; i < last; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = JreRetainedLocalValue([infos infoWithInt:i]);
    if ([self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] > maxMergeSizeForForcedMerge_ || [self sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] > maxMergeDocs_) {
      anyTooLarge = true;
      break;
    }
  }
  if (anyTooLarge) {
    return OrgApacheLuceneIndexLogMergePolicy_findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(self, infos, maxNumSegments, last, writer);
  }
  else {
    return OrgApacheLuceneIndexLogMergePolicy_findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(self, infos, maxNumSegments, last, writer);
  }
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedDeletesMergesWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos
                                                                                withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  id<JavaUtilList> segments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) asList];
  jint numSegments = [((id<JavaUtilList>) nil_chk(segments)) size];
  if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
    [self messageWithNSString:JreStrcat("$I$", @"findForcedDeleteMerges: ", numSegments, @" segments") withOrgApacheLuceneIndexIndexWriter:writer];
  }
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec = create_OrgApacheLuceneIndexMergePolicy_MergeSpecification_init();
  jint firstSegmentWithDeletions = -1;
  JreAssert(writer != nil, @"org/apache/lucene/index/LogMergePolicy.java:389 condition failed: assert writer != null;");
  for (jint i = 0; i < numSegments; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [segmentInfos infoWithInt:i];
    jint delCount = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) numDeletedDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info];
    if (delCount > 0) {
      if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
        [self messageWithNSString:JreStrcat("$$$", @"  segment ", ((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->name_, @" has deletions") withOrgApacheLuceneIndexIndexWriter:writer];
      }
      if (firstSegmentWithDeletions == -1) firstSegmentWithDeletions = i;
      else if (i - firstSegmentWithDeletions == mergeFactor_) {
        if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
          [self messageWithNSString:JreStrcat("$I$I$", @"  add merge ", firstSegmentWithDeletions, @" to ", (i - 1), @" inclusive") withOrgApacheLuceneIndexIndexWriter:writer];
        }
        [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([segments subListWithInt:firstSegmentWithDeletions withInt:i])];
        firstSegmentWithDeletions = i;
      }
    }
    else if (firstSegmentWithDeletions != -1) {
      if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
        [self messageWithNSString:JreStrcat("$I$I$", @"  add merge ", firstSegmentWithDeletions, @" to ", (i - 1), @" inclusive") withOrgApacheLuceneIndexIndexWriter:writer];
      }
      [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([segments subListWithInt:firstSegmentWithDeletions withInt:i])];
      firstSegmentWithDeletions = -1;
    }
  }
  if (firstSegmentWithDeletions != -1) {
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:JreStrcat("$I$I$", @"  add merge ", firstSegmentWithDeletions, @" to ", (numSegments - 1), @" inclusive") withOrgApacheLuceneIndexIndexWriter:writer];
    }
    [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([segments subListWithInt:firstSegmentWithDeletions withInt:numSegments])];
  }
  return spec;
}

- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findMergesWithOrgApacheLuceneIndexMergeTrigger:(OrgApacheLuceneIndexMergeTrigger *)mergeTrigger
                                                                  withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                   withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer {
  jint numSegments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size];
  if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
    [self messageWithNSString:JreStrcat("$I$", @"findMerges: ", numSegments, @" segments") withOrgApacheLuceneIndexIndexWriter:writer];
  }
  id<JavaUtilList> levels = create_JavaUtilArrayList_init();
  jfloat norm = (jfloat) JavaLangMath_logWithDouble_(mergeFactor_);
  id<JavaUtilCollection> mergingSegments = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getMergingSegments];
  for (jint i = 0; i < numSegments; i++) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = [infos infoWithInt:i];
    jlong size = [self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer];
    if (size < 1) {
      size = 1;
    }
    OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *infoLevel = create_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(info, (jfloat) JavaLangMath_logWithDouble_(size) / norm, i);
    [levels addWithId:infoLevel];
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      jlong segBytes = [self sizeBytesWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer];
      NSString *extra = [((id<JavaUtilCollection>) nil_chk(mergingSegments)) containsWithId:info] ? @" [merging]" : @"";
      if (size >= maxMergeSize_) {
        JreStrAppend(&extra, "$", @" [skip: too large]");
      }
      [self messageWithNSString:JreStrcat("$$$F$$$", @"seg=", [writer segStringWithOrgApacheLuceneIndexSegmentCommitInfo:info], @" level=", infoLevel->level_, @" size=", NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_(JreLoadStatic(JavaUtilLocale, ROOT), @"%.3f MB", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(segBytes / 1024 / 1024.) } count:1 type:NSObject_class_()]), extra) withOrgApacheLuceneIndexIndexWriter:writer];
    }
  }
  jfloat levelFloor;
  if (minMergeSize_ <= 0) levelFloor = (jfloat) 0.0;
  else levelFloor = (jfloat) (JavaLangMath_logWithDouble_(minMergeSize_) / norm);
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec = nil;
  jint numMergeableSegments = [levels size];
  jint start = 0;
  while (start < numMergeableSegments) {
    jfloat maxLevel = ((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:start]))->level_;
    for (jint i = 1 + start; i < numMergeableSegments; i++) {
      jfloat level = ((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:i]))->level_;
      if (level > maxLevel) {
        maxLevel = level;
      }
    }
    jfloat levelBottom;
    if (maxLevel <= levelFloor) {
      levelBottom = -1.0f;
    }
    else {
      levelBottom = (jfloat) (maxLevel - OrgApacheLuceneIndexLogMergePolicy_LEVEL_LOG_SPAN);
      if (levelBottom < levelFloor && maxLevel >= levelFloor) {
        levelBottom = levelFloor;
      }
    }
    jint upto = numMergeableSegments - 1;
    while (upto >= start) {
      if (((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:upto]))->level_ >= levelBottom) {
        break;
      }
      upto--;
    }
    if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
      [self messageWithNSString:JreStrcat("$F$F$I$", @"  level ", levelBottom, @" to ", maxLevel, @": ", (1 + upto - start), @" segments") withOrgApacheLuceneIndexIndexWriter:writer];
    }
    jint end = start + mergeFactor_;
    while (end <= 1 + upto) {
      jboolean anyTooLarge = false;
      jboolean anyMerging = false;
      for (jint i = start; i < end; i++) {
        OrgApacheLuceneIndexSegmentCommitInfo *info = ((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:i]))->info_;
        anyTooLarge |= ([self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] >= maxMergeSize_ || [self sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] >= maxMergeDocs_);
        if ([((id<JavaUtilCollection>) nil_chk(mergingSegments)) containsWithId:info]) {
          anyMerging = true;
          break;
        }
      }
      if (anyMerging) {
      }
      else if (!anyTooLarge) {
        if (spec == nil) spec = create_OrgApacheLuceneIndexMergePolicy_MergeSpecification_init();
        id<JavaUtilList> mergeInfos = create_JavaUtilArrayList_init();
        for (jint i = start; i < end; i++) {
          [mergeInfos addWithId:((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:i]))->info_];
          JreAssert([infos containsWithOrgApacheLuceneIndexSegmentCommitInfo:((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk([levels getWithInt:i]))->info_], @"org/apache/lucene/index/LogMergePolicy.java:570 condition failed: assert infos.contains(levels.get(i).info);");
        }
        if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
          [self messageWithNSString:JreStrcat("$$$I$I", @"  add merge=", [writer segStringWithJavaLangIterable:mergeInfos], @" start=", start, @" end=", end) withOrgApacheLuceneIndexIndexWriter:writer];
        }
        [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_(mergeInfos)];
      }
      else if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
        [self messageWithNSString:JreStrcat("$I$I$", @"    ", start, @" to ", end, @": contains segment over maxMergeSize or maxMergeDocs; skipping") withOrgApacheLuceneIndexIndexWriter:writer];
      }
      start = end;
      end = start + mergeFactor_;
    }
    start = 1 + upto;
  }
  return spec;
}

- (void)setMaxMergeDocsWithInt:(jint)maxMergeDocs {
  self->maxMergeDocs_ = maxMergeDocs;
}

- (jint)getMaxMergeDocs {
  return maxMergeDocs_;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(JreStrcat("C$$", '[', [[self java_getClass] getSimpleName], @": "));
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"minMergeSize="])) appendWithLong:minMergeSize_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"mergeFactor="])) appendWithInt:mergeFactor_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxMergeSize="])) appendWithLong:maxMergeSize_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxMergeSizeForForcedMerge="])) appendWithLong:maxMergeSizeForForcedMerge_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"calibrateSizeByDeletes="])) appendWithBoolean:calibrateSizeByDeletes_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxMergeDocs="])) appendWithInt:maxMergeDocs_])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"maxCFSSegmentSizeMB="])) appendWithDouble:[self getMaxCFSSegmentSizeMB]])) appendWithNSString:@", "];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"noCFSRatio="])) appendWithDouble:noCFSRatio_];
  [sb appendWithNSString:@"]"];
  return [sb description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, 8, 9, 10, -1, -1, -1 },
    { NULL, "J", 0x4, 11, 9, 10, -1, -1, -1 },
    { NULL, "Z", 0x4, 12, 13, 10, 14, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy_MergeSpecification;", 0x2, 15, 16, 10, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy_MergeSpecification;", 0x2, 17, 16, 10, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy_MergeSpecification;", 0x1, 18, 13, 10, 19, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy_MergeSpecification;", 0x1, 20, 21, 10, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexMergePolicy_MergeSpecification;", 0x1, 22, 23, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(verboseWithOrgApacheLuceneIndexIndexWriter:);
  methods[2].selector = @selector(messageWithNSString:withOrgApacheLuceneIndexIndexWriter:);
  methods[3].selector = @selector(getMergeFactor);
  methods[4].selector = @selector(setMergeFactorWithInt:);
  methods[5].selector = @selector(setCalibrateSizeByDeletesWithBoolean:);
  methods[6].selector = @selector(getCalibrateSizeByDeletes);
  methods[7].selector = @selector(sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:withOrgApacheLuceneIndexIndexWriter:);
  methods[8].selector = @selector(sizeBytesWithOrgApacheLuceneIndexSegmentCommitInfo:withOrgApacheLuceneIndexIndexWriter:);
  methods[9].selector = @selector(isMergedWithOrgApacheLuceneIndexSegmentInfos:withInt:withJavaUtilMap:withOrgApacheLuceneIndexIndexWriter:);
  methods[10].selector = @selector(findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos:withInt:withInt:withOrgApacheLuceneIndexIndexWriter:);
  methods[11].selector = @selector(findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos:withInt:withInt:withOrgApacheLuceneIndexIndexWriter:);
  methods[12].selector = @selector(findForcedMergesWithOrgApacheLuceneIndexSegmentInfos:withInt:withJavaUtilMap:withOrgApacheLuceneIndexIndexWriter:);
  methods[13].selector = @selector(findForcedDeletesMergesWithOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneIndexIndexWriter:);
  methods[14].selector = @selector(findMergesWithOrgApacheLuceneIndexMergeTrigger:withOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneIndexIndexWriter:);
  methods[15].selector = @selector(setMaxMergeDocsWithInt:);
  methods[16].selector = @selector(getMaxMergeDocs);
  methods[17].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LEVEL_LOG_SPAN", "D", .constantValue.asDouble = OrgApacheLuceneIndexLogMergePolicy_LEVEL_LOG_SPAN, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MERGE_FACTOR", "I", .constantValue.asInt = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MERGE_FACTOR, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MAX_MERGE_DOCS", "I", .constantValue.asInt = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MAX_MERGE_DOCS, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_NO_CFS_RATIO", "D", .constantValue.asDouble = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_NO_CFS_RATIO, 0x19, -1, -1, -1, -1 },
    { "mergeFactor_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "minMergeSize_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxMergeSize_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxMergeSizeForForcedMerge_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "maxMergeDocs_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "calibrateSizeByDeletes_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "verbose", "LOrgApacheLuceneIndexIndexWriter;", "message", "LNSString;LOrgApacheLuceneIndexIndexWriter;", "setMergeFactor", "I", "setCalibrateSizeByDeletes", "Z", "sizeDocs", "LOrgApacheLuceneIndexSegmentCommitInfo;LOrgApacheLuceneIndexIndexWriter;", "LJavaIoIOException;", "sizeBytes", "isMerged", "LOrgApacheLuceneIndexSegmentInfos;ILJavaUtilMap;LOrgApacheLuceneIndexIndexWriter;", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map<Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/lang/Boolean;>;Lorg/apache/lucene/index/IndexWriter;)Z", "findForcedMergesSizeLimit", "LOrgApacheLuceneIndexSegmentInfos;IILOrgApacheLuceneIndexIndexWriter;", "findForcedMergesMaxNumSegments", "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map<Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/lang/Boolean;>;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;", "findForcedDeletesMerges", "LOrgApacheLuceneIndexSegmentInfos;LOrgApacheLuceneIndexIndexWriter;", "findMerges", "LOrgApacheLuceneIndexMergeTrigger;LOrgApacheLuceneIndexSegmentInfos;LOrgApacheLuceneIndexIndexWriter;", "setMaxMergeDocs", "toString", "LOrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexLogMergePolicy = { "LogMergePolicy", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x401, 18, 10, -1, 26, -1, -1, -1 };
  return &_OrgApacheLuceneIndexLogMergePolicy;
}

@end

void OrgApacheLuceneIndexLogMergePolicy_init(OrgApacheLuceneIndexLogMergePolicy *self) {
  OrgApacheLuceneIndexMergePolicy_initWithDouble_withLong_(self, OrgApacheLuceneIndexLogMergePolicy_DEFAULT_NO_CFS_RATIO, OrgApacheLuceneIndexMergePolicy_DEFAULT_MAX_CFS_SEGMENT_SIZE);
  self->mergeFactor_ = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MERGE_FACTOR;
  self->maxMergeSizeForForcedMerge_ = JavaLangLong_MAX_VALUE;
  self->maxMergeDocs_ = OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MAX_MERGE_DOCS;
  self->calibrateSizeByDeletes_ = true;
}

OrgApacheLuceneIndexMergePolicy_MergeSpecification *OrgApacheLuceneIndexLogMergePolicy_findForcedMergesSizeLimitWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexLogMergePolicy *self, OrgApacheLuceneIndexSegmentInfos *infos, jint maxNumSegments, jint last, OrgApacheLuceneIndexIndexWriter *writer) {
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec = create_OrgApacheLuceneIndexMergePolicy_MergeSpecification_init();
  id<JavaUtilList> segments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) asList];
  jint start = last - 1;
  while (start >= 0) {
    OrgApacheLuceneIndexSegmentCommitInfo *info = JreRetainedLocalValue([infos infoWithInt:start]);
    if ([self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] > self->maxMergeSizeForForcedMerge_ || [self sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:info withOrgApacheLuceneIndexIndexWriter:writer] > self->maxMergeDocs_) {
      if ([self verboseWithOrgApacheLuceneIndexIndexWriter:writer]) {
        [self messageWithNSString:JreStrcat("$@$J$IC", @"findForcedMergesSizeLimit: skip segment=", info, @": size is > maxMergeSize (", self->maxMergeSizeForForcedMerge_, @") or sizeDocs is > maxMergeDocs (", self->maxMergeDocs_, ')') withOrgApacheLuceneIndexIndexWriter:writer];
      }
      if (last - start - 1 > 1 || (start != last - 1 && ![self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:start + 1] withOrgApacheLuceneIndexIndexWriter:writer])) {
        [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:start + 1 withInt:last])];
      }
      last = start;
    }
    else if (last - start == self->mergeFactor_) {
      [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:start withInt:last])];
      last = start;
    }
    --start;
  }
  if (last > 0 && (++start + 1 < last || ![self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:start] withOrgApacheLuceneIndexIndexWriter:writer])) {
    [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:start withInt:last])];
  }
  return [((id<JavaUtilList>) nil_chk(spec->merges_)) size] == 0 ? nil : spec;
}

OrgApacheLuceneIndexMergePolicy_MergeSpecification *OrgApacheLuceneIndexLogMergePolicy_findForcedMergesMaxNumSegmentsWithOrgApacheLuceneIndexSegmentInfos_withInt_withInt_withOrgApacheLuceneIndexIndexWriter_(OrgApacheLuceneIndexLogMergePolicy *self, OrgApacheLuceneIndexSegmentInfos *infos, jint maxNumSegments, jint last, OrgApacheLuceneIndexIndexWriter *writer) {
  OrgApacheLuceneIndexMergePolicy_MergeSpecification *spec = create_OrgApacheLuceneIndexMergePolicy_MergeSpecification_init();
  id<JavaUtilList> segments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) asList];
  while (last - maxNumSegments + 1 >= self->mergeFactor_) {
    [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:last - self->mergeFactor_ withInt:last])];
    last -= self->mergeFactor_;
  }
  if (0 == [((id<JavaUtilList>) nil_chk(spec->merges_)) size]) {
    if (maxNumSegments == 1) {
      if (last > 1 || ![self isMergedWithOrgApacheLuceneIndexSegmentInfos:infos withOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:0] withOrgApacheLuceneIndexIndexWriter:writer]) {
        [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:0 withInt:last])];
      }
    }
    else if (last > maxNumSegments) {
      jint finalMergeSize = last - maxNumSegments + 1;
      jlong bestSize = 0;
      jint bestStart = 0;
      for (jint i = 0; i < last - finalMergeSize + 1; i++) {
        jlong sumSize = 0;
        for (jint j = 0; j < finalMergeSize; j++) {
          sumSize += [self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:j + i] withOrgApacheLuceneIndexIndexWriter:writer];
        }
        if (i == 0 || (sumSize < 2 * [self sizeWithOrgApacheLuceneIndexSegmentCommitInfo:[infos infoWithInt:i - 1] withOrgApacheLuceneIndexIndexWriter:writer] && sumSize < bestSize)) {
          bestStart = i;
          bestSize = sumSize;
        }
      }
      [spec addWithOrgApacheLuceneIndexMergePolicy_OneMerge:create_OrgApacheLuceneIndexMergePolicy_OneMerge_initWithJavaUtilList_([((id<JavaUtilList>) nil_chk(segments)) subListWithInt:bestStart withInt:bestStart + finalMergeSize])];
    }
  }
  return [spec->merges_ size] == 0 ? nil : spec;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexLogMergePolicy)

@implementation OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel

- (instancetype)initWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                                                    withFloat:(jfloat)level
                                                      withInt:(jint)index {
  OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(self, info, level, index);
  return self;
}

- (jint)compareToWithId:(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *)other {
  cast_chk(other, [OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel class]);
  return JavaLangFloat_compareWithFloat_withFloat_(((OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *) nil_chk(other))->level_, level_);
}

- (void)dealloc {
  RELEASE_(info_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexSegmentCommitInfo:withFloat:withInt:);
  methods[1].selector = @selector(compareToWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "info_", "LOrgApacheLuceneIndexSegmentCommitInfo;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "level_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexSegmentCommitInfo;FI", "compareTo", "LOrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel;", "LOrgApacheLuceneIndexLogMergePolicy;", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/index/LogMergePolicy$SegmentInfoAndLevel;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel = { "SegmentInfoAndLevel", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0xa, 2, 3, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel;
}

@end

void OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *self, OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index) {
  NSObject_init(self);
  JreStrongAssign(&self->info_, info);
  self->level_ = level;
  self->index_ = index;
}

OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *new_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel, initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_, info, level, index)
}

OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel *create_OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel_initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_(OrgApacheLuceneIndexSegmentCommitInfo *info, jfloat level, jint index) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel, initWithOrgApacheLuceneIndexSegmentCommitInfo_withFloat_withInt_, info, level, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexLogMergePolicy_SegmentInfoAndLevel)
