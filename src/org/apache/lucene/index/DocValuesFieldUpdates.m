//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DocValuesFieldUpdates.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/BinaryDocValuesFieldUpdates.h"
#include "org/apache/lucene/index/DocValuesFieldUpdates.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "org/apache/lucene/index/NumericDocValuesFieldUpdates.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/DocValuesFieldUpdates must not be compiled with ARC (-fobjc-arc)"
#endif

@implementation OrgApacheLuceneIndexDocValuesFieldUpdates

+ (jint)PAGE_SIZE_ {
  return OrgApacheLuceneIndexDocValuesFieldUpdates_PAGE_SIZE;
}

- (instancetype)initPackagePrivateWithNSString:(NSString *)field
         withOrgApacheLuceneIndexDocValuesType:(OrgApacheLuceneIndexDocValuesType *)type {
  OrgApacheLuceneIndexDocValuesFieldUpdates_initPackagePrivateWithNSString_withOrgApacheLuceneIndexDocValuesType_(self, field, type);
  return self;
}

+ (jint)estimateCapacityWithInt:(jint)size {
  return OrgApacheLuceneIndexDocValuesFieldUpdates_estimateCapacityWithInt_(size);
}

- (void)addWithInt:(jint)doc
            withId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *)iterator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)mergeWithOrgApacheLuceneIndexDocValuesFieldUpdates:(OrgApacheLuceneIndexDocValuesFieldUpdates *)other {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)any {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)ramBytesPerDoc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xc, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocValuesFieldUpdates_Iterator;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithNSString:withOrgApacheLuceneIndexDocValuesType:);
  methods[1].selector = @selector(estimateCapacityWithInt:);
  methods[2].selector = @selector(addWithInt:withId:);
  methods[3].selector = @selector(iterator);
  methods[4].selector = @selector(mergeWithOrgApacheLuceneIndexDocValuesFieldUpdates:);
  methods[5].selector = @selector(any);
  methods[6].selector = @selector(ramBytesPerDoc);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PAGE_SIZE", "I", .constantValue.asInt = OrgApacheLuceneIndexDocValuesFieldUpdates_PAGE_SIZE, 0x1c, -1, -1, -1, -1 },
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "type_", "LOrgApacheLuceneIndexDocValuesType;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgApacheLuceneIndexDocValuesType;", "estimateCapacity", "I", "add", "ILNSObject;", "merge", "LOrgApacheLuceneIndexDocValuesFieldUpdates;", "LOrgApacheLuceneIndexDocValuesFieldUpdates_Iterator;LOrgApacheLuceneIndexDocValuesFieldUpdates_Container;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocValuesFieldUpdates = { "DocValuesFieldUpdates", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x400, 7, 3, -1, 7, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocValuesFieldUpdates;
}

@end

void OrgApacheLuceneIndexDocValuesFieldUpdates_initPackagePrivateWithNSString_withOrgApacheLuceneIndexDocValuesType_(OrgApacheLuceneIndexDocValuesFieldUpdates *self, NSString *field, OrgApacheLuceneIndexDocValuesType *type) {
  NSObject_init(self);
  JreStrongAssign(&self->field_, field);
  if (type == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"DocValuesType cannot be null");
  }
  JreStrongAssign(&self->type_, type);
}

jint OrgApacheLuceneIndexDocValuesFieldUpdates_estimateCapacityWithInt_(jint size) {
  OrgApacheLuceneIndexDocValuesFieldUpdates_initialize();
  return JreFpToInt(JavaLangMath_ceilWithDouble_((jdouble) size / OrgApacheLuceneIndexDocValuesFieldUpdates_PAGE_SIZE)) * OrgApacheLuceneIndexDocValuesFieldUpdates_PAGE_SIZE;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocValuesFieldUpdates)

@implementation OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)nextDoc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)doc {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)reset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nextDoc);
  methods[2].selector = @selector(doc);
  methods[3].selector = @selector(value);
  methods[4].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocValuesFieldUpdates;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator = { "Iterator", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x408, 5, 0, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator;
}

@end

void OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator_init(OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocValuesFieldUpdates_Iterator)

@implementation OrgApacheLuceneIndexDocValuesFieldUpdates_Container

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexDocValuesFieldUpdates_Container_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)any {
  for (OrgApacheLuceneIndexNumericDocValuesFieldUpdates * __strong updates in nil_chk([((id<JavaUtilMap>) nil_chk(numericDVUpdates_)) values])) {
    if ([((OrgApacheLuceneIndexNumericDocValuesFieldUpdates *) nil_chk(updates)) any]) {
      return true;
    }
  }
  for (OrgApacheLuceneIndexBinaryDocValuesFieldUpdates * __strong updates in nil_chk([((id<JavaUtilMap>) nil_chk(binaryDVUpdates_)) values])) {
    if ([((OrgApacheLuceneIndexBinaryDocValuesFieldUpdates *) nil_chk(updates)) any]) {
      return true;
    }
  }
  return false;
}

- (jint)size {
  return [((id<JavaUtilMap>) nil_chk(numericDVUpdates_)) size] + [((id<JavaUtilMap>) nil_chk(binaryDVUpdates_)) size];
}

- (jlong)ramBytesPerDoc {
  jlong ramBytesPerDoc = 0;
  for (OrgApacheLuceneIndexNumericDocValuesFieldUpdates * __strong updates in nil_chk([((id<JavaUtilMap>) nil_chk(numericDVUpdates_)) values])) {
    ramBytesPerDoc += [((OrgApacheLuceneIndexNumericDocValuesFieldUpdates *) nil_chk(updates)) ramBytesPerDoc];
  }
  for (OrgApacheLuceneIndexBinaryDocValuesFieldUpdates * __strong updates in nil_chk([((id<JavaUtilMap>) nil_chk(binaryDVUpdates_)) values])) {
    ramBytesPerDoc += [((OrgApacheLuceneIndexBinaryDocValuesFieldUpdates *) nil_chk(updates)) ramBytesPerDoc];
  }
  return ramBytesPerDoc;
}

- (OrgApacheLuceneIndexDocValuesFieldUpdates *)getUpdatesWithNSString:(NSString *)field
                                withOrgApacheLuceneIndexDocValuesType:(OrgApacheLuceneIndexDocValuesType *)type {
  switch ([type ordinal]) {
    case OrgApacheLuceneIndexDocValuesType_Enum_NUMERIC:
    return [((id<JavaUtilMap>) nil_chk(numericDVUpdates_)) getWithId:field];
    case OrgApacheLuceneIndexDocValuesType_Enum_BINARY:
    return [((id<JavaUtilMap>) nil_chk(binaryDVUpdates_)) getWithId:field];
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unsupported type: ", type));
  }
}

- (OrgApacheLuceneIndexDocValuesFieldUpdates *)newUpdatesWithNSString:(NSString *)field
                                withOrgApacheLuceneIndexDocValuesType:(OrgApacheLuceneIndexDocValuesType *)type
                                                              withInt:(jint)maxDoc {
  {
    OrgApacheLuceneIndexNumericDocValuesFieldUpdates *numericUpdates;
    OrgApacheLuceneIndexBinaryDocValuesFieldUpdates *binaryUpdates;
    switch ([type ordinal]) {
      case OrgApacheLuceneIndexDocValuesType_Enum_NUMERIC:
      JreAssert([((id<JavaUtilMap>) nil_chk(numericDVUpdates_)) getWithId:field] == nil, @"org/apache/lucene/index/DocValuesFieldUpdates.java:114 condition failed: assert numericDVUpdates.get(field) == null;");
      numericUpdates = create_OrgApacheLuceneIndexNumericDocValuesFieldUpdates_initPackagePrivateWithNSString_withInt_(field, maxDoc);
      [numericDVUpdates_ putWithId:field withId:numericUpdates];
      return numericUpdates;
      case OrgApacheLuceneIndexDocValuesType_Enum_BINARY:
      JreAssert([((id<JavaUtilMap>) nil_chk(binaryDVUpdates_)) getWithId:field] == nil, @"org/apache/lucene/index/DocValuesFieldUpdates.java:119 condition failed: assert binaryDVUpdates.get(field) == null;");
      binaryUpdates = create_OrgApacheLuceneIndexBinaryDocValuesFieldUpdates_initPackagePrivateWithNSString_withInt_(field, maxDoc);
      [binaryDVUpdates_ putWithId:field withId:binaryUpdates];
      return binaryUpdates;
      default:
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unsupported type: ", type));
    }
  }
}

- (NSString *)description {
  return JreStrcat("$@$@", @"numericDVUpdates=", numericDVUpdates_, @" binaryDVUpdates=", binaryDVUpdates_);
}

- (void)dealloc {
  RELEASE_(numericDVUpdates_);
  RELEASE_(binaryDVUpdates_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocValuesFieldUpdates;", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocValuesFieldUpdates;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(any);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(ramBytesPerDoc);
  methods[4].selector = @selector(getUpdatesWithNSString:withOrgApacheLuceneIndexDocValuesType:);
  methods[5].selector = @selector(newUpdatesWithNSString:withOrgApacheLuceneIndexDocValuesType:withInt:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "numericDVUpdates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "binaryDVUpdates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "getUpdates", "LNSString;LOrgApacheLuceneIndexDocValuesType;", "newUpdates", "LNSString;LOrgApacheLuceneIndexDocValuesType;I", "toString", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/index/NumericDocValuesFieldUpdates;>;", "Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/index/BinaryDocValuesFieldUpdates;>;", "LOrgApacheLuceneIndexDocValuesFieldUpdates;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocValuesFieldUpdates_Container = { "Container", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8, 7, 2, 7, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocValuesFieldUpdates_Container;
}

@end

void OrgApacheLuceneIndexDocValuesFieldUpdates_Container_init(OrgApacheLuceneIndexDocValuesFieldUpdates_Container *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->numericDVUpdates_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->binaryDVUpdates_, new_JavaUtilHashMap_init());
}

OrgApacheLuceneIndexDocValuesFieldUpdates_Container *new_OrgApacheLuceneIndexDocValuesFieldUpdates_Container_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocValuesFieldUpdates_Container, init)
}

OrgApacheLuceneIndexDocValuesFieldUpdates_Container *create_OrgApacheLuceneIndexDocValuesFieldUpdates_Container_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocValuesFieldUpdates_Container, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocValuesFieldUpdates_Container)
