//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/TermVectorsConsumer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Map.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/index/ByteSliceReader.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/TermVectorsConsumer.h"
#include "org/apache/lucene/index/TermVectorsConsumerPerField.h"
#include "org/apache/lucene/index/TermsHash.h"
#include "org/apache/lucene/index/TermsHashPerField.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/TermVectorsConsumer must not be compiled with ARC (-fobjc-arc)"
#if !__has_feature(objc_arc_weak)
#error "org/apache/lucene/index/TermVectorsConsumer must be compiled with weak references support (-fobjc-weak)"
#endif
#endif

@interface OrgApacheLuceneIndexTermVectorsConsumer () {
 @public
  IOSObjectArray *perFields_;
}

- (void)initTermVectorsWriter OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermVectorsConsumer, perFields_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheLuceneIndexTermVectorsConsumer_initTermVectorsWriter(OrgApacheLuceneIndexTermVectorsConsumer *self);

@implementation OrgApacheLuceneIndexTermVectorsConsumer

- (instancetype)initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)docWriter {
  OrgApacheLuceneIndexTermVectorsConsumer_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(self, docWriter);
  return self;
}

- (void)flushWithJavaUtilMap:(id<JavaUtilMap>)fieldsToFlush
withOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  if (writer_ != nil) {
    jint numDocs = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_)) maxDoc];
    JreAssert(numDocs > 0, @"org/apache/lucene/index/TermVectorsConsumer.java:64 condition failed: assert numDocs > 0;");
    @try {
      [self fillWithInt:numDocs];
      JreAssert(state->segmentInfo_ != nil, @"org/apache/lucene/index/TermVectorsConsumer.java:68 condition failed: assert state.segmentInfo != null;");
      [((OrgApacheLuceneCodecsTermVectorsWriter *) nil_chk(writer_)) finishWithOrgApacheLuceneIndexFieldInfos:state->fieldInfos_ withInt:numDocs];
    }
    @finally {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ writer_ } count:1 type:JavaIoCloseable_class_()]);
      JreStrongAssign(&writer_, nil);
      lastDocID_ = 0;
      hasVectors_ = false;
    }
  }
}

- (void)fillWithInt:(jint)docID {
  while (lastDocID_ < docID) {
    [((OrgApacheLuceneCodecsTermVectorsWriter *) nil_chk(writer_)) startDocumentWithInt:0];
    [((OrgApacheLuceneCodecsTermVectorsWriter *) nil_chk(writer_)) finishDocument];
    lastDocID_++;
  }
}

- (void)initTermVectorsWriter {
  OrgApacheLuceneIndexTermVectorsConsumer_initTermVectorsWriter(self);
}

- (void)finishDocument {
  if (!hasVectors_) {
    return;
  }
  OrgApacheLuceneUtilArrayUtil_introSortWithJavaLangComparableArray_withInt_withInt_(perFields_, 0, numVectorFields_);
  OrgApacheLuceneIndexTermVectorsConsumer_initTermVectorsWriter(self);
  [self fillWithInt:((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(docState_))->docID_];
  [((OrgApacheLuceneCodecsTermVectorsWriter *) nil_chk(writer_)) startDocumentWithInt:numVectorFields_];
  for (jint i = 0; i < numVectorFields_; i++) {
    [((OrgApacheLuceneIndexTermVectorsConsumerPerField *) nil_chk(IOSObjectArray_Get(nil_chk(perFields_), i))) finishDocument];
  }
  [((OrgApacheLuceneCodecsTermVectorsWriter *) nil_chk(writer_)) finishDocument];
  JreAssert(lastDocID_ == docState_->docID_, JreStrcat("$I$I", @"lastDocID=", lastDocID_, @" docState.docID=", docState_->docID_));
  lastDocID_++;
  [super reset];
  [self resetFields];
}

- (void)abort {
  hasVectors_ = false;
  @try {
    [super abort];
  }
  @finally {
    if (writer_ != nil) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ writer_ } count:1 type:JavaIoCloseable_class_()]);
      JreStrongAssign(&writer_, nil);
    }
    lastDocID_ = 0;
    [self reset];
  }
}

- (void)resetFields {
  JavaUtilArrays_fillWithNSObjectArray_withId_(perFields_, nil);
  numVectorFields_ = 0;
}

- (OrgApacheLuceneIndexTermsHashPerField *)addFieldWithOrgApacheLuceneIndexFieldInvertState:(OrgApacheLuceneIndexFieldInvertState *)invertState
                                                          withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  return create_OrgApacheLuceneIndexTermVectorsConsumerPerField_initPackagePrivateWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermVectorsConsumer_withOrgApacheLuceneIndexFieldInfo_(invertState, self, fieldInfo);
}

- (void)addFieldToFlushWithOrgApacheLuceneIndexTermVectorsConsumerPerField:(OrgApacheLuceneIndexTermVectorsConsumerPerField *)fieldToFlush {
  if (numVectorFields_ == ((IOSObjectArray *) nil_chk(perFields_))->size_) {
    jint newSize = OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(numVectorFields_ + 1, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF));
    IOSObjectArray *newArray = [IOSObjectArray arrayWithLength:newSize type:OrgApacheLuceneIndexTermVectorsConsumerPerField_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(perFields_, 0, newArray, 0, numVectorFields_);
    JreStrongAssign(&perFields_, newArray);
  }
  IOSObjectArray_Set(perFields_, numVectorFields_++, fieldToFlush);
}

- (void)startDocument {
  [self resetFields];
  numVectorFields_ = 0;
}

- (void)__javaClone:(OrgApacheLuceneIndexTermVectorsConsumer *)original {
  [super __javaClone:original];
  [docWriter_ release];
}

- (void)dealloc {
  RELEASE_(writer_);
  RELEASE_(flushTerm_);
  RELEASE_(vectorSliceReaderPos_);
  RELEASE_(vectorSliceReaderOff_);
  RELEASE_(perFields_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, 3, 4, -1, -1 },
    { NULL, "V", 0x0, 5, 6, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexTermsHashPerField;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread:);
  methods[1].selector = @selector(flushWithJavaUtilMap:withOrgApacheLuceneIndexSegmentWriteState:);
  methods[2].selector = @selector(fillWithInt:);
  methods[3].selector = @selector(initTermVectorsWriter);
  methods[4].selector = @selector(finishDocument);
  methods[5].selector = @selector(abort);
  methods[6].selector = @selector(resetFields);
  methods[7].selector = @selector(addFieldWithOrgApacheLuceneIndexFieldInvertState:withOrgApacheLuceneIndexFieldInfo:);
  methods[8].selector = @selector(addFieldToFlushWithOrgApacheLuceneIndexTermVectorsConsumerPerField:);
  methods[9].selector = @selector(startDocument);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", "LOrgApacheLuceneCodecsTermVectorsWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "flushTerm_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docWriter_", "LOrgApacheLuceneIndexDocumentsWriterPerThread;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "vectorSliceReaderPos_", "LOrgApacheLuceneIndexByteSliceReader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "vectorSliceReaderOff_", "LOrgApacheLuceneIndexByteSliceReader;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "hasVectors_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numVectorFields_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastDocID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "perFields_", "[LOrgApacheLuceneIndexTermVectorsConsumerPerField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocumentsWriterPerThread;", "flush", "LJavaUtilMap;LOrgApacheLuceneIndexSegmentWriteState;", "LJavaIoIOException;", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/index/TermsHashPerField;>;Lorg/apache/lucene/index/SegmentWriteState;)V", "fill", "I", "addField", "LOrgApacheLuceneIndexFieldInvertState;LOrgApacheLuceneIndexFieldInfo;", "addFieldToFlush", "LOrgApacheLuceneIndexTermVectorsConsumerPerField;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermVectorsConsumer = { "TermVectorsConsumer", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 10, 9, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermVectorsConsumer;
}

@end

void OrgApacheLuceneIndexTermVectorsConsumer_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexTermVectorsConsumer *self, OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter) {
  OrgApacheLuceneIndexTermsHash_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withBoolean_withOrgApacheLuceneIndexTermsHash_(self, docWriter, false, nil);
  JreStrongAssignAndConsume(&self->flushTerm_, new_OrgApacheLuceneUtilBytesRef_init());
  JreStrongAssignAndConsume(&self->vectorSliceReaderPos_, new_OrgApacheLuceneIndexByteSliceReader_initPackagePrivate());
  JreStrongAssignAndConsume(&self->vectorSliceReaderOff_, new_OrgApacheLuceneIndexByteSliceReader_initPackagePrivate());
  JreStrongAssignAndConsume(&self->perFields_, [IOSObjectArray newArrayWithLength:1 type:OrgApacheLuceneIndexTermVectorsConsumerPerField_class_()]);
  self->docWriter_ = docWriter;
}

OrgApacheLuceneIndexTermVectorsConsumer *new_OrgApacheLuceneIndexTermVectorsConsumer_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorsConsumer, initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_, docWriter)
}

OrgApacheLuceneIndexTermVectorsConsumer *create_OrgApacheLuceneIndexTermVectorsConsumer_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorsConsumer, initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_, docWriter)
}

void OrgApacheLuceneIndexTermVectorsConsumer_initTermVectorsWriter(OrgApacheLuceneIndexTermVectorsConsumer *self) {
  if (self->writer_ == nil) {
    OrgApacheLuceneStoreIOContext *context = create_OrgApacheLuceneStoreIOContext_initWithOrgApacheLuceneStoreFlushInfo_(create_OrgApacheLuceneStoreFlushInfo_initWithInt_withLong_([((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(self->docWriter_)) getNumDocsInRAM], [self->docWriter_ bytesUsed]));
    JreStrongAssign(&self->writer_, [((OrgApacheLuceneCodecsTermVectorsFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(self->docWriter_->codec_)) termVectorsFormat])) vectorsWriterWithOrgApacheLuceneStoreDirectory:self->docWriter_->directory_ withOrgApacheLuceneIndexSegmentInfo:[self->docWriter_ getSegmentInfo] withOrgApacheLuceneStoreIOContext:context]);
    self->lastDocID_ = 0;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermVectorsConsumer)
