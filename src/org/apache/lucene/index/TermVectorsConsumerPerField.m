//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PayloadAttribute.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "org/apache/lucene/index/ByteSliceReader.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "org/apache/lucene/index/ParallelPostingsArray.h"
#include "org/apache/lucene/index/TermVectorsConsumer.h"
#include "org/apache/lucene/index/TermVectorsConsumerPerField.h"
#include "org/apache/lucene/index/TermsHashPerField.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/TermVectorsConsumerPerField must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexTermVectorsConsumerPerField () {
 @public
  OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *termVectorsPostingsArray_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermVectorsConsumerPerField, termVectorsPostingsArray_, OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *)

@implementation OrgApacheLuceneIndexTermVectorsConsumerPerField

- (instancetype)initPackagePrivateWithOrgApacheLuceneIndexFieldInvertState:(OrgApacheLuceneIndexFieldInvertState *)invertState
                               withOrgApacheLuceneIndexTermVectorsConsumer:(OrgApacheLuceneIndexTermVectorsConsumer *)termsWriter
                                         withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  OrgApacheLuceneIndexTermVectorsConsumerPerField_initPackagePrivateWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermVectorsConsumer_withOrgApacheLuceneIndexFieldInfo_(self, invertState, termsWriter, fieldInfo);
  return self;
}

- (void)finish {
  if (!doVectors_ || [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(bytesHash_)) size] == 0) {
    return;
  }
  [((OrgApacheLuceneIndexTermVectorsConsumer *) nil_chk(termsWriter_)) addFieldToFlushWithOrgApacheLuceneIndexTermVectorsConsumerPerField:self];
}

- (void)finishDocument {
  if (doVectors_ == false) {
    return;
  }
  doVectors_ = false;
  jint numPostings = [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(bytesHash_)) size];
  OrgApacheLuceneUtilBytesRef *flushTerm = ((OrgApacheLuceneIndexTermVectorsConsumer *) nil_chk(termsWriter_))->flushTerm_;
  JreAssert(numPostings >= 0, @"org/apache/lucene/index/TermVectorsConsumerPerField.java:70 condition failed: assert numPostings >= 0;");
  OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *postings = JreRetainedLocalValue(termVectorsPostingsArray_);
  OrgApacheLuceneCodecsTermVectorsWriter *tv = termsWriter_->writer_;
  IOSIntArray *termIDs = [self sortPostings];
  [((OrgApacheLuceneCodecsTermVectorsWriter *) nil_chk(tv)) startFieldWithOrgApacheLuceneIndexFieldInfo:fieldInfo_ withInt:numPostings withBoolean:doVectorPositions_ withBoolean:doVectorOffsets_ withBoolean:hasPayloads_];
  OrgApacheLuceneIndexByteSliceReader *posReader = doVectorPositions_ ? termsWriter_->vectorSliceReaderPos_ : nil;
  OrgApacheLuceneIndexByteSliceReader *offReader = doVectorOffsets_ ? termsWriter_->vectorSliceReaderOff_ : nil;
  for (jint j = 0; j < numPostings; j++) {
    jint termID = IOSIntArray_Get(nil_chk(termIDs), j);
    jint freq = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *) nil_chk(postings))->freqs_), termID);
    [((OrgApacheLuceneUtilByteBlockPool *) nil_chk(termBytePool_)) setBytesRefWithOrgApacheLuceneUtilBytesRef:flushTerm withInt:IOSIntArray_Get(nil_chk(postings->textStarts_), termID)];
    [tv startTermWithOrgApacheLuceneUtilBytesRef:flushTerm withInt:freq];
    if (doVectorPositions_ || doVectorOffsets_) {
      if (posReader != nil) {
        [self initReaderWithOrgApacheLuceneIndexByteSliceReader:posReader withInt:termID withInt:0];
      }
      if (offReader != nil) {
        [self initReaderWithOrgApacheLuceneIndexByteSliceReader:offReader withInt:termID withInt:1];
      }
      [tv addProxWithInt:freq withOrgApacheLuceneStoreDataInput:posReader withOrgApacheLuceneStoreDataInput:offReader];
    }
    [tv finishTerm];
  }
  [tv finishField];
  [self reset];
  [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) setStoreTermVectors];
}

- (jboolean)startWithOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)field
                                            withBoolean:(jboolean)first {
  JreAssert([((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) fieldType])) indexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE), @"org/apache/lucene/index/TermVectorsConsumerPerField.java:114 condition failed: assert field.fieldType().indexOptions() != IndexOptions.NONE;");
  if (first) {
    if ([((OrgApacheLuceneUtilBytesRefHash *) nil_chk(bytesHash_)) size] != 0) {
      [self reset];
    }
    [bytesHash_ reinit];
    hasPayloads_ = false;
    doVectors_ = [((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectors];
    if (doVectors_) {
      ((OrgApacheLuceneIndexTermVectorsConsumer *) nil_chk(termsWriter_))->hasVectors_ = true;
      doVectorPositions_ = [((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorPositions];
      doVectorOffsets_ = [((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorOffsets];
      if (doVectorPositions_) {
        doVectorPayloads_ = [((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorPayloads];
      }
      else {
        doVectorPayloads_ = false;
        if ([((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorPayloads]) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"cannot index term vector payloads without term vector positions (field=\"", [field name], @"\")"));
        }
      }
    }
    else {
      if ([((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorOffsets]) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"cannot index term vector offsets when term vectors are not indexed (field=\"", [field name], @"\")"));
      }
      if ([((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorPositions]) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"cannot index term vector positions when term vectors are not indexed (field=\"", [field name], @"\")"));
      }
      if ([((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorPayloads]) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"cannot index term vector payloads when term vectors are not indexed (field=\"", [field name], @"\")"));
      }
    }
  }
  else {
    if (doVectors_ != [((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectors]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"all instances of a given field name must have the same term vectors settings (storeTermVectors changed for field=\"", [field name], @"\")"));
    }
    if (doVectorPositions_ != [((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorPositions]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"all instances of a given field name must have the same term vectors settings (storeTermVectorPositions changed for field=\"", [field name], @"\")"));
    }
    if (doVectorOffsets_ != [((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorOffsets]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"all instances of a given field name must have the same term vectors settings (storeTermVectorOffsets changed for field=\"", [field name], @"\")"));
    }
    if (doVectorPayloads_ != [((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk([field fieldType])) storeTermVectorPayloads]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"all instances of a given field name must have the same term vectors settings (storeTermVectorPayloads changed for field=\"", [field name], @"\")"));
    }
  }
  if (doVectors_) {
    if (doVectorOffsets_) {
      JreStrongAssign(&offsetAttribute_, ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->offsetAttribute_);
      JreAssert(offsetAttribute_ != nil, @"org/apache/lucene/index/TermVectorsConsumerPerField.java:180 condition failed: assert offsetAttribute != null;");
    }
    if (doVectorPayloads_) {
      JreStrongAssign(&payloadAttribute_, ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->payloadAttribute_);
    }
    else {
      JreStrongAssign(&payloadAttribute_, nil);
    }
  }
  return doVectors_;
}

- (void)writeProxWithOrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray:(OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *)postings
                                                                                      withInt:(jint)termID {
  if (doVectorOffsets_) {
    jint startOffset = ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->offset_ + [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAttribute_)) startOffset];
    jint endOffset = fieldState_->offset_ + [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(offsetAttribute_)) endOffset];
    [self writeVIntWithInt:1 withInt:startOffset - IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *) nil_chk(postings))->lastOffsets_), termID)];
    [self writeVIntWithInt:1 withInt:endOffset - startOffset];
    *IOSIntArray_GetRef(nil_chk(postings->lastOffsets_), termID) = endOffset;
  }
  if (doVectorPositions_) {
    OrgApacheLuceneUtilBytesRef *payload;
    if (payloadAttribute_ == nil) {
      payload = nil;
    }
    else {
      payload = [payloadAttribute_ getPayload];
    }
    jint pos = ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->position_ - IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *) nil_chk(postings))->lastPositions_), termID);
    if (payload != nil && payload->length_ > 0) {
      [self writeVIntWithInt:0 withInt:(JreLShift32(pos, 1)) | 1];
      [self writeVIntWithInt:0 withInt:payload->length_];
      [self writeBytesWithInt:0 withByteArray:payload->bytes_ withInt:payload->offset_ withInt:payload->length_];
      hasPayloads_ = true;
    }
    else {
      [self writeVIntWithInt:0 withInt:JreLShift32(pos, 1)];
    }
    *IOSIntArray_GetRef(nil_chk(postings->lastPositions_), termID) = fieldState_->position_;
  }
}

- (void)newTermWithInt:(jint)termID {
  OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *postings = JreRetainedLocalValue(termVectorsPostingsArray_);
  *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *) nil_chk(postings))->freqs_), termID) = 1;
  *IOSIntArray_GetRef(nil_chk(postings->lastOffsets_), termID) = 0;
  *IOSIntArray_GetRef(nil_chk(postings->lastPositions_), termID) = 0;
  [self writeProxWithOrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray:postings withInt:termID];
}

- (void)addTermWithInt:(jint)termID {
  OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *postings = JreRetainedLocalValue(termVectorsPostingsArray_);
  (*IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *) nil_chk(postings))->freqs_), termID))++;
  [self writeProxWithOrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray:postings withInt:termID];
}

- (void)newPostingsArray {
  JreStrongAssign(&termVectorsPostingsArray_, (OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *) cast_chk(postingsArray_, [OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray class]));
}

- (OrgApacheLuceneIndexParallelPostingsArray *)createPostingsArrayWithInt:(jint)size {
  return create_OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray_initWithInt_(size);
}

- (void)dealloc {
  RELEASE_(termVectorsPostingsArray_);
  RELEASE_(termsWriter_);
  RELEASE_(offsetAttribute_);
  RELEASE_(payloadAttribute_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexParallelPostingsArray;", 0x0, 9, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneIndexFieldInvertState:withOrgApacheLuceneIndexTermVectorsConsumer:withOrgApacheLuceneIndexFieldInfo:);
  methods[1].selector = @selector(finish);
  methods[2].selector = @selector(finishDocument);
  methods[3].selector = @selector(startWithOrgApacheLuceneIndexIndexableField:withBoolean:);
  methods[4].selector = @selector(writeProxWithOrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray:withInt:);
  methods[5].selector = @selector(newTermWithInt:);
  methods[6].selector = @selector(addTermWithInt:);
  methods[7].selector = @selector(newPostingsArray);
  methods[8].selector = @selector(createPostingsArrayWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "termVectorsPostingsArray_", "LOrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "termsWriter_", "LOrgApacheLuceneIndexTermVectorsConsumer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "doVectors_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "doVectorPositions_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "doVectorOffsets_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "doVectorPayloads_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "offsetAttribute_", "LOrgApacheLuceneAnalysisTokenattributesOffsetAttribute;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "payloadAttribute_", "LOrgApacheLuceneAnalysisTokenattributesPayloadAttribute;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hasPayloads_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexFieldInvertState;LOrgApacheLuceneIndexTermVectorsConsumer;LOrgApacheLuceneIndexFieldInfo;", "LJavaIoIOException;", "start", "LOrgApacheLuceneIndexIndexableField;Z", "writeProx", "LOrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray;I", "newTerm", "I", "addTerm", "createPostingsArray", "LOrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermVectorsConsumerPerField = { "TermVectorsConsumerPerField", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 9, 9, -1, 10, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermVectorsConsumerPerField;
}

@end

void OrgApacheLuceneIndexTermVectorsConsumerPerField_initPackagePrivateWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermVectorsConsumer_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneIndexTermVectorsConsumerPerField *self, OrgApacheLuceneIndexFieldInvertState *invertState, OrgApacheLuceneIndexTermVectorsConsumer *termsWriter, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  OrgApacheLuceneIndexTermsHashPerField_initPackagePrivateWithInt_withOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneIndexFieldInfo_(self, 2, invertState, termsWriter, nil, fieldInfo);
  JreStrongAssign(&self->termsWriter_, termsWriter);
}

OrgApacheLuceneIndexTermVectorsConsumerPerField *new_OrgApacheLuceneIndexTermVectorsConsumerPerField_initPackagePrivateWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermVectorsConsumer_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneIndexFieldInvertState *invertState, OrgApacheLuceneIndexTermVectorsConsumer *termsWriter, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorsConsumerPerField, initPackagePrivateWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermVectorsConsumer_withOrgApacheLuceneIndexFieldInfo_, invertState, termsWriter, fieldInfo)
}

OrgApacheLuceneIndexTermVectorsConsumerPerField *create_OrgApacheLuceneIndexTermVectorsConsumerPerField_initPackagePrivateWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermVectorsConsumer_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneIndexFieldInvertState *invertState, OrgApacheLuceneIndexTermVectorsConsumer *termsWriter, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorsConsumerPerField, initPackagePrivateWithOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermVectorsConsumer_withOrgApacheLuceneIndexFieldInfo_, invertState, termsWriter, fieldInfo)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermVectorsConsumerPerField)

@implementation OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray

- (instancetype)initWithInt:(jint)size {
  OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray_initWithInt_(self, size);
  return self;
}

- (OrgApacheLuceneIndexParallelPostingsArray *)newInstanceWithInt:(jint)size {
  return create_OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray_initWithInt_(size);
}

- (void)copyToWithOrgApacheLuceneIndexParallelPostingsArray:(OrgApacheLuceneIndexParallelPostingsArray *)toArray
                                                    withInt:(jint)numToCopy {
  JreAssert([toArray isKindOfClass:[OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray class]], @"org/apache/lucene/index/TermVectorsConsumerPerField.java:274 condition failed: assert toArray instanceof TermVectorsPostingsArray;");
  OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *to = (OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *) cast_chk(toArray, [OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray class]);
  [super copyToWithOrgApacheLuceneIndexParallelPostingsArray:toArray withInt:numToCopy];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(freqs_, 0, ((OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *) nil_chk(to))->freqs_, 0, size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastOffsets_, 0, to->lastOffsets_, 0, size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(lastPositions_, 0, to->lastPositions_, 0, size_);
}

- (jint)bytesPerPosting {
  return [super bytesPerPosting] + 3 * OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT;
}

- (void)dealloc {
  RELEASE_(freqs_);
  RELEASE_(lastOffsets_);
  RELEASE_(lastPositions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexParallelPostingsArray;", 0x0, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(newInstanceWithInt:);
  methods[2].selector = @selector(copyToWithOrgApacheLuceneIndexParallelPostingsArray:withInt:);
  methods[3].selector = @selector(bytesPerPosting);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "freqs_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastOffsets_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastPositions_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "newInstance", "copyTo", "LOrgApacheLuceneIndexParallelPostingsArray;I", "LOrgApacheLuceneIndexTermVectorsConsumerPerField;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray = { "TermVectorsPostingsArray", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x18, 4, 3, 4, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray;
}

@end

void OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray_initWithInt_(OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *self, jint size) {
  OrgApacheLuceneIndexParallelPostingsArray_initPackagePrivateWithInt_(self, size);
  JreStrongAssignAndConsume(&self->freqs_, [IOSIntArray newArrayWithLength:size]);
  JreStrongAssignAndConsume(&self->lastOffsets_, [IOSIntArray newArrayWithLength:size]);
  JreStrongAssignAndConsume(&self->lastPositions_, [IOSIntArray newArrayWithLength:size]);
}

OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *new_OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray, initWithInt_, size)
}

OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray *create_OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray, initWithInt_, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermVectorsConsumerPerField_TermVectorsPostingsArray)
