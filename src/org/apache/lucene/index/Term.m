//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/Term.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/CharacterCodingException.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/lukhnos/portmobile/charset/StandardCharsets.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/Term must not be compiled with ARC (-fobjc-arc)"
#endif

__attribute__((unused)) static NSString *OrgApacheLuceneIndexTerm_text(OrgApacheLuceneIndexTerm *self);

@implementation OrgApacheLuceneIndexTerm

- (instancetype)initWithNSString:(NSString *)fld
 withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(self, fld, bytes);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fld
                    withNSString:(NSString *)text {
  OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(self, fld, text);
  return self;
}

- (instancetype)initWithNSString:(NSString *)fld {
  OrgApacheLuceneIndexTerm_initWithNSString_(self, fld);
  return self;
}

- (NSString *)field {
  return field_;
}

- (NSString *)text {
  return OrgApacheLuceneIndexTerm_text(self);
}

+ (NSString *)toStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)termText {
  return OrgApacheLuceneIndexTerm_toStringWithOrgApacheLuceneUtilBytesRef_(termText);
}

- (OrgApacheLuceneUtilBytesRef *)bytes {
  return bytes_;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (obj == nil) return false;
  if (!JreObjectEqualsEquals([self java_getClass], [obj java_getClass])) return false;
  OrgApacheLuceneIndexTerm *other = (OrgApacheLuceneIndexTerm *) cast_chk(obj, [OrgApacheLuceneIndexTerm class]);
  if (field_ == nil) {
    if (other->field_ != nil) return false;
  }
  else if (![field_ isEqual:other->field_]) return false;
  if (bytes_ == nil) {
    if (other->bytes_ != nil) return false;
  }
  else if (![bytes_ isEqual:other->bytes_]) return false;
  return true;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + ((field_ == nil) ? 0 : ((jint) [((NSString *) nil_chk(field_)) hash]));
  result = prime * result + ((bytes_ == nil) ? 0 : ((jint) [((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes_)) hash]));
  return result;
}

- (jint)compareToWithId:(OrgApacheLuceneIndexTerm *)other {
  cast_chk(other, [OrgApacheLuceneIndexTerm class]);
  if ([((NSString *) nil_chk(field_)) isEqual:((OrgApacheLuceneIndexTerm *) nil_chk(other))->field_]) {
    return [((OrgApacheLuceneUtilBytesRef *) nil_chk(bytes_)) compareToWithId:other->bytes_];
  }
  else {
    return [((NSString *) nil_chk(field_)) compareToWithId:other->field_];
  }
}

- (void)setWithNSString:(NSString *)fld
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes {
  JreStrongAssign(&field_, fld);
  JreStrongAssign(&self->bytes_, bytes);
}

- (NSString *)description {
  return JreStrcat("$C$", field_, ':', OrgApacheLuceneIndexTerm_text(self));
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(bytes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x19, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilBytesRef;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 10, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withOrgApacheLuceneUtilBytesRef:);
  methods[1].selector = @selector(initWithNSString:withNSString:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(field);
  methods[4].selector = @selector(text);
  methods[5].selector = @selector(toStringWithOrgApacheLuceneUtilBytesRef:);
  methods[6].selector = @selector(bytes);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(compareToWithId:);
  methods[10].selector = @selector(setWithNSString:withOrgApacheLuceneUtilBytesRef:);
  methods[11].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bytes_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgApacheLuceneUtilBytesRef;", "LNSString;LNSString;", "LNSString;", "toString", "LOrgApacheLuceneUtilBytesRef;", "equals", "LNSObject;", "hashCode", "compareTo", "LOrgApacheLuceneIndexTerm;", "set", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/index/Term;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTerm = { "Term", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x11, 12, 2, -1, -1, -1, 11, -1 };
  return &_OrgApacheLuceneIndexTerm;
}

@end

void OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexTerm *self, NSString *fld, OrgApacheLuceneUtilBytesRef *bytes) {
  NSObject_init(self);
  JreStrongAssign(&self->field_, fld);
  JreStrongAssign(&self->bytes_, bytes);
}

OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(NSString *fld, OrgApacheLuceneUtilBytesRef *bytes) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_withOrgApacheLuceneUtilBytesRef_, fld, bytes)
}

OrgApacheLuceneIndexTerm *create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(NSString *fld, OrgApacheLuceneUtilBytesRef *bytes) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_withOrgApacheLuceneUtilBytesRef_, fld, bytes)
}

void OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(OrgApacheLuceneIndexTerm *self, NSString *fld, NSString *text) {
  OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(self, fld, create_OrgApacheLuceneUtilBytesRef_initWithJavaLangCharSequence_(text));
}

OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(NSString *fld, NSString *text) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_withNSString_, fld, text)
}

OrgApacheLuceneIndexTerm *create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(NSString *fld, NSString *text) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_withNSString_, fld, text)
}

void OrgApacheLuceneIndexTerm_initWithNSString_(OrgApacheLuceneIndexTerm *self, NSString *fld) {
  OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(self, fld, create_OrgApacheLuceneUtilBytesRef_init());
}

OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_(NSString *fld) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_, fld)
}

OrgApacheLuceneIndexTerm *create_OrgApacheLuceneIndexTerm_initWithNSString_(NSString *fld) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTerm, initWithNSString_, fld)
}

NSString *OrgApacheLuceneIndexTerm_text(OrgApacheLuceneIndexTerm *self) {
  return OrgApacheLuceneIndexTerm_toStringWithOrgApacheLuceneUtilBytesRef_(self->bytes_);
}

NSString *OrgApacheLuceneIndexTerm_toStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *termText) {
  OrgApacheLuceneIndexTerm_initialize();
  JavaNioCharsetCharsetDecoder *decoder = JreRetainedLocalValue([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(JreLoadStatic(OrgLukhnosPortmobileCharsetStandardCharsets, UTF_8))) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPORT)])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPORT)]);
  @try {
    return [((JavaNioCharBuffer *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk(decoder)) decodeWithJavaNioByteBuffer:JavaNioByteBuffer_wrapWithByteArray_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(termText))->bytes_, termText->offset_, termText->length_)])) description];
  }
  @catch (JavaNioCharsetCharacterCodingException *e) {
    return [termText description];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTerm)
