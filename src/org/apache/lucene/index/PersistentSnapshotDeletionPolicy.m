//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/PersistentSnapshotDeletionPolicy.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/CodecUtil.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/PersistentSnapshotDeletionPolicy.h"
#include "org/apache/lucene/index/SnapshotDeletionPolicy.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/util/IOUtils.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/PersistentSnapshotDeletionPolicy must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy () {
 @public
  jlong nextWriteGen_;
  OrgApacheLuceneStoreDirectory *dir_;
}

- (void)persist;

- (void)clearPriorSnapshots;

/*!
 @brief Reads the snapshots information from the given <code>Directory</code>.This
  method can be used if the snapshots information is needed, however you
  cannot instantiate the deletion policy (because e.g., some other process
  keeps a lock on the snapshots directory).
 */
- (void)loadPriorSnapshots;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, dir_, OrgApacheLuceneStoreDirectory *)

inline jint OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_get_VERSION_START(void);
#define OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_VERSION_START 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, VERSION_START, jint)

inline jint OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_get_VERSION_CURRENT(void);
#define OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_VERSION_CURRENT 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, VERSION_CURRENT, jint)

inline NSString *OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_get_CODEC_NAME(void);
static NSString *OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_CODEC_NAME = @"snapshots";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, CODEC_NAME, NSString *)

__attribute__((unused)) static void OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_persist(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *self);

__attribute__((unused)) static void OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_clearPriorSnapshots(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *self);

__attribute__((unused)) static void OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_loadPriorSnapshots(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *self);

NSString *OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX = @"snapshots_";

@implementation OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy

+ (NSString *)SNAPSHOTS_PREFIX {
  return OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX;
}

- (instancetype)initWithOrgApacheLuceneIndexIndexDeletionPolicy:(OrgApacheLuceneIndexIndexDeletionPolicy *)primary
                              withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_(self, primary, dir);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexIndexDeletionPolicy:(OrgApacheLuceneIndexIndexDeletionPolicy *)primary
                              withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
             withOrgApacheLuceneIndexIndexWriterConfig_OpenMode:(OrgApacheLuceneIndexIndexWriterConfig_OpenMode *)mode {
  OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_(self, primary, dir, mode);
  return self;
}

- (OrgApacheLuceneIndexIndexCommit *)snapshot {
  @synchronized(self) {
    OrgApacheLuceneIndexIndexCommit *ic = [super snapshot];
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_persist(self);
      success = true;
    }
    @finally {
      if (!success) {
        @try {
          [super release__WithOrgApacheLuceneIndexIndexCommit:ic];
        }
        @catch (JavaLangException *e) {
        }
      }
    }
    return JreRetainedLocalValue(ic);
  }
}

- (void)release__WithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  @synchronized(self) {
    [super release__WithOrgApacheLuceneIndexIndexCommit:commit];
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_persist(self);
      success = true;
    }
    @finally {
      if (!success) {
        @try {
          [self incRefWithOrgApacheLuceneIndexIndexCommit:commit];
        }
        @catch (JavaLangException *e) {
        }
      }
    }
  }
}

- (void)release__WithLong:(jlong)gen {
  @synchronized(self) {
    [super releaseGenWithLong:gen];
    OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_persist(self);
  }
}

- (void)persist {
  OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_persist(self);
}

- (void)clearPriorSnapshots {
  OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_clearPriorSnapshots(self);
}

- (NSString *)getLastSaveFile {
  if (nextWriteGen_ == 0) {
    return nil;
  }
  else {
    return JreStrcat("$J", OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX, (nextWriteGen_ - 1));
  }
}

- (void)loadPriorSnapshots {
  OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_loadPriorSnapshots(self);
}

- (void)dealloc {
  RELEASE_(dir_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexCommit;", 0x21, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 4, 1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(initWithOrgApacheLuceneIndexIndexDeletionPolicy:withOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexWriterConfig_OpenMode:);
  methods[2].selector = @selector(snapshot);
  methods[3].selector = @selector(release__WithOrgApacheLuceneIndexIndexCommit:);
  methods[4].selector = @selector(release__WithLong:);
  methods[5].selector = @selector(persist);
  methods[6].selector = @selector(clearPriorSnapshots);
  methods[7].selector = @selector(getLastSaveFile);
  methods[8].selector = @selector(loadPriorSnapshots);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SNAPSHOTS_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "VERSION_START", "I", .constantValue.asInt = OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_VERSION_START, 0x1a, -1, -1, -1, -1 },
    { "VERSION_CURRENT", "I", .constantValue.asInt = OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_VERSION_CURRENT, 0x1a, -1, -1, -1, -1 },
    { "CODEC_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "nextWriteGen_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dir_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexIndexDeletionPolicy;LOrgApacheLuceneStoreDirectory;", "LJavaIoIOException;", "LOrgApacheLuceneIndexIndexDeletionPolicy;LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexWriterConfig_OpenMode;", "release", "LOrgApacheLuceneIndexIndexCommit;", "J", &OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX, &OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_CODEC_NAME };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy = { "PersistentSnapshotDeletionPolicy", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy;
}

@end

void OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *self, OrgApacheLuceneIndexIndexDeletionPolicy *primary, OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_(self, primary, dir, JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE_OR_APPEND));
}

OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *new_OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexDeletionPolicy *primary, OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_, primary, dir)
}

OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *create_OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexIndexDeletionPolicy *primary, OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_, primary, dir)
}

void OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *self, OrgApacheLuceneIndexIndexDeletionPolicy *primary, OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneIndexIndexWriterConfig_OpenMode *mode) {
  OrgApacheLuceneIndexSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_(self, primary);
  JreStrongAssign(&self->dir_, dir);
  if (mode == JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, CREATE)) {
    OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_clearPriorSnapshots(self);
  }
  OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_loadPriorSnapshots(self);
  if (mode == JreLoadEnum(OrgApacheLuceneIndexIndexWriterConfig_OpenMode, APPEND) && self->nextWriteGen_ == 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"no snapshots stored in this directory");
  }
}

OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *new_OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_(OrgApacheLuceneIndexIndexDeletionPolicy *primary, OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneIndexIndexWriterConfig_OpenMode *mode) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_, primary, dir, mode)
}

OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *create_OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_(OrgApacheLuceneIndexIndexDeletionPolicy *primary, OrgApacheLuceneStoreDirectory *dir, OrgApacheLuceneIndexIndexWriterConfig_OpenMode *mode) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy, initWithOrgApacheLuceneIndexIndexDeletionPolicy_withOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexWriterConfig_OpenMode_, primary, dir, mode)
}

void OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_persist(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *self) {
  @synchronized(self) {
    NSString *fileName = JreStrcat("$J", OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX, self->nextWriteGen_);
    OrgApacheLuceneStoreIndexOutput *out = JreRetainedLocalValue([((OrgApacheLuceneStoreDirectory *) nil_chk(self->dir_)) createOutputWithNSString:fileName withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT)]);
    jboolean success = false;
    @try {
      OrgApacheLuceneCodecsCodecUtil_writeHeaderWithOrgApacheLuceneStoreDataOutput_withNSString_withInt_(out, OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_CODEC_NAME, OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_VERSION_CURRENT);
      [((OrgApacheLuceneStoreIndexOutput *) nil_chk(out)) writeVIntWithInt:[((id<JavaUtilMap>) nil_chk(self->refCounts_)) size]];
      for (id<JavaUtilMap_Entry> __strong ent in nil_chk([self->refCounts_ entrySet])) {
        [out writeVLongWithLong:[((JavaLangLong *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(ent)) getKey])) longLongValue]];
        [out writeVIntWithInt:[((JavaLangInteger *) nil_chk([ent getValue])) intValue]];
      }
      success = true;
    }
    @finally {
      if (!success) {
        OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ out } count:1 type:JavaIoCloseable_class_()]);
        OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory_withNSStringArray_(self->dir_, [IOSObjectArray arrayWithObjects:(id[]){ fileName } count:1 type:NSString_class_()]);
      }
      else {
        OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ out } count:1 type:JavaIoCloseable_class_()]);
      }
    }
    [self->dir_ syncWithJavaUtilCollection:JavaUtilCollections_singletonListWithId_(fileName)];
    if (self->nextWriteGen_ > 0) {
      NSString *lastSaveFile = JreStrcat("$J", OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX, (self->nextWriteGen_ - 1));
      OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory_withNSStringArray_(self->dir_, [IOSObjectArray arrayWithObjects:(id[]){ lastSaveFile } count:1 type:NSString_class_()]);
    }
    self->nextWriteGen_++;
  }
}

void OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_clearPriorSnapshots(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *self) {
  @synchronized(self) {
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneStoreDirectory *) nil_chk(self->dir_)) listAll];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *file = *b__++;
        if ([((NSString *) nil_chk(file)) java_hasPrefix:OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX]) {
          [self->dir_ deleteFileWithNSString:file];
        }
      }
    }
  }
}

void OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_loadPriorSnapshots(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy *self) {
  @synchronized(self) {
    jlong genLoaded = -1;
    JavaIoIOException *ioe = nil;
    id<JavaUtilList> snapshotFiles = create_JavaUtilArrayList_init();
    {
      IOSObjectArray *a__ = [((OrgApacheLuceneStoreDirectory *) nil_chk(self->dir_)) listAll];
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *file = *b__++;
        if ([((NSString *) nil_chk(file)) java_hasPrefix:OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX]) {
          jlong gen = JavaLangLong_parseLongWithNSString_([file java_substring:[((NSString *) nil_chk(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX)) java_length]]);
          if (genLoaded == -1 || gen > genLoaded) {
            [snapshotFiles addWithId:file];
            id<JavaUtilMap> m = create_JavaUtilHashMap_init();
            OrgApacheLuceneStoreIndexInput *in = JreRetainedLocalValue([self->dir_ openInputWithNSString:file withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT)]);
            @try {
              OrgApacheLuceneCodecsCodecUtil_checkHeaderWithOrgApacheLuceneStoreDataInput_withNSString_withInt_withInt_(in, OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_CODEC_NAME, OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_VERSION_START, OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_VERSION_START);
              jint count = [((OrgApacheLuceneStoreIndexInput *) nil_chk(in)) readVInt];
              for (jint i = 0; i < count; i++) {
                jlong commitGen = [in readVLong];
                jint refCount = [in readVInt];
                [m putWithId:JavaLangLong_valueOfWithLong_(commitGen) withId:JavaLangInteger_valueOfWithInt_(refCount)];
              }
            }
            @catch (JavaIoIOException *ioe2) {
              if (ioe == nil) {
                ioe = ioe2;
              }
            }
            @finally {
              [((OrgApacheLuceneStoreIndexInput *) nil_chk(in)) close];
            }
            genLoaded = gen;
            [((id<JavaUtilMap>) nil_chk(self->refCounts_)) clear];
            [self->refCounts_ putAllWithJavaUtilMap:m];
          }
        }
      }
    }
    if (genLoaded == -1) {
      if (ioe != nil) {
        @throw ioe;
      }
    }
    else {
      if ([snapshotFiles size] > 1) {
        NSString *curFileName = JreStrcat("$J", OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy_SNAPSHOTS_PREFIX, genLoaded);
        for (NSString * __strong file in snapshotFiles) {
          if (![curFileName isEqual:file]) {
            OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory_withNSStringArray_(self->dir_, [IOSObjectArray arrayWithObjects:(id[]){ file } count:1 type:NSString_class_()]);
          }
        }
      }
      self->nextWriteGen_ = 1 + genLoaded;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexPersistentSnapshotDeletionPolicy)
