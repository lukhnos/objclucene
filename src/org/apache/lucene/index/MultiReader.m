//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/MultiReader.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/MultiReader.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/MultiReader must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexMultiReader () {
 @public
  jboolean closeSubReaders_;
}

@end

@implementation OrgApacheLuceneIndexMultiReader

- (instancetype)initWithOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)subReaders {
  OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_(self, subReaders);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)subReaders
                                                 withBoolean:(jboolean)closeSubReaders {
  OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(self, subReaders, closeSubReaders);
  return self;
}

- (void)doClose {
  @synchronized(self) {
    JavaIoIOException *ioe = nil;
    for (OrgApacheLuceneIndexIndexReader * __strong r in nil_chk([self getSequentialSubReaders])) {
      @try {
        if (closeSubReaders_) {
          [((OrgApacheLuceneIndexIndexReader *) nil_chk(r)) close];
        }
        else {
          [((OrgApacheLuceneIndexIndexReader *) nil_chk(r)) decRef];
        }
      }
      @catch (JavaIoIOException *e) {
        if (ioe == nil) ioe = e;
      }
    }
    if (ioe != nil) @throw ioe;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 1, -1, -1, -1 },
    { NULL, "V", 0x24, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexReaderArray:);
  methods[1].selector = @selector(initWithOrgApacheLuceneIndexIndexReaderArray:withBoolean:);
  methods[2].selector = @selector(doClose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "closeSubReaders_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "[LOrgApacheLuceneIndexIndexReader;Z", "Lorg/apache/lucene/index/BaseCompositeReader<Lorg/apache/lucene/index/IndexReader;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexMultiReader = { "MultiReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, 3, -1 };
  return &_OrgApacheLuceneIndexMultiReader;
}

@end

void OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_(OrgApacheLuceneIndexMultiReader *self, IOSObjectArray *subReaders) {
  OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(self, subReaders, true);
}

OrgApacheLuceneIndexMultiReader *new_OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_(IOSObjectArray *subReaders) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiReader, initWithOrgApacheLuceneIndexIndexReaderArray_, subReaders)
}

OrgApacheLuceneIndexMultiReader *create_OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_(IOSObjectArray *subReaders) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiReader, initWithOrgApacheLuceneIndexIndexReaderArray_, subReaders)
}

void OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(OrgApacheLuceneIndexMultiReader *self, IOSObjectArray *subReaders, jboolean closeSubReaders) {
  OrgApacheLuceneIndexBaseCompositeReader_initWithOrgApacheLuceneIndexIndexReaderArray_(self, [((IOSObjectArray *) nil_chk(subReaders)) java_clone]);
  self->closeSubReaders_ = closeSubReaders;
  if (!closeSubReaders) {
    for (jint i = 0; i < subReaders->size_; i++) {
      [((OrgApacheLuceneIndexIndexReader *) nil_chk(IOSObjectArray_Get(subReaders, i))) incRef];
    }
  }
}

OrgApacheLuceneIndexMultiReader *new_OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(IOSObjectArray *subReaders, jboolean closeSubReaders) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexMultiReader, initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_, subReaders, closeSubReaders)
}

OrgApacheLuceneIndexMultiReader *create_OrgApacheLuceneIndexMultiReader_initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_(IOSObjectArray *subReaders, jboolean closeSubReaders) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexMultiReader, initWithOrgApacheLuceneIndexIndexReaderArray_withBoolean_, subReaders, closeSubReaders)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexMultiReader)
