//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/BaseCompositeReader.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "org/apache/lucene/index/CompositeReader.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/ReaderUtil.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/Term.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/BaseCompositeReader must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexBaseCompositeReader () {
 @public
  IOSObjectArray *subReaders_;
  IOSIntArray *starts_;
  jint maxDoc_;
  jint numDocs_;
  /*!
   @brief List view solely for <code>getSequentialSubReaders()</code>,
  for effectiveness the array is used internally.
   */
  id<JavaUtilList> subReadersList_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexBaseCompositeReader, subReaders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexBaseCompositeReader, starts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexBaseCompositeReader, subReadersList_, id<JavaUtilList>)

__attribute__((unused)) static jint OrgApacheLuceneIndexBaseCompositeReader_readerIndexWithInt_(OrgApacheLuceneIndexBaseCompositeReader *self, jint docID);

@implementation OrgApacheLuceneIndexBaseCompositeReader

- (instancetype)initWithOrgApacheLuceneIndexIndexReaderArray:(IOSObjectArray *)subReaders {
  OrgApacheLuceneIndexBaseCompositeReader_initWithOrgApacheLuceneIndexIndexReaderArray_(self, subReaders);
  return self;
}

- (OrgApacheLuceneIndexFields *)getTermVectorsWithInt:(jint)docID {
  [self ensureOpen];
  jint i = OrgApacheLuceneIndexBaseCompositeReader_readerIndexWithInt_(self, docID);
  return [((OrgApacheLuceneIndexIndexReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) getTermVectorsWithInt:docID - IOSIntArray_Get(nil_chk(starts_), i)];
}

- (jint)numDocs {
  return numDocs_;
}

- (jint)maxDoc {
  return maxDoc_;
}

- (void)documentWithInt:(jint)docID
withOrgApacheLuceneIndexStoredFieldVisitor:(OrgApacheLuceneIndexStoredFieldVisitor *)visitor {
  [self ensureOpen];
  jint i = OrgApacheLuceneIndexBaseCompositeReader_readerIndexWithInt_(self, docID);
  [((OrgApacheLuceneIndexIndexReader *) nil_chk(IOSObjectArray_Get(nil_chk(subReaders_), i))) documentWithInt:docID - IOSIntArray_Get(nil_chk(starts_), i) withOrgApacheLuceneIndexStoredFieldVisitor:visitor];
}

- (jint)docFreqWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [self ensureOpen];
  jint total = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) {
    total += [((OrgApacheLuceneIndexIndexReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) docFreqWithOrgApacheLuceneIndexTerm:term];
  }
  return total;
}

- (jlong)totalTermFreqWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  [self ensureOpen];
  jlong total = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(subReaders_))->size_; i++) {
    jlong sub = [((OrgApacheLuceneIndexIndexReader *) nil_chk(IOSObjectArray_Get(subReaders_, i))) totalTermFreqWithOrgApacheLuceneIndexTerm:term];
    if (sub == -1) {
      return -1;
    }
    total += sub;
  }
  return total;
}

- (jlong)getSumDocFreqWithNSString:(NSString *)field {
  [self ensureOpen];
  jlong total = 0;
  {
    IOSObjectArray *a__ = subReaders_;
    OrgApacheLuceneIndexIndexReader * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexIndexReader * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexIndexReader *reader = *b__++;
      jlong sub = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) getSumDocFreqWithNSString:field];
      if (sub == -1) {
        return -1;
      }
      total += sub;
    }
  }
  return total;
}

- (jint)getDocCountWithNSString:(NSString *)field {
  [self ensureOpen];
  jint total = 0;
  {
    IOSObjectArray *a__ = subReaders_;
    OrgApacheLuceneIndexIndexReader * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexIndexReader * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexIndexReader *reader = *b__++;
      jint sub = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) getDocCountWithNSString:field];
      if (sub == -1) {
        return -1;
      }
      total += sub;
    }
  }
  return total;
}

- (jlong)getSumTotalTermFreqWithNSString:(NSString *)field {
  [self ensureOpen];
  jlong total = 0;
  {
    IOSObjectArray *a__ = subReaders_;
    OrgApacheLuceneIndexIndexReader * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexIndexReader * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexIndexReader *reader = *b__++;
      jlong sub = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) getSumTotalTermFreqWithNSString:field];
      if (sub == -1) {
        return -1;
      }
      total += sub;
    }
  }
  return total;
}

- (jint)readerIndexWithInt:(jint)docID {
  return OrgApacheLuceneIndexBaseCompositeReader_readerIndexWithInt_(self, docID);
}

- (jint)readerBaseWithInt:(jint)readerIndex {
  if (readerIndex < 0 || readerIndex >= ((IOSObjectArray *) nil_chk(subReaders_))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"readerIndex must be >= 0 and < getSequentialSubReaders().size()");
  }
  return IOSIntArray_Get(nil_chk(self->starts_), readerIndex);
}

- (id<JavaUtilList>)getSequentialSubReaders {
  return subReadersList_;
}

- (void)dealloc {
  RELEASE_(subReaders_);
  RELEASE_(starts_);
  RELEASE_(subReadersList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, 1, 2, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexFields;", 0x11, 3, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 6, 1, -1, -1, -1 },
    { NULL, "I", 0x11, 7, 8, 1, -1, -1, -1 },
    { NULL, "J", 0x11, 9, 8, 1, -1, -1, -1 },
    { NULL, "J", 0x11, 10, 11, 1, -1, -1, -1 },
    { NULL, "I", 0x11, 12, 11, 1, -1, -1, -1 },
    { NULL, "J", 0x11, 13, 11, 1, -1, -1, -1 },
    { NULL, "I", 0x14, 14, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x14, 15, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x14, -1, -1, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexIndexReaderArray:);
  methods[1].selector = @selector(getTermVectorsWithInt:);
  methods[2].selector = @selector(numDocs);
  methods[3].selector = @selector(maxDoc);
  methods[4].selector = @selector(documentWithInt:withOrgApacheLuceneIndexStoredFieldVisitor:);
  methods[5].selector = @selector(docFreqWithOrgApacheLuceneIndexTerm:);
  methods[6].selector = @selector(totalTermFreqWithOrgApacheLuceneIndexTerm:);
  methods[7].selector = @selector(getSumDocFreqWithNSString:);
  methods[8].selector = @selector(getDocCountWithNSString:);
  methods[9].selector = @selector(getSumTotalTermFreqWithNSString:);
  methods[10].selector = @selector(readerIndexWithInt:);
  methods[11].selector = @selector(readerBaseWithInt:);
  methods[12].selector = @selector(getSequentialSubReaders);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "subReaders_", "[LOrgApacheLuceneIndexIndexReader;", .constantValue.asLong = 0, 0x12, -1, -1, 17, -1 },
    { "starts_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxDoc_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "numDocs_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "subReadersList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
  };
  static const void *ptrTable[] = { "[LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "([TR;)V", "getTermVectors", "I", "document", "ILOrgApacheLuceneIndexStoredFieldVisitor;", "docFreq", "LOrgApacheLuceneIndexTerm;", "totalTermFreq", "getSumDocFreq", "LNSString;", "getDocCount", "getSumTotalTermFreq", "readerIndex", "readerBase", "()Ljava/util/List<+TR;>;", "[TR;", "Ljava/util/List<TR;>;", "<R:Lorg/apache/lucene/index/IndexReader;>Lorg/apache/lucene/index/CompositeReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexBaseCompositeReader = { "BaseCompositeReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x401, 13, 5, -1, -1, -1, 19, -1 };
  return &_OrgApacheLuceneIndexBaseCompositeReader;
}

@end

void OrgApacheLuceneIndexBaseCompositeReader_initWithOrgApacheLuceneIndexIndexReaderArray_(OrgApacheLuceneIndexBaseCompositeReader *self, IOSObjectArray *subReaders) {
  OrgApacheLuceneIndexCompositeReader_init(self);
  JreStrongAssign(&self->subReaders_, subReaders);
  JreStrongAssign(&self->subReadersList_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(JavaUtilArrays_asListWithNSObjectArray_(subReaders)));
  JreStrongAssignAndConsume(&self->starts_, [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(subReaders))->size_ + 1]);
  jlong maxDoc = 0;
  jlong numDocs = 0;
  for (jint i = 0; i < subReaders->size_; i++) {
    *IOSIntArray_GetRef(self->starts_, i) = (jint) maxDoc;
    OrgApacheLuceneIndexIndexReader *r = IOSObjectArray_Get(subReaders, i);
    maxDoc += [((OrgApacheLuceneIndexIndexReader *) nil_chk(r)) maxDoc];
    numDocs += [r numDocs];
    [r registerParentReaderWithOrgApacheLuceneIndexIndexReader:self];
  }
  if (maxDoc > OrgApacheLuceneIndexIndexWriter_getActualMaxDocs()) {
    if ([self isKindOfClass:[OrgApacheLuceneIndexDirectoryReader class]]) {
      @throw create_OrgApacheLuceneIndexCorruptIndexException_initWithNSString_withNSString_(JreStrcat("$I$J", @"Too many documents: an index cannot exceed ", OrgApacheLuceneIndexIndexWriter_getActualMaxDocs(), @" but readers have total maxDoc=", maxDoc), JavaUtilArrays_toStringWithNSObjectArray_(subReaders));
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$J", @"Too many documents: composite IndexReaders cannot exceed ", OrgApacheLuceneIndexIndexWriter_getActualMaxDocs(), @" but readers have total maxDoc=", maxDoc));
    }
  }
  self->maxDoc_ = (jint) maxDoc;
  *IOSIntArray_GetRef(self->starts_, subReaders->size_) = self->maxDoc_;
  self->numDocs_ = (jint) numDocs;
}

jint OrgApacheLuceneIndexBaseCompositeReader_readerIndexWithInt_(OrgApacheLuceneIndexBaseCompositeReader *self, jint docID) {
  if (docID < 0 || docID >= self->maxDoc_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"docID must be >= 0 and < maxDoc=", self->maxDoc_, @" (got docID=", docID, ')'));
  }
  return OrgApacheLuceneIndexReaderUtil_subIndexWithInt_withIntArray_(docID, self->starts_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexBaseCompositeReader)
