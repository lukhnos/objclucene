//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/StandardDirectoryReader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/ReadersAndUpdates.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/StandardDirectoryReader.h"
#include "org/apache/lucene/store/AlreadyClosedException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/IOUtils.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/StandardDirectoryReader must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneIndexStandardDirectoryReader () {
 @public
  jboolean applyAllDeletes_;
}

/*!
 @brief This constructor is only used for <code>doOpenIfChanged(SegmentInfos)</code>
 */
+ (OrgApacheLuceneIndexDirectoryReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                                          withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                              withJavaUtilList:(id<JavaUtilList>)oldReaders;

+ (void)decRefWhileHandlingExceptionWithOrgApacheLuceneIndexSegmentReaderArray:(IOSObjectArray *)readers;

- (OrgApacheLuceneIndexDirectoryReader *)doOpenFromWriterWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit;

- (OrgApacheLuceneIndexDirectoryReader *)doOpenNoWriterWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit;

- (OrgApacheLuceneIndexDirectoryReader *)doOpenFromCommitWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit;

@end

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withJavaUtilList_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *infos, id<JavaUtilList> oldReaders);

__attribute__((unused)) static void OrgApacheLuceneIndexStandardDirectoryReader_decRefWhileHandlingExceptionWithOrgApacheLuceneIndexSegmentReaderArray_(IOSObjectArray *readers);

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromWriterWithOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexStandardDirectoryReader *self, OrgApacheLuceneIndexIndexCommit *commit);

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_doOpenNoWriterWithOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexStandardDirectoryReader *self, OrgApacheLuceneIndexIndexCommit *commit);

__attribute__((unused)) static OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromCommitWithOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexStandardDirectoryReader *self, OrgApacheLuceneIndexIndexCommit *commit);

@interface OrgApacheLuceneIndexStandardDirectoryReader_1 : OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory;

- (OrgApacheLuceneIndexDirectoryReader *)doBodyWithNSString:(NSString *)segmentFileName;

- (OrgApacheLuceneIndexDirectoryReader *)run;

- (OrgApacheLuceneIndexDirectoryReader *)runWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexStandardDirectoryReader_1)

__attribute__((unused)) static void OrgApacheLuceneIndexStandardDirectoryReader_1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader_1 *self, OrgApacheLuceneStoreDirectory *directory);

__attribute__((unused)) static OrgApacheLuceneIndexStandardDirectoryReader_1 *new_OrgApacheLuceneIndexStandardDirectoryReader_1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexStandardDirectoryReader_1 *create_OrgApacheLuceneIndexStandardDirectoryReader_1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory);

@interface OrgApacheLuceneIndexStandardDirectoryReader_2 : OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile {
 @public
  OrgApacheLuceneIndexStandardDirectoryReader *this$0_;
}

- (instancetype)initWithOrgApacheLuceneIndexStandardDirectoryReader:(OrgApacheLuceneIndexStandardDirectoryReader *)outer$
                                  withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory;

- (OrgApacheLuceneIndexDirectoryReader *)doBodyWithNSString:(NSString *)segmentFileName;

- (OrgApacheLuceneIndexDirectoryReader *)run;

- (OrgApacheLuceneIndexDirectoryReader *)runWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexStandardDirectoryReader_2)

__attribute__((unused)) static void OrgApacheLuceneIndexStandardDirectoryReader_2_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader_2 *self, OrgApacheLuceneIndexStandardDirectoryReader *outer$, OrgApacheLuceneStoreDirectory *directory);

__attribute__((unused)) static OrgApacheLuceneIndexStandardDirectoryReader_2 *new_OrgApacheLuceneIndexStandardDirectoryReader_2_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader *outer$, OrgApacheLuceneStoreDirectory *directory) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexStandardDirectoryReader_2 *create_OrgApacheLuceneIndexStandardDirectoryReader_2_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader *outer$, OrgApacheLuceneStoreDirectory *directory);

@interface OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit () {
 @public
  NSString *segmentsFileName_;
  jint segmentCount_;
  OrgApacheLuceneIndexStandardDirectoryReader *reader_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit, segmentsFileName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit, reader_, OrgApacheLuceneIndexStandardDirectoryReader *)

@implementation OrgApacheLuceneIndexStandardDirectoryReader

- (instancetype)initPackagePrivateWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                            withOrgApacheLuceneIndexLeafReaderArray:(IOSObjectArray *)readers
                                withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                               withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)sis
                                                        withBoolean:(jboolean)applyAllDeletes {
  OrgApacheLuceneIndexStandardDirectoryReader_initPackagePrivateWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(self, directory, readers, writer, sis, applyAllDeletes);
  return self;
}

+ (OrgApacheLuceneIndexDirectoryReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                                           withOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexCommit_(directory, commit);
}

+ (OrgApacheLuceneIndexDirectoryReader *)openWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                            withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                     withBoolean:(jboolean)applyAllDeletes {
  return OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(writer, infos, applyAllDeletes);
}

+ (OrgApacheLuceneIndexDirectoryReader *)openWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory
                                          withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                              withJavaUtilList:(id<JavaUtilList>)oldReaders {
  return OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withJavaUtilList_(directory, infos, oldReaders);
}

+ (void)decRefWhileHandlingExceptionWithOrgApacheLuceneIndexSegmentReaderArray:(IOSObjectArray *)readers {
  OrgApacheLuceneIndexStandardDirectoryReader_decRefWhileHandlingExceptionWithOrgApacheLuceneIndexSegmentReaderArray_(readers);
}

- (NSString *)description {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  [buffer appendWithNSString:[[self java_getClass] getSimpleName]];
  [buffer appendWithChar:'('];
  NSString *segmentsFile = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) getSegmentsFileName];
  if (segmentsFile != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buffer appendWithNSString:segmentsFile])) appendWithNSString:@":"])) appendWithLong:[segmentInfos_ getVersion]];
  }
  if (writer_ != nil) {
    [buffer appendWithNSString:@":nrt"];
  }
  for (OrgApacheLuceneIndexLeafReader * __strong r in nil_chk([self getSequentialSubReaders])) {
    [buffer appendWithChar:' '];
    [buffer appendWithId:r];
  }
  [buffer appendWithChar:')'];
  return [buffer description];
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenIfChanged {
  return [self doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:nil];
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  [self ensureOpen];
  if (writer_ != nil) {
    return OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromWriterWithOrgApacheLuceneIndexIndexCommit_(self, commit);
  }
  else {
    return OrgApacheLuceneIndexStandardDirectoryReader_doOpenNoWriterWithOrgApacheLuceneIndexIndexCommit_(self, commit);
  }
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer
                                                                                withBoolean:(jboolean)applyAllDeletes {
  [self ensureOpen];
  if (JreObjectEqualsEquals(writer, self->writer_) && applyAllDeletes == self->applyAllDeletes_) {
    return OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromWriterWithOrgApacheLuceneIndexIndexCommit_(self, nil);
  }
  else {
    return [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getReaderWithBoolean:applyAllDeletes];
  }
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenFromWriterWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromWriterWithOrgApacheLuceneIndexIndexCommit_(self, commit);
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenNoWriterWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexStandardDirectoryReader_doOpenNoWriterWithOrgApacheLuceneIndexIndexCommit_(self, commit);
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenFromCommitWithOrgApacheLuceneIndexIndexCommit:(OrgApacheLuceneIndexIndexCommit *)commit {
  return OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromCommitWithOrgApacheLuceneIndexIndexCommit_(self, commit);
}

- (OrgApacheLuceneIndexDirectoryReader *)doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos {
  return OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withJavaUtilList_(directory_, infos, [self getSequentialSubReaders]);
}

- (jlong)getVersion {
  [self ensureOpen];
  return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) getVersion];
}

- (jboolean)isCurrent {
  [self ensureOpen];
  if (writer_ == nil || [writer_ isClosed]) {
    OrgApacheLuceneIndexSegmentInfos *sis = OrgApacheLuceneIndexSegmentInfos_readLatestCommitWithOrgApacheLuceneStoreDirectory_(directory_);
    return [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis)) getVersion] == [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos_)) getVersion];
  }
  else {
    return [writer_ nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_];
  }
}

- (void)doClose {
  JavaLangThrowable *firstExc = nil;
  for (OrgApacheLuceneIndexLeafReader * __strong r in nil_chk([self getSequentialSubReaders])) {
    @try {
      [((OrgApacheLuceneIndexLeafReader *) nil_chk(r)) decRef];
    }
    @catch (JavaLangThrowable *t) {
      if (firstExc == nil) {
        firstExc = t;
      }
    }
  }
  if (writer_ != nil) {
    @try {
      [writer_ decRefDeleterWithOrgApacheLuceneIndexSegmentInfos:segmentInfos_];
    }
    @catch (OrgApacheLuceneStoreAlreadyClosedException *ex) {
    }
  }
  OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(firstExc);
}

- (OrgApacheLuceneIndexIndexCommit *)getIndexCommit {
  [self ensureOpen];
  return create_OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(self, segmentInfos_, directory_);
}

- (void)dealloc {
  RELEASE_(writer_);
  RELEASE_(segmentInfos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x8, 2, 3, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x8, 2, 4, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0xa, 2, 5, 1, 6, -1, -1 },
    { NULL, "V", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x4, 10, 11, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x4, 10, 12, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x2, 13, 11, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x2, 14, 11, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x2, 15, 11, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x0, 10, 16, 1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexIndexCommit;", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexLeafReaderArray:withOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexSegmentInfos:withBoolean:);
  methods[1].selector = @selector(openWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexCommit:);
  methods[2].selector = @selector(openWithOrgApacheLuceneIndexIndexWriter:withOrgApacheLuceneIndexSegmentInfos:withBoolean:);
  methods[3].selector = @selector(openWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexSegmentInfos:withJavaUtilList:);
  methods[4].selector = @selector(decRefWhileHandlingExceptionWithOrgApacheLuceneIndexSegmentReaderArray:);
  methods[5].selector = @selector(description);
  methods[6].selector = @selector(doOpenIfChanged);
  methods[7].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexIndexCommit:);
  methods[8].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexIndexWriter:withBoolean:);
  methods[9].selector = @selector(doOpenFromWriterWithOrgApacheLuceneIndexIndexCommit:);
  methods[10].selector = @selector(doOpenNoWriterWithOrgApacheLuceneIndexIndexCommit:);
  methods[11].selector = @selector(doOpenFromCommitWithOrgApacheLuceneIndexIndexCommit:);
  methods[12].selector = @selector(doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos:);
  methods[13].selector = @selector(getVersion);
  methods[14].selector = @selector(isCurrent);
  methods[15].selector = @selector(doClose);
  methods[16].selector = @selector(getIndexCommit);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", "LOrgApacheLuceneIndexIndexWriter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "segmentInfos_", "LOrgApacheLuceneIndexSegmentInfos;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "applyAllDeletes_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;[LOrgApacheLuceneIndexLeafReader;LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexSegmentInfos;Z", "LJavaIoIOException;", "open", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexIndexCommit;", "LOrgApacheLuceneIndexIndexWriter;LOrgApacheLuceneIndexSegmentInfos;Z", "LOrgApacheLuceneStoreDirectory;LOrgApacheLuceneIndexSegmentInfos;LJavaUtilList;", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfos;Ljava/util/List<+Lorg/apache/lucene/index/LeafReader;>;)Lorg/apache/lucene/index/DirectoryReader;", "decRefWhileHandlingException", "[LOrgApacheLuceneIndexSegmentReader;", "toString", "doOpenIfChanged", "LOrgApacheLuceneIndexIndexCommit;", "LOrgApacheLuceneIndexIndexWriter;Z", "doOpenFromWriter", "doOpenNoWriter", "doOpenFromCommit", "LOrgApacheLuceneIndexSegmentInfos;", "LOrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexStandardDirectoryReader = { "StandardDirectoryReader", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 17, 3, -1, 17, -1, -1, -1 };
  return &_OrgApacheLuceneIndexStandardDirectoryReader;
}

@end

void OrgApacheLuceneIndexStandardDirectoryReader_initPackagePrivateWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(OrgApacheLuceneIndexStandardDirectoryReader *self, OrgApacheLuceneStoreDirectory *directory, IOSObjectArray *readers, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexSegmentInfos *sis, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexDirectoryReader_initWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_(self, directory, readers);
  JreStrongAssign(&self->writer_, writer);
  JreStrongAssign(&self->segmentInfos_, sis);
  self->applyAllDeletes_ = applyAllDeletes;
}

OrgApacheLuceneIndexStandardDirectoryReader *new_OrgApacheLuceneIndexStandardDirectoryReader_initPackagePrivateWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(OrgApacheLuceneStoreDirectory *directory, IOSObjectArray *readers, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexSegmentInfos *sis, jboolean applyAllDeletes) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexStandardDirectoryReader, initPackagePrivateWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_, directory, readers, writer, sis, applyAllDeletes)
}

OrgApacheLuceneIndexStandardDirectoryReader *create_OrgApacheLuceneIndexStandardDirectoryReader_initPackagePrivateWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(OrgApacheLuceneStoreDirectory *directory, IOSObjectArray *readers, OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexSegmentInfos *sis, jboolean applyAllDeletes) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexStandardDirectoryReader, initPackagePrivateWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_, directory, readers, writer, sis, applyAllDeletes)
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexIndexCommit *commit) {
  OrgApacheLuceneIndexStandardDirectoryReader_initialize();
  return [create_OrgApacheLuceneIndexStandardDirectoryReader_1_initWithOrgApacheLuceneStoreDirectory_(directory) runWithOrgApacheLuceneIndexIndexCommit:commit];
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(OrgApacheLuceneIndexIndexWriter *writer, OrgApacheLuceneIndexSegmentInfos *infos, jboolean applyAllDeletes) {
  OrgApacheLuceneIndexStandardDirectoryReader_initialize();
  jint numSegments = [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size];
  id<JavaUtilList> readers = create_JavaUtilArrayList_init();
  OrgApacheLuceneStoreDirectory *dir = [((OrgApacheLuceneIndexIndexWriter *) nil_chk(writer)) getDirectory];
  OrgApacheLuceneIndexSegmentInfos *segmentInfos = [infos java_clone];
  jint infosUpto = 0;
  jboolean success = false;
  @try {
    for (jint i = 0; i < numSegments; i++) {
      OrgApacheLuceneIndexSegmentCommitInfo *info = [infos infoWithInt:i];
      JreAssert(JreObjectEqualsEquals(((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(info))->info_))->dir_, dir), @"org/apache/lucene/index/StandardDirectoryReader.java:96 condition failed: assert info.info.dir == dir;");
      OrgApacheLuceneIndexReadersAndUpdates *rld = [((OrgApacheLuceneIndexIndexWriter_ReaderPool *) nil_chk(writer->readerPool_)) getWithOrgApacheLuceneIndexSegmentCommitInfo:info withBoolean:true];
      @try {
        OrgApacheLuceneIndexSegmentReader *reader = [((OrgApacheLuceneIndexReadersAndUpdates *) nil_chk(rld)) getReadOnlyCloneWithOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, READ)];
        if ([((OrgApacheLuceneIndexSegmentReader *) nil_chk(reader)) numDocs] > 0 || [writer getKeepFullyDeletedSegments]) {
          [readers addWithId:reader];
          infosUpto++;
        }
        else {
          [reader decRef];
          [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(segmentInfos)) removeWithInt:infosUpto];
        }
      }
      @finally {
        [writer->readerPool_ release__WithOrgApacheLuceneIndexReadersAndUpdates:rld];
      }
    }
    [writer incRefDeleterWithOrgApacheLuceneIndexSegmentInfos:segmentInfos];
    OrgApacheLuceneIndexStandardDirectoryReader *result = create_OrgApacheLuceneIndexStandardDirectoryReader_initPackagePrivateWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(dir, [readers toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[readers size] type:OrgApacheLuceneIndexSegmentReader_class_()]], writer, segmentInfos, applyAllDeletes);
    success = true;
    return result;
  }
  @finally {
    if (!success) {
      for (OrgApacheLuceneIndexSegmentReader * __strong r in readers) {
        @try {
          [((OrgApacheLuceneIndexSegmentReader *) nil_chk(r)) decRef];
        }
        @catch (JavaLangThrowable *th) {
        }
      }
    }
  }
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_openWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexSegmentInfos_withJavaUtilList_(OrgApacheLuceneStoreDirectory *directory, OrgApacheLuceneIndexSegmentInfos *infos, id<JavaUtilList> oldReaders) {
  OrgApacheLuceneIndexStandardDirectoryReader_initialize();
  id<JavaUtilMap> segmentReaders = create_JavaUtilHashMap_init();
  if (oldReaders != nil) {
    for (jint i = 0, c = [oldReaders size]; i < c; i++) {
      OrgApacheLuceneIndexSegmentReader *sr = (OrgApacheLuceneIndexSegmentReader *) cast_chk([oldReaders getWithInt:i], [OrgApacheLuceneIndexSegmentReader class]);
      [segmentReaders putWithId:[((OrgApacheLuceneIndexSegmentReader *) nil_chk(sr)) getSegmentName] withId:JavaLangInteger_valueOfWithInt_(i)];
    }
  }
  IOSObjectArray *newReaders = [IOSObjectArray arrayWithLength:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) size] type:OrgApacheLuceneIndexSegmentReader_class_()];
  for (jint i = [infos size] - 1; i >= 0; i--) {
    OrgApacheLuceneIndexSegmentCommitInfo *commitInfo = JreRetainedLocalValue([infos infoWithInt:i]);
    JavaLangInteger *oldReaderIndex = JreRetainedLocalValue([segmentReaders getWithId:((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk(commitInfo))->info_))->name_]);
    OrgApacheLuceneIndexSegmentReader *oldReader;
    if (oldReaderIndex == nil) {
      oldReader = nil;
    }
    else {
      oldReader = (OrgApacheLuceneIndexSegmentReader *) cast_chk([((id<JavaUtilList>) nil_chk(oldReaders)) getWithInt:[oldReaderIndex intValue]], [OrgApacheLuceneIndexSegmentReader class]);
    }
    jboolean success = false;
    @try {
      OrgApacheLuceneIndexSegmentReader *newReader;
      if (oldReader == nil || [commitInfo->info_ getUseCompoundFile] != [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk([oldReader getSegmentInfo]))->info_ getUseCompoundFile]) {
        newReader = create_OrgApacheLuceneIndexSegmentReader_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneStoreIOContext_(commitInfo, JreLoadStatic(OrgApacheLuceneStoreIOContext, READ));
        IOSObjectArray_Set(newReaders, i, newReader);
      }
      else {
        if ([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk([oldReader getSegmentInfo])) getDelGen] == [commitInfo getDelGen] && [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk([oldReader getSegmentInfo])) getFieldInfosGen] == [commitInfo getFieldInfosGen]) {
          [oldReader incRef];
          IOSObjectArray_Set(newReaders, i, oldReader);
        }
        else {
          JreAssert(JreObjectEqualsEquals(commitInfo->info_->dir_, ((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk([oldReader getSegmentInfo]))->info_->dir_), @"org/apache/lucene/index/StandardDirectoryReader.java:183 condition failed: assert commitInfo.info.dir == oldReader.getSegmentInfo().info.dir;");
          jboolean illegalDocCountChange = [commitInfo->info_ maxDoc] != [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk([oldReader getSegmentInfo]))->info_ maxDoc];
          jboolean hasNeitherDeletionsNorUpdates = [commitInfo hasDeletions] == false && [commitInfo hasFieldUpdates] == false;
          jboolean deletesWereLost = [commitInfo getDelGen] == -1 && [((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk([oldReader getSegmentInfo])) getDelGen] != -1;
          if (illegalDocCountChange || hasNeitherDeletionsNorUpdates || deletesWereLost) {
            @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$", @"same segment ", commitInfo->info_->name_, @" has invalid changes; likely you are re-opening a reader after illegally removing index files yourself and building a new index in their place.  Use IndexWriter.deleteAll or OpenMode.CREATE instead"));
          }
          if ([((OrgApacheLuceneIndexSegmentCommitInfo *) nil_chk([oldReader getSegmentInfo])) getDelGen] == [commitInfo getDelGen]) {
            IOSObjectArray_SetAndConsume(newReaders, i, new_OrgApacheLuceneIndexSegmentReader_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexSegmentReader_withOrgApacheLuceneUtilBits_withInt_(commitInfo, oldReader, [oldReader getLiveDocs], [oldReader numDocs]));
          }
          else {
            IOSObjectArray_SetAndConsume(newReaders, i, new_OrgApacheLuceneIndexSegmentReader_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneIndexSegmentReader_(commitInfo, oldReader));
          }
        }
      }
      success = true;
    }
    @finally {
      if (!success) {
        OrgApacheLuceneIndexStandardDirectoryReader_decRefWhileHandlingExceptionWithOrgApacheLuceneIndexSegmentReaderArray_(newReaders);
      }
    }
  }
  return create_OrgApacheLuceneIndexStandardDirectoryReader_initPackagePrivateWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(directory, newReaders, nil, infos, false);
}

void OrgApacheLuceneIndexStandardDirectoryReader_decRefWhileHandlingExceptionWithOrgApacheLuceneIndexSegmentReaderArray_(IOSObjectArray *readers) {
  OrgApacheLuceneIndexStandardDirectoryReader_initialize();
  {
    IOSObjectArray *a__ = readers;
    OrgApacheLuceneIndexSegmentReader * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexSegmentReader * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexSegmentReader *reader = *b__++;
      if (reader != nil) {
        @try {
          [reader decRef];
        }
        @catch (JavaLangThrowable *t) {
        }
      }
    }
  }
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromWriterWithOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexStandardDirectoryReader *self, OrgApacheLuceneIndexIndexCommit *commit) {
  if (commit != nil) {
    return OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromCommitWithOrgApacheLuceneIndexIndexCommit_(self, commit);
  }
  if ([((OrgApacheLuceneIndexIndexWriter *) nil_chk(self->writer_)) nrtIsCurrentWithOrgApacheLuceneIndexSegmentInfos:self->segmentInfos_]) {
    return nil;
  }
  OrgApacheLuceneIndexDirectoryReader *reader = JreRetainedLocalValue([self->writer_ getReaderWithBoolean:self->applyAllDeletes_]);
  if ([((OrgApacheLuceneIndexDirectoryReader *) nil_chk(reader)) getVersion] == [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(self->segmentInfos_)) getVersion]) {
    [reader decRef];
    return nil;
  }
  return reader;
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_doOpenNoWriterWithOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexStandardDirectoryReader *self, OrgApacheLuceneIndexIndexCommit *commit) {
  if (commit == nil) {
    if ([self isCurrent]) {
      return nil;
    }
  }
  else {
    if (!JreObjectEqualsEquals(self->directory_, [commit getDirectory])) {
      @throw create_JavaIoIOException_initWithNSString_(@"the specified commit does not match the specified Directory");
    }
    if (self->segmentInfos_ != nil && [((NSString *) nil_chk([commit getSegmentsFileName])) isEqual:[self->segmentInfos_ getSegmentsFileName]]) {
      return nil;
    }
  }
  return OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromCommitWithOrgApacheLuceneIndexIndexCommit_(self, commit);
}

OrgApacheLuceneIndexDirectoryReader *OrgApacheLuceneIndexStandardDirectoryReader_doOpenFromCommitWithOrgApacheLuceneIndexIndexCommit_(OrgApacheLuceneIndexStandardDirectoryReader *self, OrgApacheLuceneIndexIndexCommit *commit) {
  return [create_OrgApacheLuceneIndexStandardDirectoryReader_2_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_(self, self->directory_) runWithOrgApacheLuceneIndexIndexCommit:commit];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexStandardDirectoryReader)

@implementation OrgApacheLuceneIndexStandardDirectoryReader_1

- (instancetype)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexStandardDirectoryReader_1_initWithOrgApacheLuceneStoreDirectory_(self, directory);
  return self;
}

- (OrgApacheLuceneIndexDirectoryReader *)doBodyWithNSString:(NSString *)segmentFileName {
  OrgApacheLuceneIndexSegmentInfos *sis = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(directory_, segmentFileName);
  IOSObjectArray *readers = [IOSObjectArray arrayWithLength:[((OrgApacheLuceneIndexSegmentInfos *) nil_chk(sis)) size] type:OrgApacheLuceneIndexSegmentReader_class_()];
  jboolean success = false;
  @try {
    for (jint i = [sis size] - 1; i >= 0; i--) {
      IOSObjectArray_SetAndConsume(readers, i, new_OrgApacheLuceneIndexSegmentReader_initWithOrgApacheLuceneIndexSegmentCommitInfo_withOrgApacheLuceneStoreIOContext_([sis infoWithInt:i], JreLoadStatic(OrgApacheLuceneStoreIOContext, READ)));
    }
    OrgApacheLuceneIndexDirectoryReader *reader = create_OrgApacheLuceneIndexStandardDirectoryReader_initPackagePrivateWithOrgApacheLuceneStoreDirectory_withOrgApacheLuceneIndexLeafReaderArray_withOrgApacheLuceneIndexIndexWriter_withOrgApacheLuceneIndexSegmentInfos_withBoolean_(directory_, readers, nil, sis, false);
    success = true;
    return JreRetainedLocalValue(reader);
  }
  @finally {
    if (success == false) {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_(readers);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x4, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(doBodyWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgApacheLuceneStoreDirectory;", "doBody", "LNSString;", "LJavaIoIOException;", "LOrgApacheLuceneIndexStandardDirectoryReader;", "openWithOrgApacheLuceneStoreDirectory:withOrgApacheLuceneIndexIndexCommit:", "Lorg/apache/lucene/index/SegmentInfos$FindSegmentsFile<Lorg/apache/lucene/index/DirectoryReader;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexStandardDirectoryReader_1 = { "", "org.apache.lucene.index", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 4, -1, 5, 6, -1 };
  return &_OrgApacheLuceneIndexStandardDirectoryReader_1;
}

@end

void OrgApacheLuceneIndexStandardDirectoryReader_1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader_1 *self, OrgApacheLuceneStoreDirectory *directory) {
  OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(self, directory);
}

OrgApacheLuceneIndexStandardDirectoryReader_1 *new_OrgApacheLuceneIndexStandardDirectoryReader_1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexStandardDirectoryReader_1, initWithOrgApacheLuceneStoreDirectory_, directory)
}

OrgApacheLuceneIndexStandardDirectoryReader_1 *create_OrgApacheLuceneIndexStandardDirectoryReader_1_initWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexStandardDirectoryReader_1, initWithOrgApacheLuceneStoreDirectory_, directory)
}

@implementation OrgApacheLuceneIndexStandardDirectoryReader_2

- (instancetype)initWithOrgApacheLuceneIndexStandardDirectoryReader:(OrgApacheLuceneIndexStandardDirectoryReader *)outer$
                                  withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)directory {
  OrgApacheLuceneIndexStandardDirectoryReader_2_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_(self, outer$, directory);
  return self;
}

- (OrgApacheLuceneIndexDirectoryReader *)doBodyWithNSString:(NSString *)segmentFileName {
  OrgApacheLuceneIndexSegmentInfos *infos = OrgApacheLuceneIndexSegmentInfos_readCommitWithOrgApacheLuceneStoreDirectory_withNSString_(directory_, segmentFileName);
  return JreRetainedLocalValue([this$0_ doOpenIfChangedWithOrgApacheLuceneIndexSegmentInfos:infos]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDirectoryReader;", 0x4, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexStandardDirectoryReader:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(doBodyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexStandardDirectoryReader;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexStandardDirectoryReader;LOrgApacheLuceneStoreDirectory;", "doBody", "LNSString;", "LJavaIoIOException;", "LOrgApacheLuceneIndexStandardDirectoryReader;", "doOpenFromCommitWithOrgApacheLuceneIndexIndexCommit:", "Lorg/apache/lucene/index/SegmentInfos$FindSegmentsFile<Lorg/apache/lucene/index/DirectoryReader;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexStandardDirectoryReader_2 = { "", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8010, 2, 1, 4, -1, 5, 6, -1 };
  return &_OrgApacheLuceneIndexStandardDirectoryReader_2;
}

@end

void OrgApacheLuceneIndexStandardDirectoryReader_2_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader_2 *self, OrgApacheLuceneIndexStandardDirectoryReader *outer$, OrgApacheLuceneStoreDirectory *directory) {
  JreStrongAssign(&self->this$0_, outer$);
  OrgApacheLuceneIndexSegmentInfos_FindSegmentsFile_initWithOrgApacheLuceneStoreDirectory_(self, directory);
}

OrgApacheLuceneIndexStandardDirectoryReader_2 *new_OrgApacheLuceneIndexStandardDirectoryReader_2_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader *outer$, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexStandardDirectoryReader_2, initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_, outer$, directory)
}

OrgApacheLuceneIndexStandardDirectoryReader_2 *create_OrgApacheLuceneIndexStandardDirectoryReader_2_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader *outer$, OrgApacheLuceneStoreDirectory *directory) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexStandardDirectoryReader_2, initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneStoreDirectory_, outer$, directory)
}

@implementation OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit

- (instancetype)initWithOrgApacheLuceneIndexStandardDirectoryReader:(OrgApacheLuceneIndexStandardDirectoryReader *)reader
                               withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                  withOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir {
  OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(self, reader, infos, dir);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$C", @"DirectoryReader.ReaderCommit(", segmentsFileName_, ')');
}

- (jint)getSegmentCount {
  return segmentCount_;
}

- (NSString *)getSegmentsFileName {
  return segmentsFileName_;
}

- (id<JavaUtilCollection>)getFileNames {
  return files_;
}

- (OrgApacheLuceneStoreDirectory *)getDirectory {
  return dir_;
}

- (jlong)getGeneration {
  return generation_;
}

- (jboolean)isDeleted {
  return false;
}

- (id<JavaUtilMap>)getUserData {
  return userData_;
}

- (void)delete__ {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"This IndexCommit does not support deletions");
}

- (OrgApacheLuceneIndexStandardDirectoryReader *)getReader {
  return reader_;
}

- (void)dealloc {
  RELEASE_(segmentsFileName_);
  RELEASE_(files_);
  RELEASE_(dir_);
  RELEASE_(userData_);
  RELEASE_(reader_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LOrgApacheLuceneStoreDirectory;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexStandardDirectoryReader;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexStandardDirectoryReader:withOrgApacheLuceneIndexSegmentInfos:withOrgApacheLuceneStoreDirectory:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(getSegmentCount);
  methods[3].selector = @selector(getSegmentsFileName);
  methods[4].selector = @selector(getFileNames);
  methods[5].selector = @selector(getDirectory);
  methods[6].selector = @selector(getGeneration);
  methods[7].selector = @selector(isDeleted);
  methods[8].selector = @selector(getUserData);
  methods[9].selector = @selector(delete__);
  methods[10].selector = @selector(getReader);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "segmentsFileName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "files_", "LJavaUtilCollection;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
    { "dir_", "LOrgApacheLuceneStoreDirectory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "generation_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "userData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "segmentCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "reader_", "LOrgApacheLuceneIndexStandardDirectoryReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexStandardDirectoryReader;LOrgApacheLuceneIndexSegmentInfos;LOrgApacheLuceneStoreDirectory;", "LJavaIoIOException;", "toString", "()Ljava/util/Collection<Ljava/lang/String;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "delete", "Ljava/util/Collection<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "LOrgApacheLuceneIndexStandardDirectoryReader;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit = { "ReaderCommit", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x18, 11, 7, 8, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit;
}

@end

void OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit *self, OrgApacheLuceneIndexStandardDirectoryReader *reader, OrgApacheLuceneIndexSegmentInfos *infos, OrgApacheLuceneStoreDirectory *dir) {
  OrgApacheLuceneIndexIndexCommit_init(self);
  JreStrongAssign(&self->segmentsFileName_, [((OrgApacheLuceneIndexSegmentInfos *) nil_chk(infos)) getSegmentsFileName]);
  JreStrongAssign(&self->dir_, dir);
  JreStrongAssign(&self->userData_, [infos getUserData]);
  JreStrongAssign(&self->files_, JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_([infos filesWithBoolean:true]));
  self->generation_ = [infos getGeneration];
  self->segmentCount_ = [infos size];
  JreStrongAssign(&self->reader_, reader);
}

OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit *new_OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader *reader, OrgApacheLuceneIndexSegmentInfos *infos, OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit, initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_, reader, infos, dir)
}

OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit *create_OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit_initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_(OrgApacheLuceneIndexStandardDirectoryReader *reader, OrgApacheLuceneIndexSegmentInfos *infos, OrgApacheLuceneStoreDirectory *dir) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit, initWithOrgApacheLuceneIndexStandardDirectoryReader_withOrgApacheLuceneIndexSegmentInfos_withOrgApacheLuceneStoreDirectory_, reader, infos, dir)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexStandardDirectoryReader_ReaderCommit)
