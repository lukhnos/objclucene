//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/IndexFileNames.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Character.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/util/regex/Pattern.h"
#include "org/apache/lucene/index/IndexFileNames.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/IndexFileNames must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneIndexIndexFileNames ()

/*!
 @brief No instance
 */
- (instancetype)init;

/*!
 @brief locates the boundary of the segment name, or -1
 */
+ (jint)indexOfSegmentNameWithNSString:(NSString *)filename;

@end

__attribute__((unused)) static void OrgApacheLuceneIndexIndexFileNames_init(OrgApacheLuceneIndexIndexFileNames *self);

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileNames *new_OrgApacheLuceneIndexIndexFileNames_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexIndexFileNames *create_OrgApacheLuceneIndexIndexFileNames_init(void);

__attribute__((unused)) static jint OrgApacheLuceneIndexIndexFileNames_indexOfSegmentNameWithNSString_(NSString *filename);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneIndexIndexFileNames)

NSString *OrgApacheLuceneIndexIndexFileNames_SEGMENTS = @"segments";
NSString *OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS = @"pending_segments";
NSString *OrgApacheLuceneIndexIndexFileNames_OLD_SEGMENTS_GEN = @"segments.gen";
JavaUtilRegexPattern *OrgApacheLuceneIndexIndexFileNames_CODEC_FILE_PATTERN;

@implementation OrgApacheLuceneIndexIndexFileNames

+ (NSString *)SEGMENTS {
  return OrgApacheLuceneIndexIndexFileNames_SEGMENTS;
}

+ (NSString *)PENDING_SEGMENTS {
  return OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS;
}

+ (NSString *)OLD_SEGMENTS_GEN {
  return OrgApacheLuceneIndexIndexFileNames_OLD_SEGMENTS_GEN;
}

+ (JavaUtilRegexPattern *)CODEC_FILE_PATTERN {
  return OrgApacheLuceneIndexIndexFileNames_CODEC_FILE_PATTERN;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneIndexIndexFileNames_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)fileNameFromGenerationWithNSString:(NSString *)base
                                    withNSString:(NSString *)ext
                                        withLong:(jlong)gen {
  return OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(base, ext, gen);
}

+ (NSString *)segmentFileNameWithNSString:(NSString *)segmentName
                             withNSString:(NSString *)segmentSuffix
                             withNSString:(NSString *)ext {
  return OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(segmentName, segmentSuffix, ext);
}

+ (jboolean)matchesExtensionWithNSString:(NSString *)filename
                            withNSString:(NSString *)ext {
  return OrgApacheLuceneIndexIndexFileNames_matchesExtensionWithNSString_withNSString_(filename, ext);
}

+ (jint)indexOfSegmentNameWithNSString:(NSString *)filename {
  return OrgApacheLuceneIndexIndexFileNames_indexOfSegmentNameWithNSString_(filename);
}

+ (NSString *)stripSegmentNameWithNSString:(NSString *)filename {
  return OrgApacheLuceneIndexIndexFileNames_stripSegmentNameWithNSString_(filename);
}

+ (jlong)parseGenerationWithNSString:(NSString *)filename {
  return OrgApacheLuceneIndexIndexFileNames_parseGenerationWithNSString_(filename);
}

+ (NSString *)parseSegmentNameWithNSString:(NSString *)filename {
  return OrgApacheLuceneIndexIndexFileNames_parseSegmentNameWithNSString_(filename);
}

+ (NSString *)stripExtensionWithNSString:(NSString *)filename {
  return OrgApacheLuceneIndexIndexFileNames_stripExtensionWithNSString_(filename);
}

+ (NSString *)getExtensionWithNSString:(NSString *)filename {
  return OrgApacheLuceneIndexIndexFileNames_getExtensionWithNSString_(filename);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 9, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 11, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fileNameFromGenerationWithNSString:withNSString:withLong:);
  methods[2].selector = @selector(segmentFileNameWithNSString:withNSString:withNSString:);
  methods[3].selector = @selector(matchesExtensionWithNSString:withNSString:);
  methods[4].selector = @selector(indexOfSegmentNameWithNSString:);
  methods[5].selector = @selector(stripSegmentNameWithNSString:);
  methods[6].selector = @selector(parseGenerationWithNSString:);
  methods[7].selector = @selector(parseSegmentNameWithNSString:);
  methods[8].selector = @selector(stripExtensionWithNSString:);
  methods[9].selector = @selector(getExtensionWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SEGMENTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "PENDING_SEGMENTS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "OLD_SEGMENTS_GEN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "CODEC_FILE_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "fileNameFromGeneration", "LNSString;LNSString;J", "segmentFileName", "LNSString;LNSString;LNSString;", "matchesExtension", "LNSString;LNSString;", "indexOfSegmentName", "LNSString;", "stripSegmentName", "parseGeneration", "parseSegmentName", "stripExtension", "getExtension", &OrgApacheLuceneIndexIndexFileNames_SEGMENTS, &OrgApacheLuceneIndexIndexFileNames_PENDING_SEGMENTS, &OrgApacheLuceneIndexIndexFileNames_OLD_SEGMENTS_GEN, &OrgApacheLuceneIndexIndexFileNames_CODEC_FILE_PATTERN };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexIndexFileNames = { "IndexFileNames", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x11, 10, 4, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexIndexFileNames;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneIndexIndexFileNames class]) {
    JreStrongAssign(&OrgApacheLuceneIndexIndexFileNames_CODEC_FILE_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@"_[a-z0-9]+(_.*)?\\..*"));
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneIndexIndexFileNames)
  }
}

@end

void OrgApacheLuceneIndexIndexFileNames_init(OrgApacheLuceneIndexIndexFileNames *self) {
  NSObject_init(self);
}

OrgApacheLuceneIndexIndexFileNames *new_OrgApacheLuceneIndexIndexFileNames_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexIndexFileNames, init)
}

OrgApacheLuceneIndexIndexFileNames *create_OrgApacheLuceneIndexIndexFileNames_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexIndexFileNames, init)
}

NSString *OrgApacheLuceneIndexIndexFileNames_fileNameFromGenerationWithNSString_withNSString_withLong_(NSString *base, NSString *ext, jlong gen) {
  OrgApacheLuceneIndexIndexFileNames_initialize();
  if (gen == -1) {
    return nil;
  }
  else if (gen == 0) {
    return OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(base, @"", ext);
  }
  else {
    JreAssert(gen > 0, @"org/apache/lucene/index/IndexFileNames.java:74 condition failed: assert gen > 0;");
    JavaLangStringBuilder *res = JreRetainedLocalValue([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(base)) java_length] + 6 + [((NSString *) nil_chk(ext)) java_length]) appendWithNSString:base])) appendWithChar:'_'])) appendWithNSString:JavaLangLong_toStringWithLong_withInt_(gen, JavaLangCharacter_MAX_RADIX)]);
    if ([ext java_length] > 0) {
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(res)) appendWithChar:'.'])) appendWithNSString:ext];
    }
    return [((JavaLangStringBuilder *) nil_chk(res)) description];
  }
}

NSString *OrgApacheLuceneIndexIndexFileNames_segmentFileNameWithNSString_withNSString_withNSString_(NSString *segmentName, NSString *segmentSuffix, NSString *ext) {
  OrgApacheLuceneIndexIndexFileNames_initialize();
  if ([((NSString *) nil_chk(ext)) java_length] > 0 || [((NSString *) nil_chk(segmentSuffix)) java_length] > 0) {
    JreAssert(![ext java_hasPrefix:@"."], @"org/apache/lucene/index/IndexFileNames.java:104 condition failed: assert !ext.startsWith(\".\");");
    JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(segmentName)) java_length] + 2 + [((NSString *) nil_chk(segmentSuffix)) java_length] + [ext java_length]);
    [sb appendWithNSString:segmentName];
    if ([segmentSuffix java_length] > 0) {
      [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'_'])) appendWithNSString:segmentSuffix];
    }
    if ([ext java_length] > 0) {
      [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'.'])) appendWithNSString:ext];
    }
    return [sb description];
  }
  else {
    return segmentName;
  }
}

jboolean OrgApacheLuceneIndexIndexFileNames_matchesExtensionWithNSString_withNSString_(NSString *filename, NSString *ext) {
  OrgApacheLuceneIndexIndexFileNames_initialize();
  return [((NSString *) nil_chk(filename)) java_hasSuffix:JreStrcat("C$", '.', ext)];
}

jint OrgApacheLuceneIndexIndexFileNames_indexOfSegmentNameWithNSString_(NSString *filename) {
  OrgApacheLuceneIndexIndexFileNames_initialize();
  jint idx = [((NSString *) nil_chk(filename)) java_indexOf:'_' fromIndex:1];
  if (idx == -1) {
    idx = [filename java_indexOf:'.'];
  }
  return idx;
}

NSString *OrgApacheLuceneIndexIndexFileNames_stripSegmentNameWithNSString_(NSString *filename) {
  OrgApacheLuceneIndexIndexFileNames_initialize();
  jint idx = OrgApacheLuceneIndexIndexFileNames_indexOfSegmentNameWithNSString_(filename);
  if (idx != -1) {
    filename = [((NSString *) nil_chk(filename)) java_substring:idx];
  }
  return filename;
}

jlong OrgApacheLuceneIndexIndexFileNames_parseGenerationWithNSString_(NSString *filename) {
  OrgApacheLuceneIndexIndexFileNames_initialize();
  JreAssert([((NSString *) nil_chk(filename)) java_hasPrefix:@"_"], @"org/apache/lucene/index/IndexFileNames.java:160 condition failed: assert filename.startsWith(\"_\");");
  IOSObjectArray *parts = [((NSString *) nil_chk([((NSString *) nil_chk(OrgApacheLuceneIndexIndexFileNames_stripExtensionWithNSString_(filename))) java_substring:1])) java_split:@"_"];
  if (((IOSObjectArray *) nil_chk(parts))->size_ == 2 || parts->size_ == 4) {
    return JavaLangLong_parseLongWithNSString_withInt_(IOSObjectArray_Get(parts, 1), JavaLangCharacter_MAX_RADIX);
  }
  else {
    return 0;
  }
}

NSString *OrgApacheLuceneIndexIndexFileNames_parseSegmentNameWithNSString_(NSString *filename) {
  OrgApacheLuceneIndexIndexFileNames_initialize();
  jint idx = OrgApacheLuceneIndexIndexFileNames_indexOfSegmentNameWithNSString_(filename);
  if (idx != -1) {
    filename = [((NSString *) nil_chk(filename)) java_substring:0 endIndex:idx];
  }
  return filename;
}

NSString *OrgApacheLuceneIndexIndexFileNames_stripExtensionWithNSString_(NSString *filename) {
  OrgApacheLuceneIndexIndexFileNames_initialize();
  jint idx = [((NSString *) nil_chk(filename)) java_indexOf:'.'];
  if (idx != -1) {
    filename = [filename java_substring:0 endIndex:idx];
  }
  return filename;
}

NSString *OrgApacheLuceneIndexIndexFileNames_getExtensionWithNSString_(NSString *filename) {
  OrgApacheLuceneIndexIndexFileNames_initialize();
  jint idx = [((NSString *) nil_chk(filename)) java_indexOf:'.'];
  if (idx == -1) {
    return nil;
  }
  else {
    return [filename java_substring:idx + 1 endIndex:[filename java_length]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexIndexFileNames)
