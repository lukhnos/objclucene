//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/TermsHashPerField.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/index/ByteSliceReader.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/ParallelPostingsArray.h"
#include "org/apache/lucene/index/TermsHash.h"
#include "org/apache/lucene/index/TermsHashPerField.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/util/IntBlockPool.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/TermsHashPerField must not be compiled with ARC (-fobjc-arc)"
#if !__has_feature(objc_arc_weak)
#error "org/apache/lucene/index/TermsHashPerField must be compiled with weak references support (-fobjc-weak)"
#endif
#endif

@interface OrgApacheLuceneIndexTermsHashPerField () {
 @public
  OrgApacheLuceneUtilCounter *bytesUsed_;
  jboolean doNextCall_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHashPerField, bytesUsed_, OrgApacheLuceneUtilCounter *)

inline jint OrgApacheLuceneIndexTermsHashPerField_get_HASH_INIT_SIZE(void);
#define OrgApacheLuceneIndexTermsHashPerField_HASH_INIT_SIZE 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexTermsHashPerField, HASH_INIT_SIZE, jint)

@interface OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray : OrgApacheLuceneUtilBytesRefHash_BytesStartArray {
 @public
  WEAK_ OrgApacheLuceneIndexTermsHashPerField *perField_;
  OrgApacheLuceneUtilCounter *bytesUsed_;
}

- (instancetype)initWithOrgApacheLuceneIndexTermsHashPerField:(OrgApacheLuceneIndexTermsHashPerField *)perField
                               withOrgApacheLuceneUtilCounter:(OrgApacheLuceneUtilCounter *)bytesUsed;

- (IOSIntArray *)init__ OBJC_METHOD_FAMILY_NONE;

- (IOSIntArray *)grow;

- (IOSIntArray *)clear;

- (OrgApacheLuceneUtilCounter *)bytesUsed;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray, bytesUsed_, OrgApacheLuceneUtilCounter *)

__attribute__((unused)) static void OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray_initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray *self, OrgApacheLuceneIndexTermsHashPerField *perField, OrgApacheLuceneUtilCounter *bytesUsed);

__attribute__((unused)) static OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray *new_OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray_initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexTermsHashPerField *perField, OrgApacheLuceneUtilCounter *bytesUsed) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray *create_OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray_initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexTermsHashPerField *perField, OrgApacheLuceneUtilCounter *bytesUsed);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray)

@implementation OrgApacheLuceneIndexTermsHashPerField

- (instancetype)initPackagePrivateWithInt:(jint)streamCount
 withOrgApacheLuceneIndexFieldInvertState:(OrgApacheLuceneIndexFieldInvertState *)fieldState
        withOrgApacheLuceneIndexTermsHash:(OrgApacheLuceneIndexTermsHash *)termsHash
withOrgApacheLuceneIndexTermsHashPerField:(OrgApacheLuceneIndexTermsHashPerField *)nextPerField
        withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo {
  OrgApacheLuceneIndexTermsHashPerField_initPackagePrivateWithInt_withOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneIndexFieldInfo_(self, streamCount, fieldState, termsHash, nextPerField, fieldInfo);
  return self;
}

- (void)reset {
  [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(bytesHash_)) clearWithBoolean:false];
  if (nextPerField_ != nil) {
    [nextPerField_ reset];
  }
}

- (void)initReaderWithOrgApacheLuceneIndexByteSliceReader:(OrgApacheLuceneIndexByteSliceReader *)reader
                                                  withInt:(jint)termID
                                                  withInt:(jint)stream {
  JreAssert(stream < streamCount_, @"org/apache/lucene/index/TermsHashPerField.java:85 condition failed: assert stream < streamCount;");
  jint intStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID);
  IOSIntArray *ints = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneUtilIntBlockPool *) nil_chk(intPool_))->buffers_), JreRShift32(intStart, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SHIFT));
  jint upto = intStart & OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK;
  [((OrgApacheLuceneIndexByteSliceReader *) nil_chk(reader)) init__WithOrgApacheLuceneUtilByteBlockPool:bytePool_ withInt:IOSIntArray_Get(nil_chk(postingsArray_->byteStarts_), termID) + stream * JreLoadStatic(OrgApacheLuceneUtilByteBlockPool, FIRST_LEVEL_SIZE) withInt:IOSIntArray_Get(nil_chk(ints), upto + stream)];
}

- (IOSIntArray *)sortPostings {
  JreStrongAssign(&sortedTermIDs_, [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(bytesHash_)) sortWithJavaUtilComparator:OrgApacheLuceneUtilBytesRef_getUTF8SortedAsUnicodeComparator()]);
  return sortedTermIDs_;
}

- (void)addWithInt:(jint)textStart {
  jint termID = [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(bytesHash_)) addByPoolOffsetWithInt:textStart];
  if (termID >= 0) {
    if (numPostingInt_ + ((OrgApacheLuceneUtilIntBlockPool *) nil_chk(intPool_))->intUpto_ > OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE) {
      [intPool_ nextBuffer];
    }
    if (OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_SIZE - ((OrgApacheLuceneUtilByteBlockPool *) nil_chk(bytePool_))->byteUpto_ < numPostingInt_ * JreLoadStatic(OrgApacheLuceneUtilByteBlockPool, FIRST_LEVEL_SIZE)) {
      [bytePool_ nextBuffer];
    }
    JreStrongAssign(&intUptos_, intPool_->buffer_);
    intUptoStart_ = intPool_->intUpto_;
    intPool_->intUpto_ += streamCount_;
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID) = intUptoStart_ + intPool_->intOffset_;
    for (jint i = 0; i < streamCount_; i++) {
      jint upto = [bytePool_ newSliceWithInt:JreLoadStatic(OrgApacheLuceneUtilByteBlockPool, FIRST_LEVEL_SIZE)];
      *IOSIntArray_GetRef(nil_chk(intUptos_), intUptoStart_ + i) = upto + bytePool_->byteOffset_;
    }
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->byteStarts_), termID) = IOSIntArray_Get(nil_chk(intUptos_), intUptoStart_);
    [self newTermWithInt:termID];
  }
  else {
    termID = (-termID) - 1;
    jint intStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID);
    JreStrongAssign(&intUptos_, IOSObjectArray_Get(nil_chk(((OrgApacheLuceneUtilIntBlockPool *) nil_chk(intPool_))->buffers_), JreRShift32(intStart, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SHIFT)));
    intUptoStart_ = intStart & OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK;
    [self addTermWithInt:termID];
  }
}

- (void)add {
  jint termID = [((OrgApacheLuceneUtilBytesRefHash *) nil_chk(bytesHash_)) addWithOrgApacheLuceneUtilBytesRef:[((id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute>) nil_chk(termAtt_)) getBytesRef]];
  if (termID >= 0) {
    [bytesHash_ byteStartWithInt:termID];
    if (numPostingInt_ + ((OrgApacheLuceneUtilIntBlockPool *) nil_chk(intPool_))->intUpto_ > OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE) {
      [intPool_ nextBuffer];
    }
    if (OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_SIZE - ((OrgApacheLuceneUtilByteBlockPool *) nil_chk(bytePool_))->byteUpto_ < numPostingInt_ * JreLoadStatic(OrgApacheLuceneUtilByteBlockPool, FIRST_LEVEL_SIZE)) {
      [bytePool_ nextBuffer];
    }
    JreStrongAssign(&intUptos_, intPool_->buffer_);
    intUptoStart_ = intPool_->intUpto_;
    intPool_->intUpto_ += streamCount_;
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID) = intUptoStart_ + intPool_->intOffset_;
    for (jint i = 0; i < streamCount_; i++) {
      jint upto = [bytePool_ newSliceWithInt:JreLoadStatic(OrgApacheLuceneUtilByteBlockPool, FIRST_LEVEL_SIZE)];
      *IOSIntArray_GetRef(nil_chk(intUptos_), intUptoStart_ + i) = upto + bytePool_->byteOffset_;
    }
    *IOSIntArray_GetRef(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->byteStarts_), termID) = IOSIntArray_Get(nil_chk(intUptos_), intUptoStart_);
    [self newTermWithInt:termID];
  }
  else {
    termID = (-termID) - 1;
    jint intStart = IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->intStarts_), termID);
    JreStrongAssign(&intUptos_, IOSObjectArray_Get(nil_chk(((OrgApacheLuceneUtilIntBlockPool *) nil_chk(intPool_))->buffers_), JreRShift32(intStart, OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SHIFT)));
    intUptoStart_ = intStart & OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK;
    [self addTermWithInt:termID];
  }
  if (doNextCall_) {
    [((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(nextPerField_)) addWithInt:IOSIntArray_Get(nil_chk(((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray_))->textStarts_), termID)];
  }
}

- (void)writeByteWithInt:(jint)stream
                withByte:(jbyte)b {
  jint upto = IOSIntArray_Get(nil_chk(intUptos_), intUptoStart_ + stream);
  IOSByteArray *bytes = IOSObjectArray_Get(nil_chk(((OrgApacheLuceneUtilByteBlockPool *) nil_chk(bytePool_))->buffers_), JreRShift32(upto, OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_SHIFT));
  JreAssert(bytes != nil, @"org/apache/lucene/index/TermsHashPerField.java:201 condition failed: assert bytes != null;");
  jint offset = upto & OrgApacheLuceneUtilByteBlockPool_BYTE_BLOCK_MASK;
  if (IOSByteArray_Get(nil_chk(bytes), offset) != 0) {
    offset = [bytePool_ allocSliceWithByteArray:bytes withInt:offset];
    bytes = bytePool_->buffer_;
    *IOSIntArray_GetRef(nil_chk(intUptos_), intUptoStart_ + stream) = offset + bytePool_->byteOffset_;
  }
  *IOSByteArray_GetRef(nil_chk(bytes), offset) = b;
  (*IOSIntArray_GetRef(intUptos_, intUptoStart_ + stream))++;
}

- (void)writeBytesWithInt:(jint)stream
            withByteArray:(IOSByteArray *)b
                  withInt:(jint)offset
                  withInt:(jint)len {
  jint end = offset + len;
  for (jint i = offset; i < end; i++) [self writeByteWithInt:stream withByte:IOSByteArray_Get(nil_chk(b), i)];
}

- (void)writeVIntWithInt:(jint)stream
                 withInt:(jint)i {
  JreAssert(stream < streamCount_, @"org/apache/lucene/index/TermsHashPerField.java:221 condition failed: assert stream < streamCount;");
  while ((i & ~(jint) 0x7F) != 0) {
    [self writeByteWithInt:stream withByte:(jbyte) ((i & (jint) 0x7f) | (jint) 0x80)];
    JreURShiftAssignInt(&i, 7);
  }
  [self writeByteWithInt:stream withByte:(jbyte) i];
}

- (jint)compareToWithId:(OrgApacheLuceneIndexTermsHashPerField *)other {
  cast_chk(other, [OrgApacheLuceneIndexTermsHashPerField class]);
  return [((NSString *) nil_chk(((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_))->name_)) compareToWithId:((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(other))->fieldInfo_->name_];
}

- (void)finish {
  if (nextPerField_ != nil) {
    [nextPerField_ finish];
  }
}

- (jboolean)startWithOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)field
                                            withBoolean:(jboolean)first {
  JreStrongAssign(&termAtt_, ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(fieldState_))->termAttribute_);
  if (nextPerField_ != nil) {
    doNextCall_ = [nextPerField_ startWithOrgApacheLuceneIndexIndexableField:field withBoolean:first];
  }
  return true;
}

- (void)newTermWithInt:(jint)termID {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addTermWithInt:(jint)termID {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)newPostingsArray {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgApacheLuceneIndexParallelPostingsArray *)createPostingsArrayWithInt:(jint)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(termsHash_);
  RELEASE_(nextPerField_);
  RELEASE_(docState_);
  RELEASE_(fieldState_);
  RELEASE_(termAtt_);
  RELEASE_(intPool_);
  RELEASE_(bytePool_);
  RELEASE_(termBytePool_);
  RELEASE_(fieldInfo_);
  RELEASE_(bytesHash_);
  RELEASE_(postingsArray_);
  RELEASE_(bytesUsed_);
  RELEASE_(sortedTermIDs_);
  RELEASE_(intUptos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 5, -1, -1, -1 },
    { NULL, "Z", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 16, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x400, 17, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexParallelPostingsArray;", 0x400, 18, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithInt:withOrgApacheLuceneIndexFieldInvertState:withOrgApacheLuceneIndexTermsHash:withOrgApacheLuceneIndexTermsHashPerField:withOrgApacheLuceneIndexFieldInfo:);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(initReaderWithOrgApacheLuceneIndexByteSliceReader:withInt:withInt:);
  methods[3].selector = @selector(sortPostings);
  methods[4].selector = @selector(addWithInt:);
  methods[5].selector = @selector(add);
  methods[6].selector = @selector(writeByteWithInt:withByte:);
  methods[7].selector = @selector(writeBytesWithInt:withByteArray:withInt:withInt:);
  methods[8].selector = @selector(writeVIntWithInt:withInt:);
  methods[9].selector = @selector(compareToWithId:);
  methods[10].selector = @selector(finish);
  methods[11].selector = @selector(startWithOrgApacheLuceneIndexIndexableField:withBoolean:);
  methods[12].selector = @selector(newTermWithInt:);
  methods[13].selector = @selector(addTermWithInt:);
  methods[14].selector = @selector(newPostingsArray);
  methods[15].selector = @selector(createPostingsArrayWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HASH_INIT_SIZE", "I", .constantValue.asInt = OrgApacheLuceneIndexTermsHashPerField_HASH_INIT_SIZE, 0x1a, -1, -1, -1, -1 },
    { "termsHash_", "LOrgApacheLuceneIndexTermsHash;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "nextPerField_", "LOrgApacheLuceneIndexTermsHashPerField;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docState_", "LOrgApacheLuceneIndexDocumentsWriterPerThread_DocState;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "fieldState_", "LOrgApacheLuceneIndexFieldInvertState;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "termAtt_", "LOrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "intPool_", "LOrgApacheLuceneUtilIntBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bytePool_", "LOrgApacheLuceneUtilByteBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "termBytePool_", "LOrgApacheLuceneUtilByteBlockPool;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "streamCount_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "numPostingInt_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldInfo_", "LOrgApacheLuceneIndexFieldInfo;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "bytesHash_", "LOrgApacheLuceneUtilBytesRefHash;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "postingsArray_", "LOrgApacheLuceneIndexParallelPostingsArray;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bytesUsed_", "LOrgApacheLuceneUtilCounter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sortedTermIDs_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "doNextCall_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "intUptos_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "intUptoStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgApacheLuceneIndexFieldInvertState;LOrgApacheLuceneIndexTermsHash;LOrgApacheLuceneIndexTermsHashPerField;LOrgApacheLuceneIndexFieldInfo;", "initReader", "LOrgApacheLuceneIndexByteSliceReader;II", "add", "I", "LJavaIoIOException;", "writeByte", "IB", "writeBytes", "I[BII", "writeVInt", "II", "compareTo", "LOrgApacheLuceneIndexTermsHashPerField;", "start", "LOrgApacheLuceneIndexIndexableField;Z", "newTerm", "addTerm", "createPostingsArray", "LOrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray;", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/index/TermsHashPerField;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermsHashPerField = { "TermsHashPerField", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x400, 16, 19, -1, 19, -1, 20, -1 };
  return &_OrgApacheLuceneIndexTermsHashPerField;
}

@end

void OrgApacheLuceneIndexTermsHashPerField_initPackagePrivateWithInt_withOrgApacheLuceneIndexFieldInvertState_withOrgApacheLuceneIndexTermsHash_withOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneIndexFieldInfo_(OrgApacheLuceneIndexTermsHashPerField *self, jint streamCount, OrgApacheLuceneIndexFieldInvertState *fieldState, OrgApacheLuceneIndexTermsHash *termsHash, OrgApacheLuceneIndexTermsHashPerField *nextPerField, OrgApacheLuceneIndexFieldInfo *fieldInfo) {
  NSObject_init(self);
  JreStrongAssign(&self->intPool_, ((OrgApacheLuceneIndexTermsHash *) nil_chk(termsHash))->intPool_);
  JreStrongAssign(&self->bytePool_, termsHash->bytePool_);
  JreStrongAssign(&self->termBytePool_, termsHash->termBytePool_);
  JreStrongAssign(&self->docState_, termsHash->docState_);
  JreStrongAssign(&self->termsHash_, termsHash);
  JreStrongAssign(&self->bytesUsed_, termsHash->bytesUsed_);
  JreStrongAssign(&self->fieldState_, fieldState);
  self->streamCount_ = streamCount;
  self->numPostingInt_ = 2 * streamCount;
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreStrongAssign(&self->nextPerField_, nextPerField);
  OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray *byteStarts = create_OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray_initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_(self, self->bytesUsed_);
  JreStrongAssignAndConsume(&self->bytesHash_, new_OrgApacheLuceneUtilBytesRefHash_initWithOrgApacheLuceneUtilByteBlockPool_withInt_withOrgApacheLuceneUtilBytesRefHash_BytesStartArray_(self->termBytePool_, OrgApacheLuceneIndexTermsHashPerField_HASH_INIT_SIZE, byteStarts));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermsHashPerField)

@implementation OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray

- (instancetype)initWithOrgApacheLuceneIndexTermsHashPerField:(OrgApacheLuceneIndexTermsHashPerField *)perField
                               withOrgApacheLuceneUtilCounter:(OrgApacheLuceneUtilCounter *)bytesUsed {
  OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray_initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_(self, perField, bytesUsed);
  return self;
}

- (IOSIntArray *)init__ {
  if (((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(perField_))->postingsArray_ == nil) {
    JreStrongAssign(&perField_->postingsArray_, [perField_ createPostingsArrayWithInt:2]);
    [perField_ newPostingsArray];
    [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(perField_->postingsArray_))->size_ * [perField_->postingsArray_ bytesPerPosting]];
  }
  return ((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(perField_->postingsArray_))->textStarts_;
}

- (IOSIntArray *)grow {
  OrgApacheLuceneIndexParallelPostingsArray *postingsArray = JreRetainedLocalValue(((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(perField_))->postingsArray_);
  jint oldSize = ((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(perField_->postingsArray_))->size_;
  postingsArray = JreStrongAssign(&perField_->postingsArray_, [((OrgApacheLuceneIndexParallelPostingsArray *) nil_chk(postingsArray)) grow]);
  [perField_ newPostingsArray];
  [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:([postingsArray bytesPerPosting] * (postingsArray->size_ - oldSize))];
  return postingsArray->textStarts_;
}

- (IOSIntArray *)clear {
  if (((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(perField_))->postingsArray_ != nil) {
    [((OrgApacheLuceneUtilCounter *) nil_chk(bytesUsed_)) addAndGetWithLong:-(perField_->postingsArray_->size_ * [perField_->postingsArray_ bytesPerPosting])];
    JreStrongAssign(&perField_->postingsArray_, nil);
    [perField_ newPostingsArray];
  }
  return nil;
}

- (OrgApacheLuceneUtilCounter *)bytesUsed {
  return bytesUsed_;
}

- (void)__javaClone:(OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray *)original {
  [super __javaClone:original];
  [perField_ release];
}

- (void)dealloc {
  RELEASE_(bytesUsed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilCounter;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexTermsHashPerField:withOrgApacheLuceneUtilCounter:);
  methods[1].selector = @selector(init__);
  methods[2].selector = @selector(grow);
  methods[3].selector = @selector(clear);
  methods[4].selector = @selector(bytesUsed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "perField_", "LOrgApacheLuceneIndexTermsHashPerField;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bytesUsed_", "LOrgApacheLuceneUtilCounter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexTermsHashPerField;LOrgApacheLuceneUtilCounter;", "init", "LOrgApacheLuceneIndexTermsHashPerField;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray = { "PostingsBytesStartArray", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x1a, 5, 2, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray;
}

@end

void OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray_initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray *self, OrgApacheLuceneIndexTermsHashPerField *perField, OrgApacheLuceneUtilCounter *bytesUsed) {
  OrgApacheLuceneUtilBytesRefHash_BytesStartArray_init(self);
  self->perField_ = perField;
  JreStrongAssign(&self->bytesUsed_, bytesUsed);
}

OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray *new_OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray_initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexTermsHashPerField *perField, OrgApacheLuceneUtilCounter *bytesUsed) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray, initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_, perField, bytesUsed)
}

OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray *create_OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray_initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_(OrgApacheLuceneIndexTermsHashPerField *perField, OrgApacheLuceneUtilCounter *bytesUsed) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray, initWithOrgApacheLuceneIndexTermsHashPerField_withOrgApacheLuceneUtilCounter_, perField, bytesUsed)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexTermsHashPerField_PostingsBytesStartArray)
