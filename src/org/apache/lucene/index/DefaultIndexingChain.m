//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DefaultIndexingChain.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Comparable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/NormsConsumer.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/index/AbortingException.h"
#include "org/apache/lucene/index/BinaryDocValuesWriter.h"
#include "org/apache/lucene/index/DefaultIndexingChain.h"
#include "org/apache/lucene/index/DocConsumer.h"
#include "org/apache/lucene/index/DocValuesType.h"
#include "org/apache/lucene/index/DocValuesWriter.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/FreqProxTermsWriter.h"
#include "org/apache/lucene/index/IndexOptions.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "org/apache/lucene/index/NormValuesWriter.h"
#include "org/apache/lucene/index/NumericDocValuesWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/SortedDocValuesWriter.h"
#include "org/apache/lucene/index/SortedNumericDocValuesWriter.h"
#include "org/apache/lucene/index/SortedSetDocValuesWriter.h"
#include "org/apache/lucene/index/TermVectorsConsumer.h"
#include "org/apache/lucene/index/TermsHash.h"
#include "org/apache/lucene/index/TermsHashPerField.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/util/IOUtils.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"

@class OrgApacheLuceneIndexDefaultIndexingChain_PerField;

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/DefaultIndexingChain must not be compiled with ARC (-fobjc-arc)"
#if !__has_feature(objc_arc_weak)
#error "org/apache/lucene/index/DefaultIndexingChain must be compiled with weak references support (-fobjc-weak)"
#endif
#endif

@interface OrgApacheLuceneIndexDefaultIndexingChain () {
 @public
  OrgApacheLuceneCodecsStoredFieldsWriter *storedFieldsWriter_;
  jint lastStoredDocID_;
  IOSObjectArray *fieldHash_;
  jint hashMask_;
  jint totalFieldCount_;
  jlong nextFieldGen_;
  IOSObjectArray *fields_;
}

- (void)initStoredFieldsWriter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Writes all buffered doc values (called from <code>flush</code>).
 */
- (void)writeDocValuesWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state;

/*!
 @brief Catch up for all docs before us that had no stored
   fields, or hit non-aborting exceptions before writing
   stored fields.
 */
- (void)fillStoredFieldsWithInt:(jint)docID;

- (void)writeNormsWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state;

- (void)rehash;

/*!
 @brief Calls StoredFieldsWriter.startDocument, aborting the
   segment if it hits any exception.
 */
- (void)startStoredFields;

/*!
 @brief Calls StoredFieldsWriter.finishDocument, aborting the
   segment if it hits any exception.
 */
- (void)finishStoredFields;

- (jint)processFieldWithOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)field
                                                  withLong:(jlong)fieldGen
                                                   withInt:(jint)fieldCount;

+ (void)verifyUnIndexedFieldTypeWithNSString:(NSString *)name
  withOrgApacheLuceneIndexIndexableFieldType:(id<OrgApacheLuceneIndexIndexableFieldType>)ft;

/*!
 @brief Called from processDocument to index one field's doc
   value
 */
- (void)indexDocValueWithOrgApacheLuceneIndexDefaultIndexingChain_PerField:(OrgApacheLuceneIndexDefaultIndexingChain_PerField *)fp
                                     withOrgApacheLuceneIndexDocValuesType:(OrgApacheLuceneIndexDocValuesType *)dvType
                                    withOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)field;

/*!
 @brief Returns a previously created <code>PerField</code>, or null
   if this field name wasn't seen yet.
 */
- (OrgApacheLuceneIndexDefaultIndexingChain_PerField *)getPerFieldWithNSString:(NSString *)name;

/*!
 @brief Returns a previously created <code>PerField</code>,
   absorbing the type information from <code>FieldType</code>,
   and creates a new <code>PerField</code> if this field name
   wasn't seen yet.
 */
- (OrgApacheLuceneIndexDefaultIndexingChain_PerField *)getOrAddFieldWithNSString:(NSString *)name
                                      withOrgApacheLuceneIndexIndexableFieldType:(id<OrgApacheLuceneIndexIndexableFieldType>)fieldType
                                                                     withBoolean:(jboolean)invert;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain, storedFieldsWriter_, OrgApacheLuceneCodecsStoredFieldsWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain, fieldHash_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain, fields_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_initStoredFieldsWriter(OrgApacheLuceneIndexDefaultIndexingChain *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_writeDocValuesWithOrgApacheLuceneIndexSegmentWriteState_(OrgApacheLuceneIndexDefaultIndexingChain *self, OrgApacheLuceneIndexSegmentWriteState *state);

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_fillStoredFieldsWithInt_(OrgApacheLuceneIndexDefaultIndexingChain *self, jint docID);

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_writeNormsWithOrgApacheLuceneIndexSegmentWriteState_(OrgApacheLuceneIndexDefaultIndexingChain *self, OrgApacheLuceneIndexSegmentWriteState *state);

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_rehash(OrgApacheLuceneIndexDefaultIndexingChain *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_startStoredFields(OrgApacheLuceneIndexDefaultIndexingChain *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_finishStoredFields(OrgApacheLuceneIndexDefaultIndexingChain *self);

__attribute__((unused)) static jint OrgApacheLuceneIndexDefaultIndexingChain_processFieldWithOrgApacheLuceneIndexIndexableField_withLong_withInt_(OrgApacheLuceneIndexDefaultIndexingChain *self, id<OrgApacheLuceneIndexIndexableField> field, jlong fieldGen, jint fieldCount);

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_verifyUnIndexedFieldTypeWithNSString_withOrgApacheLuceneIndexIndexableFieldType_(NSString *name, id<OrgApacheLuceneIndexIndexableFieldType> ft);

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_indexDocValueWithOrgApacheLuceneIndexDefaultIndexingChain_PerField_withOrgApacheLuceneIndexDocValuesType_withOrgApacheLuceneIndexIndexableField_(OrgApacheLuceneIndexDefaultIndexingChain *self, OrgApacheLuceneIndexDefaultIndexingChain_PerField *fp, OrgApacheLuceneIndexDocValuesType *dvType, id<OrgApacheLuceneIndexIndexableField> field);

__attribute__((unused)) static OrgApacheLuceneIndexDefaultIndexingChain_PerField *OrgApacheLuceneIndexDefaultIndexingChain_getPerFieldWithNSString_(OrgApacheLuceneIndexDefaultIndexingChain *self, NSString *name);

__attribute__((unused)) static OrgApacheLuceneIndexDefaultIndexingChain_PerField *OrgApacheLuceneIndexDefaultIndexingChain_getOrAddFieldWithNSString_withOrgApacheLuceneIndexIndexableFieldType_withBoolean_(OrgApacheLuceneIndexDefaultIndexingChain *self, NSString *name, id<OrgApacheLuceneIndexIndexableFieldType> fieldType, jboolean invert);

/*!
 @brief NOTE: not static: accesses at least docState, termsHash.
 */
@interface OrgApacheLuceneIndexDefaultIndexingChain_PerField : NSObject < JavaLangComparable > {
 @public
  WEAK_ OrgApacheLuceneIndexDefaultIndexingChain *this$0_;
  OrgApacheLuceneIndexFieldInfo *fieldInfo_;
  OrgApacheLuceneSearchSimilaritiesSimilarity *similarity_;
  OrgApacheLuceneIndexFieldInvertState *invertState_;
  OrgApacheLuceneIndexTermsHashPerField *termsHashPerField_;
  OrgApacheLuceneIndexDocValuesWriter *docValuesWriter_;
  /*!
   @brief We use this to know when a PerField is seen for the
   first time in the current document.
   */
  jlong fieldGen_;
  OrgApacheLuceneIndexDefaultIndexingChain_PerField *next_;
  OrgApacheLuceneIndexNormValuesWriter *norms_;
  OrgApacheLuceneAnalysisTokenStream *tokenStream_;
  OrgApacheLuceneIndexIndexOptions *indexOptions_;
}

- (instancetype)initWithOrgApacheLuceneIndexDefaultIndexingChain:(OrgApacheLuceneIndexDefaultIndexingChain *)outer$
                               withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                                     withBoolean:(jboolean)invert;

- (void)setInvertState;

- (jint)compareToWithId:(OrgApacheLuceneIndexDefaultIndexingChain_PerField *)other;

- (void)finish;

/*!
 @brief Inverts one field for one document; first is true
   if this is the first time we are seeing this field
   name in this document.
 */
- (void)invertWithOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)field
                                         withBoolean:(jboolean)first;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDefaultIndexingChain_PerField)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain_PerField, fieldInfo_, OrgApacheLuceneIndexFieldInfo *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain_PerField, similarity_, OrgApacheLuceneSearchSimilaritiesSimilarity *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain_PerField, invertState_, OrgApacheLuceneIndexFieldInvertState *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain_PerField, termsHashPerField_, OrgApacheLuceneIndexTermsHashPerField *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain_PerField, docValuesWriter_, OrgApacheLuceneIndexDocValuesWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain_PerField, next_, OrgApacheLuceneIndexDefaultIndexingChain_PerField *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain_PerField, norms_, OrgApacheLuceneIndexNormValuesWriter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain_PerField, tokenStream_, OrgApacheLuceneAnalysisTokenStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDefaultIndexingChain_PerField, indexOptions_, OrgApacheLuceneIndexIndexOptions *)

__attribute__((unused)) static void OrgApacheLuceneIndexDefaultIndexingChain_PerField_initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_(OrgApacheLuceneIndexDefaultIndexingChain_PerField *self, OrgApacheLuceneIndexDefaultIndexingChain *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jboolean invert);

__attribute__((unused)) static OrgApacheLuceneIndexDefaultIndexingChain_PerField *new_OrgApacheLuceneIndexDefaultIndexingChain_PerField_initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_(OrgApacheLuceneIndexDefaultIndexingChain *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jboolean invert) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDefaultIndexingChain_PerField *create_OrgApacheLuceneIndexDefaultIndexingChain_PerField_initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_(OrgApacheLuceneIndexDefaultIndexingChain *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jboolean invert);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDefaultIndexingChain_PerField)

@implementation OrgApacheLuceneIndexDefaultIndexingChain

- (instancetype)initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)docWriter {
  OrgApacheLuceneIndexDefaultIndexingChain_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(self, docWriter);
  return self;
}

- (void)initStoredFieldsWriter {
  OrgApacheLuceneIndexDefaultIndexingChain_initStoredFieldsWriter(self);
}

- (void)flushWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  jint maxDoc = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_)) maxDoc];
  OrgApacheLuceneIndexDefaultIndexingChain_writeNormsWithOrgApacheLuceneIndexSegmentWriteState_(self, state);
  OrgApacheLuceneIndexDefaultIndexingChain_writeDocValuesWithOrgApacheLuceneIndexSegmentWriteState_(self, state);
  OrgApacheLuceneIndexDefaultIndexingChain_initStoredFieldsWriter(self);
  OrgApacheLuceneIndexDefaultIndexingChain_fillStoredFieldsWithInt_(self, maxDoc);
  [((OrgApacheLuceneCodecsStoredFieldsWriter *) nil_chk(storedFieldsWriter_)) finishWithOrgApacheLuceneIndexFieldInfos:state->fieldInfos_ withInt:maxDoc];
  [((OrgApacheLuceneCodecsStoredFieldsWriter *) nil_chk(storedFieldsWriter_)) close];
  id<JavaUtilMap> fieldsToFlush = create_JavaUtilHashMap_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fieldHash_))->size_; i++) {
    OrgApacheLuceneIndexDefaultIndexingChain_PerField *perField = IOSObjectArray_Get(fieldHash_, i);
    while (perField != nil) {
      if (perField->invertState_ != nil) {
        [fieldsToFlush putWithId:((OrgApacheLuceneIndexFieldInfo *) nil_chk(perField->fieldInfo_))->name_ withId:perField->termsHashPerField_];
      }
      perField = perField->next_;
    }
  }
  [((OrgApacheLuceneIndexTermsHash *) nil_chk(termsHash_)) flushWithJavaUtilMap:fieldsToFlush withOrgApacheLuceneIndexSegmentWriteState:state];
  [((OrgApacheLuceneCodecsFieldInfosFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(docWriter_))->codec_)) fieldInfosFormat])) writeWithOrgApacheLuceneStoreDirectory:state->directory_ withOrgApacheLuceneIndexSegmentInfo:state->segmentInfo_ withNSString:@"" withOrgApacheLuceneIndexFieldInfos:state->fieldInfos_ withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT)];
}

- (void)writeDocValuesWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  OrgApacheLuceneIndexDefaultIndexingChain_writeDocValuesWithOrgApacheLuceneIndexSegmentWriteState_(self, state);
}

- (void)fillStoredFieldsWithInt:(jint)docID {
  OrgApacheLuceneIndexDefaultIndexingChain_fillStoredFieldsWithInt_(self, docID);
}

- (void)writeNormsWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state {
  OrgApacheLuceneIndexDefaultIndexingChain_writeNormsWithOrgApacheLuceneIndexSegmentWriteState_(self, state);
}

- (void)abort {
  OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ storedFieldsWriter_ } count:1 type:JavaIoCloseable_class_()]);
  @try {
    [((OrgApacheLuceneIndexTermsHash *) nil_chk(termsHash_)) abort];
  }
  @catch (JavaLangThrowable *t) {
  }
  JavaUtilArrays_fillWithNSObjectArray_withId_(fieldHash_, nil);
}

- (void)rehash {
  OrgApacheLuceneIndexDefaultIndexingChain_rehash(self);
}

- (void)startStoredFields {
  OrgApacheLuceneIndexDefaultIndexingChain_startStoredFields(self);
}

- (void)finishStoredFields {
  OrgApacheLuceneIndexDefaultIndexingChain_finishStoredFields(self);
}

- (void)processDocument {
  jint fieldCount = 0;
  jlong fieldGen = nextFieldGen_++;
  [((OrgApacheLuceneIndexTermsHash *) nil_chk(termsHash_)) startDocument];
  OrgApacheLuceneIndexDefaultIndexingChain_fillStoredFieldsWithInt_(self, ((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(docState_))->docID_);
  OrgApacheLuceneIndexDefaultIndexingChain_startStoredFields(self);
  jboolean aborting = false;
  @try {
    for (id<OrgApacheLuceneIndexIndexableField> __strong field in nil_chk(docState_->doc_)) {
      fieldCount = OrgApacheLuceneIndexDefaultIndexingChain_processFieldWithOrgApacheLuceneIndexIndexableField_withLong_withInt_(self, field, fieldGen, fieldCount);
    }
  }
  @catch (OrgApacheLuceneIndexAbortingException *ae) {
    aborting = true;
    @throw ae;
  }
  @finally {
    if (aborting == false) {
      for (jint i = 0; i < fieldCount; i++) {
        [((OrgApacheLuceneIndexDefaultIndexingChain_PerField *) nil_chk(IOSObjectArray_Get(nil_chk(fields_), i))) finish];
      }
      OrgApacheLuceneIndexDefaultIndexingChain_finishStoredFields(self);
    }
  }
  @try {
    [termsHash_ finishDocument];
  }
  @catch (JavaLangThrowable *th) {
    @throw nil_chk(OrgApacheLuceneIndexAbortingException_wrapWithJavaLangThrowable_(th));
  }
}

- (jint)processFieldWithOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)field
                                                  withLong:(jlong)fieldGen
                                                   withInt:(jint)fieldCount {
  return OrgApacheLuceneIndexDefaultIndexingChain_processFieldWithOrgApacheLuceneIndexIndexableField_withLong_withInt_(self, field, fieldGen, fieldCount);
}

+ (void)verifyUnIndexedFieldTypeWithNSString:(NSString *)name
  withOrgApacheLuceneIndexIndexableFieldType:(id<OrgApacheLuceneIndexIndexableFieldType>)ft {
  OrgApacheLuceneIndexDefaultIndexingChain_verifyUnIndexedFieldTypeWithNSString_withOrgApacheLuceneIndexIndexableFieldType_(name, ft);
}

- (void)indexDocValueWithOrgApacheLuceneIndexDefaultIndexingChain_PerField:(OrgApacheLuceneIndexDefaultIndexingChain_PerField *)fp
                                     withOrgApacheLuceneIndexDocValuesType:(OrgApacheLuceneIndexDocValuesType *)dvType
                                    withOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)field {
  OrgApacheLuceneIndexDefaultIndexingChain_indexDocValueWithOrgApacheLuceneIndexDefaultIndexingChain_PerField_withOrgApacheLuceneIndexDocValuesType_withOrgApacheLuceneIndexIndexableField_(self, fp, dvType, field);
}

- (OrgApacheLuceneIndexDefaultIndexingChain_PerField *)getPerFieldWithNSString:(NSString *)name {
  return OrgApacheLuceneIndexDefaultIndexingChain_getPerFieldWithNSString_(self, name);
}

- (OrgApacheLuceneIndexDefaultIndexingChain_PerField *)getOrAddFieldWithNSString:(NSString *)name
                                      withOrgApacheLuceneIndexIndexableFieldType:(id<OrgApacheLuceneIndexIndexableFieldType>)fieldType
                                                                     withBoolean:(jboolean)invert {
  return OrgApacheLuceneIndexDefaultIndexingChain_getOrAddFieldWithNSString_withOrgApacheLuceneIndexIndexableFieldType_withBoolean_(self, name, fieldType, invert);
}

- (void)__javaClone:(OrgApacheLuceneIndexDefaultIndexingChain *)original {
  [super __javaClone:original];
  [docWriter_ release];
}

- (void)dealloc {
  RELEASE_(bytesUsed_);
  RELEASE_(docState_);
  RELEASE_(fieldInfos_);
  RELEASE_(termsHash_);
  RELEASE_(storedFieldsWriter_);
  RELEASE_(fieldHash_);
  RELEASE_(fields_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 10, 4, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, 1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDefaultIndexingChain_PerField;", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDefaultIndexingChain_PerField;", 0x2, 17, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread:);
  methods[1].selector = @selector(initStoredFieldsWriter);
  methods[2].selector = @selector(flushWithOrgApacheLuceneIndexSegmentWriteState:);
  methods[3].selector = @selector(writeDocValuesWithOrgApacheLuceneIndexSegmentWriteState:);
  methods[4].selector = @selector(fillStoredFieldsWithInt:);
  methods[5].selector = @selector(writeNormsWithOrgApacheLuceneIndexSegmentWriteState:);
  methods[6].selector = @selector(abort);
  methods[7].selector = @selector(rehash);
  methods[8].selector = @selector(startStoredFields);
  methods[9].selector = @selector(finishStoredFields);
  methods[10].selector = @selector(processDocument);
  methods[11].selector = @selector(processFieldWithOrgApacheLuceneIndexIndexableField:withLong:withInt:);
  methods[12].selector = @selector(verifyUnIndexedFieldTypeWithNSString:withOrgApacheLuceneIndexIndexableFieldType:);
  methods[13].selector = @selector(indexDocValueWithOrgApacheLuceneIndexDefaultIndexingChain_PerField:withOrgApacheLuceneIndexDocValuesType:withOrgApacheLuceneIndexIndexableField:);
  methods[14].selector = @selector(getPerFieldWithNSString:);
  methods[15].selector = @selector(getOrAddFieldWithNSString:withOrgApacheLuceneIndexIndexableFieldType:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bytesUsed_", "LOrgApacheLuceneUtilCounter;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docState_", "LOrgApacheLuceneIndexDocumentsWriterPerThread_DocState;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docWriter_", "LOrgApacheLuceneIndexDocumentsWriterPerThread;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fieldInfos_", "LOrgApacheLuceneIndexFieldInfos_Builder;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "termsHash_", "LOrgApacheLuceneIndexTermsHash;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "storedFieldsWriter_", "LOrgApacheLuceneCodecsStoredFieldsWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastStoredDocID_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldHash_", "[LOrgApacheLuceneIndexDefaultIndexingChain_PerField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashMask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalFieldCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextFieldGen_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fields_", "[LOrgApacheLuceneIndexDefaultIndexingChain_PerField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocumentsWriterPerThread;", "LJavaIoIOException;", "flush", "LOrgApacheLuceneIndexSegmentWriteState;", "LJavaIoIOException;LOrgApacheLuceneIndexAbortingException;", "writeDocValues", "fillStoredFields", "I", "writeNorms", "processField", "LOrgApacheLuceneIndexIndexableField;JI", "verifyUnIndexedFieldType", "LNSString;LOrgApacheLuceneIndexIndexableFieldType;", "indexDocValue", "LOrgApacheLuceneIndexDefaultIndexingChain_PerField;LOrgApacheLuceneIndexDocValuesType;LOrgApacheLuceneIndexIndexableField;", "getPerField", "LNSString;", "getOrAddField", "LNSString;LOrgApacheLuceneIndexIndexableFieldType;Z", "LOrgApacheLuceneIndexDefaultIndexingChain_PerField;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDefaultIndexingChain = { "DefaultIndexingChain", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 16, 12, -1, 19, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDefaultIndexingChain;
}

@end

void OrgApacheLuceneIndexDefaultIndexingChain_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDefaultIndexingChain *self, OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter) {
  OrgApacheLuceneIndexDocConsumer_initPackagePrivate(self);
  JreStrongAssignAndConsume(&self->fieldHash_, [IOSObjectArray newArrayWithLength:2 type:OrgApacheLuceneIndexDefaultIndexingChain_PerField_class_()]);
  self->hashMask_ = 1;
  JreStrongAssignAndConsume(&self->fields_, [IOSObjectArray newArrayWithLength:1 type:OrgApacheLuceneIndexDefaultIndexingChain_PerField_class_()]);
  self->docWriter_ = docWriter;
  JreStrongAssign(&self->fieldInfos_, [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(docWriter)) getFieldInfosBuilder]);
  JreStrongAssign(&self->docState_, docWriter->docState_);
  JreStrongAssign(&self->bytesUsed_, docWriter->bytesUsed_);
  OrgApacheLuceneIndexTermsHash *termVectorsWriter = create_OrgApacheLuceneIndexTermVectorsConsumer_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(docWriter);
  JreStrongAssignAndConsume(&self->termsHash_, new_OrgApacheLuceneIndexFreqProxTermsWriter_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withOrgApacheLuceneIndexTermsHash_(docWriter, termVectorsWriter));
}

OrgApacheLuceneIndexDefaultIndexingChain *new_OrgApacheLuceneIndexDefaultIndexingChain_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDefaultIndexingChain, initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_, docWriter)
}

OrgApacheLuceneIndexDefaultIndexingChain *create_OrgApacheLuceneIndexDefaultIndexingChain_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDefaultIndexingChain, initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_, docWriter)
}

void OrgApacheLuceneIndexDefaultIndexingChain_initStoredFieldsWriter(OrgApacheLuceneIndexDefaultIndexingChain *self) {
  if (self->storedFieldsWriter_ == nil) {
    JreStrongAssign(&self->storedFieldsWriter_, [((OrgApacheLuceneCodecsStoredFieldsFormat *) nil_chk([((OrgApacheLuceneCodecsCodec *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(self->docWriter_))->codec_)) storedFieldsFormat])) fieldsWriterWithOrgApacheLuceneStoreDirectory:self->docWriter_->directory_ withOrgApacheLuceneIndexSegmentInfo:[self->docWriter_ getSegmentInfo] withOrgApacheLuceneStoreIOContext:JreLoadStatic(OrgApacheLuceneStoreIOContext, DEFAULT)]);
  }
}

void OrgApacheLuceneIndexDefaultIndexingChain_writeDocValuesWithOrgApacheLuceneIndexSegmentWriteState_(OrgApacheLuceneIndexDefaultIndexingChain *self, OrgApacheLuceneIndexSegmentWriteState *state) {
  jint maxDoc = [((OrgApacheLuceneIndexSegmentInfo *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->segmentInfo_)) maxDoc];
  OrgApacheLuceneCodecsDocValuesConsumer *dvConsumer = nil;
  jboolean success = false;
  @try {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->fieldHash_))->size_; i++) {
      OrgApacheLuceneIndexDefaultIndexingChain_PerField *perField = IOSObjectArray_Get(self->fieldHash_, i);
      while (perField != nil) {
        if (perField->docValuesWriter_ != nil) {
          if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(perField->fieldInfo_)) getDocValuesType] == JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NONE)) {
            @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@$$$", @"segment=", state->segmentInfo_, @": field=\"", perField->fieldInfo_->name_, @"\" has no docValues but wrote them"));
          }
          if (dvConsumer == nil) {
            OrgApacheLuceneCodecsDocValuesFormat *fmt = JreRetainedLocalValue([((OrgApacheLuceneCodecsCodec *) nil_chk([state->segmentInfo_ getCodec])) docValuesFormat]);
            dvConsumer = [((OrgApacheLuceneCodecsDocValuesFormat *) nil_chk(fmt)) fieldsConsumerWithOrgApacheLuceneIndexSegmentWriteState:state];
          }
          [((OrgApacheLuceneIndexDocValuesWriter *) nil_chk(perField->docValuesWriter_)) finishWithInt:maxDoc];
          [((OrgApacheLuceneIndexDocValuesWriter *) nil_chk(perField->docValuesWriter_)) flushWithOrgApacheLuceneIndexSegmentWriteState:state withOrgApacheLuceneCodecsDocValuesConsumer:dvConsumer];
          JreStrongAssign(&perField->docValuesWriter_, nil);
        }
        else if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(perField->fieldInfo_)) getDocValuesType] != JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NONE)) {
          @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@$$$", @"segment=", state->segmentInfo_, @": field=\"", perField->fieldInfo_->name_, @"\" has docValues but did not write them"));
        }
        perField = perField->next_;
      }
    }
    success = true;
  }
  @finally {
    if (success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ dvConsumer } count:1 type:JavaIoCloseable_class_()]);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ dvConsumer } count:1 type:JavaIoCloseable_class_()]);
    }
  }
  if ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(state->fieldInfos_)) hasDocValues] == false) {
    if (dvConsumer != nil) {
      @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@$", @"segment=", state->segmentInfo_, @": fieldInfos has no docValues but wrote them"));
    }
  }
  else if (dvConsumer == nil) {
    @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@$", @"segment=", state->segmentInfo_, @": fieldInfos has docValues but did not wrote them"));
  }
}

void OrgApacheLuceneIndexDefaultIndexingChain_fillStoredFieldsWithInt_(OrgApacheLuceneIndexDefaultIndexingChain *self, jint docID) {
  while (self->lastStoredDocID_ < docID) {
    OrgApacheLuceneIndexDefaultIndexingChain_startStoredFields(self);
    OrgApacheLuceneIndexDefaultIndexingChain_finishStoredFields(self);
  }
}

void OrgApacheLuceneIndexDefaultIndexingChain_writeNormsWithOrgApacheLuceneIndexSegmentWriteState_(OrgApacheLuceneIndexDefaultIndexingChain *self, OrgApacheLuceneIndexSegmentWriteState *state) {
  jboolean success = false;
  OrgApacheLuceneCodecsNormsConsumer *normsConsumer = nil;
  @try {
    if ([((OrgApacheLuceneIndexFieldInfos *) nil_chk(((OrgApacheLuceneIndexSegmentWriteState *) nil_chk(state))->fieldInfos_)) hasNorms]) {
      OrgApacheLuceneCodecsNormsFormat *normsFormat = JreRetainedLocalValue([((OrgApacheLuceneCodecsCodec *) nil_chk([((OrgApacheLuceneIndexSegmentInfo *) nil_chk(state->segmentInfo_)) getCodec])) normsFormat]);
      JreAssert(normsFormat != nil, @"org/apache/lucene/index/DefaultIndexingChain.java:197 condition failed: assert normsFormat != null;");
      normsConsumer = [((OrgApacheLuceneCodecsNormsFormat *) nil_chk(normsFormat)) normsConsumerWithOrgApacheLuceneIndexSegmentWriteState:state];
      for (OrgApacheLuceneIndexFieldInfo * __strong fi in state->fieldInfos_) {
        OrgApacheLuceneIndexDefaultIndexingChain_PerField *perField = OrgApacheLuceneIndexDefaultIndexingChain_getPerFieldWithNSString_(self, ((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi))->name_);
        JreAssert(perField != nil, @"org/apache/lucene/index/DefaultIndexingChain.java:202 condition failed: assert perField != null;");
        if ([fi omitsNorms] == false && [fi getIndexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE)) {
          JreAssert(((OrgApacheLuceneIndexDefaultIndexingChain_PerField *) nil_chk(perField))->norms_ != nil, JreStrcat("$$", @"field=", fi->name_));
          [((OrgApacheLuceneIndexNormValuesWriter *) nil_chk(perField->norms_)) finishWithInt:[state->segmentInfo_ maxDoc]];
          [((OrgApacheLuceneIndexNormValuesWriter *) nil_chk(perField->norms_)) flushWithOrgApacheLuceneIndexSegmentWriteState:state withOrgApacheLuceneCodecsNormsConsumer:normsConsumer];
        }
      }
    }
    success = true;
  }
  @finally {
    if (success) {
      OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ normsConsumer } count:1 type:JavaIoCloseable_class_()]);
    }
    else {
      OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_([IOSObjectArray arrayWithObjects:(id[]){ normsConsumer } count:1 type:JavaIoCloseable_class_()]);
    }
  }
}

void OrgApacheLuceneIndexDefaultIndexingChain_rehash(OrgApacheLuceneIndexDefaultIndexingChain *self) {
  jint newHashSize = (((IOSObjectArray *) nil_chk(self->fieldHash_))->size_ * 2);
  JreAssert(newHashSize > self->fieldHash_->size_, @"org/apache/lucene/index/DefaultIndexingChain.java:238 condition failed: assert newHashSize > fieldHash.length;");
  IOSObjectArray *newHashArray = [IOSObjectArray arrayWithLength:newHashSize type:OrgApacheLuceneIndexDefaultIndexingChain_PerField_class_()];
  jint newHashMask = newHashSize - 1;
  for (jint j = 0; j < ((IOSObjectArray *) nil_chk(self->fieldHash_))->size_; j++) {
    OrgApacheLuceneIndexDefaultIndexingChain_PerField *fp0 = IOSObjectArray_Get(self->fieldHash_, j);
    while (fp0 != nil) {
      jint hashPos2 = ((jint) [((NSString *) nil_chk(((OrgApacheLuceneIndexFieldInfo *) nil_chk(fp0->fieldInfo_))->name_)) hash]) & newHashMask;
      OrgApacheLuceneIndexDefaultIndexingChain_PerField *nextFP0 = JreRetainedLocalValue(fp0->next_);
      JreStrongAssign(&fp0->next_, IOSObjectArray_Get(newHashArray, hashPos2));
      IOSObjectArray_Set(newHashArray, hashPos2, fp0);
      fp0 = nextFP0;
    }
  }
  JreStrongAssign(&self->fieldHash_, newHashArray);
  self->hashMask_ = newHashMask;
}

void OrgApacheLuceneIndexDefaultIndexingChain_startStoredFields(OrgApacheLuceneIndexDefaultIndexingChain *self) {
  @try {
    OrgApacheLuceneIndexDefaultIndexingChain_initStoredFieldsWriter(self);
    [((OrgApacheLuceneCodecsStoredFieldsWriter *) nil_chk(self->storedFieldsWriter_)) startDocument];
  }
  @catch (JavaLangThrowable *th) {
    @throw nil_chk(OrgApacheLuceneIndexAbortingException_wrapWithJavaLangThrowable_(th));
  }
  self->lastStoredDocID_++;
}

void OrgApacheLuceneIndexDefaultIndexingChain_finishStoredFields(OrgApacheLuceneIndexDefaultIndexingChain *self) {
  @try {
    [((OrgApacheLuceneCodecsStoredFieldsWriter *) nil_chk(self->storedFieldsWriter_)) finishDocument];
  }
  @catch (JavaLangThrowable *th) {
    @throw nil_chk(OrgApacheLuceneIndexAbortingException_wrapWithJavaLangThrowable_(th));
  }
}

jint OrgApacheLuceneIndexDefaultIndexingChain_processFieldWithOrgApacheLuceneIndexIndexableField_withLong_withInt_(OrgApacheLuceneIndexDefaultIndexingChain *self, id<OrgApacheLuceneIndexIndexableField> field, jlong fieldGen, jint fieldCount) {
  NSString *fieldName = JreRetainedLocalValue([((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) name]);
  id<OrgApacheLuceneIndexIndexableFieldType> fieldType = JreRetainedLocalValue([field fieldType]);
  OrgApacheLuceneIndexDefaultIndexingChain_PerField *fp = nil;
  if ([((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk(fieldType)) indexOptions] == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$$", @"IndexOptions must not be null (field: \"", [field name], @"\")"));
  }
  if ([fieldType indexOptions] != JreLoadEnum(OrgApacheLuceneIndexIndexOptions, NONE)) {
    if ([fieldType omitNorms] && [field boost] != 1.0f) {
      @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$C", @"You cannot set an index-time boost: norms are omitted for field '", [field name], '\''));
    }
    fp = OrgApacheLuceneIndexDefaultIndexingChain_getOrAddFieldWithNSString_withOrgApacheLuceneIndexIndexableFieldType_withBoolean_(self, fieldName, fieldType, true);
    jboolean first = ((OrgApacheLuceneIndexDefaultIndexingChain_PerField *) nil_chk(fp))->fieldGen_ != fieldGen;
    [fp invertWithOrgApacheLuceneIndexIndexableField:field withBoolean:first];
    if (first) {
      IOSObjectArray_Set(nil_chk(self->fields_), fieldCount++, fp);
      fp->fieldGen_ = fieldGen;
    }
  }
  else {
    OrgApacheLuceneIndexDefaultIndexingChain_verifyUnIndexedFieldTypeWithNSString_withOrgApacheLuceneIndexIndexableFieldType_(fieldName, fieldType);
  }
  if ([fieldType stored]) {
    if (fp == nil) {
      fp = OrgApacheLuceneIndexDefaultIndexingChain_getOrAddFieldWithNSString_withOrgApacheLuceneIndexIndexableFieldType_withBoolean_(self, fieldName, fieldType, false);
    }
    if ([fieldType stored]) {
      @try {
        [((OrgApacheLuceneCodecsStoredFieldsWriter *) nil_chk(self->storedFieldsWriter_)) writeFieldWithOrgApacheLuceneIndexFieldInfo:((OrgApacheLuceneIndexDefaultIndexingChain_PerField *) nil_chk(fp))->fieldInfo_ withOrgApacheLuceneIndexIndexableField:field];
      }
      @catch (JavaLangThrowable *th) {
        @throw nil_chk(OrgApacheLuceneIndexAbortingException_wrapWithJavaLangThrowable_(th));
      }
    }
  }
  OrgApacheLuceneIndexDocValuesType *dvType = JreRetainedLocalValue([fieldType docValuesType]);
  if (dvType == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(JreStrcat("$$$", @"docValuesType cannot be null (field: \"", fieldName, @"\")"));
  }
  if (dvType != JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NONE)) {
    if (fp == nil) {
      fp = OrgApacheLuceneIndexDefaultIndexingChain_getOrAddFieldWithNSString_withOrgApacheLuceneIndexIndexableFieldType_withBoolean_(self, fieldName, fieldType, false);
    }
    OrgApacheLuceneIndexDefaultIndexingChain_indexDocValueWithOrgApacheLuceneIndexDefaultIndexingChain_PerField_withOrgApacheLuceneIndexDocValuesType_withOrgApacheLuceneIndexIndexableField_(self, fp, dvType, field);
  }
  return fieldCount;
}

void OrgApacheLuceneIndexDefaultIndexingChain_verifyUnIndexedFieldTypeWithNSString_withOrgApacheLuceneIndexIndexableFieldType_(NSString *name, id<OrgApacheLuceneIndexIndexableFieldType> ft) {
  OrgApacheLuceneIndexDefaultIndexingChain_initialize();
  if ([((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk(ft)) storeTermVectors]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"cannot store term vectors for a field that is not indexed (field=\"", name, @"\")"));
  }
  if ([ft storeTermVectorPositions]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"cannot store term vector positions for a field that is not indexed (field=\"", name, @"\")"));
  }
  if ([ft storeTermVectorOffsets]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"cannot store term vector offsets for a field that is not indexed (field=\"", name, @"\")"));
  }
  if ([ft storeTermVectorPayloads]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"cannot store term vector payloads for a field that is not indexed (field=\"", name, @"\")"));
  }
}

void OrgApacheLuceneIndexDefaultIndexingChain_indexDocValueWithOrgApacheLuceneIndexDefaultIndexingChain_PerField_withOrgApacheLuceneIndexDocValuesType_withOrgApacheLuceneIndexIndexableField_(OrgApacheLuceneIndexDefaultIndexingChain *self, OrgApacheLuceneIndexDefaultIndexingChain_PerField *fp, OrgApacheLuceneIndexDocValuesType *dvType, id<OrgApacheLuceneIndexIndexableField> field) {
  if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(((OrgApacheLuceneIndexDefaultIndexingChain_PerField *) nil_chk(fp))->fieldInfo_)) getDocValuesType] == JreLoadEnum(OrgApacheLuceneIndexDocValuesType, NONE)) {
    [((OrgApacheLuceneIndexFieldInfos_FieldNumbers *) nil_chk(((OrgApacheLuceneIndexFieldInfos_Builder *) nil_chk(self->fieldInfos_))->globalFieldNumbers_)) setDocValuesTypeWithInt:fp->fieldInfo_->number_ withNSString:fp->fieldInfo_->name_ withOrgApacheLuceneIndexDocValuesType:dvType];
  }
  [fp->fieldInfo_ setDocValuesTypeWithOrgApacheLuceneIndexDocValuesType:dvType];
  jint docID = ((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(self->docState_))->docID_;
  switch ([dvType ordinal]) {
    case OrgApacheLuceneIndexDocValuesType_Enum_NUMERIC:
    if (fp->docValuesWriter_ == nil) {
      JreStrongAssignAndConsume(&fp->docValuesWriter_, new_OrgApacheLuceneIndexNumericDocValuesWriter_initPackagePrivateWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilCounter_(fp->fieldInfo_, self->bytesUsed_));
    }
    [((OrgApacheLuceneIndexNumericDocValuesWriter *) cast_chk(fp->docValuesWriter_, [OrgApacheLuceneIndexNumericDocValuesWriter class])) addValueWithInt:docID withLong:[((NSNumber *) nil_chk([((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) numericValue])) longLongValue]];
    break;
    case OrgApacheLuceneIndexDocValuesType_Enum_BINARY:
    if (fp->docValuesWriter_ == nil) {
      JreStrongAssignAndConsume(&fp->docValuesWriter_, new_OrgApacheLuceneIndexBinaryDocValuesWriter_initPackagePrivateWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilCounter_(fp->fieldInfo_, self->bytesUsed_));
    }
    [((OrgApacheLuceneIndexBinaryDocValuesWriter *) cast_chk(fp->docValuesWriter_, [OrgApacheLuceneIndexBinaryDocValuesWriter class])) addValueWithInt:docID withOrgApacheLuceneUtilBytesRef:[((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) binaryValue]];
    break;
    case OrgApacheLuceneIndexDocValuesType_Enum_SORTED:
    if (fp->docValuesWriter_ == nil) {
      JreStrongAssignAndConsume(&fp->docValuesWriter_, new_OrgApacheLuceneIndexSortedDocValuesWriter_initPackagePrivateWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilCounter_(fp->fieldInfo_, self->bytesUsed_));
    }
    [((OrgApacheLuceneIndexSortedDocValuesWriter *) cast_chk(fp->docValuesWriter_, [OrgApacheLuceneIndexSortedDocValuesWriter class])) addValueWithInt:docID withOrgApacheLuceneUtilBytesRef:[((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) binaryValue]];
    break;
    case OrgApacheLuceneIndexDocValuesType_Enum_SORTED_NUMERIC:
    if (fp->docValuesWriter_ == nil) {
      JreStrongAssignAndConsume(&fp->docValuesWriter_, new_OrgApacheLuceneIndexSortedNumericDocValuesWriter_initPackagePrivateWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilCounter_(fp->fieldInfo_, self->bytesUsed_));
    }
    [((OrgApacheLuceneIndexSortedNumericDocValuesWriter *) cast_chk(fp->docValuesWriter_, [OrgApacheLuceneIndexSortedNumericDocValuesWriter class])) addValueWithInt:docID withLong:[((NSNumber *) nil_chk([((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) numericValue])) longLongValue]];
    break;
    case OrgApacheLuceneIndexDocValuesType_Enum_SORTED_SET:
    if (fp->docValuesWriter_ == nil) {
      JreStrongAssignAndConsume(&fp->docValuesWriter_, new_OrgApacheLuceneIndexSortedSetDocValuesWriter_initPackagePrivateWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilCounter_(fp->fieldInfo_, self->bytesUsed_));
    }
    [((OrgApacheLuceneIndexSortedSetDocValuesWriter *) cast_chk(fp->docValuesWriter_, [OrgApacheLuceneIndexSortedSetDocValuesWriter class])) addValueWithInt:docID withOrgApacheLuceneUtilBytesRef:[((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) binaryValue]];
    break;
    default:
    @throw create_JavaLangAssertionError_initWithId_(JreStrcat("$@", @"unrecognized DocValues.Type: ", dvType));
  }
}

OrgApacheLuceneIndexDefaultIndexingChain_PerField *OrgApacheLuceneIndexDefaultIndexingChain_getPerFieldWithNSString_(OrgApacheLuceneIndexDefaultIndexingChain *self, NSString *name) {
  jint hashPos = ((jint) [((NSString *) nil_chk(name)) hash]) & self->hashMask_;
  OrgApacheLuceneIndexDefaultIndexingChain_PerField *fp = IOSObjectArray_Get(nil_chk(self->fieldHash_), hashPos);
  while (fp != nil && ![((NSString *) nil_chk(((OrgApacheLuceneIndexFieldInfo *) nil_chk(fp->fieldInfo_))->name_)) isEqual:name]) {
    fp = fp->next_;
  }
  return fp;
}

OrgApacheLuceneIndexDefaultIndexingChain_PerField *OrgApacheLuceneIndexDefaultIndexingChain_getOrAddFieldWithNSString_withOrgApacheLuceneIndexIndexableFieldType_withBoolean_(OrgApacheLuceneIndexDefaultIndexingChain *self, NSString *name, id<OrgApacheLuceneIndexIndexableFieldType> fieldType, jboolean invert) {
  jint hashPos = ((jint) [((NSString *) nil_chk(name)) hash]) & self->hashMask_;
  OrgApacheLuceneIndexDefaultIndexingChain_PerField *fp = IOSObjectArray_Get(nil_chk(self->fieldHash_), hashPos);
  while (fp != nil && ![((NSString *) nil_chk(((OrgApacheLuceneIndexFieldInfo *) nil_chk(fp->fieldInfo_))->name_)) isEqual:name]) {
    fp = fp->next_;
  }
  if (fp == nil) {
    OrgApacheLuceneIndexFieldInfo *fi = JreRetainedLocalValue([((OrgApacheLuceneIndexFieldInfos_Builder *) nil_chk(self->fieldInfos_)) getOrAddWithNSString:name]);
    [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fi)) setIndexOptionsWithOrgApacheLuceneIndexIndexOptions:[((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk(fieldType)) indexOptions]];
    fp = create_OrgApacheLuceneIndexDefaultIndexingChain_PerField_initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_(self, fi, invert);
    JreStrongAssign(&fp->next_, IOSObjectArray_Get(nil_chk(self->fieldHash_), hashPos));
    IOSObjectArray_Set(self->fieldHash_, hashPos, fp);
    self->totalFieldCount_++;
    if (self->totalFieldCount_ >= JreIntDiv(self->fieldHash_->size_, 2)) {
      OrgApacheLuceneIndexDefaultIndexingChain_rehash(self);
    }
    if (self->totalFieldCount_ > ((IOSObjectArray *) nil_chk(self->fields_))->size_) {
      IOSObjectArray *newFields = [IOSObjectArray arrayWithLength:OrgApacheLuceneUtilArrayUtil_oversizeWithInt_withInt_(self->totalFieldCount_, JreLoadStatic(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF)) type:OrgApacheLuceneIndexDefaultIndexingChain_PerField_class_()];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->fields_, 0, newFields, 0, ((IOSObjectArray *) nil_chk(self->fields_))->size_);
      JreStrongAssign(&self->fields_, newFields);
    }
  }
  else if (invert && fp->invertState_ == nil) {
    [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fp->fieldInfo_)) setIndexOptionsWithOrgApacheLuceneIndexIndexOptions:[((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk(fieldType)) indexOptions]];
    [fp setInvertState];
  }
  return fp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDefaultIndexingChain)

@implementation OrgApacheLuceneIndexDefaultIndexingChain_PerField

- (instancetype)initWithOrgApacheLuceneIndexDefaultIndexingChain:(OrgApacheLuceneIndexDefaultIndexingChain *)outer$
                               withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo
                                                     withBoolean:(jboolean)invert {
  OrgApacheLuceneIndexDefaultIndexingChain_PerField_initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_(self, outer$, fieldInfo, invert);
  return self;
}

- (void)setInvertState {
  JreStrongAssignAndConsume(&invertState_, new_OrgApacheLuceneIndexFieldInvertState_initWithNSString_(((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_))->name_));
  JreStrongAssign(&termsHashPerField_, [((OrgApacheLuceneIndexTermsHash *) nil_chk(this$0_->termsHash_)) addFieldWithOrgApacheLuceneIndexFieldInvertState:invertState_ withOrgApacheLuceneIndexFieldInfo:fieldInfo_]);
  if ([fieldInfo_ omitsNorms] == false) {
    JreAssert(norms_ == nil, @"org/apache/lucene/index/DefaultIndexingChain.java:563 condition failed: assert norms == null;");
    JreStrongAssignAndConsume(&norms_, new_OrgApacheLuceneIndexNormValuesWriter_initPackagePrivateWithOrgApacheLuceneIndexFieldInfo_withOrgApacheLuceneUtilCounter_(fieldInfo_, ((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(this$0_->docState_))->docWriter_))->bytesUsed_));
  }
}

- (jint)compareToWithId:(OrgApacheLuceneIndexDefaultIndexingChain_PerField *)other {
  cast_chk(other, [OrgApacheLuceneIndexDefaultIndexingChain_PerField class]);
  return [((NSString *) nil_chk(((OrgApacheLuceneIndexFieldInfo *) nil_chk(self->fieldInfo_))->name_)) compareToWithId:((OrgApacheLuceneIndexDefaultIndexingChain_PerField *) nil_chk(other))->fieldInfo_->name_];
}

- (void)finish {
  if ([((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) omitsNorms] == false && ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->length_ != 0) {
    [((OrgApacheLuceneIndexNormValuesWriter *) nil_chk(norms_)) addValueWithInt:((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(this$0_->docState_))->docID_ withLong:[((OrgApacheLuceneSearchSimilaritiesSimilarity *) nil_chk(similarity_)) computeNormWithOrgApacheLuceneIndexFieldInvertState:invertState_]];
  }
  [((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(termsHashPerField_)) finish];
}

- (void)invertWithOrgApacheLuceneIndexIndexableField:(id<OrgApacheLuceneIndexIndexableField>)field
                                         withBoolean:(jboolean)first {
  if (first) {
    [((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_)) reset];
  }
  id<OrgApacheLuceneIndexIndexableFieldType> fieldType = JreRetainedLocalValue([((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) fieldType]);
  OrgApacheLuceneIndexIndexOptions *indexOptions = JreRetainedLocalValue([((id<OrgApacheLuceneIndexIndexableFieldType>) nil_chk(fieldType)) indexOptions]);
  [((OrgApacheLuceneIndexFieldInfo *) nil_chk(fieldInfo_)) setIndexOptionsWithOrgApacheLuceneIndexIndexOptions:indexOptions];
  if ([fieldType omitNorms]) {
    [fieldInfo_ setOmitsNorms];
  }
  jboolean analyzed = [fieldType tokenized] && ((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(this$0_->docState_))->analyzer_ != nil;
  jboolean checkOffsets = indexOptions == JreLoadEnum(OrgApacheLuceneIndexIndexOptions, DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);
  jboolean succeededInProcessingField = false;
  @try {
    OrgApacheLuceneAnalysisTokenStream *stream = JreStrongAssign(&tokenStream_, [field tokenStreamWithOrgApacheLuceneAnalysisAnalyzer:((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(this$0_->docState_))->analyzer_ withOrgApacheLuceneAnalysisTokenStream:tokenStream_]);
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      [stream reset];
      [((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_)) setAttributeSourceWithOrgApacheLuceneUtilAttributeSource:stream];
      [((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(termsHashPerField_)) startWithOrgApacheLuceneIndexIndexableField:field withBoolean:first];
      while ([stream incrementToken]) {
        jint posIncr = [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->posIncrAttribute_)) getPositionIncrement];
        ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->position_ += posIncr;
        if (invertState_->position_ < invertState_->lastPosition_) {
          if (posIncr == 0) {
            @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"first position increment must be > 0 (got 0) for field '", [field name], '\''));
          }
          else {
            @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$$C", @"position increments (and gaps) must be >= 0 (got ", posIncr, @") for field '", [field name], '\''));
          }
        }
        else if (invertState_->position_ > OrgApacheLuceneIndexIndexWriter_MAX_POSITION) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$$$I", @"position ", invertState_->position_, @" is too large for field '", [field name], @"': max allowed position is ", OrgApacheLuceneIndexIndexWriter_MAX_POSITION));
        }
        invertState_->lastPosition_ = invertState_->position_;
        if (posIncr == 0) {
          invertState_->numOverlap_++;
        }
        if (checkOffsets) {
          jint startOffset = invertState_->offset_ + [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(invertState_->offsetAttribute_)) startOffset];
          jint endOffset = ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->offset_ + [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(invertState_->offsetAttribute_)) endOffset];
          if (startOffset < ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->lastStartOffset_ || endOffset < startOffset) {
            @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$I$$C", @"startOffset must be non-negative, and endOffset must be >= startOffset, and offsets must not go backwards startOffset=", startOffset, @",endOffset=", endOffset, @",lastStartOffset=", invertState_->lastStartOffset_, @" for field '", [field name], '\''));
          }
          invertState_->lastStartOffset_ = startOffset;
        }
        invertState_->length_++;
        if (invertState_->length_ < 0) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"too many tokens in field '", [field name], '\''));
        }
        @try {
          [((OrgApacheLuceneIndexTermsHashPerField *) nil_chk(termsHashPerField_)) add];
        }
        @catch (OrgApacheLuceneUtilBytesRefHash_MaxBytesLengthExceededException *e) {
          IOSByteArray *prefix = [IOSByteArray arrayWithLength:30];
          OrgApacheLuceneUtilBytesRef *bigTerm = JreRetainedLocalValue([((id<OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute>) nil_chk(((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->termAttribute_)) getBytesRef]);
          JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(((OrgApacheLuceneUtilBytesRef *) nil_chk(bigTerm))->bytes_, bigTerm->offset_, prefix, 0, 30);
          NSString *msg = JreStrcat("$$$I$$$$", @"Document contains at least one immense term in field=\"", fieldInfo_->name_, @"\" (whose UTF8 encoding is longer than the max length ", OrgApacheLuceneIndexDocumentsWriterPerThread_MAX_TERM_LENGTH_UTF8, @"), all of which were skipped.  Please correct the analyzer to not produce such terms.  The prefix of the first immense term is: '", JavaUtilArrays_toStringWithByteArray_(prefix), @"...', original message: ", [e getMessage]);
          if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(this$0_->docState_->infoStream_)) isEnabledWithNSString:@"IW"]) {
            [((OrgApacheLuceneUtilInfoStream *) nil_chk(this$0_->docState_->infoStream_)) messageWithNSString:@"IW" withNSString:JreStrcat("$$", @"ERROR: ", msg)];
          }
          @throw create_JavaLangIllegalArgumentException_initWithNSString_withJavaLangThrowable_(msg, e);
        }
        @catch (JavaLangThrowable *th) {
          @throw nil_chk(OrgApacheLuceneIndexAbortingException_wrapWithJavaLangThrowable_(th));
        }
      }
      [stream end];
      ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->position_ += [((id<OrgApacheLuceneAnalysisTokenattributesPositionIncrementAttribute>) nil_chk(invertState_->posIncrAttribute_)) getPositionIncrement];
      ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->offset_ += [((id<OrgApacheLuceneAnalysisTokenattributesOffsetAttribute>) nil_chk(invertState_->offsetAttribute_)) endOffset];
      succeededInProcessingField = true;
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (stream != nil) {
        if (__primaryException1 != nil) {
          @try {
            [stream close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [stream close];
        }
      }
    }
  }
  @finally {
    if (!succeededInProcessingField && [((OrgApacheLuceneUtilInfoStream *) nil_chk(this$0_->docState_->infoStream_)) isEnabledWithNSString:@"DW"]) {
      [((OrgApacheLuceneUtilInfoStream *) nil_chk(this$0_->docState_->infoStream_)) messageWithNSString:@"DW" withNSString:JreStrcat("$$", @"An exception was thrown while processing field ", fieldInfo_->name_)];
    }
  }
  if (analyzed) {
    ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->position_ += [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(this$0_->docState_->analyzer_)) getPositionIncrementGapWithNSString:fieldInfo_->name_];
    ((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->offset_ += [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(this$0_->docState_->analyzer_)) getOffsetGapWithNSString:fieldInfo_->name_];
  }
  JreTimesAssignFloatF(&((OrgApacheLuceneIndexFieldInvertState *) nil_chk(invertState_))->boost_, [field boost]);
}

- (void)__javaClone:(OrgApacheLuceneIndexDefaultIndexingChain_PerField *)original {
  [super __javaClone:original];
  [this$0_ release];
}

- (void)dealloc {
  RELEASE_(fieldInfo_);
  RELEASE_(similarity_);
  RELEASE_(invertState_);
  RELEASE_(termsHashPerField_);
  RELEASE_(docValuesWriter_);
  RELEASE_(next_);
  RELEASE_(norms_);
  RELEASE_(tokenStream_);
  RELEASE_(indexOptions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDefaultIndexingChain:withOrgApacheLuceneIndexFieldInfo:withBoolean:);
  methods[1].selector = @selector(setInvertState);
  methods[2].selector = @selector(compareToWithId:);
  methods[3].selector = @selector(finish);
  methods[4].selector = @selector(invertWithOrgApacheLuceneIndexIndexableField:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexDefaultIndexingChain;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "fieldInfo_", "LOrgApacheLuceneIndexFieldInfo;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilaritiesSimilarity;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "invertState_", "LOrgApacheLuceneIndexFieldInvertState;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "termsHashPerField_", "LOrgApacheLuceneIndexTermsHashPerField;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docValuesWriter_", "LOrgApacheLuceneIndexDocValuesWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fieldGen_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "next_", "LOrgApacheLuceneIndexDefaultIndexingChain_PerField;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "norms_", "LOrgApacheLuceneIndexNormValuesWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tokenStream_", "LOrgApacheLuceneAnalysisTokenStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "indexOptions_", "LOrgApacheLuceneIndexIndexOptions;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDefaultIndexingChain;LOrgApacheLuceneIndexFieldInfo;Z", "compareTo", "LOrgApacheLuceneIndexDefaultIndexingChain_PerField;", "LJavaIoIOException;", "invert", "LOrgApacheLuceneIndexIndexableField;Z", "LJavaIoIOException;LOrgApacheLuceneIndexAbortingException;", "LOrgApacheLuceneIndexDefaultIndexingChain;", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/apache/lucene/index/DefaultIndexingChain$PerField;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDefaultIndexingChain_PerField = { "PerField", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x12, 5, 11, 7, -1, -1, 8, -1 };
  return &_OrgApacheLuceneIndexDefaultIndexingChain_PerField;
}

@end

void OrgApacheLuceneIndexDefaultIndexingChain_PerField_initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_(OrgApacheLuceneIndexDefaultIndexingChain_PerField *self, OrgApacheLuceneIndexDefaultIndexingChain *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jboolean invert) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->fieldGen_ = -1;
  JreStrongAssign(&self->fieldInfo_, fieldInfo);
  JreStrongAssign(&self->similarity_, ((OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *) nil_chk(outer$->docState_))->similarity_);
  if (invert) {
    [self setInvertState];
  }
}

OrgApacheLuceneIndexDefaultIndexingChain_PerField *new_OrgApacheLuceneIndexDefaultIndexingChain_PerField_initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_(OrgApacheLuceneIndexDefaultIndexingChain *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jboolean invert) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDefaultIndexingChain_PerField, initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_, outer$, fieldInfo, invert)
}

OrgApacheLuceneIndexDefaultIndexingChain_PerField *create_OrgApacheLuceneIndexDefaultIndexingChain_PerField_initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_(OrgApacheLuceneIndexDefaultIndexingChain *outer$, OrgApacheLuceneIndexFieldInfo *fieldInfo, jboolean invert) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDefaultIndexingChain_PerField, initWithOrgApacheLuceneIndexDefaultIndexingChain_withOrgApacheLuceneIndexFieldInfo_withBoolean_, outer$, fieldInfo, invert)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDefaultIndexingChain_PerField)
