//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java
//

#include "J2ObjC_source.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/IdentityHashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Queue.h"
#include "java/util/concurrent/atomic/AtomicBoolean.h"
#include "java/util/function/Consumer.h"
#include "org/apache/lucene/index/BufferedUpdatesStream.h"
#include "org/apache/lucene/index/DocumentsWriter.h"
#include "org/apache/lucene/index/DocumentsWriterDeleteQueue.h"
#include "org/apache/lucene/index/DocumentsWriterFlushControl.h"
#include "org/apache/lucene/index/DocumentsWriterPerThread.h"
#include "org/apache/lucene/index/DocumentsWriterPerThreadPool.h"
#include "org/apache/lucene/index/DocumentsWriterStallControl.h"
#include "org/apache/lucene/index/FlushPolicy.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/index/LiveIndexWriterConfig.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/index/DocumentsWriterFlushControl must not be compiled with ARC (-fobjc-arc)"
#if !__has_feature(objc_arc_weak)
#error "org/apache/lucene/index/DocumentsWriterFlushControl must be compiled with weak references support (-fobjc-weak)"
#endif
#endif

@interface OrgApacheLuceneIndexDocumentsWriterFlushControl () {
 @public
  jlong hardMaxBytesPerDWPT_;
  jlong activeBytes_;
  jlong flushBytes_;
  volatile_jint numPending_;
  jint numDocsSinceStalled_;
  jboolean fullFlush_;
  id<JavaUtilQueue> flushQueue_;
  id<JavaUtilQueue> blockedFlushes_;
  JavaUtilIdentityHashMap *flushingWriters_;
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool *perThreadPool_;
  OrgApacheLuceneIndexFlushPolicy *flushPolicy_;
  jboolean closed_;
  WEAK_ OrgApacheLuceneIndexDocumentsWriter *documentsWriter_;
  OrgApacheLuceneIndexLiveIndexWriterConfig *config_;
  OrgApacheLuceneIndexBufferedUpdatesStream *bufferedUpdatesStream_;
  OrgApacheLuceneUtilInfoStream *infoStream_;
  id<JavaUtilList> fullFlushBuffer_;
}

- (jlong)stallLimitBytes;

- (jboolean)assertMemory;

- (void)commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread;

- (jboolean)updatePeaksWithLong:(jlong)delta;

- (jboolean)assertNumDocsSinceStalledWithBoolean:(jboolean)stalled;

- (jboolean)updateStallState;

- (void)checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread;

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread;

- (id<JavaUtilIterator>)getPerThreadsIteratorWithInt:(jint)upto;

- (jboolean)assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)queue;

/*!
 @brief Prunes the blockedQueue by removing all DWPT that are associated with the given flush queue.
 */
- (void)pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)flushingQueue;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, flushQueue_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, blockedFlushes_, id<JavaUtilQueue>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, flushingWriters_, JavaUtilIdentityHashMap *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, perThreadPool_, OrgApacheLuceneIndexDocumentsWriterPerThreadPool *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, flushPolicy_, OrgApacheLuceneIndexFlushPolicy *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, config_, OrgApacheLuceneIndexLiveIndexWriterConfig *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, bufferedUpdatesStream_, OrgApacheLuceneIndexBufferedUpdatesStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, infoStream_, OrgApacheLuceneUtilInfoStream *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl, fullFlushBuffer_, id<JavaUtilList>)

__attribute__((unused)) static jlong OrgApacheLuceneIndexDocumentsWriterFlushControl_stallLimitBytes(OrgApacheLuceneIndexDocumentsWriterFlushControl *self);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(OrgApacheLuceneIndexDocumentsWriterFlushControl *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_updatePeaksWithLong_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jlong delta);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertNumDocsSinceStalledWithBoolean_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jboolean stalled);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(OrgApacheLuceneIndexDocumentsWriterFlushControl *self);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterPerThread *OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread);

__attribute__((unused)) static id<JavaUtilIterator> OrgApacheLuceneIndexDocumentsWriterFlushControl_getPerThreadsIteratorWithInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jint upto);

__attribute__((unused)) static jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *queue);

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *flushingQueue);

@interface OrgApacheLuceneIndexDocumentsWriterFlushControl_1 : NSObject < JavaUtilIterator > {
 @public
  OrgApacheLuceneIndexDocumentsWriterFlushControl *this$0_;
  jint val$upto_;
  jint i_;
}

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterFlushControl:(OrgApacheLuceneIndexDocumentsWriterFlushControl *)outer$
                                                                withInt:(jint)capture$0;

- (jboolean)hasNext;

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)next;

- (void)remove;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterFlushControl_1)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl_1 *self, OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterFlushControl_1 *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterFlushControl_1 *create_OrgApacheLuceneIndexDocumentsWriterFlushControl_1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0);

@interface OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush : NSObject {
 @public
  OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt_;
  jlong bytes_;
}

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dwpt
                                                            withLong:(jlong)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush, dwpt_, OrgApacheLuceneIndexDocumentsWriterPerThread *)

__attribute__((unused)) static void OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *self, OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes);

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *create_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush)

@implementation OrgApacheLuceneIndexDocumentsWriterFlushControl

- (instancetype)initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)documentsWriter
                            withOrgApacheLuceneIndexLiveIndexWriterConfig:(OrgApacheLuceneIndexLiveIndexWriterConfig *)config
                            withOrgApacheLuceneIndexBufferedUpdatesStream:(OrgApacheLuceneIndexBufferedUpdatesStream *)bufferedUpdatesStream {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_(self, documentsWriter, config, bufferedUpdatesStream);
  return self;
}

- (jlong)activeBytes {
  @synchronized(self) {
    return activeBytes_;
  }
}

- (jlong)flushBytes {
  @synchronized(self) {
    return flushBytes_;
  }
}

- (jlong)netBytes {
  @synchronized(self) {
    return flushBytes_ + activeBytes_;
  }
}

- (jlong)stallLimitBytes {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_stallLimitBytes(self);
}

- (jboolean)assertMemory {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self);
}

- (void)commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
}

- (jboolean)updatePeaksWithLong:(jlong)delta {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_updatePeaksWithLong_(self, delta);
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)doAfterDocumentWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread
                                                                                                                      withBoolean:(jboolean)isUpdate {
  @synchronized(self) {
    @try {
      OrgApacheLuceneIndexDocumentsWriterFlushControl_commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
      if (!JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->flushPending_)) {
        if (isUpdate) {
          [((OrgApacheLuceneIndexFlushPolicy *) nil_chk(flushPolicy_)) onUpdateWithOrgApacheLuceneIndexDocumentsWriterFlushControl:self withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
        }
        else {
          [((OrgApacheLuceneIndexFlushPolicy *) nil_chk(flushPolicy_)) onInsertWithOrgApacheLuceneIndexDocumentsWriterFlushControl:self withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
        }
        if (!JreLoadVolatileBoolean(&perThread->flushPending_) && perThread->bytesUsed_ > hardMaxBytesPerDWPT_) {
          [self setFlushPendingWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
        }
      }
      OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT;
      if (fullFlush_) {
        if (JreLoadVolatileBoolean(&perThread->flushPending_)) {
          OrgApacheLuceneIndexDocumentsWriterFlushControl_checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
          flushingDWPT = [self nextPendingFlush];
        }
        else {
          flushingDWPT = nil;
        }
      }
      else {
        flushingDWPT = [self tryCheckoutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
      }
      return JreRetainedLocalValue(flushingDWPT);
    }
    @finally {
      jboolean stalled = OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
      JreAssert(OrgApacheLuceneIndexDocumentsWriterFlushControl_assertNumDocsSinceStalledWithBoolean_(self, stalled) && OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:206 condition failed: assert assertNumDocsSinceStalled(stalled) && assertMemory();");
    }
  }
}

- (jboolean)assertNumDocsSinceStalledWithBoolean:(jboolean)stalled {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_assertNumDocsSinceStalledWithBoolean_(self, stalled);
}

- (void)doAfterFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dwpt {
  @synchronized(self) {
    JreAssert([((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) containsKeyWithId:dwpt], @"org/apache/lucene/index/DocumentsWriterFlushControl.java:227 condition failed: assert flushingWriters.containsKey(dwpt);");
    @try {
      JavaLangLong *bytes = JreRetainedLocalValue([flushingWriters_ removeWithId:dwpt]);
      flushBytes_ -= [((JavaLangLong *) nil_chk(bytes)) longLongValue];
      [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) recycleWithOrgApacheLuceneIndexDocumentsWriterPerThread:dwpt];
      JreAssert(OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:232 condition failed: assert assertMemory();");
    }
    @finally {
      @try {
        OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
      }
      @finally {
        [self java_notifyAll];
      }
    }
  }
}

- (jboolean)updateStallState {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
}

- (void)waitForFlush {
  @synchronized(self) {
    while ([((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) size] != 0) {
      @try {
        [self java_wait];
      }
      @catch (JavaLangInterruptedException *e) {
        @throw create_OrgApacheLuceneUtilThreadInterruptedException_initWithJavaLangInterruptedException_(e);
      }
    }
  }
}

- (void)setFlushPendingWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  @synchronized(self) {
    JreAssert(!JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->flushPending_), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:276 condition failed: assert !perThread.flushPending;");
    if ([((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(perThread->dwpt_)) getNumDocsInRAM] > 0) {
      JreAssignVolatileBoolean(&perThread->flushPending_, true);
      jlong bytes = perThread->bytesUsed_;
      flushBytes_ += bytes;
      activeBytes_ -= bytes;
      numPending_++;
      JreAssert(OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:283 condition failed: assert assertMemory();");
    }
  }
}

- (void)doOnAbortWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)state {
  @synchronized(self) {
    @try {
      if (JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(state))->flushPending_)) {
        flushBytes_ -= state->bytesUsed_;
      }
      else {
        activeBytes_ -= state->bytesUsed_;
      }
      JreAssert(OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(self), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:295 condition failed: assert assertMemory();");
      [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:state];
    }
    @finally {
      OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
    }
  }
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)tryCheckoutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  @synchronized(self) {
    return JreRetainedLocalValue(JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->flushPending_) ? OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread) : nil);
  }
}

- (void)checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
}

- (NSString *)description {
  return JreStrcat("$J$JC", @"DocumentsWriterFlushControl [activeBytes=", activeBytes_, @", flushBytes=", flushBytes_, ']');
}

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)nextPendingFlush {
  jint numPending;
  jboolean fullFlush;
  @synchronized(self) {
    OrgApacheLuceneIndexDocumentsWriterPerThread *poll;
    if ((poll = [((id<JavaUtilQueue>) nil_chk(flushQueue_)) poll]) != nil) {
      OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
      return JreRetainedLocalValue(poll);
    }
    fullFlush = self->fullFlush_;
    numPending = JreLoadVolatileInt(&self->numPending_);
  }
  if (numPending > 0 && !fullFlush) {
    jint limit = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getActiveThreadStateCount];
    for (jint i = 0; i < limit && numPending > 0; i++) {
      OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *next = [perThreadPool_ getThreadStateWithInt:i];
      if (JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(next))->flushPending_)) {
        OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt = [self tryCheckoutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:next];
        if (dwpt != nil) {
          return dwpt;
        }
      }
    }
  }
  return nil;
}

- (void)setClosed {
  @synchronized(self) {
    self->closed_ = true;
  }
}

- (id<JavaUtilIterator>)allActiveThreadStates {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_getPerThreadsIteratorWithInt_(self, [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getActiveThreadStateCount]);
}

- (id<JavaUtilIterator>)getPerThreadsIteratorWithInt:(jint)upto {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_getPerThreadsIteratorWithInt_(self, upto);
}

- (void)doOnDelete {
  @synchronized(self) {
    [((OrgApacheLuceneIndexFlushPolicy *) nil_chk(flushPolicy_)) onDeleteWithOrgApacheLuceneIndexDocumentsWriterFlushControl:self withOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:nil];
  }
}

- (jint)getNumGlobalTermDeletes {
  return [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_))) numGlobalTermDeletes] + [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) numTerms];
}

- (jlong)getDeleteBytesUsed {
  return [((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_))) ramBytesUsed] + [((OrgApacheLuceneIndexBufferedUpdatesStream *) nil_chk(bufferedUpdatesStream_)) ramBytesUsed];
}

- (jlong)ramBytesUsed {
  return [self getDeleteBytesUsed] + [self netBytes];
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (jint)numFlushingDWPT {
  @synchronized(self) {
    return [((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) size];
  }
}

- (jboolean)getAndResetApplyAllDeletes {
  return [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(flushDeletes_)) getAndSetWithBoolean:false];
}

- (void)setApplyAllDeletes {
  [((JavaUtilConcurrentAtomicAtomicBoolean *) nil_chk(flushDeletes_)) setWithBoolean:true];
}

- (jint)numActiveDWPT {
  return [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(self->perThreadPool_)) getActiveThreadStateCount];
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)obtainAndLock {
  OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getAndLockWithJavaLangThread:JavaLangThread_currentThread() withOrgApacheLuceneIndexDocumentsWriter:documentsWriter_];
  jboolean success = false;
  @try {
    if ([((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) isInitialized] && !JreObjectEqualsEquals(((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(perThread->dwpt_))->deleteQueue_, JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_))) {
      [self addFlushableStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
    }
    success = true;
    return perThread;
  }
  @finally {
    if (!success) {
      [perThreadPool_ release__WithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
    }
  }
}

- (void)markForFullFlush {
  OrgApacheLuceneIndexDocumentsWriterDeleteQueue *flushingQueue;
  @synchronized(self) {
    JreAssert(!fullFlush_, @"called DWFC#markForFullFlush() while full flush is still running");
    JreAssert([((id<JavaUtilList>) nil_chk(fullFlushBuffer_)) isEmpty], JreStrcat("$@", @"full flush buffer should be empty: ", fullFlushBuffer_));
    fullFlush_ = true;
    flushingQueue = JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_);
    OrgApacheLuceneIndexDocumentsWriterDeleteQueue *newQueue = create_OrgApacheLuceneIndexDocumentsWriterDeleteQueue_initPackagePrivateWithLong_(((OrgApacheLuceneIndexDocumentsWriterDeleteQueue *) nil_chk(flushingQueue))->generation_ + 1);
    JreVolatileStrongAssign(&documentsWriter_->deleteQueue_, newQueue);
  }
  jint limit = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) getActiveThreadStateCount];
  for (jint i = 0; i < limit; i++) {
    OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *next = [perThreadPool_ getThreadStateWithInt:i];
    [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(next)) lock];
    @try {
      if (![next isInitialized]) {
        continue;
      }
      JreAssert(JreObjectEqualsEquals(((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(next->dwpt_))->deleteQueue_, flushingQueue) || JreObjectEqualsEquals(next->dwpt_->deleteQueue_, JreLoadVolatileId(&documentsWriter_->deleteQueue_)), JreStrcat("$@$@$@$I", @" flushingQueue: ", flushingQueue, @" currentqueue: ", JreLoadVolatileId(&documentsWriter_->deleteQueue_), @" perThread queue: ", next->dwpt_->deleteQueue_, @" numDocsInRam: ", [next->dwpt_ getNumDocsInRAM]));
      if (!JreObjectEqualsEquals(((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(next->dwpt_))->deleteQueue_, flushingQueue)) {
        continue;
      }
      [self addFlushableStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:next];
    }
    @finally {
      [next unlock];
    }
  }
  @synchronized(self) {
    OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, flushingQueue);
    JreAssert([self assertBlockedFlushesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:JreLoadVolatileId(&documentsWriter_->deleteQueue_)], @"org/apache/lucene/index/DocumentsWriterFlushControl.java:528 condition failed: assert assertBlockedFlushes(documentsWriter.deleteQueue);");
    [((id<JavaUtilQueue>) nil_chk(flushQueue_)) addAllWithJavaUtilCollection:fullFlushBuffer_];
    [fullFlushBuffer_ clear];
    OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
  }
  JreAssert(OrgApacheLuceneIndexDocumentsWriterFlushControl_assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, JreLoadVolatileId(&documentsWriter_->deleteQueue_)), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:533 condition failed: assert assertActiveDeleteQueue(documentsWriter.deleteQueue);");
}

- (jboolean)assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)queue {
  return OrgApacheLuceneIndexDocumentsWriterFlushControl_assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, queue);
}

- (void)addFlushableStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)perThread {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWFC"]) {
    [infoStream_ messageWithNSString:@"DWFC" withNSString:JreStrcat("$@", @"addFlushableState ", ((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->dwpt_)];
  }
  OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt = ((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->dwpt_;
  JreAssert([perThread isHeldByCurrentThread], @"org/apache/lucene/index/DocumentsWriterFlushControl.java:557 condition failed: assert perThread.isHeldByCurrentThread();");
  JreAssert([perThread isInitialized], @"org/apache/lucene/index/DocumentsWriterFlushControl.java:558 condition failed: assert perThread.isInitialized();");
  JreAssert(fullFlush_, @"org/apache/lucene/index/DocumentsWriterFlushControl.java:559 condition failed: assert fullFlush;");
  JreAssert(!JreObjectEqualsEquals(((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(dwpt))->deleteQueue_, JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_)), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:560 condition failed: assert dwpt.deleteQueue != documentsWriter.deleteQueue;");
  if ([dwpt getNumDocsInRAM] > 0) {
    @synchronized(self) {
      if (!JreLoadVolatileBoolean(&perThread->flushPending_)) {
        [self setFlushPendingWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
      }
      OrgApacheLuceneIndexDocumentsWriterPerThread *flushingDWPT = OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(self, perThread);
      JreAssert(flushingDWPT != nil, @"DWPT must never be null here since we hold the lock and it holds documents");
      JreAssert(JreObjectEqualsEquals(dwpt, flushingDWPT), @"flushControl returned different DWPT");
      [((id<JavaUtilList>) nil_chk(fullFlushBuffer_)) addWithId:flushingDWPT];
    }
  }
  else {
    [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(perThreadPool_)) resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
  }
}

- (void)pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)flushingQueue {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, flushingQueue);
}

- (void)finishFullFlush {
  @synchronized(self) {
    JreAssert(fullFlush_, @"org/apache/lucene/index/DocumentsWriterFlushControl.java:595 condition failed: assert fullFlush;");
    JreAssert([((id<JavaUtilQueue>) nil_chk(flushQueue_)) isEmpty], @"org/apache/lucene/index/DocumentsWriterFlushControl.java:596 condition failed: assert flushQueue.isEmpty();");
    JreAssert([((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) isEmpty], @"org/apache/lucene/index/DocumentsWriterFlushControl.java:597 condition failed: assert flushingWriters.isEmpty();");
    @try {
      if (![((id<JavaUtilQueue>) nil_chk(blockedFlushes_)) isEmpty]) {
        JreAssert([self assertBlockedFlushesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:JreLoadVolatileId(&((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_))->deleteQueue_)], @"org/apache/lucene/index/DocumentsWriterFlushControl.java:600 condition failed: assert assertBlockedFlushes(documentsWriter.deleteQueue);");
        OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(self, JreLoadVolatileId(&documentsWriter_->deleteQueue_));
        JreAssert([blockedFlushes_ isEmpty], @"org/apache/lucene/index/DocumentsWriterFlushControl.java:602 condition failed: assert blockedFlushes.isEmpty();");
      }
    }
    @finally {
      fullFlush_ = false;
      OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
    }
  }
}

- (jboolean)assertBlockedFlushesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:(OrgApacheLuceneIndexDocumentsWriterDeleteQueue *)flushingQueue {
  for (OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush * __strong blockedFlush in nil_chk(blockedFlushes_)) {
    JreAssert(JreObjectEqualsEquals(((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *) nil_chk(blockedFlush))->dwpt_))->deleteQueue_, flushingQueue), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:612 condition failed: assert blockedFlush.dwpt.deleteQueue == flushingQueue;");
  }
  return true;
}

- (void)abortFullFlushes {
  @synchronized(self) {
    @try {
      [self abortPendingFlushes];
    }
    @finally {
      fullFlush_ = false;
    }
  }
}

- (void)abortPendingFlushes {
  @synchronized(self) {
    @try {
      for (OrgApacheLuceneIndexDocumentsWriterPerThread * __strong dwpt in nil_chk(flushQueue_)) {
        @try {
          [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_)) subtractFlushedNumDocsWithInt:[((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(dwpt)) getNumDocsInRAM]];
          [dwpt abort];
        }
        @catch (JavaLangThrowable *ex) {
        }
        @finally {
          [self doAfterFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:dwpt];
        }
      }
      for (OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush * __strong blockedFlush in nil_chk(blockedFlushes_)) {
        @try {
          [((JavaUtilIdentityHashMap *) nil_chk(flushingWriters_)) putWithId:((OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *) nil_chk(blockedFlush))->dwpt_ withId:JavaLangLong_valueOfWithLong_(blockedFlush->bytes_)];
          [((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter_)) subtractFlushedNumDocsWithInt:[((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(blockedFlush->dwpt_)) getNumDocsInRAM]];
          [blockedFlush->dwpt_ abort];
        }
        @catch (JavaLangThrowable *ex) {
        }
        @finally {
          [self doAfterFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:blockedFlush->dwpt_];
        }
      }
    }
    @finally {
      [flushQueue_ clear];
      [((id<JavaUtilQueue>) nil_chk(blockedFlushes_)) clear];
      OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
    }
  }
}

- (jboolean)isFullFlush {
  @synchronized(self) {
    return fullFlush_;
  }
}

- (jint)numQueuedFlushes {
  @synchronized(self) {
    return [((id<JavaUtilQueue>) nil_chk(flushQueue_)) size];
  }
}

- (jint)numBlockedFlushes {
  @synchronized(self) {
    return [((id<JavaUtilQueue>) nil_chk(blockedFlushes_)) size];
  }
}

- (void)waitIfStalled {
  if ([((OrgApacheLuceneUtilInfoStream *) nil_chk(infoStream_)) isEnabledWithNSString:@"DWFC"]) {
    [infoStream_ messageWithNSString:@"DWFC" withNSString:JreStrcat("$I$J$J$Z", @"waitIfStalled: numFlushesPending: ", [((id<JavaUtilQueue>) nil_chk(flushQueue_)) size], @" netBytes: ", [self netBytes], @" flushBytes: ", [self flushBytes], @" fullFlush: ", fullFlush_)];
  }
  [((OrgApacheLuceneIndexDocumentsWriterStallControl *) nil_chk(stallControl_)) waitIfStalled];
}

- (jboolean)anyStalledThreads {
  return [((OrgApacheLuceneIndexDocumentsWriterStallControl *) nil_chk(stallControl_)) anyStalledThreads];
}

- (OrgApacheLuceneUtilInfoStream *)getInfoStream {
  return infoStream_;
}

- (void)__javaClone:(OrgApacheLuceneIndexDocumentsWriterFlushControl *)original {
  [super __javaClone:original];
  [documentsWriter_ release];
}

- (void)dealloc {
  RELEASE_(flushDeletes_);
  RELEASE_(flushQueue_);
  RELEASE_(blockedFlushes_);
  RELEASE_(flushingWriters_);
  RELEASE_(stallControl_);
  RELEASE_(perThreadPool_);
  RELEASE_(flushPolicy_);
  RELEASE_(config_);
  RELEASE_(bufferedUpdatesStream_);
  RELEASE_(infoStream_);
  RELEASE_(fullFlushBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterPerThread;", 0x20, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x20, 12, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterPerThread;", 0x20, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterPerThread;", 0x2, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterPerThread;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x2, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 21, -1, -1 },
    { NULL, "I", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 26, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x20, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilInfoStream;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriter:withOrgApacheLuceneIndexLiveIndexWriterConfig:withOrgApacheLuceneIndexBufferedUpdatesStream:);
  methods[1].selector = @selector(activeBytes);
  methods[2].selector = @selector(flushBytes);
  methods[3].selector = @selector(netBytes);
  methods[4].selector = @selector(stallLimitBytes);
  methods[5].selector = @selector(assertMemory);
  methods[6].selector = @selector(commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:);
  methods[7].selector = @selector(updatePeaksWithLong:);
  methods[8].selector = @selector(doAfterDocumentWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:withBoolean:);
  methods[9].selector = @selector(assertNumDocsSinceStalledWithBoolean:);
  methods[10].selector = @selector(doAfterFlushWithOrgApacheLuceneIndexDocumentsWriterPerThread:);
  methods[11].selector = @selector(updateStallState);
  methods[12].selector = @selector(waitForFlush);
  methods[13].selector = @selector(setFlushPendingWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:);
  methods[14].selector = @selector(doOnAbortWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:);
  methods[15].selector = @selector(tryCheckoutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:);
  methods[16].selector = @selector(checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:);
  methods[17].selector = @selector(internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:);
  methods[18].selector = @selector(description);
  methods[19].selector = @selector(nextPendingFlush);
  methods[20].selector = @selector(setClosed);
  methods[21].selector = @selector(allActiveThreadStates);
  methods[22].selector = @selector(getPerThreadsIteratorWithInt:);
  methods[23].selector = @selector(doOnDelete);
  methods[24].selector = @selector(getNumGlobalTermDeletes);
  methods[25].selector = @selector(getDeleteBytesUsed);
  methods[26].selector = @selector(ramBytesUsed);
  methods[27].selector = @selector(getChildResources);
  methods[28].selector = @selector(numFlushingDWPT);
  methods[29].selector = @selector(getAndResetApplyAllDeletes);
  methods[30].selector = @selector(setApplyAllDeletes);
  methods[31].selector = @selector(numActiveDWPT);
  methods[32].selector = @selector(obtainAndLock);
  methods[33].selector = @selector(markForFullFlush);
  methods[34].selector = @selector(assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:);
  methods[35].selector = @selector(addFlushableStateWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:);
  methods[36].selector = @selector(pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:);
  methods[37].selector = @selector(finishFullFlush);
  methods[38].selector = @selector(assertBlockedFlushesWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue:);
  methods[39].selector = @selector(abortFullFlushes);
  methods[40].selector = @selector(abortPendingFlushes);
  methods[41].selector = @selector(isFullFlush);
  methods[42].selector = @selector(numQueuedFlushes);
  methods[43].selector = @selector(numBlockedFlushes);
  methods[44].selector = @selector(waitIfStalled);
  methods[45].selector = @selector(anyStalledThreads);
  methods[46].selector = @selector(getInfoStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hardMaxBytesPerDWPT_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "activeBytes_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flushBytes_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numPending_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "numDocsSinceStalled_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flushDeletes_", "LJavaUtilConcurrentAtomicAtomicBoolean;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "fullFlush_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "flushQueue_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 27, -1 },
    { "blockedFlushes_", "LJavaUtilQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 28, -1 },
    { "flushingWriters_", "LJavaUtilIdentityHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
    { "maxConfiguredRamBuffer_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "peakActiveBytes_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "peakFlushBytes_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "peakNetBytes_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "peakDelta_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "flushByRAMWasDisabled_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "stallControl_", "LOrgApacheLuceneIndexDocumentsWriterStallControl;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "perThreadPool_", "LOrgApacheLuceneIndexDocumentsWriterPerThreadPool;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "flushPolicy_", "LOrgApacheLuceneIndexFlushPolicy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "documentsWriter_", "LOrgApacheLuceneIndexDocumentsWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "config_", "LOrgApacheLuceneIndexLiveIndexWriterConfig;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "bufferedUpdatesStream_", "LOrgApacheLuceneIndexBufferedUpdatesStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "infoStream_", "LOrgApacheLuceneUtilInfoStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fullFlushBuffer_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 30, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocumentsWriter;LOrgApacheLuceneIndexLiveIndexWriterConfig;LOrgApacheLuceneIndexBufferedUpdatesStream;", "commitPerThreadBytes", "LOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState;", "updatePeaks", "J", "doAfterDocument", "LOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState;Z", "assertNumDocsSinceStalled", "Z", "doAfterFlush", "LOrgApacheLuceneIndexDocumentsWriterPerThread;", "setFlushPending", "doOnAbort", "tryCheckoutForFlush", "checkoutAndBlock", "internalTryCheckOutForFlush", "toString", "()Ljava/util/Iterator<Lorg/apache/lucene/index/DocumentsWriterPerThreadPool$ThreadState;>;", "getPerThreadsIterator", "I", "(I)Ljava/util/Iterator<Lorg/apache/lucene/index/DocumentsWriterPerThreadPool$ThreadState;>;", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "assertActiveDeleteQueue", "LOrgApacheLuceneIndexDocumentsWriterDeleteQueue;", "addFlushableState", "pruneBlockedQueue", "assertBlockedFlushes", "Ljava/util/Queue<Lorg/apache/lucene/index/DocumentsWriterPerThread;>;", "Ljava/util/Queue<Lorg/apache/lucene/index/DocumentsWriterFlushControl$BlockedFlush;>;", "Ljava/util/IdentityHashMap<Lorg/apache/lucene/index/DocumentsWriterPerThread;Ljava/lang/Long;>;", "Ljava/util/List<Lorg/apache/lucene/index/DocumentsWriterPerThread;>;", "LOrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterFlushControl = { "DocumentsWriterFlushControl", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x10, 47, 25, -1, 31, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriterFlushControl;
}

@end

void OrgApacheLuceneIndexDocumentsWriterFlushControl_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriter *documentsWriter, OrgApacheLuceneIndexLiveIndexWriterConfig *config, OrgApacheLuceneIndexBufferedUpdatesStream *bufferedUpdatesStream) {
  NSObject_init(self);
  self->activeBytes_ = 0;
  self->flushBytes_ = 0;
  JreAssignVolatileInt(&self->numPending_, 0);
  self->numDocsSinceStalled_ = 0;
  JreStrongAssignAndConsume(&self->flushDeletes_, new_JavaUtilConcurrentAtomicAtomicBoolean_initWithBoolean_(false));
  self->fullFlush_ = false;
  JreStrongAssignAndConsume(&self->flushQueue_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->blockedFlushes_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->flushingWriters_, new_JavaUtilIdentityHashMap_init());
  self->maxConfiguredRamBuffer_ = 0;
  self->peakActiveBytes_ = 0;
  self->peakFlushBytes_ = 0;
  self->peakNetBytes_ = 0;
  self->peakDelta_ = 0;
  self->closed_ = false;
  JreStrongAssignAndConsume(&self->fullFlushBuffer_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->infoStream_, [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(config)) getInfoStream]);
  JreStrongAssignAndConsume(&self->stallControl_, new_OrgApacheLuceneIndexDocumentsWriterStallControl_initPackagePrivateWithOrgApacheLuceneIndexLiveIndexWriterConfig_(config));
  JreStrongAssign(&self->perThreadPool_, ((OrgApacheLuceneIndexDocumentsWriter *) nil_chk(documentsWriter))->perThreadPool_);
  JreStrongAssign(&self->flushPolicy_, documentsWriter->flushPolicy_);
  JreStrongAssign(&self->config_, config);
  self->hardMaxBytesPerDWPT_ = [config getRAMPerThreadHardLimitMB] * 1024 * 1024;
  self->documentsWriter_ = documentsWriter;
  JreStrongAssign(&self->bufferedUpdatesStream_, bufferedUpdatesStream);
}

OrgApacheLuceneIndexDocumentsWriterFlushControl *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_(OrgApacheLuceneIndexDocumentsWriter *documentsWriter, OrgApacheLuceneIndexLiveIndexWriterConfig *config, OrgApacheLuceneIndexBufferedUpdatesStream *bufferedUpdatesStream) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriterFlushControl, initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_, documentsWriter, config, bufferedUpdatesStream)
}

OrgApacheLuceneIndexDocumentsWriterFlushControl *create_OrgApacheLuceneIndexDocumentsWriterFlushControl_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_(OrgApacheLuceneIndexDocumentsWriter *documentsWriter, OrgApacheLuceneIndexLiveIndexWriterConfig *config, OrgApacheLuceneIndexBufferedUpdatesStream *bufferedUpdatesStream) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriterFlushControl, initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriter_withOrgApacheLuceneIndexLiveIndexWriterConfig_withOrgApacheLuceneIndexBufferedUpdatesStream_, documentsWriter, config, bufferedUpdatesStream)
}

jlong OrgApacheLuceneIndexDocumentsWriterFlushControl_stallLimitBytes(OrgApacheLuceneIndexDocumentsWriterFlushControl *self) {
  jdouble maxRamMB = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getRAMBufferSizeMB];
  return maxRamMB != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH ? JreFpToLong((2 * (maxRamMB * 1024 * 1024))) : JavaLangLong_MAX_VALUE;
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertMemory(OrgApacheLuceneIndexDocumentsWriterFlushControl *self) {
  jdouble maxRamMB = [((OrgApacheLuceneIndexLiveIndexWriterConfig *) nil_chk(self->config_)) getRAMBufferSizeMB];
  if (maxRamMB != OrgApacheLuceneIndexIndexWriterConfig_DISABLE_AUTO_FLUSH && self->flushByRAMWasDisabled_ == false) {
    self->maxConfiguredRamBuffer_ = JavaLangMath_maxWithDouble_withDouble_(maxRamMB, self->maxConfiguredRamBuffer_);
    jlong ram = self->flushBytes_ + self->activeBytes_;
    jlong ramBufferBytes = JreFpToLong((self->maxConfiguredRamBuffer_ * 1024 * 1024));
    jlong expected = (2 * ramBufferBytes) + ((JreLoadVolatileInt(&self->numPending_) + [self numFlushingDWPT] + [self numBlockedFlushes]) * self->peakDelta_) + (self->numDocsSinceStalled_ * self->peakDelta_);
    if (self->peakDelta_ < (JreRShift64(ramBufferBytes, 1))) {
      JreAssert(ram <= expected, JreStrcat("$J$J$J$J$I$I$I$J$J$D", @"actual mem: ", ram, @" byte, expected mem: ", expected, @" byte, flush mem: ", self->flushBytes_, @", active mem: ", self->activeBytes_, @", pending DWPT: ", JreLoadVolatileInt(&self->numPending_), @", flushing DWPT: ", [self numFlushingDWPT], @", blocked DWPT: ", [self numBlockedFlushes], @", peakDelta mem: ", self->peakDelta_, @" bytes, ramBufferBytes=", ramBufferBytes, @", maxConfiguredRamBuffer=", self->maxConfiguredRamBuffer_));
    }
  }
  else {
    self->flushByRAMWasDisabled_ = true;
  }
  return true;
}

void OrgApacheLuceneIndexDocumentsWriterFlushControl_commitPerThreadBytesWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread) {
  jlong delta = [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->dwpt_)) bytesUsed] - perThread->bytesUsed_;
  perThread->bytesUsed_ += delta;
  if (JreLoadVolatileBoolean(&perThread->flushPending_)) {
    self->flushBytes_ += delta;
  }
  else {
    self->activeBytes_ += delta;
  }
  JreAssert(OrgApacheLuceneIndexDocumentsWriterFlushControl_updatePeaksWithLong_(self, delta), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:163 condition failed: assert updatePeaks(delta);");
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_updatePeaksWithLong_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jlong delta) {
  self->peakActiveBytes_ = JavaLangMath_maxWithLong_withLong_(self->peakActiveBytes_, self->activeBytes_);
  self->peakFlushBytes_ = JavaLangMath_maxWithLong_withLong_(self->peakFlushBytes_, self->flushBytes_);
  self->peakNetBytes_ = JavaLangMath_maxWithLong_withLong_(self->peakNetBytes_, [self netBytes]);
  self->peakDelta_ = JavaLangMath_maxWithLong_withLong_(self->peakDelta_, delta);
  return true;
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertNumDocsSinceStalledWithBoolean_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jboolean stalled) {
  if (stalled) {
    self->numDocsSinceStalled_++;
  }
  else {
    self->numDocsSinceStalled_ = 0;
  }
  return true;
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(OrgApacheLuceneIndexDocumentsWriterFlushControl *self) {
  JreAssert(JavaLangThread_holdsLockWithId_(self), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:244 condition failed: assert Thread.holdsLock(this);");
  jlong limit = OrgApacheLuceneIndexDocumentsWriterFlushControl_stallLimitBytes(self);
  jboolean stall = (self->activeBytes_ + self->flushBytes_) > limit && self->activeBytes_ < limit && !self->closed_;
  [((OrgApacheLuceneIndexDocumentsWriterStallControl *) nil_chk(self->stallControl_)) updateStalledWithBoolean:stall];
  return stall;
}

void OrgApacheLuceneIndexDocumentsWriterFlushControl_checkoutAndBlockWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread) {
  [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread)) lock];
  @try {
    JreAssert(JreLoadVolatileBoolean(&perThread->flushPending_), @"can not block non-pending threadstate");
    JreAssert(self->fullFlush_, @"can not block if fullFlush == false");
    OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt;
    jlong bytes = perThread->bytesUsed_;
    dwpt = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(self->perThreadPool_)) resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
    self->numPending_--;
    [((id<JavaUtilQueue>) nil_chk(self->blockedFlushes_)) addWithId:create_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(dwpt, bytes)];
  }
  @finally {
    [perThread unlock];
  }
}

OrgApacheLuceneIndexDocumentsWriterPerThread *OrgApacheLuceneIndexDocumentsWriterFlushControl_internalTryCheckOutForFlushWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *perThread) {
  JreAssert(JavaLangThread_holdsLockWithId_(self), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:324 condition failed: assert Thread.holdsLock(this);");
  JreAssert(JreLoadVolatileBoolean(&((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(perThread))->flushPending_), @"org/apache/lucene/index/DocumentsWriterFlushControl.java:325 condition failed: assert perThread.flushPending;");
  @try {
    if ([perThread tryLock]) {
      @try {
        if ([perThread isInitialized]) {
          JreAssert([perThread isHeldByCurrentThread], @"org/apache/lucene/index/DocumentsWriterFlushControl.java:331 condition failed: assert perThread.isHeldByCurrentThread();");
          OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt;
          jlong bytes = perThread->bytesUsed_;
          dwpt = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(self->perThreadPool_)) resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:perThread];
          JreAssert(![((JavaUtilIdentityHashMap *) nil_chk(self->flushingWriters_)) containsKeyWithId:dwpt], @"DWPT is already flushing");
          [self->flushingWriters_ putWithId:dwpt withId:JavaLangLong_valueOfWithLong_(bytes)];
          self->numPending_--;
          return dwpt;
        }
      }
      @finally {
        [perThread unlock];
      }
    }
    return nil;
  }
  @finally {
    OrgApacheLuceneIndexDocumentsWriterFlushControl_updateStallState(self);
  }
}

id<JavaUtilIterator> OrgApacheLuceneIndexDocumentsWriterFlushControl_getPerThreadsIteratorWithInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, jint upto) {
  return create_OrgApacheLuceneIndexDocumentsWriterFlushControl_1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(self, upto);
}

jboolean OrgApacheLuceneIndexDocumentsWriterFlushControl_assertActiveDeleteQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *queue) {
  jint limit = [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(self->perThreadPool_)) getActiveThreadStateCount];
  for (jint i = 0; i < limit; i++) {
    OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *next = [self->perThreadPool_ getThreadStateWithInt:i];
    [((OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *) nil_chk(next)) lock];
    @try {
      JreAssert(![next isInitialized] || JreObjectEqualsEquals(((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(next->dwpt_))->deleteQueue_, queue), JreStrcat("$Z$I", @"isInitialized: ", [next isInitialized], @" numDocs: ", ([next isInitialized] ? [((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(next->dwpt_)) getNumDocsInRAM] : 0)));
    }
    @finally {
      [next unlock];
    }
  }
  return true;
}

void OrgApacheLuceneIndexDocumentsWriterFlushControl_pruneBlockedQueueWithOrgApacheLuceneIndexDocumentsWriterDeleteQueue_(OrgApacheLuceneIndexDocumentsWriterFlushControl *self, OrgApacheLuceneIndexDocumentsWriterDeleteQueue *flushingQueue) {
  id<JavaUtilIterator> iterator = JreRetainedLocalValue([((id<JavaUtilQueue>) nil_chk(self->blockedFlushes_)) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *blockedFlush = JreRetainedLocalValue([iterator next]);
    if (JreObjectEqualsEquals(((OrgApacheLuceneIndexDocumentsWriterPerThread *) nil_chk(((OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *) nil_chk(blockedFlush))->dwpt_))->deleteQueue_, flushingQueue)) {
      [iterator remove];
      JreAssert(![((JavaUtilIdentityHashMap *) nil_chk(self->flushingWriters_)) containsKeyWithId:blockedFlush->dwpt_], @"DWPT is already flushing");
      [self->flushingWriters_ putWithId:blockedFlush->dwpt_ withId:JavaLangLong_valueOfWithLong_(blockedFlush->bytes_)];
      [((id<JavaUtilQueue>) nil_chk(self->flushQueue_)) addWithId:blockedFlush->dwpt_];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterFlushControl)

@implementation OrgApacheLuceneIndexDocumentsWriterFlushControl_1

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterFlushControl:(OrgApacheLuceneIndexDocumentsWriterFlushControl *)outer$
                                                                withInt:(jint)capture$0 {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(self, outer$, capture$0);
  return self;
}

- (jboolean)hasNext {
  return i_ < val$upto_;
}

- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)next {
  return JreRetainedLocalValue([((OrgApacheLuceneIndexDocumentsWriterPerThreadPool *) nil_chk(this$0_->perThreadPool_)) getThreadStateWithInt:i_++]);
}

- (void)remove {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"remove() not supported.");
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDocumentsWriterFlushControl:withInt:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneIndexDocumentsWriterFlushControl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$upto_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "i_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocumentsWriterFlushControl;I", "LOrgApacheLuceneIndexDocumentsWriterFlushControl;", "getPerThreadsIteratorWithInt:", "Ljava/lang/Object;Ljava/util/Iterator<Lorg/apache/lucene/index/DocumentsWriterPerThreadPool$ThreadState;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterFlushControl_1 = { "", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0x8010, 4, 3, 1, -1, 2, 3, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriterFlushControl_1;
}

@end

void OrgApacheLuceneIndexDocumentsWriterFlushControl_1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl_1 *self, OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$upto_ = capture$0;
  NSObject_init(self);
  self->i_ = 0;
}

OrgApacheLuceneIndexDocumentsWriterFlushControl_1 *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriterFlushControl_1, initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_, outer$, capture$0)
}

OrgApacheLuceneIndexDocumentsWriterFlushControl_1 *create_OrgApacheLuceneIndexDocumentsWriterFlushControl_1_initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_(OrgApacheLuceneIndexDocumentsWriterFlushControl *outer$, jint capture$0) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriterFlushControl_1, initWithOrgApacheLuceneIndexDocumentsWriterFlushControl_withInt_, outer$, capture$0)
}

@implementation OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush

- (instancetype)initWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dwpt
                                                            withLong:(jlong)bytes {
  OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(self, dwpt, bytes);
  return self;
}

- (void)dealloc {
  RELEASE_(dwpt_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneIndexDocumentsWriterPerThread:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dwpt_", "LOrgApacheLuceneIndexDocumentsWriterPerThread;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "bytes_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneIndexDocumentsWriterPerThread;J", "LOrgApacheLuceneIndexDocumentsWriterFlushControl;" };
  static const J2ObjcClassInfo _OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush = { "BlockedFlush", "org.apache.lucene.index", ptrTable, methods, fields, 7, 0xa, 1, 2, 1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush;
}

@end

void OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *self, OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes) {
  NSObject_init(self);
  JreStrongAssign(&self->dwpt_, dwpt);
  self->bytes_ = bytes;
}

OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *new_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush, initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_, dwpt, bytes)
}

OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush *create_OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_(OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt, jlong bytes) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush, initWithOrgApacheLuceneIndexDocumentsWriterPerThread_withLong_, dwpt, bytes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneIndexDocumentsWriterFlushControl_BlockedFlush)
