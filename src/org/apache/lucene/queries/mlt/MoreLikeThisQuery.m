//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Float.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThis.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThisQuery.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/Query.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queries/mlt/MoreLikeThisQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueriesMltMoreLikeThisQuery () {
 @public
  NSString *likeText_;
  IOSObjectArray *moreLikeFields_;
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  NSString *fieldName_;
  jfloat percentTermsToMatch_;
  jint minTermFrequency_;
  jint maxQueryTerms_;
  id<JavaUtilSet> stopWords_;
  jint minDocFreq_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThisQuery, likeText_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThisQuery, moreLikeFields_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThisQuery, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThisQuery, fieldName_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThisQuery, stopWords_, id<JavaUtilSet>)

@implementation OrgApacheLuceneQueriesMltMoreLikeThisQuery

- (instancetype)initWithNSString:(NSString *)likeText
               withNSStringArray:(IOSObjectArray *)moreLikeFields
withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                    withNSString:(NSString *)fieldName {
  OrgApacheLuceneQueriesMltMoreLikeThisQuery_initWithNSString_withNSStringArray_withOrgApacheLuceneAnalysisAnalyzer_withNSString_(self, likeText, moreLikeFields, analyzer, fieldName);
  return self;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  OrgApacheLuceneQueriesMltMoreLikeThis *mlt = create_OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_(reader);
  [mlt setFieldNamesWithNSStringArray:moreLikeFields_];
  [mlt setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:analyzer_];
  [mlt setMinTermFreqWithInt:minTermFrequency_];
  if (minDocFreq_ >= 0) {
    [mlt setMinDocFreqWithInt:minDocFreq_];
  }
  [mlt setMaxQueryTermsWithInt:maxQueryTerms_];
  [mlt setStopWordsWithJavaUtilSet:stopWords_];
  OrgApacheLuceneSearchBooleanQuery *bq = (OrgApacheLuceneSearchBooleanQuery *) cast_chk([mlt likeWithNSString:fieldName_ withJavaIoReaderArray:[IOSObjectArray arrayWithObjects:(id[]){ create_JavaIoStringReader_initWithNSString_(likeText_) } count:1 type:JavaIoReader_class_()]], [OrgApacheLuceneSearchBooleanQuery class]);
  OrgApacheLuceneSearchBooleanQuery_Builder *newBq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [newBq setDisableCoordWithBoolean:[((OrgApacheLuceneSearchBooleanQuery *) nil_chk(bq)) isCoordDisabled]];
  for (OrgApacheLuceneSearchBooleanClause * __strong clause in bq) {
    [newBq addWithOrgApacheLuceneSearchBooleanClause:clause];
  }
  [newBq setMinimumNumberShouldMatchWithInt:JreFpToInt(([((id<JavaUtilList>) nil_chk([bq clauses])) size] * percentTermsToMatch_))];
  OrgApacheLuceneSearchQuery *rewritten = JreRetainedLocalValue([newBq build]);
  [((OrgApacheLuceneSearchQuery *) nil_chk(rewritten)) setBoostWithFloat:[bq getBoost]];
  return rewritten;
}

- (NSString *)toStringWithNSString:(NSString *)field {
  return JreStrcat("$$", @"like:", likeText_);
}

- (jfloat)getPercentTermsToMatch {
  return percentTermsToMatch_;
}

- (void)setPercentTermsToMatchWithFloat:(jfloat)percentTermsToMatch {
  self->percentTermsToMatch_ = percentTermsToMatch;
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  return analyzer_;
}

- (void)setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  JreStrongAssign(&self->analyzer_, analyzer);
}

- (NSString *)getLikeText {
  return likeText_;
}

- (void)setLikeTextWithNSString:(NSString *)likeText {
  JreStrongAssign(&self->likeText_, likeText);
}

- (jint)getMaxQueryTerms {
  return maxQueryTerms_;
}

- (void)setMaxQueryTermsWithInt:(jint)maxQueryTerms {
  self->maxQueryTerms_ = maxQueryTerms;
}

- (jint)getMinTermFrequency {
  return minTermFrequency_;
}

- (void)setMinTermFrequencyWithInt:(jint)minTermFrequency {
  self->minTermFrequency_ = minTermFrequency;
}

- (IOSObjectArray *)getMoreLikeFields {
  return moreLikeFields_;
}

- (void)setMoreLikeFieldsWithNSStringArray:(IOSObjectArray *)moreLikeFields {
  JreStrongAssign(&self->moreLikeFields_, moreLikeFields);
}

- (id<JavaUtilSet>)getStopWords {
  return stopWords_;
}

- (void)setStopWordsWithJavaUtilSet:(id<JavaUtilSet>)stopWords {
  JreStrongAssign(&self->stopWords_, stopWords);
}

- (jint)getMinDocFreq {
  return minDocFreq_;
}

- (void)setMinDocFreqWithInt:(jint)minDocFreq {
  self->minDocFreq_ = minDocFreq;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = ((jint) [super hash]);
  result = prime * result + ((analyzer_ == nil) ? 0 : ((jint) [((OrgApacheLuceneAnalysisAnalyzer *) nil_chk(analyzer_)) hash]));
  result = prime * result + ((fieldName_ == nil) ? 0 : ((jint) [((NSString *) nil_chk(fieldName_)) hash]));
  result = prime * result + ((likeText_ == nil) ? 0 : ((jint) [((NSString *) nil_chk(likeText_)) hash]));
  result = prime * result + maxQueryTerms_;
  result = prime * result + minDocFreq_;
  result = prime * result + minTermFrequency_;
  result = prime * result + JavaUtilArrays_hashCodeWithNSObjectArray_(moreLikeFields_);
  result = prime * result + JavaLangFloat_floatToIntBitsWithFloat_(percentTermsToMatch_);
  result = prime * result + ((stopWords_ == nil) ? 0 : ((jint) [((id<JavaUtilSet>) nil_chk(stopWords_)) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (![super isEqual:obj]) return false;
  if (!JreObjectEqualsEquals([self java_getClass], [nil_chk(obj) java_getClass])) return false;
  OrgApacheLuceneQueriesMltMoreLikeThisQuery *other = (OrgApacheLuceneQueriesMltMoreLikeThisQuery *) cast_chk(obj, [OrgApacheLuceneQueriesMltMoreLikeThisQuery class]);
  if (analyzer_ == nil) {
    if (other->analyzer_ != nil) return false;
  }
  else if (![analyzer_ isEqual:other->analyzer_]) return false;
  if (fieldName_ == nil) {
    if (other->fieldName_ != nil) return false;
  }
  else if (![fieldName_ isEqual:other->fieldName_]) return false;
  if (likeText_ == nil) {
    if (other->likeText_ != nil) return false;
  }
  else if (![likeText_ isEqual:other->likeText_]) return false;
  if (maxQueryTerms_ != other->maxQueryTerms_) return false;
  if (minDocFreq_ != other->minDocFreq_) return false;
  if (minTermFrequency_ != other->minTermFrequency_) return false;
  if (!JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(moreLikeFields_, other->moreLikeFields_)) return false;
  if (JavaLangFloat_floatToIntBitsWithFloat_(percentTermsToMatch_) != JavaLangFloat_floatToIntBitsWithFloat_(other->percentTermsToMatch_)) return false;
  if (stopWords_ == nil) {
    if (other->stopWords_ != nil) return false;
  }
  else if (![stopWords_ isEqual:other->stopWords_]) return false;
  return true;
}

- (void)dealloc {
  RELEASE_(likeText_);
  RELEASE_(moreLikeFields_);
  RELEASE_(analyzer_);
  RELEASE_(fieldName_);
  RELEASE_(stopWords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, 19, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 21, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 23, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSStringArray:withOrgApacheLuceneAnalysisAnalyzer:withNSString:);
  methods[1].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[2].selector = @selector(toStringWithNSString:);
  methods[3].selector = @selector(getPercentTermsToMatch);
  methods[4].selector = @selector(setPercentTermsToMatchWithFloat:);
  methods[5].selector = @selector(getAnalyzer);
  methods[6].selector = @selector(setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:);
  methods[7].selector = @selector(getLikeText);
  methods[8].selector = @selector(setLikeTextWithNSString:);
  methods[9].selector = @selector(getMaxQueryTerms);
  methods[10].selector = @selector(setMaxQueryTermsWithInt:);
  methods[11].selector = @selector(getMinTermFrequency);
  methods[12].selector = @selector(setMinTermFrequencyWithInt:);
  methods[13].selector = @selector(getMoreLikeFields);
  methods[14].selector = @selector(setMoreLikeFieldsWithNSStringArray:);
  methods[15].selector = @selector(getStopWords);
  methods[16].selector = @selector(setStopWordsWithJavaUtilSet:);
  methods[17].selector = @selector(getMinDocFreq);
  methods[18].selector = @selector(setMinDocFreqWithInt:);
  methods[19].selector = @selector(hash);
  methods[20].selector = @selector(isEqual:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "likeText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "moreLikeFields_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "percentTermsToMatch_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minTermFrequency_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxQueryTerms_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stopWords_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "minDocFreq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LNSString;LOrgApacheLuceneAnalysisAnalyzer;LNSString;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "toString", "LNSString;", "setPercentTermsToMatch", "F", "setAnalyzer", "LOrgApacheLuceneAnalysisAnalyzer;", "setLikeText", "setMaxQueryTerms", "I", "setMinTermFrequency", "setMoreLikeFields", "[LNSString;", "()Ljava/util/Set<*>;", "setStopWords", "LJavaUtilSet;", "(Ljava/util/Set<*>;)V", "setMinDocFreq", "hashCode", "equals", "LNSObject;", "Ljava/util/Set<*>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesMltMoreLikeThisQuery = { "MoreLikeThisQuery", "org.apache.lucene.queries.mlt", ptrTable, methods, fields, 7, 0x1, 21, 9, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueriesMltMoreLikeThisQuery;
}

@end

void OrgApacheLuceneQueriesMltMoreLikeThisQuery_initWithNSString_withNSStringArray_withOrgApacheLuceneAnalysisAnalyzer_withNSString_(OrgApacheLuceneQueriesMltMoreLikeThisQuery *self, NSString *likeText, IOSObjectArray *moreLikeFields, OrgApacheLuceneAnalysisAnalyzer *analyzer, NSString *fieldName) {
  OrgApacheLuceneSearchQuery_init(self);
  self->percentTermsToMatch_ = 0.3f;
  self->minTermFrequency_ = 1;
  self->maxQueryTerms_ = 5;
  JreStrongAssign(&self->stopWords_, nil);
  self->minDocFreq_ = -1;
  JreStrongAssign(&self->likeText_, likeText);
  JreStrongAssign(&self->moreLikeFields_, moreLikeFields);
  JreStrongAssign(&self->analyzer_, analyzer);
  JreStrongAssign(&self->fieldName_, fieldName);
}

OrgApacheLuceneQueriesMltMoreLikeThisQuery *new_OrgApacheLuceneQueriesMltMoreLikeThisQuery_initWithNSString_withNSStringArray_withOrgApacheLuceneAnalysisAnalyzer_withNSString_(NSString *likeText, IOSObjectArray *moreLikeFields, OrgApacheLuceneAnalysisAnalyzer *analyzer, NSString *fieldName) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesMltMoreLikeThisQuery, initWithNSString_withNSStringArray_withOrgApacheLuceneAnalysisAnalyzer_withNSString_, likeText, moreLikeFields, analyzer, fieldName)
}

OrgApacheLuceneQueriesMltMoreLikeThisQuery *create_OrgApacheLuceneQueriesMltMoreLikeThisQuery_initWithNSString_withNSStringArray_withOrgApacheLuceneAnalysisAnalyzer_withNSString_(NSString *likeText, IOSObjectArray *moreLikeFields, OrgApacheLuceneAnalysisAnalyzer *analyzer, NSString *fieldName) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesMltMoreLikeThisQuery, initWithNSString_withNSStringArray_withOrgApacheLuceneAnalysisAnalyzer_withNSString_, likeText, moreLikeFields, analyzer, fieldName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueriesMltMoreLikeThisQuery)
