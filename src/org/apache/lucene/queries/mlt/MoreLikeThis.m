//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/index/MultiFields.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThis.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/similarities/DefaultSimilarity.h"
#include "org/apache/lucene/search/similarities/TFIDFSimilarity.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/CharsRefBuilder.h"
#include "org/apache/lucene/util/PriorityQueue.h"

@class OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm;

#if __has_feature(objc_arc)
#error "org/apache/lucene/queries/mlt/MoreLikeThis must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneQueriesMltMoreLikeThis () {
 @public
  /*!
   @brief Current set of stop words.
   */
  id<JavaUtilSet> stopWords_;
  /*!
   @brief Analyzer that will be used to parse the doc.
   */
  OrgApacheLuceneAnalysisAnalyzer *analyzer_;
  /*!
   @brief Ignore words less frequent that this.
   */
  jint minTermFreq_;
  /*!
   @brief Ignore words which do not occur in at least this many docs.
   */
  jint minDocFreq_;
  /*!
   @brief Ignore words which occur in more than this many docs.
   */
  jint maxDocFreq_;
  /*!
   @brief Should we apply a boost to the Query based on the scores?
   */
  jboolean boost_;
  /*!
   @brief Field name we'll analyze.
   */
  IOSObjectArray *fieldNames_;
  /*!
   @brief The maximum number of tokens to parse in each example doc field that is not stored with TermVector support
   */
  jint maxNumTokensParsed_;
  /*!
   @brief Ignore words if less than this len.
   */
  jint minWordLen_;
  /*!
   @brief Ignore words if greater than this len.
   */
  jint maxWordLen_;
  /*!
   @brief Don't return a query longer than this.
   */
  jint maxQueryTerms_;
  /*!
   @brief For idf() calculations.
   */
  OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity *similarity_;
  /*!
   @brief IndexReader to use
   */
  OrgApacheLuceneIndexIndexReader *ir_;
  /*!
   @brief Boost factor to use when boosting the terms
   */
  jfloat boostFactor_;
}

/*!
 @brief Create the More like query from a PriorityQueue
 */
- (OrgApacheLuceneSearchQuery *)createQueryWithOrgApacheLuceneUtilPriorityQueue:(OrgApacheLuceneUtilPriorityQueue *)q;

/*!
 @brief Create a PriorityQueue from a word-&gt;tf map.
 @param words a map of words keyed on the word(String) with Int objects as the values.
 */
- (OrgApacheLuceneUtilPriorityQueue *)createQueueWithJavaUtilMap:(id<JavaUtilMap>)words;

/*!
 @brief Find words for a more-like-this query former.
 @param docNum the id of the lucene document from which to find terms
 */
- (OrgApacheLuceneUtilPriorityQueue *)retrieveTermsWithInt:(jint)docNum;

- (OrgApacheLuceneUtilPriorityQueue *)retrieveTermsWithJavaUtilMap:(id<JavaUtilMap>)fields;

/*!
 @brief Adds terms and frequencies found in vector into the Map termFreqMap
 @param termFreqMap a Map of terms and their frequencies
 @param vector List of terms and their frequencies for a doc/field
 */
- (void)addTermFrequenciesWithJavaUtilMap:(id<JavaUtilMap>)termFreqMap
            withOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)vector;

/*!
 @brief Adds term frequencies found by tokenizing text from reader into the Map words
 @param r a source of text to be tokenized
 @param termFreqMap a Map of terms and their frequencies
 @param fieldName Used by analyzer for any special per-field analysis
 */
- (void)addTermFrequenciesWithJavaIoReader:(JavaIoReader *)r
                           withJavaUtilMap:(id<JavaUtilMap>)termFreqMap
                              withNSString:(NSString *)fieldName;

/*!
 @brief determines if the passed term is likely to be of interest in "more like" comparisons
 @param term The word being considered
 @return true if should be ignored, false if should be used in further analysis
 */
- (jboolean)isNoiseWordWithNSString:(NSString *)term;

/*!
 @brief Find words for a more-like-this query former.
 The result is a priority queue of arrays with one entry for <b>every word</b> in the document.
  Each array has 6 elements.
  The elements are: 
 <ol>
  <li> The word (String) 
 <li> The top field that this word comes from (String) 
 <li> The score for this word (Float) 
 <li> The IDF value (Float) 
 <li> The frequency of this word in the index (Integer) 
 <li> The frequency of this word in the source document (Integer) 
 </ol>
  This is a somewhat "advanced" routine, and in general only the 1st entry in the array is of interest.
  This method is exposed so that you can identify the "interesting words" in a document.
  For an easier method to call see <code>retrieveInterestingTerms()</code>.
 @param r the reader that has the content of the document
 @param fieldName field passed to the analyzer to use when analyzing the content
 @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first
 - seealso: #retrieveInterestingTerms
 */
- (OrgApacheLuceneUtilPriorityQueue *)retrieveTermsWithJavaIoReader:(JavaIoReader *)r
                                                       withNSString:(NSString *)fieldName;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThis, stopWords_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThis, analyzer_, OrgApacheLuceneAnalysisAnalyzer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThis, fieldNames_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThis, similarity_, OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThis, ir_, OrgApacheLuceneIndexIndexReader *)

__attribute__((unused)) static OrgApacheLuceneSearchQuery *OrgApacheLuceneQueriesMltMoreLikeThis_createQueryWithOrgApacheLuceneUtilPriorityQueue_(OrgApacheLuceneQueriesMltMoreLikeThis *self, OrgApacheLuceneUtilPriorityQueue *q);

__attribute__((unused)) static OrgApacheLuceneUtilPriorityQueue *OrgApacheLuceneQueriesMltMoreLikeThis_createQueueWithJavaUtilMap_(OrgApacheLuceneQueriesMltMoreLikeThis *self, id<JavaUtilMap> words);

__attribute__((unused)) static OrgApacheLuceneUtilPriorityQueue *OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithInt_(OrgApacheLuceneQueriesMltMoreLikeThis *self, jint docNum);

__attribute__((unused)) static OrgApacheLuceneUtilPriorityQueue *OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithJavaUtilMap_(OrgApacheLuceneQueriesMltMoreLikeThis *self, id<JavaUtilMap> fields);

__attribute__((unused)) static void OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaUtilMap_withOrgApacheLuceneIndexTerms_(OrgApacheLuceneQueriesMltMoreLikeThis *self, id<JavaUtilMap> termFreqMap, OrgApacheLuceneIndexTerms *vector);

__attribute__((unused)) static void OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaIoReader_withJavaUtilMap_withNSString_(OrgApacheLuceneQueriesMltMoreLikeThis *self, JavaIoReader *r, id<JavaUtilMap> termFreqMap, NSString *fieldName);

__attribute__((unused)) static jboolean OrgApacheLuceneQueriesMltMoreLikeThis_isNoiseWordWithNSString_(OrgApacheLuceneQueriesMltMoreLikeThis *self, NSString *term);

__attribute__((unused)) static OrgApacheLuceneUtilPriorityQueue *OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithJavaIoReader_withNSString_(OrgApacheLuceneQueriesMltMoreLikeThis *self, JavaIoReader *r, NSString *fieldName);

/*!
 @brief PriorityQueue that orders words by score.
 */
@interface OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ : OrgApacheLuceneUtilPriorityQueue

- (instancetype)initWithInt:(jint)maxSize;

- (jboolean)lessThanWithId:(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)a
                    withId:(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)b;

- (OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)pop;

- (OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)top;

- (OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)insertWithOverflowWithId:(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)arg0;

- (OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)addWithId:(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)arg0;

- (OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)getSentinelObject;

- (OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)updateTopWithId:(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)arg0;

- (OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)updateTop;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ)

__attribute__((unused)) static void OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ_initWithInt_(OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ *self, jint maxSize);

__attribute__((unused)) static OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ *new_OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ_initWithInt_(jint maxSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ *create_OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ_initWithInt_(jint maxSize);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ)

@interface OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm : NSObject {
 @public
  NSString *word_;
  NSString *topField_;
  jfloat score_;
  jfloat idf_;
  jint docFreq_;
  jint tf_;
}

- (instancetype)initWithNSString:(NSString *)word
                    withNSString:(NSString *)topField
                       withFloat:(jfloat)score
                       withFloat:(jfloat)idf
                         withInt:(jint)docFreq
                         withInt:(jint)tf;

- (void)updateWithNSString:(NSString *)word
              withNSString:(NSString *)topField
                 withFloat:(jfloat)score
                 withFloat:(jfloat)idf
                   withInt:(jint)docFreq
                   withInt:(jint)tf;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm, word_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm, topField_, NSString *)

__attribute__((unused)) static void OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm_initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *self, NSString *word, NSString *topField, jfloat score, jfloat idf, jint docFreq, jint tf);

__attribute__((unused)) static OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *new_OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm_initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_(NSString *word, NSString *topField, jfloat score, jfloat idf, jint docFreq, jint tf) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *create_OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm_initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_(NSString *word, NSString *topField, jfloat score, jfloat idf, jint docFreq, jint tf);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm)

/*!
 @brief Use for frequencies and to avoid renewing Integers.
 */
@interface OrgApacheLuceneQueriesMltMoreLikeThis_Int : NSObject {
 @public
  jint x_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesMltMoreLikeThis_Int)

__attribute__((unused)) static void OrgApacheLuceneQueriesMltMoreLikeThis_Int_init(OrgApacheLuceneQueriesMltMoreLikeThis_Int *self);

__attribute__((unused)) static OrgApacheLuceneQueriesMltMoreLikeThis_Int *new_OrgApacheLuceneQueriesMltMoreLikeThis_Int_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneQueriesMltMoreLikeThis_Int *create_OrgApacheLuceneQueriesMltMoreLikeThis_Int_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesMltMoreLikeThis_Int)

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneQueriesMltMoreLikeThis)

IOSObjectArray *OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_FIELD_NAMES;
id<JavaUtilSet> OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_STOP_WORDS;

@implementation OrgApacheLuceneQueriesMltMoreLikeThis

+ (jint)DEFAULT_MAX_NUM_TOKENS_PARSED {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_NUM_TOKENS_PARSED;
}

+ (jint)DEFAULT_MIN_TERM_FREQ {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MIN_TERM_FREQ;
}

+ (jint)DEFAULT_MIN_DOC_FREQ {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MIN_DOC_FREQ;
}

+ (jint)DEFAULT_MAX_DOC_FREQ {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_DOC_FREQ;
}

+ (jboolean)DEFAULT_BOOST {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_BOOST;
}

+ (IOSObjectArray *)DEFAULT_FIELD_NAMES {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_FIELD_NAMES;
}

+ (jint)DEFAULT_MIN_WORD_LENGTH {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MIN_WORD_LENGTH;
}

+ (jint)DEFAULT_MAX_WORD_LENGTH {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_WORD_LENGTH;
}

+ (id<JavaUtilSet>)DEFAULT_STOP_WORDS {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_STOP_WORDS;
}

+ (jint)DEFAULT_MAX_QUERY_TERMS {
  return OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_QUERY_TERMS;
}

- (jfloat)getBoostFactor {
  return boostFactor_;
}

- (void)setBoostFactorWithFloat:(jfloat)boostFactor {
  self->boostFactor_ = boostFactor;
}

- (instancetype)initWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir {
  OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_(self, ir);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
   withOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity:(OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity *)sim {
  OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity_(self, ir, sim);
  return self;
}

- (OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity *)getSimilarity {
  return similarity_;
}

- (void)setSimilarityWithOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity:(OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity *)similarity {
  JreStrongAssign(&self->similarity_, similarity);
}

- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer {
  return analyzer_;
}

- (void)setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer {
  JreStrongAssign(&self->analyzer_, analyzer);
}

- (jint)getMinTermFreq {
  return minTermFreq_;
}

- (void)setMinTermFreqWithInt:(jint)minTermFreq {
  self->minTermFreq_ = minTermFreq;
}

- (jint)getMinDocFreq {
  return minDocFreq_;
}

- (void)setMinDocFreqWithInt:(jint)minDocFreq {
  self->minDocFreq_ = minDocFreq;
}

- (jint)getMaxDocFreq {
  return maxDocFreq_;
}

- (void)setMaxDocFreqWithInt:(jint)maxFreq {
  self->maxDocFreq_ = maxFreq;
}

- (void)setMaxDocFreqPctWithInt:(jint)maxPercentage {
  self->maxDocFreq_ = JreIntDiv(maxPercentage * [((OrgApacheLuceneIndexIndexReader *) nil_chk(ir_)) numDocs], 100);
}

- (jboolean)isBoost {
  return boost_;
}

- (void)setBoostWithBoolean:(jboolean)boost {
  self->boost_ = boost;
}

- (IOSObjectArray *)getFieldNames {
  return fieldNames_;
}

- (void)setFieldNamesWithNSStringArray:(IOSObjectArray *)fieldNames {
  JreStrongAssign(&self->fieldNames_, fieldNames);
}

- (jint)getMinWordLen {
  return minWordLen_;
}

- (void)setMinWordLenWithInt:(jint)minWordLen {
  self->minWordLen_ = minWordLen;
}

- (jint)getMaxWordLen {
  return maxWordLen_;
}

- (void)setMaxWordLenWithInt:(jint)maxWordLen {
  self->maxWordLen_ = maxWordLen;
}

- (void)setStopWordsWithJavaUtilSet:(id<JavaUtilSet>)stopWords {
  JreStrongAssign(&self->stopWords_, stopWords);
}

- (id<JavaUtilSet>)getStopWords {
  return stopWords_;
}

- (jint)getMaxQueryTerms {
  return maxQueryTerms_;
}

- (void)setMaxQueryTermsWithInt:(jint)maxQueryTerms {
  self->maxQueryTerms_ = maxQueryTerms;
}

- (jint)getMaxNumTokensParsed {
  return maxNumTokensParsed_;
}

- (void)setMaxNumTokensParsedWithInt:(jint)i {
  maxNumTokensParsed_ = i;
}

- (OrgApacheLuceneSearchQuery *)likeWithInt:(jint)docNum {
  if (fieldNames_ == nil) {
    id<JavaUtilCollection> fields = OrgApacheLuceneIndexMultiFields_getIndexedFieldsWithOrgApacheLuceneIndexIndexReader_(ir_);
    JreStrongAssign(&fieldNames_, [((id<JavaUtilCollection>) nil_chk(fields)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[fields size] type:NSString_class_()]]);
  }
  return OrgApacheLuceneQueriesMltMoreLikeThis_createQueryWithOrgApacheLuceneUtilPriorityQueue_(self, OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithInt_(self, docNum));
}

- (OrgApacheLuceneSearchQuery *)likeWithJavaUtilMap:(id<JavaUtilMap>)filteredDocument {
  if (fieldNames_ == nil) {
    id<JavaUtilCollection> fields = OrgApacheLuceneIndexMultiFields_getIndexedFieldsWithOrgApacheLuceneIndexIndexReader_(ir_);
    JreStrongAssign(&fieldNames_, [((id<JavaUtilCollection>) nil_chk(fields)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[fields size] type:NSString_class_()]]);
  }
  return OrgApacheLuceneQueriesMltMoreLikeThis_createQueryWithOrgApacheLuceneUtilPriorityQueue_(self, OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithJavaUtilMap_(self, filteredDocument));
}

- (OrgApacheLuceneSearchQuery *)likeWithNSString:(NSString *)fieldName
                           withJavaIoReaderArray:(IOSObjectArray *)readers {
  id<JavaUtilMap> words = create_JavaUtilHashMap_init();
  {
    IOSObjectArray *a__ = readers;
    JavaIoReader * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoReader * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoReader *r = *b__++;
      OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaIoReader_withJavaUtilMap_withNSString_(self, r, words, fieldName);
    }
  }
  return OrgApacheLuceneQueriesMltMoreLikeThis_createQueryWithOrgApacheLuceneUtilPriorityQueue_(self, OrgApacheLuceneQueriesMltMoreLikeThis_createQueueWithJavaUtilMap_(self, words));
}

- (OrgApacheLuceneSearchQuery *)createQueryWithOrgApacheLuceneUtilPriorityQueue:(OrgApacheLuceneUtilPriorityQueue *)q {
  return OrgApacheLuceneQueriesMltMoreLikeThis_createQueryWithOrgApacheLuceneUtilPriorityQueue_(self, q);
}

- (OrgApacheLuceneUtilPriorityQueue *)createQueueWithJavaUtilMap:(id<JavaUtilMap>)words {
  return OrgApacheLuceneQueriesMltMoreLikeThis_createQueueWithJavaUtilMap_(self, words);
}

- (NSString *)describeParams {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithNSString:@"maxQueryTerms  : "])) appendWithInt:maxQueryTerms_])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithNSString:@"minWordLen     : "])) appendWithInt:minWordLen_])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithNSString:@"maxWordLen     : "])) appendWithInt:maxWordLen_])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithNSString:@"fieldNames     : "];
  NSString *delim = @"";
  {
    IOSObjectArray *a__ = fieldNames_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *fieldName = *b__++;
      [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:delim])) appendWithNSString:fieldName];
      delim = @", ";
    }
  }
  [sb appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithNSString:@"boost          : "])) appendWithBoolean:boost_])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithNSString:@"minTermFreq    : "])) appendWithInt:minTermFreq_])) appendWithNSString:@"\n"];
  [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"\t"])) appendWithNSString:@"minDocFreq     : "])) appendWithInt:minDocFreq_])) appendWithNSString:@"\n"];
  return [sb description];
}

- (OrgApacheLuceneUtilPriorityQueue *)retrieveTermsWithInt:(jint)docNum {
  return OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithInt_(self, docNum);
}

- (OrgApacheLuceneUtilPriorityQueue *)retrieveTermsWithJavaUtilMap:(id<JavaUtilMap>)fields {
  return OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithJavaUtilMap_(self, fields);
}

- (void)addTermFrequenciesWithJavaUtilMap:(id<JavaUtilMap>)termFreqMap
            withOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)vector {
  OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaUtilMap_withOrgApacheLuceneIndexTerms_(self, termFreqMap, vector);
}

- (void)addTermFrequenciesWithJavaIoReader:(JavaIoReader *)r
                           withJavaUtilMap:(id<JavaUtilMap>)termFreqMap
                              withNSString:(NSString *)fieldName {
  OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaIoReader_withJavaUtilMap_withNSString_(self, r, termFreqMap, fieldName);
}

- (jboolean)isNoiseWordWithNSString:(NSString *)term {
  return OrgApacheLuceneQueriesMltMoreLikeThis_isNoiseWordWithNSString_(self, term);
}

- (OrgApacheLuceneUtilPriorityQueue *)retrieveTermsWithJavaIoReader:(JavaIoReader *)r
                                                       withNSString:(NSString *)fieldName {
  return OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithJavaIoReader_withNSString_(self, r, fieldName);
}

- (IOSObjectArray *)retrieveInterestingTermsWithInt:(jint)docNum {
  JavaUtilArrayList *al = create_JavaUtilArrayList_initWithInt_(maxQueryTerms_);
  OrgApacheLuceneUtilPriorityQueue *pq = OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithInt_(self, docNum);
  OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *scoreTerm;
  jint lim = maxQueryTerms_;
  while (((scoreTerm = [((OrgApacheLuceneUtilPriorityQueue *) nil_chk(pq)) pop]) != nil) && lim-- > 0) {
    [al addWithId:((OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *) nil_chk(scoreTerm))->word_];
  }
  IOSObjectArray *res = [IOSObjectArray arrayWithLength:[al size] type:NSString_class_()];
  return [al toArrayWithNSObjectArray:res];
}

- (IOSObjectArray *)retrieveInterestingTermsWithJavaIoReader:(JavaIoReader *)r
                                                withNSString:(NSString *)fieldName {
  JavaUtilArrayList *al = create_JavaUtilArrayList_initWithInt_(maxQueryTerms_);
  OrgApacheLuceneUtilPriorityQueue *pq = OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithJavaIoReader_withNSString_(self, r, fieldName);
  OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *scoreTerm;
  jint lim = maxQueryTerms_;
  while (((scoreTerm = [((OrgApacheLuceneUtilPriorityQueue *) nil_chk(pq)) pop]) != nil) && lim-- > 0) {
    [al addWithId:((OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *) nil_chk(scoreTerm))->word_];
  }
  IOSObjectArray *res = [IOSObjectArray arrayWithLength:[al size] type:NSString_class_()];
  return [al toArrayWithNSObjectArray:res];
}

- (void)dealloc {
  RELEASE_(stopWords_);
  RELEASE_(analyzer_);
  RELEASE_(fieldNames_);
  RELEASE_(similarity_);
  RELEASE_(ir_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneAnalysisAnalyzer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 22, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 9, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 25, 9, 26, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 25, 27, 26, 28, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x81, 25, 29, 26, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x2, 30, 31, -1, 32, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPriorityQueue;", 0x2, 33, 27, 26, 34, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPriorityQueue;", 0x2, 35, 9, 26, 36, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPriorityQueue;", 0x2, 35, 27, 26, 37, -1, -1 },
    { NULL, "V", 0x2, 38, 39, 26, 40, -1, -1 },
    { NULL, "V", 0x2, 38, 41, 26, 42, -1, -1 },
    { NULL, "Z", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneUtilPriorityQueue;", 0x2, 35, 45, 26, 46, -1, -1 },
    { NULL, "[LNSString;", 0x1, 47, 9, 26, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 47, 45, 26, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getBoostFactor);
  methods[1].selector = @selector(setBoostFactorWithFloat:);
  methods[2].selector = @selector(initWithOrgApacheLuceneIndexIndexReader:);
  methods[3].selector = @selector(initWithOrgApacheLuceneIndexIndexReader:withOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity:);
  methods[4].selector = @selector(getSimilarity);
  methods[5].selector = @selector(setSimilarityWithOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity:);
  methods[6].selector = @selector(getAnalyzer);
  methods[7].selector = @selector(setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:);
  methods[8].selector = @selector(getMinTermFreq);
  methods[9].selector = @selector(setMinTermFreqWithInt:);
  methods[10].selector = @selector(getMinDocFreq);
  methods[11].selector = @selector(setMinDocFreqWithInt:);
  methods[12].selector = @selector(getMaxDocFreq);
  methods[13].selector = @selector(setMaxDocFreqWithInt:);
  methods[14].selector = @selector(setMaxDocFreqPctWithInt:);
  methods[15].selector = @selector(isBoost);
  methods[16].selector = @selector(setBoostWithBoolean:);
  methods[17].selector = @selector(getFieldNames);
  methods[18].selector = @selector(setFieldNamesWithNSStringArray:);
  methods[19].selector = @selector(getMinWordLen);
  methods[20].selector = @selector(setMinWordLenWithInt:);
  methods[21].selector = @selector(getMaxWordLen);
  methods[22].selector = @selector(setMaxWordLenWithInt:);
  methods[23].selector = @selector(setStopWordsWithJavaUtilSet:);
  methods[24].selector = @selector(getStopWords);
  methods[25].selector = @selector(getMaxQueryTerms);
  methods[26].selector = @selector(setMaxQueryTermsWithInt:);
  methods[27].selector = @selector(getMaxNumTokensParsed);
  methods[28].selector = @selector(setMaxNumTokensParsedWithInt:);
  methods[29].selector = @selector(likeWithInt:);
  methods[30].selector = @selector(likeWithJavaUtilMap:);
  methods[31].selector = @selector(likeWithNSString:withJavaIoReaderArray:);
  methods[32].selector = @selector(createQueryWithOrgApacheLuceneUtilPriorityQueue:);
  methods[33].selector = @selector(createQueueWithJavaUtilMap:);
  methods[34].selector = @selector(describeParams);
  methods[35].selector = @selector(retrieveTermsWithInt:);
  methods[36].selector = @selector(retrieveTermsWithJavaUtilMap:);
  methods[37].selector = @selector(addTermFrequenciesWithJavaUtilMap:withOrgApacheLuceneIndexTerms:);
  methods[38].selector = @selector(addTermFrequenciesWithJavaIoReader:withJavaUtilMap:withNSString:);
  methods[39].selector = @selector(isNoiseWordWithNSString:);
  methods[40].selector = @selector(retrieveTermsWithJavaIoReader:withNSString:);
  methods[41].selector = @selector(retrieveInterestingTermsWithInt:);
  methods[42].selector = @selector(retrieveInterestingTermsWithJavaIoReader:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MAX_NUM_TOKENS_PARSED", "I", .constantValue.asInt = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_NUM_TOKENS_PARSED, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MIN_TERM_FREQ", "I", .constantValue.asInt = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MIN_TERM_FREQ, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MIN_DOC_FREQ", "I", .constantValue.asInt = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MIN_DOC_FREQ, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MAX_DOC_FREQ", "I", .constantValue.asInt = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_DOC_FREQ, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_BOOST", "Z", .constantValue.asBOOL = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_BOOST, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_FIELD_NAMES", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "DEFAULT_MIN_WORD_LENGTH", "I", .constantValue.asInt = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MIN_WORD_LENGTH, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_MAX_WORD_LENGTH", "I", .constantValue.asInt = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_WORD_LENGTH, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_STOP_WORDS", "LJavaUtilSet;", .constantValue.asLong = 0, 0x19, -1, 49, 50, -1 },
    { "stopWords_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 50, -1 },
    { "DEFAULT_MAX_QUERY_TERMS", "I", .constantValue.asInt = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_QUERY_TERMS, 0x19, -1, -1, -1, -1 },
    { "analyzer_", "LOrgApacheLuceneAnalysisAnalyzer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minTermFreq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minDocFreq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxDocFreq_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "boost_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fieldNames_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxNumTokensParsed_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minWordLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxWordLen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxQueryTerms_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "similarity_", "LOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ir_", "LOrgApacheLuceneIndexIndexReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "boostFactor_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setBoostFactor", "F", "LOrgApacheLuceneIndexIndexReader;", "LOrgApacheLuceneIndexIndexReader;LOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity;", "setSimilarity", "LOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity;", "setAnalyzer", "LOrgApacheLuceneAnalysisAnalyzer;", "setMinTermFreq", "I", "setMinDocFreq", "setMaxDocFreq", "setMaxDocFreqPct", "setBoost", "Z", "setFieldNames", "[LNSString;", "setMinWordLen", "setMaxWordLen", "setStopWords", "LJavaUtilSet;", "(Ljava/util/Set<*>;)V", "()Ljava/util/Set<*>;", "setMaxQueryTerms", "setMaxNumTokensParsed", "like", "LJavaIoIOException;", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/util/Collection<Ljava/lang/Object;>;>;)Lorg/apache/lucene/search/Query;", "LNSString;[LJavaIoReader;", "createQuery", "LOrgApacheLuceneUtilPriorityQueue;", "(Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/queries/mlt/MoreLikeThis$ScoreTerm;>;)Lorg/apache/lucene/search/Query;", "createQueue", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/queries/mlt/MoreLikeThis$Int;>;)Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/queries/mlt/MoreLikeThis$ScoreTerm;>;", "retrieveTerms", "(I)Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/queries/mlt/MoreLikeThis$ScoreTerm;>;", "(Ljava/util/Map<Ljava/lang/String;Ljava/util/Collection<Ljava/lang/Object;>;>;)Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/queries/mlt/MoreLikeThis$ScoreTerm;>;", "addTermFrequencies", "LJavaUtilMap;LOrgApacheLuceneIndexTerms;", "(Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/queries/mlt/MoreLikeThis$Int;>;Lorg/apache/lucene/index/Terms;)V", "LJavaIoReader;LJavaUtilMap;LNSString;", "(Ljava/io/Reader;Ljava/util/Map<Ljava/lang/String;Lorg/apache/lucene/queries/mlt/MoreLikeThis$Int;>;Ljava/lang/String;)V", "isNoiseWord", "LNSString;", "LJavaIoReader;LNSString;", "(Ljava/io/Reader;Ljava/lang/String;)Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/queries/mlt/MoreLikeThis$ScoreTerm;>;", "retrieveInterestingTerms", &OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_FIELD_NAMES, &OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_STOP_WORDS, "Ljava/util/Set<*>;", "LOrgApacheLuceneQueriesMltMoreLikeThis_FreqQ;LOrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm;LOrgApacheLuceneQueriesMltMoreLikeThis_Int;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesMltMoreLikeThis = { "MoreLikeThis", "org.apache.lucene.queries.mlt", ptrTable, methods, fields, 7, 0x11, 43, 24, -1, 51, -1, -1, -1 };
  return &_OrgApacheLuceneQueriesMltMoreLikeThis;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneQueriesMltMoreLikeThis class]) {
    JreStrongAssignAndConsume(&OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_FIELD_NAMES, [IOSObjectArray newArrayWithObjects:(id[]){ @"contents" } count:1 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneQueriesMltMoreLikeThis)
  }
}

@end

void OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneQueriesMltMoreLikeThis *self, OrgApacheLuceneIndexIndexReader *ir) {
  OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity_(self, ir, create_OrgApacheLuceneSearchSimilaritiesDefaultSimilarity_init());
}

OrgApacheLuceneQueriesMltMoreLikeThis *new_OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *ir) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis, initWithOrgApacheLuceneIndexIndexReader_, ir)
}

OrgApacheLuceneQueriesMltMoreLikeThis *create_OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_(OrgApacheLuceneIndexIndexReader *ir) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis, initWithOrgApacheLuceneIndexIndexReader_, ir)
}

void OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity_(OrgApacheLuceneQueriesMltMoreLikeThis *self, OrgApacheLuceneIndexIndexReader *ir, OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity *sim) {
  NSObject_init(self);
  JreStrongAssign(&self->stopWords_, OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_STOP_WORDS);
  JreStrongAssign(&self->analyzer_, nil);
  self->minTermFreq_ = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MIN_TERM_FREQ;
  self->minDocFreq_ = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MIN_DOC_FREQ;
  self->maxDocFreq_ = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_DOC_FREQ;
  self->boost_ = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_BOOST;
  JreStrongAssign(&self->fieldNames_, OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_FIELD_NAMES);
  self->maxNumTokensParsed_ = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_NUM_TOKENS_PARSED;
  self->minWordLen_ = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MIN_WORD_LENGTH;
  self->maxWordLen_ = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_WORD_LENGTH;
  self->maxQueryTerms_ = OrgApacheLuceneQueriesMltMoreLikeThis_DEFAULT_MAX_QUERY_TERMS;
  self->boostFactor_ = 1;
  JreStrongAssign(&self->ir_, ir);
  JreStrongAssign(&self->similarity_, sim);
}

OrgApacheLuceneQueriesMltMoreLikeThis *new_OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity_(OrgApacheLuceneIndexIndexReader *ir, OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity *sim) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis, initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity_, ir, sim)
}

OrgApacheLuceneQueriesMltMoreLikeThis *create_OrgApacheLuceneQueriesMltMoreLikeThis_initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity_(OrgApacheLuceneIndexIndexReader *ir, OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity *sim) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis, initWithOrgApacheLuceneIndexIndexReader_withOrgApacheLuceneSearchSimilaritiesTFIDFSimilarity_, ir, sim)
}

OrgApacheLuceneSearchQuery *OrgApacheLuceneQueriesMltMoreLikeThis_createQueryWithOrgApacheLuceneUtilPriorityQueue_(OrgApacheLuceneQueriesMltMoreLikeThis *self, OrgApacheLuceneUtilPriorityQueue *q) {
  OrgApacheLuceneSearchBooleanQuery_Builder *query = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *scoreTerm;
  jfloat bestScore = -1;
  while ((scoreTerm = [((OrgApacheLuceneUtilPriorityQueue *) nil_chk(q)) pop]) != nil) {
    OrgApacheLuceneSearchTermQuery *tq = create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(((OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *) nil_chk(scoreTerm))->topField_, scoreTerm->word_));
    if (self->boost_) {
      if (bestScore == -1) {
        bestScore = (scoreTerm->score_);
      }
      jfloat myScore = (scoreTerm->score_);
      [tq setBoostWithFloat:self->boostFactor_ * myScore / bestScore];
    }
    @try {
      [query addWithOrgApacheLuceneSearchQuery:tq withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
    }
    @catch (OrgApacheLuceneSearchBooleanQuery_TooManyClauses *ignore) {
      break;
    }
  }
  return [query build];
}

OrgApacheLuceneUtilPriorityQueue *OrgApacheLuceneQueriesMltMoreLikeThis_createQueueWithJavaUtilMap_(OrgApacheLuceneQueriesMltMoreLikeThis *self, id<JavaUtilMap> words) {
  jint numDocs = [((OrgApacheLuceneIndexIndexReader *) nil_chk(self->ir_)) numDocs];
  jint limit = JavaLangMath_minWithInt_withInt_(self->maxQueryTerms_, [((id<JavaUtilMap>) nil_chk(words)) size]);
  OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ *queue = create_OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ_initWithInt_(limit);
  for (NSString * __strong word in nil_chk([words keySet])) {
    jint tf = ((OrgApacheLuceneQueriesMltMoreLikeThis_Int *) nil_chk([words getWithId:word]))->x_;
    if (self->minTermFreq_ > 0 && tf < self->minTermFreq_) {
      continue;
    }
    NSString *topField = IOSObjectArray_Get(nil_chk(self->fieldNames_), 0);
    jint docFreq = 0;
    {
      IOSObjectArray *a__ = self->fieldNames_;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *fieldName = *b__++;
        jint freq = [self->ir_ docFreqWithOrgApacheLuceneIndexTerm:create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(fieldName, word)];
        topField = (freq > docFreq) ? fieldName : topField;
        docFreq = (freq > docFreq) ? freq : docFreq;
      }
    }
    if (self->minDocFreq_ > 0 && docFreq < self->minDocFreq_) {
      continue;
    }
    if (docFreq > self->maxDocFreq_) {
      continue;
    }
    if (docFreq == 0) {
      continue;
    }
    jfloat idf = [((OrgApacheLuceneSearchSimilaritiesTFIDFSimilarity *) nil_chk(self->similarity_)) idfWithLong:docFreq withLong:numDocs];
    jfloat score = tf * idf;
    if ([queue size] < limit) {
      [queue addWithId:create_OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm_initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_(word, topField, score, idf, docFreq, tf)];
    }
    else {
      OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *term = JreRetainedLocalValue([queue top]);
      if (((OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *) nil_chk(term))->score_ < score) {
        [term updateWithNSString:word withNSString:topField withFloat:score withFloat:idf withInt:docFreq withInt:tf];
        [queue updateTop];
      }
    }
  }
  return queue;
}

OrgApacheLuceneUtilPriorityQueue *OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithInt_(OrgApacheLuceneQueriesMltMoreLikeThis *self, jint docNum) {
  id<JavaUtilMap> termFreqMap = create_JavaUtilHashMap_init();
  {
    IOSObjectArray *a__ = self->fieldNames_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *fieldName = *b__++;
      OrgApacheLuceneIndexFields *vectors = [((OrgApacheLuceneIndexIndexReader *) nil_chk(self->ir_)) getTermVectorsWithInt:docNum];
      OrgApacheLuceneIndexTerms *vector;
      if (vectors != nil) {
        vector = [vectors termsWithNSString:fieldName];
      }
      else {
        vector = nil;
      }
      if (vector == nil) {
        OrgApacheLuceneDocumentDocument *d = JreRetainedLocalValue([self->ir_ documentWithInt:docNum]);
        IOSObjectArray *fields = [((OrgApacheLuceneDocumentDocument *) nil_chk(d)) getFieldsWithNSString:fieldName];
        {
          IOSObjectArray *a__ = fields;
          id<OrgApacheLuceneIndexIndexableField> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          id<OrgApacheLuceneIndexIndexableField> const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            id<OrgApacheLuceneIndexIndexableField> field = *b__++;
            NSString *stringValue = [((id<OrgApacheLuceneIndexIndexableField>) nil_chk(field)) stringValue];
            if (stringValue != nil) {
              OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaIoReader_withJavaUtilMap_withNSString_(self, create_JavaIoStringReader_initWithNSString_(stringValue), termFreqMap, fieldName);
            }
          }
        }
      }
      else {
        OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaUtilMap_withOrgApacheLuceneIndexTerms_(self, termFreqMap, vector);
      }
    }
  }
  return OrgApacheLuceneQueriesMltMoreLikeThis_createQueueWithJavaUtilMap_(self, termFreqMap);
}

OrgApacheLuceneUtilPriorityQueue *OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithJavaUtilMap_(OrgApacheLuceneQueriesMltMoreLikeThis *self, id<JavaUtilMap> fields) {
  JavaUtilHashMap *termFreqMap = create_JavaUtilHashMap_init();
  {
    IOSObjectArray *a__ = self->fieldNames_;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *fieldName = *b__++;
      for (NSString * __strong field in nil_chk([((id<JavaUtilMap>) nil_chk(fields)) keySet])) {
        id<JavaUtilCollection> fieldValues = JreRetainedLocalValue([fields getWithId:field]);
        if (fieldValues == nil) continue;
        for (id __strong fieldValue in fieldValues) {
          if (fieldValue != nil) {
            OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaIoReader_withJavaUtilMap_withNSString_(self, create_JavaIoStringReader_initWithNSString_(NSString_java_valueOf_(fieldValue)), termFreqMap, fieldName);
          }
        }
      }
    }
  }
  return OrgApacheLuceneQueriesMltMoreLikeThis_createQueueWithJavaUtilMap_(self, termFreqMap);
}

void OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaUtilMap_withOrgApacheLuceneIndexTerms_(OrgApacheLuceneQueriesMltMoreLikeThis *self, id<JavaUtilMap> termFreqMap, OrgApacheLuceneIndexTerms *vector) {
  OrgApacheLuceneIndexTermsEnum *termsEnum = [((OrgApacheLuceneIndexTerms *) nil_chk(vector)) iterator];
  OrgApacheLuceneUtilCharsRefBuilder *spare = create_OrgApacheLuceneUtilCharsRefBuilder_init();
  OrgApacheLuceneUtilBytesRef *text;
  while ((text = [((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) next]) != nil) {
    [spare copyUTF8BytesWithOrgApacheLuceneUtilBytesRef:text];
    NSString *term = [spare description];
    if (OrgApacheLuceneQueriesMltMoreLikeThis_isNoiseWordWithNSString_(self, term)) {
      continue;
    }
    jint freq = (jint) [termsEnum totalTermFreq];
    OrgApacheLuceneQueriesMltMoreLikeThis_Int *cnt = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(termFreqMap)) getWithId:term]);
    if (cnt == nil) {
      cnt = create_OrgApacheLuceneQueriesMltMoreLikeThis_Int_init();
      [termFreqMap putWithId:term withId:cnt];
      cnt->x_ = freq;
    }
    else {
      cnt->x_ += freq;
    }
  }
}

void OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaIoReader_withJavaUtilMap_withNSString_(OrgApacheLuceneQueriesMltMoreLikeThis *self, JavaIoReader *r, id<JavaUtilMap> termFreqMap, NSString *fieldName) {
  if (self->analyzer_ == nil) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"To use MoreLikeThis without term vectors, you must provide an Analyzer");
  }
  {
    OrgApacheLuceneAnalysisTokenStream *ts = [self->analyzer_ tokenStreamWithNSString:fieldName withJavaIoReader:r];
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      jint tokenCount = 0;
      id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute> termAtt = JreRetainedLocalValue([((OrgApacheLuceneAnalysisTokenStream *) nil_chk(ts)) addAttributeWithIOSClass:OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_class_()]);
      [ts reset];
      while ([ts incrementToken]) {
        NSString *word = [((id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>) nil_chk(termAtt)) description];
        tokenCount++;
        if (tokenCount > self->maxNumTokensParsed_) {
          break;
        }
        if (OrgApacheLuceneQueriesMltMoreLikeThis_isNoiseWordWithNSString_(self, word)) {
          continue;
        }
        OrgApacheLuceneQueriesMltMoreLikeThis_Int *cnt = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(termFreqMap)) getWithId:word]);
        if (cnt == nil) {
          [termFreqMap putWithId:word withId:create_OrgApacheLuceneQueriesMltMoreLikeThis_Int_init()];
        }
        else {
          cnt->x_++;
        }
      }
      [ts end];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (ts != nil) {
        if (__primaryException1 != nil) {
          @try {
            [ts close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [ts close];
        }
      }
    }
  }
}

jboolean OrgApacheLuceneQueriesMltMoreLikeThis_isNoiseWordWithNSString_(OrgApacheLuceneQueriesMltMoreLikeThis *self, NSString *term) {
  jint len = [((NSString *) nil_chk(term)) java_length];
  if (self->minWordLen_ > 0 && len < self->minWordLen_) {
    return true;
  }
  if (self->maxWordLen_ > 0 && len > self->maxWordLen_) {
    return true;
  }
  return self->stopWords_ != nil && [self->stopWords_ containsWithId:term];
}

OrgApacheLuceneUtilPriorityQueue *OrgApacheLuceneQueriesMltMoreLikeThis_retrieveTermsWithJavaIoReader_withNSString_(OrgApacheLuceneQueriesMltMoreLikeThis *self, JavaIoReader *r, NSString *fieldName) {
  id<JavaUtilMap> words = create_JavaUtilHashMap_init();
  OrgApacheLuceneQueriesMltMoreLikeThis_addTermFrequenciesWithJavaIoReader_withJavaUtilMap_withNSString_(self, r, words, fieldName);
  return OrgApacheLuceneQueriesMltMoreLikeThis_createQueueWithJavaUtilMap_(self, words);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueriesMltMoreLikeThis)

@implementation OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ

- (instancetype)initWithInt:(jint)maxSize {
  OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ_initWithInt_(self, maxSize);
  return self;
}

- (jboolean)lessThanWithId:(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)a
                    withId:(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *)b {
  return ((OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *) nil_chk(a))->score_ < ((OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *) nil_chk(b))->score_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(lessThanWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "lessThan", "LOrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm;LOrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm;", "LOrgApacheLuceneQueriesMltMoreLikeThis;", "Lorg/apache/lucene/util/PriorityQueue<Lorg/apache/lucene/queries/mlt/MoreLikeThis$ScoreTerm;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ = { "FreqQ", "org.apache.lucene.queries.mlt", ptrTable, methods, NULL, 7, 0xa, 2, 0, 3, -1, -1, 4, -1 };
  return &_OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ;
}

@end

void OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ_initWithInt_(OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ *self, jint maxSize) {
  OrgApacheLuceneUtilPriorityQueue_initWithInt_(self, maxSize);
}

OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ *new_OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ_initWithInt_(jint maxSize) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ, initWithInt_, maxSize)
}

OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ *create_OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ_initWithInt_(jint maxSize) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ, initWithInt_, maxSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueriesMltMoreLikeThis_FreqQ)

@implementation OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm

- (instancetype)initWithNSString:(NSString *)word
                    withNSString:(NSString *)topField
                       withFloat:(jfloat)score
                       withFloat:(jfloat)idf
                         withInt:(jint)docFreq
                         withInt:(jint)tf {
  OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm_initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_(self, word, topField, score, idf, docFreq, tf);
  return self;
}

- (void)updateWithNSString:(NSString *)word
              withNSString:(NSString *)topField
                 withFloat:(jfloat)score
                 withFloat:(jfloat)idf
                   withInt:(jint)docFreq
                   withInt:(jint)tf {
  JreStrongAssign(&self->word_, word);
  JreStrongAssign(&self->topField_, topField);
  self->score_ = score;
  self->idf_ = idf;
  self->docFreq_ = docFreq;
  self->tf_ = tf;
}

- (void)dealloc {
  RELEASE_(word_);
  RELEASE_(topField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:withFloat:withFloat:withInt:withInt:);
  methods[1].selector = @selector(updateWithNSString:withNSString:withFloat:withFloat:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "word_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "topField_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "score_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "idf_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "docFreq_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tf_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;FFII", "update", "LOrgApacheLuceneQueriesMltMoreLikeThis;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm = { "ScoreTerm", "org.apache.lucene.queries.mlt", ptrTable, methods, fields, 7, 0xa, 2, 6, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm;
}

@end

void OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm_initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *self, NSString *word, NSString *topField, jfloat score, jfloat idf, jint docFreq, jint tf) {
  NSObject_init(self);
  JreStrongAssign(&self->word_, word);
  JreStrongAssign(&self->topField_, topField);
  self->score_ = score;
  self->idf_ = idf;
  self->docFreq_ = docFreq;
  self->tf_ = tf;
}

OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *new_OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm_initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_(NSString *word, NSString *topField, jfloat score, jfloat idf, jint docFreq, jint tf) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm, initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_, word, topField, score, idf, docFreq, tf)
}

OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm *create_OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm_initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_(NSString *word, NSString *topField, jfloat score, jfloat idf, jint docFreq, jint tf) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm, initWithNSString_withNSString_withFloat_withFloat_withInt_withInt_, word, topField, score, idf, docFreq, tf)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueriesMltMoreLikeThis_ScoreTerm)

@implementation OrgApacheLuceneQueriesMltMoreLikeThis_Int

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheLuceneQueriesMltMoreLikeThis_Int_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneQueriesMltMoreLikeThis;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesMltMoreLikeThis_Int = { "Int", "org.apache.lucene.queries.mlt", ptrTable, methods, fields, 7, 0xa, 1, 1, 0, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueriesMltMoreLikeThis_Int;
}

@end

void OrgApacheLuceneQueriesMltMoreLikeThis_Int_init(OrgApacheLuceneQueriesMltMoreLikeThis_Int *self) {
  NSObject_init(self);
  self->x_ = 1;
}

OrgApacheLuceneQueriesMltMoreLikeThis_Int *new_OrgApacheLuceneQueriesMltMoreLikeThis_Int_init() {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis_Int, init)
}

OrgApacheLuceneQueriesMltMoreLikeThis_Int *create_OrgApacheLuceneQueriesMltMoreLikeThis_Int_init() {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesMltMoreLikeThis_Int, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueriesMltMoreLikeThis_Int)
