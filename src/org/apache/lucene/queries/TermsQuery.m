//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queries/src/java/org/apache/lucene/queries/TermsQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/PostingsEnum.h"
#include "org/apache/lucene/index/PrefixCodedTerms.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/queries/TermsQuery.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "org/apache/lucene/search/ConstantScoreQuery.h"
#include "org/apache/lucene/search/ConstantScoreScorer.h"
#include "org/apache/lucene/search/ConstantScoreWeight.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/util/ArrayUtil.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/DocIdSetBuilder.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "org/lukhnos/portmobile/util/Objects.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queries/TermsQuery must not be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface OrgApacheLuceneQueriesTermsQuery () {
 @public
  OrgApacheLuceneIndexPrefixCodedTerms *termData_;
  jint termDataHashCode_;
}

+ (IOSObjectArray *)toTermArrayWithNSString:(NSString *)field
                           withJavaUtilList:(id<JavaUtilList>)termBytes;

@end

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesTermsQuery, termData_, OrgApacheLuceneIndexPrefixCodedTerms *)

inline jlong OrgApacheLuceneQueriesTermsQuery_get_BASE_RAM_BYTES_USED(void);
static jlong OrgApacheLuceneQueriesTermsQuery_BASE_RAM_BYTES_USED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneQueriesTermsQuery, BASE_RAM_BYTES_USED, jlong)

__attribute__((unused)) static IOSObjectArray *OrgApacheLuceneQueriesTermsQuery_toTermArrayWithNSString_withJavaUtilList_(NSString *field, id<JavaUtilList> termBytes);

@interface OrgApacheLuceneQueriesTermsQuery_TermAndState : NSObject {
 @public
  NSString *field_;
  OrgApacheLuceneIndexTermsEnum *termsEnum_;
  OrgApacheLuceneUtilBytesRef *term_;
  OrgApacheLuceneIndexTermState *state_;
  jint docFreq_;
  jlong totalTermFreq_;
}

- (instancetype)initWithNSString:(NSString *)field
withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesTermsQuery_TermAndState)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesTermsQuery_TermAndState, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesTermsQuery_TermAndState, termsEnum_, OrgApacheLuceneIndexTermsEnum *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesTermsQuery_TermAndState, term_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesTermsQuery_TermAndState, state_, OrgApacheLuceneIndexTermState *)

__attribute__((unused)) static void OrgApacheLuceneQueriesTermsQuery_TermAndState_initWithNSString_withOrgApacheLuceneIndexTermsEnum_(OrgApacheLuceneQueriesTermsQuery_TermAndState *self, NSString *field, OrgApacheLuceneIndexTermsEnum *termsEnum);

__attribute__((unused)) static OrgApacheLuceneQueriesTermsQuery_TermAndState *new_OrgApacheLuceneQueriesTermsQuery_TermAndState_initWithNSString_withOrgApacheLuceneIndexTermsEnum_(NSString *field, OrgApacheLuceneIndexTermsEnum *termsEnum) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneQueriesTermsQuery_TermAndState *create_OrgApacheLuceneQueriesTermsQuery_TermAndState_initWithNSString_withOrgApacheLuceneIndexTermsEnum_(NSString *field, OrgApacheLuceneIndexTermsEnum *termsEnum);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesTermsQuery_TermAndState)

@interface OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet : NSObject {
 @public
  OrgApacheLuceneSearchWeight *weight_;
  OrgApacheLuceneSearchDocIdSet *set_;
}

- (instancetype)initWithOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)weight;

- (instancetype)initWithOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)bitset;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet, weight_, OrgApacheLuceneSearchWeight *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet, set_, OrgApacheLuceneSearchDocIdSet *)

__attribute__((unused)) static void OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchWeight_(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *self, OrgApacheLuceneSearchWeight *weight);

__attribute__((unused)) static OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *new_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchWeight_(OrgApacheLuceneSearchWeight *weight) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *create_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchWeight_(OrgApacheLuceneSearchWeight *weight);

__attribute__((unused)) static void OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *self, OrgApacheLuceneSearchDocIdSet *bitset);

__attribute__((unused)) static OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *new_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneSearchDocIdSet *bitset) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *create_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneSearchDocIdSet *bitset);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet)

@interface OrgApacheLuceneQueriesTermsQuery_1 : OrgApacheLuceneSearchConstantScoreWeight {
 @public
  OrgApacheLuceneQueriesTermsQuery *this$0_;
  OrgApacheLuceneSearchIndexSearcher *val$searcher_;
  jboolean val$needsScores_;
}

- (instancetype)initWithOrgApacheLuceneQueriesTermsQuery:(OrgApacheLuceneQueriesTermsQuery *)outer$
                  withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)capture$0
                                             withBoolean:(jboolean)capture$1
                          withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

/*!
 @brief On the given leaf context, try to either rewrite to a disjunction if
  there are few matching terms, or build a bitset containing matching docs.
 */
- (OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *)rewriteWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set;

- (OrgApacheLuceneSearchBulkScorer *)bulkScorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesTermsQuery_1)

__attribute__((unused)) static void OrgApacheLuceneQueriesTermsQuery_1_initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneQueriesTermsQuery_1 *self, OrgApacheLuceneQueriesTermsQuery *outer$, OrgApacheLuceneSearchIndexSearcher *capture$0, jboolean capture$1, OrgApacheLuceneSearchQuery *query);

__attribute__((unused)) static OrgApacheLuceneQueriesTermsQuery_1 *new_OrgApacheLuceneQueriesTermsQuery_1_initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneQueriesTermsQuery *outer$, OrgApacheLuceneSearchIndexSearcher *capture$0, jboolean capture$1, OrgApacheLuceneSearchQuery *query) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheLuceneQueriesTermsQuery_1 *create_OrgApacheLuceneQueriesTermsQuery_1_initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneQueriesTermsQuery *outer$, OrgApacheLuceneSearchIndexSearcher *capture$0, jboolean capture$1, OrgApacheLuceneSearchQuery *query);

__attribute__((unused)) static OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *OrgApacheLuceneQueriesTermsQuery_1_rewriteWithOrgApacheLuceneIndexLeafReaderContext_(OrgApacheLuceneQueriesTermsQuery_1 *self, OrgApacheLuceneIndexLeafReaderContext *context);

__attribute__((unused)) static OrgApacheLuceneSearchScorer *OrgApacheLuceneQueriesTermsQuery_1_scorerWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneQueriesTermsQuery_1 *self, OrgApacheLuceneSearchDocIdSet *set);

J2OBJC_INITIALIZED_DEFN(OrgApacheLuceneQueriesTermsQuery)

@implementation OrgApacheLuceneQueriesTermsQuery

+ (jint)BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD {
  return OrgApacheLuceneQueriesTermsQuery_BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD;
}

+ (IOSObjectArray *)toTermArrayWithNSString:(NSString *)field
                           withJavaUtilList:(id<JavaUtilList>)termBytes {
  return OrgApacheLuceneQueriesTermsQuery_toTermArrayWithNSString_withJavaUtilList_(field, termBytes);
}

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)terms {
  OrgApacheLuceneQueriesTermsQuery_initWithJavaUtilList_(self, terms);
  return self;
}

- (instancetype)initWithNSString:(NSString *)field
                withJavaUtilList:(id<JavaUtilList>)terms {
  OrgApacheLuceneQueriesTermsQuery_initWithNSString_withJavaUtilList_(self, field, terms);
  return self;
}

- (instancetype)initWithNSString:(NSString *)field
withOrgApacheLuceneUtilBytesRefArray:(IOSObjectArray *)terms {
  OrgApacheLuceneQueriesTermsQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(self, field, terms);
  return self;
}

- (instancetype)initWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms {
  OrgApacheLuceneQueriesTermsQuery_initWithOrgApacheLuceneIndexTermArray_(self, terms);
  return self;
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  jint threshold = JavaLangMath_minWithInt_withInt_(OrgApacheLuceneQueriesTermsQuery_BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, OrgApacheLuceneSearchBooleanQuery_getMaxClauseCount());
  if ([((OrgApacheLuceneIndexPrefixCodedTerms *) nil_chk(termData_)) size] <= threshold) {
    OrgApacheLuceneSearchBooleanQuery_Builder *bq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
    OrgApacheLuceneIndexPrefixCodedTerms_TermIterator *iterator = JreRetainedLocalValue([termData_ iterator]);
    for (OrgApacheLuceneUtilBytesRef *term = JreRetainedLocalValue([((OrgApacheLuceneIndexPrefixCodedTerms_TermIterator *) nil_chk(iterator)) next]); term != nil; term = [iterator next]) {
      [bq addWithOrgApacheLuceneSearchQuery:create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_([iterator field], OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_(term))) withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
    }
    OrgApacheLuceneSearchConstantScoreQuery *csq = create_OrgApacheLuceneSearchConstantScoreQuery_initWithOrgApacheLuceneSearchQuery_([bq build]);
    [csq setBoostWithFloat:[self getBoost]];
    return csq;
  }
  return [super rewriteWithOrgApacheLuceneIndexIndexReader:reader];
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) {
    return true;
  }
  if (![super isEqual:obj]) {
    return false;
  }
  OrgApacheLuceneQueriesTermsQuery *that = (OrgApacheLuceneQueriesTermsQuery *) cast_chk(obj, [OrgApacheLuceneQueriesTermsQuery class]);
  return termDataHashCode_ == ((OrgApacheLuceneQueriesTermsQuery *) nil_chk(that))->termDataHashCode_ && [((OrgApacheLuceneIndexPrefixCodedTerms *) nil_chk(termData_)) isEqual:that->termData_];
}

- (NSUInteger)hash {
  return 31 * ((jint) [super hash]) + termDataHashCode_;
}

- (NSString *)toStringWithNSString:(NSString *)defaultField {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  jboolean first = true;
  OrgApacheLuceneIndexPrefixCodedTerms_TermIterator *iterator = JreRetainedLocalValue([((OrgApacheLuceneIndexPrefixCodedTerms *) nil_chk(termData_)) iterator]);
  for (OrgApacheLuceneUtilBytesRef *term = JreRetainedLocalValue([((OrgApacheLuceneIndexPrefixCodedTerms_TermIterator *) nil_chk(iterator)) next]); term != nil; term = [iterator next]) {
    if (!first) {
      [builder appendWithChar:' '];
    }
    first = false;
    [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:[iterator field]])) appendWithChar:':'];
    [builder appendWithNSString:[term utf8ToString]];
  }
  [builder appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  return [builder description];
}

- (jlong)ramBytesUsed {
  return OrgApacheLuceneQueriesTermsQuery_BASE_RAM_BYTES_USED + [((OrgApacheLuceneIndexPrefixCodedTerms *) nil_chk(termData_)) ramBytesUsed];
}

- (id<JavaUtilCollection>)getChildResources {
  return JavaUtilCollections_emptyList();
}

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores {
  return create_OrgApacheLuceneQueriesTermsQuery_1_initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_(self, searcher, needsScores, self);
}

- (void)dealloc {
  RELEASE_(termData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgApacheLuceneIndexTerm;", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 5, -1, -1 },
    { NULL, NULL, 0x81, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 7, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 16, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchWeight;", 0x1, 17, 18, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(toTermArrayWithNSString:withJavaUtilList:);
  methods[1].selector = @selector(initWithJavaUtilList:);
  methods[2].selector = @selector(initWithNSString:withJavaUtilList:);
  methods[3].selector = @selector(initWithNSString:withOrgApacheLuceneUtilBytesRefArray:);
  methods[4].selector = @selector(initWithOrgApacheLuceneIndexTermArray:);
  methods[5].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(toStringWithNSString:);
  methods[9].selector = @selector(ramBytesUsed);
  methods[10].selector = @selector(getChildResources);
  methods[11].selector = @selector(createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_RAM_BYTES_USED", "J", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD", "I", .constantValue.asInt = OrgApacheLuceneQueriesTermsQuery_BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, 0x18, -1, -1, -1, -1 },
    { "termData_", "LOrgApacheLuceneIndexPrefixCodedTerms;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "termDataHashCode_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toTermArray", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Lorg/apache/lucene/util/BytesRef;>;)[Lorg/apache/lucene/index/Term;", "LJavaUtilList;", "(Ljava/util/List<Lorg/apache/lucene/index/Term;>;)V", "(Ljava/lang/String;Ljava/util/List<Lorg/apache/lucene/util/BytesRef;>;)V", "LNSString;[LOrgApacheLuceneUtilBytesRef;", "[LOrgApacheLuceneIndexTerm;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "equals", "LNSObject;", "hashCode", "toString", "LNSString;", "()Ljava/util/Collection<Lorg/apache/lucene/util/Accountable;>;", "createWeight", "LOrgApacheLuceneSearchIndexSearcher;Z", &OrgApacheLuceneQueriesTermsQuery_BASE_RAM_BYTES_USED, "LOrgApacheLuceneQueriesTermsQuery_TermAndState;LOrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesTermsQuery = { "TermsQuery", "org.apache.lucene.queries", ptrTable, methods, fields, 7, 0x1, 12, 4, -1, 20, -1, -1, -1 };
  return &_OrgApacheLuceneQueriesTermsQuery;
}

+ (void)initialize {
  if (self == [OrgApacheLuceneQueriesTermsQuery class]) {
    OrgApacheLuceneQueriesTermsQuery_BASE_RAM_BYTES_USED = OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(OrgApacheLuceneQueriesTermsQuery_class_());
    J2OBJC_SET_INITIALIZED(OrgApacheLuceneQueriesTermsQuery)
  }
}

@end

IOSObjectArray *OrgApacheLuceneQueriesTermsQuery_toTermArrayWithNSString_withJavaUtilList_(NSString *field, id<JavaUtilList> termBytes) {
  OrgApacheLuceneQueriesTermsQuery_initialize();
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(termBytes)) size] type:OrgApacheLuceneIndexTerm_class_()];
  jint i = 0;
  for (OrgApacheLuceneUtilBytesRef * __strong t in termBytes) {
    IOSObjectArray_SetAndConsume(array, i++, new_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(field, t));
  }
  return array;
}

void OrgApacheLuceneQueriesTermsQuery_initWithJavaUtilList_(OrgApacheLuceneQueriesTermsQuery *self, id<JavaUtilList> terms) {
  OrgApacheLuceneSearchQuery_init(self);
  IOSObjectArray *sortedTerms = [((id<JavaUtilList>) nil_chk(terms)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[terms size] type:OrgApacheLuceneIndexTerm_class_()]];
  OrgApacheLuceneUtilArrayUtil_timSortWithJavaLangComparableArray_(sortedTerms);
  OrgApacheLuceneIndexPrefixCodedTerms_Builder *builder = create_OrgApacheLuceneIndexPrefixCodedTerms_Builder_init();
  OrgApacheLuceneIndexTerm *previous = nil;
  {
    IOSObjectArray *a__ = sortedTerms;
    OrgApacheLuceneIndexTerm * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgApacheLuceneIndexTerm * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgApacheLuceneIndexTerm *term = *b__++;
      if ([((OrgApacheLuceneIndexTerm *) nil_chk(term)) isEqual:previous] == false) {
        [builder addWithOrgApacheLuceneIndexTerm:term];
      }
      previous = term;
    }
  }
  JreStrongAssign(&self->termData_, [builder finish]);
  self->termDataHashCode_ = ((jint) [((OrgApacheLuceneIndexPrefixCodedTerms *) nil_chk(self->termData_)) hash]);
}

OrgApacheLuceneQueriesTermsQuery *new_OrgApacheLuceneQueriesTermsQuery_initWithJavaUtilList_(id<JavaUtilList> terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesTermsQuery, initWithJavaUtilList_, terms)
}

OrgApacheLuceneQueriesTermsQuery *create_OrgApacheLuceneQueriesTermsQuery_initWithJavaUtilList_(id<JavaUtilList> terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesTermsQuery, initWithJavaUtilList_, terms)
}

void OrgApacheLuceneQueriesTermsQuery_initWithNSString_withJavaUtilList_(OrgApacheLuceneQueriesTermsQuery *self, NSString *field, id<JavaUtilList> terms) {
  OrgApacheLuceneQueriesTermsQuery_initWithOrgApacheLuceneIndexTermArray_(self, OrgApacheLuceneQueriesTermsQuery_toTermArrayWithNSString_withJavaUtilList_(field, terms));
}

OrgApacheLuceneQueriesTermsQuery *new_OrgApacheLuceneQueriesTermsQuery_initWithNSString_withJavaUtilList_(NSString *field, id<JavaUtilList> terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesTermsQuery, initWithNSString_withJavaUtilList_, field, terms)
}

OrgApacheLuceneQueriesTermsQuery *create_OrgApacheLuceneQueriesTermsQuery_initWithNSString_withJavaUtilList_(NSString *field, id<JavaUtilList> terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesTermsQuery, initWithNSString_withJavaUtilList_, field, terms)
}

void OrgApacheLuceneQueriesTermsQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(OrgApacheLuceneQueriesTermsQuery *self, NSString *field, IOSObjectArray *terms) {
  OrgApacheLuceneQueriesTermsQuery_initWithNSString_withJavaUtilList_(self, field, JavaUtilArrays_asListWithNSObjectArray_(terms));
}

OrgApacheLuceneQueriesTermsQuery *new_OrgApacheLuceneQueriesTermsQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(NSString *field, IOSObjectArray *terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesTermsQuery, initWithNSString_withOrgApacheLuceneUtilBytesRefArray_, field, terms)
}

OrgApacheLuceneQueriesTermsQuery *create_OrgApacheLuceneQueriesTermsQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(NSString *field, IOSObjectArray *terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesTermsQuery, initWithNSString_withOrgApacheLuceneUtilBytesRefArray_, field, terms)
}

void OrgApacheLuceneQueriesTermsQuery_initWithOrgApacheLuceneIndexTermArray_(OrgApacheLuceneQueriesTermsQuery *self, IOSObjectArray *terms) {
  OrgApacheLuceneQueriesTermsQuery_initWithJavaUtilList_(self, JavaUtilArrays_asListWithNSObjectArray_(terms));
}

OrgApacheLuceneQueriesTermsQuery *new_OrgApacheLuceneQueriesTermsQuery_initWithOrgApacheLuceneIndexTermArray_(IOSObjectArray *terms) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesTermsQuery, initWithOrgApacheLuceneIndexTermArray_, terms)
}

OrgApacheLuceneQueriesTermsQuery *create_OrgApacheLuceneQueriesTermsQuery_initWithOrgApacheLuceneIndexTermArray_(IOSObjectArray *terms) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesTermsQuery, initWithOrgApacheLuceneIndexTermArray_, terms)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueriesTermsQuery)

@implementation OrgApacheLuceneQueriesTermsQuery_TermAndState

- (instancetype)initWithNSString:(NSString *)field
withOrgApacheLuceneIndexTermsEnum:(OrgApacheLuceneIndexTermsEnum *)termsEnum {
  OrgApacheLuceneQueriesTermsQuery_TermAndState_initWithNSString_withOrgApacheLuceneIndexTermsEnum_(self, field, termsEnum);
  return self;
}

- (void)dealloc {
  RELEASE_(field_);
  RELEASE_(termsEnum_);
  RELEASE_(term_);
  RELEASE_(state_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withOrgApacheLuceneIndexTermsEnum:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "termsEnum_", "LOrgApacheLuceneIndexTermsEnum;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "term_", "LOrgApacheLuceneUtilBytesRef;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "state_", "LOrgApacheLuceneIndexTermState;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "docFreq_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "totalTermFreq_", "J", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgApacheLuceneIndexTermsEnum;", "LJavaIoIOException;", "LOrgApacheLuceneQueriesTermsQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesTermsQuery_TermAndState = { "TermAndState", "org.apache.lucene.queries", ptrTable, methods, fields, 7, 0xa, 1, 6, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueriesTermsQuery_TermAndState;
}

@end

void OrgApacheLuceneQueriesTermsQuery_TermAndState_initWithNSString_withOrgApacheLuceneIndexTermsEnum_(OrgApacheLuceneQueriesTermsQuery_TermAndState *self, NSString *field, OrgApacheLuceneIndexTermsEnum *termsEnum) {
  NSObject_init(self);
  JreStrongAssign(&self->field_, field);
  JreStrongAssign(&self->termsEnum_, termsEnum);
  JreStrongAssign(&self->term_, OrgApacheLuceneUtilBytesRef_deepCopyOfWithOrgApacheLuceneUtilBytesRef_([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) term]));
  JreStrongAssign(&self->state_, [termsEnum termState]);
  self->docFreq_ = [termsEnum docFreq];
  self->totalTermFreq_ = [termsEnum totalTermFreq];
}

OrgApacheLuceneQueriesTermsQuery_TermAndState *new_OrgApacheLuceneQueriesTermsQuery_TermAndState_initWithNSString_withOrgApacheLuceneIndexTermsEnum_(NSString *field, OrgApacheLuceneIndexTermsEnum *termsEnum) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesTermsQuery_TermAndState, initWithNSString_withOrgApacheLuceneIndexTermsEnum_, field, termsEnum)
}

OrgApacheLuceneQueriesTermsQuery_TermAndState *create_OrgApacheLuceneQueriesTermsQuery_TermAndState_initWithNSString_withOrgApacheLuceneIndexTermsEnum_(NSString *field, OrgApacheLuceneIndexTermsEnum *termsEnum) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesTermsQuery_TermAndState, initWithNSString_withOrgApacheLuceneIndexTermsEnum_, field, termsEnum)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueriesTermsQuery_TermAndState)

@implementation OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet

- (instancetype)initWithOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)weight {
  OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchWeight_(self, weight);
  return self;
}

- (instancetype)initWithOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)bitset {
  OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchDocIdSet_(self, bitset);
  return self;
}

- (void)dealloc {
  RELEASE_(weight_);
  RELEASE_(set_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchWeight:);
  methods[1].selector = @selector(initWithOrgApacheLuceneSearchDocIdSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "weight_", "LOrgApacheLuceneSearchWeight;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "set_", "LOrgApacheLuceneSearchDocIdSet;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchWeight;", "LOrgApacheLuceneSearchDocIdSet;", "LOrgApacheLuceneQueriesTermsQuery;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet = { "WeightOrDocIdSet", "org.apache.lucene.queries", ptrTable, methods, fields, 7, 0xa, 2, 2, 2, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet;
}

@end

void OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchWeight_(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *self, OrgApacheLuceneSearchWeight *weight) {
  NSObject_init(self);
  JreStrongAssign(&self->weight_, OrgLukhnosPortmobileUtilObjects_requireNonNullWithId_(weight));
  JreStrongAssign(&self->set_, nil);
}

OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *new_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchWeight_(OrgApacheLuceneSearchWeight *weight) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet, initWithOrgApacheLuceneSearchWeight_, weight)
}

OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *create_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchWeight_(OrgApacheLuceneSearchWeight *weight) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet, initWithOrgApacheLuceneSearchWeight_, weight)
}

void OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *self, OrgApacheLuceneSearchDocIdSet *bitset) {
  NSObject_init(self);
  JreStrongAssign(&self->set_, bitset);
  JreStrongAssign(&self->weight_, nil);
}

OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *new_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneSearchDocIdSet *bitset) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet, initWithOrgApacheLuceneSearchDocIdSet_, bitset)
}

OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *create_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneSearchDocIdSet *bitset) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet, initWithOrgApacheLuceneSearchDocIdSet_, bitset)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet)

@implementation OrgApacheLuceneQueriesTermsQuery_1

- (instancetype)initWithOrgApacheLuceneQueriesTermsQuery:(OrgApacheLuceneQueriesTermsQuery *)outer$
                  withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)capture$0
                                             withBoolean:(jboolean)capture$1
                          withOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query {
  OrgApacheLuceneQueriesTermsQuery_1_initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_(self, outer$, capture$0, capture$1, query);
  return self;
}

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms {
}

- (OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *)rewriteWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  return OrgApacheLuceneQueriesTermsQuery_1_rewriteWithOrgApacheLuceneIndexLeafReaderContext_(self, context);
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set {
  return OrgApacheLuceneQueriesTermsQuery_1_scorerWithOrgApacheLuceneSearchDocIdSet_(self, set);
}

- (OrgApacheLuceneSearchBulkScorer *)bulkScorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *weightOrBitSet = OrgApacheLuceneQueriesTermsQuery_1_rewriteWithOrgApacheLuceneIndexLeafReaderContext_(self, context);
  if (((OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *) nil_chk(weightOrBitSet))->weight_ != nil) {
    return JreRetainedLocalValue([weightOrBitSet->weight_ bulkScorerWithOrgApacheLuceneIndexLeafReaderContext:context]);
  }
  else {
    OrgApacheLuceneSearchScorer *scorer = OrgApacheLuceneQueriesTermsQuery_1_scorerWithOrgApacheLuceneSearchDocIdSet_(self, weightOrBitSet->set_);
    if (scorer == nil) {
      return JreRetainedLocalValue(nil);
    }
    return create_OrgApacheLuceneSearchWeight_DefaultBulkScorer_initWithOrgApacheLuceneSearchScorer_(scorer);
  }
}

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context {
  OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *weightOrBitSet = OrgApacheLuceneQueriesTermsQuery_1_rewriteWithOrgApacheLuceneIndexLeafReaderContext_(self, context);
  if (((OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *) nil_chk(weightOrBitSet))->weight_ != nil) {
    return JreRetainedLocalValue([weightOrBitSet->weight_ scorerWithOrgApacheLuceneIndexLeafReaderContext:context]);
  }
  else {
    return OrgApacheLuceneQueriesTermsQuery_1_scorerWithOrgApacheLuceneSearchDocIdSet_(self, weightOrBitSet->set_);
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$searcher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LOrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet;", 0x2, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchScorer;", 0x2, 7, 8, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchBulkScorer;", 0x1, 9, 5, 6, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchScorer;", 0x1, 7, 5, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneQueriesTermsQuery:withOrgApacheLuceneSearchIndexSearcher:withBoolean:withOrgApacheLuceneSearchQuery:);
  methods[1].selector = @selector(extractTermsWithJavaUtilSet:);
  methods[2].selector = @selector(rewriteWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[3].selector = @selector(scorerWithOrgApacheLuceneSearchDocIdSet:);
  methods[4].selector = @selector(bulkScorerWithOrgApacheLuceneIndexLeafReaderContext:);
  methods[5].selector = @selector(scorerWithOrgApacheLuceneIndexLeafReaderContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheLuceneQueriesTermsQuery;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$searcher_", "LOrgApacheLuceneSearchIndexSearcher;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$needsScores_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneQueriesTermsQuery;LOrgApacheLuceneSearchIndexSearcher;ZLOrgApacheLuceneSearchQuery;", "extractTerms", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/apache/lucene/index/Term;>;)V", "rewrite", "LOrgApacheLuceneIndexLeafReaderContext;", "LJavaIoIOException;", "scorer", "LOrgApacheLuceneSearchDocIdSet;", "bulkScorer", "LOrgApacheLuceneQueriesTermsQuery;", "createWeightWithOrgApacheLuceneSearchIndexSearcher:withBoolean:" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesTermsQuery_1 = { "", "org.apache.lucene.queries", ptrTable, methods, fields, 7, 0x8010, 6, 3, 10, -1, 11, -1, -1 };
  return &_OrgApacheLuceneQueriesTermsQuery_1;
}

@end

void OrgApacheLuceneQueriesTermsQuery_1_initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneQueriesTermsQuery_1 *self, OrgApacheLuceneQueriesTermsQuery *outer$, OrgApacheLuceneSearchIndexSearcher *capture$0, jboolean capture$1, OrgApacheLuceneSearchQuery *query) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$searcher_, capture$0);
  self->val$needsScores_ = capture$1;
  OrgApacheLuceneSearchConstantScoreWeight_initWithOrgApacheLuceneSearchQuery_(self, query);
}

OrgApacheLuceneQueriesTermsQuery_1 *new_OrgApacheLuceneQueriesTermsQuery_1_initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneQueriesTermsQuery *outer$, OrgApacheLuceneSearchIndexSearcher *capture$0, jboolean capture$1, OrgApacheLuceneSearchQuery *query) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesTermsQuery_1, initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_, outer$, capture$0, capture$1, query)
}

OrgApacheLuceneQueriesTermsQuery_1 *create_OrgApacheLuceneQueriesTermsQuery_1_initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_(OrgApacheLuceneQueriesTermsQuery *outer$, OrgApacheLuceneSearchIndexSearcher *capture$0, jboolean capture$1, OrgApacheLuceneSearchQuery *query) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesTermsQuery_1, initWithOrgApacheLuceneQueriesTermsQuery_withOrgApacheLuceneSearchIndexSearcher_withBoolean_withOrgApacheLuceneSearchQuery_, outer$, capture$0, capture$1, query)
}

OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet *OrgApacheLuceneQueriesTermsQuery_1_rewriteWithOrgApacheLuceneIndexLeafReaderContext_(OrgApacheLuceneQueriesTermsQuery_1 *self, OrgApacheLuceneIndexLeafReaderContext *context) {
  OrgApacheLuceneIndexLeafReader *reader = [((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader];
  jint threshold = JavaLangMath_minWithInt_withInt_(OrgApacheLuceneQueriesTermsQuery_BOOLEAN_REWRITE_TERM_COUNT_THRESHOLD, OrgApacheLuceneSearchBooleanQuery_getMaxClauseCount());
  JreAssert([((OrgApacheLuceneIndexPrefixCodedTerms *) nil_chk(self->this$0_->termData_)) size] > threshold, @"Query should have been rewritten");
  id<JavaUtilList> matchingTerms = create_JavaUtilArrayList_initWithInt_(threshold);
  OrgApacheLuceneUtilDocIdSetBuilder *builder = nil;
  OrgApacheLuceneIndexFields *fields = [((OrgApacheLuceneIndexLeafReader *) nil_chk(reader)) fields];
  NSString *lastField = nil;
  OrgApacheLuceneIndexTerms *terms = nil;
  OrgApacheLuceneIndexTermsEnum *termsEnum = nil;
  OrgApacheLuceneIndexPostingsEnum *docs = nil;
  OrgApacheLuceneIndexPrefixCodedTerms_TermIterator *iterator = JreRetainedLocalValue([self->this$0_->termData_ iterator]);
  for (OrgApacheLuceneUtilBytesRef *term = JreRetainedLocalValue([((OrgApacheLuceneIndexPrefixCodedTerms_TermIterator *) nil_chk(iterator)) next]); term != nil; term = [iterator next]) {
    NSString *field = JreRetainedLocalValue([iterator field]);
    if (!JreStringEqualsEquals(field, lastField)) {
      terms = [((OrgApacheLuceneIndexFields *) nil_chk(fields)) termsWithNSString:field];
      if (terms == nil) {
        termsEnum = nil;
      }
      else {
        termsEnum = [terms iterator];
      }
      lastField = field;
    }
    if (termsEnum != nil && [termsEnum seekExactWithOrgApacheLuceneUtilBytesRef:term]) {
      if (matchingTerms == nil) {
        docs = [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:docs withInt:OrgApacheLuceneIndexPostingsEnum_NONE];
        [((OrgApacheLuceneUtilDocIdSetBuilder *) nil_chk(builder)) addWithOrgApacheLuceneSearchDocIdSetIterator:docs];
      }
      else if ([matchingTerms size] < threshold) {
        [matchingTerms addWithId:create_OrgApacheLuceneQueriesTermsQuery_TermAndState_initWithNSString_withOrgApacheLuceneIndexTermsEnum_(field, termsEnum)];
      }
      else {
        JreAssert([matchingTerms size] == threshold, @"org/apache/lucene/queries/TermsQuery.java:290 condition failed: assert matchingTerms.size() == threshold;");
        builder = create_OrgApacheLuceneUtilDocIdSetBuilder_initWithInt_([reader maxDoc]);
        docs = [termsEnum postingsWithOrgApacheLuceneIndexPostingsEnum:docs withInt:OrgApacheLuceneIndexPostingsEnum_NONE];
        [builder addWithOrgApacheLuceneSearchDocIdSetIterator:docs];
        for (OrgApacheLuceneQueriesTermsQuery_TermAndState * __strong t in matchingTerms) {
          [((OrgApacheLuceneIndexTermsEnum *) nil_chk(((OrgApacheLuceneQueriesTermsQuery_TermAndState *) nil_chk(t))->termsEnum_)) seekExactWithOrgApacheLuceneUtilBytesRef:t->term_ withOrgApacheLuceneIndexTermState:t->state_];
          docs = [t->termsEnum_ postingsWithOrgApacheLuceneIndexPostingsEnum:docs withInt:OrgApacheLuceneIndexPostingsEnum_NONE];
          [builder addWithOrgApacheLuceneSearchDocIdSetIterator:docs];
        }
        matchingTerms = nil;
      }
    }
  }
  if (matchingTerms != nil) {
    JreAssert(builder == nil, @"org/apache/lucene/queries/TermsQuery.java:304 condition failed: assert builder == null;");
    OrgApacheLuceneSearchBooleanQuery_Builder *bq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
    for (OrgApacheLuceneQueriesTermsQuery_TermAndState * __strong t in matchingTerms) {
      OrgApacheLuceneIndexTermContext *termContext = create_OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_([((OrgApacheLuceneSearchIndexSearcher *) nil_chk(self->val$searcher_)) getTopReaderContext]);
      [termContext register__WithOrgApacheLuceneIndexTermState:((OrgApacheLuceneQueriesTermsQuery_TermAndState *) nil_chk(t))->state_ withInt:context->ord_ withInt:t->docFreq_ withLong:t->totalTermFreq_];
      [bq addWithOrgApacheLuceneSearchQuery:create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(t->field_, t->term_), termContext) withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
    }
    OrgApacheLuceneSearchQuery *q = create_OrgApacheLuceneSearchConstantScoreQuery_initWithOrgApacheLuceneSearchQuery_([bq build]);
    [q setBoostWithFloat:[self score]];
    return create_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchWeight_([((OrgApacheLuceneSearchQuery *) nil_chk([((OrgApacheLuceneSearchIndexSearcher *) nil_chk(self->val$searcher_)) rewriteWithOrgApacheLuceneSearchQuery:q])) createWeightWithOrgApacheLuceneSearchIndexSearcher:self->val$searcher_ withBoolean:self->val$needsScores_]);
  }
  else {
    JreAssert(builder != nil, @"org/apache/lucene/queries/TermsQuery.java:315 condition failed: assert builder != null;");
    return create_OrgApacheLuceneQueriesTermsQuery_WeightOrDocIdSet_initWithOrgApacheLuceneSearchDocIdSet_([((OrgApacheLuceneUtilDocIdSetBuilder *) nil_chk(builder)) build]);
  }
}

OrgApacheLuceneSearchScorer *OrgApacheLuceneQueriesTermsQuery_1_scorerWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneQueriesTermsQuery_1 *self, OrgApacheLuceneSearchDocIdSet *set) {
  if (set == nil) {
    return nil;
  }
  OrgApacheLuceneSearchDocIdSetIterator *disi = [set iterator];
  if (disi == nil) {
    return nil;
  }
  return create_OrgApacheLuceneSearchConstantScoreScorer_initWithOrgApacheLuceneSearchWeight_withFloat_withOrgApacheLuceneSearchDocIdSetIterator_(self, [self score], disi);
}
