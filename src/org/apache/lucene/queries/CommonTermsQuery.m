//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queries/src/java/org/apache/lucene/queries/CommonTermsQuery.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/LeafReader.h"
#include "org/apache/lucene/index/LeafReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/queries/CommonTermsQuery.h"
#include "org/apache/lucene/search/BooleanClause.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/search/MatchNoDocsQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/ToStringUtils.h"

#if __has_feature(objc_arc)
#error "org/apache/lucene/queries/CommonTermsQuery must not be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgApacheLuceneQueriesCommonTermsQuery ()

- (jint)minNrShouldMatchWithFloat:(jfloat)minNrShouldMatch
                          withInt:(jint)numOptional;

@end

__attribute__((unused)) static jint OrgApacheLuceneQueriesCommonTermsQuery_minNrShouldMatchWithFloat_withInt_(OrgApacheLuceneQueriesCommonTermsQuery *self, jfloat minNrShouldMatch, jint numOptional);

@implementation OrgApacheLuceneQueriesCommonTermsQuery

- (instancetype)initWithOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)highFreqOccur
                    withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)lowFreqOccur
                                                       withFloat:(jfloat)maxTermFrequency {
  OrgApacheLuceneQueriesCommonTermsQuery_initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_(self, highFreqOccur, lowFreqOccur, maxTermFrequency);
  return self;
}

- (instancetype)initWithOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)highFreqOccur
                    withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)lowFreqOccur
                                                       withFloat:(jfloat)maxTermFrequency
                                                     withBoolean:(jboolean)disableCoord {
  OrgApacheLuceneQueriesCommonTermsQuery_initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_withBoolean_(self, highFreqOccur, lowFreqOccur, maxTermFrequency, disableCoord);
  return self;
}

- (void)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term {
  if (term == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Term must not be null");
  }
  [((id<JavaUtilList>) nil_chk(self->terms_)) addWithId:term];
}

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader {
  if ([((id<JavaUtilList>) nil_chk(self->terms_)) isEmpty]) {
    return create_OrgApacheLuceneSearchMatchNoDocsQuery_init();
  }
  else if ([self->terms_ size] == 1) {
    OrgApacheLuceneSearchQuery *tq = [self newTermQueryWithOrgApacheLuceneIndexTerm:[self->terms_ getWithInt:0] withOrgApacheLuceneIndexTermContext:nil];
    [((OrgApacheLuceneSearchQuery *) nil_chk(tq)) setBoostWithFloat:[self getBoost]];
    return tq;
  }
  id<JavaUtilList> leaves = [((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) leaves];
  jint maxDoc = [reader maxDoc];
  IOSObjectArray *contextArray = [IOSObjectArray arrayWithLength:[terms_ size] type:OrgApacheLuceneIndexTermContext_class_()];
  IOSObjectArray *queryTerms = [self->terms_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:OrgApacheLuceneIndexTerm_class_()]];
  [self collectTermContextWithOrgApacheLuceneIndexIndexReader:reader withJavaUtilList:leaves withOrgApacheLuceneIndexTermContextArray:contextArray withOrgApacheLuceneIndexTermArray:queryTerms];
  return [self buildQueryWithInt:maxDoc withOrgApacheLuceneIndexTermContextArray:contextArray withOrgApacheLuceneIndexTermArray:queryTerms];
}

- (jint)calcLowFreqMinimumNumberShouldMatchWithInt:(jint)numOptional {
  return OrgApacheLuceneQueriesCommonTermsQuery_minNrShouldMatchWithFloat_withInt_(self, lowFreqMinNrShouldMatch_, numOptional);
}

- (jint)calcHighFreqMinimumNumberShouldMatchWithInt:(jint)numOptional {
  return OrgApacheLuceneQueriesCommonTermsQuery_minNrShouldMatchWithFloat_withInt_(self, highFreqMinNrShouldMatch_, numOptional);
}

- (jint)minNrShouldMatchWithFloat:(jfloat)minNrShouldMatch
                          withInt:(jint)numOptional {
  return OrgApacheLuceneQueriesCommonTermsQuery_minNrShouldMatchWithFloat_withInt_(self, minNrShouldMatch, numOptional);
}

- (OrgApacheLuceneSearchQuery *)buildQueryWithInt:(jint)maxDoc
         withOrgApacheLuceneIndexTermContextArray:(IOSObjectArray *)contextArray
                withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)queryTerms {
  id<JavaUtilList> lowFreqQueries = create_JavaUtilArrayList_init();
  id<JavaUtilList> highFreqQueries = create_JavaUtilArrayList_init();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(queryTerms))->size_; i++) {
    OrgApacheLuceneIndexTermContext *termContext = IOSObjectArray_Get(nil_chk(contextArray), i);
    if (termContext == nil) {
      [lowFreqQueries addWithId:[self newTermQueryWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(queryTerms, i) withOrgApacheLuceneIndexTermContext:nil]];
    }
    else {
      if ((maxTermFrequency_ >= 1.0f && [termContext docFreq] > maxTermFrequency_) || ([termContext docFreq] > JreFpToInt(JavaLangMath_ceilWithDouble_(maxTermFrequency_ * (jfloat) maxDoc)))) {
        [highFreqQueries addWithId:[self newTermQueryWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(queryTerms, i) withOrgApacheLuceneIndexTermContext:termContext]];
      }
      else {
        [lowFreqQueries addWithId:[self newTermQueryWithOrgApacheLuceneIndexTerm:IOSObjectArray_Get(queryTerms, i) withOrgApacheLuceneIndexTermContext:termContext]];
      }
    }
  }
  jint numLowFreqClauses = [lowFreqQueries size];
  jint numHighFreqClauses = [highFreqQueries size];
  OrgApacheLuceneSearchBooleanClause_Occur *lowFreqOccur = JreRetainedLocalValue(self->lowFreqOccur_);
  OrgApacheLuceneSearchBooleanClause_Occur *highFreqOccur = JreRetainedLocalValue(self->highFreqOccur_);
  jint lowFreqMinShouldMatch = 0;
  jint highFreqMinShouldMatch = 0;
  if (lowFreqOccur == JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD) && numLowFreqClauses > 0) {
    lowFreqMinShouldMatch = [self calcLowFreqMinimumNumberShouldMatchWithInt:numLowFreqClauses];
  }
  if (highFreqOccur == JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD) && numHighFreqClauses > 0) {
    highFreqMinShouldMatch = [self calcHighFreqMinimumNumberShouldMatchWithInt:numHighFreqClauses];
  }
  if ([lowFreqQueries isEmpty]) {
    if (highFreqMinShouldMatch == 0 && highFreqOccur != JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST)) {
      highFreqOccur = JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST);
    }
  }
  OrgApacheLuceneSearchBooleanQuery_Builder *builder = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
  [builder setDisableCoordWithBoolean:true];
  if ([lowFreqQueries isEmpty] == false) {
    OrgApacheLuceneSearchBooleanQuery_Builder *lowFreq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
    [lowFreq setDisableCoordWithBoolean:disableCoord_];
    for (OrgApacheLuceneSearchQuery * __strong query in lowFreqQueries) {
      [lowFreq addWithOrgApacheLuceneSearchQuery:query withOrgApacheLuceneSearchBooleanClause_Occur:lowFreqOccur];
    }
    [lowFreq setMinimumNumberShouldMatchWithInt:lowFreqMinShouldMatch];
    OrgApacheLuceneSearchQuery *lowFreqQuery = JreRetainedLocalValue([lowFreq build]);
    [((OrgApacheLuceneSearchQuery *) nil_chk(lowFreqQuery)) setBoostWithFloat:lowFreqBoost_];
    [builder addWithOrgApacheLuceneSearchQuery:lowFreqQuery withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST)];
  }
  if ([highFreqQueries isEmpty] == false) {
    OrgApacheLuceneSearchBooleanQuery_Builder *highFreq = create_OrgApacheLuceneSearchBooleanQuery_Builder_init();
    [highFreq setDisableCoordWithBoolean:disableCoord_];
    for (OrgApacheLuceneSearchQuery * __strong query in highFreqQueries) {
      [highFreq addWithOrgApacheLuceneSearchQuery:query withOrgApacheLuceneSearchBooleanClause_Occur:highFreqOccur];
    }
    [highFreq setMinimumNumberShouldMatchWithInt:highFreqMinShouldMatch];
    OrgApacheLuceneSearchQuery *highFreqQuery = JreRetainedLocalValue([highFreq build]);
    [((OrgApacheLuceneSearchQuery *) nil_chk(highFreqQuery)) setBoostWithFloat:highFreqBoost_];
    [builder addWithOrgApacheLuceneSearchQuery:highFreqQuery withOrgApacheLuceneSearchBooleanClause_Occur:JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, SHOULD)];
  }
  OrgApacheLuceneSearchQuery *rewritten = JreRetainedLocalValue([builder build]);
  [((OrgApacheLuceneSearchQuery *) nil_chk(rewritten)) setBoostWithFloat:[self getBoost]];
  return rewritten;
}

- (void)collectTermContextWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                             withJavaUtilList:(id<JavaUtilList>)leaves
                     withOrgApacheLuceneIndexTermContextArray:(IOSObjectArray *)contextArray
                            withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)queryTerms {
  OrgApacheLuceneIndexTermsEnum *termsEnum = nil;
  for (OrgApacheLuceneIndexLeafReaderContext * __strong context in nil_chk(leaves)) {
    OrgApacheLuceneIndexFields *fields = [((OrgApacheLuceneIndexLeafReader *) nil_chk([((OrgApacheLuceneIndexLeafReaderContext *) nil_chk(context)) reader])) fields];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(queryTerms))->size_; i++) {
      OrgApacheLuceneIndexTerm *term = IOSObjectArray_Get(queryTerms, i);
      OrgApacheLuceneIndexTermContext *termContext = IOSObjectArray_Get(nil_chk(contextArray), i);
      OrgApacheLuceneIndexTerms *terms = [((OrgApacheLuceneIndexFields *) nil_chk(fields)) termsWithNSString:[((OrgApacheLuceneIndexTerm *) nil_chk(term)) field]];
      if (terms == nil) {
        continue;
      }
      termsEnum = [terms iterator];
      JreAssert(termsEnum != nil, @"org/apache/lucene/queries/CommonTermsQuery.java:263 condition failed: assert termsEnum != null;");
      if (JreObjectEqualsEquals(termsEnum, JreLoadStatic(OrgApacheLuceneIndexTermsEnum, EMPTY))) continue;
      if ([((OrgApacheLuceneIndexTermsEnum *) nil_chk(termsEnum)) seekExactWithOrgApacheLuceneUtilBytesRef:[term bytes]]) {
        if (termContext == nil) {
          IOSObjectArray_SetAndConsume(contextArray, i, new_OrgApacheLuceneIndexTermContext_initWithOrgApacheLuceneIndexIndexReaderContext_withOrgApacheLuceneIndexTermState_withInt_withInt_withLong_([((OrgApacheLuceneIndexIndexReader *) nil_chk(reader)) getContext], [termsEnum termState], context->ord_, [termsEnum docFreq], [termsEnum totalTermFreq]));
        }
        else {
          [termContext register__WithOrgApacheLuceneIndexTermState:[termsEnum termState] withInt:context->ord_ withInt:[termsEnum docFreq] withLong:[termsEnum totalTermFreq]];
        }
      }
    }
  }
}

- (jboolean)isCoordDisabled {
  return disableCoord_;
}

- (void)setLowFreqMinimumNumberShouldMatchWithFloat:(jfloat)min {
  self->lowFreqMinNrShouldMatch_ = min;
}

- (jfloat)getLowFreqMinimumNumberShouldMatch {
  return lowFreqMinNrShouldMatch_;
}

- (void)setHighFreqMinimumNumberShouldMatchWithFloat:(jfloat)min {
  self->highFreqMinNrShouldMatch_ = min;
}

- (jfloat)getHighFreqMinimumNumberShouldMatch {
  return highFreqMinNrShouldMatch_;
}

- (NSString *)toStringWithNSString:(NSString *)field {
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_init();
  jboolean needParens = ([self getBoost] != 1.0) || ([self getLowFreqMinimumNumberShouldMatch] > 0);
  if (needParens) {
    [buffer appendWithNSString:@"("];
  }
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(terms_)) size]; i++) {
    OrgApacheLuceneIndexTerm *t = JreRetainedLocalValue([terms_ getWithInt:i]);
    [buffer appendWithNSString:[((OrgApacheLuceneSearchQuery *) nil_chk([self newTermQueryWithOrgApacheLuceneIndexTerm:t withOrgApacheLuceneIndexTermContext:nil])) description]];
    if (i != [terms_ size] - 1) [buffer appendWithNSString:@", "];
  }
  if (needParens) {
    [buffer appendWithNSString:@")"];
  }
  if ([self getLowFreqMinimumNumberShouldMatch] > 0 || [self getHighFreqMinimumNumberShouldMatch] > 0) {
    [buffer appendWithChar:'~'];
    [buffer appendWithNSString:@"("];
    [buffer appendWithFloat:[self getLowFreqMinimumNumberShouldMatch]];
    [buffer appendWithFloat:[self getHighFreqMinimumNumberShouldMatch]];
    [buffer appendWithNSString:@")"];
  }
  if ([self getBoost] != 1.0f) {
    [buffer appendWithNSString:OrgApacheLuceneUtilToStringUtils_boostWithFloat_([self getBoost])];
  }
  return [buffer description];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = ((jint) [super hash]);
  result = prime * result + (disableCoord_ ? 1231 : 1237);
  result = prime * result + JavaLangFloat_floatToIntBitsWithFloat_(highFreqBoost_);
  result = prime * result + ((highFreqOccur_ == nil) ? 0 : ((jint) [((OrgApacheLuceneSearchBooleanClause_Occur *) nil_chk(highFreqOccur_)) hash]));
  result = prime * result + JavaLangFloat_floatToIntBitsWithFloat_(lowFreqBoost_);
  result = prime * result + ((lowFreqOccur_ == nil) ? 0 : ((jint) [((OrgApacheLuceneSearchBooleanClause_Occur *) nil_chk(lowFreqOccur_)) hash]));
  result = prime * result + JavaLangFloat_floatToIntBitsWithFloat_(maxTermFrequency_);
  result = prime * result + JavaLangFloat_floatToIntBitsWithFloat_(lowFreqMinNrShouldMatch_);
  result = prime * result + JavaLangFloat_floatToIntBitsWithFloat_(highFreqMinNrShouldMatch_);
  result = prime * result + ((terms_ == nil) ? 0 : ((jint) [((id<JavaUtilList>) nil_chk(terms_)) hash]));
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (JreObjectEqualsEquals(self, obj)) return true;
  if (![super isEqual:obj]) return false;
  if (!JreObjectEqualsEquals([self java_getClass], [nil_chk(obj) java_getClass])) return false;
  OrgApacheLuceneQueriesCommonTermsQuery *other = (OrgApacheLuceneQueriesCommonTermsQuery *) cast_chk(obj, [OrgApacheLuceneQueriesCommonTermsQuery class]);
  if (disableCoord_ != other->disableCoord_) return false;
  if (JavaLangFloat_floatToIntBitsWithFloat_(highFreqBoost_) != JavaLangFloat_floatToIntBitsWithFloat_(other->highFreqBoost_)) return false;
  if (highFreqOccur_ != other->highFreqOccur_) return false;
  if (JavaLangFloat_floatToIntBitsWithFloat_(lowFreqBoost_) != JavaLangFloat_floatToIntBitsWithFloat_(other->lowFreqBoost_)) return false;
  if (lowFreqOccur_ != other->lowFreqOccur_) return false;
  if (JavaLangFloat_floatToIntBitsWithFloat_(maxTermFrequency_) != JavaLangFloat_floatToIntBitsWithFloat_(other->maxTermFrequency_)) return false;
  if (lowFreqMinNrShouldMatch_ != other->lowFreqMinNrShouldMatch_) return false;
  if (highFreqMinNrShouldMatch_ != other->highFreqMinNrShouldMatch_) return false;
  if (terms_ == nil) {
    if (other->terms_ != nil) return false;
  }
  else if (![terms_ isEqual:other->terms_]) return false;
  return true;
}

- (OrgApacheLuceneSearchQuery *)newTermQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                     withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)context {
  return context == nil ? create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_(term) : create_OrgApacheLuceneSearchTermQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneIndexTermContext_(term, context);
}

- (void)dealloc {
  RELEASE_(terms_);
  RELEASE_(lowFreqOccur_);
  RELEASE_(highFreqOccur_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "I", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 6, 16, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "LOrgApacheLuceneSearchQuery;", 0x4, 25, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgApacheLuceneSearchBooleanClause_Occur:withOrgApacheLuceneSearchBooleanClause_Occur:withFloat:);
  methods[1].selector = @selector(initWithOrgApacheLuceneSearchBooleanClause_Occur:withOrgApacheLuceneSearchBooleanClause_Occur:withFloat:withBoolean:);
  methods[2].selector = @selector(addWithOrgApacheLuceneIndexTerm:);
  methods[3].selector = @selector(rewriteWithOrgApacheLuceneIndexIndexReader:);
  methods[4].selector = @selector(calcLowFreqMinimumNumberShouldMatchWithInt:);
  methods[5].selector = @selector(calcHighFreqMinimumNumberShouldMatchWithInt:);
  methods[6].selector = @selector(minNrShouldMatchWithFloat:withInt:);
  methods[7].selector = @selector(buildQueryWithInt:withOrgApacheLuceneIndexTermContextArray:withOrgApacheLuceneIndexTermArray:);
  methods[8].selector = @selector(collectTermContextWithOrgApacheLuceneIndexIndexReader:withJavaUtilList:withOrgApacheLuceneIndexTermContextArray:withOrgApacheLuceneIndexTermArray:);
  methods[9].selector = @selector(isCoordDisabled);
  methods[10].selector = @selector(setLowFreqMinimumNumberShouldMatchWithFloat:);
  methods[11].selector = @selector(getLowFreqMinimumNumberShouldMatch);
  methods[12].selector = @selector(setHighFreqMinimumNumberShouldMatchWithFloat:);
  methods[13].selector = @selector(getHighFreqMinimumNumberShouldMatch);
  methods[14].selector = @selector(toStringWithNSString:);
  methods[15].selector = @selector(hash);
  methods[16].selector = @selector(isEqual:);
  methods[17].selector = @selector(newTermQueryWithOrgApacheLuceneIndexTerm:withOrgApacheLuceneIndexTermContext:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "terms_", "LJavaUtilList;", .constantValue.asLong = 0, 0x14, -1, -1, 27, -1 },
    { "disableCoord_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "maxTermFrequency_", "F", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "lowFreqOccur_", "LOrgApacheLuceneSearchBooleanClause_Occur;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "highFreqOccur_", "LOrgApacheLuceneSearchBooleanClause_Occur;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "lowFreqBoost_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "highFreqBoost_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "lowFreqMinNrShouldMatch_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "highFreqMinNrShouldMatch_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheLuceneSearchBooleanClause_Occur;LOrgApacheLuceneSearchBooleanClause_Occur;F", "LOrgApacheLuceneSearchBooleanClause_Occur;LOrgApacheLuceneSearchBooleanClause_Occur;FZ", "add", "LOrgApacheLuceneIndexTerm;", "rewrite", "LOrgApacheLuceneIndexIndexReader;", "LJavaIoIOException;", "calcLowFreqMinimumNumberShouldMatch", "I", "calcHighFreqMinimumNumberShouldMatch", "minNrShouldMatch", "FI", "buildQuery", "I[LOrgApacheLuceneIndexTermContext;[LOrgApacheLuceneIndexTerm;", "collectTermContext", "LOrgApacheLuceneIndexIndexReader;LJavaUtilList;[LOrgApacheLuceneIndexTermContext;[LOrgApacheLuceneIndexTerm;", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/List<Lorg/apache/lucene/index/LeafReaderContext;>;[Lorg/apache/lucene/index/TermContext;[Lorg/apache/lucene/index/Term;)V", "setLowFreqMinimumNumberShouldMatch", "F", "setHighFreqMinimumNumberShouldMatch", "toString", "LNSString;", "hashCode", "equals", "LNSObject;", "newTermQuery", "LOrgApacheLuceneIndexTerm;LOrgApacheLuceneIndexTermContext;", "Ljava/util/List<Lorg/apache/lucene/index/Term;>;" };
  static const J2ObjcClassInfo _OrgApacheLuceneQueriesCommonTermsQuery = { "CommonTermsQuery", "org.apache.lucene.queries", ptrTable, methods, fields, 7, 0x1, 18, 9, -1, -1, -1, -1, -1 };
  return &_OrgApacheLuceneQueriesCommonTermsQuery;
}

@end

void OrgApacheLuceneQueriesCommonTermsQuery_initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_(OrgApacheLuceneQueriesCommonTermsQuery *self, OrgApacheLuceneSearchBooleanClause_Occur *highFreqOccur, OrgApacheLuceneSearchBooleanClause_Occur *lowFreqOccur, jfloat maxTermFrequency) {
  OrgApacheLuceneQueriesCommonTermsQuery_initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_withBoolean_(self, highFreqOccur, lowFreqOccur, maxTermFrequency, false);
}

OrgApacheLuceneQueriesCommonTermsQuery *new_OrgApacheLuceneQueriesCommonTermsQuery_initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_(OrgApacheLuceneSearchBooleanClause_Occur *highFreqOccur, OrgApacheLuceneSearchBooleanClause_Occur *lowFreqOccur, jfloat maxTermFrequency) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesCommonTermsQuery, initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_, highFreqOccur, lowFreqOccur, maxTermFrequency)
}

OrgApacheLuceneQueriesCommonTermsQuery *create_OrgApacheLuceneQueriesCommonTermsQuery_initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_(OrgApacheLuceneSearchBooleanClause_Occur *highFreqOccur, OrgApacheLuceneSearchBooleanClause_Occur *lowFreqOccur, jfloat maxTermFrequency) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesCommonTermsQuery, initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_, highFreqOccur, lowFreqOccur, maxTermFrequency)
}

void OrgApacheLuceneQueriesCommonTermsQuery_initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_withBoolean_(OrgApacheLuceneQueriesCommonTermsQuery *self, OrgApacheLuceneSearchBooleanClause_Occur *highFreqOccur, OrgApacheLuceneSearchBooleanClause_Occur *lowFreqOccur, jfloat maxTermFrequency, jboolean disableCoord) {
  OrgApacheLuceneSearchQuery_init(self);
  JreStrongAssignAndConsume(&self->terms_, new_JavaUtilArrayList_init());
  self->lowFreqBoost_ = 1.0f;
  self->highFreqBoost_ = 1.0f;
  self->lowFreqMinNrShouldMatch_ = 0;
  self->highFreqMinNrShouldMatch_ = 0;
  if (highFreqOccur == JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST_NOT)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"highFreqOccur should be MUST or SHOULD but was MUST_NOT");
  }
  if (lowFreqOccur == JreLoadEnum(OrgApacheLuceneSearchBooleanClause_Occur, MUST_NOT)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"lowFreqOccur should be MUST or SHOULD but was MUST_NOT");
  }
  self->disableCoord_ = disableCoord;
  JreStrongAssign(&self->highFreqOccur_, highFreqOccur);
  JreStrongAssign(&self->lowFreqOccur_, lowFreqOccur);
  self->maxTermFrequency_ = maxTermFrequency;
}

OrgApacheLuceneQueriesCommonTermsQuery *new_OrgApacheLuceneQueriesCommonTermsQuery_initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_withBoolean_(OrgApacheLuceneSearchBooleanClause_Occur *highFreqOccur, OrgApacheLuceneSearchBooleanClause_Occur *lowFreqOccur, jfloat maxTermFrequency, jboolean disableCoord) {
  J2OBJC_NEW_IMPL(OrgApacheLuceneQueriesCommonTermsQuery, initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_withBoolean_, highFreqOccur, lowFreqOccur, maxTermFrequency, disableCoord)
}

OrgApacheLuceneQueriesCommonTermsQuery *create_OrgApacheLuceneQueriesCommonTermsQuery_initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_withBoolean_(OrgApacheLuceneSearchBooleanClause_Occur *highFreqOccur, OrgApacheLuceneSearchBooleanClause_Occur *lowFreqOccur, jfloat maxTermFrequency, jboolean disableCoord) {
  J2OBJC_CREATE_IMPL(OrgApacheLuceneQueriesCommonTermsQuery, initWithOrgApacheLuceneSearchBooleanClause_Occur_withOrgApacheLuceneSearchBooleanClause_Occur_withFloat_withBoolean_, highFreqOccur, lowFreqOccur, maxTermFrequency, disableCoord)
}

jint OrgApacheLuceneQueriesCommonTermsQuery_minNrShouldMatchWithFloat_withInt_(OrgApacheLuceneQueriesCommonTermsQuery *self, jfloat minNrShouldMatch, jint numOptional) {
  if (minNrShouldMatch >= 1.0f || minNrShouldMatch == 0.0f) {
    return JreFpToInt(minNrShouldMatch);
  }
  return JavaLangMath_roundWithFloat_(minNrShouldMatch * numOptional);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheLuceneQueriesCommonTermsQuery)
