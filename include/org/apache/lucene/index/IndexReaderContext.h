//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/IndexReaderContext.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneIndexIndexReaderContext")
#ifdef RESTRICT_OrgApacheLuceneIndexIndexReaderContext
#define INCLUDE_ALL_OrgApacheLuceneIndexIndexReaderContext 0
#else
#define INCLUDE_ALL_OrgApacheLuceneIndexIndexReaderContext 1
#endif
#undef RESTRICT_OrgApacheLuceneIndexIndexReaderContext

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneIndexIndexReaderContext_) && (INCLUDE_ALL_OrgApacheLuceneIndexIndexReaderContext || defined(INCLUDE_OrgApacheLuceneIndexIndexReaderContext))
#define OrgApacheLuceneIndexIndexReaderContext_

@class OrgApacheLuceneIndexCompositeReaderContext;
@class OrgApacheLuceneIndexIndexReader;
@protocol JavaUtilList;

/*!
 @brief A struct like class that represents a hierarchical relationship between 
 <code>IndexReader</code> instances.
 */
@interface OrgApacheLuceneIndexIndexReaderContext : NSObject {
 @public
  /*!
   @brief The reader context for this reader's immediate parent, or null if none
   */
  WEAK_ OrgApacheLuceneIndexCompositeReaderContext *parent_;
  /*!
   @brief <code>true</code> if this context struct represents the top level reader within the hierarchical context
   */
  jboolean isTopLevel_;
  /*!
   @brief the doc base for this reader in the parent, <tt>0</tt> if parent is null
   */
  jint docBaseInParent_;
  /*!
   @brief the ord for this reader in the parent, <tt>0</tt> if parent is null
   */
  jint ordInParent_;
}

#pragma mark Public

/*!
 @brief Returns the context's children iff this context is a composite context
  otherwise <code>null</code>.
 */
- (id<JavaUtilList>)children;

/*!
 @brief Returns the context's leaves if this context is a top-level context.
 For convenience, if this is an <code>LeafReaderContext</code> this
  returns itself as the only leaf. 
 <p>Note: this is convenience method since leaves can always be obtained by
  walking the context tree using <code>children()</code>.
 @throw UnsupportedOperationExceptionif this is not a top-level context.
 - seealso: #children()
 */
- (id<JavaUtilList>)leaves;

/*!
 @brief Returns the <code>IndexReader</code>, this context represents.
 */
- (OrgApacheLuceneIndexIndexReader *)reader;

#pragma mark Package-Private

- (instancetype __nonnull)initWithOrgApacheLuceneIndexCompositeReaderContext:(OrgApacheLuceneIndexCompositeReaderContext *)parent
                                                                     withInt:(jint)ordInParent
                                                                     withInt:(jint)docBaseInParent;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexReaderContext)

FOUNDATION_EXPORT void OrgApacheLuceneIndexIndexReaderContext_initWithOrgApacheLuceneIndexCompositeReaderContext_withInt_withInt_(OrgApacheLuceneIndexIndexReaderContext *self, OrgApacheLuceneIndexCompositeReaderContext *parent, jint ordInParent, jint docBaseInParent);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexReaderContext)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneIndexIndexReaderContext")
