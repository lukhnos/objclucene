//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneIndexDocumentsWriterPerThreadPool")
#ifdef RESTRICT_OrgApacheLuceneIndexDocumentsWriterPerThreadPool
#define INCLUDE_ALL_OrgApacheLuceneIndexDocumentsWriterPerThreadPool 0
#else
#define INCLUDE_ALL_OrgApacheLuceneIndexDocumentsWriterPerThreadPool 1
#endif
#undef RESTRICT_OrgApacheLuceneIndexDocumentsWriterPerThreadPool

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_) && (INCLUDE_ALL_OrgApacheLuceneIndexDocumentsWriterPerThreadPool || defined(INCLUDE_OrgApacheLuceneIndexDocumentsWriterPerThreadPool))
#define OrgApacheLuceneIndexDocumentsWriterPerThreadPool_

@class JavaLangThread;
@class OrgApacheLuceneIndexDocumentsWriter;
@class OrgApacheLuceneIndexDocumentsWriterPerThread;
@class OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState;

/*!
 @brief <code>DocumentsWriterPerThreadPool</code> controls <code>ThreadState</code> instances
  and their thread assignments during indexing.Each <code>ThreadState</code> holds
  a reference to a <code>DocumentsWriterPerThread</code> that is once a 
 <code>ThreadState</code> is obtained from the pool exclusively used for indexing a
  single document by the obtaining thread.
 Each indexing thread must obtain
  such a <code>ThreadState</code> to make progress. Depending on the 
 <code>DocumentsWriterPerThreadPool</code> implementation <code>ThreadState</code>
  assignments might differ from document to document. 
 <p>
  Once a <code>DocumentsWriterPerThread</code> is selected for flush the thread pool
  is reusing the flushing <code>DocumentsWriterPerThread</code>s ThreadState with a
  new <code>DocumentsWriterPerThread</code> instance. 
 </p>
 */
@interface OrgApacheLuceneIndexDocumentsWriterPerThreadPool : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivate;

- (void)clearAbort;

/*!
 @brief Returns the active number of <code>ThreadState</code> instances.
 */
- (jint)getActiveThreadStateCount;

/*!
 @brief This method is used by DocumentsWriter/FlushControl to obtain a ThreadState to do an indexing operation (add/updateDocument).
 */
- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)getAndLockWithJavaLangThread:(JavaLangThread *)requestingThread
                                                       withOrgApacheLuceneIndexDocumentsWriter:(OrgApacheLuceneIndexDocumentsWriter *)documentsWriter;

- (jint)getMaxThreadStates;

/*!
 @brief Returns the <i>i</i>th active <code>ThreadState</code> where <i>i</i> is the
  given ord.
 @param ord the ordinal of the 
 <code>ThreadState</code>
 @return the <i>i</i>th active <code>ThreadState</code> where <i>i</i> is the
          given ord.
 */
- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)getThreadStateWithInt:(jint)ord;

/*!
 @brief Returns the ThreadState with the minimum estimated number of threads
  waiting to acquire its lock or <code>null</code> if no <code>ThreadState</code>
  is yet visible to the calling thread.
 */
- (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)minContendedThreadState;

- (void)recycleWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dwpt;

- (void)release__WithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)state;

- (OrgApacheLuceneIndexDocumentsWriterPerThread *)resetWithOrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState:(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *)threadState;

- (void)setAbort;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterPerThreadPool)

FOUNDATION_EXPORT void OrgApacheLuceneIndexDocumentsWriterPerThreadPool_initPackagePrivate(OrgApacheLuceneIndexDocumentsWriterPerThreadPool *self);

FOUNDATION_EXPORT OrgApacheLuceneIndexDocumentsWriterPerThreadPool *new_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneIndexDocumentsWriterPerThreadPool *create_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_initPackagePrivate(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDocumentsWriterPerThreadPool)

#endif

#if !defined (OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_) && (INCLUDE_ALL_OrgApacheLuceneIndexDocumentsWriterPerThreadPool || defined(INCLUDE_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState))
#define OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_

#define RESTRICT_JavaUtilConcurrentLocksReentrantLock 1
#define INCLUDE_JavaUtilConcurrentLocksReentrantLock 1
#include "java/util/concurrent/locks/ReentrantLock.h"

@class OrgApacheLuceneIndexDocumentsWriterPerThread;

/*!
 @brief <code>ThreadState</code> references and guards a 
 <code>DocumentsWriterPerThread</code> instance that is used during indexing to
  build a in-memory index segment.
 <code>ThreadState</code> also holds all flush
  related per-thread data controlled by <code>DocumentsWriterFlushControl</code>.
  <p>
  A <code>ThreadState</code>, its methods and members should only accessed by one
  thread a time. Users must acquire the lock via <code>ThreadState.lock()</code>
  and release the lock in a finally block via <code>ThreadState.unlock()</code>
  before accessing the state.
 */
@interface OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState : JavaUtilConcurrentLocksReentrantLock {
 @public
  OrgApacheLuceneIndexDocumentsWriterPerThread *dwpt_;
  volatile_jboolean flushPending_;
  jlong bytesUsed_;
}

#pragma mark Public

/*!
 @brief Returns the number of currently active bytes in this ThreadState's 
 <code>DocumentsWriterPerThread</code>
 */
- (jlong)getBytesUsedPerThread;

/*!
 @brief Returns this <code>ThreadState</code>s <code>DocumentsWriterPerThread</code>
 */
- (OrgApacheLuceneIndexDocumentsWriterPerThread *)getDocumentsWriterPerThread;

/*!
 @brief Returns <code>true</code> iff this <code>ThreadState</code> is marked as flush
  pending otherwise <code>false</code>
 */
- (jboolean)isFlushPending;

#pragma mark Package-Private

- (instancetype __nonnull)initWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)dpwt;

- (jboolean)isInitialized;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState, dwpt_, OrgApacheLuceneIndexDocumentsWriterPerThread *)

FOUNDATION_EXPORT void OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *self, OrgApacheLuceneIndexDocumentsWriterPerThread *dpwt);

FOUNDATION_EXPORT OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *new_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriterPerThread *dpwt) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState *create_OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState_initWithOrgApacheLuceneIndexDocumentsWriterPerThread_(OrgApacheLuceneIndexDocumentsWriterPerThread *dpwt);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexDocumentsWriterPerThreadPool_ThreadState)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneIndexDocumentsWriterPerThreadPool")
