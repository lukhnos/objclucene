//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/Term.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneIndexTerm")
#ifdef RESTRICT_OrgApacheLuceneIndexTerm
#define INCLUDE_ALL_OrgApacheLuceneIndexTerm 0
#else
#define INCLUDE_ALL_OrgApacheLuceneIndexTerm 1
#endif
#undef RESTRICT_OrgApacheLuceneIndexTerm

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneIndexTerm_) && (INCLUDE_ALL_OrgApacheLuceneIndexTerm || defined(INCLUDE_OrgApacheLuceneIndexTerm))
#define OrgApacheLuceneIndexTerm_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class OrgApacheLuceneUtilBytesRef;

/*!
 @brief A Term represents a word from text.This is the unit of search.
 It is
   composed of two elements, the text of the word, as a string, and the name of
   the field that the text occurred in.
   Note that terms may represent more than words from text fields, but also
   things like dates, email addresses, urls, etc.
 */
@interface OrgApacheLuceneIndexTerm : NSObject < JavaLangComparable > {
 @public
  NSString *field_;
  OrgApacheLuceneUtilBytesRef *bytes_;
}

#pragma mark Public

/*!
 @brief Constructs a Term with the given field and empty text.
 This serves two purposes: 1) reuse of a Term with the same field.
  2) pattern for a query.
 @param fld field's name
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fld;

/*!
 @brief Constructs a Term with the given field and bytes.
 <p>Note that a null field or null bytes value results in undefined
  behavior for most Lucene APIs that accept a Term parameter.  
 <p>WARNING: the provided BytesRef is not copied, but used directly.
  Therefore the bytes should not be modified after construction, for
  example, you should clone a copy by <code>BytesRef.deepCopyOf</code>
  rather than pass reused bytes from a TermsEnum.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fld
           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes;

/*!
 @brief Constructs a Term with the given field and text.
 <p>Note that a null field or null text value results in undefined
  behavior for most Lucene APIs that accept a Term parameter.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fld
                              withNSString:(NSString *)text;

/*!
 @brief Returns the bytes of this term.
 */
- (OrgApacheLuceneUtilBytesRef *)bytes;

/*!
 @brief Compares two terms, returning a negative integer if this
     term belongs before the argument, zero if this term is equal to the
     argument, and a positive integer if this term belongs after the argument.
 The ordering of terms is first by field, then by text.
 */
- (jint)compareToWithId:(OrgApacheLuceneIndexTerm *)other;

- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the field of this term.The field indicates
     the part of a document which this term came from.
 */
- (NSString *)field;

- (NSUInteger)hash;

/*!
 @brief Returns the text of this term.In the case of words, this is simply the
     text of the word.
 In the case of dates and other types, this is an
     encoding of the object as a string.
 */
- (NSString *)text;

- (NSString *)description;

/*!
 @brief Returns human-readable form of the term text.If the term is not unicode,
  the raw bytes will be printed instead.
 */
+ (NSString *)toStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)termText;

#pragma mark Package-Private

/*!
 @brief Resets the field and text of a Term.
 <p>WARNING: the provided BytesRef is not copied, but used directly.
  Therefore the bytes should not be modified after construction, for
  example, you should clone a copy rather than pass reused bytes from
  a TermsEnum.
 */
- (void)setWithNSString:(NSString *)fld
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexTerm)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTerm, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTerm, bytes_, OrgApacheLuceneUtilBytesRef *)

FOUNDATION_EXPORT void OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneIndexTerm *self, NSString *fld, OrgApacheLuceneUtilBytesRef *bytes);

FOUNDATION_EXPORT OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(NSString *fld, OrgApacheLuceneUtilBytesRef *bytes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneIndexTerm *create_OrgApacheLuceneIndexTerm_initWithNSString_withOrgApacheLuceneUtilBytesRef_(NSString *fld, OrgApacheLuceneUtilBytesRef *bytes);

FOUNDATION_EXPORT void OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(OrgApacheLuceneIndexTerm *self, NSString *fld, NSString *text);

FOUNDATION_EXPORT OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(NSString *fld, NSString *text) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneIndexTerm *create_OrgApacheLuceneIndexTerm_initWithNSString_withNSString_(NSString *fld, NSString *text);

FOUNDATION_EXPORT void OrgApacheLuceneIndexTerm_initWithNSString_(OrgApacheLuceneIndexTerm *self, NSString *fld);

FOUNDATION_EXPORT OrgApacheLuceneIndexTerm *new_OrgApacheLuceneIndexTerm_initWithNSString_(NSString *fld) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneIndexTerm *create_OrgApacheLuceneIndexTerm_initWithNSString_(NSString *fld);

FOUNDATION_EXPORT NSString *OrgApacheLuceneIndexTerm_toStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *termText);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexTerm)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneIndexTerm")
