//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/TermsHash.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneIndexTermsHash")
#ifdef RESTRICT_OrgApacheLuceneIndexTermsHash
#define INCLUDE_ALL_OrgApacheLuceneIndexTermsHash 0
#else
#define INCLUDE_ALL_OrgApacheLuceneIndexTermsHash 1
#endif
#undef RESTRICT_OrgApacheLuceneIndexTermsHash

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneIndexTermsHash_) && (INCLUDE_ALL_OrgApacheLuceneIndexTermsHash || defined(INCLUDE_OrgApacheLuceneIndexTermsHash))
#define OrgApacheLuceneIndexTermsHash_

@class OrgApacheLuceneIndexDocumentsWriterPerThread;
@class OrgApacheLuceneIndexDocumentsWriterPerThread_DocState;
@class OrgApacheLuceneIndexFieldInfo;
@class OrgApacheLuceneIndexFieldInvertState;
@class OrgApacheLuceneIndexSegmentWriteState;
@class OrgApacheLuceneIndexTermsHashPerField;
@class OrgApacheLuceneUtilByteBlockPool;
@class OrgApacheLuceneUtilCounter;
@class OrgApacheLuceneUtilIntBlockPool;
@protocol JavaUtilMap;

/*!
 @brief This class is passed each token produced by the analyzer
   on each field during indexing, and it stores these
   tokens in a hash table, and allocates separate byte
   streams per token.Consumers of this class, eg <code>FreqProxTermsWriter</code>
  and <code>TermVectorsConsumer</code>,
   write their own byte streams under each term.
 */
@interface OrgApacheLuceneIndexTermsHash : NSObject {
 @public
  OrgApacheLuceneIndexTermsHash *nextTermsHash_;
  OrgApacheLuceneUtilIntBlockPool *intPool_;
  OrgApacheLuceneUtilByteBlockPool *bytePool_;
  OrgApacheLuceneUtilByteBlockPool *termBytePool_;
  OrgApacheLuceneUtilCounter *bytesUsed_;
  OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *docState_;
  jboolean trackAllocations_;
}

#pragma mark Public

- (void)abort;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread:(OrgApacheLuceneIndexDocumentsWriterPerThread *)docWriter
                                                                                 withBoolean:(jboolean)trackAllocations
                                                           withOrgApacheLuceneIndexTermsHash:(OrgApacheLuceneIndexTermsHash *)nextTermsHash;

- (OrgApacheLuceneIndexTermsHashPerField *)addFieldWithOrgApacheLuceneIndexFieldInvertState:(OrgApacheLuceneIndexFieldInvertState *)fieldInvertState
                                                          withOrgApacheLuceneIndexFieldInfo:(OrgApacheLuceneIndexFieldInfo *)fieldInfo;

- (void)finishDocument;

- (void)flushWithJavaUtilMap:(id<JavaUtilMap>)fieldsToFlush
withOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state;

- (void)reset;

- (void)startDocument;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexTermsHash)

J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHash, nextTermsHash_, OrgApacheLuceneIndexTermsHash *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHash, intPool_, OrgApacheLuceneUtilIntBlockPool *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHash, bytePool_, OrgApacheLuceneUtilByteBlockPool *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHash, termBytePool_, OrgApacheLuceneUtilByteBlockPool *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHash, bytesUsed_, OrgApacheLuceneUtilCounter *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneIndexTermsHash, docState_, OrgApacheLuceneIndexDocumentsWriterPerThread_DocState *)

FOUNDATION_EXPORT void OrgApacheLuceneIndexTermsHash_initPackagePrivateWithOrgApacheLuceneIndexDocumentsWriterPerThread_withBoolean_withOrgApacheLuceneIndexTermsHash_(OrgApacheLuceneIndexTermsHash *self, OrgApacheLuceneIndexDocumentsWriterPerThread *docWriter, jboolean trackAllocations, OrgApacheLuceneIndexTermsHash *nextTermsHash);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexTermsHash)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneIndexTermsHash")
