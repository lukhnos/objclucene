//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/LogMergePolicy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneIndexLogMergePolicy")
#ifdef RESTRICT_OrgApacheLuceneIndexLogMergePolicy
#define INCLUDE_ALL_OrgApacheLuceneIndexLogMergePolicy 0
#else
#define INCLUDE_ALL_OrgApacheLuceneIndexLogMergePolicy 1
#endif
#undef RESTRICT_OrgApacheLuceneIndexLogMergePolicy

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneIndexLogMergePolicy_) && (INCLUDE_ALL_OrgApacheLuceneIndexLogMergePolicy || defined(INCLUDE_OrgApacheLuceneIndexLogMergePolicy))
#define OrgApacheLuceneIndexLogMergePolicy_

#define RESTRICT_OrgApacheLuceneIndexMergePolicy 1
#define INCLUDE_OrgApacheLuceneIndexMergePolicy 1
#include "org/apache/lucene/index/MergePolicy.h"

@class OrgApacheLuceneIndexIndexWriter;
@class OrgApacheLuceneIndexMergePolicy_MergeSpecification;
@class OrgApacheLuceneIndexMergeTrigger;
@class OrgApacheLuceneIndexSegmentCommitInfo;
@class OrgApacheLuceneIndexSegmentInfos;
@protocol JavaUtilMap;

/*!
 @brief <p>This class implements a <code>MergePolicy</code> that tries
  to merge segments into levels of exponentially
  increasing size, where each level has fewer segments than
  the value of the merge factor.
 Whenever extra segments
  (beyond the merge factor upper bound) are encountered,
  all segments within the level are merged. You can get or
  set the merge factor using <code>getMergeFactor()</code> and 
 <code>setMergeFactor(int)</code> respectively.</p>
  
 <p>This class is abstract and requires a subclass to
  define the <code>size</code> method which specifies how a
  segment's size is determined.  <code>LogDocMergePolicy</code>
  is one subclass that measures size by document count in
  the segment.  <code>LogByteSizeMergePolicy</code> is another
  subclass that measures size as the total byte size of the
  file(s) for the segment.</p>
 */
@interface OrgApacheLuceneIndexLogMergePolicy : OrgApacheLuceneIndexMergePolicy {
 @public
  /*!
   @brief How many segments to merge at a time.
   */
  jint mergeFactor_;
  /*!
   @brief Any segments whose size is smaller than this value
   will be rounded up to this value.This ensures that
   tiny segments are aggressively merged.
   */
  jlong minMergeSize_;
  /*!
   @brief If the size of a segment exceeds this value then it
   will never be merged.
   */
  jlong maxMergeSize_;
  /*!
   @brief If the size of a segment exceeds this value then it
  will never be merged during <code>IndexWriter.forceMerge</code>.
   */
  jlong maxMergeSizeForForcedMerge_;
  /*!
   @brief If a segment has more than this many documents then it
   will never be merged.
   */
  jint maxMergeDocs_;
  /*!
   @brief If true, we pro-rate a segment's size by the
   percentage of non-deleted documents.
   */
  jboolean calibrateSizeByDeletes_;
}
@property (readonly, class) jdouble LEVEL_LOG_SPAN NS_SWIFT_NAME(LEVEL_LOG_SPAN);
@property (readonly, class) jint DEFAULT_MERGE_FACTOR NS_SWIFT_NAME(DEFAULT_MERGE_FACTOR);
@property (readonly, class) jint DEFAULT_MAX_MERGE_DOCS NS_SWIFT_NAME(DEFAULT_MAX_MERGE_DOCS);
@property (readonly, class) jdouble DEFAULT_NO_CFS_RATIO NS_SWIFT_NAME(DEFAULT_NO_CFS_RATIO);

#pragma mark Public

/*!
 @brief Sole constructor.
 (For invocation by subclass 
   constructors, typically implicit.)
 */
- (instancetype __nonnull)init;

/*!
 @brief Finds merges necessary to force-merge all deletes from the
  index.We simply merge adjacent segments that have
  deletes, up to mergeFactor at a time.
 */
- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedDeletesMergesWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)segmentInfos
                                                                                withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

/*!
 @brief Returns the merges necessary to merge the index down
   to a specified number of segments.
 This respects the <code>maxMergeSizeForForcedMerge</code> setting.
   By default, and assuming <code>maxNumSegments=1</code>, only
   one segment will be left in the index, where that segment
   has no deletions pending nor separate norms, and it is in
   compound file format if the current useCompoundFile
   setting is true.  This method returns multiple merges
   (mergeFactor at a time) so the <code>MergeScheduler</code>
   in use may make use of concurrency.
 */
- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findForcedMergesWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                                                     withInt:(jint)maxNumSegments
                                                                                             withJavaUtilMap:(id<JavaUtilMap>)segmentsToMerge
                                                                         withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

/*!
 @brief Checks if any merges are now necessary and returns a
   <code>MergePolicy.MergeSpecification</code> if so.A merge
   is necessary when there are more than <code>setMergeFactor</code>
  segments at a given level.
 When
   multiple levels have too many segments, this method
   will return multiple merges, allowing the <code>MergeScheduler</code>
  to use concurrency.
 */
- (OrgApacheLuceneIndexMergePolicy_MergeSpecification *)findMergesWithOrgApacheLuceneIndexMergeTrigger:(OrgApacheLuceneIndexMergeTrigger *)mergeTrigger
                                                                  withOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                                   withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

/*!
 @brief Returns true if the segment size should be calibrated 
   by the number of deletes when choosing segments for merge.
 */
- (jboolean)getCalibrateSizeByDeletes;

/*!
 @brief Returns the largest segment (measured by document
   count) that may be merged with other segments.
 - seealso: #setMaxMergeDocs
 */
- (jint)getMaxMergeDocs;

/*!
 @brief <p>Returns the number of segments that are merged at
  once and also controls the total number of segments
  allowed to accumulate in the index.
 </p>
 */
- (jint)getMergeFactor;

/*!
 @brief Sets whether the segment size should be calibrated by
   the number of deletes when choosing segments for merge.
 */
- (void)setCalibrateSizeByDeletesWithBoolean:(jboolean)calibrateSizeByDeletes;

/*!
 @brief <p>Determines the largest segment (measured by
  document count) that may be merged with other segments.
 Small values (e.g., less than 10,000) are best for
  interactive indexing, as this limits the length of
  pauses while indexing to a few seconds.  Larger values
  are best for batched indexing and speedier
  searches.</p>
  
 <p>The default value is <code>Integer.MAX_VALUE</code>.</p>
  
 <p>The default merge policy (<code>LogByteSizeMergePolicy</code>
 ) also allows you to set this
  limit by net size (in MB) of the segment, using <code>LogByteSizeMergePolicy.setMaxMergeMB</code>
 .</p>
 */
- (void)setMaxMergeDocsWithInt:(jint)maxMergeDocs;

/*!
 @brief Determines how often segment indices are merged by
  addDocument().With smaller values, less RAM is used
  while indexing, and searches are
  faster, but indexing speed is slower.
 With larger
  values, more RAM is used during indexing, and while
  searches is slower, indexing is
  faster.  Thus larger values (<code>> 10</code>) are best for batch
  index creation, and smaller values (<code>< 10</code>) for indices
  that are interactively maintained.
 */
- (void)setMergeFactorWithInt:(jint)mergeFactor;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Returns true if the number of segments eligible for
   merging is less than or equal to the specified <code>maxNumSegments</code>
 .
 */
- (jboolean)isMergedWithOrgApacheLuceneIndexSegmentInfos:(OrgApacheLuceneIndexSegmentInfos *)infos
                                                 withInt:(jint)maxNumSegments
                                         withJavaUtilMap:(id<JavaUtilMap>)segmentsToMerge
                     withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

/*!
 @brief Print a debug message to <code>IndexWriter</code>'s <code>infoStream</code>
 .
 */
- (void)messageWithNSString:(NSString *)message
withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

/*!
 @brief Return the byte size of the provided <code>SegmentCommitInfo</code>
 , pro-rated by percentage of
   non-deleted documents if <code>setCalibrateSizeByDeletes</code>
  is set.
 */
- (jlong)sizeBytesWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                        withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

/*!
 @brief Return the number of documents in the provided <code>SegmentCommitInfo</code>
 , pro-rated by percentage of
   non-deleted documents if <code>setCalibrateSizeByDeletes</code>
  is set.
 */
- (jlong)sizeDocsWithOrgApacheLuceneIndexSegmentCommitInfo:(OrgApacheLuceneIndexSegmentCommitInfo *)info
                       withOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

/*!
 @brief Returns true if <code>LMP</code> is enabled in <code>IndexWriter</code>
 's <code>infoStream</code>.
 */
- (jboolean)verboseWithOrgApacheLuceneIndexIndexWriter:(OrgApacheLuceneIndexIndexWriter *)writer;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithDouble:(jdouble)arg0
                                withLong:(jlong)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexLogMergePolicy)

/*!
 @brief Defines the allowed range of log(size) for each
   level.A level is computed by taking the max segment
   log size, minus LEVEL_LOG_SPAN, and finding all
   segments falling within that range.
 */
inline jdouble OrgApacheLuceneIndexLogMergePolicy_get_LEVEL_LOG_SPAN(void);
#define OrgApacheLuceneIndexLogMergePolicy_LEVEL_LOG_SPAN 0.75
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexLogMergePolicy, LEVEL_LOG_SPAN, jdouble)

/*!
 @brief Default merge factor, which is how many segments are
   merged at a time
 */
inline jint OrgApacheLuceneIndexLogMergePolicy_get_DEFAULT_MERGE_FACTOR(void);
#define OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MERGE_FACTOR 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexLogMergePolicy, DEFAULT_MERGE_FACTOR, jint)

/*!
 @brief Default maximum segment size.A segment of this size
   or larger will never be merged.
 @@see setMaxMergeDocs
 */
inline jint OrgApacheLuceneIndexLogMergePolicy_get_DEFAULT_MAX_MERGE_DOCS(void);
#define OrgApacheLuceneIndexLogMergePolicy_DEFAULT_MAX_MERGE_DOCS 2147483647
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexLogMergePolicy, DEFAULT_MAX_MERGE_DOCS, jint)

/*!
 @brief Default noCFSRatio.If a merge's size is <code>>= 10%</code> of
   the index, then we disable compound file for it.
 - seealso: MergePolicy#setNoCFSRatio
 */
inline jdouble OrgApacheLuceneIndexLogMergePolicy_get_DEFAULT_NO_CFS_RATIO(void);
#define OrgApacheLuceneIndexLogMergePolicy_DEFAULT_NO_CFS_RATIO 0.1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneIndexLogMergePolicy, DEFAULT_NO_CFS_RATIO, jdouble)

FOUNDATION_EXPORT void OrgApacheLuceneIndexLogMergePolicy_init(OrgApacheLuceneIndexLogMergePolicy *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexLogMergePolicy)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneIndexLogMergePolicy")
