//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/index/IndexableField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneIndexIndexableField")
#ifdef RESTRICT_OrgApacheLuceneIndexIndexableField
#define INCLUDE_ALL_OrgApacheLuceneIndexIndexableField 0
#else
#define INCLUDE_ALL_OrgApacheLuceneIndexIndexableField 1
#endif
#undef RESTRICT_OrgApacheLuceneIndexIndexableField

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneIndexIndexableField_) && (INCLUDE_ALL_OrgApacheLuceneIndexIndexableField || defined(INCLUDE_OrgApacheLuceneIndexIndexableField))
#define OrgApacheLuceneIndexIndexableField_

@class JavaIoReader;
@class OrgApacheLuceneAnalysisAnalyzer;
@class OrgApacheLuceneAnalysisTokenStream;
@class OrgApacheLuceneUtilBytesRef;
@protocol OrgApacheLuceneIndexIndexableFieldType;

/*!
 @brief Represents a single field for indexing.IndexWriter
   consumes Iterable&lt;IndexableField&gt; as a document.
 */
@protocol OrgApacheLuceneIndexIndexableField < JavaObject >

/*!
 @brief Field name
 */
- (NSString *)name;

/*!
 @brief <code>IndexableFieldType</code> describing the properties
  of this field.
 */
- (id<OrgApacheLuceneIndexIndexableFieldType>)fieldType;

/*!
 @brief Returns the field's index-time boost.
 <p>
  Only fields can have an index-time boost, if you want to simulate
  a "document boost", then you must pre-multiply it across all the
  relevant fields yourself.  
 <p>The boost is used to compute the norm factor for the field.  By
  default, in the <code>Similarity.computeNorm(FieldInvertState)</code> method, 
  the boost value is multiplied by the length normalization factor and then
  rounded by <code>DefaultSimilarity.encodeNormValue(float)</code> before it is stored in the
  index.  One should attempt to ensure that this product does not overflow
  the range of that encoding. 
 <p>
  It is illegal to return a boost other than 1.0f for a field that is not
  indexed (<code>IndexableFieldType.indexOptions()</code> is IndexOptions.NONE) or
  omits normalization values (<code>IndexableFieldType.omitNorms()</code> returns true).
 - seealso: Similarity#computeNorm(FieldInvertState)
 - seealso: DefaultSimilarity#encodeNormValue(float)
 */
- (jfloat)boost;

/*!
 @brief Non-null if this field has a binary value
 */
- (OrgApacheLuceneUtilBytesRef *)binaryValue;

/*!
 @brief Non-null if this field has a string value
 */
- (NSString *)stringValue;

/*!
 @brief Non-null if this field has a Reader value
 */
- (JavaIoReader *)readerValue;

/*!
 @brief Non-null if this field has a numeric value
 */
- (NSNumber *)numericValue;

/*!
 @brief Creates the TokenStream used for indexing this field.If appropriate,
  implementations should use the given Analyzer to create the TokenStreams.
 @param analyzer Analyzer that should be used to create the TokenStreams from
 @param reuse TokenStream for a previous instance of this field  <b> name </b> . This allows
                custom field types (like StringField and NumericField) that do not use               the analyzer to still have good performance. Note: the passed-in type
                may be inappropriate, for example if you mix up different types of Fields
                for the same field name. So its the responsibility of the implementation to
                check.
 @return TokenStream value for indexing the document.  Should always return
          a non-null value if the field is to be indexed
 @throw IOExceptionCan be thrown while creating the TokenStream
 */
- (OrgApacheLuceneAnalysisTokenStream *)tokenStreamWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                                withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)reuse;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneIndexIndexableField)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneIndexIndexableField)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneIndexIndexableField")
