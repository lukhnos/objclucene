//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/DataInput.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneStoreDataInput")
#ifdef RESTRICT_OrgApacheLuceneStoreDataInput
#define INCLUDE_ALL_OrgApacheLuceneStoreDataInput 0
#else
#define INCLUDE_ALL_OrgApacheLuceneStoreDataInput 1
#endif
#undef RESTRICT_OrgApacheLuceneStoreDataInput

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneStoreDataInput_) && (INCLUDE_ALL_OrgApacheLuceneStoreDataInput || defined(INCLUDE_OrgApacheLuceneStoreDataInput))
#define OrgApacheLuceneStoreDataInput_

@class IOSByteArray;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief Abstract base class for performing read operations of Lucene's low-level
  data types.
 <p><code>DataInput</code> may only be used from one thread, because it is not
  thread safe (it keeps internal state like file position). To allow
  multithreaded use, every <code>DataInput</code> instance must be cloned before
  used in another thread. Subclasses must therefore implement <code>clone()</code>,
  returning a new <code>DataInput</code> which operates on the same underlying
  resource, but positioned independently.
 */
@interface OrgApacheLuceneStoreDataInput : NSObject < NSCopying >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Returns a clone of this stream.
 <p>Clones of a stream access the same data, and are positioned at the same
  point as the stream they were cloned from. 
 <p>Expert: Subclasses must ensure that clones may be positioned at
  different points in the input from each other and from the stream they
  were cloned from.
 */
- (OrgApacheLuceneStoreDataInput *)java_clone;

/*!
 @brief Reads and returns a single byte.
 - seealso: DataOutput#writeByte(byte)
 */
- (jbyte)readByte;

/*!
 @brief Reads a specified number of bytes into an array at the specified offset.
 @param b the array to read bytes into
 @param offset the offset in the array to start storing bytes
 @param len the number of bytes to read
 - seealso: DataOutput#writeBytes(byte[],int)
 */
- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len;

/*!
 @brief Reads a specified number of bytes into an array at the
  specified offset with control over whether the read
  should be buffered (callers who have their own buffer
  should pass in "false" for useBuffer).Currently only 
 <code>BufferedIndexInput</code> respects this parameter.
 @param b the array to read bytes into
 @param offset the offset in the array to start storing bytes
 @param len the number of bytes to read
 @param useBuffer set to false if the caller will handle  buffering.
 - seealso: DataOutput#writeBytes(byte[],int)
 */
- (void)readBytesWithByteArray:(IOSByteArray *)b
                       withInt:(jint)offset
                       withInt:(jint)len
                   withBoolean:(jboolean)useBuffer;

/*!
 @brief Reads four bytes and returns an int.
 - seealso: DataOutput#writeInt(int)
 */
- (jint)readInt;

/*!
 @brief Reads eight bytes and returns a long.
 - seealso: DataOutput#writeLong(long)
 */
- (jlong)readLong;

/*!
 @brief Reads a Map&lt;String,String&gt; previously written
  with <code>DataOutput.writeMapOfStrings(Map)</code>.
 @return An immutable map containing the written contents.
 */
- (id<JavaUtilMap>)readMapOfStrings;

/*!
 @brief Reads a Set&lt;String&gt; previously written
  with <code>DataOutput.writeSetOfStrings(Set)</code>.
 @return An immutable set containing the written contents.
 */
- (id<JavaUtilSet>)readSetOfStrings;

/*!
 @brief Reads two bytes and returns a short.
 - seealso: DataOutput#writeByte(byte)
 */
- (jshort)readShort;

/*!
 @brief Reads a string.
 - seealso: DataOutput#writeString(String)
 */
- (NSString *)readString;

/*!
 @brief Reads a Set&lt;String&gt; previously written
   with <code>DataOutput.writeStringSet(Set)</code>.
 */
- (id<JavaUtilSet>)readStringSet;

/*!
 @brief Reads a Map&lt;String,String&gt; previously written
   with <code>DataOutput.writeStringStringMap(Map)</code>.
 */
- (id<JavaUtilMap>)readStringStringMap;

/*!
 @brief Reads an int stored in variable-length format.Reads between one and
  five bytes.
 Smaller values take fewer bytes.  Negative numbers are not
  supported. 
 <p>
  The format is described further in <code>DataOutput.writeVInt(int)</code>.
 - seealso: DataOutput#writeVInt(int)
 */
- (jint)readVInt;

/*!
 @brief Reads a long stored in variable-length format.Reads between one and
  nine bytes.
 Smaller values take fewer bytes.  Negative numbers are not
  supported. 
 <p>
  The format is described further in <code>DataOutput.writeVInt(int)</code>.
 - seealso: DataOutput#writeVLong(long)
 */
- (jlong)readVLong;

/*!
 @brief Read a <code>zig-zag</code>-encoded
  <code>variable-length</code> integer.
 - seealso: DataOutput#writeZInt(int)
 */
- (jint)readZInt;

/*!
 @brief Read a <code>zig-zag</code>-encoded
  <code>variable-length</code> integer.Reads between one and ten
  bytes.
 - seealso: DataOutput#writeZLong(long)
 */
- (jlong)readZLong;

/*!
 @brief Skip over <code>numBytes</code> bytes.The contract on this method is that it
  should have the same behavior as reading the same number of bytes into a
  buffer and discarding its content.
 Negative values of <code>numBytes</code>
  are not supported.
 */
- (void)skipBytesWithLong:(jlong)numBytes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneStoreDataInput)

FOUNDATION_EXPORT void OrgApacheLuceneStoreDataInput_init(OrgApacheLuceneStoreDataInput *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneStoreDataInput)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneStoreDataInput")
