//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/store/NRTCachingDirectory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneStoreNRTCachingDirectory")
#ifdef RESTRICT_OrgApacheLuceneStoreNRTCachingDirectory
#define INCLUDE_ALL_OrgApacheLuceneStoreNRTCachingDirectory 0
#else
#define INCLUDE_ALL_OrgApacheLuceneStoreNRTCachingDirectory 1
#endif
#undef RESTRICT_OrgApacheLuceneStoreNRTCachingDirectory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneStoreNRTCachingDirectory_) && (INCLUDE_ALL_OrgApacheLuceneStoreNRTCachingDirectory || defined(INCLUDE_OrgApacheLuceneStoreNRTCachingDirectory))
#define OrgApacheLuceneStoreNRTCachingDirectory_

#define RESTRICT_OrgApacheLuceneStoreFilterDirectory 1
#define INCLUDE_OrgApacheLuceneStoreFilterDirectory 1
#include "org/apache/lucene/store/FilterDirectory.h"

#define RESTRICT_OrgApacheLuceneUtilAccountable 1
#define INCLUDE_OrgApacheLuceneUtilAccountable 1
#include "org/apache/lucene/util/Accountable.h"

@class IOSObjectArray;
@class OrgApacheLuceneStoreDirectory;
@class OrgApacheLuceneStoreIOContext;
@class OrgApacheLuceneStoreIndexInput;
@class OrgApacheLuceneStoreIndexOutput;
@protocol JavaUtilCollection;

/*!
 @brief Wraps a <code>RAMDirectory</code>
  around any provided delegate directory, to
  be used during NRT search.
 <p>This class is likely only useful in a near-real-time
  context, where indexing rate is lowish but reopen
  rate is highish, resulting in many tiny files being
  written.  This directory keeps such segments (as well as
  the segments produced by merging them, as long as they
  are small enough), in RAM.</p>
  
 <p>This is safe to use: when your app calls {IndexWriter#commit},
  all cached files will be flushed from the cached and sync'd.</p>
  
 <p>Here's a simple example usage: 
 <pre class="prettyprint">
    Directory fsDir = FSDirectory.open(new File("/path/to/index").toPath());
    NRTCachingDirectory cachedFSDir = new NRTCachingDirectory(fsDir, 5.0, 60.0);
    IndexWriterConfig conf = new IndexWriterConfig(analyzer);
    IndexWriter writer = new IndexWriter(cachedFSDir, conf); 
 
@endcode
  
 <p>This will cache all newly flushed segments, all merges
  whose expected segment size is <code><= 5 MB</code>, unless the net
  cached bytes exceeds 60 MB at which point all writes will
  not be cached (until the net bytes falls below 60 MB).</p>
 */
@interface OrgApacheLuceneStoreNRTCachingDirectory : OrgApacheLuceneStoreFilterDirectory < OrgApacheLuceneUtilAccountable >

#pragma mark Public

/*!
 @brief We will cache a newly created output if 1) it's a
   flush or a merge and the estimated size of the merged segment is   
 <code><= maxMergeSizeMB</code>, and 2) the total cached bytes is 
   <code><= maxCachedMB</code>
 */
- (instancetype __nonnull)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)delegate
                                                     withDouble:(jdouble)maxMergeSizeMB
                                                     withDouble:(jdouble)maxCachedMB;

/*!
 @brief Close this directory, which flushes any cached files
   to the delegate and then closes the delegate.
 */
- (void)close;

- (OrgApacheLuceneStoreIndexOutput *)createOutputWithNSString:(NSString *)name
                            withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context;

- (void)deleteFileWithNSString:(NSString *)name;

- (jlong)fileLengthWithNSString:(NSString *)name;

- (id<JavaUtilCollection>)getChildResources;

- (IOSObjectArray *)listAll;

- (IOSObjectArray *)listCachedFiles;

- (OrgApacheLuceneStoreIndexInput *)openInputWithNSString:(NSString *)name
                        withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context;

- (jlong)ramBytesUsed;

- (void)renameFileWithNSString:(NSString *)source
                  withNSString:(NSString *)dest;

- (void)syncWithJavaUtilCollection:(id<JavaUtilCollection>)fileNames;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Subclass can override this to customize logic; return
   true if this file should be written to the RAMDirectory.
 */
- (jboolean)doCacheWriteWithNSString:(NSString *)name
   withOrgApacheLuceneStoreIOContext:(OrgApacheLuceneStoreIOContext *)context;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneStoreNRTCachingDirectory)

FOUNDATION_EXPORT void OrgApacheLuceneStoreNRTCachingDirectory_initWithOrgApacheLuceneStoreDirectory_withDouble_withDouble_(OrgApacheLuceneStoreNRTCachingDirectory *self, OrgApacheLuceneStoreDirectory *delegate, jdouble maxMergeSizeMB, jdouble maxCachedMB);

FOUNDATION_EXPORT OrgApacheLuceneStoreNRTCachingDirectory *new_OrgApacheLuceneStoreNRTCachingDirectory_initWithOrgApacheLuceneStoreDirectory_withDouble_withDouble_(OrgApacheLuceneStoreDirectory *delegate, jdouble maxMergeSizeMB, jdouble maxCachedMB) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneStoreNRTCachingDirectory *create_OrgApacheLuceneStoreNRTCachingDirectory_initWithOrgApacheLuceneStoreDirectory_withDouble_withDouble_(OrgApacheLuceneStoreDirectory *delegate, jdouble maxMergeSizeMB, jdouble maxCachedMB);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneStoreNRTCachingDirectory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneStoreNRTCachingDirectory")
