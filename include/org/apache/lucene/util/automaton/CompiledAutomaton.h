//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilAutomatonCompiledAutomaton")
#ifdef RESTRICT_OrgApacheLuceneUtilAutomatonCompiledAutomaton
#define INCLUDE_ALL_OrgApacheLuceneUtilAutomatonCompiledAutomaton 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilAutomatonCompiledAutomaton 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilAutomatonCompiledAutomaton

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilAutomatonCompiledAutomaton_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonCompiledAutomaton || defined(INCLUDE_OrgApacheLuceneUtilAutomatonCompiledAutomaton))
#define OrgApacheLuceneUtilAutomatonCompiledAutomaton_

@class JavaLangBoolean;
@class OrgApacheLuceneIndexTerms;
@class OrgApacheLuceneIndexTermsEnum;
@class OrgApacheLuceneUtilAutomatonAutomaton;
@class OrgApacheLuceneUtilAutomatonByteRunAutomaton;
@class OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE;
@class OrgApacheLuceneUtilBytesRef;
@class OrgApacheLuceneUtilBytesRefBuilder;

/*!
 @brief Immutable class holding compiled details for a given
  Automaton.The Automaton is deterministic, must not have
  dead states but is not necessarily minimal.
 */
@interface OrgApacheLuceneUtilAutomatonCompiledAutomaton : NSObject {
 @public
  /*!
   @brief If simplify is true this will be the "simplified" type; else, this is NORMAL
   */
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *type_;
  /*!
   @brief For <code>AUTOMATON_TYPE.SINGLE</code> this is the singleton term.
   */
  OrgApacheLuceneUtilBytesRef *term_;
  /*!
   @brief Matcher for quickly determining if a byte[] is accepted.
   only valid for <code>AUTOMATON_TYPE.NORMAL</code>.
   */
  OrgApacheLuceneUtilAutomatonByteRunAutomaton *runAutomaton_;
  /*!
   @brief Two dimensional array of transitions, indexed by state
  number for traversal.The state numbering is consistent with 
 <code>runAutomaton</code>.
   Only valid for <code>AUTOMATON_TYPE.NORMAL</code>.
   */
  OrgApacheLuceneUtilAutomatonAutomaton *automaton_;
  /*!
   @brief Shared common suffix accepted by the automaton.Only valid
  for <code>AUTOMATON_TYPE.NORMAL</code>, and only when the
  automaton accepts an infinite language.
   This will be null
  if the common prefix is length 0.
   */
  OrgApacheLuceneUtilBytesRef *commonSuffixRef_;
  /*!
   @brief Indicates if the automaton accepts a finite set of strings.
   Null if this was not computed.
  Only valid for <code>AUTOMATON_TYPE.NORMAL</code>.
   */
  JavaLangBoolean *finite_;
  /*!
   @brief Which state, if any, accepts all suffixes, else -1.
   */
  jint sinkState_;
}

#pragma mark Public

/*!
 @brief Create this, passing simplify=true and finite=null, so that we try
   to simplify the automaton and determine if it is finite.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton;

/*!
 @brief Create this.If finite is null, we use <code>Operations.isFinite</code>
   to determine whether it is finite.
 If simplify is true, we run
   possibly expensive operations to determine if the automaton is one
   the cases in <code>CompiledAutomaton.AUTOMATON_TYPE</code>.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                                    withJavaLangBoolean:(JavaLangBoolean *)finite
                                                            withBoolean:(jboolean)simplify;

/*!
 @brief Create this.If finite is null, we use <code>Operations.isFinite</code>
   to determine whether it is finite.
 If simplify is true, we run
   possibly expensive operations to determine if the automaton is one
   the cases in <code>CompiledAutomaton.AUTOMATON_TYPE</code>. If simplify
   requires determinizing the autaomaton then only maxDeterminizedStates
   will be created.  Any more than that will cause a
   TooComplexToDeterminizeException.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                                    withJavaLangBoolean:(JavaLangBoolean *)finite
                                                            withBoolean:(jboolean)simplify
                                                                withInt:(jint)maxDeterminizedStates
                                                            withBoolean:(jboolean)isBinary;

- (jboolean)isEqual:(id)obj;

/*!
 @brief Finds largest term accepted by this Automaton, that's
   &lt;= the provided input term.The result is placed in
   output; it's fine for output and input to point to
   the same bytes.
 The returned result is either the
   provided output, or null if there is no floor term
   (ie, the provided input term is before the first term
   accepted by this Automaton).
 */
- (OrgApacheLuceneUtilBytesRef *)floorWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)input
                               withOrgApacheLuceneUtilBytesRefBuilder:(OrgApacheLuceneUtilBytesRefBuilder *)output;

/*!
 @brief Return a <code>TermsEnum</code> intersecting the provided <code>Terms</code>
   with the terms accepted by this automaton.
 */
- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms;

- (NSUInteger)hash;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonCompiledAutomaton)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonCompiledAutomaton, type_, OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonCompiledAutomaton, term_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonCompiledAutomaton, runAutomaton_, OrgApacheLuceneUtilAutomatonByteRunAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonCompiledAutomaton, automaton_, OrgApacheLuceneUtilAutomatonAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonCompiledAutomaton, commonSuffixRef_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonCompiledAutomaton, finite_, JavaLangBoolean *)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonCompiledAutomaton *self, OrgApacheLuceneUtilAutomatonAutomaton *automaton);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonCompiledAutomaton *new_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *automaton) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonCompiledAutomaton *create_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *automaton);

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_(OrgApacheLuceneUtilAutomatonCompiledAutomaton *self, OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonCompiledAutomaton *new_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonCompiledAutomaton *create_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify);

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonCompiledAutomaton *self, OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify, jint maxDeterminizedStates, jboolean isBinary);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonCompiledAutomaton *new_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify, jint maxDeterminizedStates, jboolean isBinary) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonCompiledAutomaton *create_OrgApacheLuceneUtilAutomatonCompiledAutomaton_initWithOrgApacheLuceneUtilAutomatonAutomaton_withJavaLangBoolean_withBoolean_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonAutomaton *automaton, JavaLangBoolean *finite, jboolean simplify, jint maxDeterminizedStates, jboolean isBinary);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonCompiledAutomaton)

#endif

#if !defined (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonCompiledAutomaton || defined(INCLUDE_OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE))
#define OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum) {
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum_NONE = 0,
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum_ALL = 1,
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum_SINGLE = 2,
  OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum_NORMAL = 3,
};

/*!
 @brief Automata are compiled into different internal forms for the
  most efficient execution depending upon the language they accept.
 */
@interface OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE : JavaLangEnum

@property (readonly, class, nonnull) OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *NONE NS_SWIFT_NAME(NONE);
@property (readonly, class, nonnull) OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *ALL NS_SWIFT_NAME(ALL);
@property (readonly, class, nonnull) OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *SINGLE NS_SWIFT_NAME(SINGLE);
@property (readonly, class, nonnull) OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *NORMAL NS_SWIFT_NAME(NORMAL);
#pragma mark Public

+ (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_values_[];

/*!
 @brief Automaton that accepts no strings.
 */
inline OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_get_NONE(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NONE)

/*!
 @brief Automaton that accepts all possible strings.
 */
inline OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_get_ALL(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, ALL)

/*!
 @brief Automaton that accepts only a single fixed string.
 */
inline OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_get_SINGLE(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, SINGLE)

/*!
 @brief Catch-all for any other automata.
 */
inline OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_get_NORMAL(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE, NORMAL)

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_values(void);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE *OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonCompiledAutomaton_AUTOMATON_TYPE)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilAutomatonCompiledAutomaton")
