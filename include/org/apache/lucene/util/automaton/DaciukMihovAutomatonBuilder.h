//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/DaciukMihovAutomatonBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder")
#ifdef RESTRICT_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder
#define INCLUDE_ALL_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder || defined(INCLUDE_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder))
#define OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_

@class OrgApacheLuceneUtilAutomatonAutomaton;
@class OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State;
@class OrgApacheLuceneUtilCharsRef;
@protocol JavaUtilCollection;

/*!
 @brief Builds a minimal, deterministic <code>Automaton</code> that accepts a set of 
  strings.The algorithm requires sorted input data, but is very fast 
  (nearly linear with the input size).
 - seealso: #build(Collection)
 - seealso: Automata#makeStringUnion(Collection)
 */
@interface OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder : NSObject

#pragma mark Public

/*!
 @brief Add another character sequence to this automaton.The sequence must be
  lexicographically larger or equal compared to any previous sequences added
  to this automaton (the input must be sorted).
 */
- (void)addWithOrgApacheLuceneUtilCharsRef:(OrgApacheLuceneUtilCharsRef *)current;

/*!
 @brief Build a minimal, deterministic automaton from a sorted list of <code>BytesRef</code> representing
  strings in UTF-8.These strings must be binary-sorted.
 */
+ (OrgApacheLuceneUtilAutomatonAutomaton *)buildWithJavaUtilCollection:(id<JavaUtilCollection>)input;

/*!
 @brief Finalize the automaton and return the root state.No more strings can be
  added to the builder after this call.
 @return Root automaton state.
 */
- (OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State *)complete;

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_initPackagePrivate(OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder *self);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder *new_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder *create_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_initPackagePrivate(void);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_buildWithJavaUtilCollection_(id<JavaUtilCollection> input);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder)

#endif

#if !defined (OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder || defined(INCLUDE_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State))
#define OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State_

@class IOSIntArray;
@class IOSObjectArray;

/*!
 @brief DFSA state with <code>char</code> labels on transitions.
 */
@interface OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State : NSObject {
 @public
  /*!
   @brief Labels of outgoing transitions.Indexed identically to <code>states</code>.
   Labels must be sorted lexicographically.
   */
  IOSIntArray *labels_;
  /*!
   @brief States reachable from outgoing transitions.Indexed identically to 
 <code>labels</code>.
   */
  IOSObjectArray *states_;
  /*!
   @brief <code>true</code> if this state corresponds to the end of at least one
  input sequence.
   */
  jboolean is_final_;
}

#pragma mark Public

/*!
 @brief Two states are equal if: 
 <ul>
  <li>they have an identical number of outgoing transitions, labeled with
  the same labels</li>
  <li>corresponding outgoing transitions lead to the same states (to states
  with an identical right-language).
 </ul>
 */
- (jboolean)isEqual:(id)obj;

/*!
 @brief Compute the hash code of the <i>current</i> status of this state.
 */
- (NSUInteger)hash;

#pragma mark Package-Private

/*!
 @brief Returns the target state of a transition leaving this state and labeled
  with <code>label</code>.If no such transition exists, returns 
 <code>null</code>.
 */
- (OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State *)getStateWithInt:(jint)label;

/*!
 @brief Return <code>true</code> if this state has any children (outgoing
  transitions).
 */
- (jboolean)hasChildren;

/*!
 @brief Return the most recent transitions's target state.
 */
- (OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State *)lastChild;

/*!
 @brief Return the associated state if the most recent transition is labeled with 
 <code>label</code>.
 */
- (OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State *)lastChildWithInt:(jint)label;

/*!
 @brief Create a new outgoing transition labeled <code>label</code> and return
  the newly created target state for this transition.
 */
- (OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State *)newStateWithInt:(jint)label OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Replace the last added outgoing transition's target state with the given
  state.
 */
- (void)replaceLastChildWithOrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State:(OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State *)state;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State, labels_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State, states_, IOSObjectArray *)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder_State)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilAutomatonDaciukMihovAutomatonBuilder")
