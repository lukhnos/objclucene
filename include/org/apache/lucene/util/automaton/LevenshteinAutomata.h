//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/LevenshteinAutomata.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilAutomatonLevenshteinAutomata")
#ifdef RESTRICT_OrgApacheLuceneUtilAutomatonLevenshteinAutomata
#define INCLUDE_ALL_OrgApacheLuceneUtilAutomatonLevenshteinAutomata 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilAutomatonLevenshteinAutomata 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilAutomatonLevenshteinAutomata

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilAutomatonLevenshteinAutomata_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonLevenshteinAutomata || defined(INCLUDE_OrgApacheLuceneUtilAutomatonLevenshteinAutomata))
#define OrgApacheLuceneUtilAutomatonLevenshteinAutomata_

@class IOSIntArray;
@class IOSObjectArray;
@class OrgApacheLuceneUtilAutomatonAutomaton;

/*!
 @brief Class to construct DFAs that match a word within some edit distance.
 <p>
  Implements the algorithm described in:
  Schulz and Mihov: Fast String Correction with Levenshtein Automata
 */
@interface OrgApacheLuceneUtilAutomatonLevenshteinAutomata : NSObject {
 @public
  IOSIntArray *word_;
  IOSIntArray *alphabet_;
  jint alphaMax_;
  IOSIntArray *rangeLower_;
  IOSIntArray *rangeUpper_;
  jint numRanges_;
  IOSObjectArray *descriptions_;
}
@property (readonly, class) jint MAXIMUM_SUPPORTED_DISTANCE NS_SWIFT_NAME(MAXIMUM_SUPPORTED_DISTANCE);

#pragma mark Public

/*!
 @brief Expert: specify a custom maximum possible symbol
  (alphaMax); default is Character.MAX_CODE_POINT.
 */
- (instancetype __nonnull)initWithIntArray:(IOSIntArray *)word
                                   withInt:(jint)alphaMax
                               withBoolean:(jboolean)withTranspositions;

/*!
 @brief Create a new LevenshteinAutomata for some input String.
 Optionally count transpositions as a primitive edit.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)input
                               withBoolean:(jboolean)withTranspositions;

/*!
 @brief Compute a DFA that accepts all strings within an edit distance of <code>n</code>.
 <p>
  All automata have the following properties: 
 <ul>
  <li>They are deterministic (DFA). 
 <li>There are no transitions to dead states. 
 <li>They are not minimal (some transitions could be combined). 
 </ul>
 */
- (OrgApacheLuceneUtilAutomatonAutomaton *)toAutomatonWithInt:(jint)n;

/*!
 @brief Compute a DFA that accepts all strings within an edit distance of <code>n</code>,
  matching the specified exact prefix.
 <p>
  All automata have the following properties: 
 <ul>
  <li>They are deterministic (DFA). 
 <li>There are no transitions to dead states. 
 <li>They are not minimal (some transitions could be combined). 
 </ul>
 */
- (OrgApacheLuceneUtilAutomatonAutomaton *)toAutomatonWithInt:(jint)n
                                                 withNSString:(NSString *)prefix;

#pragma mark Package-Private

/*!
 @brief Get the characteristic vector <code>X(x, V)</code> 
  where V is <code>substring(pos, end)</code>
 */
- (jint)getVectorWithInt:(jint)x
                 withInt:(jint)pos
                 withInt:(jint)end;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonLevenshteinAutomata)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonLevenshteinAutomata, word_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonLevenshteinAutomata, alphabet_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonLevenshteinAutomata, rangeLower_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonLevenshteinAutomata, rangeUpper_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilAutomatonLevenshteinAutomata, descriptions_, IOSObjectArray *)

/*!
 @brief Maximum edit distance this class can generate an automaton for.
 */
inline jint OrgApacheLuceneUtilAutomatonLevenshteinAutomata_get_MAXIMUM_SUPPORTED_DISTANCE(void);
#define OrgApacheLuceneUtilAutomatonLevenshteinAutomata_MAXIMUM_SUPPORTED_DISTANCE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilAutomatonLevenshteinAutomata, MAXIMUM_SUPPORTED_DISTANCE, jint)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithNSString_withBoolean_(OrgApacheLuceneUtilAutomatonLevenshteinAutomata *self, NSString *input, jboolean withTranspositions);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonLevenshteinAutomata *new_OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithNSString_withBoolean_(NSString *input, jboolean withTranspositions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonLevenshteinAutomata *create_OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithNSString_withBoolean_(NSString *input, jboolean withTranspositions);

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithIntArray_withInt_withBoolean_(OrgApacheLuceneUtilAutomatonLevenshteinAutomata *self, IOSIntArray *word, jint alphaMax, jboolean withTranspositions);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonLevenshteinAutomata *new_OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithIntArray_withInt_withBoolean_(IOSIntArray *word, jint alphaMax, jboolean withTranspositions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonLevenshteinAutomata *create_OrgApacheLuceneUtilAutomatonLevenshteinAutomata_initWithIntArray_withInt_withBoolean_(IOSIntArray *word, jint alphaMax, jboolean withTranspositions);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonLevenshteinAutomata)

#endif

#if !defined (OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonLevenshteinAutomata || defined(INCLUDE_OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription))
#define OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_

@class IOSIntArray;
@class IOSLongArray;

/*!
 @brief A ParametricDescription describes the structure of a Levenshtein DFA for some degree n.
 <p>
  There are four components of a parametric description, all parameterized on the length
  of the word <code>w</code>:
  <ol>
  <li>The number of states: <code>size()</code>
  <li>The set of final states: <code>isAccept(int)</code>
  <li>The transition function: <code>transition(int, int, int)</code>
  <li>Minimal boundary function: <code>getPosition(int)</code>
  </ol>
 */
@interface OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription : NSObject {
 @public
  jint w_;
  jint n_;
}

#pragma mark Protected

- (jint)unpackWithLongArray:(IOSLongArray *)data
                    withInt:(jint)index
                    withInt:(jint)bitsPerValue;

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)w
                              withInt:(jint)n
                         withIntArray:(IOSIntArray *)minErrors;

/*!
 @brief Returns the position in the input word for a given <code>state</code>.
 This is the minimal boundary for the state.
 */
- (jint)getPositionWithInt:(jint)absState;

/*!
 @brief Returns true if the <code>state</code> in any Levenshtein DFA is an accept state (final state).
 */
- (jboolean)isAcceptWithInt:(jint)absState;

/*!
 @brief Return the number of states needed to compute a Levenshtein DFA
 */
- (jint)size;

/*!
 @brief Returns the state number for a transition from the given <code>state</code>,
  assuming <code>position</code> and characteristic vector <code>vector</code>
 */
- (jint)transitionWithInt:(jint)state
                  withInt:(jint)position
                  withInt:(jint)vector;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription_initWithInt_withInt_withIntArray_(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription *self, jint w, jint n, IOSIntArray *minErrors);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonLevenshteinAutomata_ParametricDescription)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilAutomatonLevenshteinAutomata")
