//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/automaton/Automaton.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilAutomatonAutomaton")
#ifdef RESTRICT_OrgApacheLuceneUtilAutomatonAutomaton
#define INCLUDE_ALL_OrgApacheLuceneUtilAutomatonAutomaton 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilAutomatonAutomaton 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilAutomatonAutomaton

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilAutomatonAutomaton_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonAutomaton || defined(INCLUDE_OrgApacheLuceneUtilAutomatonAutomaton))
#define OrgApacheLuceneUtilAutomatonAutomaton_

#define RESTRICT_OrgApacheLuceneUtilAccountable 1
#define INCLUDE_OrgApacheLuceneUtilAccountable 1
#include "org/apache/lucene/util/Accountable.h"

@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangStringBuilder;
@class JavaUtilBitSet;
@class OrgApacheLuceneUtilAutomatonTransition;
@protocol JavaUtilCollection;

/*!
 @brief Represents an automaton and all its states and transitions.States
   are integers and must be created using <code>createState</code>.
 Mark a
   state as an accept state using <code>setAccept</code>.  Add transitions
   using <code>addTransition</code>.  Each state must have all of its
   transitions added at once; if this is too restrictive then use  
 <code>Automaton.Builder</code> instead.  State 0 is always the
   initial state.  Once a state is finished, either
   because you've starting adding transitions to another state or you
   call <code>finishState</code>, then that states transitions are sorted
   (first by min, then max, then dest) and reduced (transitions with
   adjacent labels going to the same dest are combined).
 */
@interface OrgApacheLuceneUtilAutomatonAutomaton : NSObject < OrgApacheLuceneUtilAccountable >

#pragma mark Public

/*!
 @brief Sole constructor; creates an automaton with no states.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructor which creates an automaton with enough space for the given
  number of states and transitions.
 @param numStates Number of states.
 @param numTransitions Number of transitions.
 */
- (instancetype __nonnull)initWithInt:(jint)numStates
                              withInt:(jint)numTransitions;

/*!
 @brief Add a [virtual] epsilon transition between source and dest.
 Dest state must already have all transitions added because this
   method simply copies those same transitions over to source.
 */
- (void)addEpsilonWithInt:(jint)source
                  withInt:(jint)dest;

/*!
 @brief Add a new transition with min = max = label.
 */
- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                     withInt:(jint)label;

/*!
 @brief Add a new transition with the specified source, dest, min, max.
 */
- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                     withInt:(jint)min
                     withInt:(jint)max;

/*!
 @brief Copies over all states/transitions from other.The states numbers
   are sequentially assigned (appended).
 */
- (void)copy__WithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)other OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Create a new state.
 */
- (jint)createState;

/*!
 @brief Finishes the current state; call this once you are done adding
   transitions for a state.This is automatically called if you
   start adding transitions to a new source state, but for the last
   state you add you need to this method yourself.
 */
- (void)finishState;

- (id<JavaUtilCollection>)getChildResources;

/*!
 @brief Iterate to the next transition after the provided one
 */
- (void)getNextTransitionWithOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t;

/*!
 @brief How many states this automaton has.
 */
- (jint)getNumStates;

/*!
 @brief How many transitions this automaton has.
 */
- (jint)getNumTransitions;

/*!
 @brief How many transitions this state has.
 */
- (jint)getNumTransitionsWithInt:(jint)state;

/*!
 @brief Sugar to get all transitions for all states.This is
   object-heavy; it's better to iterate state by state instead.
 */
- (IOSObjectArray *)getSortedTransitions;

/*!
 @brief Fill the provided <code>Transition</code> with the index'th
   transition leaving the specified state.
 */
- (void)getTransitionWithInt:(jint)state
                     withInt:(jint)index
withOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t;

/*!
 @brief Initialize the provided Transition to iterate through all transitions
   leaving the specified state.You must call <code>getNextTransition</code> to
   get each transition.
 Returns the number of transitions
   leaving this state.
 */
- (jint)initTransitionWithInt:(jint)state
withOrgApacheLuceneUtilAutomatonTransition:(OrgApacheLuceneUtilAutomatonTransition *)t OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns true if this state is an accept state.
 */
- (jboolean)isAcceptWithInt:(jint)state;

/*!
 @brief Returns true if this automaton is deterministic (for ever state
   there is only one transition for each label).
 */
- (jboolean)isDeterministic;

- (jlong)ramBytesUsed;

/*!
 @brief Set or clear this state as an accept state.
 */
- (void)setAcceptWithInt:(jint)state
             withBoolean:(jboolean)accept;

/*!
 @brief Performs lookup in transitions, assuming determinism.
 @param state starting state
 @param label codepoint to look up
 @return destination state, -1 if no matching outgoing transition
 */
- (jint)stepWithInt:(jint)state
            withInt:(jint)label;

/*!
 @brief Returns the dot (graphviz) representation of this automaton.
 This is extremely useful for visualizing the automaton.
 */
- (NSString *)toDot;

#pragma mark Package-Private

+ (void)appendCharStringWithInt:(jint)c
      withJavaLangStringBuilder:(JavaLangStringBuilder *)b;

/*!
 @brief Returns accept states.If the bit is set then that state is an accept state.
 */
- (JavaUtilBitSet *)getAcceptStates;

/*!
 @brief Returns sorted array of all interval start points.
 */
- (IOSIntArray *)getStartPoints;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonAutomaton)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonAutomaton_init(OrgApacheLuceneUtilAutomatonAutomaton *self);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *new_OrgApacheLuceneUtilAutomatonAutomaton_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *create_OrgApacheLuceneUtilAutomatonAutomaton_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonAutomaton_initWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton *self, jint numStates, jint numTransitions);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *new_OrgApacheLuceneUtilAutomatonAutomaton_initWithInt_withInt_(jint numStates, jint numTransitions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton *create_OrgApacheLuceneUtilAutomatonAutomaton_initWithInt_withInt_(jint numStates, jint numTransitions);

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonAutomaton_appendCharStringWithInt_withJavaLangStringBuilder_(jint c, JavaLangStringBuilder *b);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonAutomaton)

#endif

#if !defined (OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonAutomaton || defined(INCLUDE_OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter))
#define OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_

#define RESTRICT_OrgApacheLuceneUtilInPlaceMergeSorter 1
#define INCLUDE_OrgApacheLuceneUtilInPlaceMergeSorter 1
#include "org/apache/lucene/util/InPlaceMergeSorter.h"

@class OrgApacheLuceneUtilAutomatonAutomaton;

/*!
 @brief Sorts transitions by dest, ascending, then min label ascending, then max label ascending
 */
@interface OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter : OrgApacheLuceneUtilInPlaceMergeSorter

#pragma mark Protected

- (jint)compareWithInt:(jint)i
               withInt:(jint)j;

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

#pragma mark Package-Private

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter *self, OrgApacheLuceneUtilAutomatonAutomaton *outer$);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter *new_OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter *create_OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonAutomaton_DestMinMaxSorter)

#endif

#if !defined (OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonAutomaton || defined(INCLUDE_OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter))
#define OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_

#define RESTRICT_OrgApacheLuceneUtilInPlaceMergeSorter 1
#define INCLUDE_OrgApacheLuceneUtilInPlaceMergeSorter 1
#include "org/apache/lucene/util/InPlaceMergeSorter.h"

@class OrgApacheLuceneUtilAutomatonAutomaton;

/*!
 @brief Sorts transitions by min label, ascending, then max label ascending, then dest ascending
 */
@interface OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter : OrgApacheLuceneUtilInPlaceMergeSorter

#pragma mark Protected

- (jint)compareWithInt:(jint)i
               withInt:(jint)j;

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

#pragma mark Package-Private

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter *self, OrgApacheLuceneUtilAutomatonAutomaton *outer$);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter *new_OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter *create_OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneUtilAutomatonAutomaton *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonAutomaton_MinMaxDestSorter)

#endif

#if !defined (OrgApacheLuceneUtilAutomatonAutomaton_Builder_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonAutomaton || defined(INCLUDE_OrgApacheLuceneUtilAutomatonAutomaton_Builder))
#define OrgApacheLuceneUtilAutomatonAutomaton_Builder_

@class OrgApacheLuceneUtilAutomatonAutomaton;

/*!
 @brief Records new states and transitions and then <code>finish</code>
  creates the <code>Automaton</code>.Use this
   when you cannot create the Automaton directly because
   it's too restrictive to have to add all transitions
   leaving each state at once.
 */
@interface OrgApacheLuceneUtilAutomatonAutomaton_Builder : NSObject

#pragma mark Public

/*!
 @brief Default constructor, pre-allocating for 16 states and transitions.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructor which creates a builder with enough space for the given
  number of states and transitions.
 @param numStates Number of states.
 @param numTransitions Number of transitions.
 */
- (instancetype __nonnull)initWithInt:(jint)numStates
                              withInt:(jint)numTransitions;

/*!
 @brief Add a [virtual] epsilon transition between source and dest.
 Dest state must already have all transitions added because this
   method simply copies those same transitions over to source.
 */
- (void)addEpsilonWithInt:(jint)source
                  withInt:(jint)dest;

/*!
 @brief Add a new transition with min = max = label.
 */
- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                     withInt:(jint)label;

/*!
 @brief Add a new transition with the specified source, dest, min, max.
 */
- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                     withInt:(jint)min
                     withInt:(jint)max;

/*!
 @brief Copies over all states/transitions from other.
 */
- (void)copy__WithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)other OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Copies over all states from other.
 */
- (void)copyStatesWithOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)other OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Create a new state.
 */
- (jint)createState;

/*!
 @brief Compiles all added states and transitions into a new <code>Automaton</code>
   and returns it.
 */
- (OrgApacheLuceneUtilAutomatonAutomaton *)finish;

/*!
 @brief How many states this automaton has.
 */
- (jint)getNumStates;

/*!
 @brief Returns true if this state is an accept state.
 */
- (jboolean)isAcceptWithInt:(jint)state;

/*!
 @brief Set or clear this state as an accept state.
 */
- (void)setAcceptWithInt:(jint)state
             withBoolean:(jboolean)accept;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonAutomaton_Builder)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonAutomaton_Builder_init(OrgApacheLuceneUtilAutomatonAutomaton_Builder *self);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_Builder *new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_Builder *create_OrgApacheLuceneUtilAutomatonAutomaton_Builder_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonAutomaton_Builder_initWithInt_withInt_(OrgApacheLuceneUtilAutomatonAutomaton_Builder *self, jint numStates, jint numTransitions);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_Builder *new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_initWithInt_withInt_(jint numStates, jint numTransitions) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_Builder *create_OrgApacheLuceneUtilAutomatonAutomaton_Builder_initWithInt_withInt_(jint numStates, jint numTransitions);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonAutomaton_Builder)

#endif

#if !defined (OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_) && (INCLUDE_ALL_OrgApacheLuceneUtilAutomatonAutomaton || defined(INCLUDE_OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter))
#define OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_

#define RESTRICT_OrgApacheLuceneUtilInPlaceMergeSorter 1
#define INCLUDE_OrgApacheLuceneUtilInPlaceMergeSorter 1
#include "org/apache/lucene/util/InPlaceMergeSorter.h"

@class OrgApacheLuceneUtilAutomatonAutomaton_Builder;

/*!
 @brief Sorts transitions first then min label ascending, then
   max label ascending, then dest ascending
 */
@interface OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter : OrgApacheLuceneUtilInPlaceMergeSorter

#pragma mark Protected

- (jint)compareWithInt:(jint)i
               withInt:(jint)j;

- (void)swapWithInt:(jint)i
            withInt:(jint)j;

#pragma mark Package-Private

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder:(OrgApacheLuceneUtilAutomatonAutomaton_Builder *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter *self, OrgApacheLuceneUtilAutomatonAutomaton_Builder *outer$);

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter *new_OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_(OrgApacheLuceneUtilAutomatonAutomaton_Builder *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter *create_OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter_initWithOrgApacheLuceneUtilAutomatonAutomaton_Builder_(OrgApacheLuceneUtilAutomatonAutomaton_Builder *outer$);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAutomatonAutomaton_Builder_OurSorter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilAutomatonAutomaton")
