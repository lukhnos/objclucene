//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/FrequencyTrackingRingBuffer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilFrequencyTrackingRingBuffer")
#ifdef RESTRICT_OrgApacheLuceneUtilFrequencyTrackingRingBuffer
#define INCLUDE_ALL_OrgApacheLuceneUtilFrequencyTrackingRingBuffer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilFrequencyTrackingRingBuffer 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilFrequencyTrackingRingBuffer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilFrequencyTrackingRingBuffer_) && (INCLUDE_ALL_OrgApacheLuceneUtilFrequencyTrackingRingBuffer || defined(INCLUDE_OrgApacheLuceneUtilFrequencyTrackingRingBuffer))
#define OrgApacheLuceneUtilFrequencyTrackingRingBuffer_

#define RESTRICT_OrgApacheLuceneUtilAccountable 1
#define INCLUDE_OrgApacheLuceneUtilAccountable 1
#include "org/apache/lucene/util/Accountable.h"

@protocol JavaUtilCollection;
@protocol JavaUtilMap;

/*!
 @brief A ring buffer that tracks the frequency of the integers that it contains.
 This is typically useful to track the hash codes of popular recently-used
  items.
  This data-structure requires 22 bytes per entry on average (between 16 and
  28).
 */
@interface OrgApacheLuceneUtilFrequencyTrackingRingBuffer : NSObject < OrgApacheLuceneUtilAccountable >

#pragma mark Public

/*!
 @brief Create a new ring buffer that will contain at most <code>maxSize</code> items.
 This buffer will initially contain <code>maxSize</code> times the
   <code>sentinel</code> value.
 */
- (instancetype __nonnull)initWithInt:(jint)maxSize
                              withInt:(jint)sentinel;

/*!
 @brief Add a new item to this ring buffer, potentially removing the oldest
  entry from this buffer if it is already full.
 */
- (void)addWithInt:(jint)i;

/*!
 @brief Returns the frequency of the provided key in the ring buffer.
 */
- (jint)frequencyWithInt:(jint)key;

- (id<JavaUtilCollection>)getChildResources;

- (jlong)ramBytesUsed;

#pragma mark Package-Private

- (id<JavaUtilMap>)asFrequencyMap;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilFrequencyTrackingRingBuffer)

FOUNDATION_EXPORT void OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(OrgApacheLuceneUtilFrequencyTrackingRingBuffer *self, jint maxSize, jint sentinel);

FOUNDATION_EXPORT OrgApacheLuceneUtilFrequencyTrackingRingBuffer *new_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(jint maxSize, jint sentinel) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFrequencyTrackingRingBuffer *create_OrgApacheLuceneUtilFrequencyTrackingRingBuffer_initWithInt_withInt_(jint maxSize, jint sentinel);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFrequencyTrackingRingBuffer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilFrequencyTrackingRingBuffer")
