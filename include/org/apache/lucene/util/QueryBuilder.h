//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/QueryBuilder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilQueryBuilder")
#ifdef RESTRICT_OrgApacheLuceneUtilQueryBuilder
#define INCLUDE_ALL_OrgApacheLuceneUtilQueryBuilder 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilQueryBuilder 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilQueryBuilder

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilQueryBuilder_) && (INCLUDE_ALL_OrgApacheLuceneUtilQueryBuilder || defined(INCLUDE_OrgApacheLuceneUtilQueryBuilder))
#define OrgApacheLuceneUtilQueryBuilder_

@class OrgApacheLuceneAnalysisAnalyzer;
@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneSearchBooleanClause_Occur;
@class OrgApacheLuceneSearchBooleanQuery_Builder;
@class OrgApacheLuceneSearchMultiPhraseQuery;
@class OrgApacheLuceneSearchQuery;

/*!
 @brief Creates queries from the <code>Analyzer</code> chain.
 <p>
  Example usage: 
 <pre class="prettyprint">
    QueryBuilder builder = new QueryBuilder(analyzer);
    Query a = builder.createBooleanQuery("body", "just a test");
    Query b = builder.createPhraseQuery("body", "another test");
    Query c = builder.createMinShouldMatchQuery("body", "another test", 0.5f); 
 
@endcode
  <p>
  This can also be used as a subclass for query parsers to make it easier
  to interact with the analysis chain. Factory methods such as <code>newTermQuery</code> 
  are provided so that the generated queries can be customized.
 */
@interface OrgApacheLuceneUtilQueryBuilder : NSObject

#pragma mark Public

/*!
 @brief Creates a new QueryBuilder using the given analyzer.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer;

/*!
 @brief Creates a boolean query from the query text.
 <p>
  This is equivalent to <code>createBooleanQuery(field, queryText, Occur.SHOULD)</code>
 @param field field name
 @param queryText text to be passed to the analyzer
 @return <code>TermQuery</code> or <code>BooleanQuery</code>, based on the analysis
          of <code>queryText</code>
 */
- (OrgApacheLuceneSearchQuery *)createBooleanQueryWithNSString:(NSString *)field
                                                  withNSString:(NSString *)queryText;

/*!
 @brief Creates a boolean query from the query text.
 <p>
 @param field field name
 @param queryText text to be passed to the analyzer
 @param operator_ operator used for clauses between analyzer tokens.
 @return <code>TermQuery</code> or <code>BooleanQuery</code>, based on the analysis 
          of <code>queryText</code>
 */
- (OrgApacheLuceneSearchQuery *)createBooleanQueryWithNSString:(NSString *)field
                                                  withNSString:(NSString *)queryText
                  withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)operator_;

/*!
 @brief Creates a minimum-should-match query from the query text.
 <p>
 @param field field name
 @param queryText text to be passed to the analyzer
 @param fraction of query terms <code>[0..1]</code>  that should match
 @return <code>TermQuery</code> or <code>BooleanQuery</code>, based on the analysis 
          of <code>queryText</code>
 */
- (OrgApacheLuceneSearchQuery *)createMinShouldMatchQueryWithNSString:(NSString *)field
                                                         withNSString:(NSString *)queryText
                                                            withFloat:(jfloat)fraction;

/*!
 @brief Creates a phrase query from the query text.
 <p>
  This is equivalent to <code>createPhraseQuery(field, queryText, 0)</code>
 @param field field name
 @param queryText text to be passed to the analyzer
 @return <code>TermQuery</code>, <code>BooleanQuery</code>, <code>PhraseQuery</code>, or
          <code>MultiPhraseQuery</code>, based on the analysis of <code>queryText</code>
 */
- (OrgApacheLuceneSearchQuery *)createPhraseQueryWithNSString:(NSString *)field
                                                 withNSString:(NSString *)queryText;

/*!
 @brief Creates a phrase query from the query text.
 <p>
 @param field field name
 @param queryText text to be passed to the analyzer
 @param phraseSlop number of other words permitted between words in query phrase
 @return <code>TermQuery</code>, <code>BooleanQuery</code>, <code>PhraseQuery</code>, or
          <code>MultiPhraseQuery</code>, based on the analysis of <code>queryText</code>
 */
- (OrgApacheLuceneSearchQuery *)createPhraseQueryWithNSString:(NSString *)field
                                                 withNSString:(NSString *)queryText
                                                      withInt:(jint)phraseSlop;

/*!
 @brief Returns the analyzer.
 - seealso: #setAnalyzer(Analyzer)
 */
- (OrgApacheLuceneAnalysisAnalyzer *)getAnalyzer;

/*!
 @brief Returns true if position increments are enabled.
 - seealso: #setEnablePositionIncrements(boolean)
 */
- (jboolean)getEnablePositionIncrements;

/*!
 @brief Sets the analyzer used to tokenize text.
 */
- (void)setAnalyzerWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer;

/*!
 @brief Set to <code>true</code> to enable position increments in result query.
 <p>
  When set, result phrase and multi-phrase queries will
  be aware of position increments.
  Useful when e.g. a StopFilter increases the position increment of
  the token that follows an omitted token. 
 <p>
  Default: true.
 */
- (void)setEnablePositionIncrementsWithBoolean:(jboolean)enable;

#pragma mark Protected

/*!
 @brief Creates a query from the analysis chain.
 <p>
  Expert: this is more useful for subclasses such as queryparsers. 
  If using this class directly, just use <code>createBooleanQuery(String, String)</code>
  and <code>createPhraseQuery(String, String)</code>
 @param analyzer analyzer used for this query
 @param operator_ default boolean operator used for this query
 @param field field to create queries against
 @param queryText text to be passed to the analysis chain
 @param quoted true if phrases should be generated when terms occur at more than one position
 @param phraseSlop slop factor for phrase/multiphrase queries
 */
- (OrgApacheLuceneSearchQuery *)createFieldQueryWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                       withOrgApacheLuceneSearchBooleanClause_Occur:(OrgApacheLuceneSearchBooleanClause_Occur *)operator_
                                                                       withNSString:(NSString *)field
                                                                       withNSString:(NSString *)queryText
                                                                        withBoolean:(jboolean)quoted
                                                                            withInt:(jint)phraseSlop;

/*!
 @brief Builds a new BooleanQuery instance.
 <p>
  This is intended for subclasses that wish to customize the generated queries.
 @param disableCoord disable coord
 @return new BooleanQuery instance
 */
- (OrgApacheLuceneSearchBooleanQuery_Builder *)newBooleanQueryWithBoolean:(jboolean)disableCoord OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Builds a new MultiPhraseQuery instance.
 <p>
  This is intended for subclasses that wish to customize the generated queries.
 @return new MultiPhraseQuery instance
 */
- (OrgApacheLuceneSearchMultiPhraseQuery *)newMultiPhraseQuery OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Builds a new TermQuery instance.
 <p>
  This is intended for subclasses that wish to customize the generated queries.
 @param term term
 @return new TermQuery instance
 */
- (OrgApacheLuceneSearchQuery *)newTermQueryWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term OBJC_METHOD_FAMILY_NONE;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilQueryBuilder)

FOUNDATION_EXPORT void OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneUtilQueryBuilder *self, OrgApacheLuceneAnalysisAnalyzer *analyzer);

FOUNDATION_EXPORT OrgApacheLuceneUtilQueryBuilder *new_OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *analyzer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilQueryBuilder *create_OrgApacheLuceneUtilQueryBuilder_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *analyzer);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilQueryBuilder)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilQueryBuilder")
