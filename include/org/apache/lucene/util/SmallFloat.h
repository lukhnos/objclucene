//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/SmallFloat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilSmallFloat")
#ifdef RESTRICT_OrgApacheLuceneUtilSmallFloat
#define INCLUDE_ALL_OrgApacheLuceneUtilSmallFloat 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilSmallFloat 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilSmallFloat

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilSmallFloat_) && (INCLUDE_ALL_OrgApacheLuceneUtilSmallFloat || defined(INCLUDE_OrgApacheLuceneUtilSmallFloat))
#define OrgApacheLuceneUtilSmallFloat_

/*!
 @brief Floating point numbers smaller than 32 bits.
 */
@interface OrgApacheLuceneUtilSmallFloat : NSObject

#pragma mark Public

/*!
 @brief byteToFloat(b, mantissaBits=3, zeroExponent=15)
 */
+ (jfloat)byte315ToFloatWithByte:(jbyte)b;

/*!
 @brief byteToFloat(b, mantissaBits=5, zeroExponent=2)
 */
+ (jfloat)byte52ToFloatWithByte:(jbyte)b;

/*!
 @brief Converts an 8 bit float to a 32 bit float.
 */
+ (jfloat)byteToFloatWithByte:(jbyte)b
                      withInt:(jint)numMantissaBits
                      withInt:(jint)zeroExp;

/*!
 @brief Converts a 32 bit float to an 8 bit float.
 <br>Values less than zero are all mapped to zero. 
 <br>Values are truncated (rounded down) to the nearest 8 bit value. 
 <br>Values between zero and the smallest representable value
   are rounded up.
 @param f the 32 bit float to be converted to an 8 bit float (byte)
 @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent
 @param zeroExp the zero-point in the range of exponent values
 @return the 8 bit float representation
 */
+ (jbyte)floatToByteWithFloat:(jfloat)f
                      withInt:(jint)numMantissaBits
                      withInt:(jint)zeroExp;

/*!
 @brief floatToByte(b, mantissaBits=3, zeroExponent=15) 
 <br>smallest non-zero value = 5.820766E-10 
 <br>largest value = 7.5161928E9 
 <br>epsilon = 0.125
 */
+ (jbyte)floatToByte315WithFloat:(jfloat)f;

/*!
 @brief floatToByte(b, mantissaBits=5, zeroExponent=2) 
 <br>smallest nonzero value = 0.033203125 
 <br>largest value = 1984.0 
 <br>epsilon = 0.03125
 */
+ (jbyte)floatToByte52WithFloat:(jfloat)f;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilSmallFloat)

FOUNDATION_EXPORT jbyte OrgApacheLuceneUtilSmallFloat_floatToByteWithFloat_withInt_withInt_(jfloat f, jint numMantissaBits, jint zeroExp);

FOUNDATION_EXPORT jfloat OrgApacheLuceneUtilSmallFloat_byteToFloatWithByte_withInt_withInt_(jbyte b, jint numMantissaBits, jint zeroExp);

FOUNDATION_EXPORT jbyte OrgApacheLuceneUtilSmallFloat_floatToByte315WithFloat_(jfloat f);

FOUNDATION_EXPORT jfloat OrgApacheLuceneUtilSmallFloat_byte315ToFloatWithByte_(jbyte b);

FOUNDATION_EXPORT jbyte OrgApacheLuceneUtilSmallFloat_floatToByte52WithFloat_(jfloat f);

FOUNDATION_EXPORT jfloat OrgApacheLuceneUtilSmallFloat_byte52ToFloatWithByte_(jbyte b);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilSmallFloat)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilSmallFloat")
