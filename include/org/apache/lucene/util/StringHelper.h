//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/StringHelper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilStringHelper")
#ifdef RESTRICT_OrgApacheLuceneUtilStringHelper
#define INCLUDE_ALL_OrgApacheLuceneUtilStringHelper 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilStringHelper 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilStringHelper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilStringHelper_) && (INCLUDE_ALL_OrgApacheLuceneUtilStringHelper || defined(INCLUDE_OrgApacheLuceneUtilStringHelper))
#define OrgApacheLuceneUtilStringHelper_

@class IOSByteArray;
@class OrgApacheLuceneUtilBytesRef;
@class OrgApacheLuceneUtilIntsRef;

/*!
 @brief Methods for manipulating strings.
 */
@interface OrgApacheLuceneUtilStringHelper : NSObject
@property (readonly, class) jint GOOD_FAST_HASH_SEED NS_SWIFT_NAME(GOOD_FAST_HASH_SEED);
@property (readonly, class) jint ID_LENGTH NS_SWIFT_NAME(ID_LENGTH);

#pragma mark Public

/*!
 @brief Compares two <code>BytesRef</code>, element by element, and returns the
  number of elements common to both arrays (from the start of each).
 @param left The first <code>BytesRef</code>  to compare
 @param right The second <code>BytesRef</code>  to compare
 @return The number of common elements (from the start of each).
 */
+ (jint)bytesDifferenceWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)left
                       withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)right;

/*!
 @brief Returns <code>true</code> iff the ref ends with the given suffix.Otherwise
  <code>false</code>.
 @param ref the 
 <code>BytesRef</code>  to test
 @param suffix the expected suffix
 @return Returns <code>true</code> iff the ref ends with the given suffix.
          Otherwise <code>false</code>.
 */
+ (jboolean)endsWithWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)ref
                    withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)suffix;

+ (jboolean)equalsWithNSString:(NSString *)s1
                  withNSString:(NSString *)s2;

/*!
 @brief Helper method to render an ID as a string, for debugging
 <p>
  Returns the string <code>(null)</code> if the id is null.
 Otherwise, returns a string representation for debugging.
  Never throws an exception. The returned string may
  indicate if the id is definitely invalid.
 */
+ (NSString *)idToStringWithByteArray:(IOSByteArray *)id_;

/*!
 @brief Just converts each int in the incoming <code>IntsRef</code> to each byte
   in the returned <code>BytesRef</code>, throwing <code>IllegalArgumentException</code>
   if any int value is out of bounds for a byte.
 */
+ (OrgApacheLuceneUtilBytesRef *)intsRefToBytesRefWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)ints;

/*!
 @brief Returns the MurmurHash3_x86_32 hash.
 Original source/tests at https://github.com/yonik/java_util/
 */
+ (jint)murmurhash3_x86_32WithByteArray:(IOSByteArray *)data
                                withInt:(jint)offset
                                withInt:(jint)len
                                withInt:(jint)seed;

+ (jint)murmurhash3_x86_32WithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes
                                                  withInt:(jint)seed;

/*!
 @brief Generates a non-cryptographic globally unique id.
 */
+ (IOSByteArray *)randomId;

/*!
 @brief Returns the length of <code>currentTerm</code> needed for use as a sort key.
 so that <code>BytesRef.compareTo(BytesRef)</code> still returns the same result.
  This method assumes currentTerm comes after priorTerm.
 */
+ (jint)sortKeyLengthWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)priorTerm
                     withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)currentTerm;

/*!
 @brief Returns <code>true</code> iff the ref starts with the given prefix.
 Otherwise <code>false</code>.
 @param ref the 
 <code>byte[]</code>  to test
 @param prefix the expected prefix
 @return Returns <code>true</code> iff the ref starts with the given prefix.
          Otherwise <code>false</code>.
 */
+ (jboolean)startsWithWithByteArray:(IOSByteArray *)ref
    withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix;

/*!
 @brief Returns <code>true</code> iff the ref starts with the given prefix.
 Otherwise <code>false</code>.
 @param ref the 
 <code>BytesRef</code>  to test
 @param prefix the expected prefix
 @return Returns <code>true</code> iff the ref starts with the given prefix.
          Otherwise <code>false</code>.
 */
+ (jboolean)startsWithWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)ref
                      withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)prefix;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilStringHelper)

/*!
 @brief Pass this as the seed to <code>murmurhash3_x86_32</code>.
 */
inline jint OrgApacheLuceneUtilStringHelper_get_GOOD_FAST_HASH_SEED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint OrgApacheLuceneUtilStringHelper_GOOD_FAST_HASH_SEED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilStringHelper, GOOD_FAST_HASH_SEED, jint)

/*!
 @brief length in bytes of an ID
 */
inline jint OrgApacheLuceneUtilStringHelper_get_ID_LENGTH(void);
#define OrgApacheLuceneUtilStringHelper_ID_LENGTH 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilStringHelper, ID_LENGTH, jint)

FOUNDATION_EXPORT jint OrgApacheLuceneUtilStringHelper_bytesDifferenceWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *left, OrgApacheLuceneUtilBytesRef *right);

FOUNDATION_EXPORT jint OrgApacheLuceneUtilStringHelper_sortKeyLengthWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *priorTerm, OrgApacheLuceneUtilBytesRef *currentTerm);

FOUNDATION_EXPORT jboolean OrgApacheLuceneUtilStringHelper_equalsWithNSString_withNSString_(NSString *s1, NSString *s2);

FOUNDATION_EXPORT jboolean OrgApacheLuceneUtilStringHelper_startsWithWithByteArray_withOrgApacheLuceneUtilBytesRef_(IOSByteArray *ref, OrgApacheLuceneUtilBytesRef *prefix);

FOUNDATION_EXPORT jboolean OrgApacheLuceneUtilStringHelper_startsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *ref, OrgApacheLuceneUtilBytesRef *prefix);

FOUNDATION_EXPORT jboolean OrgApacheLuceneUtilStringHelper_endsWithWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *ref, OrgApacheLuceneUtilBytesRef *suffix);

FOUNDATION_EXPORT jint OrgApacheLuceneUtilStringHelper_murmurhash3_x86_32WithByteArray_withInt_withInt_withInt_(IOSByteArray *data, jint offset, jint len, jint seed);

FOUNDATION_EXPORT jint OrgApacheLuceneUtilStringHelper_murmurhash3_x86_32WithOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneUtilBytesRef *bytes, jint seed);

FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneUtilStringHelper_randomId(void);

FOUNDATION_EXPORT NSString *OrgApacheLuceneUtilStringHelper_idToStringWithByteArray_(IOSByteArray *id_);

FOUNDATION_EXPORT OrgApacheLuceneUtilBytesRef *OrgApacheLuceneUtilStringHelper_intsRefToBytesRefWithOrgApacheLuceneUtilIntsRef_(OrgApacheLuceneUtilIntsRef *ints);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilStringHelper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilStringHelper")
