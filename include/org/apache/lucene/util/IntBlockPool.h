//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/IntBlockPool.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilIntBlockPool")
#ifdef RESTRICT_OrgApacheLuceneUtilIntBlockPool
#define INCLUDE_ALL_OrgApacheLuceneUtilIntBlockPool 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilIntBlockPool 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilIntBlockPool
#ifdef INCLUDE_OrgApacheLuceneUtilIntBlockPool_DirectAllocator
#define INCLUDE_OrgApacheLuceneUtilIntBlockPool_Allocator 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilIntBlockPool_) && (INCLUDE_ALL_OrgApacheLuceneUtilIntBlockPool || defined(INCLUDE_OrgApacheLuceneUtilIntBlockPool))
#define OrgApacheLuceneUtilIntBlockPool_

@class IOSIntArray;
@class IOSObjectArray;
@class OrgApacheLuceneUtilIntBlockPool_Allocator;

/*!
 @brief A pool for int blocks similar to <code>ByteBlockPool</code>
 */
@interface OrgApacheLuceneUtilIntBlockPool : NSObject {
 @public
  /*!
   @brief array of buffers currently used in the pool.Buffers are allocated if needed don't modify this outside of this class
   */
  IOSObjectArray *buffers_;
  /*!
   @brief Pointer to the current position in head buffer
   */
  jint intUpto_;
  /*!
   @brief Current head buffer
   */
  IOSIntArray *buffer_;
  /*!
   @brief Current head offset
   */
  jint intOffset_;
}
@property (readonly, class) jint INT_BLOCK_SHIFT NS_SWIFT_NAME(INT_BLOCK_SHIFT);
@property (readonly, class) jint INT_BLOCK_SIZE NS_SWIFT_NAME(INT_BLOCK_SIZE);
@property (readonly, class) jint INT_BLOCK_MASK NS_SWIFT_NAME(INT_BLOCK_MASK);

#pragma mark Public

/*!
 @brief Creates a new <code>IntBlockPool</code> with a default <code>Allocator</code>.
 - seealso: IntBlockPool#nextBuffer()
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a new <code>IntBlockPool</code> with the given <code>Allocator</code>.
 - seealso: IntBlockPool#nextBuffer()
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilIntBlockPool_Allocator:(OrgApacheLuceneUtilIntBlockPool_Allocator *)allocator;

/*!
 @brief Advances the pool to its next buffer.This method should be called once
  after the constructor to initialize the pool.
 In contrast to the
  constructor a <code>IntBlockPool.reset()</code> call will advance the pool to
  its first buffer immediately.
 */
- (void)nextBuffer;

/*!
 @brief Resets the pool to its initial state reusing the first buffer.Calling
  <code>IntBlockPool.nextBuffer()</code> is not needed after reset.
 */
- (void)reset;

/*!
 @brief Expert: Resets the pool to its initial state reusing the first buffer.
 @param zeroFillBuffers if  <code> true </code>  the buffers are filled with  <tt> 0 </tt>
  .          This should be set to  <code> true </code>  if this pool is used with 
          <code>SliceWriter</code>
  .
 @param reuseFirst if  <code> true </code>  the first buffer will be reused and calling
          <code>IntBlockPool.nextBuffer()</code>  is not needed after reset iff the 
          block pool was used before ie. <code>IntBlockPool.nextBuffer()</code>  was called before.
 */
- (void)resetWithBoolean:(jboolean)zeroFillBuffers
             withBoolean:(jboolean)reuseFirst;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilIntBlockPool)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilIntBlockPool, buffers_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilIntBlockPool, buffer_, IOSIntArray *)

inline jint OrgApacheLuceneUtilIntBlockPool_get_INT_BLOCK_SHIFT(void);
#define OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SHIFT 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilIntBlockPool, INT_BLOCK_SHIFT, jint)

inline jint OrgApacheLuceneUtilIntBlockPool_get_INT_BLOCK_SIZE(void);
#define OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_SIZE 8192
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilIntBlockPool, INT_BLOCK_SIZE, jint)

inline jint OrgApacheLuceneUtilIntBlockPool_get_INT_BLOCK_MASK(void);
#define OrgApacheLuceneUtilIntBlockPool_INT_BLOCK_MASK 8191
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilIntBlockPool, INT_BLOCK_MASK, jint)

FOUNDATION_EXPORT void OrgApacheLuceneUtilIntBlockPool_init(OrgApacheLuceneUtilIntBlockPool *self);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool *new_OrgApacheLuceneUtilIntBlockPool_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool *create_OrgApacheLuceneUtilIntBlockPool_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIntBlockPool_initWithOrgApacheLuceneUtilIntBlockPool_Allocator_(OrgApacheLuceneUtilIntBlockPool *self, OrgApacheLuceneUtilIntBlockPool_Allocator *allocator);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool *new_OrgApacheLuceneUtilIntBlockPool_initWithOrgApacheLuceneUtilIntBlockPool_Allocator_(OrgApacheLuceneUtilIntBlockPool_Allocator *allocator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool *create_OrgApacheLuceneUtilIntBlockPool_initWithOrgApacheLuceneUtilIntBlockPool_Allocator_(OrgApacheLuceneUtilIntBlockPool_Allocator *allocator);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilIntBlockPool)

#endif

#if !defined (OrgApacheLuceneUtilIntBlockPool_Allocator_) && (INCLUDE_ALL_OrgApacheLuceneUtilIntBlockPool || defined(INCLUDE_OrgApacheLuceneUtilIntBlockPool_Allocator))
#define OrgApacheLuceneUtilIntBlockPool_Allocator_

@class IOSIntArray;
@class IOSObjectArray;

/*!
 @brief Abstract class for allocating and freeing int
   blocks.
 */
@interface OrgApacheLuceneUtilIntBlockPool_Allocator : NSObject {
 @public
  jint blockSize_;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)blockSize;

- (IOSIntArray *)getIntBlock;

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)start
                              withInt:(jint)end;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilIntBlockPool_Allocator)

FOUNDATION_EXPORT void OrgApacheLuceneUtilIntBlockPool_Allocator_initWithInt_(OrgApacheLuceneUtilIntBlockPool_Allocator *self, jint blockSize);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilIntBlockPool_Allocator)

#endif

#if !defined (OrgApacheLuceneUtilIntBlockPool_DirectAllocator_) && (INCLUDE_ALL_OrgApacheLuceneUtilIntBlockPool || defined(INCLUDE_OrgApacheLuceneUtilIntBlockPool_DirectAllocator))
#define OrgApacheLuceneUtilIntBlockPool_DirectAllocator_

@class IOSObjectArray;

/*!
 @brief A simple <code>Allocator</code> that never recycles.
 */
@interface OrgApacheLuceneUtilIntBlockPool_DirectAllocator : OrgApacheLuceneUtilIntBlockPool_Allocator

#pragma mark Public

/*!
 @brief Creates a new <code>DirectAllocator</code> with a default block size
 */
- (instancetype __nonnull)init;

- (void)recycleIntBlocksWithIntArray2:(IOSObjectArray *)blocks
                              withInt:(jint)start
                              withInt:(jint)end;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithInt:(jint)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilIntBlockPool_DirectAllocator)

FOUNDATION_EXPORT void OrgApacheLuceneUtilIntBlockPool_DirectAllocator_init(OrgApacheLuceneUtilIntBlockPool_DirectAllocator *self);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool_DirectAllocator *new_OrgApacheLuceneUtilIntBlockPool_DirectAllocator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool_DirectAllocator *create_OrgApacheLuceneUtilIntBlockPool_DirectAllocator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilIntBlockPool_DirectAllocator)

#endif

#if !defined (OrgApacheLuceneUtilIntBlockPool_SliceWriter_) && (INCLUDE_ALL_OrgApacheLuceneUtilIntBlockPool || defined(INCLUDE_OrgApacheLuceneUtilIntBlockPool_SliceWriter))
#define OrgApacheLuceneUtilIntBlockPool_SliceWriter_

@class OrgApacheLuceneUtilIntBlockPool;

/*!
 @brief A <code>SliceWriter</code> that allows to write multiple integer slices into a given <code>IntBlockPool</code>.
 - seealso: SliceReader
 */
@interface OrgApacheLuceneUtilIntBlockPool_SliceWriter : NSObject

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneUtilIntBlockPool:(OrgApacheLuceneUtilIntBlockPool *)pool;

/*!
 @brief Returns the offset of the currently written slice.The returned value
  should be used as the end offset to initialize a <code>SliceReader</code> once
  this slice is fully written or to reset the this writer if another slice
  needs to be written.
 */
- (jint)getCurrentOffset;

/*!
 */
- (void)resetWithInt:(jint)sliceOffset;

/*!
 @brief starts a new slice and returns the start offset.The returned value
  should be used as the start offset to initialize a <code>SliceReader</code>.
 */
- (jint)startNewSlice;

/*!
 @brief Writes the given value into the slice and resizes the slice if needed
 */
- (void)writeIntWithInt:(jint)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilIntBlockPool_SliceWriter)

FOUNDATION_EXPORT void OrgApacheLuceneUtilIntBlockPool_SliceWriter_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool_SliceWriter *self, OrgApacheLuceneUtilIntBlockPool *pool);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool_SliceWriter *new_OrgApacheLuceneUtilIntBlockPool_SliceWriter_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool *pool) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool_SliceWriter *create_OrgApacheLuceneUtilIntBlockPool_SliceWriter_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool *pool);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilIntBlockPool_SliceWriter)

#endif

#if !defined (OrgApacheLuceneUtilIntBlockPool_SliceReader_) && (INCLUDE_ALL_OrgApacheLuceneUtilIntBlockPool || defined(INCLUDE_OrgApacheLuceneUtilIntBlockPool_SliceReader))
#define OrgApacheLuceneUtilIntBlockPool_SliceReader_

@class OrgApacheLuceneUtilIntBlockPool;

/*!
 @brief A <code>SliceReader</code> that can read int slices written by a <code>SliceWriter</code>
 */
@interface OrgApacheLuceneUtilIntBlockPool_SliceReader : NSObject

#pragma mark Public

/*!
 @brief Creates a new <code>SliceReader</code> on the given pool
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilIntBlockPool:(OrgApacheLuceneUtilIntBlockPool *)pool;

/*!
 @brief Returns <code>true</code> iff the current slice is fully read.If this
  method returns <code>true</code> <code>SliceReader.readInt()</code> should not
  be called again on this slice.
 */
- (jboolean)endOfSlice;

/*!
 @brief Reads the next int from the current slice and returns it.
 - seealso: SliceReader#endOfSlice()
 */
- (jint)readInt;

/*!
 @brief Resets the reader to a slice give the slices absolute start and end offset in the pool
 */
- (void)resetWithInt:(jint)startOffset
             withInt:(jint)endOffset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilIntBlockPool_SliceReader)

FOUNDATION_EXPORT void OrgApacheLuceneUtilIntBlockPool_SliceReader_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool_SliceReader *self, OrgApacheLuceneUtilIntBlockPool *pool);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool_SliceReader *new_OrgApacheLuceneUtilIntBlockPool_SliceReader_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool *pool) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilIntBlockPool_SliceReader *create_OrgApacheLuceneUtilIntBlockPool_SliceReader_initWithOrgApacheLuceneUtilIntBlockPool_(OrgApacheLuceneUtilIntBlockPool *pool);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilIntBlockPool_SliceReader)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilIntBlockPool")
