//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/RamUsageEstimator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilRamUsageEstimator")
#ifdef RESTRICT_OrgApacheLuceneUtilRamUsageEstimator
#define INCLUDE_ALL_OrgApacheLuceneUtilRamUsageEstimator 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilRamUsageEstimator 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilRamUsageEstimator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilRamUsageEstimator_) && (INCLUDE_ALL_OrgApacheLuceneUtilRamUsageEstimator || defined(INCLUDE_OrgApacheLuceneUtilRamUsageEstimator))
#define OrgApacheLuceneUtilRamUsageEstimator_

@class IOSBooleanArray;
@class IOSByteArray;
@class IOSCharArray;
@class IOSClass;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@class JavaLangLong;
@class JavaLangReflectField;
@class JavaTextDecimalFormat;

/*!
 @brief Estimates the size (memory representation) of Java objects.
 <p>
  This class uses assumptions that were discovered for the Hotspot
  virtual machine. If you use a non-OpenJDK/Oracle-based JVM,
  the measurements may be slightly wrong.
 - seealso: #shallowSizeOf(Object)
 - seealso: #shallowSizeOfInstance(Class)
 */
@interface OrgApacheLuceneUtilRamUsageEstimator : NSObject
@property (readonly, class) jlong ONE_KB NS_SWIFT_NAME(ONE_KB);
@property (readonly, class) jlong ONE_MB NS_SWIFT_NAME(ONE_MB);
@property (readonly, class) jlong ONE_GB NS_SWIFT_NAME(ONE_GB);
@property (readonly, class) jint NUM_BYTES_BOOLEAN NS_SWIFT_NAME(NUM_BYTES_BOOLEAN);
@property (readonly, class) jint NUM_BYTES_BYTE NS_SWIFT_NAME(NUM_BYTES_BYTE);
@property (readonly, class) jint NUM_BYTES_CHAR NS_SWIFT_NAME(NUM_BYTES_CHAR);
@property (readonly, class) jint NUM_BYTES_SHORT NS_SWIFT_NAME(NUM_BYTES_SHORT);
@property (readonly, class) jint NUM_BYTES_INT NS_SWIFT_NAME(NUM_BYTES_INT);
@property (readonly, class) jint NUM_BYTES_FLOAT NS_SWIFT_NAME(NUM_BYTES_FLOAT);
@property (readonly, class) jint NUM_BYTES_LONG NS_SWIFT_NAME(NUM_BYTES_LONG);
@property (readonly, class) jint NUM_BYTES_DOUBLE NS_SWIFT_NAME(NUM_BYTES_DOUBLE);
@property (readonly, class) jboolean COMPRESSED_REFS_ENABLED NS_SWIFT_NAME(COMPRESSED_REFS_ENABLED);
@property (readonly, class) jint NUM_BYTES_OBJECT_REF NS_SWIFT_NAME(NUM_BYTES_OBJECT_REF);
@property (readonly, class) jint NUM_BYTES_OBJECT_HEADER NS_SWIFT_NAME(NUM_BYTES_OBJECT_HEADER);
@property (readonly, class) jint NUM_BYTES_ARRAY_HEADER NS_SWIFT_NAME(NUM_BYTES_ARRAY_HEADER);
@property (readonly, class) jint NUM_BYTES_OBJECT_ALIGNMENT NS_SWIFT_NAME(NUM_BYTES_OBJECT_ALIGNMENT);
@property (readonly, class) jlong LONG_CACHE_MIN_VALUE NS_SWIFT_NAME(LONG_CACHE_MIN_VALUE);
@property (readonly, class) jlong LONG_CACHE_MAX_VALUE NS_SWIFT_NAME(LONG_CACHE_MAX_VALUE);
@property (readonly, class) jint LONG_SIZE NS_SWIFT_NAME(LONG_SIZE);
@property (readonly, class) jboolean JVM_IS_HOTSPOT_64BIT NS_SWIFT_NAME(JVM_IS_HOTSPOT_64BIT);
@property (readonly, copy, class) NSString *MANAGEMENT_FACTORY_CLASS NS_SWIFT_NAME(MANAGEMENT_FACTORY_CLASS);
@property (readonly, copy, class) NSString *HOTSPOT_BEAN_CLASS NS_SWIFT_NAME(HOTSPOT_BEAN_CLASS);

#pragma mark Public

/*!
 @brief Aligns an object size to be the next multiple of <code>NUM_BYTES_OBJECT_ALIGNMENT</code>.
 */
+ (jlong)alignObjectSizeWithLong:(jlong)size;

/*!
 @brief Returns <code>size</code> in human-readable units (GB, MB, KB or bytes).
 */
+ (NSString *)humanReadableUnitsWithLong:(jlong)bytes;

/*!
 @brief Returns <code>size</code> in human-readable units (GB, MB, KB or bytes).
 */
+ (NSString *)humanReadableUnitsWithLong:(jlong)bytes
               withJavaTextDecimalFormat:(JavaTextDecimalFormat *)df;

/*!
 @brief Estimates a "shallow" memory usage of the given object.For arrays, this will be the
  memory taken by array storage (no subreferences will be followed).
 For objects, this
  will be the memory taken by the fields. 
  JVM object alignments are also applied.
 */
+ (jlong)shallowSizeOfWithId:(id)obj;

/*!
 @brief Returns the shallow size in bytes of the Object[] object.
 */
+ (jlong)shallowSizeOfWithNSObjectArray:(IOSObjectArray *)arr;

/*!
 @brief Returns the shallow instance size in bytes an instance of the given class would occupy.
 This works with all conventional classes and primitive types, but not with arrays
  (the size then depends on the number of elements and varies from object to object).
 - seealso: #shallowSizeOf(Object)
 @throw IllegalArgumentExceptionif <code>clazz</code> is an array class.
 */
+ (jlong)shallowSizeOfInstanceWithIOSClass:(IOSClass *)clazz;

/*!
 @brief Return the size of the provided array of <code>Accountable</code>s by summing
  up the shallow size of the array and the 
 <code>memory usage</code> reported by each 
 <code>Accountable</code>.
 */
+ (jlong)sizeOfWithOrgApacheLuceneUtilAccountableArray:(IOSObjectArray *)accountables;

/*!
 @brief Returns the size in bytes of the boolean[] object.
 */
+ (jlong)sizeOfWithBooleanArray:(IOSBooleanArray *)arr;

/*!
 @brief Returns the size in bytes of the byte[] object.
 */
+ (jlong)sizeOfWithByteArray:(IOSByteArray *)arr;

/*!
 @brief Returns the size in bytes of the char[] object.
 */
+ (jlong)sizeOfWithCharArray:(IOSCharArray *)arr;

/*!
 @brief Returns the size in bytes of the double[] object.
 */
+ (jlong)sizeOfWithDoubleArray:(IOSDoubleArray *)arr;

/*!
 @brief Returns the size in bytes of the float[] object.
 */
+ (jlong)sizeOfWithFloatArray:(IOSFloatArray *)arr;

/*!
 @brief Returns the size in bytes of the int[] object.
 */
+ (jlong)sizeOfWithIntArray:(IOSIntArray *)arr;

/*!
 @brief Return the size of the provided <code>Long</code> object, returning 0 if it is
  cached by the JVM and its shallow size otherwise.
 */
+ (jlong)sizeOfWithJavaLangLong:(JavaLangLong *)value;

/*!
 @brief Returns the size in bytes of the long[] object.
 */
+ (jlong)sizeOfWithLongArray:(IOSLongArray *)arr;

/*!
 @brief Returns the size in bytes of the short[] object.
 */
+ (jlong)sizeOfWithShortArray:(IOSShortArray *)arr;

#pragma mark Package-Private

/*!
 @brief This method returns the maximum representation size of an object.
 <code>sizeSoFar</code>
  is the object's size measured so far. <code>f</code> is the field being probed.  
 <p>The returned offset will be the maximum of whatever was measured so far and  
 <code>f</code> field's offset and representation size (unaligned).
 */
+ (jlong)adjustForFieldWithLong:(jlong)sizeSoFar
       withJavaLangReflectField:(JavaLangReflectField *)f;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilRamUsageEstimator)

/*!
 @brief One kilobyte bytes.
 */
inline jlong OrgApacheLuceneUtilRamUsageEstimator_get_ONE_KB(void);
#define OrgApacheLuceneUtilRamUsageEstimator_ONE_KB 1024LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, ONE_KB, jlong)

/*!
 @brief One megabyte bytes.
 */
inline jlong OrgApacheLuceneUtilRamUsageEstimator_get_ONE_MB(void);
#define OrgApacheLuceneUtilRamUsageEstimator_ONE_MB 1048576LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, ONE_MB, jlong)

/*!
 @brief One gigabyte bytes.
 */
inline jlong OrgApacheLuceneUtilRamUsageEstimator_get_ONE_GB(void);
#define OrgApacheLuceneUtilRamUsageEstimator_ONE_GB 1073741824LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, ONE_GB, jlong)

inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_BOOLEAN(void);
#define OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_BOOLEAN 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_BOOLEAN, jint)

inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_BYTE(void);
#define OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_BYTE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_BYTE, jint)

inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_CHAR(void);
#define OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_CHAR 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_CHAR, jint)

inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_SHORT(void);
#define OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_SHORT 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_SHORT, jint)

inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_INT(void);
#define OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_INT 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_INT, jint)

inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_FLOAT(void);
#define OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_FLOAT 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_FLOAT, jint)

inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_LONG(void);
#define OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_LONG 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_LONG, jint)

inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_DOUBLE(void);
#define OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_DOUBLE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_DOUBLE, jint)

/*!
 @brief True, iff compressed references (oops) are enabled by this JVM
 */
inline jboolean OrgApacheLuceneUtilRamUsageEstimator_get_COMPRESSED_REFS_ENABLED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean OrgApacheLuceneUtilRamUsageEstimator_COMPRESSED_REFS_ENABLED;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilRamUsageEstimator, COMPRESSED_REFS_ENABLED, jboolean)

/*!
 @brief Number of bytes this JVM uses to represent an object reference.
 */
inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_OBJECT_REF(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_OBJECT_REF;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_REF, jint)

/*!
 @brief Number of bytes to represent an object header (no fields, no alignments).
 */
inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_OBJECT_HEADER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_OBJECT_HEADER;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_HEADER, jint)

/*!
 @brief Number of bytes to represent an array header (no content, but with alignments).
 */
inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_ARRAY_HEADER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_ARRAY_HEADER;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_ARRAY_HEADER, jint)

/*!
 @brief A constant specifying the object alignment boundary inside the JVM.Objects will
  always take a full multiple of this constant, possibly wasting some space.
 */
inline jint OrgApacheLuceneUtilRamUsageEstimator_get_NUM_BYTES_OBJECT_ALIGNMENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint OrgApacheLuceneUtilRamUsageEstimator_NUM_BYTES_OBJECT_ALIGNMENT;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilRamUsageEstimator, NUM_BYTES_OBJECT_ALIGNMENT, jint)

/*!
 @brief JVMs typically cache small longs.This tries to find out what the range is.
 */
inline jlong OrgApacheLuceneUtilRamUsageEstimator_get_LONG_CACHE_MIN_VALUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_LONG_CACHE_MIN_VALUE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilRamUsageEstimator, LONG_CACHE_MIN_VALUE, jlong)

/*!
 @brief JVMs typically cache small longs.This tries to find out what the range is.
 */
inline jlong OrgApacheLuceneUtilRamUsageEstimator_get_LONG_CACHE_MAX_VALUE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_LONG_CACHE_MAX_VALUE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilRamUsageEstimator, LONG_CACHE_MAX_VALUE, jlong)

inline jint OrgApacheLuceneUtilRamUsageEstimator_get_LONG_SIZE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint OrgApacheLuceneUtilRamUsageEstimator_LONG_SIZE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilRamUsageEstimator, LONG_SIZE, jint)

/*!
 @brief For testing only
 */
inline jboolean OrgApacheLuceneUtilRamUsageEstimator_get_JVM_IS_HOTSPOT_64BIT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean OrgApacheLuceneUtilRamUsageEstimator_JVM_IS_HOTSPOT_64BIT;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneUtilRamUsageEstimator, JVM_IS_HOTSPOT_64BIT, jboolean)

inline NSString *OrgApacheLuceneUtilRamUsageEstimator_get_MANAGEMENT_FACTORY_CLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneUtilRamUsageEstimator_MANAGEMENT_FACTORY_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilRamUsageEstimator, MANAGEMENT_FACTORY_CLASS, NSString *)

inline NSString *OrgApacheLuceneUtilRamUsageEstimator_get_HOTSPOT_BEAN_CLASS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneUtilRamUsageEstimator_HOTSPOT_BEAN_CLASS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilRamUsageEstimator, HOTSPOT_BEAN_CLASS, NSString *)

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_alignObjectSizeWithLong_(jlong size);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithJavaLangLong_(JavaLangLong *value);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithByteArray_(IOSByteArray *arr);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithBooleanArray_(IOSBooleanArray *arr);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithCharArray_(IOSCharArray *arr);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithShortArray_(IOSShortArray *arr);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithIntArray_(IOSIntArray *arr);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithFloatArray_(IOSFloatArray *arr);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithLongArray_(IOSLongArray *arr);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithDoubleArray_(IOSDoubleArray *arr);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithNSObjectArray_(IOSObjectArray *arr);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfWithId_(id obj);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_shallowSizeOfInstanceWithIOSClass_(IOSClass *clazz);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_adjustForFieldWithLong_withJavaLangReflectField_(jlong sizeSoFar, JavaLangReflectField *f);

FOUNDATION_EXPORT NSString *OrgApacheLuceneUtilRamUsageEstimator_humanReadableUnitsWithLong_(jlong bytes);

FOUNDATION_EXPORT NSString *OrgApacheLuceneUtilRamUsageEstimator_humanReadableUnitsWithLong_withJavaTextDecimalFormat_(jlong bytes, JavaTextDecimalFormat *df);

FOUNDATION_EXPORT jlong OrgApacheLuceneUtilRamUsageEstimator_sizeOfWithOrgApacheLuceneUtilAccountableArray_(IOSObjectArray *accountables);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilRamUsageEstimator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilRamUsageEstimator")
