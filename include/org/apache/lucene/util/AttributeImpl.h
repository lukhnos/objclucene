//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/AttributeImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilAttributeImpl")
#ifdef RESTRICT_OrgApacheLuceneUtilAttributeImpl
#define INCLUDE_ALL_OrgApacheLuceneUtilAttributeImpl 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilAttributeImpl 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilAttributeImpl

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilAttributeImpl_) && (INCLUDE_ALL_OrgApacheLuceneUtilAttributeImpl || defined(INCLUDE_OrgApacheLuceneUtilAttributeImpl))
#define OrgApacheLuceneUtilAttributeImpl_

#define RESTRICT_OrgApacheLuceneUtilAttribute 1
#define INCLUDE_OrgApacheLuceneUtilAttribute 1
#include "org/apache/lucene/util/Attribute.h"

@protocol OrgApacheLuceneUtilAttributeReflector;

/*!
 @brief Base class for Attributes that can be added to a  
 <code>org.apache.lucene.util.AttributeSource</code>.
 <p>
  Attributes are used to add data in a dynamic, yet type-safe way to a source
  of usually streamed objects, e. g. a <code>org.apache.lucene.analysis.TokenStream</code>.
 */
@interface OrgApacheLuceneUtilAttributeImpl : NSObject < NSCopying, OrgApacheLuceneUtilAttribute >

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Clears the values in this AttributeImpl and resets it to its 
  default value.If this implementation implements more than one Attribute interface
  it clears all.
 */
- (void)clear;

/*!
 @brief In most cases the clone is, and should be, deep in order to be able to
  properly capture the state of all attributes.
 */
- (OrgApacheLuceneUtilAttributeImpl *)java_clone;

/*!
 @brief Copies the values from this Attribute into the passed-in
  target attribute.The target implementation must support all the
  Attributes this implementation supports.
 */
- (void)copyToWithOrgApacheLuceneUtilAttributeImpl:(OrgApacheLuceneUtilAttributeImpl *)target OBJC_METHOD_FAMILY_NONE;

/*!
 @brief This method returns the current attribute values as a string in the following format
  by calling the <code>reflectWith(AttributeReflector)</code> method:  
 <ul>
  <li><em>iff <code>prependAttClass=true</code>:</em> <code>"AttributeClass#key=value,AttributeClass#key=value"</code>
  <li><em>iff <code>prependAttClass=false</code>:</em> <code>"key=value,key=value"</code>
  </ul>
 - seealso: #reflectWith(AttributeReflector)
 */
- (NSString *)reflectAsStringWithBoolean:(jboolean)prependAttClass;

/*!
 @brief This method is for introspection of attributes, it should simply
  add the key/values this attribute holds to the given <code>AttributeReflector</code>.
 <p>Implementations look like this (e.g. for a combined attribute implementation): 
 <pre class="prettyprint">
    public void reflectWith(AttributeReflector reflector) {
      reflector.reflect(CharTermAttribute.class, "term", term());
      reflector.reflect(PositionIncrementAttribute.class, "positionIncrement", getPositionIncrement());
    } 
 
@endcode
  
 <p>If you implement this method, make sure that for each invocation, the same set of <code>Attribute</code>
  interfaces and keys are passed to <code>AttributeReflector.reflect</code> in the same order, but possibly
  different values. So don't automatically exclude e.g. <code>null</code> properties! 
 <p><b>Important for migration to Lucene 6:</b> The default implementation is
  implemented for backwards compatibility in Lucene 5 and calls 
 <code>AttributeReflector.reflect</code> for all non-static fields from the implementing
  class, using the field name as key and the field value as value. The Attribute class
  is also determined by reflection. Please note that the default implementation can
  only handle single-Attribute implementations.  
 <p><b>Please don't use the default implementation anymore, because it will be made 
 <em>abstract</em> in Lucene 6! See above for implementation example.</b>
 - seealso: #reflectAsString(boolean)
 */
- (void)reflectWithWithOrgApacheLuceneUtilAttributeReflector:(id<OrgApacheLuceneUtilAttributeReflector>)reflector;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilAttributeImpl)

FOUNDATION_EXPORT void OrgApacheLuceneUtilAttributeImpl_init(OrgApacheLuceneUtilAttributeImpl *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilAttributeImpl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilAttributeImpl")
