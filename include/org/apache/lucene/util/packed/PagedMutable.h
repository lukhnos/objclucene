//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/packed/PagedMutable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilPackedPagedMutable")
#ifdef RESTRICT_OrgApacheLuceneUtilPackedPagedMutable
#define INCLUDE_ALL_OrgApacheLuceneUtilPackedPagedMutable 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilPackedPagedMutable 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilPackedPagedMutable

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilPackedPagedMutable_) && (INCLUDE_ALL_OrgApacheLuceneUtilPackedPagedMutable || defined(INCLUDE_OrgApacheLuceneUtilPackedPagedMutable))
#define OrgApacheLuceneUtilPackedPagedMutable_

#define RESTRICT_OrgApacheLuceneUtilPackedAbstractPagedMutable 1
#define INCLUDE_OrgApacheLuceneUtilPackedAbstractPagedMutable 1
#include "org/apache/lucene/util/packed/AbstractPagedMutable.h"

@class OrgApacheLuceneUtilPackedPackedInts_Format;
@class OrgApacheLuceneUtilPackedPackedInts_FormatAndBits;
@class OrgApacheLuceneUtilPackedPackedInts_Mutable;

/*!
 @brief A <code>PagedMutable</code>.This class slices data into fixed-size blocks
  which have the same number of bits per value.
 It can be a useful replacement
  for <code>PackedInts.Mutable</code> to store more than 2B values.
 */
@interface OrgApacheLuceneUtilPackedPagedMutable : OrgApacheLuceneUtilPackedAbstractPagedMutable {
 @public
  OrgApacheLuceneUtilPackedPackedInts_Format *format_;
}

#pragma mark Public

/*!
 @brief Create a new <code>PagedMutable</code> instance.
 @param size the number of values to store.
 @param pageSize the number of values per page
 @param bitsPerValue the number of bits per value
 @param acceptableOverheadRatio an acceptable overhead ratio
 */
- (instancetype __nonnull)initWithLong:(jlong)size
                               withInt:(jint)pageSize
                               withInt:(jint)bitsPerValue
                             withFloat:(jfloat)acceptableOverheadRatio;

- (OrgApacheLuceneUtilPackedPagedMutable *)grow;

- (OrgApacheLuceneUtilPackedPagedMutable *)growWithLong:(jlong)arg0;

- (OrgApacheLuceneUtilPackedPagedMutable *)resizeWithLong:(jlong)arg0;

#pragma mark Protected

- (jlong)baseRamBytesUsed;

- (OrgApacheLuceneUtilPackedPackedInts_Mutable *)newMutableWithInt:(jint)valueCount
                                                           withInt:(jint)bitsPerValue OBJC_METHOD_FAMILY_NONE;

- (OrgApacheLuceneUtilPackedPagedMutable *)newUnfilledCopyWithLong:(jlong)newSize OBJC_METHOD_FAMILY_NONE;

#pragma mark Package-Private

- (instancetype __nonnull)initWithLong:(jlong)size
                               withInt:(jint)pageSize
withOrgApacheLuceneUtilPackedPackedInts_FormatAndBits:(OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *)formatAndBits;

- (instancetype __nonnull)initWithLong:(jlong)size
                               withInt:(jint)pageSize
                               withInt:(jint)bitsPerValue
withOrgApacheLuceneUtilPackedPackedInts_Format:(OrgApacheLuceneUtilPackedPackedInts_Format *)format;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithInt:(jint)arg0
                                           withLong:(jlong)arg1
                                            withInt:(jint)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilPackedPagedMutable)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilPackedPagedMutable, format_, OrgApacheLuceneUtilPackedPackedInts_Format *)

FOUNDATION_EXPORT void OrgApacheLuceneUtilPackedPagedMutable_initWithLong_withInt_withInt_withFloat_(OrgApacheLuceneUtilPackedPagedMutable *self, jlong size, jint pageSize, jint bitsPerValue, jfloat acceptableOverheadRatio);

FOUNDATION_EXPORT OrgApacheLuceneUtilPackedPagedMutable *new_OrgApacheLuceneUtilPackedPagedMutable_initWithLong_withInt_withInt_withFloat_(jlong size, jint pageSize, jint bitsPerValue, jfloat acceptableOverheadRatio) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilPackedPagedMutable *create_OrgApacheLuceneUtilPackedPagedMutable_initWithLong_withInt_withInt_withFloat_(jlong size, jint pageSize, jint bitsPerValue, jfloat acceptableOverheadRatio);

FOUNDATION_EXPORT void OrgApacheLuceneUtilPackedPagedMutable_initWithLong_withInt_withOrgApacheLuceneUtilPackedPackedInts_FormatAndBits_(OrgApacheLuceneUtilPackedPagedMutable *self, jlong size, jint pageSize, OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *formatAndBits);

FOUNDATION_EXPORT OrgApacheLuceneUtilPackedPagedMutable *new_OrgApacheLuceneUtilPackedPagedMutable_initWithLong_withInt_withOrgApacheLuceneUtilPackedPackedInts_FormatAndBits_(jlong size, jint pageSize, OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *formatAndBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilPackedPagedMutable *create_OrgApacheLuceneUtilPackedPagedMutable_initWithLong_withInt_withOrgApacheLuceneUtilPackedPackedInts_FormatAndBits_(jlong size, jint pageSize, OrgApacheLuceneUtilPackedPackedInts_FormatAndBits *formatAndBits);

FOUNDATION_EXPORT void OrgApacheLuceneUtilPackedPagedMutable_initWithLong_withInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Format_(OrgApacheLuceneUtilPackedPagedMutable *self, jlong size, jint pageSize, jint bitsPerValue, OrgApacheLuceneUtilPackedPackedInts_Format *format);

FOUNDATION_EXPORT OrgApacheLuceneUtilPackedPagedMutable *new_OrgApacheLuceneUtilPackedPagedMutable_initWithLong_withInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Format_(jlong size, jint pageSize, jint bitsPerValue, OrgApacheLuceneUtilPackedPackedInts_Format *format) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilPackedPagedMutable *create_OrgApacheLuceneUtilPackedPagedMutable_initWithLong_withInt_withInt_withOrgApacheLuceneUtilPackedPackedInts_Format_(jlong size, jint pageSize, jint bitsPerValue, OrgApacheLuceneUtilPackedPackedInts_Format *format);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilPackedPagedMutable)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilPackedPagedMutable")
