//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/IOUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilIOUtils")
#ifdef RESTRICT_OrgApacheLuceneUtilIOUtils
#define INCLUDE_ALL_OrgApacheLuceneUtilIOUtils 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilIOUtils 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilIOUtils

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilIOUtils_) && (INCLUDE_ALL_OrgApacheLuceneUtilIOUtils || defined(INCLUDE_OrgApacheLuceneUtilIOUtils))
#define OrgApacheLuceneUtilIOUtils_

@class IOSClass;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaIoReader;
@class JavaLangThrowable;
@class JavaNioCharsetCharset;
@class OrgApacheLuceneStoreDirectory;
@class OrgLukhnosPortmobileFilePath;
@protocol JavaLangIterable;
@protocol JavaUtilCollection;

/*!
 @brief This class emulates the new Java 7 "Try-With-Resources" statement.
 Remove once Lucene is on Java 7.
 */
@interface OrgApacheLuceneUtilIOUtils : NSObject
@property (readonly, class, strong) JavaNioCharsetCharset *CHARSET_UTF_8 NS_SWIFT_NAME(CHARSET_UTF_8);
@property (readonly, copy, class) NSString *UTF_8 NS_SWIFT_NAME(UTF_8);

#pragma mark Public

/*!
 @brief Closes all given <tt>Closeable</tt>s.Some of the 
 <tt>Closeable</tt>s may be null; they are
  ignored.
 After everything is closed, the method either
  throws the first exception it hit while closing, or
  completes normally if there were no exceptions.
 @param objects objects to call 
  <tt> close() </tt>  on
 */
+ (void)closeWithJavaIoCloseableArray:(IOSObjectArray *)objects;

/*!
 @brief Closes all given <tt>Closeable</tt>s.
 - seealso: #close(Closeable...)
 */
+ (void)closeWithJavaLangIterable:(id<JavaLangIterable>)objects;

/*!
 @brief Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.
 Some of the <tt>Closeable</tt>s may be null, they are ignored.
 @param objects objects to call 
  <tt> close() </tt>  on
 */
+ (void)closeWhileHandlingExceptionWithJavaIoCloseableArray:(IOSObjectArray *)objects;

/*!
 @brief Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.
 - seealso: #closeWhileHandlingException(Closeable...)
 */
+ (void)closeWhileHandlingExceptionWithJavaLangIterable:(id<JavaLangIterable>)objects;

/*!
 @brief Deletes all given <tt>Path</tt>s, if they exist.Some of the 
 <tt>File</tt>s may be null; they are
  ignored.
 After everything is deleted, the method either
  throws the first exception it hit while deleting, or
  completes normally if there were no exceptions.
 @param files files to delete
 */
+ (void)deleteFilesIfExistWithJavaUtilCollection:(id<JavaUtilCollection>)files;

/*!
 @brief Deletes all given <tt>Path</tt>s, if they exist.Some of the 
 <tt>File</tt>s may be null; they are
  ignored.
 After everything is deleted, the method either
  throws the first exception it hit while deleting, or
  completes normally if there were no exceptions.
 @param files files to delete
 */
+ (void)deleteFilesIfExistWithOrgLukhnosPortmobileFilePathArray:(IOSObjectArray *)files;

/*!
 @brief Deletes all given files, suppressing all thrown IOExceptions.
 <p>
  Some of the files may be null, if so they are ignored.
 */
+ (void)deleteFilesIgnoringExceptionsWithJavaUtilCollection:(id<JavaUtilCollection>)files;

/*!
 @brief Deletes all given files, suppressing all thrown IOExceptions.
 <p>
  Note that the files should not be null.
 */
+ (void)deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir
                                                     withNSStringArray:(IOSObjectArray *)files;

/*!
 @brief Deletes all given files, suppressing all thrown IOExceptions.
 <p>
  Some of the files may be null, if so they are ignored.
 */
+ (void)deleteFilesIgnoringExceptionsWithOrgLukhnosPortmobileFilePathArray:(IOSObjectArray *)files;

/*!
 @brief Ensure that any writes to the given file is written to the storage device that contains it.
 @param fileToSync the file to fsync
 @param isDir if true, the given file is a directory (we open for read and ignore IOExceptions,   because not all file systems and operating systems allow to fsync on a directory)
 */
+ (void)fsyncWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)fileToSync
                                  withBoolean:(jboolean)isDir;

/*!
 @brief Opens a Reader for the given resource using a <code>CharsetDecoder</code>.
 Unlike Java's defaults this reader will throw an exception if your it detects 
  the read charset doesn't match the expected <code>Charset</code>.  
 <p>
  Decoding readers are useful to load configuration files, stopword lists or synonym files
  to detect character set problems. However, it's not recommended to use as a common purpose 
  reader.
 @param clazz the class used to locate the resource
 @param resource the resource name to load
 @param charSet the expected charset
 @return a reader to read the given file
 */
+ (JavaIoReader *)getDecodingReaderWithIOSClass:(IOSClass *)clazz
                                   withNSString:(NSString *)resource
                      withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charSet;

/*!
 @brief Wrapping the given <code>InputStream</code> in a reader using a <code>CharsetDecoder</code>.
 Unlike Java's defaults this reader will throw an exception if your it detects 
  the read charset doesn't match the expected <code>Charset</code>.  
 <p>
  Decoding readers are useful to load configuration files, stopword lists or synonym files
  to detect character set problems. However, it's not recommended to use as a common purpose 
  reader.
 @param stream the stream to wrap in a reader
 @param charSet the expected charset
 @return a wrapping reader
 */
+ (JavaIoReader *)getDecodingReaderWithJavaIoInputStream:(JavaIoInputStream *)stream
                               withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charSet;

/*!
 @brief Simple utility method that takes a previously caught 
 <code>Throwable</code> and rethrows either <code>IOException</code>
  or an unchecked exception.If the
  argument is null then this method does nothing.
 */
+ (void)reThrowWithJavaLangThrowable:(JavaLangThrowable *)th;

/*!
 @brief Simple utility method that takes a previously caught 
 <code>Throwable</code> and rethrows it as an unchecked exception.
 If the argument is null then this method does nothing.
 */
+ (void)reThrowUncheckedWithJavaLangThrowable:(JavaLangThrowable *)th;

/*!
 @brief Deletes one or more files or directories (and everything underneath it).
 @throw IOExceptionif any of the given files (or their subhierarchy files in case
  of directories) cannot be removed.
 */
+ (void)rmWithOrgLukhnosPortmobileFilePathArray:(IOSObjectArray *)locations;

/*!
 @brief If the dir is an <code>FSDirectory</code> or wraps one via possibly
   nested <code>FilterDirectory</code> or <code>FileSwitchDirectory</code>,
   this returns <code>spins(Path)</code> for the wrapped directory,
   else, true.
 @throw IOExceptionif <code>path</code> does not exist.
 */
+ (jboolean)spinsWithOrgApacheLuceneStoreDirectory:(OrgApacheLuceneStoreDirectory *)dir;

/*!
 @brief Rough Linux-only heuristics to determine whether the provided
   <code>Path</code> is backed by spinning storage.For example, this
   returns false if the disk is a solid-state disk.
 @param path a location to check which must exist. the mount point will be determined from this location.
 @return false if the storage is non-rotational (e.g. an SSD), or true if it is spinning or could not be determined
 @throw IOExceptionif <code>path</code> does not exist.
 */
+ (jboolean)spinsWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path;

#pragma mark Package-Private

+ (jboolean)spinsLinuxWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)path;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneUtilIOUtils)

/*!
 @brief UTF-8 <code>Charset</code> instance to prevent repeated 
 <code>Charset.forName(String)</code> lookups
 */
inline JavaNioCharsetCharset *OrgApacheLuceneUtilIOUtils_get_CHARSET_UTF_8(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaNioCharsetCharset *OrgApacheLuceneUtilIOUtils_CHARSET_UTF_8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilIOUtils, CHARSET_UTF_8, JavaNioCharsetCharset *)

/*!
 @brief UTF-8 charset string.
 <p>Where possible, use <code>StandardCharsets.UTF_8</code> instead,
  as using the String constant may slow things down.
 - seealso: StandardCharsets#UTF_8
 */
inline NSString *OrgApacheLuceneUtilIOUtils_get_UTF_8(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneUtilIOUtils_UTF_8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneUtilIOUtils, UTF_8, NSString *)

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_closeWithJavaIoCloseableArray_(IOSObjectArray *objects);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_closeWithJavaLangIterable_(id<JavaLangIterable> objects);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaIoCloseableArray_(IOSObjectArray *objects);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_closeWhileHandlingExceptionWithJavaLangIterable_(id<JavaLangIterable> objects);

FOUNDATION_EXPORT JavaIoReader *OrgApacheLuceneUtilIOUtils_getDecodingReaderWithJavaIoInputStream_withJavaNioCharsetCharset_(JavaIoInputStream *stream, JavaNioCharsetCharset *charSet);

FOUNDATION_EXPORT JavaIoReader *OrgApacheLuceneUtilIOUtils_getDecodingReaderWithIOSClass_withNSString_withJavaNioCharsetCharset_(IOSClass *clazz, NSString *resource, JavaNioCharsetCharset *charSet);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgApacheLuceneStoreDirectory_withNSStringArray_(OrgApacheLuceneStoreDirectory *dir, IOSObjectArray *files);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithOrgLukhnosPortmobileFilePathArray_(IOSObjectArray *files);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_deleteFilesIgnoringExceptionsWithJavaUtilCollection_(id<JavaUtilCollection> files);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_deleteFilesIfExistWithOrgLukhnosPortmobileFilePathArray_(IOSObjectArray *files);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_deleteFilesIfExistWithJavaUtilCollection_(id<JavaUtilCollection> files);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_rmWithOrgLukhnosPortmobileFilePathArray_(IOSObjectArray *locations);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_reThrowWithJavaLangThrowable_(JavaLangThrowable *th);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_reThrowUncheckedWithJavaLangThrowable_(JavaLangThrowable *th);

FOUNDATION_EXPORT void OrgApacheLuceneUtilIOUtils_fsyncWithOrgLukhnosPortmobileFilePath_withBoolean_(OrgLukhnosPortmobileFilePath *fileToSync, jboolean isDir);

FOUNDATION_EXPORT jboolean OrgApacheLuceneUtilIOUtils_spinsWithOrgApacheLuceneStoreDirectory_(OrgApacheLuceneStoreDirectory *dir);

FOUNDATION_EXPORT jboolean OrgApacheLuceneUtilIOUtils_spinsWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *path);

FOUNDATION_EXPORT jboolean OrgApacheLuceneUtilIOUtils_spinsLinuxWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *path);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilIOUtils)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilIOUtils")
