//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/LongBitSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilLongBitSet")
#ifdef RESTRICT_OrgApacheLuceneUtilLongBitSet
#define INCLUDE_ALL_OrgApacheLuceneUtilLongBitSet 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilLongBitSet 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilLongBitSet

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilLongBitSet_) && (INCLUDE_ALL_OrgApacheLuceneUtilLongBitSet || defined(INCLUDE_OrgApacheLuceneUtilLongBitSet))
#define OrgApacheLuceneUtilLongBitSet_

@class IOSLongArray;

/*!
 @brief BitSet of fixed length (numBits), backed by accessible (<code>getBits</code>)
  long[], accessed with a long index.Use it only if you intend to store more
  than 2.1B bits, otherwise you should use <code>FixedBitSet</code>.
 */
@interface OrgApacheLuceneUtilLongBitSet : NSObject

#pragma mark Public

/*!
 @brief Creates a new LongBitSet.
 The internally allocated long array will be exactly the size needed to accommodate the numBits specified.
 @param numBits the number of bits needed
 */
- (instancetype __nonnull)initWithLong:(jlong)numBits;

/*!
 @brief Creates a new LongBitSet using the provided long[] array as backing store.
 The storedBits array must be large enough to accommodate the numBits specified, but may be larger.
  In that case the 'extra' or 'ghost' bits must be clear (or they may provoke spurious side-effects)
 @param storedBits the array to use as backing store
 @param numBits the number of bits actually needed
 */
- (instancetype __nonnull)initWithLongArray:(IOSLongArray *)storedBits
                                   withLong:(jlong)numBits;

/*!
 @brief this = this AND other
 */
- (void)and__WithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other;

/*!
 @brief this = this AND NOT other
 */
- (void)andNotWithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other;

/*!
 @brief returns the number of 64 bit words it would take to hold numBits
 */
+ (jint)bits2wordsWithLong:(jlong)numBits;

/*!
 @brief Returns number of set bits.NOTE: this visits every
   long in the backing bits array, and the result is not
   internally cached!
 */
- (jlong)cardinality;

- (void)clearWithLong:(jlong)index;

/*!
 @brief Clears a range of bits.
 @param startIndex lower index
 @param endIndex one-past the last bit to clear
 */
- (void)clearWithLong:(jlong)startIndex
             withLong:(jlong)endIndex;

- (OrgApacheLuceneUtilLongBitSet *)java_clone;

/*!
 @brief If the given <code>LongBitSet</code> is large enough to hold 
 <code>numBits+1</code>, returns the given bits, otherwise returns a new 
 <code>LongBitSet</code> which can hold the requested number of bits.
 <p>
  <b>NOTE:</b> the returned bitset reuses the underlying <code>long[]</code> of
  the given <code>bits</code> if possible. Also, calling <code>length()</code> on the
  returned bits may return a value greater than <code>numBits</code>.
 */
+ (OrgApacheLuceneUtilLongBitSet *)ensureCapacityWithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)bits
                                                                          withLong:(jlong)numBits;

/*!
 @brief returns true if both sets have the same bits set
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Flip the bit at the provided index.
 */
- (void)flipWithLong:(jlong)index;

/*!
 @brief Flips a range of bits
 @param startIndex lower index
 @param endIndex one-past the last bit to flip
 */
- (void)flipWithLong:(jlong)startIndex
            withLong:(jlong)endIndex;

- (jboolean)getWithLong:(jlong)index;

- (jboolean)getAndClearWithLong:(jlong)index;

- (jboolean)getAndSetWithLong:(jlong)index;

/*!
 @brief Expert.
 */
- (IOSLongArray *)getBits;

- (NSUInteger)hash;

/*!
 @brief returns true if the sets have any elements in common
 */
- (jboolean)intersectsWithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other;

/*!
 @brief Returns the number of bits stored in this bitset.
 */
- (jlong)length;

/*!
 @brief Returns the index of the first set bit starting at the index specified
 .
 -1 is returned if there are no more set bits.
 */
- (jlong)nextSetBitWithLong:(jlong)index;

/*!
 @brief this = this OR other
 */
- (void)or__WithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other;

/*!
 @brief Returns the index of the last set bit before or on the index specified
 .
 -1 is returned if there are no more set bits.
 */
- (jlong)prevSetBitWithLong:(jlong)index;

/*!
 @brief Scans the backing store to check if all bits are clear.
 The method is deliberately not called "isEmpty" to emphasize it is not low cost (as isEmpty usually is).
 @return true if all bits are clear.
 */
- (jboolean)scanIsEmpty;

- (void)setWithLong:(jlong)index;

/*!
 @brief Sets a range of bits
 @param startIndex lower index
 @param endIndex one-past the last bit to set
 */
- (void)setWithLong:(jlong)startIndex
           withLong:(jlong)endIndex;

/*!
 @brief this = this XOR other
 */
- (void)xor__WithOrgApacheLuceneUtilLongBitSet:(OrgApacheLuceneUtilLongBitSet *)other;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilLongBitSet)

FOUNDATION_EXPORT OrgApacheLuceneUtilLongBitSet *OrgApacheLuceneUtilLongBitSet_ensureCapacityWithOrgApacheLuceneUtilLongBitSet_withLong_(OrgApacheLuceneUtilLongBitSet *bits, jlong numBits);

FOUNDATION_EXPORT jint OrgApacheLuceneUtilLongBitSet_bits2wordsWithLong_(jlong numBits);

FOUNDATION_EXPORT void OrgApacheLuceneUtilLongBitSet_initWithLong_(OrgApacheLuceneUtilLongBitSet *self, jlong numBits);

FOUNDATION_EXPORT OrgApacheLuceneUtilLongBitSet *new_OrgApacheLuceneUtilLongBitSet_initWithLong_(jlong numBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilLongBitSet *create_OrgApacheLuceneUtilLongBitSet_initWithLong_(jlong numBits);

FOUNDATION_EXPORT void OrgApacheLuceneUtilLongBitSet_initWithLongArray_withLong_(OrgApacheLuceneUtilLongBitSet *self, IOSLongArray *storedBits, jlong numBits);

FOUNDATION_EXPORT OrgApacheLuceneUtilLongBitSet *new_OrgApacheLuceneUtilLongBitSet_initWithLongArray_withLong_(IOSLongArray *storedBits, jlong numBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilLongBitSet *create_OrgApacheLuceneUtilLongBitSet_initWithLongArray_withLong_(IOSLongArray *storedBits, jlong numBits);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilLongBitSet)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilLongBitSet")
