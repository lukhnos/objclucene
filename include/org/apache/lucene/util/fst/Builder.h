//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/fst/Builder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilFstBuilder")
#ifdef RESTRICT_OrgApacheLuceneUtilFstBuilder
#define INCLUDE_ALL_OrgApacheLuceneUtilFstBuilder 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilFstBuilder 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilFstBuilder
#ifdef INCLUDE_OrgApacheLuceneUtilFstBuilder_UnCompiledNode
#define INCLUDE_OrgApacheLuceneUtilFstBuilder_Node 1
#endif
#ifdef INCLUDE_OrgApacheLuceneUtilFstBuilder_CompiledNode
#define INCLUDE_OrgApacheLuceneUtilFstBuilder_Node 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilFstBuilder_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstBuilder || defined(INCLUDE_OrgApacheLuceneUtilFstBuilder))
#define OrgApacheLuceneUtilFstBuilder_

@class IOSIntArray;
@class OrgApacheLuceneUtilFstBytesStore;
@class OrgApacheLuceneUtilFstFST;
@class OrgApacheLuceneUtilFstFST_INPUT_TYPE;
@class OrgApacheLuceneUtilFstOutputs;
@class OrgApacheLuceneUtilIntsRef;

/*!
 @brief Builds a minimal FST (maps an IntsRef term to an arbitrary
  output) from pre-sorted terms with outputs.The FST
  becomes an FSA if you use NoOutputs.
 The FST is written
  on-the-fly into a compact serialized format byte array, which can
  be saved to / loaded from a Directory or used directly
  for traversal.  The FST is always finite (no cycles). 
 <p>NOTE: The algorithm is described at
  http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.24.3698</p>
  
 <p>The parameterized type T is the output type.  See the
  subclasses of <code>Outputs</code>.
  
 <p>FSTs larger than 2.1GB are now possible (as of Lucene
  4.2).  FSTs containing more than 2.1B nodes are also now
  possible, however they cannot be packed.
 */
@interface OrgApacheLuceneUtilFstBuilder : NSObject {
 @public
  OrgApacheLuceneUtilFstFST *fst_;
  jlong lastFrozenNode_;
  IOSIntArray *reusedBytesPerArc_;
  jlong arcCount_;
  jlong nodeCount_;
  jboolean allowArrayArcs_;
  OrgApacheLuceneUtilFstBytesStore *bytes_;
}

#pragma mark Public

/*!
 @brief Instantiates an FST/FSA builder with all the possible tuning and construction
  tweaks.Read parameter documentation carefully.
 @param inputType The input type (transition labels). Can be anything from 
 <code>INPUT_TYPE</code>     enumeration. Shorter types will consume less memory. Strings (character sequences) are 
      represented as 
 <code>INPUT_TYPE.BYTE4</code>  (full unicode codepoints).
 @param minSuffixCount1 If pruning the input graph during construction, this threshold is used for telling
      if a node is kept or pruned. If transition_count(node) 
  &gt; = minSuffixCount1, the node     is kept.
 @param minSuffixCount2 (Note: only Mike McCandless knows what this one is really doing...)
 @param doShareSuffix If 
  <code> true </code> , the shared suffixes will be compacted into unique paths.     This requires an additional RAM-intensive hash map for lookups in memory. Setting this parameter to
       <code>
  false </code>  creates a single suffix path for all input sequences. This will result in a larger     FST, but requires substantially less memory and CPU during building.
 @param doShareNonSingletonNodes Only used if doShareSuffix is true.  Set this to
      true to ensure FST is fully minimal, at cost of more
      CPU and more RAM during building.
 @param shareMaxTailLength Only used if doShareSuffix is true.  Set this to
      Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more
      CPU and more RAM during building.
 @param outputs The output type for each input sequence. Applies only if building an FST. For     FSA, use 
 <code>NoOutputs.getSingleton()</code>  and <code>NoOutputs.getNoOutput()</code>  as the     singleton output object.
 @param doPackFST Pass true to create a packed FST.
 @param acceptableOverheadRatio How to trade speed for space when building the FST. This option     is only relevant when doPackFST is true. @@see PackedInts#getMutable(int, int, float)
 @param allowArrayArcs Pass false to disable the array arc optimization     while building the FST; this will make the resulting
      FST smaller but slower to traverse.
 @param bytesPageBits How many bits wide to make each     byte[] block in the BytesStore; if you know the FST
      will be large then make this larger.  For example 15
      bits = 32768 byte pages.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE:(OrgApacheLuceneUtilFstFST_INPUT_TYPE *)inputType
                                                               withInt:(jint)minSuffixCount1
                                                               withInt:(jint)minSuffixCount2
                                                           withBoolean:(jboolean)doShareSuffix
                                                           withBoolean:(jboolean)doShareNonSingletonNodes
                                                               withInt:(jint)shareMaxTailLength
                                     withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs
                                                           withBoolean:(jboolean)doPackFST
                                                             withFloat:(jfloat)acceptableOverheadRatio
                                                           withBoolean:(jboolean)allowArrayArcs
                                                               withInt:(jint)bytesPageBits;

/*!
 @brief Instantiates an FST/FSA builder without any pruning.A shortcut
  to <code>Builder(FST.INPUT_TYPE, int, int, boolean,
 boolean, int, Outputs, boolean, float,
 boolean, int)</code>
  with pruning options turned off.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE:(OrgApacheLuceneUtilFstFST_INPUT_TYPE *)inputType
                                     withOrgApacheLuceneUtilFstOutputs:(OrgApacheLuceneUtilFstOutputs *)outputs;

/*!
 @brief Add the next input/output pair.The provided input
   must be sorted after the previous one according to  
 <code>IntsRef.compareTo</code>.
 It's also OK to add the same
   input twice in a row with different outputs, as long
   as <code>Outputs</code> implements the <code>Outputs.merge</code>
   method. Note that input is fully consumed after this
   method is returned (so caller is free to reuse), but
   output is not.  So if your outputs are changeable (eg  
 <code>ByteSequenceOutputs</code> or <code>IntSequenceOutputs</code>
 ) then you cannot reuse across
   calls.
 */
- (void)addWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input
                                   withId:(id)output;

/*!
 @brief Returns final FST.NOTE: this will return null if
   nothing is accepted by the FST.
 */
- (OrgApacheLuceneUtilFstFST *)finish;

- (jlong)fstRamBytesUsed;

- (jlong)getArcCount;

- (jlong)getMappedStateCount;

- (jlong)getNodeCount;

- (jlong)getTermCount;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstBuilder)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBuilder, fst_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBuilder, reusedBytesPerArc_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBuilder, bytes_, OrgApacheLuceneUtilFstBytesStore *)

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstBuilder *self, OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder *new_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder *create_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withOrgApacheLuceneUtilFstOutputs_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, OrgApacheLuceneUtilFstOutputs *outputs);

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withInt_withInt_withBoolean_withBoolean_withInt_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withBoolean_withInt_(OrgApacheLuceneUtilFstBuilder *self, OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, jint minSuffixCount1, jint minSuffixCount2, jboolean doShareSuffix, jboolean doShareNonSingletonNodes, jint shareMaxTailLength, OrgApacheLuceneUtilFstOutputs *outputs, jboolean doPackFST, jfloat acceptableOverheadRatio, jboolean allowArrayArcs, jint bytesPageBits);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder *new_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withInt_withInt_withBoolean_withBoolean_withInt_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withBoolean_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, jint minSuffixCount1, jint minSuffixCount2, jboolean doShareSuffix, jboolean doShareNonSingletonNodes, jint shareMaxTailLength, OrgApacheLuceneUtilFstOutputs *outputs, jboolean doPackFST, jfloat acceptableOverheadRatio, jboolean allowArrayArcs, jint bytesPageBits) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder *create_OrgApacheLuceneUtilFstBuilder_initWithOrgApacheLuceneUtilFstFST_INPUT_TYPE_withInt_withInt_withBoolean_withBoolean_withInt_withOrgApacheLuceneUtilFstOutputs_withBoolean_withFloat_withBoolean_withInt_(OrgApacheLuceneUtilFstFST_INPUT_TYPE *inputType, jint minSuffixCount1, jint minSuffixCount2, jboolean doShareSuffix, jboolean doShareNonSingletonNodes, jint shareMaxTailLength, OrgApacheLuceneUtilFstOutputs *outputs, jboolean doPackFST, jfloat acceptableOverheadRatio, jboolean allowArrayArcs, jint bytesPageBits);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstBuilder)

#endif

#if !defined (OrgApacheLuceneUtilFstBuilder_Arc_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstBuilder || defined(INCLUDE_OrgApacheLuceneUtilFstBuilder_Arc))
#define OrgApacheLuceneUtilFstBuilder_Arc_

@protocol OrgApacheLuceneUtilFstBuilder_Node;

/*!
 @brief Expert: holds a pending (seen but not yet serialized) arc.
 */
@interface OrgApacheLuceneUtilFstBuilder_Arc : NSObject {
 @public
  jint label_;
  WEAK_ id<OrgApacheLuceneUtilFstBuilder_Node> target_;
  jboolean isFinal_;
  id output_;
  id nextFinalOutput_;
}

#pragma mark Public

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstBuilder_Arc)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBuilder_Arc, output_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBuilder_Arc, nextFinalOutput_, id)

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstBuilder_Arc_init(OrgApacheLuceneUtilFstBuilder_Arc *self);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder_Arc *new_OrgApacheLuceneUtilFstBuilder_Arc_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder_Arc *create_OrgApacheLuceneUtilFstBuilder_Arc_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstBuilder_Arc)

#endif

#if !defined (OrgApacheLuceneUtilFstBuilder_Node_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstBuilder || defined(INCLUDE_OrgApacheLuceneUtilFstBuilder_Node))
#define OrgApacheLuceneUtilFstBuilder_Node_

@protocol OrgApacheLuceneUtilFstBuilder_Node < JavaObject >

- (jboolean)isCompiled;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstBuilder_Node)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstBuilder_Node)

#endif

#if !defined (OrgApacheLuceneUtilFstBuilder_CompiledNode_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstBuilder || defined(INCLUDE_OrgApacheLuceneUtilFstBuilder_CompiledNode))
#define OrgApacheLuceneUtilFstBuilder_CompiledNode_

@interface OrgApacheLuceneUtilFstBuilder_CompiledNode : NSObject < OrgApacheLuceneUtilFstBuilder_Node > {
 @public
  jlong node_;
}

#pragma mark Public

- (jboolean)isCompiled;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstBuilder_CompiledNode)

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstBuilder_CompiledNode_init(OrgApacheLuceneUtilFstBuilder_CompiledNode *self);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder_CompiledNode *new_OrgApacheLuceneUtilFstBuilder_CompiledNode_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder_CompiledNode *create_OrgApacheLuceneUtilFstBuilder_CompiledNode_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstBuilder_CompiledNode)

#endif

#if !defined (OrgApacheLuceneUtilFstBuilder_UnCompiledNode_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstBuilder || defined(INCLUDE_OrgApacheLuceneUtilFstBuilder_UnCompiledNode))
#define OrgApacheLuceneUtilFstBuilder_UnCompiledNode_

@class IOSObjectArray;
@class OrgApacheLuceneUtilFstBuilder;
@protocol OrgApacheLuceneUtilFstBuilder_Node;

/*!
 @brief Expert: holds a pending (seen but not yet serialized) Node.
 */
@interface OrgApacheLuceneUtilFstBuilder_UnCompiledNode : NSObject < OrgApacheLuceneUtilFstBuilder_Node > {
 @public
  WEAK_ OrgApacheLuceneUtilFstBuilder *owner_;
  jint numArcs_;
  IOSObjectArray *arcs_;
  id output_;
  jboolean isFinal_;
  jlong inputCount_;
  /*!
   @brief This node's depth, starting from the automaton root.
   */
  jint depth_;
}

#pragma mark Public

/*!
 @param depth The node's depth starting from the automaton root. Needed for
            LUCENE-2934 (node expansion based on conditions other than the
            fanout size).
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilFstBuilder:(OrgApacheLuceneUtilFstBuilder *)owner
                                                        withInt:(jint)depth;

- (void)addArcWithInt:(jint)label
withOrgApacheLuceneUtilFstBuilder_Node:(id<OrgApacheLuceneUtilFstBuilder_Node>)target;

- (void)clear;

- (void)deleteLastWithInt:(jint)label
withOrgApacheLuceneUtilFstBuilder_Node:(id<OrgApacheLuceneUtilFstBuilder_Node>)target;

- (id)getLastOutputWithInt:(jint)labelToMatch;

- (jboolean)isCompiled;

- (void)prependOutputWithId:(id)outputPrefix;

- (void)replaceLastWithInt:(jint)labelToMatch
withOrgApacheLuceneUtilFstBuilder_Node:(id<OrgApacheLuceneUtilFstBuilder_Node>)target
                    withId:(id)nextFinalOutput
               withBoolean:(jboolean)isFinal;

- (void)setLastOutputWithInt:(jint)labelToMatch
                      withId:(id)newOutput;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstBuilder_UnCompiledNode)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBuilder_UnCompiledNode, arcs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstBuilder_UnCompiledNode, output_, id)

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstBuilder_UnCompiledNode_initWithOrgApacheLuceneUtilFstBuilder_withInt_(OrgApacheLuceneUtilFstBuilder_UnCompiledNode *self, OrgApacheLuceneUtilFstBuilder *owner, jint depth);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder_UnCompiledNode *new_OrgApacheLuceneUtilFstBuilder_UnCompiledNode_initWithOrgApacheLuceneUtilFstBuilder_withInt_(OrgApacheLuceneUtilFstBuilder *owner, jint depth) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstBuilder_UnCompiledNode *create_OrgApacheLuceneUtilFstBuilder_UnCompiledNode_initWithOrgApacheLuceneUtilFstBuilder_withInt_(OrgApacheLuceneUtilFstBuilder *owner, jint depth);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstBuilder_UnCompiledNode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilFstBuilder")
