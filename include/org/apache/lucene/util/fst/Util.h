//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/util/fst/Util.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneUtilFstUtil")
#ifdef RESTRICT_OrgApacheLuceneUtilFstUtil
#define INCLUDE_ALL_OrgApacheLuceneUtilFstUtil 0
#else
#define INCLUDE_ALL_OrgApacheLuceneUtilFstUtil 1
#endif
#undef RESTRICT_OrgApacheLuceneUtilFstUtil

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneUtilFstUtil_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstUtil || defined(INCLUDE_OrgApacheLuceneUtilFstUtil))
#define OrgApacheLuceneUtilFstUtil_

@class IOSCharArray;
@class JavaIoWriter;
@class OrgApacheLuceneUtilBytesRef;
@class OrgApacheLuceneUtilBytesRefBuilder;
@class OrgApacheLuceneUtilFstFST;
@class OrgApacheLuceneUtilFstFST_Arc;
@class OrgApacheLuceneUtilFstFST_BytesReader;
@class OrgApacheLuceneUtilFstUtil_TopResults;
@class OrgApacheLuceneUtilIntsRef;
@class OrgApacheLuceneUtilIntsRefBuilder;
@protocol JavaLangCharSequence;
@protocol JavaUtilComparator;

/*!
 @brief Static helper methods.
 */
@interface OrgApacheLuceneUtilFstUtil : NSObject

#pragma mark Public

/*!
 @brief Looks up the output for this input, or null if the
   input is not accepted
 */
+ (id)getWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
       withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)input;

/*!
 @brief Looks up the output for this input, or null if the
   input is not accepted.
 */
+ (id)getWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
        withOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input;

/*!
 @brief Reverse lookup (lookup by output instead of by input),
   in the special case when your FSTs outputs are
   strictly ascending.This locates the input/output
   pair where the output is equal to the target, and will
   return null if that output does not exist.
 <p>NOTE: this only works with <code>FST<Long></code>, only
   works when the outputs are ascending in order with
   the inputs.
   For example, simple ordinals (0, 1,
   2, ...), or file offets (when appending to a file)
   fit this.
 */
+ (OrgApacheLuceneUtilIntsRef *)getByOutputWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                                withLong:(jlong)targetOutput;

/*!
 @brief Expert: like <code>Util.getByOutput(FST, long)</code> except reusing 
  BytesReader, initial and scratch Arc, and result.
 */
+ (OrgApacheLuceneUtilIntsRef *)getByOutputWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                                withLong:(jlong)targetOutput
                               withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg
                                       withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
                                       withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)scratchArc
                                   withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)result;

/*!
 @brief Reads the first arc greater or equal that the given label into the provided
  arc in place and returns it iff found, otherwise return <code>null</code>.
 @param label the label to ceil on
 @param fst the fst to operate on
 @param follow the arc to follow reading the label from
 @param arc the arc to read into in place
 @param inArg the fst's <code>BytesReader</code>
 */
+ (OrgApacheLuceneUtilFstFST_Arc *)readCeilArcWithInt:(jint)label
                        withOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                    withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)follow
                    withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
            withOrgApacheLuceneUtilFstFST_BytesReader:(OrgApacheLuceneUtilFstFST_BytesReader *)inArg;

/*!
 @brief Starting from node, find the top N min cost 
   completions to a final node.
 */
+ (OrgApacheLuceneUtilFstUtil_TopResults *)shortestPathsWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                    withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)fromNode
                                                                               withId:(id)startOutput
                                                               withJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                                                              withInt:(jint)topN
                                                                          withBoolean:(jboolean)allowEmptyString;

/*!
 @brief Just converts IntsRef to BytesRef; you must ensure the
   int values fit into a byte.
 */
+ (OrgApacheLuceneUtilBytesRef *)toBytesRefWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input
                                   withOrgApacheLuceneUtilBytesRefBuilder:(OrgApacheLuceneUtilBytesRefBuilder *)scratch;

/*!
 @brief Dumps an <code>FST</code> to a GraphViz's <code>dot</code> language description
  for visualization.Example of use:  
 <pre class="prettyprint">
  PrintWriter pw = new PrintWriter(&quot;out.dot&quot;);
  Util.toDot(fst, pw, true, true);
  pw.close(); 
 
@endcode
  
  and then, from command line:  
 @code

  dot -Tpng -o out.png out.dot 
  
@endcode
   
 <p>
  Note: larger FSTs (a few thousand nodes) won't even
  render, don't bother.
 If the FST is &gt; 2.1 GB in size
  then this method will throw strange exceptions.
 @param sameRank If 
  <code> true </code> , the resulting  <code> dot </code>  file will try           to order states in layers of breadth-first traversal. This may
            mess up arcs, but makes the output FST's structure a bit clearer.
 @param labelStates If 
  <code> true </code>  states will have labels equal to their offsets in their           binary format. Expands the graph considerably.
 - seealso: <a href="http://www.graphviz.org/">graphviz project</a>
 */
+ (void)toDotWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                          withJavaIoWriter:(JavaIoWriter *)outArg
                               withBoolean:(jboolean)sameRank
                               withBoolean:(jboolean)labelStates;

/*!
 @brief Just takes unsigned byte values from the BytesRef and
   converts into an IntsRef.
 */
+ (OrgApacheLuceneUtilIntsRef *)toIntsRefWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)input
                                   withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratch;

/*!
 @brief Just maps each UTF16 unit (char) to the ints in an
   IntsRef.
 */
+ (OrgApacheLuceneUtilIntsRef *)toUTF16WithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratch;

/*!
 @brief Decodes the Unicode codepoints from the provided
   char[] and places them in the provided scratch
   IntsRef, which must not be null, returning it.
 */
+ (OrgApacheLuceneUtilIntsRef *)toUTF32WithCharArray:(IOSCharArray *)s
                                             withInt:(jint)offset
                                             withInt:(jint)length
               withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratch;

/*!
 @brief Decodes the Unicode codepoints from the provided
   CharSequence and places them in the provided scratch
   IntsRef, which must not be null, returning it.
 */
+ (OrgApacheLuceneUtilIntsRef *)toUTF32WithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                          withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)scratch;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstUtil)

FOUNDATION_EXPORT id OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilIntsRef_(OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilIntsRef *input);

FOUNDATION_EXPORT id OrgApacheLuceneUtilFstUtil_getWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilBytesRef *input);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_getByOutputWithOrgApacheLuceneUtilFstFST_withLong_(OrgApacheLuceneUtilFstFST *fst, jlong targetOutput);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_getByOutputWithOrgApacheLuceneUtilFstFST_withLong_withOrgApacheLuceneUtilFstFST_BytesReader_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneUtilFstFST *fst, jlong targetOutput, OrgApacheLuceneUtilFstFST_BytesReader *inArg, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilFstFST_Arc *scratchArc, OrgApacheLuceneUtilIntsRefBuilder *result);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_TopResults *OrgApacheLuceneUtilFstUtil_shortestPathsWithOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilFstFST_Arc_withId_withJavaUtilComparator_withInt_withBoolean_(OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilFstFST_Arc *fromNode, id startOutput, id<JavaUtilComparator> comparator, jint topN, jboolean allowEmptyString);

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstUtil_toDotWithOrgApacheLuceneUtilFstFST_withJavaIoWriter_withBoolean_withBoolean_(OrgApacheLuceneUtilFstFST *fst, JavaIoWriter *outArg, jboolean sameRank, jboolean labelStates);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_toUTF16WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_(id<JavaLangCharSequence> s, OrgApacheLuceneUtilIntsRefBuilder *scratch);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_toUTF32WithJavaLangCharSequence_withOrgApacheLuceneUtilIntsRefBuilder_(id<JavaLangCharSequence> s, OrgApacheLuceneUtilIntsRefBuilder *scratch);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_toUTF32WithCharArray_withInt_withInt_withOrgApacheLuceneUtilIntsRefBuilder_(IOSCharArray *s, jint offset, jint length, OrgApacheLuceneUtilIntsRefBuilder *scratch);

FOUNDATION_EXPORT OrgApacheLuceneUtilIntsRef *OrgApacheLuceneUtilFstUtil_toIntsRefWithOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneUtilBytesRef *input, OrgApacheLuceneUtilIntsRefBuilder *scratch);

FOUNDATION_EXPORT OrgApacheLuceneUtilBytesRef *OrgApacheLuceneUtilFstUtil_toBytesRefWithOrgApacheLuceneUtilIntsRef_withOrgApacheLuceneUtilBytesRefBuilder_(OrgApacheLuceneUtilIntsRef *input, OrgApacheLuceneUtilBytesRefBuilder *scratch);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstFST_Arc *OrgApacheLuceneUtilFstUtil_readCeilArcWithInt_withOrgApacheLuceneUtilFstFST_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilFstFST_BytesReader_(jint label, OrgApacheLuceneUtilFstFST *fst, OrgApacheLuceneUtilFstFST_Arc *follow, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilFstFST_BytesReader *inArg);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstUtil)

#endif

#if !defined (OrgApacheLuceneUtilFstUtil_FSTPath_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstUtil || defined(INCLUDE_OrgApacheLuceneUtilFstUtil_FSTPath))
#define OrgApacheLuceneUtilFstUtil_FSTPath_

@class OrgApacheLuceneUtilFstFST_Arc;
@class OrgApacheLuceneUtilIntsRefBuilder;
@protocol JavaLangCharSequence;

/*!
 @brief Represents a path in TopNSearcher.
 */
@interface OrgApacheLuceneUtilFstUtil_FSTPath : NSObject {
 @public
  OrgApacheLuceneUtilFstFST_Arc *arc_;
  id cost_;
  OrgApacheLuceneUtilIntsRefBuilder *input_;
  jfloat boost_;
  id<JavaLangCharSequence> context_;
}

#pragma mark Public

/*!
 @brief Sole constructor
 */
- (instancetype __nonnull)initWithId:(id)cost
   withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input;

- (instancetype __nonnull)initWithId:(id)cost
   withOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)arc
withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input
                           withFloat:(jfloat)boost
            withJavaLangCharSequence:(id<JavaLangCharSequence>)context;

- (OrgApacheLuceneUtilFstUtil_FSTPath *)newPathWithId:(id)cost
                withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input OBJC_METHOD_FAMILY_NONE;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstUtil_FSTPath)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_FSTPath, arc_, OrgApacheLuceneUtilFstFST_Arc *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_FSTPath, cost_, id)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_FSTPath, input_, OrgApacheLuceneUtilIntsRefBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_FSTPath, context_, id<JavaLangCharSequence>)

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(OrgApacheLuceneUtilFstUtil_FSTPath *self, id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_FSTPath *new_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_FSTPath *create_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_(id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input);

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(OrgApacheLuceneUtilFstUtil_FSTPath *self, id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input, jfloat boost, id<JavaLangCharSequence> context);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_FSTPath *new_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input, jfloat boost, id<JavaLangCharSequence> context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_FSTPath *create_OrgApacheLuceneUtilFstUtil_FSTPath_initWithId_withOrgApacheLuceneUtilFstFST_Arc_withOrgApacheLuceneUtilIntsRefBuilder_withFloat_withJavaLangCharSequence_(id cost, OrgApacheLuceneUtilFstFST_Arc *arc, OrgApacheLuceneUtilIntsRefBuilder *input, jfloat boost, id<JavaLangCharSequence> context);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstUtil_FSTPath)

#endif

#if !defined (OrgApacheLuceneUtilFstUtil_TopNSearcher_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstUtil || defined(INCLUDE_OrgApacheLuceneUtilFstUtil_TopNSearcher))
#define OrgApacheLuceneUtilFstUtil_TopNSearcher_

@class JavaUtilTreeSet;
@class OrgApacheLuceneUtilFstFST;
@class OrgApacheLuceneUtilFstFST_Arc;
@class OrgApacheLuceneUtilFstUtil_FSTPath;
@class OrgApacheLuceneUtilFstUtil_TopResults;
@class OrgApacheLuceneUtilIntsRef;
@class OrgApacheLuceneUtilIntsRefBuilder;
@protocol JavaLangCharSequence;
@protocol JavaUtilComparator;

/*!
 @brief Utility class to find top N shortest paths from start
   point(s).
 */
@interface OrgApacheLuceneUtilFstUtil_TopNSearcher : NSObject {
 @public
  JavaUtilTreeSet *queue_;
}

#pragma mark Public

/*!
 @brief Creates an unbounded TopNSearcher
 @param fst the <code>org.apache.lucene.util.fst.FST</code>  to search on
 @param topN the number of top scoring entries to retrieve
 @param maxQueueDepth the maximum size of the queue of possible top entries
 @param comparator the comparator to select the top N
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                    withInt:(jint)topN
                                                    withInt:(jint)maxQueueDepth
                                     withJavaUtilComparator:(id<JavaUtilComparator>)comparator;

- (instancetype __nonnull)initWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                    withInt:(jint)topN
                                                    withInt:(jint)maxQueueDepth
                                     withJavaUtilComparator:(id<JavaUtilComparator>)comparator
                                     withJavaUtilComparator:(id<JavaUtilComparator>)pathComparator;

- (void)addStartPathsWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)node
                                                withId:(id)startOutput
                                           withBoolean:(jboolean)allowEmptyString
                 withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input;

/*!
 @brief Adds all leaving arcs, including 'finished' arc, if
   the node is final, from this node into the queue.
 */
- (void)addStartPathsWithOrgApacheLuceneUtilFstFST_Arc:(OrgApacheLuceneUtilFstFST_Arc *)node
                                                withId:(id)startOutput
                                           withBoolean:(jboolean)allowEmptyString
                 withOrgApacheLuceneUtilIntsRefBuilder:(OrgApacheLuceneUtilIntsRefBuilder *)input
                                             withFloat:(jfloat)boost
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)context;

- (OrgApacheLuceneUtilFstUtil_TopResults *)search;

#pragma mark Protected

- (jboolean)acceptResultWithOrgApacheLuceneUtilFstUtil_FSTPath:(OrgApacheLuceneUtilFstUtil_FSTPath *)path;

- (jboolean)acceptResultWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input
                                                withId:(id)output;

- (void)addIfCompetitiveWithOrgApacheLuceneUtilFstUtil_FSTPath:(OrgApacheLuceneUtilFstUtil_FSTPath *)path;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstUtil_TopNSearcher)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_TopNSearcher, queue_, JavaUtilTreeSet *)

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_(OrgApacheLuceneUtilFstUtil_TopNSearcher *self, OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_TopNSearcher *new_OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_(OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_TopNSearcher *create_OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_(OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator);

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_(OrgApacheLuceneUtilFstUtil_TopNSearcher *self, OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator, id<JavaUtilComparator> pathComparator);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_TopNSearcher *new_OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_(OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator, id<JavaUtilComparator> pathComparator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_TopNSearcher *create_OrgApacheLuceneUtilFstUtil_TopNSearcher_initWithOrgApacheLuceneUtilFstFST_withInt_withInt_withJavaUtilComparator_withJavaUtilComparator_(OrgApacheLuceneUtilFstFST *fst, jint topN, jint maxQueueDepth, id<JavaUtilComparator> comparator, id<JavaUtilComparator> pathComparator);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstUtil_TopNSearcher)

#endif

#if !defined (OrgApacheLuceneUtilFstUtil_Result_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstUtil || defined(INCLUDE_OrgApacheLuceneUtilFstUtil_Result))
#define OrgApacheLuceneUtilFstUtil_Result_

@class OrgApacheLuceneUtilIntsRef;

/*!
 @brief Holds a single input (IntsRef) + output, returned by
   <code>shortestPaths()</code>.
 */
@interface OrgApacheLuceneUtilFstUtil_Result : NSObject {
 @public
  OrgApacheLuceneUtilIntsRef *input_;
  id output_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneUtilIntsRef:(OrgApacheLuceneUtilIntsRef *)input
                                                      withId:(id)output;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstUtil_Result)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_Result, input_, OrgApacheLuceneUtilIntsRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_Result, output_, id)

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstUtil_Result_initWithOrgApacheLuceneUtilIntsRef_withId_(OrgApacheLuceneUtilFstUtil_Result *self, OrgApacheLuceneUtilIntsRef *input, id output);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_Result *new_OrgApacheLuceneUtilFstUtil_Result_initWithOrgApacheLuceneUtilIntsRef_withId_(OrgApacheLuceneUtilIntsRef *input, id output) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_Result *create_OrgApacheLuceneUtilFstUtil_Result_initWithOrgApacheLuceneUtilIntsRef_withId_(OrgApacheLuceneUtilIntsRef *input, id output);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstUtil_Result)

#endif

#if !defined (OrgApacheLuceneUtilFstUtil_TopResults_) && (INCLUDE_ALL_OrgApacheLuceneUtilFstUtil || defined(INCLUDE_OrgApacheLuceneUtilFstUtil_TopResults))
#define OrgApacheLuceneUtilFstUtil_TopResults_

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol JavaUtilSpliterator;

/*!
 @brief Holds the results for a top N search using <code>TopNSearcher</code>
 */
@interface OrgApacheLuceneUtilFstUtil_TopResults : NSObject < JavaLangIterable > {
 @public
  /*!
   @brief <code>true</code> iff this is a complete result ie.if
  the specified queue size was large enough to find the complete list of results.
   This might
  be <code>false</code> if the <code>TopNSearcher</code> rejected too many results.
   */
  jboolean isComplete_;
  /*!
   @brief The top results
   */
  id<JavaUtilList> topN_;
}

#pragma mark Public

- (id<JavaUtilIterator>)iterator;

#pragma mark Package-Private

- (instancetype __nonnull)initWithBoolean:(jboolean)isComplete
                         withJavaUtilList:(id<JavaUtilList>)topN;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneUtilFstUtil_TopResults)

J2OBJC_FIELD_SETTER(OrgApacheLuceneUtilFstUtil_TopResults, topN_, id<JavaUtilList>)

FOUNDATION_EXPORT void OrgApacheLuceneUtilFstUtil_TopResults_initWithBoolean_withJavaUtilList_(OrgApacheLuceneUtilFstUtil_TopResults *self, jboolean isComplete, id<JavaUtilList> topN);

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_TopResults *new_OrgApacheLuceneUtilFstUtil_TopResults_initWithBoolean_withJavaUtilList_(jboolean isComplete, id<JavaUtilList> topN) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneUtilFstUtil_TopResults *create_OrgApacheLuceneUtilFstUtil_TopResults_initWithBoolean_withJavaUtilList_(jboolean isComplete, id<JavaUtilList> topN);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneUtilFstUtil_TopResults)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneUtilFstUtil")
