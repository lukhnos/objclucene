//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser")
#ifdef RESTRICT_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser
#define INCLUDE_ALL_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser 1
#endif
#undef RESTRICT_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser || defined(INCLUDE_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser))
#define OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser_

#define RESTRICT_OrgApacheLuceneQueryparserClassicQueryParser 1
#define INCLUDE_OrgApacheLuceneQueryparserClassicQueryParser 1
#include "org/apache/lucene/queryparser/classic/QueryParser.h"

@class OrgApacheLuceneAnalysisAnalyzer;
@class OrgApacheLuceneQueryparserClassicQueryParserTokenManager;
@class OrgApacheLuceneSearchQuery;
@protocol OrgApacheLuceneQueryparserClassicCharStream;

/*!
 @brief Overrides Lucene's default QueryParser so that Fuzzy-, Prefix-, Range-, and WildcardQuerys
  are also passed through the given analyzer, but wildcard characters <code>
 *</code> and <code>?
 </code> don't get removed from the search terms.
 <p><b>Warning:</b> This class should only be used with analyzers that do not use stopwords
  or that add tokens. Also, several stemming analyzers are inappropriate: for example, GermanAnalyzer 
  will turn <code>H&auml;user</code> into <code>hau</code>, but <code>H?user</code> will 
  become <code>h?user</code> when using this parser and thus no match would be found (i.e.
  using this parser will be no improvement over QueryParser in such cases).
 */
@interface OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser : OrgApacheLuceneQueryparserClassicQueryParser

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)field
       withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer;

#pragma mark Protected

/*!
 @brief Returns the analyzed form for the given chunk 
  If the analyzer produces more than one output token from the given chunk,
  a ParseException is thrown.
 @param field The target field
 @param termStr The full term from which the given chunk is excerpted
 @param chunk The portion of the given termStr to be analyzed
 @return The result of analyzing the given chunk
 @throw ParseExceptionwhen analysis returns other than one output token
 */
- (NSString *)analyzeSingleChunkWithNSString:(NSString *)field
                                withNSString:(NSString *)termStr
                                withNSString:(NSString *)chunk;

/*!
 @brief Called when parser parses an input term that has the fuzzy suffix (~) appended.
 <p>
  Depending on analyzer and settings, a fuzzy term may (most probably will)
  be lower-cased automatically. It <b>will</b> go through the default Analyzer. 
 <p>
  Overrides super class, by passing terms through analyzer.
 @param field Name of the field query will use.
 @param termStr Term to use for building term for the query
 @return Resulting <code>Query</code> built for the term
 */
- (OrgApacheLuceneSearchQuery *)getFuzzyQueryWithNSString:(NSString *)field
                                             withNSString:(NSString *)termStr
                                                withFloat:(jfloat)minSimilarity;

/*!
 @brief Called when parser parses an input term
  that uses prefix notation; that is, contains a single '*' wildcard
  character as its last character.Since this is a special case
  of generic wildcard term, and such a query can be optimized easily,
  this usually results in a different query object.
 <p>
  Depending on analyzer and settings, a prefix term may (most probably will)
  be lower-cased automatically. It <b>will</b> go through the default Analyzer. 
 <p>
  Overrides super class, by passing terms through analyzer.
 @param field Name of the field query will use.
 @param termStr Term to use for building term for the query                  (
  <b> without </b>  trailing '*' character!)
 @return Resulting <code>Query</code> built for the term
 */
- (OrgApacheLuceneSearchQuery *)getPrefixQueryWithNSString:(NSString *)field
                                              withNSString:(NSString *)termStr;

/*!
 @brief Called when parser parses an input term that contains one or more wildcard
  characters (like <code>
 *</code>), but is not a prefix term (one that has just a single <code>
 *</code> character at the end).
 <p>
  Example: will be called for <code>H?user</code> or for <code>H*user</code>.
  <p>
  Depending on analyzer and settings, a wildcard term may (most probably will)
  be lower-cased automatically. It <b>will</b> go through the default Analyzer. 
 <p>
  Overrides super class, by passing terms through analyzer.
 @param field Name of the field query will use.
 @param termStr Term that contains one or more wildcard                  characters (? or *), but is not simple prefix term
 @return Resulting <code>Query</code> built for the term
 */
- (OrgApacheLuceneSearchQuery *)getWildcardQueryWithNSString:(NSString *)field
                                                withNSString:(NSString *)termStr;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneQueryparserClassicCharStream:(id<OrgApacheLuceneQueryparserClassicCharStream>)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheLuceneQueryparserClassicQueryParserTokenManager:(OrgApacheLuceneQueryparserClassicQueryParserTokenManager *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser)

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser *self, NSString *field, OrgApacheLuceneAnalysisAnalyzer *analyzer);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser *new_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(NSString *field, OrgApacheLuceneAnalysisAnalyzer *analyzer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser *create_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(NSString *field, OrgApacheLuceneAnalysisAnalyzer *analyzer);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserAnalyzingAnalyzingQueryParser")
