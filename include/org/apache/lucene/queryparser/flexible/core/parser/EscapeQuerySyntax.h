//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax")
#ifdef RESTRICT_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax
#define INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax 1
#endif
#undef RESTRICT_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax || defined(INCLUDE_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax))
#define OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_

@class JavaUtilLocale;
@class OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type;
@protocol JavaLangCharSequence;

/*!
 @brief A parser needs to implement <code>EscapeQuerySyntax</code> to allow the QueryNode
  to escape the queries, when the toQueryString method is called.
 */
@protocol OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax < JavaObject >

/*!
 @param text - text to be escaped
 @param locale - locale for the current query
 @param type - select the type of escape operation to use
 @return escaped text
 */
- (id<JavaLangCharSequence>)escapeWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                        withJavaUtilLocale:(JavaUtilLocale *)locale
withOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type:(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type *)type;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax)

#endif

#if !defined (OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax || defined(INCLUDE_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type))
#define OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_Enum) {
  OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_Enum_STRING = 0,
  OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_Enum_NORMAL = 1,
};

/*!
 @brief Type of escaping: String for escaping syntax,
  NORMAL for escaping reserved words (like AND) in terms
 */
@interface OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type : JavaLangEnum

@property (readonly, class, nonnull) OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type *STRING NS_SWIFT_NAME(STRING);
@property (readonly, class, nonnull) OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type *NORMAL NS_SWIFT_NAME(NORMAL);
#pragma mark Public

+ (OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type *OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_values_[];

inline OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type *OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_get_STRING(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type, STRING)

inline OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type *OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_get_NORMAL(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type, NORMAL)

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_values(void);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type *OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type *OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax_Type)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax")
