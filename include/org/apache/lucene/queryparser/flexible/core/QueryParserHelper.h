//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryParserHelper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper")
#ifdef RESTRICT_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper
#define INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper 1
#endif
#undef RESTRICT_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper || defined(INCLUDE_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper))
#define OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper_

@class OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler;
@protocol OrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder;
@protocol OrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser;
@protocol OrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor;

/*!
 @brief This class is a helper for the query parser framework, it does all the three
  query parser phrases at once: text parsing, query processing and query
  building.
 <p>
  It contains methods that allows the user to change the implementation used on
  the three phases.
 - seealso: QueryNodeProcessor
 - seealso: SyntaxParser
 - seealso: QueryBuilder
 - seealso: QueryConfigHandler
 */
@interface OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper : NSObject

#pragma mark Public

/*!
 @brief Creates a query parser helper object using the specified configuration,
  text parser, processor and builder.
 @param queryConfigHandler the query configuration handler that will be initially set to this
            helper
 @param syntaxParser the text parser that will be initially set to this helper
 @param processor the query processor that will be initially set to this helper
 @param builder the query builder that will be initially set to this helper
 - seealso: QueryNodeProcessor
 - seealso: SyntaxParser
 - seealso: QueryBuilder
 - seealso: QueryConfigHandler
 */
- (instancetype __nonnull)initWithOrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler:(OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *)queryConfigHandler
                                    withOrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser:(id<OrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser>)syntaxParser
                          withOrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor:(id<OrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor>)processor
                                  withOrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder:(id<OrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder>)builder;

/*!
 @brief Returns the query builder used to build a object from the query node tree.
 The object produced by this builder is returned by 
 <code>parse(String, String)</code>.
 @return the query builder
 - seealso: #setQueryBuilder(QueryBuilder)
 - seealso: QueryBuilder
 */
- (id<OrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder>)getQueryBuilder;

/*!
 @brief Returns the query configuration handler, which is used during the query
  node tree processing.It can be <code>null</code>.
 @return the query configuration handler used on the query processing,
          <code>null</code> if not query configuration handler is defined
 - seealso: QueryConfigHandler
 - seealso: #setQueryConfigHandler(QueryConfigHandler)
 */
- (OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *)getQueryConfigHandler;

/*!
 @brief Returns the processor object used to process the query node tree, it
  returns <code>null</code> if no processor is used.
 @return the actual processor used to process the query node tree,
          <code>null</code> if no processor is used
 - seealso: QueryNodeProcessor
 - seealso: #setQueryNodeProcessor(QueryNodeProcessor)
 */
- (id<OrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor>)getQueryNodeProcessor;

/*!
 @brief Returns the text parser used to build a query node tree from a query
  string.The default text parser instance returned by this method is a 
 <code>SyntaxParser</code>.
 @return the text parse used to build query node trees.
 - seealso: SyntaxParser
 - seealso: #setSyntaxParser(SyntaxParser)
 */
- (id<OrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser>)getSyntaxParser;

/*!
 @brief Parses a query string to an object, usually some query object.
 <br>
  <br>
  In this method the three phases are executed: <br>
  <br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1st - the query string is parsed using the
  text parser returned by <code>getSyntaxParser()</code>, the result is a query
  node tree <br>
  <br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2nd - the query node tree is processed by the
  processor returned by <code>getQueryNodeProcessor()</code> <br>
  <br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3th - a object is built from the query node
  tree using the builder returned by <code>getQueryBuilder()</code>
 @param query the query string
 @param defaultField the default field used by the text parser
 @return the object built from the query
 @throw QueryNodeException
 if something wrong happens along the three phases
 */
- (id)parseWithNSString:(NSString *)query
           withNSString:(NSString *)defaultField;

/*!
 @brief The query builder that will be used to build an object from the query node
  tree.It cannot be <code>null</code>.
 @param queryBuilder the query builder used to build something from the query node tree
 - seealso: #getQueryBuilder()
 - seealso: QueryBuilder
 */
- (void)setQueryBuilderWithOrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder:(id<OrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder>)queryBuilder;

/*!
 @brief Sets the query configuration handler that will be used during query
  processing.It can be <code>null</code>.
 It's also set to the processor
  returned by <code>getQueryNodeProcessor()</code>.
 @param config the query configuration handler used during query processing, it
            can be 
  <code> null </code>
 - seealso: #getQueryConfigHandler()
 - seealso: QueryConfigHandler
 */
- (void)setQueryConfigHandlerWithOrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler:(OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *)config;

/*!
 @brief Sets the processor that will be used to process the query node tree.If
  there is any <code>QueryConfigHandler</code> returned by 
 <code>getQueryConfigHandler()</code>, it will be set on the processor.
 The
  argument can be <code>null</code>, which means that no processor will be
  used to process the query node tree.
 @param processor the processor that will be used to process the query node tree,
            this argument can be 
  <code> null </code>
 - seealso: #getQueryNodeProcessor()
 - seealso: QueryNodeProcessor
 */
- (void)setQueryNodeProcessorWithOrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor:(id<OrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor>)processor;

/*!
 @brief Sets the text parser that will be used to parse the query string, it cannot be 
 <code>null</code>.
 @param syntaxParser the text parser that will be used to parse the query string
 - seealso: #getSyntaxParser()
 - seealso: SyntaxParser
 */
- (void)setSyntaxParserWithOrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser:(id<OrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser>)syntaxParser;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper)

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper_initWithOrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler_withOrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser_withOrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor_withOrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder_(OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper *self, OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *queryConfigHandler, id<OrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser> syntaxParser, id<OrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor> processor, id<OrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder> builder);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper *new_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper_initWithOrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler_withOrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser_withOrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor_withOrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder_(OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *queryConfigHandler, id<OrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser> syntaxParser, id<OrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor> processor, id<OrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder> builder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper *create_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper_initWithOrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler_withOrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser_withOrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor_withOrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder_(OrgApacheLuceneQueryparserFlexibleCoreConfigQueryConfigHandler *queryConfigHandler, id<OrgApacheLuceneQueryparserFlexibleCoreParserSyntaxParser> syntaxParser, id<OrgApacheLuceneQueryparserFlexibleCoreProcessorsQueryNodeProcessor> processor, id<OrgApacheLuceneQueryparserFlexibleCoreBuildersQueryBuilder> builder);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleCoreQueryParserHelper")
