//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode")
#ifdef RESTRICT_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode
#define INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode 1
#endif
#undef RESTRICT_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode || defined(INCLUDE_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode))
#define OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode_

#define RESTRICT_OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl 1
#define INCLUDE_OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl 1
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl.h"

#define RESTRICT_OrgApacheLuceneQueryparserFlexibleCoreNodesRangeQueryNode 1
#define INCLUDE_OrgApacheLuceneQueryparserFlexibleCoreNodesRangeQueryNode 1
#include "org/apache/lucene/queryparser/flexible/core/nodes/RangeQueryNode.h"

@protocol JavaLangCharSequence;
@protocol OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode;
@protocol OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode;
@protocol OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax;

/*!
 @brief This class should be extended by nodes intending to represent range queries.
 */
@interface OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode : OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNodeImpl < OrgApacheLuceneQueryparserFlexibleCoreNodesRangeQueryNode >

#pragma mark Public

/*!
 @brief Returns the field associated with this node.
 @return the field associated with this node
 - seealso: FieldableNode
 */
- (id<JavaLangCharSequence>)getField;

/*!
 @brief Returns the lower bound node.
 @return the lower bound node.
 */
- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode>)getLowerBound;

/*!
 @brief Returns the upper bound node.
 @return the upper bound node.
 */
- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode>)getUpperBound;

/*!
 @brief Returns whether the lower bound is inclusive or exclusive.
 @return <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>
 */
- (jboolean)isLowerInclusive;

/*!
 @brief Returns whether the upper bound is inclusive or exclusive.
 @return <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>
 */
- (jboolean)isUpperInclusive;

- (id<OrgApacheLuceneQueryparserFlexibleCoreNodesQueryNode>)java_clone;

/*!
 @brief Sets the lower and upper bounds.
 @param lower the lower bound,  <code> null </code>  if lower bound is open
 @param upper the upper bound,  <code> null </code>  if upper bound is open
 @param lowerInclusive <code> true </code>  if the lower bound is inclusive, otherwise,  <code> false </code>
 @param upperInclusive <code> true </code>  if the upper bound is inclusive, otherwise,  <code> false </code>
 - seealso: #getLowerBound()
 - seealso: #getUpperBound()
 - seealso: #isLowerInclusive()
 - seealso: #isUpperInclusive()
 */
- (void)setBoundsWithOrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode>)lower
                 withOrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode:(id<OrgApacheLuceneQueryparserFlexibleCoreNodesFieldValuePairQueryNode>)upper
                                                                            withBoolean:(jboolean)lowerInclusive
                                                                            withBoolean:(jboolean)upperInclusive;

/*!
 @brief Sets the field associated with this node.
 @param fieldName the field associated with this node
 */
- (void)setFieldWithJavaLangCharSequence:(id<JavaLangCharSequence>)fieldName;

- (id<JavaLangCharSequence>)toQueryStringWithOrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax:(id<OrgApacheLuceneQueryparserFlexibleCoreParserEscapeQuerySyntax>)escapeSyntaxParser;

- (NSString *)description;

#pragma mark Protected

/*!
 @brief Constructs an <code>AbstractRangeQueryNode</code>, it should be invoked only by
  its extenders.
 */
- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode)

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode_init(OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode *self);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode *new_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode *create_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserFlexibleStandardNodesAbstractRangeQueryNode")
