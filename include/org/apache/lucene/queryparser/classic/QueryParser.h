//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserClassicQueryParser")
#ifdef RESTRICT_OrgApacheLuceneQueryparserClassicQueryParser
#define INCLUDE_ALL_OrgApacheLuceneQueryparserClassicQueryParser 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueryparserClassicQueryParser 1
#endif
#undef RESTRICT_OrgApacheLuceneQueryparserClassicQueryParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueryparserClassicQueryParser_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserClassicQueryParser || defined(INCLUDE_OrgApacheLuceneQueryparserClassicQueryParser))
#define OrgApacheLuceneQueryparserClassicQueryParser_

#define RESTRICT_OrgApacheLuceneQueryparserClassicQueryParserBase 1
#define INCLUDE_OrgApacheLuceneQueryparserClassicQueryParserBase 1
#include "org/apache/lucene/queryparser/classic/QueryParserBase.h"

#define RESTRICT_OrgApacheLuceneQueryparserClassicQueryParserConstants 1
#define INCLUDE_OrgApacheLuceneQueryparserClassicQueryParserConstants 1
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"

@class OrgApacheLuceneAnalysisAnalyzer;
@class OrgApacheLuceneQueryparserClassicParseException;
@class OrgApacheLuceneQueryparserClassicQueryParserTokenManager;
@class OrgApacheLuceneQueryparserClassicToken;
@class OrgApacheLuceneSearchQuery;
@protocol OrgApacheLuceneQueryparserClassicCharStream;

/*!
 @brief This class is generated by JavaCC.The most important method is 
 <code>parse(String)</code>.
 The syntax for query strings is as follows:
  A Query is a series of clauses.
  A clause may be prefixed by: 
 <ul>
  <li> a plus (<code>+</code>) or a minus (<code>-</code>) sign, indicating
  that the clause is required or prohibited respectively; or 
 <li> a term followed by a colon, indicating the field to be searched.
  This enables one to construct queries which search multiple fields. 
 </ul>
  A clause may be either: 
 <ul>
  <li> a term, indicating all the documents that contain this term; or 
 <li> a nested query, enclosed in parentheses.  Note that this may be used
  with a <code>+</code>/<code>-</code> prefix to require any of a set of
  terms. 
 </ul>
  Thus, in BNF, the query grammar is: 
 @code

    Query  ::= ( Clause )*
    Clause ::= ["+", "-"] [&lt;TERM&gt; ":"] ( &lt;TERM&gt; | "(" Query ")" ) 
  
@endcode
  
 <p>
  Examples of appropriately formatted queries can be found in the <a href="{@@docRoot}/org/apache/lucene/queryparser/classic/package-summary.html#package_description">
 query syntax
  documentation</a>.
  </p>
  
 <p>
  In <code>TermRangeQuery</code>s, QueryParser tries to detect date values, e.g. 
 <tt>date:[6/1/2005 TO 6/4/2005]</tt> produces a range query that searches
  for "date" fields between 2005-06-01 and 2005-06-04. Note that the format
  of the accepted input depends on <code>the locale</code>.
  A <code>org.apache.lucene.document.DateTools.Resolution</code> has to be set,
  if you want to use <code>DateTools</code> for date conversion. 
 </p>
  <p>
  The date resolution that shall be used for RangeQueries can be set
  using <code>setDateResolution(DateTools.Resolution)</code>
  or <code>setDateResolution(String, DateTools.Resolution)</code>. The former
  sets the default date resolution for all fields, whereas the latter can
  be used to set field specific date resolutions. Field specific date
  resolutions take, if set, precedence over the default date resolution. 
 </p>
  <p>
  If you don't use <code>DateTools</code> in your index, you can create your own
  query parser that inherits QueryParser and overwrites 
 <code>getRangeQuery(String, String, String, boolean, boolean)</code> to
  use a different method for date conversion. 
 </p>
  
 <p>Note that QueryParser is <em>not</em> thread-safe.</p>   
 <p><b>NOTE</b>: there is a new QueryParser in contrib, which matches
  the same syntax as this class, but is more modular,
  enabling substantial customization to how a query is created.
 */
@interface OrgApacheLuceneQueryparserClassicQueryParser : OrgApacheLuceneQueryparserClassicQueryParserBase < OrgApacheLuceneQueryparserClassicQueryParserConstants > {
 @public
  /*!
   @brief Generated Token Manager.
   */
  OrgApacheLuceneQueryparserClassicQueryParserTokenManager *token_source_;
  /*!
   @brief Current token.
   */
  OrgApacheLuceneQueryparserClassicToken *token_;
  /*!
   @brief Next token.
   */
  OrgApacheLuceneQueryparserClassicToken *jj_nt_;
}

#pragma mark Public

/*!
 @brief Create a query parser.
 @param f the default field for query terms.
 @param a used to find terms in the query text.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)f
       withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)a;

- (OrgApacheLuceneSearchQuery *)ClauseWithNSString:(NSString *)field;

- (jint)Conjunction;

/*!
 @brief Disable tracing.
 */
- (void)disable_tracing;

/*!
 @brief Enable tracing.
 */
- (void)enable_tracing;

/*!
 @brief Generate ParseException.
 */
- (OrgApacheLuceneQueryparserClassicParseException *)generateParseException;

/*!
 @brief Get the next Token.
 */
- (OrgApacheLuceneQueryparserClassicToken *)getNextToken;

/*!
 @brief Get the specific Token.
 */
- (OrgApacheLuceneQueryparserClassicToken *)getTokenWithInt:(jint)index;

- (jint)Modifiers;

- (OrgApacheLuceneSearchQuery *)QueryWithNSString:(NSString *)field;

/*!
 @brief Reinitialise.
 */
- (void)ReInitWithOrgApacheLuceneQueryparserClassicCharStream:(id<OrgApacheLuceneQueryparserClassicCharStream>)stream;

/*!
 @brief Reinitialise.
 */
- (void)ReInitWithOrgApacheLuceneQueryparserClassicQueryParserTokenManager:(OrgApacheLuceneQueryparserClassicQueryParserTokenManager *)tm;

- (OrgApacheLuceneSearchQuery *)TermWithNSString:(NSString *)field;

- (OrgApacheLuceneSearchQuery *)TopLevelQueryWithNSString:(NSString *)field;

#pragma mark Protected

/*!
 @brief Constructor with user supplied CharStream.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneQueryparserClassicCharStream:(id<OrgApacheLuceneQueryparserClassicCharStream>)stream;

/*!
 @brief Constructor with generated Token Manager.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneQueryparserClassicQueryParserTokenManager:(OrgApacheLuceneQueryparserClassicQueryParserTokenManager *)tm;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneQueryparserClassicQueryParser)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserClassicQueryParser, token_source_, OrgApacheLuceneQueryparserClassicQueryParserTokenManager *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserClassicQueryParser, token_, OrgApacheLuceneQueryparserClassicToken *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserClassicQueryParser, jj_nt_, OrgApacheLuceneQueryparserClassicToken *)

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserClassicQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneQueryparserClassicQueryParser *self, NSString *f, OrgApacheLuceneAnalysisAnalyzer *a);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser *new_OrgApacheLuceneQueryparserClassicQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(NSString *f, OrgApacheLuceneAnalysisAnalyzer *a) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser *create_OrgApacheLuceneQueryparserClassicQueryParser_initWithNSString_withOrgApacheLuceneAnalysisAnalyzer_(NSString *f, OrgApacheLuceneAnalysisAnalyzer *a);

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserClassicQueryParser_initWithOrgApacheLuceneQueryparserClassicCharStream_(OrgApacheLuceneQueryparserClassicQueryParser *self, id<OrgApacheLuceneQueryparserClassicCharStream> stream);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser *new_OrgApacheLuceneQueryparserClassicQueryParser_initWithOrgApacheLuceneQueryparserClassicCharStream_(id<OrgApacheLuceneQueryparserClassicCharStream> stream) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser *create_OrgApacheLuceneQueryparserClassicQueryParser_initWithOrgApacheLuceneQueryparserClassicCharStream_(id<OrgApacheLuceneQueryparserClassicCharStream> stream);

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserClassicQueryParser_initWithOrgApacheLuceneQueryparserClassicQueryParserTokenManager_(OrgApacheLuceneQueryparserClassicQueryParser *self, OrgApacheLuceneQueryparserClassicQueryParserTokenManager *tm);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser *new_OrgApacheLuceneQueryparserClassicQueryParser_initWithOrgApacheLuceneQueryparserClassicQueryParserTokenManager_(OrgApacheLuceneQueryparserClassicQueryParserTokenManager *tm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser *create_OrgApacheLuceneQueryparserClassicQueryParser_initWithOrgApacheLuceneQueryparserClassicQueryParserTokenManager_(OrgApacheLuceneQueryparserClassicQueryParserTokenManager *tm);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserClassicQueryParser)

#endif

#if !defined (OrgApacheLuceneQueryparserClassicQueryParser_Operator_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserClassicQueryParser || defined(INCLUDE_OrgApacheLuceneQueryparserClassicQueryParser_Operator))
#define OrgApacheLuceneQueryparserClassicQueryParser_Operator_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgApacheLuceneQueryparserClassicQueryParser_Operator_Enum) {
  OrgApacheLuceneQueryparserClassicQueryParser_Operator_Enum_OR = 0,
  OrgApacheLuceneQueryparserClassicQueryParser_Operator_Enum_AND = 1,
};

/*!
 @brief The default operator for parsing queries.
 Use <code>QueryParserBase.setDefaultOperator</code> to change it.
 */
@interface OrgApacheLuceneQueryparserClassicQueryParser_Operator : JavaLangEnum

@property (readonly, class, nonnull) OrgApacheLuceneQueryparserClassicQueryParser_Operator *OR NS_SWIFT_NAME(OR);
@property (readonly, class, nonnull) OrgApacheLuceneQueryparserClassicQueryParser_Operator *AND NS_SWIFT_NAME(AND);
#pragma mark Public

+ (OrgApacheLuceneQueryparserClassicQueryParser_Operator *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (OrgApacheLuceneQueryparserClassicQueryParser_Operator_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneQueryparserClassicQueryParser_Operator)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser_Operator *OrgApacheLuceneQueryparserClassicQueryParser_Operator_values_[];

inline OrgApacheLuceneQueryparserClassicQueryParser_Operator *OrgApacheLuceneQueryparserClassicQueryParser_Operator_get_OR(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneQueryparserClassicQueryParser_Operator, OR)

inline OrgApacheLuceneQueryparserClassicQueryParser_Operator *OrgApacheLuceneQueryparserClassicQueryParser_Operator_get_AND(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneQueryparserClassicQueryParser_Operator, AND)

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneQueryparserClassicQueryParser_Operator_values(void);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser_Operator *OrgApacheLuceneQueryparserClassicQueryParser_Operator_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser_Operator *OrgApacheLuceneQueryparserClassicQueryParser_Operator_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserClassicQueryParser_Operator)

#endif

#if !defined (OrgApacheLuceneQueryparserClassicQueryParser_JJCalls_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserClassicQueryParser || defined(INCLUDE_OrgApacheLuceneQueryparserClassicQueryParser_JJCalls))
#define OrgApacheLuceneQueryparserClassicQueryParser_JJCalls_

@class OrgApacheLuceneQueryparserClassicToken;

@interface OrgApacheLuceneQueryparserClassicQueryParser_JJCalls : NSObject {
 @public
  jint gen_;
  OrgApacheLuceneQueryparserClassicToken *first_;
  jint arg_;
  OrgApacheLuceneQueryparserClassicQueryParser_JJCalls *next_;
}

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueryparserClassicQueryParser_JJCalls)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserClassicQueryParser_JJCalls, first_, OrgApacheLuceneQueryparserClassicToken *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserClassicQueryParser_JJCalls, next_, OrgApacheLuceneQueryparserClassicQueryParser_JJCalls *)

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserClassicQueryParser_JJCalls_init(OrgApacheLuceneQueryparserClassicQueryParser_JJCalls *self);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser_JJCalls *new_OrgApacheLuceneQueryparserClassicQueryParser_JJCalls_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicQueryParser_JJCalls *create_OrgApacheLuceneQueryparserClassicQueryParser_JJCalls_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserClassicQueryParser_JJCalls)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserClassicQueryParser")
