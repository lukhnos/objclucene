//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserClassicParseException")
#ifdef RESTRICT_OrgApacheLuceneQueryparserClassicParseException
#define INCLUDE_ALL_OrgApacheLuceneQueryparserClassicParseException 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueryparserClassicParseException 1
#endif
#undef RESTRICT_OrgApacheLuceneQueryparserClassicParseException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueryparserClassicParseException_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserClassicParseException || defined(INCLUDE_OrgApacheLuceneQueryparserClassicParseException))
#define OrgApacheLuceneQueryparserClassicParseException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class IOSObjectArray;
@class JavaLangThrowable;
@class OrgApacheLuceneQueryparserClassicToken;

/*!
 @brief This exception is thrown when parse errors are encountered.
 You can explicitly create objects of this exception type by
  calling the method generateParseException in the generated
  parser.
  You can modify this class to customize your error reporting
  mechanisms so long as you retain the public fields.
 */
@interface OrgApacheLuceneQueryparserClassicParseException : JavaLangException {
 @public
  /*!
   @brief This is the last token that has been consumed successfully.If
  this object has been created due to a parse error, the token
  followng this token will (therefore) be the first error token.
   */
  OrgApacheLuceneQueryparserClassicToken *currentToken_;
  /*!
   @brief Each entry in this array is an array of integers.Each array
  of integers represents a sequence of tokens (by their ordinal
  values) that is expected at this point of the parse.
   */
  IOSObjectArray *expectedTokenSequences_;
  /*!
   @brief This is a reference to the "tokenImage" array of the generated
  parser within which the parse error occurred.This array is
  defined in the generated ...Constants interface.
   */
  IOSObjectArray *tokenImage_;
  /*!
   @brief The end of line string for this machine.
   */
  NSString *eol_;
}

#pragma mark Public

/*!
 @brief The following constructors are for use by you for whatever
  purpose you can think of.Constructing the exception in this
  manner makes the exception behave in the normal way - i.e., as
  documented in the class "Throwable".
 The fields "errorToken",
  "expectedTokenSequences", and "tokenImage" do not contain
  relevant information.  The JavaCC generated code does not use
  these constructors.
 */
- (instancetype __nonnull)init;

/*!
 @brief Constructor with message.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)message;

/*!
 @brief This constructor is used by the method "generateParseException"
  in the generated parser.Calling this constructor generates
  a new object of this type with the fields "currentToken",
  "expectedTokenSequences", and "tokenImage" set.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneQueryparserClassicToken:(OrgApacheLuceneQueryparserClassicToken *)currentTokenVal
                                                           withIntArray2:(IOSObjectArray *)expectedTokenSequencesVal
                                                       withNSStringArray:(IOSObjectArray *)tokenImageVal;

#pragma mark Package-Private

/*!
 @brief Used to convert raw characters to their escaped version
  when these raw version cannot be used as part of an ASCII
  string literal.
 */
+ (NSString *)add_escapesWithNSString:(NSString *)str;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueryparserClassicParseException)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserClassicParseException, currentToken_, OrgApacheLuceneQueryparserClassicToken *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserClassicParseException, expectedTokenSequences_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserClassicParseException, tokenImage_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserClassicParseException, eol_, NSString *)

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserClassicParseException_initWithOrgApacheLuceneQueryparserClassicToken_withIntArray2_withNSStringArray_(OrgApacheLuceneQueryparserClassicParseException *self, OrgApacheLuceneQueryparserClassicToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicParseException *new_OrgApacheLuceneQueryparserClassicParseException_initWithOrgApacheLuceneQueryparserClassicToken_withIntArray2_withNSStringArray_(OrgApacheLuceneQueryparserClassicToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicParseException *create_OrgApacheLuceneQueryparserClassicParseException_initWithOrgApacheLuceneQueryparserClassicToken_withIntArray2_withNSStringArray_(OrgApacheLuceneQueryparserClassicToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal);

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserClassicParseException_init(OrgApacheLuceneQueryparserClassicParseException *self);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicParseException *new_OrgApacheLuceneQueryparserClassicParseException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicParseException *create_OrgApacheLuceneQueryparserClassicParseException_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(OrgApacheLuceneQueryparserClassicParseException *self, NSString *message);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicParseException *new_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserClassicParseException *create_OrgApacheLuceneQueryparserClassicParseException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT NSString *OrgApacheLuceneQueryparserClassicParseException_add_escapesWithNSString_(NSString *str);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserClassicParseException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserClassicParseException")
