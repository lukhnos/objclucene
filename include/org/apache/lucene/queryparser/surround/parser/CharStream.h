//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/surround/parser/CharStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserCharStream")
#ifdef RESTRICT_OrgApacheLuceneQueryparserSurroundParserCharStream
#define INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserCharStream 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserCharStream 1
#endif
#undef RESTRICT_OrgApacheLuceneQueryparserSurroundParserCharStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueryparserSurroundParserCharStream_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserCharStream || defined(INCLUDE_OrgApacheLuceneQueryparserSurroundParserCharStream))
#define OrgApacheLuceneQueryparserSurroundParserCharStream_

@class IOSCharArray;

/*!
 @brief This interface describes a character stream that maintains line and
  column number positions of the characters.It also has the capability
  to backup the stream to some extent.
 An implementation of this
  interface is used in the TokenManager implementation generated by
  JavaCCParser.
  All the methods except backup can be implemented in any fashion. backup
  needs to be implemented correctly for the correct operation of the lexer.
  Rest of the methods are all used to get information like line number,
  column number and the String that constitutes a token and are not used
  by the lexer. Hence their implementation won't affect the generated lexer's
  operation.
 */
@protocol OrgApacheLuceneQueryparserSurroundParserCharStream < JavaObject >

/*!
 @brief Returns the next character from the selected input.The method
  of selecting the input is the responsibility of the class
  implementing this interface.
 Can throw any java.io.IOException.
 */
- (jchar)readChar;

- (jint)getColumn;

- (jint)getLine;

/*!
 @brief Returns the column number of the last character for current token (being
  matched after the last call to BeginTOken).
 */
- (jint)getEndColumn;

/*!
 @brief Returns the line number of the last character for current token (being
  matched after the last call to BeginTOken).
 */
- (jint)getEndLine;

/*!
 @brief Returns the column number of the first character for current token (being
  matched after the last call to BeginTOken).
 */
- (jint)getBeginColumn;

/*!
 @brief Returns the line number of the first character for current token (being
  matched after the last call to BeginTOken).
 */
- (jint)getBeginLine;

/*!
 @brief Backs up the input stream by amount steps.Lexer calls this method if it
  had already read some characters, but could not use them to match a
  (longer) token.
 So, they will be used again as the prefix of the next
  token and it is the implemetation's responsibility to do this right.
 */
- (void)backupWithInt:(jint)amount;

/*!
 @brief Returns the next character that marks the beginning of the next token.
 All characters must remain in the buffer between two successive calls
  to this method to implement backup correctly.
 */
- (jchar)BeginToken;

/*!
 @brief Returns a string made up of characters from the marked token beginning
  to the current buffer position.Implementations have the choice of returning
  anything that they want to.
 For example, for efficiency, one might decide
  to just return null, which is a valid implementation.
 */
- (NSString *)GetImage;

/*!
 @brief Returns an array of characters that make up the suffix of length 'len' for
  the currently matched token.This is used to build up the matched string
  for use in actions in the case of MORE.
 A simple and inefficient
  implementation of this is as follows :
    {
       String t = GetImage();
       return t.substring(t.length() - len, t.length()).toCharArray();
    }
 */
- (IOSCharArray *)GetSuffixWithInt:(jint)len;

/*!
 @brief The lexer calls this function to indicate that it is done with the stream
  and hence implementations can free any resources held by this class.
 Again, the body of this function can be just empty and it will not
  affect the lexer's operation.
 */
- (void)Done;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueryparserSurroundParserCharStream)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserSurroundParserCharStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserCharStream")
