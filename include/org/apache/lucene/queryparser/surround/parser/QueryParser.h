//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserQueryParser")
#ifdef RESTRICT_OrgApacheLuceneQueryparserSurroundParserQueryParser
#define INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserQueryParser 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserQueryParser 1
#endif
#undef RESTRICT_OrgApacheLuceneQueryparserSurroundParserQueryParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueryparserSurroundParserQueryParser_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserQueryParser || defined(INCLUDE_OrgApacheLuceneQueryparserSurroundParserQueryParser))
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_

#define RESTRICT_OrgApacheLuceneQueryparserSurroundParserQueryParserConstants 1
#define INCLUDE_OrgApacheLuceneQueryparserSurroundParserQueryParserConstants 1
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"

@class JavaUtilArrayList;
@class OrgApacheLuceneQueryparserSurroundParserParseException;
@class OrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager;
@class OrgApacheLuceneQueryparserSurroundParserToken;
@class OrgApacheLuceneQueryparserSurroundQueryDistanceQuery;
@class OrgApacheLuceneQueryparserSurroundQuerySrndQuery;
@protocol JavaUtilList;
@protocol OrgApacheLuceneQueryparserSurroundParserCharStream;

/*!
 @brief This class is generated by JavaCC.The only method that clients should need
  to call is <code>parse()</code>.
 <p>This parser generates queries that make use of position information
    (Span queries). It provides positional operators (<code>w</code> and
    <code>n</code>) that accept a numeric distance, as well as boolean
    operators (<code>and</code>, <code>or</code>, and <code>not</code>,
    wildcards (<code>
 *</code> and <code>?</code>), quoting (with   <code>"</code>), and boosting (via <code>^</code>).</p>
   <p>The operators (W, N, AND, OR, NOT) can be expressed lower-cased or
    upper-cased, and the non-unary operators (everything but NOT) support
    both infix <code>(a AND b AND c)</code> and prefix <code>AND(a, b,
    c)</code> notation. </p>
  
   <p>The W and N operators express a positional relationship among their
   operands.  W is ordered, and N is unordered.  The distance is 1 by
   default, meaning the operands are adjacent, or may be provided as a
   prefix from 2-99.  So, for example, 3W(a, b) means that terms a and b
   must appear within three positions of each other, or in other words, up
   to two terms may appear between a and b.  </p>
 */
@interface OrgApacheLuceneQueryparserSurroundParserQueryParser : NSObject < OrgApacheLuceneQueryparserSurroundParserQueryParserConstants > {
 @public
  NSString *truncationErrorMessage_;
  NSString *boostErrorMessage_;
  /*!
   @brief Generated Token Manager.
   */
  OrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager *token_source_;
  /*!
   @brief Current token.
   */
  OrgApacheLuceneQueryparserSurroundParserToken *token_;
  /*!
   @brief Next token.
   */
  OrgApacheLuceneQueryparserSurroundParserToken *jj_nt_;
}

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Constructor with user supplied CharStream.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneQueryparserSurroundParserCharStream:(id<OrgApacheLuceneQueryparserSurroundParserCharStream>)stream;

/*!
 @brief Constructor with generated Token Manager.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager:(OrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager *)tm;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)AndQuery;

/*!
 @brief Disable tracing.
 */
- (void)disable_tracing;

/*!
 @brief Enable tracing.
 */
- (void)enable_tracing;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)FieldsQuery;

- (id<JavaUtilList>)FieldsQueryList;

/*!
 @brief Generate ParseException.
 */
- (OrgApacheLuceneQueryparserSurroundParserParseException *)generateParseException;

/*!
 @brief Get the next Token.
 */
- (OrgApacheLuceneQueryparserSurroundParserToken *)getNextToken;

/*!
 @brief Get the specific Token.
 */
- (OrgApacheLuceneQueryparserSurroundParserToken *)getTokenWithInt:(jint)index;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)NotQuery;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)NQuery;

- (JavaUtilArrayList *)OptionalFields;

- (void)OptionalWeightsWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery:(OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)q;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)OrQuery;

+ (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)parseWithNSString:(NSString *)query;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)parse2WithNSString:(NSString *)query;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)PrefixOperatorQuery;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)PrimaryQuery;

/*!
 @brief Reinitialise.
 */
- (void)ReInitWithOrgApacheLuceneQueryparserSurroundParserCharStream:(id<OrgApacheLuceneQueryparserSurroundParserCharStream>)stream;

/*!
 @brief Reinitialise.
 */
- (void)ReInitWithOrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager:(OrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager *)tm;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)SimpleTerm;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)TopSrndQuery;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)WQuery;

#pragma mark Protected

- (jboolean)allowedSuffixWithNSString:(NSString *)suffixed;

- (jboolean)allowedTruncationWithNSString:(NSString *)truncated;

+ (void)checkDistanceSubQueriesWithOrgApacheLuceneQueryparserSurroundQueryDistanceQuery:(OrgApacheLuceneQueryparserSurroundQueryDistanceQuery *)distq
                                                                           withNSString:(NSString *)opName;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)getAndQueryWithJavaUtilList:(id<JavaUtilList>)queries
                                                                      withBoolean:(jboolean)infix
                                withOrgApacheLuceneQueryparserSurroundParserToken:(OrgApacheLuceneQueryparserSurroundParserToken *)andToken;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)getDistanceQueryWithJavaUtilList:(id<JavaUtilList>)queries
                                                                           withBoolean:(jboolean)infix
                                     withOrgApacheLuceneQueryparserSurroundParserToken:(OrgApacheLuceneQueryparserSurroundParserToken *)dToken
                                                                           withBoolean:(jboolean)ordered;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)getFieldsQueryWithOrgApacheLuceneQueryparserSurroundQuerySrndQuery:(OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)q
                                                                                                   withJavaUtilArrayList:(JavaUtilArrayList *)fieldNames;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)getNotQueryWithJavaUtilList:(id<JavaUtilList>)queries
                                withOrgApacheLuceneQueryparserSurroundParserToken:(OrgApacheLuceneQueryparserSurroundParserToken *)notToken;

+ (jint)getOpDistanceWithNSString:(NSString *)distanceOp;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)getOrQueryWithJavaUtilList:(id<JavaUtilList>)queries
                                                                     withBoolean:(jboolean)infix
                               withOrgApacheLuceneQueryparserSurroundParserToken:(OrgApacheLuceneQueryparserSurroundParserToken *)orToken;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)getPrefixQueryWithNSString:(NSString *)prefix
                                                                     withBoolean:(jboolean)quoted;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)getTermQueryWithNSString:(NSString *)term
                                                                   withBoolean:(jboolean)quoted;

- (OrgApacheLuceneQueryparserSurroundQuerySrndQuery *)getTruncQueryWithNSString:(NSString *)truncated;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneQueryparserSurroundParserQueryParser)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundParserQueryParser, truncationErrorMessage_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundParserQueryParser, boostErrorMessage_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundParserQueryParser, token_source_, OrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundParserQueryParser, token_, OrgApacheLuceneQueryparserSurroundParserToken *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundParserQueryParser, jj_nt_, OrgApacheLuceneQueryparserSurroundParserToken *)

inline jint OrgApacheLuceneQueryparserSurroundParserQueryParser_get_minimumPrefixLength(void);
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_minimumPrefixLength 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryparserSurroundParserQueryParser, minimumPrefixLength, jint)

inline jint OrgApacheLuceneQueryparserSurroundParserQueryParser_get_minimumCharsInTrunc(void);
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_minimumCharsInTrunc 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryparserSurroundParserQueryParser, minimumCharsInTrunc, jint)

inline jchar OrgApacheLuceneQueryparserSurroundParserQueryParser_get_truncator(void);
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_truncator '*'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryparserSurroundParserQueryParser, truncator, jchar)

inline jchar OrgApacheLuceneQueryparserSurroundParserQueryParser_get_anyChar(void);
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_anyChar '?'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryparserSurroundParserQueryParser, anyChar, jchar)

inline jchar OrgApacheLuceneQueryparserSurroundParserQueryParser_get_quote(void);
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_quote '"'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryparserSurroundParserQueryParser, quote, jchar)

inline jchar OrgApacheLuceneQueryparserSurroundParserQueryParser_get_fieldOperator(void);
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_fieldOperator ':'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryparserSurroundParserQueryParser, fieldOperator, jchar)

inline jchar OrgApacheLuceneQueryparserSurroundParserQueryParser_get_comma(void);
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_comma ','
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryparserSurroundParserQueryParser, comma, jchar)

inline jchar OrgApacheLuceneQueryparserSurroundParserQueryParser_get_carat(void);
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_carat '^'
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneQueryparserSurroundParserQueryParser, carat, jchar)

FOUNDATION_EXPORT OrgApacheLuceneQueryparserSurroundQuerySrndQuery *OrgApacheLuceneQueryparserSurroundParserQueryParser_parseWithNSString_(NSString *query);

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserSurroundParserQueryParser_init(OrgApacheLuceneQueryparserSurroundParserQueryParser *self);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserSurroundParserQueryParser *new_OrgApacheLuceneQueryparserSurroundParserQueryParser_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserSurroundParserQueryParser *create_OrgApacheLuceneQueryparserSurroundParserQueryParser_init(void);

FOUNDATION_EXPORT jint OrgApacheLuceneQueryparserSurroundParserQueryParser_getOpDistanceWithNSString_(NSString *distanceOp);

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserSurroundParserQueryParser_checkDistanceSubQueriesWithOrgApacheLuceneQueryparserSurroundQueryDistanceQuery_withNSString_(OrgApacheLuceneQueryparserSurroundQueryDistanceQuery *distq, NSString *opName);

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserSurroundParserQueryParser_initWithOrgApacheLuceneQueryparserSurroundParserCharStream_(OrgApacheLuceneQueryparserSurroundParserQueryParser *self, id<OrgApacheLuceneQueryparserSurroundParserCharStream> stream);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserSurroundParserQueryParser *new_OrgApacheLuceneQueryparserSurroundParserQueryParser_initWithOrgApacheLuceneQueryparserSurroundParserCharStream_(id<OrgApacheLuceneQueryparserSurroundParserCharStream> stream) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserSurroundParserQueryParser *create_OrgApacheLuceneQueryparserSurroundParserQueryParser_initWithOrgApacheLuceneQueryparserSurroundParserCharStream_(id<OrgApacheLuceneQueryparserSurroundParserCharStream> stream);

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserSurroundParserQueryParser_initWithOrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager_(OrgApacheLuceneQueryparserSurroundParserQueryParser *self, OrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager *tm);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserSurroundParserQueryParser *new_OrgApacheLuceneQueryparserSurroundParserQueryParser_initWithOrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager_(OrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager *tm) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserSurroundParserQueryParser *create_OrgApacheLuceneQueryparserSurroundParserQueryParser_initWithOrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager_(OrgApacheLuceneQueryparserSurroundParserQueryParserTokenManager *tm);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserSurroundParserQueryParser)

#endif

#if !defined (OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls_) && (INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserQueryParser || defined(INCLUDE_OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls))
#define OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls_

@class OrgApacheLuceneQueryparserSurroundParserToken;

@interface OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls : NSObject {
 @public
  jint gen_;
  OrgApacheLuceneQueryparserSurroundParserToken *first_;
  jint arg_;
  OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls *next_;
}

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls, first_, OrgApacheLuceneQueryparserSurroundParserToken *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls, next_, OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls *)

FOUNDATION_EXPORT void OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls_init(OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls *self);

FOUNDATION_EXPORT OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls *new_OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls *create_OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueryparserSurroundParserQueryParser_JJCalls)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueryparserSurroundParserQueryParser")
