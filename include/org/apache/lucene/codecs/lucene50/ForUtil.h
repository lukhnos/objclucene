//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/lucene50/ForUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneCodecsLucene50ForUtil")
#ifdef RESTRICT_OrgApacheLuceneCodecsLucene50ForUtil
#define INCLUDE_ALL_OrgApacheLuceneCodecsLucene50ForUtil 0
#else
#define INCLUDE_ALL_OrgApacheLuceneCodecsLucene50ForUtil 1
#endif
#undef RESTRICT_OrgApacheLuceneCodecsLucene50ForUtil

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneCodecsLucene50ForUtil_) && (INCLUDE_ALL_OrgApacheLuceneCodecsLucene50ForUtil || defined(INCLUDE_OrgApacheLuceneCodecsLucene50ForUtil))
#define OrgApacheLuceneCodecsLucene50ForUtil_

@class IOSByteArray;
@class IOSIntArray;
@class OrgApacheLuceneStoreDataInput;
@class OrgApacheLuceneStoreDataOutput;
@class OrgApacheLuceneStoreIndexInput;
@class OrgApacheLuceneStoreIndexOutput;

/*!
 @brief Encode all values in normal area with fixed bit width, 
  which is determined by the max value in this block.
 */
@interface OrgApacheLuceneCodecsLucene50ForUtil : NSObject
@property (readonly, class) jint MAX_ENCODED_SIZE NS_SWIFT_NAME(MAX_ENCODED_SIZE);
@property (readonly, class) jint MAX_DATA_SIZE NS_SWIFT_NAME(MAX_DATA_SIZE);

#pragma mark Package-Private

/*!
 @brief Restore a <code>ForUtil</code> from a <code>DataInput</code>.
 */
- (instancetype __nonnull)initPackagePrivateWithOrgApacheLuceneStoreDataInput:(OrgApacheLuceneStoreDataInput *)inArg;

/*!
 @brief Create a new <code>ForUtil</code> instance and save state into <code>out</code>.
 */
- (instancetype __nonnull)initPackagePrivateWithFloat:(jfloat)acceptableOverheadRatio
                   withOrgApacheLuceneStoreDataOutput:(OrgApacheLuceneStoreDataOutput *)outArg;

/*!
 @brief Read the next block of data (<code>For</code> format).
 @param inArg the input to use to read data
 @param encoded a buffer that can be used to store encoded data
 @param decoded where to write decoded data
 @throw IOExceptionIf there is a low-level I/O error
 */
- (void)readBlockWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg
                                      withByteArray:(IOSByteArray *)encoded
                                       withIntArray:(IOSIntArray *)decoded;

/*!
 @brief Skip the next block of data.
 @param inArg the input where to read data
 @throw IOExceptionIf there is a low-level I/O error
 */
- (void)skipBlockWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)inArg;

/*!
 @brief Write a block of data (<code>For</code> format).
 @param data the data to write
 @param encoded a buffer to use to encode data
 @param outArg the destination output
 @throw IOExceptionIf there is a low-level I/O error
 */
- (void)writeBlockWithIntArray:(IOSIntArray *)data
                 withByteArray:(IOSByteArray *)encoded
withOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneCodecsLucene50ForUtil)

/*!
 @brief Upper limit of the number of bytes that might be required to stored 
 <code>BLOCK_SIZE</code> encoded values.
 */
inline jint OrgApacheLuceneCodecsLucene50ForUtil_get_MAX_ENCODED_SIZE(void);
#define OrgApacheLuceneCodecsLucene50ForUtil_MAX_ENCODED_SIZE 512
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50ForUtil, MAX_ENCODED_SIZE, jint)

/*!
 @brief Upper limit of the number of values that might be decoded in a single call to 
 <code>readBlock(IndexInput, byte[], int[])</code>.Although values after 
 <code>BLOCK_SIZE</code> are garbage, it is necessary to allocate value buffers
  whose size is <code>>= MAX_DATA_SIZE</code> to avoid <code>ArrayIndexOutOfBoundsException</code>s.
 */
inline jint OrgApacheLuceneCodecsLucene50ForUtil_get_MAX_DATA_SIZE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint OrgApacheLuceneCodecsLucene50ForUtil_MAX_DATA_SIZE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneCodecsLucene50ForUtil, MAX_DATA_SIZE, jint)

FOUNDATION_EXPORT void OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_(OrgApacheLuceneCodecsLucene50ForUtil *self, jfloat acceptableOverheadRatio, OrgApacheLuceneStoreDataOutput *outArg);

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50ForUtil *new_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_(jfloat acceptableOverheadRatio, OrgApacheLuceneStoreDataOutput *outArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50ForUtil *create_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithFloat_withOrgApacheLuceneStoreDataOutput_(jfloat acceptableOverheadRatio, OrgApacheLuceneStoreDataOutput *outArg);

FOUNDATION_EXPORT void OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneCodecsLucene50ForUtil *self, OrgApacheLuceneStoreDataInput *inArg);

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50ForUtil *new_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneStoreDataInput *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50ForUtil *create_OrgApacheLuceneCodecsLucene50ForUtil_initPackagePrivateWithOrgApacheLuceneStoreDataInput_(OrgApacheLuceneStoreDataInput *inArg);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsLucene50ForUtil)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneCodecsLucene50ForUtil")
