//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/lucene50/Lucene50TermVectorsFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat")
#ifdef RESTRICT_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat
#define INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat 0
#else
#define INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat 1
#endif
#undef RESTRICT_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat_) && (INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat || defined(INCLUDE_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat))
#define OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat_

#define RESTRICT_OrgApacheLuceneCodecsCompressingCompressingTermVectorsFormat 1
#define INCLUDE_OrgApacheLuceneCodecsCompressingCompressingTermVectorsFormat 1
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat.h"

@class OrgApacheLuceneCodecsCompressingCompressionMode;

/*!
 @brief Lucene 5.0 <code>term vectors format</code>.
 <p>
  Very similarly to <code>Lucene50StoredFieldsFormat</code>, this format is based
  on compressed chunks of data, with document-level granularity so that a
  document can never span across distinct chunks. Moreover, data is made as
  compact as possible:<ul>
  <li>textual data is compressed using the very light, 
 <a href="http://code.google.com/p/lz4/">LZ4</a> compression algorithm, 
 <li>binary data is written using fixed-size blocks of 
 <code>packed ints</code>.
  </ul>
  <p>
  Term vectors are stored using two files<ul>
  <li>a data file where terms, frequencies, positions, offsets and payloads
  are stored, 
 <li>an index file, loaded into memory, used to locate specific documents in
  the data file. 
 </ul>
  Looking up term vectors for any document requires at most 1 disk seek. 
 <p><b>File formats</b>
  <ol>
  <li><a name="vector_data"></a>
  <p>A vector data file (extension <tt>.tvd</tt>). This file stores terms,
  frequencies, positions, offsets and payloads for every document. Upon writing
  a new segment, it accumulates data into memory until the buffer used to store
  terms and payloads grows beyond 4KB. Then it flushes all metadata, terms
  and positions to disk using <a href="http://code.google.com/p/lz4/">LZ4</a>
  compression for terms and payloads and 
 <code>blocks of packed ints</code> for positions.</p>
  <p>Here is a more detailed description of the field data file format:</p>
  <ul>
  <li>VectorData (.tvd) --&gt; &lt;Header&gt;, PackedIntsVersion, ChunkSize, &lt;Chunk&gt;<sup>ChunkCount</sup>, ChunkCount, DirtyChunkCount, Footer</li>
  <li>Header --&gt; <code>IndexHeader</code></li>
  <li>PackedIntsVersion --&gt; <code>PackedInts.VERSION_CURRENT</code> as a <code>VInt</code></li>
  <li>ChunkSize is the number of bytes of terms to accumulate before flushing, as a <code>VInt</code></li>
  <li>ChunkCount is not known in advance and is the number of chunks necessary to store all document of the segment</li>
  <li>Chunk --&gt; DocBase, ChunkDocs, &lt; NumFields &gt;, &lt; FieldNums &gt;, &lt; FieldNumOffs &gt;, &lt; Flags &gt;,
  &lt; NumTerms &gt;, &lt; TermLengths &gt;, &lt; TermFreqs &gt;, &lt; Positions &gt;, &lt; StartOffsets &gt;, &lt; Lengths &gt;,
  &lt; PayloadLengths &gt;, &lt; TermAndPayloads &gt;</li>
  <li>DocBase is the ID of the first doc of the chunk as a <code>VInt</code></li>
  <li>ChunkDocs is the number of documents in the chunk</li>
  <li>NumFields --&gt; DocNumFields<sup>ChunkDocs</sup></li>
  <li>DocNumFields is the number of fields for each doc, written as a <code>VInt</code> if ChunkDocs==1 and as a <code>PackedInts</code> array otherwise</li>
  <li>FieldNums --&gt; FieldNumDelta<sup>TotalDistincFields</sup>, a delta-encoded list of the sorted unique field numbers present in the chunk</li>
  <li>FieldNumOffs --&gt; FieldNumOff<sup>TotalFields</sup>, as a <code>PackedInts</code> array</li>
  <li>FieldNumOff is the offset of the field number in FieldNums</li>
  <li>TotalFields is the total number of fields (sum of the values of NumFields)</li>
  <li>Flags --&gt; Bit &lt; FieldFlags &gt;</li>
  <li>Bit  is a single bit which when true means that fields have the same options for every document in the chunk</li>
  <li>FieldFlags --&gt; if Bit==1: Flag<sup>TotalDistinctFields</sup> else Flag<sup>TotalFields</sup></li>
  <li>Flag: a 3-bits int where:<ul>
  <li>the first bit means that the field has positions</li>
  <li>the second bit means that the field has offsets</li>
  <li>the third bit means that the field has payloads</li>
  </ul></li>
  <li>NumTerms --&gt; FieldNumTerms<sup>TotalFields</sup></li>
  <li>FieldNumTerms: the number of terms for each field, using <code>blocks of 64 packed ints</code></li>
  <li>TermLengths --&gt; PrefixLength<sup>TotalTerms</sup> SuffixLength<sup>TotalTerms</sup></li>
  <li>TotalTerms: total number of terms (sum of NumTerms)</li>
  <li>PrefixLength: 0 for the first term of a field, the common prefix with the previous term otherwise using <code>blocks of 64 packed ints</code></li>
  <li>SuffixLength: length of the term minus PrefixLength for every term using <code>blocks of 64 packed ints</code></li>
  <li>TermFreqs --&gt; TermFreqMinus1<sup>TotalTerms</sup></li>
  <li>TermFreqMinus1: (frequency - 1) for each term using  <code>blocks of 64 packed ints</code></li>
  <li>Positions --&gt; PositionDelta<sup>TotalPositions</sup></li>
  <li>TotalPositions is the sum of frequencies of terms of all fields that have positions</li>
  <li>PositionDelta: the absolute position for the first position of a term, and the difference with the previous positions for following positions using <code>blocks of 64 packed ints</code></li>
  <li>StartOffsets --&gt; (AvgCharsPerTerm<sup>TotalDistinctFields</sup>) StartOffsetDelta<sup>TotalOffsets</sup></li>
  <li>TotalOffsets is the sum of frequencies of terms of all fields that have offsets</li>
  <li>AvgCharsPerTerm: average number of chars per term, encoded as a float on 4 bytes. They are not present if no field has both positions and offsets enabled.</li>
  <li>StartOffsetDelta: (startOffset - previousStartOffset - AvgCharsPerTerm * PositionDelta). previousStartOffset is 0 for the first offset and AvgCharsPerTerm is 0 if the field has no positions using  <code>blocks of 64 packed ints</code></li>
  <li>Lengths --&gt; LengthMinusTermLength<sup>TotalOffsets</sup></li>
  <li>LengthMinusTermLength: (endOffset - startOffset - termLength) using  <code>blocks of 64 packed ints</code></li>
  <li>PayloadLengths --&gt; PayloadLength<sup>TotalPayloads</sup></li>
  <li>TotalPayloads is the sum of frequencies of terms of all fields that have payloads</li>
  <li>PayloadLength is the payload length encoded using  <code>blocks of 64 packed ints</code></li>
  <li>TermAndPayloads --&gt; LZ4-compressed representation of &lt; FieldTermsAndPayLoads &gt;<sup>TotalFields</sup></li>
  <li>FieldTermsAndPayLoads --&gt; Terms (Payloads)</li>
  <li>Terms: term bytes</li>
  <li>Payloads: payload bytes (if the field has payloads)</li>
  <li>ChunkCount --&gt; the number of chunks in this file</li>
  <li>DirtyChunkCount --&gt; the number of prematurely flushed chunks in this file</li>
  <li>Footer --&gt; <code>CodecFooter</code></li>
  </ul>
  </li>
  <li><a name="vector_index"></a>
  <p>An index file (extension <tt>.tvx</tt>).
  <ul>
  <li>VectorIndex (.tvx) --&gt; &lt;Header&gt;, &lt;ChunkIndex&gt;, Footer</li>
  <li>Header --&gt; <code>IndexHeader</code></li>
  <li>ChunkIndex: See <code>CompressingStoredFieldsIndexWriter</code></li>
  <li>Footer --&gt; <code>CodecFooter</code></li>
  </ul>
  </li>
  </ol>
 */
@interface OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat : OrgApacheLuceneCodecsCompressingCompressingTermVectorsFormat

#pragma mark Public

/*!
 @brief Sole constructor.
 */
- (instancetype __nonnull)init;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                              withNSString:(NSString *)arg1
withOrgApacheLuceneCodecsCompressingCompressionMode:(OrgApacheLuceneCodecsCompressingCompressionMode *)arg2
                                   withInt:(jint)arg3
                                   withInt:(jint)arg4 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat)

FOUNDATION_EXPORT void OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat_init(OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat *self);

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat *new_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat *create_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50TermVectorsFormat")
