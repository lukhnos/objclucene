//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50SkipReader")
#ifdef RESTRICT_OrgApacheLuceneCodecsLucene50Lucene50SkipReader
#define INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50SkipReader 0
#else
#define INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50SkipReader 1
#endif
#undef RESTRICT_OrgApacheLuceneCodecsLucene50Lucene50SkipReader

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneCodecsLucene50Lucene50SkipReader_) && (INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50SkipReader || defined(INCLUDE_OrgApacheLuceneCodecsLucene50Lucene50SkipReader))
#define OrgApacheLuceneCodecsLucene50Lucene50SkipReader_

#define RESTRICT_OrgApacheLuceneCodecsMultiLevelSkipListReader 1
#define INCLUDE_OrgApacheLuceneCodecsMultiLevelSkipListReader 1
#include "org/apache/lucene/codecs/MultiLevelSkipListReader.h"

@class OrgApacheLuceneStoreIndexInput;

/*!
 @brief Implements the skip list reader for block postings format
  that stores positions and payloads.
 Although this skipper uses MultiLevelSkipListReader as an interface, 
  its definition of skip position will be a little different. 
  For example, when skipInterval = blockSize = 3, df = 2*skipInterval = 6,  
  0 1 2 3 4 5
  d d d d d d    (posting list)
      ^     ^    (skip point in MultiLeveSkipWriter)
        ^        (skip point in Lucene50SkipWriter)
  In this case, MultiLevelSkipListReader will use the last document as a skip point, 
  while Lucene50SkipReader should assume no skip point will comes. 
  If we use the interface directly in Lucene50SkipReader, it may silly try to read 
  another skip data after the only skip point is loaded. 
  To illustrate this, we can call skipTo(d[5]), since skip point d[3] has smaller docId,
  and numSkipped+blockSize== df, the MultiLevelSkipListReader will assume the skip list
  isn't exhausted yet, and try to load a non-existed skip point
  Therefore, we'll trim df before passing it to the interface. see trim(int)
 */
@interface OrgApacheLuceneCodecsLucene50Lucene50SkipReader : OrgApacheLuceneCodecsMultiLevelSkipListReader

#pragma mark Public

- (instancetype __nonnull)initPackagePrivateWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)skipStream
                                                                       withInt:(jint)maxSkipLevels
                                                                   withBoolean:(jboolean)hasPos
                                                                   withBoolean:(jboolean)hasOffsets
                                                                   withBoolean:(jboolean)hasPayloads;

/*!
 @brief Returns the doc pointer of the doc to which the last call of  
 <code>MultiLevelSkipListReader.skipTo(int)</code> has skipped.
 */
- (jlong)getDocPointer;

- (jint)getNextSkipDoc;

- (jint)getPayloadByteUpto;

- (jlong)getPayPointer;

- (jint)getPosBufferUpto;

- (jlong)getPosPointer;

- (void)init__WithLong:(jlong)skipPointer
              withLong:(jlong)docBasePointer
              withLong:(jlong)posBasePointer
              withLong:(jlong)payBasePointer
               withInt:(jint)df OBJC_METHOD_FAMILY_NONE;

#pragma mark Protected

- (jint)readSkipDataWithInt:(jint)level
withOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)skipStream;

- (void)seekChildWithInt:(jint)level;

- (void)setLastSkipDataWithInt:(jint)level;

/*!
 @brief Trim original docFreq to tell skipReader read proper number of skip points.
 Since our definition in Lucene50Skip* is a little different from MultiLevelSkip*
  This trimmed docFreq will prevent skipReader from:
  1. silly reading a non-existed skip point after the last block boundary
  2. moving into the vInt block
 */
- (jint)trimWithInt:(jint)df;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)arg0
                                                         withInt:(jint)arg1
                                                         withInt:(jint)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheLuceneStoreIndexInput:(OrgApacheLuceneStoreIndexInput *)arg0
                                                         withInt:(jint)arg1
                                                         withInt:(jint)arg2
                                                         withInt:(jint)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsLucene50Lucene50SkipReader)

FOUNDATION_EXPORT void OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneCodecsLucene50Lucene50SkipReader *self, OrgApacheLuceneStoreIndexInput *skipStream, jint maxSkipLevels, jboolean hasPos, jboolean hasOffsets, jboolean hasPayloads);

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50Lucene50SkipReader *new_OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneStoreIndexInput *skipStream, jint maxSkipLevels, jboolean hasPos, jboolean hasOffsets, jboolean hasPayloads) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50Lucene50SkipReader *create_OrgApacheLuceneCodecsLucene50Lucene50SkipReader_initPackagePrivateWithOrgApacheLuceneStoreIndexInput_withInt_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneStoreIndexInput *skipStream, jint maxSkipLevels, jboolean hasPos, jboolean hasOffsets, jboolean hasPayloads);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsLucene50Lucene50SkipReader)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50SkipReader")
