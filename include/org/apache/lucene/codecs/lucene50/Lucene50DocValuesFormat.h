//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesFormat.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat")
#ifdef RESTRICT_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat
#define INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat 0
#else
#define INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat 1
#endif
#undef RESTRICT_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_) && (INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat || defined(INCLUDE_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat))
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_

#define RESTRICT_OrgApacheLuceneCodecsDocValuesFormat 1
#define INCLUDE_OrgApacheLuceneCodecsDocValuesFormat 1
#include "org/apache/lucene/codecs/DocValuesFormat.h"

@class OrgApacheLuceneCodecsDocValuesConsumer;
@class OrgApacheLuceneCodecsDocValuesProducer;
@class OrgApacheLuceneIndexSegmentReadState;
@class OrgApacheLuceneIndexSegmentWriteState;

/*!
 @brief Lucene 5.0 DocValues format.
 <p>
  Encodes the five per-document value types (Numeric,Binary,Sorted,SortedSet,SortedNumeric) with these strategies: 
 <p>
  <code>NUMERIC</code>:
  <ul>
     <li>Delta-compressed: per-document integers written as deltas from the minimum value,
         compressed with bitpacking. For more information, see <code>DirectWriter</code>.
     <li>Table-compressed: when the number of unique values is very small (&lt; 256), and
         when there are unused "gaps" in the range of values used (such as <code>SmallFloat</code>), 
         a lookup table is written instead. Each per-document entry is instead the ordinal 
         to this table, and those ordinals are compressed with bitpacking (<code>DirectWriter</code>). 
     <li>GCD-compressed: when all numbers share a common divisor, such as dates, the greatest
         common denominator (GCD) is computed, and quotients are stored using Delta-compressed Numerics.    
 <li>Monotonic-compressed: when all numbers are monotonically increasing offsets, they are written
         as blocks of bitpacked integers, encoding the deviation from the expected delta.    
 <li>Const-compressed: when there is only one possible non-missing value, only the missing
         bitset is encoded. 
 </ul>
  <p>
  <code>BINARY</code>:
  <ul>
     <li>Fixed-width Binary: one large concatenated byte[] is written, along with the fixed length.
         Each document's value can be addressed directly with multiplication (<code>docID * length</code>). 
     <li>Variable-width Binary: one large concatenated byte[] is written, along with end addresses 
         for each document. The addresses are written as Monotonic-compressed numerics.    
 <li>Prefix-compressed Binary: values are written in chunks of 16, with the first value written
         completely and other values sharing prefixes. chunk addresses are written as Monotonic-compressed
         numerics. A reverse lookup index is written from a portion of every 1024th term. 
 </ul>
  <p>
  <code>SORTED</code>:
  <ul>
     <li>Sorted: a mapping of ordinals to deduplicated terms is written as Binary, 
         along with the per-document ordinals written using one of the numeric strategies above. 
 </ul>
  <p>
  <code>SORTED_SET</code>:
  <ul>
     <li>Single: if all documents have 0 or 1 value, then data are written like SORTED.
     <li>SortedSet table: when there are few unique sets of values (&lt; 256) then each set is assigned
         an id, a lookup table is written and the mapping from document to set id is written using the
         numeric strategies above.    
 <li>SortedSet: a mapping of ordinals to deduplicated terms is written as Binary, 
         an ordinal list and per-document index into this list are written using the numeric strategies 
         above. 
 </ul>
  <p>
  <code>SORTED_NUMERIC</code>:
  <ul>
     <li>Single: if all documents have 0 or 1 value, then data are written like NUMERIC.
     <li>SortedSet table: when there are few unique sets of values (&lt; 256) then each set is assigned
         an id, a lookup table is written and the mapping from document to set id is written using the
         numeric strategies above.    
 <li>SortedNumeric: a value list and per-document index into this list are written using the numeric
         strategies above. 
 </ul>
  <p>
  Files: 
 <ol>
    <li><tt>.dvd</tt>: DocValues data</li>
    <li><tt>.dvm</tt>: DocValues metadata</li>
  </ol>
  <ol>
    <li><a name="dvm"></a>
    <p>The DocValues metadata or .dvm file.</p>
    <p>For DocValues field, this stores metadata, such as the offset into the 
       DocValues data (.dvd)</p>
    <p>DocValues metadata (.dvm) --&gt; Header,&lt;Entry&gt;<sup>NumFields</sup>,Footer</p>
    <ul>
      <li>Entry --&gt; NumericEntry | BinaryEntry | SortedEntry | SortedSetEntry | SortedNumericEntry</li>
      <li>NumericEntry --&gt; GCDNumericEntry | TableNumericEntry | DeltaNumericEntry</li>
      <li>GCDNumericEntry --&gt; NumericHeader,MinValue,GCD,BitsPerValue</li>
      <li>TableNumericEntry --&gt; NumericHeader,TableSize,<code>Int64</code><sup>TableSize</sup>,BitsPerValue</li>
      <li>DeltaNumericEntry --&gt; NumericHeader,MinValue,BitsPerValue</li>
      <li>MonotonicNumericEntry --&gt; NumericHeader,PackedVersion,BlockSize</li>
      <li>NumericHeader --&gt; FieldNumber,EntryType,NumericType,MissingOffset,DataOffset,Count,EndOffset</li>
      <li>BinaryEntry --&gt; FixedBinaryEntry | VariableBinaryEntry | PrefixBinaryEntry</li>
      <li>FixedBinaryEntry --&gt; BinaryHeader</li>
      <li>VariableBinaryEntry --&gt; BinaryHeader,AddressOffset,PackedVersion,BlockSize</li>
      <li>PrefixBinaryEntry --&gt; BinaryHeader,AddressInterval,AddressOffset,PackedVersion,BlockSize</li>
      <li>BinaryHeader --&gt; FieldNumber,EntryType,BinaryType,MissingOffset,MinLength,MaxLength,DataOffset</li>
      <li>SortedEntry --&gt; FieldNumber,EntryType,BinaryEntry,NumericEntry</li>
      <li>SortedSetEntry --&gt; SingleSortedSetEntry | AddressesSortedSetEntry | TableSortedSetEntry</li>
      <li>SingleSortedSetEntry --&gt; SetHeader,SortedEntry</li>
      <li>AddressesSortedSetEntry --&gt; SetHeader,BinaryEntry,NumericEntry,NumericEntry</li>
      <li>TableSortedSetEntry --&gt; SetHeader,TotalTableLength,<code>Int64</code><sup>TotalTableLength</sup>,TableSize,<code>Int32</code><sup>TableSize</sup>,BinaryEntry,NumericEntry</li>
      <li>SetHeader --&gt; FieldNumber,EntryType,SetType</li>
      <li>SortedNumericEntry --&gt; SingleSortedNumericEntry | AddressesSortedNumericEntry | TableSortedNumericEntry</li>
      <li>SingleNumericEntry --&gt; SetHeader,NumericEntry</li>
      <li>AddressesSortedNumericEntry --&gt; SetHeader,NumericEntry,NumericEntry</li>
      <li>TableSortedNumericEntry --&gt; SetHeader,TotalTableLength,<code>Int64</code><sup>TotalTableLength</sup>,TableSize,<code>Int32</code><sup>TableSize</sup>,NumericEntry</li>
      <li>FieldNumber,PackedVersion,MinLength,MaxLength,BlockSize,ValueCount --&gt; <code>VInt</code></li>
      <li>EntryType,CompressionType --&gt; <code>Byte</code></li>
      <li>Header --&gt; <code>IndexHeader</code></li>
      <li>MinValue,GCD,MissingOffset,AddressOffset,DataOffset,EndOffset --&gt; <code>Int64</code></li>
      <li>TableSize,BitsPerValue,TotalTableLength --&gt; <code>vInt</code></li>
      <li>Footer --&gt; <code>CodecFooter</code></li>
    </ul>
    <p>Sorted fields have two entries: a BinaryEntry with the value metadata,
       and an ordinary NumericEntry for the document-to-ord metadata.</p>
    <p>FieldNumber of -1 indicates the end of metadata.</p>
    <p>EntryType is a 0 (NumericEntry) or 1 (BinaryEntry)</p>
    <p>DataOffset is the pointer to the start of the data in the DocValues data (.dvd)</p>
    <p>EndOffset is the pointer to the end of the data in the DocValues data (.dvd)</p>
    <p>NumericType indicates how Numeric values will be compressed:
       <ul>
          <li>0 --&gt; delta-compressed. For each block of 16k integers, every integer is delta-encoded
              from the minimum value within the block.          
 <li>1 --&gt; gcd-compressed. When all integers share a common divisor, only quotients are stored
              using blocks of delta-encoded ints.         
 <li>2 --&gt; table-compressed. When the number of unique numeric values is small and it would save space,
              a lookup table of unique values is written, followed by the ordinal for each document.         
 <li>3 --&gt; monotonic-compressed. Used to implement addressing for BINARY, SORTED_SET, SORTED_NUMERIC.
          <li>4 --&gt; const-compressed. Used when all non-missing values are the same.
       </ul>
    <p>BinaryType indicates how Binary values will be stored:
       <ul>
          <li>0 --&gt; fixed-width. All values have the same length, addressing by multiplication. 
          <li>1 --&gt; variable-width. An address for each value is stored.
          <li>2 --&gt; prefix-compressed. An address to the start of every interval'th value is stored.
       </ul>
    <p>SetType indicates how SortedSet and SortedNumeric values will be stored:
        <ul>
          <li>0 --&gt; with addresses. There are two numeric entries: a first one from document to start
              offset, and a second one from offset to ord/value.         
 <li>1 --&gt; single-valued. Used when all documents have at most one value and is encoded like
              a regular Sorted/Numeric entry.         
 <li>2 --&gt; table-encoded. A lookup table of unique sets of values is written, followed by a
              numeric entry that maps each document to an ordinal in this table.       
 </ul>
    <p>MinLength and MaxLength represent the min and max byte[] value lengths for Binary values.
       If they are equal, then all values are of a fixed size, and can be addressed as DataOffset + (docID * length).
       Otherwise, the binary values are of variable size, and packed integer metadata (PackedVersion,BlockSize)
       is written for the addresses.   
 <p>MissingOffset points to a byte[] containing a bitset of all documents that had a value for the field.
       If it's -1, then there are no missing values. If it's -2, all values are missing.   
 <li><a name="dvd"></a>
    <p>The DocValues data or .dvd file.</p>
    <p>For DocValues field, this stores the actual per-document data (the heavy-lifting)</p>
    <p>DocValues data (.dvd) --&gt; Header,&lt;NumericData | BinaryData | SortedData&gt;<sup>NumFields</sup>,Footer</p>
    <ul>
      <li>NumericData --&gt; DeltaCompressedNumerics | TableCompressedNumerics | GCDCompressedNumerics</li>
      <li>BinaryData --&gt;  <code>Byte</code><sup>DataLength</sup>,Addresses</li>
      <li>SortedData --&gt; <code>FST&lt;Int64&gt;</code></li>
      <li>DeltaCompressedNumerics,TableCompressedNumerics,GCDCompressedNumerics --&gt; <code>PackedInts</code></li>
      <li>Addresses --&gt; <code>MonotonicBlockPackedInts(blockSize=16k)</code></li>
      <li>Footer --&gt; <code>CodecFooter</code></li>
    </ul>
  </ol>
 */
@interface OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat : OrgApacheLuceneCodecsDocValuesFormat
@property (readonly, copy, class) NSString *DATA_CODEC NS_SWIFT_NAME(DATA_CODEC);
@property (readonly, copy, class) NSString *DATA_EXTENSION NS_SWIFT_NAME(DATA_EXTENSION);
@property (readonly, copy, class) NSString *META_CODEC NS_SWIFT_NAME(META_CODEC);
@property (readonly, copy, class) NSString *META_EXTENSION NS_SWIFT_NAME(META_EXTENSION);
@property (readonly, class) jint VERSION_START NS_SWIFT_NAME(VERSION_START);
@property (readonly, class) jint VERSION_SORTEDSET_TABLE NS_SWIFT_NAME(VERSION_SORTEDSET_TABLE);
@property (readonly, class) jint VERSION_CURRENT NS_SWIFT_NAME(VERSION_CURRENT);
@property (readonly, class) jbyte NUMERIC NS_SWIFT_NAME(NUMERIC);
@property (readonly, class) jbyte BINARY NS_SWIFT_NAME(BINARY);
@property (readonly, class) jbyte SORTED NS_SWIFT_NAME(SORTED);
@property (readonly, class) jbyte SORTED_SET NS_SWIFT_NAME(SORTED_SET);
@property (readonly, class) jbyte SORTED_NUMERIC NS_SWIFT_NAME(SORTED_NUMERIC);
@property (readonly, class) jint INTERVAL_SHIFT NS_SWIFT_NAME(INTERVAL_SHIFT);
@property (readonly, class) jint INTERVAL_COUNT NS_SWIFT_NAME(INTERVAL_COUNT);
@property (readonly, class) jint INTERVAL_MASK NS_SWIFT_NAME(INTERVAL_MASK);
@property (readonly, class) jint REVERSE_INTERVAL_SHIFT NS_SWIFT_NAME(REVERSE_INTERVAL_SHIFT);
@property (readonly, class) jint REVERSE_INTERVAL_COUNT NS_SWIFT_NAME(REVERSE_INTERVAL_COUNT);
@property (readonly, class) jint REVERSE_INTERVAL_MASK NS_SWIFT_NAME(REVERSE_INTERVAL_MASK);
@property (readonly, class) jint BLOCK_INTERVAL_SHIFT NS_SWIFT_NAME(BLOCK_INTERVAL_SHIFT);
@property (readonly, class) jint BLOCK_INTERVAL_COUNT NS_SWIFT_NAME(BLOCK_INTERVAL_COUNT);
@property (readonly, class) jint BLOCK_INTERVAL_MASK NS_SWIFT_NAME(BLOCK_INTERVAL_MASK);
@property (readonly, class) jint DELTA_COMPRESSED NS_SWIFT_NAME(DELTA_COMPRESSED);
@property (readonly, class) jint GCD_COMPRESSED NS_SWIFT_NAME(GCD_COMPRESSED);
@property (readonly, class) jint TABLE_COMPRESSED NS_SWIFT_NAME(TABLE_COMPRESSED);
@property (readonly, class) jint MONOTONIC_COMPRESSED NS_SWIFT_NAME(MONOTONIC_COMPRESSED);
@property (readonly, class) jint CONST_COMPRESSED NS_SWIFT_NAME(CONST_COMPRESSED);
@property (readonly, class) jint BINARY_FIXED_UNCOMPRESSED NS_SWIFT_NAME(BINARY_FIXED_UNCOMPRESSED);
@property (readonly, class) jint BINARY_VARIABLE_UNCOMPRESSED NS_SWIFT_NAME(BINARY_VARIABLE_UNCOMPRESSED);
@property (readonly, class) jint BINARY_PREFIX_COMPRESSED NS_SWIFT_NAME(BINARY_PREFIX_COMPRESSED);
@property (readonly, class) jint SORTED_WITH_ADDRESSES NS_SWIFT_NAME(SORTED_WITH_ADDRESSES);
@property (readonly, class) jint SORTED_SINGLE_VALUED NS_SWIFT_NAME(SORTED_SINGLE_VALUED);
@property (readonly, class) jint SORTED_SET_TABLE NS_SWIFT_NAME(SORTED_SET_TABLE);
@property (readonly, class) jint ALL_LIVE NS_SWIFT_NAME(ALL_LIVE);
@property (readonly, class) jint ALL_MISSING NS_SWIFT_NAME(ALL_MISSING);
@property (readonly, class) jint MONOTONIC_BLOCK_SIZE NS_SWIFT_NAME(MONOTONIC_BLOCK_SIZE);

#pragma mark Public

/*!
 @brief Sole Constructor
 */
- (instancetype __nonnull)init;

- (OrgApacheLuceneCodecsDocValuesConsumer *)fieldsConsumerWithOrgApacheLuceneIndexSegmentWriteState:(OrgApacheLuceneIndexSegmentWriteState *)state;

- (OrgApacheLuceneCodecsDocValuesProducer *)fieldsProducerWithOrgApacheLuceneIndexSegmentReadState:(OrgApacheLuceneIndexSegmentReadState *)state;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat)

inline NSString *OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_DATA_CODEC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_DATA_CODEC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, DATA_CODEC, NSString *)

inline NSString *OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_DATA_EXTENSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_DATA_EXTENSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, DATA_EXTENSION, NSString *)

inline NSString *OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_META_CODEC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_META_CODEC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, META_CODEC, NSString *)

inline NSString *OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_META_EXTENSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_META_EXTENSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, META_EXTENSION, NSString *)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_VERSION_START(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_VERSION_START 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, VERSION_START, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_VERSION_SORTEDSET_TABLE(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_VERSION_SORTEDSET_TABLE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, VERSION_SORTEDSET_TABLE, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_VERSION_CURRENT(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_VERSION_CURRENT 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, VERSION_CURRENT, jint)

inline jbyte OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_NUMERIC(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_NUMERIC 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, NUMERIC, jbyte)

inline jbyte OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_BINARY(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_BINARY 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, BINARY, jbyte)

inline jbyte OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_SORTED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_SORTED 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, SORTED, jbyte)

inline jbyte OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_SORTED_SET(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_SORTED_SET 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, SORTED_SET, jbyte)

inline jbyte OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_SORTED_NUMERIC(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_SORTED_NUMERIC 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, SORTED_NUMERIC, jbyte)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_INTERVAL_SHIFT(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_INTERVAL_SHIFT 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, INTERVAL_SHIFT, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_INTERVAL_COUNT(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_INTERVAL_COUNT 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, INTERVAL_COUNT, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_INTERVAL_MASK(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_INTERVAL_MASK 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, INTERVAL_MASK, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_REVERSE_INTERVAL_SHIFT(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_REVERSE_INTERVAL_SHIFT 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, REVERSE_INTERVAL_SHIFT, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_REVERSE_INTERVAL_COUNT(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_REVERSE_INTERVAL_COUNT 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, REVERSE_INTERVAL_COUNT, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_REVERSE_INTERVAL_MASK(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_REVERSE_INTERVAL_MASK 1023
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, REVERSE_INTERVAL_MASK, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_BLOCK_INTERVAL_SHIFT(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_BLOCK_INTERVAL_SHIFT 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, BLOCK_INTERVAL_SHIFT, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_BLOCK_INTERVAL_COUNT(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_BLOCK_INTERVAL_COUNT 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, BLOCK_INTERVAL_COUNT, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_BLOCK_INTERVAL_MASK(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_BLOCK_INTERVAL_MASK 63
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, BLOCK_INTERVAL_MASK, jint)

/*!
 @brief Compressed using packed blocks of ints.
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_DELTA_COMPRESSED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_DELTA_COMPRESSED 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, DELTA_COMPRESSED, jint)

/*!
 @brief Compressed by computing the GCD.
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_GCD_COMPRESSED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_GCD_COMPRESSED 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, GCD_COMPRESSED, jint)

/*!
 @brief Compressed by giving IDs to unique values.
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_TABLE_COMPRESSED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_TABLE_COMPRESSED 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, TABLE_COMPRESSED, jint)

/*!
 @brief Compressed with monotonically increasing values
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_MONOTONIC_COMPRESSED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_MONOTONIC_COMPRESSED 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, MONOTONIC_COMPRESSED, jint)

/*!
 @brief Compressed with constant value (uses only missing bitset)
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_CONST_COMPRESSED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_CONST_COMPRESSED 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, CONST_COMPRESSED, jint)

/*!
 @brief Uncompressed binary, written directly (fixed length).
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_BINARY_FIXED_UNCOMPRESSED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_BINARY_FIXED_UNCOMPRESSED 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, BINARY_FIXED_UNCOMPRESSED, jint)

/*!
 @brief Uncompressed binary, written directly (variable length).
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_BINARY_VARIABLE_UNCOMPRESSED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_BINARY_VARIABLE_UNCOMPRESSED 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, BINARY_VARIABLE_UNCOMPRESSED, jint)

/*!
 @brief Compressed binary with shared prefixes
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_BINARY_PREFIX_COMPRESSED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_BINARY_PREFIX_COMPRESSED 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, BINARY_PREFIX_COMPRESSED, jint)

/*!
 @brief Standard storage for sorted set values with 1 level of indirection:
   <code>docId -> address -> ord</code>.
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_SORTED_WITH_ADDRESSES(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_SORTED_WITH_ADDRESSES 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, SORTED_WITH_ADDRESSES, jint)

/*!
 @brief Single-valued sorted set values, encoded as sorted values, so no level
   of indirection: <code>docId -> ord</code>.
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_SORTED_SINGLE_VALUED(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_SORTED_SINGLE_VALUED 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, SORTED_SINGLE_VALUED, jint)

/*!
 @brief Compressed giving IDs to unique sets of values: 
 <code>docId -> setId -> ords</code>
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_SORTED_SET_TABLE(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_SORTED_SET_TABLE 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, SORTED_SET_TABLE, jint)

/*!
 @brief placeholder for missing offset that means there are no missing values
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_ALL_LIVE(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_ALL_LIVE -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, ALL_LIVE, jint)

/*!
 @brief placeholder for missing offset that means all values are missing
 */
inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_ALL_MISSING(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_ALL_MISSING -2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, ALL_MISSING, jint)

inline jint OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_get_MONOTONIC_BLOCK_SIZE(void);
#define OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_MONOTONIC_BLOCK_SIZE 16384
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat, MONOTONIC_BLOCK_SIZE, jint)

FOUNDATION_EXPORT void OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_init(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat *self);

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat *new_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat *create_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneCodecsLucene50Lucene50DocValuesFormat")
