//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnum.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum")
#ifdef RESTRICT_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum
#define INCLUDE_ALL_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum 0
#else
#define INCLUDE_ALL_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum 1
#endif
#undef RESTRICT_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_) && (INCLUDE_ALL_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum || defined(INCLUDE_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum))
#define OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_

#define RESTRICT_OrgApacheLuceneIndexTermsEnum 1
#define INCLUDE_OrgApacheLuceneIndexTermsEnum 1
#include "org/apache/lucene/index/TermsEnum.h"

@class IOSObjectArray;
@class OrgApacheLuceneCodecsBlocktreeFieldReader;
@class OrgApacheLuceneIndexPostingsEnum;
@class OrgApacheLuceneIndexTermState;
@class OrgApacheLuceneIndexTermsEnum_SeekStatus;
@class OrgApacheLuceneStoreIndexInput;
@class OrgApacheLuceneUtilAutomatonAutomaton;
@class OrgApacheLuceneUtilAutomatonRunAutomaton;
@class OrgApacheLuceneUtilBytesRef;
@class OrgApacheLuceneUtilFstOutputs;

/*!
 @brief This is used to implement efficient <code>Terms.intersect</code> for
   block-tree.Note that it cannot seek, except for the initial term on
   init.
 It just "nexts" through the intersection of the automaton and
   the terms.  It does not use the terms index at all: on init, it
   loads the root block, and scans its way to the initial term.
   Likewise, in next it scans until it finds a term that matches the
   current automaton transition.  If the index has auto-prefix terms
   (only for DOCS_ONLY fields currently) it will visit these terms
   when possible and then skip the real terms that auto-prefix term
   matched.
 */
@interface OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum : OrgApacheLuceneIndexTermsEnum {
 @public
  OrgApacheLuceneStoreIndexInput *in_;
  IOSObjectArray *stack_;
  OrgApacheLuceneUtilAutomatonRunAutomaton *runAutomaton_;
  OrgApacheLuceneUtilAutomatonAutomaton *automaton_;
  OrgApacheLuceneUtilBytesRef *commonSuffix_;
  OrgApacheLuceneCodecsBlocktreeFieldReader *fr_;
}
@property (readonly, class, strong) OrgApacheLuceneUtilFstOutputs *fstOutputs NS_SWIFT_NAME(fstOutputs);

#pragma mark Public

- (instancetype __nonnull)initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader:(OrgApacheLuceneCodecsBlocktreeFieldReader *)fr
                                                withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                             withOrgApacheLuceneUtilAutomatonRunAutomaton:(OrgApacheLuceneUtilAutomatonRunAutomaton *)runAutomaton
                                                          withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)commonSuffix
                                                          withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)startTerm
                                                                                  withInt:(jint)sinkState;

- (jint)docFreq;

- (OrgApacheLuceneUtilBytesRef *)next;

- (jlong)ord;

- (OrgApacheLuceneIndexPostingsEnum *)postingsWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)reuse
                                                                           withInt:(jint)flags;

- (OrgApacheLuceneIndexTermsEnum_SeekStatus *)seekCeilWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text;

- (jboolean)seekExactWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)text;

- (void)seekExactWithLong:(jlong)ord;

- (OrgApacheLuceneUtilBytesRef *)term;

- (OrgApacheLuceneIndexTermState *)termState;

- (jlong)totalTermFreq;

#pragma mark Package-Private

+ (NSString *)brToStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum)

J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, in_, OrgApacheLuceneStoreIndexInput *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, stack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, runAutomaton_, OrgApacheLuceneUtilAutomatonRunAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, automaton_, OrgApacheLuceneUtilAutomatonAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, commonSuffix_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, fr_, OrgApacheLuceneCodecsBlocktreeFieldReader *)

inline OrgApacheLuceneUtilFstOutputs *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_get_fstOutputs(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneUtilFstOutputs *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_fstOutputs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum, fstOutputs, OrgApacheLuceneUtilFstOutputs *)

FOUNDATION_EXPORT void OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *self, OrgApacheLuceneCodecsBlocktreeFieldReader *fr, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneUtilAutomatonRunAutomaton *runAutomaton, OrgApacheLuceneUtilBytesRef *commonSuffix, OrgApacheLuceneUtilBytesRef *startTerm, jint sinkState);

FOUNDATION_EXPORT OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *new_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneCodecsBlocktreeFieldReader *fr, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneUtilAutomatonRunAutomaton *runAutomaton, OrgApacheLuceneUtilBytesRef *commonSuffix, OrgApacheLuceneUtilBytesRef *startTerm, jint sinkState) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum *create_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_initPackagePrivateWithOrgApacheLuceneCodecsBlocktreeFieldReader_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneUtilAutomatonRunAutomaton_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withInt_(OrgApacheLuceneCodecsBlocktreeFieldReader *fr, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneUtilAutomatonRunAutomaton *runAutomaton, OrgApacheLuceneUtilBytesRef *commonSuffix, OrgApacheLuceneUtilBytesRef *startTerm, jint sinkState);

FOUNDATION_EXPORT NSString *OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum_brToStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *b);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneCodecsBlocktreeIntersectTermsEnum")
