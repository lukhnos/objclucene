//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/codecs/Codec.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneCodecsCodec")
#ifdef RESTRICT_OrgApacheLuceneCodecsCodec
#define INCLUDE_ALL_OrgApacheLuceneCodecsCodec 0
#else
#define INCLUDE_ALL_OrgApacheLuceneCodecsCodec 1
#endif
#undef RESTRICT_OrgApacheLuceneCodecsCodec

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneCodecsCodec_) && (INCLUDE_ALL_OrgApacheLuceneCodecsCodec || defined(INCLUDE_OrgApacheLuceneCodecsCodec))
#define OrgApacheLuceneCodecsCodec_

#define RESTRICT_OrgApacheLuceneUtilNamedSPILoader 1
#define INCLUDE_OrgApacheLuceneUtilNamedSPILoader_NamedSPI 1
#include "org/apache/lucene/util/NamedSPILoader.h"

@class JavaLangClassLoader;
@class OrgApacheLuceneCodecsCompoundFormat;
@class OrgApacheLuceneCodecsDocValuesFormat;
@class OrgApacheLuceneCodecsFieldInfosFormat;
@class OrgApacheLuceneCodecsLiveDocsFormat;
@class OrgApacheLuceneCodecsNormsFormat;
@class OrgApacheLuceneCodecsPostingsFormat;
@class OrgApacheLuceneCodecsSegmentInfoFormat;
@class OrgApacheLuceneCodecsStoredFieldsFormat;
@class OrgApacheLuceneCodecsTermVectorsFormat;
@protocol JavaUtilSet;

/*!
 @brief Encodes/decodes an inverted index segment.
 <p>
  Note, when extending this class, the name (<code>getName</code>) is 
  written into the index. In order for the segment to be read, the
  name must resolve to your implementation via <code>forName(String)</code>.
  This method uses Java's  
 <code>Service Provider Interface</code> (SPI) to resolve codec names. 
 <p>
  If you implement your own codec, make sure that it has a no-arg constructor
  so SPI can load it.
 - seealso: ServiceLoader
 */
@interface OrgApacheLuceneCodecsCodec : NSObject < OrgApacheLuceneUtilNamedSPILoader_NamedSPI >

#pragma mark Public

/*!
 @brief returns a list of all available codec names
 */
+ (id<JavaUtilSet>)availableCodecs;

/*!
 @brief Encodes/decodes compound files
 */
- (OrgApacheLuceneCodecsCompoundFormat *)compoundFormat;

/*!
 @brief Encodes/decodes docvalues
 */
- (OrgApacheLuceneCodecsDocValuesFormat *)docValuesFormat;

/*!
 @brief Encodes/decodes field infos file
 */
- (OrgApacheLuceneCodecsFieldInfosFormat *)fieldInfosFormat;

/*!
 @brief looks up a codec by name
 */
+ (OrgApacheLuceneCodecsCodec *)forNameWithNSString:(NSString *)name;

/*!
 @brief expert: returns the default codec used for newly created
   <code>IndexWriterConfig</code>s.
 */
+ (OrgApacheLuceneCodecsCodec *)getDefault;

/*!
 @brief Returns this codec's name
 */
- (NSString *)getName;

/*!
 @brief Encodes/decodes live docs
 */
- (OrgApacheLuceneCodecsLiveDocsFormat *)liveDocsFormat;

/*!
 @brief Encodes/decodes document normalization values
 */
- (OrgApacheLuceneCodecsNormsFormat *)normsFormat;

/*!
 @brief Encodes/decodes postings
 */
- (OrgApacheLuceneCodecsPostingsFormat *)postingsFormat;

/*!
 @brief Reloads the codec list from the given <code>ClassLoader</code>.
 Changes to the codecs are visible after the method ends, all
  iterators (<code>availableCodecs()</code>,...) stay consistent.   
 <p><b>NOTE:</b> Only new codecs are added, existing ones are
  never removed or replaced.  
 <p><em>This method is expensive and should only be called for discovery
  of new codecs on the given classpath/classloader!</em>
 */
+ (void)reloadCodecsWithJavaLangClassLoader:(JavaLangClassLoader *)classloader;

/*!
 @brief Encodes/decodes segment info file
 */
- (OrgApacheLuceneCodecsSegmentInfoFormat *)segmentInfoFormat;

/*!
 @brief expert: sets the default codec used for newly created
   <code>IndexWriterConfig</code>s.
 */
+ (void)setDefaultWithOrgApacheLuceneCodecsCodec:(OrgApacheLuceneCodecsCodec *)codec;

/*!
 @brief Encodes/decodes stored fields
 */
- (OrgApacheLuceneCodecsStoredFieldsFormat *)storedFieldsFormat;

/*!
 @brief Encodes/decodes term vectors
 */
- (OrgApacheLuceneCodecsTermVectorsFormat *)termVectorsFormat;

/*!
 @brief returns the codec's name.Subclasses can override to provide
  more detail (such as parameters).
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Creates a new codec.
 <p>
  The provided name will be written into the index segment: in order to
  for the segment to be read this class should be registered with Java's
  SPI mechanism (registered in META-INF/ of your jar file, etc).
 @param name must be all ascii alphanumeric, and less than 128 characters in length.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCodecsCodec)

FOUNDATION_EXPORT void OrgApacheLuceneCodecsCodec_initWithNSString_(OrgApacheLuceneCodecsCodec *self, NSString *name);

FOUNDATION_EXPORT OrgApacheLuceneCodecsCodec *OrgApacheLuceneCodecsCodec_forNameWithNSString_(NSString *name);

FOUNDATION_EXPORT id<JavaUtilSet> OrgApacheLuceneCodecsCodec_availableCodecs(void);

FOUNDATION_EXPORT void OrgApacheLuceneCodecsCodec_reloadCodecsWithJavaLangClassLoader_(JavaLangClassLoader *classloader);

FOUNDATION_EXPORT OrgApacheLuceneCodecsCodec *OrgApacheLuceneCodecsCodec_getDefault(void);

FOUNDATION_EXPORT void OrgApacheLuceneCodecsCodec_setDefaultWithOrgApacheLuceneCodecsCodec_(OrgApacheLuceneCodecsCodec *codec);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCodecsCodec)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneCodecsCodec")
