//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/Scorer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchScorer")
#ifdef RESTRICT_OrgApacheLuceneSearchScorer
#define INCLUDE_ALL_OrgApacheLuceneSearchScorer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchScorer 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchScorer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchScorer_) && (INCLUDE_ALL_OrgApacheLuceneSearchScorer || defined(INCLUDE_OrgApacheLuceneSearchScorer))
#define OrgApacheLuceneSearchScorer_

#define RESTRICT_OrgApacheLuceneSearchDocIdSetIterator 1
#define INCLUDE_OrgApacheLuceneSearchDocIdSetIterator 1
#include "org/apache/lucene/search/DocIdSetIterator.h"

@class OrgApacheLuceneSearchTwoPhaseIterator;
@class OrgApacheLuceneSearchWeight;
@protocol JavaUtilCollection;

/*!
 @brief Expert: Common scoring functionality for different types of queries.
 <p>
  A <code>Scorer</code> iterates over documents matching a
  query in increasing order of doc Id. 
 </p>
  <p>
  Document scores are computed using a given <code>Similarity</code>
  implementation. 
 </p>
  
 <p><b>NOTE</b>: The values Float.Nan,
  Float.NEGATIVE_INFINITY and Float.POSITIVE_INFINITY are
  not valid scores.  Certain collectors (eg <code>TopScoreDocCollector</code>
 ) will not properly collect hits
  with these scores.
 */
@interface OrgApacheLuceneSearchScorer : OrgApacheLuceneSearchDocIdSetIterator {
 @public
  /*!
   @brief the Scorer's parent Weight.in some cases this may be null
   */
  OrgApacheLuceneSearchWeight *weight_;
}

#pragma mark Public

/*!
 @brief Optional method: Return a <code>TwoPhaseIterator</code> view of this 
 <code>Scorer</code>.A return value of <code>null</code> indicates that
  two-phase iteration is not supported.
 Note that the returned <code>TwoPhaseIterator</code>'s
  <code>approximation</code> must
  advance synchronously with this iterator: advancing the approximation must
  advance this iterator and vice-versa.
  Implementing this method is typically useful on <code>Scorer</code>s
  that have a high per-document overhead in order to confirm matches.
  The default implementation returns <code>null</code>.
 */
- (OrgApacheLuceneSearchTwoPhaseIterator *)asTwoPhaseIterator;

/*!
 @brief Returns the freq of this Scorer on the current document
 */
- (jint)freq;

/*!
 @brief Returns child sub-scorers
 */
- (id<JavaUtilCollection>)getChildren;

/*!
 @brief returns parent Weight
 */
- (OrgApacheLuceneSearchWeight *)getWeight;

/*!
 @brief Returns the score of the current document matching the query.
 Initially invalid, until <code>nextDoc()</code> or <code>advance(int)</code>
  is called the first time, or when called from within 
 <code>LeafCollector.collect</code>.
 */
- (jfloat)score;

#pragma mark Protected

/*!
 @brief Constructs a Scorer
 @param weight The scorers  <code> Weight </code>
  .
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)weight;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchScorer)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchScorer, weight_, OrgApacheLuceneSearchWeight *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchScorer_initWithOrgApacheLuceneSearchWeight_(OrgApacheLuceneSearchScorer *self, OrgApacheLuceneSearchWeight *weight);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchScorer)

#endif

#if !defined (OrgApacheLuceneSearchScorer_ChildScorer_) && (INCLUDE_ALL_OrgApacheLuceneSearchScorer || defined(INCLUDE_OrgApacheLuceneSearchScorer_ChildScorer))
#define OrgApacheLuceneSearchScorer_ChildScorer_

@class OrgApacheLuceneSearchScorer;

/*!
 @brief A child Scorer and its relationship to its parent.
 the meaning of the relationship depends upon the parent query.
 */
@interface OrgApacheLuceneSearchScorer_ChildScorer : NSObject {
 @public
  /*!
   @brief Child Scorer.
   (note this is typically a direct child, and may
  itself also have children).
   */
  OrgApacheLuceneSearchScorer *child_;
  /*!
   @brief An arbitrary string relating this scorer to the parent.
   */
  NSString *relationship_;
}

#pragma mark Public

/*!
 @brief Creates a new ChildScorer node with the specified relationship.
 <p>
  The relationship can be any be any string that makes sense to 
  the parent Scorer.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)child
                                                 withNSString:(NSString *)relationship;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchScorer_ChildScorer)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchScorer_ChildScorer, child_, OrgApacheLuceneSearchScorer *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchScorer_ChildScorer, relationship_, NSString *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchScorer_ChildScorer_initWithOrgApacheLuceneSearchScorer_withNSString_(OrgApacheLuceneSearchScorer_ChildScorer *self, OrgApacheLuceneSearchScorer *child, NSString *relationship);

FOUNDATION_EXPORT OrgApacheLuceneSearchScorer_ChildScorer *new_OrgApacheLuceneSearchScorer_ChildScorer_initWithOrgApacheLuceneSearchScorer_withNSString_(OrgApacheLuceneSearchScorer *child, NSString *relationship) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchScorer_ChildScorer *create_OrgApacheLuceneSearchScorer_ChildScorer_initWithOrgApacheLuceneSearchScorer_withNSString_(OrgApacheLuceneSearchScorer *child, NSString *relationship);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchScorer_ChildScorer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchScorer")
