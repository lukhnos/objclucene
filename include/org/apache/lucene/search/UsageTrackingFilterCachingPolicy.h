//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy")
#ifdef RESTRICT_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy
#define INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_) && (INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy || defined(INCLUDE_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy))
#define OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_

#define RESTRICT_OrgApacheLuceneSearchFilterCachingPolicy 1
#define INCLUDE_OrgApacheLuceneSearchFilterCachingPolicy 1
#include "org/apache/lucene/search/FilterCachingPolicy.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchDocIdSet;
@class OrgApacheLuceneSearchFilter;

/*!
 @brief A <code>FilterCachingPolicy</code> that tracks usage statistics of recently-used
  filters in order to decide on which filters are worth caching.
 It also uses some heuristics on segments, filters and the doc id sets that
  they produce in order to cache more aggressively when the execution cost
  significantly outweighs the caching overhead.
 */
@interface OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy : NSObject < OrgApacheLuceneSearchFilterCachingPolicy >

#pragma mark Public

/*!
 @brief Create a new instance with sensible defaults.
 */
- (instancetype __nonnull)init;

/*!
 @brief Create a new instance.
 @param minSizeRatio the minimum size ratio for segments to be cached, see <code>FilterCachingPolicy.CacheOnLargeSegments</code>
 @param historySize the number of recently used filters to track
 @param minFrequencyCostlyFilters how many times filters whose <code>getDocIdSet</code>  method is expensive should have been seen before being cached
 @param minFrequencyCheapFilters how many times filters that produce <code>DocIdSet</code> s that are cheap to cached should have been seen before being cached
 @param minFrequencyOtherFilters how many times other filters should have been seen before being cached
 */
- (instancetype __nonnull)initWithFloat:(jfloat)minSizeRatio
                                withInt:(jint)historySize
                                withInt:(jint)minFrequencyCostlyFilters
                                withInt:(jint)minFrequencyCheapFilters
                                withInt:(jint)minFrequencyOtherFilters;

- (void)onUseWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter;

- (jboolean)shouldCacheWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter
             withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                     withOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set;

#pragma mark Package-Private

+ (jboolean)isCheapToCacheWithOrgApacheLuceneSearchDocIdSet:(OrgApacheLuceneSearchDocIdSet *)set;

+ (jboolean)isCostlyWithOrgApacheLuceneSearchFilter:(OrgApacheLuceneSearchFilter *)filter;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy)

FOUNDATION_EXPORT jboolean OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_isCostlyWithOrgApacheLuceneSearchFilter_(OrgApacheLuceneSearchFilter *filter);

FOUNDATION_EXPORT jboolean OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_isCheapToCacheWithOrgApacheLuceneSearchDocIdSet_(OrgApacheLuceneSearchDocIdSet *set);

FOUNDATION_EXPORT void OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithFloat_withInt_withInt_withInt_withInt_(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *self, jfloat minSizeRatio, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters);

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithFloat_withInt_withInt_withInt_withInt_(jfloat minSizeRatio, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_initWithFloat_withInt_withInt_withInt_withInt_(jfloat minSizeRatio, jint historySize, jint minFrequencyCostlyFilters, jint minFrequencyCheapFilters, jint minFrequencyOtherFilters);

FOUNDATION_EXPORT void OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_init(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingFilterCachingPolicy")
