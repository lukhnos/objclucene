//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/ScoreCachingWrappingScorer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchScoreCachingWrappingScorer")
#ifdef RESTRICT_OrgApacheLuceneSearchScoreCachingWrappingScorer
#define INCLUDE_ALL_OrgApacheLuceneSearchScoreCachingWrappingScorer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchScoreCachingWrappingScorer 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchScoreCachingWrappingScorer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchScoreCachingWrappingScorer_) && (INCLUDE_ALL_OrgApacheLuceneSearchScoreCachingWrappingScorer || defined(INCLUDE_OrgApacheLuceneSearchScoreCachingWrappingScorer))
#define OrgApacheLuceneSearchScoreCachingWrappingScorer_

#define RESTRICT_OrgApacheLuceneSearchFilterScorer 1
#define INCLUDE_OrgApacheLuceneSearchFilterScorer 1
#include "org/apache/lucene/search/FilterScorer.h"

@class OrgApacheLuceneSearchScorer;
@class OrgApacheLuceneSearchWeight;
@protocol JavaUtilCollection;

/*!
 @brief A <code>Scorer</code> which wraps another scorer and caches the score of the
  current document.Successive calls to <code>score()</code> will return the same
  result and will not invoke the wrapped Scorer's score() method, unless the
  current document has changed.
 <br>
  This class might be useful due to the changes done to the <code>Collector</code>
  interface, in which the score is not computed for a document by default, only
  if the collector requests it. Some collectors may need to use the score in
  several places, however all they have in hand is a <code>Scorer</code> object, and
  might end up computing the score of a document more than once.
 */
@interface OrgApacheLuceneSearchScoreCachingWrappingScorer : OrgApacheLuceneSearchFilterScorer

#pragma mark Public

/*!
 @brief Creates a new instance by wrapping the given scorer.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)scorer;

- (id<JavaUtilCollection>)getChildren;

- (jfloat)score;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneSearchScorer:(OrgApacheLuceneSearchScorer *)arg0
                              withOrgApacheLuceneSearchWeight:(OrgApacheLuceneSearchWeight *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchScoreCachingWrappingScorer)

FOUNDATION_EXPORT void OrgApacheLuceneSearchScoreCachingWrappingScorer_initWithOrgApacheLuceneSearchScorer_(OrgApacheLuceneSearchScoreCachingWrappingScorer *self, OrgApacheLuceneSearchScorer *scorer);

FOUNDATION_EXPORT OrgApacheLuceneSearchScoreCachingWrappingScorer *new_OrgApacheLuceneSearchScoreCachingWrappingScorer_initWithOrgApacheLuceneSearchScorer_(OrgApacheLuceneSearchScorer *scorer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchScoreCachingWrappingScorer *create_OrgApacheLuceneSearchScoreCachingWrappingScorer_initWithOrgApacheLuceneSearchScorer_(OrgApacheLuceneSearchScorer *scorer);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchScoreCachingWrappingScorer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchScoreCachingWrappingScorer")
