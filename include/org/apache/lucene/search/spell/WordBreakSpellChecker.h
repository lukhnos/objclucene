//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/spell/WordBreakSpellChecker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpellWordBreakSpellChecker")
#ifdef RESTRICT_OrgApacheLuceneSearchSpellWordBreakSpellChecker
#define INCLUDE_ALL_OrgApacheLuceneSearchSpellWordBreakSpellChecker 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchSpellWordBreakSpellChecker 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchSpellWordBreakSpellChecker

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchSpellWordBreakSpellChecker_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpellWordBreakSpellChecker || defined(INCLUDE_OrgApacheLuceneSearchSpellWordBreakSpellChecker))
#define OrgApacheLuceneSearchSpellWordBreakSpellChecker_

@class IOSObjectArray;
@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneSearchSpellSuggestMode;
@class OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod;

/*!
 @brief <p>
  A spell checker whose sole function is to offer suggestions by combining
  multiple terms into one word and/or breaking terms into multiple words.
 </p>
 */
@interface OrgApacheLuceneSearchSpellWordBreakSpellChecker : NSObject
@property (readonly, class, strong) OrgApacheLuceneIndexTerm *SEPARATOR_TERM NS_SWIFT_NAME(SEPARATOR_TERM);

#pragma mark Public

/*!
 @brief Creates a new spellchecker with default configuration values
 - seealso: #setMaxChanges(int)
 - seealso: #setMaxCombineWordLength(int)
 - seealso: #setMaxEvaluations(int)
 - seealso: #setMinBreakWordLength(int)
 - seealso: #setMinSuggestionFrequency(int)
 */
- (instancetype __nonnull)init;

/*!
 @brief Returns the maximum number of changes to perform on the input
 - seealso: #setMaxChanges(int)
 */
- (jint)getMaxChanges;

/*!
 @brief Returns the maximum length of a combined suggestion
 - seealso: #setMaxCombineWordLength(int)
 */
- (jint)getMaxCombineWordLength;

/*!
 @brief Returns the maximum number of word combinations to evaluate.
 - seealso: #setMaxEvaluations(int)
 */
- (jint)getMaxEvaluations;

/*!
 @brief Returns the minimum size of a broken word
 - seealso: #setMinBreakWordLength(int)
 */
- (jint)getMinBreakWordLength;

/*!
 @brief Returns the minimum frequency a term must have
  to be part of a suggestion.
 - seealso: #setMinSuggestionFrequency(int)
 */
- (jint)getMinSuggestionFrequency;

/*!
 @brief <p>
  The maximum numbers of changes (word breaks or combinations) to make on the
  original term(s).
 Default=1 
 </p>
 - seealso: #getMaxChanges()
 */
- (void)setMaxChangesWithInt:(jint)maxChanges;

/*!
 @brief <p>
  The maximum length of a suggestion made by combining 1 or more original
  terms.
 Default=20 
 </p>
 - seealso: #getMaxCombineWordLength()
 */
- (void)setMaxCombineWordLengthWithInt:(jint)maxCombineWordLength;

/*!
 @brief <p>
  The maximum number of word combinations to evaluate.
 Default=1000. A higher
  value might improve result quality. A lower value might improve
  performance. 
 </p>
 - seealso: #getMaxEvaluations()
 */
- (void)setMaxEvaluationsWithInt:(jint)maxEvaluations;

/*!
 @brief <p>
  The minimum length to break words down to.
 Default=1 
 </p>
 - seealso: #getMinBreakWordLength()
 */
- (void)setMinBreakWordLengthWithInt:(jint)minBreakWordLength;

/*!
 @brief <p>
  The minimum frequency a term must have to be included as part of a
  suggestion.
 Default=1 Not applicable when used with 
 <code>SuggestMode.SUGGEST_MORE_POPULAR</code>
  </p>
 - seealso: #getMinSuggestionFrequency()
 */
- (void)setMinSuggestionFrequencyWithInt:(jint)minSuggestionFrequency;

/*!
 @brief <p>
  Generate suggestions by breaking the passed-in term into multiple words.
 The scores returned are equal to the number of word breaks needed so a
  lower score is generally preferred over a higher score. 
 </p>
 @param suggestMode - default = 
 <code>SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX</code>
 @param sortMethod - default =
            <code>BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY</code>
 @return one or more arrays of words formed by breaking up the original term
 @throw IOExceptionIf there is a low-level I/O error.
 */
- (IOSObjectArray *)suggestWordBreaksWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                          withInt:(jint)maxSuggestions
                              withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                        withOrgApacheLuceneSearchSpellSuggestMode:(OrgApacheLuceneSearchSpellSuggestMode *)suggestMode
withOrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod:(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *)sortMethod;

/*!
 @brief <p>
  Generate suggestions by combining one or more of the passed-in terms into
  single words.
 The returned <code>CombineSuggestion</code> contains both a 
 <code>SuggestWord</code> and also an array detailing which passed-in terms were
  involved in creating this combination. The scores returned are equal to the
  number of word combinations needed, also one less than the length of the
  array <code>CombineSuggestion.originalTermIndexes</code>. Generally, a
  suggestion with a lower score is preferred over a higher score. 
 </p>
  <p>
  To prevent two adjacent terms from being combined (for instance, if one is
  mandatory and the other is prohibited), separate the two terms with 
 <code>WordBreakSpellChecker.SEPARATOR_TERM</code>
  </p>
  <p>
  When suggestMode equals <code>SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX</code>, each
  suggestion will include at least one term not in the index. 
 </p>
  <p>
  When suggestMode equals <code>SuggestMode.SUGGEST_MORE_POPULAR</code>, each
  suggestion will have the same, or better frequency than the most-popular
  included term. 
 </p>
 @return an array of words generated by combining original terms
 @throw IOExceptionIf there is a low-level I/O error.
 */
- (IOSObjectArray *)suggestWordCombinationsWithOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms
                                                                     withInt:(jint)maxSuggestions
                                         withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                                   withOrgApacheLuceneSearchSpellSuggestMode:(OrgApacheLuceneSearchSpellSuggestMode *)suggestMode;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneSearchSpellWordBreakSpellChecker)

/*!
 @brief Term that can be used to prohibit adjacent terms from being combined
 */
inline OrgApacheLuceneIndexTerm *OrgApacheLuceneSearchSpellWordBreakSpellChecker_get_SEPARATOR_TERM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneIndexTerm *OrgApacheLuceneSearchSpellWordBreakSpellChecker_SEPARATOR_TERM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchSpellWordBreakSpellChecker, SEPARATOR_TERM, OrgApacheLuceneIndexTerm *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpellWordBreakSpellChecker_init(OrgApacheLuceneSearchSpellWordBreakSpellChecker *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpellWordBreakSpellChecker *new_OrgApacheLuceneSearchSpellWordBreakSpellChecker_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpellWordBreakSpellChecker *create_OrgApacheLuceneSearchSpellWordBreakSpellChecker_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpellWordBreakSpellChecker)

#endif

#if !defined (OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpellWordBreakSpellChecker || defined(INCLUDE_OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod))
#define OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_Enum) {
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_Enum_NUM_CHANGES_THEN_SUMMED_FREQUENCY = 0,
  OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_Enum_NUM_CHANGES_THEN_MAX_FREQUENCY = 1,
};

/*!
 @brief <p>
  Determines the order to list word break suggestions 
 </p>
 */
@interface OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod : JavaLangEnum

@property (readonly, class, nonnull) OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *NUM_CHANGES_THEN_SUMMED_FREQUENCY NS_SWIFT_NAME(NUM_CHANGES_THEN_SUMMED_FREQUENCY);
@property (readonly, class, nonnull) OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *NUM_CHANGES_THEN_MAX_FREQUENCY NS_SWIFT_NAME(NUM_CHANGES_THEN_MAX_FREQUENCY);
#pragma mark Public

+ (OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_values_[];

/*!
 @brief <p>
  Sort by Number of word breaks, then by the Sum of all the component
  term's frequencies 
 </p>
 */
inline OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_get_NUM_CHANGES_THEN_SUMMED_FREQUENCY(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod, NUM_CHANGES_THEN_SUMMED_FREQUENCY)

/*!
 @brief <p>
  Sort by Number of word breaks, then by the Maximum of all the component
  term's frequencies 
 </p>
 */
inline OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_get_NUM_CHANGES_THEN_MAX_FREQUENCY(void);
J2OBJC_ENUM_CONSTANT(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod, NUM_CHANGES_THEN_MAX_FREQUENCY)

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_values(void);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod *OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpellWordBreakSpellChecker_BreakSuggestionSortMethod)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpellWordBreakSpellChecker")
