//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpellDirectSpellChecker")
#ifdef RESTRICT_OrgApacheLuceneSearchSpellDirectSpellChecker
#define INCLUDE_ALL_OrgApacheLuceneSearchSpellDirectSpellChecker 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchSpellDirectSpellChecker 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchSpellDirectSpellChecker

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchSpellDirectSpellChecker_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpellDirectSpellChecker || defined(INCLUDE_OrgApacheLuceneSearchSpellDirectSpellChecker))
#define OrgApacheLuceneSearchSpellDirectSpellChecker_

@class IOSObjectArray;
@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneSearchSpellSuggestMode;
@class OrgApacheLuceneUtilCharsRefBuilder;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol OrgApacheLuceneSearchSpellStringDistance;

/*!
 @brief Simple automaton-based spellchecker.
 <p>
  Candidates are presented directly from the term dictionary, based on
  Levenshtein distance. This is an alternative to <code>SpellChecker</code>
  if you are using an edit-distance-like metric such as Levenshtein
  or <code>JaroWinklerDistance</code>.
  <p>
  A practical benefit of this spellchecker is that it requires no additional
  datastructures (neither in RAM nor on disk) to do its work.
 - seealso: LevenshteinAutomata
 - seealso: FuzzyTermsEnum
 */
@interface OrgApacheLuceneSearchSpellDirectSpellChecker : NSObject
@property (readonly, class, strong) id<OrgApacheLuceneSearchSpellStringDistance> INTERNAL_LEVENSHTEIN NS_SWIFT_NAME(INTERNAL_LEVENSHTEIN);

#pragma mark Public

/*!
 @brief Creates a DirectSpellChecker with default configuration values
 */
- (instancetype __nonnull)init;

/*!
 @brief Get the minimal accuracy from the StringDistance for a match
 */
- (jfloat)getAccuracy;

/*!
 @brief Get the current comparator in use.
 */
- (id<JavaUtilComparator>)getComparator;

/*!
 @brief Get the string distance metric in use.
 */
- (id<OrgApacheLuceneSearchSpellStringDistance>)getDistance;

/*!
 @brief true if the spellchecker should lowercase terms
 */
- (jboolean)getLowerCaseTerms;

/*!
 @brief Get the maximum number of Levenshtein edit-distances to draw
   candidate terms from.
 */
- (jint)getMaxEdits;

/*!
 @brief Get the maximum number of top-N inspections per suggestion
 */
- (jint)getMaxInspections;

/*!
 @brief Get the maximum threshold of documents a query term can appear in order
  to provide suggestions.
 */
- (jfloat)getMaxQueryFrequency;

/*!
 @brief Get the minimal number of characters that must match exactly
 */
- (jint)getMinPrefix;

/*!
 @brief Get the minimum length of a query term needed to return suggestions
 */
- (jint)getMinQueryLength;

/*!
 @brief Get the minimal threshold of documents a term must appear for a match
 */
- (jfloat)getThresholdFrequency;

/*!
 @brief Set the minimal accuracy required (default: 0.5f) from a StringDistance 
  for a suggestion match.
 */
- (void)setAccuracyWithFloat:(jfloat)accuracy;

/*!
 @brief Set the comparator for sorting suggestions.
 The default is <code>SuggestWordQueue.DEFAULT_COMPARATOR</code>
 */
- (void)setComparatorWithJavaUtilComparator:(id<JavaUtilComparator>)comparator;

/*!
 @brief Set the string distance metric.
 The default is <code>INTERNAL_LEVENSHTEIN</code>
  <p>
  Note: because this spellchecker draws its candidates from the term
  dictionary using Damerau-Levenshtein, it works best with an edit-distance-like
  string metric. If you use a different metric than the default,
  you might want to consider increasing <code>setMaxInspections(int)</code>
  to draw more candidates for your metric to rank.
 */
- (void)setDistanceWithOrgApacheLuceneSearchSpellStringDistance:(id<OrgApacheLuceneSearchSpellStringDistance>)distance;

/*!
 @brief True if the spellchecker should lowercase terms (default: true)
 <p>
  This is a convenience method, if your index field has more complicated
  analysis (such as StandardTokenizer removing punctuation), it's probably
  better to turn this off, and instead run your query terms through your
  Analyzer first.
 <p>
  If this option is not on, case differences count as an edit!
 */
- (void)setLowerCaseTermsWithBoolean:(jboolean)lowerCaseTerms;

/*!
 @brief Sets the maximum number of Levenshtein edit-distances to draw
   candidate terms from.This value can be 1 or 2.
 The default is 2.
   <p>
   Note: a large number of spelling errors occur with an edit distance
   of 1, by setting this value to 1 you can increase both performance
   and precision at the cost of recall.
 */
- (void)setMaxEditsWithInt:(jint)maxEdits;

/*!
 @brief Set the maximum number of top-N inspections (default: 5) per suggestion.
 <p>
  Increasing this number can improve the accuracy of results, at the cost 
  of performance.
 */
- (void)setMaxInspectionsWithInt:(jint)maxInspections;

/*!
 @brief Set the maximum threshold (default: 0.01f) of documents a query term can 
  appear in order to provide suggestions.
 <p>
  Very high-frequency terms are typically spelled correctly. Additionally,
  this can increase performance as it will do no work for the common case
  of correctly-spelled input terms. 
 <p>
  This can be specified as a relative percentage of documents such as 0.5f,
  or it can be specified as an absolute whole document frequency, such as 4f.
  Absolute document frequencies may not be fractional.
 */
- (void)setMaxQueryFrequencyWithFloat:(jfloat)maxQueryFrequency;

/*!
 @brief Sets the minimal number of initial characters (default: 1) 
  that must match exactly.
 <p>
  This can improve both performance and accuracy of results,
  as misspellings are commonly not the first character.
 */
- (void)setMinPrefixWithInt:(jint)minPrefix;

/*!
 @brief Set the minimum length of a query term (default: 4) needed to return suggestions.
 <p>
  Very short query terms will often cause only bad suggestions with any distance
  metric.
 */
- (void)setMinQueryLengthWithInt:(jint)minQueryLength;

/*!
 @brief Set the minimal threshold of documents a term must appear for a match.
 <p>
  This can improve quality by only suggesting high-frequency terms. Note that
  very high values might decrease performance slightly, by forcing the spellchecker
  to draw more candidates from the term dictionary, but a practical value such
  as <code>1</code> can be very useful towards improving quality. 
 <p>
  This can be specified as a relative percentage of documents such as 0.5f,
  or it can be specified as an absolute whole document frequency, such as 4f.
  Absolute document frequencies may not be fractional.
 */
- (void)setThresholdFrequencyWithFloat:(jfloat)thresholdFrequency;

/*!
 @brief Calls <code>suggestSimilar(term, numSug, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX)</code>
 */
- (IOSObjectArray *)suggestSimilarWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                       withInt:(jint)numSug
                           withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir;

/*!
 @brief Calls <code>suggestSimilar(term, numSug, ir, suggestMode, this.accuracy)</code>
 */
- (IOSObjectArray *)suggestSimilarWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                       withInt:(jint)numSug
                           withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                     withOrgApacheLuceneSearchSpellSuggestMode:(OrgApacheLuceneSearchSpellSuggestMode *)suggestMode;

/*!
 @brief Suggest similar words.
 <p>Unlike <code>SpellChecker</code>, the similarity used to fetch the most
  relevant terms is an edit distance, therefore typically a low value
  for numSug will work very well.
 @param term Term you want to spell check on
 @param numSug the maximum number of suggested words
 @param ir IndexReader to find terms from
 @param suggestMode specifies when to return suggested words
 @param accuracy return only suggested words that match with this similarity
 @return sorted list of the suggested words according to the comparator
 @throw IOExceptionIf there is a low-level I/O error.
 */
- (IOSObjectArray *)suggestSimilarWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                       withInt:(jint)numSug
                           withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                     withOrgApacheLuceneSearchSpellSuggestMode:(OrgApacheLuceneSearchSpellSuggestMode *)suggestMode
                                                     withFloat:(jfloat)accuracy;

#pragma mark Protected

/*!
 @brief Provide spelling corrections based on several parameters.
 @param term The term to suggest spelling corrections for
 @param numSug The maximum number of spelling corrections
 @param ir The index reader to fetch the candidate spelling corrections from
 @param docfreq The minimum document frequency a potential suggestion need to have in order to be included
 @param editDistance The maximum edit distance candidates are allowed to have
 @param accuracy The minimum accuracy a suggested spelling correction needs to have in order to be included
 @param spare a chars scratch
 @return a collection of spelling corrections sorted by <code>ScoreTerm</code>'s natural order.
 @throw IOExceptionIf I/O related errors occur
 */
- (id<JavaUtilCollection>)suggestSimilarWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                             withInt:(jint)numSug
                                 withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)ir
                                                             withInt:(jint)docfreq
                                                             withInt:(jint)editDistance
                                                           withFloat:(jfloat)accuracy
                              withOrgApacheLuceneUtilCharsRefBuilder:(OrgApacheLuceneUtilCharsRefBuilder *)spare;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneSearchSpellDirectSpellChecker)

/*!
 @brief The default StringDistance, Damerau-Levenshtein distance implemented internally
   via <code>LevenshteinAutomata</code>.
 <p>
   Note: this is the fastest distance metric, because Damerau-Levenshtein is used
   to draw candidates from the term dictionary: this just re-uses the scoring.
 */
inline id<OrgApacheLuceneSearchSpellStringDistance> OrgApacheLuceneSearchSpellDirectSpellChecker_get_INTERNAL_LEVENSHTEIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<OrgApacheLuceneSearchSpellStringDistance> OrgApacheLuceneSearchSpellDirectSpellChecker_INTERNAL_LEVENSHTEIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchSpellDirectSpellChecker, INTERNAL_LEVENSHTEIN, id<OrgApacheLuceneSearchSpellStringDistance>)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpellDirectSpellChecker_init(OrgApacheLuceneSearchSpellDirectSpellChecker *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpellDirectSpellChecker *new_OrgApacheLuceneSearchSpellDirectSpellChecker_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpellDirectSpellChecker *create_OrgApacheLuceneSearchSpellDirectSpellChecker_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpellDirectSpellChecker)

#endif

#if !defined (OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpellDirectSpellChecker || defined(INCLUDE_OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm))
#define OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class OrgApacheLuceneUtilBytesRef;

/*!
 @brief Holds a spelling correction for internal usage inside <code>DirectSpellChecker</code>.
 */
@interface OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm : NSObject < JavaLangComparable > {
 @public
  /*!
   @brief The actual spellcheck correction.
   */
  OrgApacheLuceneUtilBytesRef *term_;
  /*!
   @brief The boost representing the similarity from the FuzzyTermsEnum (internal similarity score)
   */
  jfloat boost_;
  /*!
   @brief The df of the spellcheck correction.
   */
  jint docfreq_;
  /*!
   @brief The spellcheck correction represented as string, can be <code>null</code>.
   */
  NSString *termAsString_;
  /*!
   @brief The similarity score.
   */
  jfloat score_;
}

#pragma mark Public

/*!
 @brief Constructor.
 */
- (instancetype __nonnull)init;

- (jint)compareToWithId:(OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm *)other;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm, term_, OrgApacheLuceneUtilBytesRef *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm, termAsString_, NSString *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm_init(OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm *new_OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm *create_OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpellDirectSpellChecker_ScoreTerm)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpellDirectSpellChecker")
