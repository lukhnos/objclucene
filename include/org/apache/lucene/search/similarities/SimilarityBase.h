//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/similarities/SimilarityBase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchSimilaritiesSimilarityBase")
#ifdef RESTRICT_OrgApacheLuceneSearchSimilaritiesSimilarityBase
#define INCLUDE_ALL_OrgApacheLuceneSearchSimilaritiesSimilarityBase 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchSimilaritiesSimilarityBase 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchSimilaritiesSimilarityBase

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchSimilaritiesSimilarityBase_) && (INCLUDE_ALL_OrgApacheLuceneSearchSimilaritiesSimilarityBase || defined(INCLUDE_OrgApacheLuceneSearchSimilaritiesSimilarityBase))
#define OrgApacheLuceneSearchSimilaritiesSimilarityBase_

#define RESTRICT_OrgApacheLuceneSearchSimilaritiesSimilarity 1
#define INCLUDE_OrgApacheLuceneSearchSimilaritiesSimilarity 1
#include "org/apache/lucene/search/similarities/Similarity.h"

@class IOSObjectArray;
@class OrgApacheLuceneIndexFieldInvertState;
@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchCollectionStatistics;
@class OrgApacheLuceneSearchExplanation;
@class OrgApacheLuceneSearchSimilaritiesBasicStats;
@class OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer;
@class OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight;
@class OrgApacheLuceneSearchTermStatistics;
@protocol JavaUtilList;

/*!
 @brief A subclass of <code>Similarity</code> that provides a simplified API for its
  descendants.Subclasses are only required to implement the <code>score</code>
  and <code>toString()</code> methods.
 Implementing 
 <code>explain(List, BasicStats, int, float, float)</code> is optional,
  inasmuch as SimilarityBase already provides a basic explanation of the score
  and the term frequency. However, implementers of a subclass are encouraged to
  include as much detail about the scoring method as possible. 
 <p>
  Note: multi-word queries such as phrase queries are scored in a different way
  than Lucene's default ranking algorithm: whereas it "fakes" an IDF value for
  the phrase as a whole (since it does not know it), this class instead scores
  phrases as a summation of the individual term scores.
 */
@interface OrgApacheLuceneSearchSimilaritiesSimilarityBase : OrgApacheLuceneSearchSimilaritiesSimilarity {
 @public
  /*!
   @brief True if overlap tokens (tokens with a position of increment of zero) are
  discounted from the document's length.
   */
  jboolean discountOverlaps_;
}

#pragma mark Public

/*!
 @brief Sole constructor.
 (For invocation by subclass 
  constructors, typically implicit.)
 */
- (instancetype __nonnull)init;

/*!
 @brief Encodes the document length in the same way as <code>TFIDFSimilarity</code>.
 */
- (jlong)computeNormWithOrgApacheLuceneIndexFieldInvertState:(OrgApacheLuceneIndexFieldInvertState *)state;

- (OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *)computeWeightWithFloat:(jfloat)queryBoost
                                    withOrgApacheLuceneSearchCollectionStatistics:(OrgApacheLuceneSearchCollectionStatistics *)collectionStats
                                     withOrgApacheLuceneSearchTermStatisticsArray:(IOSObjectArray *)termStats;

/*!
 @brief Returns true if overlap tokens are discounted from the document's length.
 - seealso: #setDiscountOverlaps
 */
- (jboolean)getDiscountOverlaps;

/*!
 @brief Returns the base two logarithm of <code>x</code>.
 */
+ (jdouble)log2WithDouble:(jdouble)x;

/*!
 @brief Determines whether overlap tokens (Tokens with
   0 position increment) are ignored when computing
   norm.By default this is true, meaning overlap
   tokens do not count when computing norms.
 - seealso: #computeNorm
 */
- (void)setDiscountOverlapsWithBoolean:(jboolean)v;

- (OrgApacheLuceneSearchSimilaritiesSimilarity_SimScorer *)simScorerWithOrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight:(OrgApacheLuceneSearchSimilaritiesSimilarity_SimWeight *)stats
                                                                                    withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

/*!
 @brief Subclasses must override this method to return the name of the Similarity
  and preferably the values of parameters (if any) as well.
 */
- (NSString *)description;

#pragma mark Protected

/*!
 @brief Decodes a normalization factor (document length) stored in an index.
 - seealso: #encodeNormValue(float,float)
 */
- (jfloat)decodeNormValueWithByte:(jbyte)norm;

/*!
 @brief Encodes the length to a byte via SmallFloat.
 */
- (jbyte)encodeNormValueWithFloat:(jfloat)boost
                        withFloat:(jfloat)length;

/*!
 @brief Explains the score.The implementation here provides a basic explanation
  in the format <em>score(name-of-similarity, doc=doc-id,
  freq=term-frequency), computed from:</em>, and
  attaches the score (computed via the <code>score(BasicStats, float, float)</code>
  method) and the explanation for the term frequency.
 Subclasses content with
  this format may add additional details in 
 <code>explain(List, BasicStats, int, float, float)</code>.
 @param stats the corpus level statistics.
 @param doc the document id.
 @param freq the term frequency and its explanation.
 @param docLen the document length.
 @return the explanation.
 */
- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneSearchSimilaritiesBasicStats:(OrgApacheLuceneSearchSimilaritiesBasicStats *)stats
                                                                                     withInt:(jint)doc
                                                        withOrgApacheLuceneSearchExplanation:(OrgApacheLuceneSearchExplanation *)freq
                                                                                   withFloat:(jfloat)docLen;

/*!
 @brief Subclasses should implement this method to explain the score.
 <code>expl</code>
  already contains the score, the name of the class and the doc id, as well
  as the term frequency and its explanation; subclasses can add additional
  clauses to explain details of their scoring formulae. 
 <p>The default implementation does nothing.</p>
 @param subExpls the list of details of the explanation to extend
 @param stats the corpus level statistics.
 @param doc the document id.
 @param freq the term frequency.
 @param docLen the document length.
 */
- (void)explainWithJavaUtilList:(id<JavaUtilList>)subExpls
withOrgApacheLuceneSearchSimilaritiesBasicStats:(OrgApacheLuceneSearchSimilaritiesBasicStats *)stats
                        withInt:(jint)doc
                      withFloat:(jfloat)freq
                      withFloat:(jfloat)docLen;

/*!
 @brief Fills all member fields defined in <code>BasicStats</code> in <code>stats</code>.
 Subclasses can override this method to fill additional stats.
 */
- (void)fillBasicStatsWithOrgApacheLuceneSearchSimilaritiesBasicStats:(OrgApacheLuceneSearchSimilaritiesBasicStats *)stats
                        withOrgApacheLuceneSearchCollectionStatistics:(OrgApacheLuceneSearchCollectionStatistics *)collectionStats
                              withOrgApacheLuceneSearchTermStatistics:(OrgApacheLuceneSearchTermStatistics *)termStats;

/*!
 @brief Factory method to return a custom stats object
 */
- (OrgApacheLuceneSearchSimilaritiesBasicStats *)newStatsWithNSString:(NSString *)field
                                                            withFloat:(jfloat)queryBoost OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Scores the document <code>doc</code>.
 <p>Subclasses must apply their scoring formula in this class.</p>
 @param stats the corpus level statistics.
 @param freq the term frequency.
 @param docLen the document length.
 @return the score.
 */
- (jfloat)scoreWithOrgApacheLuceneSearchSimilaritiesBasicStats:(OrgApacheLuceneSearchSimilaritiesBasicStats *)stats
                                                     withFloat:(jfloat)freq
                                                     withFloat:(jfloat)docLen;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneSearchSimilaritiesSimilarityBase)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSimilaritiesSimilarityBase_init(OrgApacheLuceneSearchSimilaritiesSimilarityBase *self);

FOUNDATION_EXPORT jdouble OrgApacheLuceneSearchSimilaritiesSimilarityBase_log2WithDouble_(jdouble x);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSimilaritiesSimilarityBase)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchSimilaritiesSimilarityBase")
