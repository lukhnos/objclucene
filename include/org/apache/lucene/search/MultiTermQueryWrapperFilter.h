//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/MultiTermQueryWrapperFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryWrapperFilter")
#ifdef RESTRICT_OrgApacheLuceneSearchMultiTermQueryWrapperFilter
#define INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryWrapperFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryWrapperFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchMultiTermQueryWrapperFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchMultiTermQueryWrapperFilter_) && (INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryWrapperFilter || defined(INCLUDE_OrgApacheLuceneSearchMultiTermQueryWrapperFilter))
#define OrgApacheLuceneSearchMultiTermQueryWrapperFilter_

#define RESTRICT_OrgApacheLuceneSearchFilter 1
#define INCLUDE_OrgApacheLuceneSearchFilter 1
#include "org/apache/lucene/search/Filter.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchDocIdSet;
@class OrgApacheLuceneSearchMultiTermQuery;
@protocol OrgApacheLuceneUtilBits;

/*!
 @brief A wrapper for <code>MultiTermQuery</code>, that exposes its
  functionality as a <code>Filter</code>.
 <P>
  <code>MultiTermQueryWrapperFilter</code> is not designed to
  be used by itself. Normally you subclass it to provide a Filter
  counterpart for a <code>MultiTermQuery</code> subclass. 
 <P>
  For example, <code>TermRangeFilter</code> and <code>PrefixFilter</code> extend 
 <code>MultiTermQueryWrapperFilter</code>.
 */
@interface OrgApacheLuceneSearchMultiTermQueryWrapperFilter : OrgApacheLuceneSearchFilter {
 @public
  OrgApacheLuceneSearchMultiTermQuery *query_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

/*!
 @brief Returns a DocIdSet with documents that should be permitted in search
  results.
 */
- (OrgApacheLuceneSearchDocIdSet *)getDocIdSetWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                            withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)acceptDocs;

/*!
 @brief Returns the field name for this query
 */
- (NSString *)getField;

- (NSUInteger)hash;

- (NSString *)toStringWithNSString:(NSString *)field;

#pragma mark Protected

/*!
 @brief Wrap a <code>MultiTermQuery</code> as a Filter.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiTermQueryWrapperFilter)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiTermQueryWrapperFilter, query_, OrgApacheLuceneSearchMultiTermQuery *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchMultiTermQueryWrapperFilter_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQueryWrapperFilter *self, OrgApacheLuceneSearchMultiTermQuery *query);

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQueryWrapperFilter *new_OrgApacheLuceneSearchMultiTermQueryWrapperFilter_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQuery *query) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQueryWrapperFilter *create_OrgApacheLuceneSearchMultiTermQueryWrapperFilter_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQuery *query);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiTermQueryWrapperFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQueryWrapperFilter")
