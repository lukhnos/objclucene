//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/RegexpQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchRegexpQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchRegexpQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchRegexpQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchRegexpQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchRegexpQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchRegexpQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchRegexpQuery || defined(INCLUDE_OrgApacheLuceneSearchRegexpQuery))
#define OrgApacheLuceneSearchRegexpQuery_

#define RESTRICT_OrgApacheLuceneSearchAutomatonQuery 1
#define INCLUDE_OrgApacheLuceneSearchAutomatonQuery 1
#include "org/apache/lucene/search/AutomatonQuery.h"

@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneUtilAutomatonAutomaton;
@protocol OrgApacheLuceneUtilAutomatonAutomatonProvider;

/*!
 @brief A fast regular expression query based on the 
 <code>org.apache.lucene.util.automaton</code> package.
 <ul>
  <li>Comparisons are <a href="http://tusker.org/regex/regex_benchmark.html">
 fast</a>
  <li>The term dictionary is enumerated in an intelligent way, to avoid
  comparisons. See <code>AutomatonQuery</code> for more details. 
 </ul>
  <p>
  The supported syntax is documented in the <code>RegExp</code> class.
  Note this might be different than other regular expression implementations.
  For some alternatives with different syntax, look under the sandbox. 
 </p>
  <p>
  Note this query can be slow, as it needs to iterate over many terms. In order
  to prevent extremely slow RegexpQueries, a Regexp term should not start with
  the expression <code>.*</code>
 - seealso: RegExp
 */
@interface OrgApacheLuceneSearchRegexpQuery : OrgApacheLuceneSearchAutomatonQuery

#pragma mark Public

/*!
 @brief Constructs a query for terms matching <code>term</code>.
 <p>
  By default, all regular expression features are enabled. 
 </p>
 @param term regular expression.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term;

/*!
 @brief Constructs a query for terms matching <code>term</code>.
 @param term regular expression.
 @param flags optional RegExp features from <code>RegExp</code>
 */
- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                   withInt:(jint)flags;

/*!
 @brief Constructs a query for terms matching <code>term</code>.
 @param term regular expression.
 @param flags optional RegExp features from <code>RegExp</code>
 @param provider custom AutomatonProvider for named automata
 @param maxDeterminizedStates maximum number of states that compiling the   automaton for the regexp can result in.  Set higher to allow more complex
    queries and lower to prevent memory exhaustion.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                   withInt:(jint)flags
         withOrgApacheLuceneUtilAutomatonAutomatonProvider:(id<OrgApacheLuceneUtilAutomatonAutomatonProvider>)provider
                                                   withInt:(jint)maxDeterminizedStates;

/*!
 @brief Constructs a query for terms matching <code>term</code>.
 @param term regular expression.
 @param flags optional RegExp features from <code>RegExp</code>
 @param maxDeterminizedStates maximum number of states that compiling the   automaton for the regexp can result in.  Set higher to allow more complex
    queries and lower to prevent memory exhaustion.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                   withInt:(jint)flags
                                                   withInt:(jint)maxDeterminizedStates;

/*!
 @brief Prints a user-readable version of this query.
 */
- (NSString *)toStringWithNSString:(NSString *)field;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)arg0
                 withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)arg0
                 withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)arg1
                                                   withInt:(jint)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)arg0
                 withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)arg1
                                                   withInt:(jint)arg2
                                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneSearchRegexpQuery)

FOUNDATION_EXPORT void OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneSearchRegexpQuery *self, OrgApacheLuceneIndexTerm *term);

FOUNDATION_EXPORT OrgApacheLuceneSearchRegexpQuery *new_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *term) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchRegexpQuery *create_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_(OrgApacheLuceneIndexTerm *term);

FOUNDATION_EXPORT void OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_(OrgApacheLuceneSearchRegexpQuery *self, OrgApacheLuceneIndexTerm *term, jint flags);

FOUNDATION_EXPORT OrgApacheLuceneSearchRegexpQuery *new_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_(OrgApacheLuceneIndexTerm *term, jint flags) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchRegexpQuery *create_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_(OrgApacheLuceneIndexTerm *term, jint flags);

FOUNDATION_EXPORT void OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_withInt_(OrgApacheLuceneSearchRegexpQuery *self, OrgApacheLuceneIndexTerm *term, jint flags, jint maxDeterminizedStates);

FOUNDATION_EXPORT OrgApacheLuceneSearchRegexpQuery *new_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_withInt_(OrgApacheLuceneIndexTerm *term, jint flags, jint maxDeterminizedStates) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchRegexpQuery *create_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_withInt_(OrgApacheLuceneIndexTerm *term, jint flags, jint maxDeterminizedStates);

FOUNDATION_EXPORT void OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_withOrgApacheLuceneUtilAutomatonAutomatonProvider_withInt_(OrgApacheLuceneSearchRegexpQuery *self, OrgApacheLuceneIndexTerm *term, jint flags, id<OrgApacheLuceneUtilAutomatonAutomatonProvider> provider, jint maxDeterminizedStates);

FOUNDATION_EXPORT OrgApacheLuceneSearchRegexpQuery *new_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_withOrgApacheLuceneUtilAutomatonAutomatonProvider_withInt_(OrgApacheLuceneIndexTerm *term, jint flags, id<OrgApacheLuceneUtilAutomatonAutomatonProvider> provider, jint maxDeterminizedStates) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchRegexpQuery *create_OrgApacheLuceneSearchRegexpQuery_initWithOrgApacheLuceneIndexTerm_withInt_withOrgApacheLuceneUtilAutomatonAutomatonProvider_withInt_(OrgApacheLuceneIndexTerm *term, jint flags, id<OrgApacheLuceneUtilAutomatonAutomatonProvider> provider, jint maxDeterminizedStates);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchRegexpQuery)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchRegexpQuery")
