//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/MultiTermQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchMultiTermQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchMultiTermQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchMultiTermQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQuery || defined(INCLUDE_OrgApacheLuceneSearchMultiTermQuery))
#define OrgApacheLuceneSearchMultiTermQuery_

#define RESTRICT_OrgApacheLuceneSearchQuery 1
#define INCLUDE_OrgApacheLuceneSearchQuery 1
#include "org/apache/lucene/search/Query.h"

@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneIndexTerms;
@class OrgApacheLuceneIndexTermsEnum;
@class OrgApacheLuceneSearchMultiTermQuery_RewriteMethod;
@class OrgApacheLuceneUtilAttributeSource;

/*!
 @brief An abstract <code>Query</code> that matches documents
  containing a subset of terms provided by a <code>FilteredTermsEnum</code>
  enumeration.
 <p>This query cannot be used directly; you must subclass
  it and define <code>getTermsEnum(Terms,AttributeSource)</code> to provide a <code>FilteredTermsEnum</code>
  that iterates through the terms to be
  matched. 
 <p><b>NOTE</b>: if <code>setRewriteMethod</code> is either 
 <code>CONSTANT_SCORE_BOOLEAN_REWRITE</code> or <code>SCORING_BOOLEAN_REWRITE</code>
 , you may encounter a 
 <code>BooleanQuery.TooManyClauses</code> exception during
  searching, which happens when the number of terms to be
  searched exceeds <code>BooleanQuery.getMaxClauseCount()</code>
 .  Setting <code>setRewriteMethod</code>
  to <code>CONSTANT_SCORE_REWRITE</code>
  prevents this. 
 <p>The recommended rewrite method is <code>CONSTANT_SCORE_REWRITE</code>
 : it doesn't spend CPU
  computing unhelpful scores, and is the most
  performant rewrite method given the query. If you
  need scoring (like <code>FuzzyQuery</code>, use 
 <code>TopTermsScoringBooleanQueryRewrite</code> which uses
  a priority queue to only collect competitive terms
  and not hit this limitation.
  Note that org.apache.lucene.queryparser.classic.QueryParser produces
  MultiTermQueries using <code>CONSTANT_SCORE_REWRITE</code>
  by default.
 */
@interface OrgApacheLuceneSearchMultiTermQuery : OrgApacheLuceneSearchQuery {
 @public
  NSString *field_;
  OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *rewriteMethod_;
}
@property (readonly, class, strong) OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *CONSTANT_SCORE_REWRITE NS_SWIFT_NAME(CONSTANT_SCORE_REWRITE);
@property (readonly, class, strong) OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *CONSTANT_SCORE_FILTER_REWRITE NS_SWIFT_NAME(CONSTANT_SCORE_FILTER_REWRITE);
@property (readonly, class, strong) OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *SCORING_BOOLEAN_REWRITE NS_SWIFT_NAME(SCORING_BOOLEAN_REWRITE);
@property (readonly, class, strong) OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *SCORING_BOOLEAN_QUERY_REWRITE NS_SWIFT_NAME(SCORING_BOOLEAN_QUERY_REWRITE);
@property (readonly, class, strong) OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *CONSTANT_SCORE_BOOLEAN_REWRITE NS_SWIFT_NAME(CONSTANT_SCORE_BOOLEAN_REWRITE);
@property (readonly, class, strong) OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE NS_SWIFT_NAME(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);

#pragma mark Public

/*!
 @brief Constructs a query matching terms that cannot be represented with a single
  Term.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)field;

- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the field name for this query
 */
- (NSString *)getField;

/*!
 - seealso: #setRewriteMethod
 */
- (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)getRewriteMethod;

- (NSUInteger)hash;

/*!
 @brief To rewrite to a simpler form, instead return a simpler
  enum from <code>getTermsEnum(Terms, AttributeSource)</code>.For example,
  to rewrite to a single term, return a <code>SingleTermsEnum</code>
 */
- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

/*!
 @brief Sets the rewrite method to be used when executing the
  query.You can use one of the four core methods, or
  implement your own subclass of <code>RewriteMethod</code>.
 */
- (void)setRewriteMethodWithOrgApacheLuceneSearchMultiTermQuery_RewriteMethod:(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)method;

#pragma mark Protected

/*!
 @brief Convenience method, if no attributes are needed:
  This simply passes empty attributes and is equal to: 
 <code>getTermsEnum(terms, new AttributeSource())</code>
 */
- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms;

/*!
 @brief Construct the enumeration to be used, expanding the
   pattern term.This method should only be called if
   the field exists (ie, implementations can assume the
   field does exist).
 This method should not return null
   (should instead return <code>TermsEnum.EMPTY</code> if no
   terms match).  The TermsEnum must already be
   positioned to the first matching term.
  The given <code>AttributeSource</code> is passed by the <code>RewriteMethod</code> to
  provide attributes, the rewrite method uses to inform about e.g. maximum competitive boosts.
  This is currently only used by <code>TopTermsRewrite</code>
 */
- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                                      withOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)atts;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneSearchMultiTermQuery)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiTermQuery, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchMultiTermQuery, rewriteMethod_, OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)

/*!
 @brief A rewrite method that first creates a private Filter,
   by visiting each term in sequence and marking all docs
   for that term.Matching documents are assigned a
   constant score equal to the query's boost.
 <p> This method is faster than the BooleanQuery
   rewrite methods when the number of matched terms or
   matched documents is non-trivial. Also, it will never
   hit an errant <code>BooleanQuery.TooManyClauses</code>
   exception.
 - seealso: #setRewriteMethod
 */
inline OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_get_CONSTANT_SCORE_REWRITE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_REWRITE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchMultiTermQuery, CONSTANT_SCORE_REWRITE, OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)

/*!
 @brief Old name of <code>CONSTANT_SCORE_REWRITE</code>
 */
inline OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_get_CONSTANT_SCORE_FILTER_REWRITE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_FILTER_REWRITE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchMultiTermQuery, CONSTANT_SCORE_FILTER_REWRITE, OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)

/*!
 @brief A rewrite method that first translates each term into
   <code>BooleanClause.Occur.SHOULD</code> clause in a
   BooleanQuery, and keeps the scores as computed by the
   query.Note that typically such scores are
   meaningless to the user, and require non-trivial CPU
   to compute, so it's almost always better to use <code>CONSTANT_SCORE_REWRITE</code>
  instead.
 <p><b>NOTE</b>: This rewrite method will hit <code>BooleanQuery.TooManyClauses</code>
  if the number of terms
   exceeds <code>BooleanQuery.getMaxClauseCount</code>.
 - seealso: #setRewriteMethod
 */
inline OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_get_SCORING_BOOLEAN_REWRITE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_REWRITE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchMultiTermQuery, SCORING_BOOLEAN_REWRITE, OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)

/*!
 @brief Old name of <code>SCORING_BOOLEAN_REWRITE</code>
 */
inline OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_get_SCORING_BOOLEAN_QUERY_REWRITE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_SCORING_BOOLEAN_QUERY_REWRITE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchMultiTermQuery, SCORING_BOOLEAN_QUERY_REWRITE, OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)

/*!
 @brief Like <code>SCORING_BOOLEAN_REWRITE</code> except
   scores are not computed.Instead, each matching
   document receives a constant score equal to the
   query's boost.
 <p><b>NOTE</b>: This rewrite method will hit <code>BooleanQuery.TooManyClauses</code>
  if the number of terms
   exceeds <code>BooleanQuery.getMaxClauseCount</code>.
 - seealso: #setRewriteMethod
 */
inline OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_get_CONSTANT_SCORE_BOOLEAN_REWRITE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_REWRITE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchMultiTermQuery, CONSTANT_SCORE_BOOLEAN_REWRITE, OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)

/*!
 @brief Old name of <code>CONSTANT_SCORE_BOOLEAN_REWRITE</code>
 */
inline OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_get_CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *OrgApacheLuceneSearchMultiTermQuery_CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchMultiTermQuery, CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE, OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchMultiTermQuery_initWithNSString_(OrgApacheLuceneSearchMultiTermQuery *self, NSString *field);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiTermQuery)

#endif

#if !defined (OrgApacheLuceneSearchMultiTermQuery_RewriteMethod_) && (INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQuery || defined(INCLUDE_OrgApacheLuceneSearchMultiTermQuery_RewriteMethod))
#define OrgApacheLuceneSearchMultiTermQuery_RewriteMethod_

@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneIndexTerms;
@class OrgApacheLuceneIndexTermsEnum;
@class OrgApacheLuceneSearchMultiTermQuery;
@class OrgApacheLuceneSearchQuery;
@class OrgApacheLuceneUtilAttributeSource;

/*!
 @brief Abstract class that defines how the query is rewritten.
 */
@interface OrgApacheLuceneSearchMultiTermQuery_RewriteMethod : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                   withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query;

#pragma mark Protected

/*!
 @brief Returns the <code>MultiTermQuery</code>s <code>TermsEnum</code>
 - seealso: MultiTermQuery#getTermsEnum(Terms, AttributeSource)
 */
- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query
                                                         withOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                                                withOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)atts;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod)

FOUNDATION_EXPORT void OrgApacheLuceneSearchMultiTermQuery_RewriteMethod_init(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiTermQuery_RewriteMethod)

#endif

#if !defined (OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_) && (INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQuery || defined(INCLUDE_OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite))
#define OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_

#define RESTRICT_OrgApacheLuceneSearchTopTermsRewrite 1
#define INCLUDE_OrgApacheLuceneSearchTopTermsRewrite 1
#include "org/apache/lucene/search/TopTermsRewrite.h"

@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneIndexTermContext;
@class OrgApacheLuceneSearchBooleanQuery_Builder;
@class OrgApacheLuceneSearchQuery;

/*!
 @brief A rewrite method that first translates each term into 
 <code>BooleanClause.Occur.SHOULD</code> clause in a BooleanQuery, and keeps the
  scores as computed by the query.
 <p>
  This rewrite method only uses the top scoring terms so it will not overflow
  the boolean max clause count. It is the default rewrite method for 
 <code>FuzzyQuery</code>.
 - seealso: #setRewriteMethod
 */
@interface OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite : OrgApacheLuceneSearchTopTermsRewrite

#pragma mark Public

/*!
 @brief Create a TopTermsScoringBooleanQueryRewrite for 
  at most <code>size</code> terms.
 <p>
  NOTE: if <code>BooleanQuery.getMaxClauseCount</code> is smaller than  
 <code>size</code>, then it will be used instead.
 */
- (instancetype __nonnull)initWithInt:(jint)size;

#pragma mark Protected

- (void)addClauseWithId:(OrgApacheLuceneSearchBooleanQuery_Builder *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docCount
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states;

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchBooleanQuery_Builder *)builder;

- (jint)getMaxSize;

- (OrgApacheLuceneSearchBooleanQuery_Builder *)getTopLevelBuilder;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite)

FOUNDATION_EXPORT void OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_initWithInt_(OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite *self, jint size);

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite *new_OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite *create_OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite_initWithInt_(jint size);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiTermQuery_TopTermsScoringBooleanQueryRewrite)

#endif

#if !defined (OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite_) && (INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQuery || defined(INCLUDE_OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite))
#define OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite_

#define RESTRICT_OrgApacheLuceneSearchTopTermsRewrite 1
#define INCLUDE_OrgApacheLuceneSearchTopTermsRewrite 1
#include "org/apache/lucene/search/TopTermsRewrite.h"

@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneIndexTermContext;
@class OrgApacheLuceneSearchBlendedTermQuery_Builder;
@class OrgApacheLuceneSearchQuery;

/*!
 @brief A rewrite method that first translates each term into 
 <code>BooleanClause.Occur.SHOULD</code> clause in a BooleanQuery, but adjusts
  the frequencies used for scoring to be blended across the terms, otherwise
  the rarest term typically ranks highest (often not useful eg in the set of
  expanded terms in a FuzzyQuery).
 <p>
  This rewrite method only uses the top scoring terms so it will not overflow
  the boolean max clause count.
 - seealso: #setRewriteMethod
 */
@interface OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite : OrgApacheLuceneSearchTopTermsRewrite

#pragma mark Public

/*!
 @brief Create a TopTermsBlendedScoringBooleanQueryRewrite for at most 
 <code>size</code> terms.
 <p>
  NOTE: if <code>BooleanQuery.getMaxClauseCount</code> is smaller than 
 <code>size</code>, then it will be used instead.
 */
- (instancetype __nonnull)initWithInt:(jint)size;

#pragma mark Protected

- (void)addClauseWithId:(OrgApacheLuceneSearchBlendedTermQuery_Builder *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docCount
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states;

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchBlendedTermQuery_Builder *)builder;

- (jint)getMaxSize;

- (OrgApacheLuceneSearchBlendedTermQuery_Builder *)getTopLevelBuilder;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite)

FOUNDATION_EXPORT void OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite_initWithInt_(OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite *self, jint size);

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite *new_OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite *create_OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite_initWithInt_(jint size);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiTermQuery_TopTermsBlendedFreqScoringRewrite)

#endif

#if !defined (OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite_) && (INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQuery || defined(INCLUDE_OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite))
#define OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite_

#define RESTRICT_OrgApacheLuceneSearchTopTermsRewrite 1
#define INCLUDE_OrgApacheLuceneSearchTopTermsRewrite 1
#include "org/apache/lucene/search/TopTermsRewrite.h"

@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneIndexTermContext;
@class OrgApacheLuceneSearchBooleanQuery_Builder;
@class OrgApacheLuceneSearchQuery;

/*!
 @brief A rewrite method that first translates each term into 
 <code>BooleanClause.Occur.SHOULD</code> clause in a BooleanQuery, but the scores
  are only computed as the boost.
 <p>
  This rewrite method only uses the top scoring terms so it will not overflow
  the boolean max clause count.
 - seealso: #setRewriteMethod
 */
@interface OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite : OrgApacheLuceneSearchTopTermsRewrite

#pragma mark Public

/*!
 @brief Create a TopTermsBoostOnlyBooleanQueryRewrite for 
  at most <code>size</code> terms.
 <p>
  NOTE: if <code>BooleanQuery.getMaxClauseCount</code> is smaller than  
 <code>size</code>, then it will be used instead.
 */
- (instancetype __nonnull)initWithInt:(jint)size;

#pragma mark Protected

- (void)addClauseWithId:(OrgApacheLuceneSearchBooleanQuery_Builder *)topLevel
withOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                withInt:(jint)docFreq
              withFloat:(jfloat)boost
withOrgApacheLuceneIndexTermContext:(OrgApacheLuceneIndexTermContext *)states;

- (OrgApacheLuceneSearchQuery *)buildWithId:(OrgApacheLuceneSearchBooleanQuery_Builder *)builder;

- (jint)getMaxSize;

- (OrgApacheLuceneSearchBooleanQuery_Builder *)getTopLevelBuilder;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite)

FOUNDATION_EXPORT void OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite_initWithInt_(OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite *self, jint size);

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite *new_OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite *create_OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite_initWithInt_(jint size);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiTermQuery_TopTermsBoostOnlyBooleanQueryRewrite)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchMultiTermQuery")
