//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/FieldMaskingSpanQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchSpansFieldMaskingSpanQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery || defined(INCLUDE_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery))
#define OrgApacheLuceneSearchSpansFieldMaskingSpanQuery_

#define RESTRICT_OrgApacheLuceneSearchSpansSpanQuery 1
#define INCLUDE_OrgApacheLuceneSearchSpansSpanQuery 1
#include "org/apache/lucene/search/spans/SpanQuery.h"

@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchQuery;
@class OrgApacheLuceneSearchSpansSpanWeight;

/*!
 @brief <p>Wrapper to allow <code>SpanQuery</code> objects participate in composite 
  single-field SpanQueries by 'lying' about their search field.
 That is, 
  the masked SpanQuery will function as normal, 
  but <code>SpanQuery.getField()</code> simply hands back the value supplied 
  in this class's constructor.</p>
   
 <p>This can be used to support Queries like <code>SpanNearQuery</code> or  
 <code>SpanOrQuery</code> across different fields, which is not ordinarily 
  permitted.</p>
   
 <p>This can be useful for denormalized relational data: for example, when 
  indexing a document with conceptually many 'children': </p>
   
 @code

   teacherid: 1
   studentfirstname: james
   studentsurname: jones  
   teacherid: 2
   studenfirstname: james
   studentsurname: smith
   studentfirstname: sally
   studentsurname: jones 
  
@endcode
   
 <p>a SpanNearQuery with a slop of 0 can be applied across two  
 <code>SpanTermQuery</code> objects as follows: 
 <pre class="prettyprint">
     SpanQuery q1  = new SpanTermQuery(new Term("studentfirstname", "james"));
     SpanQuery q2  = new SpanTermQuery(new Term("studentsurname", "jones"));
     SpanQuery q2m = new FieldMaskingSpanQuery(q2, "studentfirstname");
     Query q = new SpanNearQuery(new SpanQuery[]{q1, q2m}, -1, false); 
 
@endcode
  to search for 'studentfirstname:james studentsurname:jones' and find 
  teacherid 1 without matching teacherid 2 (which has a 'james' in position 0 
  and 'jones' in position 1).  
 <p>Note: as <code>getField()</code> returns the masked field, scoring will be 
  done using the Similarity and collection statistics of the field name supplied,
  but with the term statistics of the real field. This may lead to exceptions,
  poor performance, and unexpected scoring behaviour.
 */
@interface OrgApacheLuceneSearchSpansFieldMaskingSpanQuery : OrgApacheLuceneSearchSpansSpanQuery

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)maskedQuery
                                                         withNSString:(NSString *)maskedField;

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores;

- (jboolean)isEqual:(id)o;

- (NSString *)getField;

- (OrgApacheLuceneSearchSpansSpanQuery *)getMaskedQuery;

- (NSUInteger)hash;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

- (NSString *)toStringWithNSString:(NSString *)field;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansFieldMaskingSpanQuery)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansFieldMaskingSpanQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withNSString_(OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *self, OrgApacheLuceneSearchSpansSpanQuery *maskedQuery, NSString *maskedField);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *new_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withNSString_(OrgApacheLuceneSearchSpansSpanQuery *maskedQuery, NSString *maskedField) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansFieldMaskingSpanQuery *create_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withNSString_(OrgApacheLuceneSearchSpansSpanQuery *maskedQuery, NSString *maskedField);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansFieldMaskingSpanQuery)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansFieldMaskingSpanQuery")
