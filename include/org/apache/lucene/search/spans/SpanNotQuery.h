//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanNotQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNotQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchSpansSpanNotQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNotQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNotQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchSpansSpanNotQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchSpansSpanNotQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNotQuery || defined(INCLUDE_OrgApacheLuceneSearchSpansSpanNotQuery))
#define OrgApacheLuceneSearchSpansSpanNotQuery_

#define RESTRICT_OrgApacheLuceneSearchSpansSpanQuery 1
#define INCLUDE_OrgApacheLuceneSearchSpansSpanQuery 1
#include "org/apache/lucene/search/spans/SpanQuery.h"

@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchQuery;
@class OrgApacheLuceneSearchSpansSpanWeight;

/*!
 @brief Removes matches which overlap with another SpanQuery or which are
  within x tokens before or y tokens after another SpanQuery.
 */
@interface OrgApacheLuceneSearchSpansSpanNotQuery : OrgApacheLuceneSearchSpansSpanQuery < NSCopying >

#pragma mark Public

/*!
 @brief Construct a SpanNotQuery matching spans from <code>include</code> which
  have no overlap with spans from <code>exclude</code>.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)include
                              withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)exclude;

/*!
 @brief Construct a SpanNotQuery matching spans from <code>include</code> which
  have no overlap with spans from <code>exclude</code> within 
 <code>dist</code> tokens of <code>include</code>.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)include
                              withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)exclude
                                                              withInt:(jint)dist;

/*!
 @brief Construct a SpanNotQuery matching spans from <code>include</code> which
  have no overlap with spans from <code>exclude</code> within 
 <code>pre</code> tokens before or <code>post</code> tokens of <code>include</code>.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)include
                              withOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)exclude
                                                              withInt:(jint)pre
                                                              withInt:(jint)post;

- (OrgApacheLuceneSearchSpansSpanNotQuery *)java_clone;

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores;

/*!
 @brief Returns true iff <code>o</code> is equal to this.
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Return the SpanQuery whose matches must not overlap those returned.
 */
- (OrgApacheLuceneSearchSpansSpanQuery *)getExclude;

- (NSString *)getField;

/*!
 @brief Return the SpanQuery whose matches are filtered.
 */
- (OrgApacheLuceneSearchSpansSpanQuery *)getInclude;

- (NSUInteger)hash;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

- (NSString *)toStringWithNSString:(NSString *)field;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNotQuery)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanNotQuery *self, OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNotQuery *new_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNotQuery *create_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude);

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_(OrgApacheLuceneSearchSpansSpanNotQuery *self, OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint dist);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNotQuery *new_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint dist) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNotQuery *create_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint dist);

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(OrgApacheLuceneSearchSpansSpanNotQuery *self, OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint pre, jint post);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNotQuery *new_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint pre, jint post) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNotQuery *create_OrgApacheLuceneSearchSpansSpanNotQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withOrgApacheLuceneSearchSpansSpanQuery_withInt_withInt_(OrgApacheLuceneSearchSpansSpanQuery *include, OrgApacheLuceneSearchSpansSpanQuery *exclude, jint pre, jint post);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNotQuery)

#endif

#if !defined (OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNotQuery || defined(INCLUDE_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight))
#define OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_

#define RESTRICT_OrgApacheLuceneSearchSpansSpanWeight 1
#define INCLUDE_OrgApacheLuceneSearchSpansSpanWeight 1
#include "org/apache/lucene/search/spans/SpanWeight.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchSpansSpanNotQuery;
@class OrgApacheLuceneSearchSpansSpanQuery;
@class OrgApacheLuceneSearchSpansSpanWeight_Postings;
@class OrgApacheLuceneSearchSpansSpans;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight : OrgApacheLuceneSearchSpansSpanWeight {
 @public
  OrgApacheLuceneSearchSpansSpanWeight *includeWeight_;
  OrgApacheLuceneSearchSpansSpanWeight *excludeWeight_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanNotQuery:(OrgApacheLuceneSearchSpansSpanNotQuery *)outer$
                                  withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                         withJavaUtilMap:(id<JavaUtilMap>)terms
                                withOrgApacheLuceneSearchSpansSpanWeight:(OrgApacheLuceneSearchSpansSpanWeight *)includeWeight
                                withOrgApacheLuceneSearchSpansSpanWeight:(OrgApacheLuceneSearchSpansSpanWeight *)excludeWeight;

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                     withOrgApacheLuceneSearchSpansSpanWeight_Postings:(OrgApacheLuceneSearchSpansSpanWeight_Postings *)requiredPostings;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)arg0
                               withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)arg1
                                                      withJavaUtilMap:(id<JavaUtilMap>)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight, includeWeight_, OrgApacheLuceneSearchSpansSpanWeight *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight, excludeWeight_, OrgApacheLuceneSearchSpansSpanWeight *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *self, OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, OrgApacheLuceneSearchSpansSpanWeight *includeWeight, OrgApacheLuceneSearchSpansSpanWeight *excludeWeight);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *new_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, OrgApacheLuceneSearchSpansSpanWeight *includeWeight, OrgApacheLuceneSearchSpansSpanWeight *excludeWeight) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight *create_OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight_initWithOrgApacheLuceneSearchSpansSpanNotQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchSpansSpanNotQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms, OrgApacheLuceneSearchSpansSpanWeight *includeWeight, OrgApacheLuceneSearchSpansSpanWeight *excludeWeight);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNotQuery_SpanNotWeight)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNotQuery")
