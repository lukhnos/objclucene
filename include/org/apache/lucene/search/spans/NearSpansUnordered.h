//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansNearSpansUnordered")
#ifdef RESTRICT_OrgApacheLuceneSearchSpansNearSpansUnordered
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansNearSpansUnordered 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansNearSpansUnordered 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchSpansNearSpansUnordered

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchSpansNearSpansUnordered_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansNearSpansUnordered || defined(INCLUDE_OrgApacheLuceneSearchSpansNearSpansUnordered))
#define OrgApacheLuceneSearchSpansNearSpansUnordered_

#define RESTRICT_OrgApacheLuceneSearchSpansNearSpans 1
#define INCLUDE_OrgApacheLuceneSearchSpansNearSpans 1
#include "org/apache/lucene/search/spans/NearSpans.h"

@class OrgApacheLuceneSearchSpansSpanNearQuery;
@class OrgApacheLuceneSearchSpansSpans;
@protocol JavaUtilList;
@protocol OrgApacheLuceneSearchSpansSpanCollector;

/*!
 @brief Similar to <code>NearSpansOrdered</code>, but for the unordered case.
 Expert:
  Only public for subclassing.  Most implementations should not need this class
 */
@interface OrgApacheLuceneSearchSpansNearSpansUnordered : OrgApacheLuceneSearchSpansNearSpans

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanNearQuery:(OrgApacheLuceneSearchSpansSpanNearQuery *)query
                                                         withJavaUtilList:(id<JavaUtilList>)subSpans;

- (void)collectWithOrgApacheLuceneSearchSpansSpanCollector:(id<OrgApacheLuceneSearchSpansSpanCollector>)collector;

- (jint)endPosition;

- (jint)nextStartPosition;

- (jint)startPosition;

- (NSString *)description;

- (jint)width;

#pragma mark Package-Private

/*!
 @brief Check whether two Spans in the same document are ordered with possible overlap.
 @return true iff spans1 starts before spans2
               or the spans start at the same position,
               and spans1 ends before spans2.
 */
+ (jboolean)positionsOrderedWithOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans1
                            withOrgApacheLuceneSearchSpansSpans:(OrgApacheLuceneSearchSpansSpans *)spans2;

- (jboolean)twoPhaseCurrentDocMatches;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initPackagePrivateWithOrgApacheLuceneSearchSpansSpanNearQuery:(OrgApacheLuceneSearchSpansSpanNearQuery *)arg0
                                                                       withJavaUtilList:(id<JavaUtilList>)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansNearSpansUnordered)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(OrgApacheLuceneSearchSpansNearSpansUnordered *self, OrgApacheLuceneSearchSpansSpanNearQuery *query, id<JavaUtilList> subSpans);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansNearSpansUnordered *new_OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(OrgApacheLuceneSearchSpansSpanNearQuery *query, id<JavaUtilList> subSpans) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansNearSpansUnordered *create_OrgApacheLuceneSearchSpansNearSpansUnordered_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_(OrgApacheLuceneSearchSpansSpanNearQuery *query, id<JavaUtilList> subSpans);

FOUNDATION_EXPORT jboolean OrgApacheLuceneSearchSpansNearSpansUnordered_positionsOrderedWithOrgApacheLuceneSearchSpansSpans_withOrgApacheLuceneSearchSpansSpans_(OrgApacheLuceneSearchSpansSpans *spans1, OrgApacheLuceneSearchSpansSpans *spans2);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansNearSpansUnordered)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansNearSpansUnordered")
