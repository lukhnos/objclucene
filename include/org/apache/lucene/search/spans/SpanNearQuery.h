//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNearQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchSpansSpanNearQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNearQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNearQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchSpansSpanNearQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchSpansSpanNearQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNearQuery || defined(INCLUDE_OrgApacheLuceneSearchSpansSpanNearQuery))
#define OrgApacheLuceneSearchSpansSpanNearQuery_

#define RESTRICT_OrgApacheLuceneSearchSpansSpanQuery 1
#define INCLUDE_OrgApacheLuceneSearchSpansSpanQuery 1
#include "org/apache/lucene/search/spans/SpanQuery.h"

@class IOSObjectArray;
@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchQuery;
@class OrgApacheLuceneSearchSpansSpanNearQuery_Builder;
@class OrgApacheLuceneSearchSpansSpanWeight;
@protocol JavaUtilList;

/*!
 @brief Matches spans which are near one another.One can specify <i>slop</i>, the
  maximum number of intervening unmatched positions, as well as whether
  matches are required to be in-order.
 */
@interface OrgApacheLuceneSearchSpansSpanNearQuery : OrgApacheLuceneSearchSpansSpanQuery < NSCopying > {
 @public
  id<JavaUtilList> clauses_;
  jint slop_;
  jboolean inOrder_;
  NSString *field_;
}

#pragma mark Public

/*!
 @brief Construct a SpanNearQuery.Matches spans matching a span from each
  clause, with up to <code>slop</code> total unmatched positions between
  them.
 <br>When <code>inOrder</code> is true, the spans from each clause
  must be in the same order as in <code>clauses</code> and must be non-overlapping. 
 <br>When <code>inOrder</code> is false, the spans from each clause
  need not be ordered and may overlap.
 @param clauses the clauses to find near each other, in the same field, at least 2.
 @param slop The slop value
 @param inOrder true if order is important
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQueryArray:(IOSObjectArray *)clauses
                                                                   withInt:(jint)slop
                                                               withBoolean:(jboolean)inOrder;

/*!
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQueryArray:(IOSObjectArray *)clausesIn
                                                                   withInt:(jint)slop
                                                               withBoolean:(jboolean)inOrder
                                                               withBoolean:(jboolean)collectPayloads;

- (OrgApacheLuceneSearchSpansSpanNearQuery *)java_clone;

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores;

/*!
 @brief Returns true iff <code>o</code> is equal to this.
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Return the clauses whose spans are matched.
 */
- (IOSObjectArray *)getClauses;

- (NSString *)getField;

/*!
 @brief Return the maximum number of intervening unmatched positions permitted.
 */
- (jint)getSlop;

- (NSUInteger)hash;

/*!
 @brief Return true if matches are required to be in-order.
 */
- (jboolean)isInOrder;

/*!
 @brief Returns a <code>Builder</code> for an ordered query on a particular field
 */
+ (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)newOrderedNearQueryWithNSString:(NSString *)field OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a <code>Builder</code> for an unordered query on a particular field
 */
+ (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)newUnorderedNearQueryWithNSString:(NSString *)field OBJC_METHOD_FAMILY_NONE;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

- (NSString *)toStringWithNSString:(NSString *)field;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNearQuery, clauses_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNearQuery, field_, NSString *)

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_Builder *OrgApacheLuceneSearchSpansSpanNearQuery_newOrderedNearQueryWithNSString_(NSString *field);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_Builder *OrgApacheLuceneSearchSpansSpanNearQuery_newUnorderedNearQueryWithNSString_(NSString *field);

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(OrgApacheLuceneSearchSpansSpanNearQuery *self, IOSObjectArray *clauses, jint slop, jboolean inOrder);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery *new_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(IOSObjectArray *clauses, jint slop, jboolean inOrder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery *create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_(IOSObjectArray *clauses, jint slop, jboolean inOrder);

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(OrgApacheLuceneSearchSpansSpanNearQuery *self, IOSObjectArray *clausesIn, jint slop, jboolean inOrder, jboolean collectPayloads);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery *new_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(IOSObjectArray *clausesIn, jint slop, jboolean inOrder, jboolean collectPayloads) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery *create_OrgApacheLuceneSearchSpansSpanNearQuery_initWithOrgApacheLuceneSearchSpansSpanQueryArray_withInt_withBoolean_withBoolean_(IOSObjectArray *clausesIn, jint slop, jboolean inOrder, jboolean collectPayloads);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery)

#endif

#if !defined (OrgApacheLuceneSearchSpansSpanNearQuery_Builder_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNearQuery || defined(INCLUDE_OrgApacheLuceneSearchSpansSpanNearQuery_Builder))
#define OrgApacheLuceneSearchSpansSpanNearQuery_Builder_

@class OrgApacheLuceneSearchSpansSpanNearQuery;
@class OrgApacheLuceneSearchSpansSpanQuery;

/*!
 @brief A builder for SpanNearQueries
 */
@interface OrgApacheLuceneSearchSpansSpanNearQuery_Builder : NSObject

#pragma mark Public

/*!
 @brief Construct a new builder
 @param field the field to search in
 @param ordered whether or not clauses must be in-order to match
 */
- (instancetype __nonnull)initWithNSString:(NSString *)field
                               withBoolean:(jboolean)ordered;

/*!
 @brief Add a new clause
 */
- (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)addClauseWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)clause;

/*!
 @brief Add a gap after the previous clause of a defined width
 */
- (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)addGapWithInt:(jint)width;

/*!
 @brief Build the query
 */
- (OrgApacheLuceneSearchSpansSpanNearQuery *)build;

/*!
 @brief Set the slop for this query
 */
- (OrgApacheLuceneSearchSpansSpanNearQuery_Builder *)setSlopWithInt:(jint)slop;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery_Builder)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_Builder_initWithNSString_withBoolean_(OrgApacheLuceneSearchSpansSpanNearQuery_Builder *self, NSString *field, jboolean ordered);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_Builder *new_OrgApacheLuceneSearchSpansSpanNearQuery_Builder_initWithNSString_withBoolean_(NSString *field, jboolean ordered) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_Builder *create_OrgApacheLuceneSearchSpansSpanNearQuery_Builder_initWithNSString_withBoolean_(NSString *field, jboolean ordered);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery_Builder)

#endif

#if !defined (OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNearQuery || defined(INCLUDE_OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight))
#define OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_

#define RESTRICT_OrgApacheLuceneSearchSpansSpanWeight 1
#define INCLUDE_OrgApacheLuceneSearchSpansSpanWeight 1
#include "org/apache/lucene/search/spans/SpanWeight.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchSpansSpanNearQuery;
@class OrgApacheLuceneSearchSpansSpanQuery;
@class OrgApacheLuceneSearchSpansSpanWeight_Postings;
@class OrgApacheLuceneSearchSpansSpans;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight : OrgApacheLuceneSearchSpansSpanWeight {
 @public
  id<JavaUtilList> subWeights_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanNearQuery:(OrgApacheLuceneSearchSpansSpanNearQuery *)outer$
                                                         withJavaUtilList:(id<JavaUtilList>)subWeights
                                   withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                          withJavaUtilMap:(id<JavaUtilMap>)terms;

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                     withOrgApacheLuceneSearchSpansSpanWeight_Postings:(OrgApacheLuceneSearchSpansSpanWeight_Postings *)requiredPostings;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)arg0
                               withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)arg1
                                                      withJavaUtilMap:(id<JavaUtilMap>)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight, subWeights_, id<JavaUtilList>)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight *self, OrgApacheLuceneSearchSpansSpanNearQuery *outer$, id<JavaUtilList> subWeights, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight *new_OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanNearQuery *outer$, id<JavaUtilList> subWeights, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight *create_OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight_initWithOrgApacheLuceneSearchSpansSpanNearQuery_withJavaUtilList_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchSpansSpanNearQuery *outer$, id<JavaUtilList> subWeights, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> terms);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery_SpanNearWeight)

#endif

#if !defined (OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNearQuery || defined(INCLUDE_OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans))
#define OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_

#define RESTRICT_OrgApacheLuceneSearchSpansSpans 1
#define INCLUDE_OrgApacheLuceneSearchSpansSpans 1
#include "org/apache/lucene/search/spans/Spans.h"

@protocol OrgApacheLuceneSearchSpansSpanCollector;

@interface OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans : OrgApacheLuceneSearchSpansSpans {
 @public
  jint doc_;
  jint pos_;
  jint width_;
}

#pragma mark Public

- (jint)advanceWithInt:(jint)target;

- (void)collectWithOrgApacheLuceneSearchSpansSpanCollector:(id<OrgApacheLuceneSearchSpansSpanCollector>)collector;

- (jlong)cost;

- (jint)docID;

- (jint)endPosition;

- (jint)nextDoc;

- (jint)nextStartPosition;

- (jint)skipToPositionWithInt:(jint)position;

- (jint)startPosition;

- (jint)width;

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)width;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_initWithInt_(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans *self, jint width);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans *new_OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_initWithInt_(jint width) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans *create_OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans_initWithInt_(jint width);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanNearQuery_GapSpans)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanNearQuery")
