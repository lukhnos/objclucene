//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper")
#ifdef RESTRICT_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper
#ifdef INCLUDE_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite
#define INCLUDE_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper || defined(INCLUDE_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper))
#define OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_

#define RESTRICT_OrgApacheLuceneSearchSpansSpanQuery 1
#define INCLUDE_OrgApacheLuceneSearchSpansSpanQuery 1
#include "org/apache/lucene/search/spans/SpanQuery.h"

@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchMultiTermQuery;
@class OrgApacheLuceneSearchQuery;
@class OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod;
@class OrgApacheLuceneSearchSpansSpanWeight;

/*!
 @brief Wraps any <code>MultiTermQuery</code> as a <code>SpanQuery</code>, 
  so it can be nested within other SpanQuery classes.
 <p>
  The query is rewritten by default to a <code>SpanOrQuery</code> containing
  the expanded terms, but this can be customized.  
 <p>
  Example: 
 <blockquote><pre class="prettyprint">
  <code>WildcardQuery wildcard = new WildcardQuery(new Term("field", "bro?n"));
  SpanQuery spanWildcard = new SpanMultiTermQueryWrapper<WildcardQuery>(wildcard);
  // do something with spanWildcard, such as use it in a SpanFirstQuery</code>
  
@endcode</blockquote>
 */
@interface OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper : OrgApacheLuceneSearchSpansSpanQuery {
 @public
  OrgApacheLuceneSearchMultiTermQuery *query_;
}
@property (readonly, class, strong) OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *SCORING_SPAN_QUERY_REWRITE NS_SWIFT_NAME(SCORING_SPAN_QUERY_REWRITE);

#pragma mark Public

/*!
 @brief Create a new SpanMultiTermQueryWrapper.
 @param query Query to wrap.  
  <p>  NOTE: This will call 
 <code>MultiTermQuery.setRewriteMethod(MultiTermQuery.RewriteMethod)</code>  on the wrapped 
  <code> query </code> , changing its rewrite method to a suitable one for spans.  Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will
   throw <code>UnsupportedOperationException</code>
   on rewriting this query!
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query;

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores;

- (jboolean)isEqual:(id)obj;

- (NSString *)getField;

/*!
 @brief Expert: returns the rewriteMethod
 */
- (OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *)getRewriteMethod;

/*!
 @brief Returns the wrapped query
 */
- (OrgApacheLuceneSearchQuery *)getWrappedQuery;

- (NSUInteger)hash;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

/*!
 @brief Expert: sets the rewrite method.This only makes sense
  to be a span rewrite method.
 */
- (void)setRewriteMethodWithOrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod:(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *)rewriteMethod;

- (NSString *)toStringWithNSString:(NSString *)field;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper, query_, OrgApacheLuceneSearchMultiTermQuery *)

/*!
 @brief A rewrite method that first translates each term into a SpanTermQuery in a 
 <code>Occur.SHOULD</code> clause in a BooleanQuery, and keeps the
  scores as computed by the query.
 - seealso: #setRewriteMethod
 */
inline OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_get_SCORING_SPAN_QUERY_REWRITE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SCORING_SPAN_QUERY_REWRITE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper, SCORING_SPAN_QUERY_REWRITE, OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *self, OrgApacheLuceneSearchMultiTermQuery *query);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQuery *query) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper *create_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_initWithOrgApacheLuceneSearchMultiTermQuery_(OrgApacheLuceneSearchMultiTermQuery *query);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper)

#endif

#if !defined (OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper || defined(INCLUDE_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod))
#define OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_

#define RESTRICT_OrgApacheLuceneSearchMultiTermQuery 1
#define INCLUDE_OrgApacheLuceneSearchMultiTermQuery_RewriteMethod 1
#include "org/apache/lucene/search/MultiTermQuery.h"

@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneSearchMultiTermQuery;
@class OrgApacheLuceneSearchSpansSpanQuery;

/*!
 @brief Abstract class that defines how the query is rewritten.
 */
@interface OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod : OrgApacheLuceneSearchMultiTermQuery_RewriteMethod

#pragma mark Public

- (instancetype __nonnull)init;

- (OrgApacheLuceneSearchSpansSpanQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                            withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod_init(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod)

#endif

#if !defined (OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_) && (INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper || defined(INCLUDE_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite))
#define OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_

@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneSearchMultiTermQuery;
@class OrgApacheLuceneSearchSpansSpanQuery;

/*!
 @brief A rewrite method that first translates each term into a SpanTermQuery in a 
 <code>Occur.SHOULD</code> clause in a BooleanQuery, and keeps the
  scores as computed by the query.
 <p>
  This rewrite method only uses the top scoring terms so it will not overflow
  the boolean max clause count.
 - seealso: #setRewriteMethod
 */
@interface OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite : OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_SpanRewriteMethod

#pragma mark Public

/*!
 @brief Create a TopTermsSpanBooleanQueryRewrite for 
  at most <code>size</code> terms.
 */
- (instancetype __nonnull)initWithInt:(jint)size;

- (jboolean)isEqual:(id)obj;

/*!
 @brief return the maximum priority queue size
 */
- (jint)getSize;

- (NSUInteger)hash;

- (OrgApacheLuceneSearchSpansSpanQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                            withOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)query;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite)

FOUNDATION_EXPORT void OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_initWithInt_(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite *self, jint size);

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite *new_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_initWithInt_(jint size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite *create_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite_initWithInt_(jint size);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper_TopTermsSpanBooleanQueryRewrite)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchSpansSpanMultiTermQueryWrapper")
