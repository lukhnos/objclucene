//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/QueryWrapperFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchQueryWrapperFilter")
#ifdef RESTRICT_OrgApacheLuceneSearchQueryWrapperFilter
#define INCLUDE_ALL_OrgApacheLuceneSearchQueryWrapperFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchQueryWrapperFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchQueryWrapperFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchQueryWrapperFilter_) && (INCLUDE_ALL_OrgApacheLuceneSearchQueryWrapperFilter || defined(INCLUDE_OrgApacheLuceneSearchQueryWrapperFilter))
#define OrgApacheLuceneSearchQueryWrapperFilter_

#define RESTRICT_OrgApacheLuceneSearchFilter 1
#define INCLUDE_OrgApacheLuceneSearchFilter 1
#include "org/apache/lucene/search/Filter.h"

@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchDocIdSet;
@class OrgApacheLuceneSearchQuery;
@protocol OrgApacheLuceneUtilBits;

/*!
 @brief Constrains search results to only match those which also match a provided
  query.
 <p> This could be used, for example, with a <code>NumericRangeQuery</code> on a suitably
  formatted date field to implement date filtering.  One could re-use a single
  CachingWrapperFilter(QueryWrapperFilter) that matches, e.g., only documents modified 
  within the last week.  This would only need to be reconstructed once per day.
 */
@interface OrgApacheLuceneSearchQueryWrapperFilter : OrgApacheLuceneSearchFilter

#pragma mark Public

/*!
 @brief Constructs a filter which only matches documents matching 
 <code>query</code>.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (jboolean)isEqual:(id)o;

- (OrgApacheLuceneSearchDocIdSet *)getDocIdSetWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                            withOrgApacheLuceneUtilBits:(id<OrgApacheLuceneUtilBits>)acceptDocs;

/*!
 @brief returns the inner Query
 */
- (OrgApacheLuceneSearchQuery *)getQuery;

- (NSUInteger)hash;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

- (NSString *)toStringWithNSString:(NSString *)field;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchQueryWrapperFilter)

FOUNDATION_EXPORT void OrgApacheLuceneSearchQueryWrapperFilter_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQueryWrapperFilter *self, OrgApacheLuceneSearchQuery *query);

FOUNDATION_EXPORT OrgApacheLuceneSearchQueryWrapperFilter *new_OrgApacheLuceneSearchQueryWrapperFilter_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchQueryWrapperFilter *create_OrgApacheLuceneSearchQueryWrapperFilter_initWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchQueryWrapperFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchQueryWrapperFilter")
