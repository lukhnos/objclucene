//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy")
#ifdef RESTRICT_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy
#define INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_) && (INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy || defined(INCLUDE_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy))
#define OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_

#define RESTRICT_OrgApacheLuceneSearchQueryCachingPolicy 1
#define INCLUDE_OrgApacheLuceneSearchQueryCachingPolicy 1
#include "org/apache/lucene/search/QueryCachingPolicy.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchQuery;

/*!
 @brief A <code>QueryCachingPolicy</code> that tracks usage statistics of recently-used
  filters in order to decide on which filters are worth caching.
 It also uses some heuristics on segments, filters and the doc id sets that
  they produce in order to cache more aggressively when the execution cost
  significantly outweighs the caching overhead.
 */
@interface OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy : NSObject < OrgApacheLuceneSearchQueryCachingPolicy >

#pragma mark Public

/*!
 @brief Create a new instance with an history size of 256.
 */
- (instancetype __nonnull)init;

/*!
 @brief Create a new instance.
 @param minIndexSize the minimum size of the top-level index
 @param minSizeRatio the minimum size ratio for segments to be cached, see <code>QueryCachingPolicy.CacheOnLargeSegments</code>
 @param historySize the number of recently used filters to track
 */
- (instancetype __nonnull)initWithInt:(jint)minIndexSize
                            withFloat:(jfloat)minSizeRatio
                              withInt:(jint)historySize;

- (void)onUseWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

- (jboolean)shouldCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
            withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

#pragma mark Protected

/*!
 @brief For a given query, return how many times it should appear in the history
  before being cached.
 */
- (jint)minFrequencyToCacheWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

#pragma mark Package-Private

- (jint)frequencyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

+ (jboolean)isCheapWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

+ (jboolean)isCostlyWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy)

FOUNDATION_EXPORT jboolean OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCostlyWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query);

FOUNDATION_EXPORT jboolean OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_isCheapWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query);

FOUNDATION_EXPORT void OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithInt_withFloat_withInt_(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *self, jint minIndexSize, jfloat minSizeRatio, jint historySize);

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithInt_withFloat_withInt_(jint minIndexSize, jfloat minSizeRatio, jint historySize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_initWithInt_withFloat_withInt_(jint minIndexSize, jfloat minSizeRatio, jint historySize);

FOUNDATION_EXPORT void OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_init(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *new_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy *create_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchUsageTrackingQueryCachingPolicy")
