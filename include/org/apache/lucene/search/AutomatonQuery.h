//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/AutomatonQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchAutomatonQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchAutomatonQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchAutomatonQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchAutomatonQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchAutomatonQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchAutomatonQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchAutomatonQuery || defined(INCLUDE_OrgApacheLuceneSearchAutomatonQuery))
#define OrgApacheLuceneSearchAutomatonQuery_

#define RESTRICT_OrgApacheLuceneSearchMultiTermQuery 1
#define INCLUDE_OrgApacheLuceneSearchMultiTermQuery 1
#include "org/apache/lucene/search/MultiTermQuery.h"

@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneIndexTerms;
@class OrgApacheLuceneIndexTermsEnum;
@class OrgApacheLuceneUtilAttributeSource;
@class OrgApacheLuceneUtilAutomatonAutomaton;
@class OrgApacheLuceneUtilAutomatonCompiledAutomaton;

/*!
 @brief A <code>Query</code> that will match terms against a finite-state machine.
 <p>
  This query will match documents that contain terms accepted by a given
  finite-state machine. The automaton can be constructed with the 
 <code>org.apache.lucene.util.automaton</code> API. Alternatively, it can be
  created from a regular expression with <code>RegexpQuery</code> or from
  the standard Lucene wildcard syntax with <code>WildcardQuery</code>.
  </p>
  <p>
  When the query is executed, it will create an equivalent DFA of the
  finite-state machine, and will enumerate the term dictionary in an
  intelligent way to reduce the number of comparisons. For example: the regular
  expression of <code>[dl]og?</code> will make approximately four comparisons:
  do, dog, lo, and log. 
 </p>
 */
@interface OrgApacheLuceneSearchAutomatonQuery : OrgApacheLuceneSearchMultiTermQuery {
 @public
  /*!
   @brief the automaton to match index terms against
   */
  OrgApacheLuceneUtilAutomatonAutomaton *automaton_;
  OrgApacheLuceneUtilAutomatonCompiledAutomaton *compiled_;
  /*!
   @brief term containing the field, and possibly some pattern structure
   */
  OrgApacheLuceneIndexTerm *term_;
}

#pragma mark Public

/*!
 @brief Create a new AutomatonQuery from an <code>Automaton</code>.
 @param term Term containing field and possibly some pattern structure. The         term text is ignored.
 @param automaton Automaton to run, terms that are accepted are considered a         match.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                 withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton;

/*!
 @brief Create a new AutomatonQuery from an <code>Automaton</code>.
 @param term Term containing field and possibly some pattern structure. The         term text is ignored.
 @param automaton Automaton to run, terms that are accepted are considered a         match.
 @param maxDeterminizedStates maximum number of states in the resulting    automata.  If the automata would need more than this many states
     TooComplextToDeterminizeException is thrown.  Higher number require more
     space but can process more complex automata.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                 withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                                   withInt:(jint)maxDeterminizedStates;

/*!
 @brief Create a new AutomatonQuery from an <code>Automaton</code>.
 @param term Term containing field and possibly some pattern structure. The         term text is ignored.
 @param automaton Automaton to run, terms that are accepted are considered a         match.
 @param maxDeterminizedStates maximum number of states in the resulting    automata.  If the automata would need more than this many states
     TooComplextToDeterminizeException is thrown.  Higher number require more
     space but can process more complex automata.
 @param isBinary if true, this automaton is already binary and    will not go through the UTF32ToUTF8 conversion
 */
- (instancetype __nonnull)initWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                 withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                                   withInt:(jint)maxDeterminizedStates
                                               withBoolean:(jboolean)isBinary;

- (jboolean)isEqual:(id)obj;

/*!
 @brief Returns the automaton used to create this query
 */
- (OrgApacheLuceneUtilAutomatonAutomaton *)getAutomaton;

- (NSUInteger)hash;

- (NSString *)toStringWithNSString:(NSString *)field;

#pragma mark Protected

- (OrgApacheLuceneIndexTermsEnum *)getTermsEnumWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)terms
                                      withOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)atts;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchAutomatonQuery)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchAutomatonQuery, automaton_, OrgApacheLuceneUtilAutomatonAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchAutomatonQuery, compiled_, OrgApacheLuceneUtilAutomatonCompiledAutomaton *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchAutomatonQuery, term_, OrgApacheLuceneIndexTerm *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneSearchAutomatonQuery *self, OrgApacheLuceneIndexTerm *term, OrgApacheLuceneUtilAutomatonAutomaton *automaton);

FOUNDATION_EXPORT OrgApacheLuceneSearchAutomatonQuery *new_OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneIndexTerm *term, OrgApacheLuceneUtilAutomatonAutomaton *automaton) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchAutomatonQuery *create_OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_(OrgApacheLuceneIndexTerm *term, OrgApacheLuceneUtilAutomatonAutomaton *automaton);

FOUNDATION_EXPORT void OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneSearchAutomatonQuery *self, OrgApacheLuceneIndexTerm *term, OrgApacheLuceneUtilAutomatonAutomaton *automaton, jint maxDeterminizedStates);

FOUNDATION_EXPORT OrgApacheLuceneSearchAutomatonQuery *new_OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneIndexTerm *term, OrgApacheLuceneUtilAutomatonAutomaton *automaton, jint maxDeterminizedStates) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchAutomatonQuery *create_OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_(OrgApacheLuceneIndexTerm *term, OrgApacheLuceneUtilAutomatonAutomaton *automaton, jint maxDeterminizedStates);

FOUNDATION_EXPORT void OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_(OrgApacheLuceneSearchAutomatonQuery *self, OrgApacheLuceneIndexTerm *term, OrgApacheLuceneUtilAutomatonAutomaton *automaton, jint maxDeterminizedStates, jboolean isBinary);

FOUNDATION_EXPORT OrgApacheLuceneSearchAutomatonQuery *new_OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_(OrgApacheLuceneIndexTerm *term, OrgApacheLuceneUtilAutomatonAutomaton *automaton, jint maxDeterminizedStates, jboolean isBinary) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchAutomatonQuery *create_OrgApacheLuceneSearchAutomatonQuery_initWithOrgApacheLuceneIndexTerm_withOrgApacheLuceneUtilAutomatonAutomaton_withInt_withBoolean_(OrgApacheLuceneIndexTerm *term, OrgApacheLuceneUtilAutomatonAutomaton *automaton, jint maxDeterminizedStates, jboolean isBinary);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchAutomatonQuery)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchAutomatonQuery")
