//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/TopDocsCollector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchTopDocsCollector")
#ifdef RESTRICT_OrgApacheLuceneSearchTopDocsCollector
#define INCLUDE_ALL_OrgApacheLuceneSearchTopDocsCollector 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchTopDocsCollector 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchTopDocsCollector

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchTopDocsCollector_) && (INCLUDE_ALL_OrgApacheLuceneSearchTopDocsCollector || defined(INCLUDE_OrgApacheLuceneSearchTopDocsCollector))
#define OrgApacheLuceneSearchTopDocsCollector_

#define RESTRICT_OrgApacheLuceneSearchCollector 1
#define INCLUDE_OrgApacheLuceneSearchCollector 1
#include "org/apache/lucene/search/Collector.h"

@class IOSObjectArray;
@class OrgApacheLuceneSearchTopDocs;
@class OrgApacheLuceneUtilPriorityQueue;

/*!
 @brief A base class for all collectors that return a <code>TopDocs</code> output.This
  collector allows easy extension by providing a single constructor which
  accepts a <code>PriorityQueue</code> as well as protected members for that
  priority queue and a counter of the number of total hits.
 <br>
  Extending classes can override any of the methods to provide their own
  implementation, as well as avoid the use of the priority queue entirely by
  passing null to <code>TopDocsCollector(PriorityQueue)</code>. In that case
  however, you might want to consider overriding all methods, in order to avoid
  a NullPointerException.
 */
@interface OrgApacheLuceneSearchTopDocsCollector : NSObject < OrgApacheLuceneSearchCollector > {
 @public
  /*!
   @brief The priority queue which holds the top documents.Note that different
  implementations of PriorityQueue give different meaning to 'top documents'.
   HitQueue for example aggregates the top scoring documents, while other PQ
  implementations may hold documents sorted by other criteria.
   */
  OrgApacheLuceneUtilPriorityQueue *pq_;
  /*!
   @brief The total number of documents that the collector encountered.
   */
  jint totalHits_;
}
@property (readonly, class, strong) OrgApacheLuceneSearchTopDocs *EMPTY_TOPDOCS NS_SWIFT_NAME(EMPTY_TOPDOCS);

#pragma mark Public

/*!
 @brief The total number of documents that matched this query.
 */
- (jint)getTotalHits;

/*!
 @brief Returns the top docs that were collected by this collector.
 */
- (OrgApacheLuceneSearchTopDocs *)topDocs;

/*!
 @brief Returns the documents in the range [start ..pq.size()) that were collected
  by this collector.
 Note that if <code>start >= pq.size()</code>, an empty TopDocs is
  returned.<br>
  This method is convenient to call if the application always asks for the
  last results, starting from the last 'page'.<br>
  <b>NOTE:</b> you cannot call this method more than once for each search
  execution. If you need to call it more than once, passing each time a
  different <code>start</code>, you should call <code>topDocs()</code> and work
  with the returned <code>TopDocs</code> object, which will contain all the
  results this search execution collected.
 */
- (OrgApacheLuceneSearchTopDocs *)topDocsWithInt:(jint)start;

/*!
 @brief Returns the documents in the range [start ..start+howMany) that were
  collected by this collector.
 Note that if <code>start >= pq.size()</code>, an empty
  TopDocs is returned, and if pq.size() - start &lt; howMany, then only the
  available documents in [start .. pq.size()) are returned.<br>
  This method is useful to call in case pagination of search results is
  allowed by the search application, as well as it attempts to optimize the
  memory used by allocating only as much as requested by howMany.<br>
  <b>NOTE:</b> you cannot call this method more than once for each search
  execution. If you need to call it more than once, passing each time a
  different range, you should call <code>topDocs()</code> and work with the
  returned <code>TopDocs</code> object, which will contain all the results this
  search execution collected.
 */
- (OrgApacheLuceneSearchTopDocs *)topDocsWithInt:(jint)start
                                         withInt:(jint)howMany;

#pragma mark Protected

- (instancetype __nonnull)initWithOrgApacheLuceneUtilPriorityQueue:(OrgApacheLuceneUtilPriorityQueue *)pq;

/*!
 @brief Returns a <code>TopDocs</code> instance containing the given results.If
  <code>results</code> is null it means there are no results to return,
  either because there were 0 calls to collect() or because the arguments to
  topDocs were invalid.
 */
- (OrgApacheLuceneSearchTopDocs *)newTopDocsWithOrgApacheLuceneSearchScoreDocArray:(IOSObjectArray *)results
                                                                           withInt:(jint)start OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Populates the results array with the ScoreDoc instances.This can be
  overridden in case a different ScoreDoc type should be returned.
 */
- (void)populateResultsWithOrgApacheLuceneSearchScoreDocArray:(IOSObjectArray *)results
                                                      withInt:(jint)howMany;

/*!
 @brief The number of valid PQ entries
 */
- (jint)topDocsSize;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneSearchTopDocsCollector)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTopDocsCollector, pq_, OrgApacheLuceneUtilPriorityQueue *)

/*!
 @brief This is used in case topDocs() is called with illegal parameters, or there
   simply aren't (enough) results.
 */
inline OrgApacheLuceneSearchTopDocs *OrgApacheLuceneSearchTopDocsCollector_get_EMPTY_TOPDOCS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneSearchTopDocs *OrgApacheLuceneSearchTopDocsCollector_EMPTY_TOPDOCS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneSearchTopDocsCollector, EMPTY_TOPDOCS, OrgApacheLuceneSearchTopDocs *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchTopDocsCollector_initWithOrgApacheLuceneUtilPriorityQueue_(OrgApacheLuceneSearchTopDocsCollector *self, OrgApacheLuceneUtilPriorityQueue *pq);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchTopDocsCollector)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchTopDocsCollector")
