//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchTermAutomatonQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchTermAutomatonQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchTermAutomatonQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchTermAutomatonQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchTermAutomatonQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchTermAutomatonQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchTermAutomatonQuery || defined(INCLUDE_OrgApacheLuceneSearchTermAutomatonQuery))
#define OrgApacheLuceneSearchTermAutomatonQuery_

#define RESTRICT_OrgApacheLuceneSearchQuery 1
#define INCLUDE_OrgApacheLuceneSearchQuery 1
#include "org/apache/lucene/search/Query.h"

@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchWeight;
@class OrgApacheLuceneUtilAutomatonAutomaton;
@class OrgApacheLuceneUtilBytesRef;

/*!
 @brief A proximity query that lets you express an automaton, whose
   transitions are terms, to match documents.This is a generalization
   of other proximity queries like  <code>PhraseQuery</code>, <code>MultiPhraseQuery</code>
  and <code>SpanNearQuery</code>.
 It is likely
   slow, since it visits any document having any of the terms (i.e. it
   acts like a disjunction, not a conjunction like <code>PhraseQuery</code>
 ), and then it must merge-sort all positions within each
   document to test whether/how many times the automaton matches.  
 <p>After creating the query, use <code>createState</code>, <code>setAccept</code>
 , <code>addTransition</code> and <code>addAnyTransition</code> to
   build up the automaton.  Once you are done, call <code>finish</code> and
   then execute the query.  
 <p>This code is very new and likely has exciting bugs!
 */
@interface OrgApacheLuceneSearchTermAutomatonQuery : OrgApacheLuceneSearchQuery {
 @public
  OrgApacheLuceneUtilAutomatonAutomaton *det_;
}

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)field;

/*!
 @brief Adds a transition matching any term.
 */
- (void)addAnyTransitionWithInt:(jint)source
                        withInt:(jint)dest;

/*!
 @brief Adds a transition to the automaton.
 */
- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)term;

/*!
 @brief Adds a transition to the automaton.
 */
- (void)addTransitionWithInt:(jint)source
                     withInt:(jint)dest
                withNSString:(NSString *)term;

/*!
 @brief Returns a new state; state 0 is always the initial state.
 */
- (jint)createState;

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores;

/*!
 @brief Returns true iff <code>o</code> is equal to this.
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Call this once you are done adding states/transitions.
 */
- (void)finish;

/*!
 @brief Call this once you are done adding states/transitions.
 @param maxDeterminizedStates Maximum number of states created when    determinizing the automaton.  Higher numbers allow this operation to
     consume more memory but allow more complex automatons.
 */
- (void)finishWithInt:(jint)maxDeterminizedStates;

/*!
 @brief Returns a hash code value for this object.This is very costly!
 */
- (NSUInteger)hash;

/*!
 @brief Marks the specified state as accept or not.
 */
- (void)setAcceptWithInt:(jint)state
             withBoolean:(jboolean)accept;

/*!
 @brief Returns the dot (graphviz) representation of this automaton.
 This is extremely useful for visualizing the automaton.
 */
- (NSString *)toDot;

- (NSString *)toStringWithNSString:(NSString *)field;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchTermAutomatonQuery)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery, det_, OrgApacheLuceneUtilAutomatonAutomaton *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchTermAutomatonQuery_initWithNSString_(OrgApacheLuceneSearchTermAutomatonQuery *self, NSString *field);

FOUNDATION_EXPORT OrgApacheLuceneSearchTermAutomatonQuery *new_OrgApacheLuceneSearchTermAutomatonQuery_initWithNSString_(NSString *field) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchTermAutomatonQuery *create_OrgApacheLuceneSearchTermAutomatonQuery_initWithNSString_(NSString *field);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchTermAutomatonQuery)

#endif

#if !defined (OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_) && (INCLUDE_ALL_OrgApacheLuceneSearchTermAutomatonQuery || defined(INCLUDE_OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer))
#define OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_

@class OrgApacheLuceneIndexPostingsEnum;

@interface OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer : NSObject {
 @public
  jint termID_;
  OrgApacheLuceneIndexPostingsEnum *posEnum_;
  jint posLeft_;
  jint pos_;
}

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)termID
 withOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)posEnum;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer, posEnum_, OrgApacheLuceneIndexPostingsEnum *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_initWithInt_withOrgApacheLuceneIndexPostingsEnum_(OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer *self, jint termID, OrgApacheLuceneIndexPostingsEnum *posEnum);

FOUNDATION_EXPORT OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer *new_OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_initWithInt_withOrgApacheLuceneIndexPostingsEnum_(jint termID, OrgApacheLuceneIndexPostingsEnum *posEnum) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer *create_OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer_initWithInt_withOrgApacheLuceneIndexPostingsEnum_(jint termID, OrgApacheLuceneIndexPostingsEnum *posEnum);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchTermAutomatonQuery_EnumAndScorer)

#endif

#if !defined (OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_) && (INCLUDE_ALL_OrgApacheLuceneSearchTermAutomatonQuery || defined(INCLUDE_OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight))
#define OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_

#define RESTRICT_OrgApacheLuceneSearchWeight 1
#define INCLUDE_OrgApacheLuceneSearchWeight 1
#include "org/apache/lucene/search/Weight.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchExplanation;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchQuery;
@class OrgApacheLuceneSearchScorer;
@class OrgApacheLuceneSearchTermAutomatonQuery;
@class OrgApacheLuceneUtilAutomatonAutomaton;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight : OrgApacheLuceneSearchWeight {
 @public
  OrgApacheLuceneUtilAutomatonAutomaton *automaton_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneSearchTermAutomatonQuery:(OrgApacheLuceneSearchTermAutomatonQuery *)outer$
                                withOrgApacheLuceneUtilAutomatonAutomaton:(OrgApacheLuceneUtilAutomatonAutomaton *)automaton
                                   withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                          withJavaUtilMap:(id<JavaUtilMap>)termStates;

- (OrgApacheLuceneSearchExplanation *)explainWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                                                               withInt:(jint)doc;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

- (jfloat)getValueForNormalization;

- (void)normalizeWithFloat:(jfloat)queryNorm
                 withFloat:(jfloat)topLevelBoost;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight, automaton_, OrgApacheLuceneUtilAutomatonAutomaton *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight *self, OrgApacheLuceneSearchTermAutomatonQuery *outer$, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> termStates);

FOUNDATION_EXPORT OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight *new_OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchTermAutomatonQuery *outer$, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> termStates) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight *create_OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight_initWithOrgApacheLuceneSearchTermAutomatonQuery_withOrgApacheLuceneUtilAutomatonAutomaton_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_(OrgApacheLuceneSearchTermAutomatonQuery *outer$, OrgApacheLuceneUtilAutomatonAutomaton *automaton, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> termStates);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchTermAutomatonQuery_TermAutomatonWeight)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchTermAutomatonQuery")
