//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery || defined(INCLUDE_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery))
#define OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_

#define RESTRICT_OrgApacheLuceneSearchSpansSpanQuery 1
#define INCLUDE_OrgApacheLuceneSearchSpansSpanQuery 1
#include "org/apache/lucene/search/spans/SpanQuery.h"

@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchSpansFilterSpans_AcceptStatus;
@class OrgApacheLuceneSearchSpansSpanWeight;
@protocol JavaUtilCollection;

/*!
 @brief Only return those matches that have a specific payload at the given position.
 */
@interface OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery : OrgApacheLuceneSearchSpansSpanQuery {
 @public
  id<JavaUtilCollection> payloadToMatch_;
  OrgApacheLuceneSearchSpansSpanQuery *match_;
}

#pragma mark Public

/*!
 @param match The underlying <code>org.apache.lucene.search.spans.SpanQuery</code>  to check
 @param payloadToMatch The <code>java.util.Collection</code>  of payloads to match
 */
- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)match
                                               withJavaUtilCollection:(id<JavaUtilCollection>)payloadToMatch;

- (OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery *)java_clone;

- (OrgApacheLuceneSearchSpansSpanWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                                 withBoolean:(jboolean)needsScores;

- (jboolean)isEqual:(id)o;

- (NSString *)getField;

- (NSUInteger)hash;

- (NSString *)toStringWithNSString:(NSString *)field;

#pragma mark Protected

/*!
 @brief Check to see if the collected payloads match the required set.
 @param candidate a collection of payloads from the current Spans
 @return whether or not the payloads match
 */
- (OrgApacheLuceneSearchSpansFilterSpans_AcceptStatus *)checkPayloadsWithJavaUtilCollection:(id<JavaUtilCollection>)candidate;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery, payloadToMatch_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery, match_, OrgApacheLuceneSearchSpansSpanQuery *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilCollection_(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery *self, OrgApacheLuceneSearchSpansSpanQuery *match, id<JavaUtilCollection> payloadToMatch);

FOUNDATION_EXPORT OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery *new_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilCollection_(OrgApacheLuceneSearchSpansSpanQuery *match, id<JavaUtilCollection> payloadToMatch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery *create_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_initWithOrgApacheLuceneSearchSpansSpanQuery_withJavaUtilCollection_(OrgApacheLuceneSearchSpansSpanQuery *match, id<JavaUtilCollection> payloadToMatch);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery)

#endif

#if !defined (OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight_) && (INCLUDE_ALL_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery || defined(INCLUDE_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight))
#define OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight_

#define RESTRICT_OrgApacheLuceneSearchSpansSpanWeight 1
#define INCLUDE_OrgApacheLuceneSearchSpansSpanWeight 1
#include "org/apache/lucene/search/spans/SpanWeight.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery;
@class OrgApacheLuceneSearchScorer;
@class OrgApacheLuceneSearchSpansSpanQuery;
@class OrgApacheLuceneSearchSpansSpanWeight_Postings;
@class OrgApacheLuceneSearchSpansSpans;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief Weight that pulls its Spans using a PayloadSpanCollector
 */
@interface OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight : OrgApacheLuceneSearchSpansSpanWeight {
 @public
  OrgApacheLuceneSearchSpansSpanWeight *matchWeight_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery:(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery *)outer$
                                              withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                     withJavaUtilMap:(id<JavaUtilMap>)termContexts
                                            withOrgApacheLuceneSearchSpansSpanWeight:(OrgApacheLuceneSearchSpansSpanWeight *)matchWeight;

- (void)extractTermContextsWithJavaUtilMap:(id<JavaUtilMap>)contexts;

- (void)extractTermsWithJavaUtilSet:(id<JavaUtilSet>)terms;

- (OrgApacheLuceneSearchSpansSpans *)getSpansWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context
                                     withOrgApacheLuceneSearchSpansSpanWeight_Postings:(OrgApacheLuceneSearchSpansSpanWeight_Postings *)requiredPostings;

- (OrgApacheLuceneSearchScorer *)scorerWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneSearchSpansSpanQuery:(OrgApacheLuceneSearchSpansSpanQuery *)arg0
                               withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)arg1
                                                      withJavaUtilMap:(id<JavaUtilMap>)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight, matchWeight_, OrgApacheLuceneSearchSpansSpanWeight *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight_initWithOrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight *self, OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> termContexts, OrgApacheLuceneSearchSpansSpanWeight *matchWeight);

FOUNDATION_EXPORT OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight *new_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight_initWithOrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> termContexts, OrgApacheLuceneSearchSpansSpanWeight *matchWeight) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight *create_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight_initWithOrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_withOrgApacheLuceneSearchIndexSearcher_withJavaUtilMap_withOrgApacheLuceneSearchSpansSpanWeight_(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery *outer$, OrgApacheLuceneSearchIndexSearcher *searcher, id<JavaUtilMap> termContexts, OrgApacheLuceneSearchSpansSpanWeight *matchWeight);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery_SpanPayloadCheckWeight)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchPayloadsSpanPayloadCheckQuery")
