//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/MultiCollector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchMultiCollector")
#ifdef RESTRICT_OrgApacheLuceneSearchMultiCollector
#define INCLUDE_ALL_OrgApacheLuceneSearchMultiCollector 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchMultiCollector 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchMultiCollector

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchMultiCollector_) && (INCLUDE_ALL_OrgApacheLuceneSearchMultiCollector || defined(INCLUDE_OrgApacheLuceneSearchMultiCollector))
#define OrgApacheLuceneSearchMultiCollector_

#define RESTRICT_OrgApacheLuceneSearchCollector 1
#define INCLUDE_OrgApacheLuceneSearchCollector 1
#include "org/apache/lucene/search/Collector.h"

@class IOSObjectArray;
@class OrgApacheLuceneIndexLeafReaderContext;
@protocol JavaLangIterable;
@protocol OrgApacheLuceneSearchLeafCollector;

/*!
 @brief A <code>Collector</code> which allows running a search with several 
 <code>Collector</code>s.It offers a static <code>wrap</code> method which accepts a
  list of collectors and wraps them with <code>MultiCollector</code>, while
  filtering out the <code>null</code> null ones.
 */
@interface OrgApacheLuceneSearchMultiCollector : NSObject < OrgApacheLuceneSearchCollector >

#pragma mark Public

- (id<OrgApacheLuceneSearchLeafCollector>)getLeafCollectorWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

- (jboolean)needsScores;

/*!
 @brief See <code>wrap(Iterable)</code>.
 */
+ (id<OrgApacheLuceneSearchCollector>)wrapWithOrgApacheLuceneSearchCollectorArray:(IOSObjectArray *)collectors;

/*!
 @brief Wraps a list of <code>Collector</code>s with a <code>MultiCollector</code>.This
  method works as follows: 
 <ul>
  <li>Filters out the <code>null</code> collectors, so they are not used
  during search time.
 <li>If the input contains 1 real collector (i.e. non-<code>null</code> ),
  it is returned. 
 <li>Otherwise the method returns a <code>MultiCollector</code> which wraps the
  non-<code>null</code> ones. 
 </ul>
 @throw IllegalArgumentException
 if either 0 collectors were input, or all collectors are
            <code>null</code>.
 */
+ (id<OrgApacheLuceneSearchCollector>)wrapWithJavaLangIterable:(id<JavaLangIterable>)collectors;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchMultiCollector)

FOUNDATION_EXPORT id<OrgApacheLuceneSearchCollector> OrgApacheLuceneSearchMultiCollector_wrapWithOrgApacheLuceneSearchCollectorArray_(IOSObjectArray *collectors);

FOUNDATION_EXPORT id<OrgApacheLuceneSearchCollector> OrgApacheLuceneSearchMultiCollector_wrapWithJavaLangIterable_(id<JavaLangIterable> collectors);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchMultiCollector)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchMultiCollector")
