//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/TermRangeFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchTermRangeFilter")
#ifdef RESTRICT_OrgApacheLuceneSearchTermRangeFilter
#define INCLUDE_ALL_OrgApacheLuceneSearchTermRangeFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchTermRangeFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchTermRangeFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchTermRangeFilter_) && (INCLUDE_ALL_OrgApacheLuceneSearchTermRangeFilter || defined(INCLUDE_OrgApacheLuceneSearchTermRangeFilter))
#define OrgApacheLuceneSearchTermRangeFilter_

#define RESTRICT_OrgApacheLuceneSearchMultiTermQueryWrapperFilter 1
#define INCLUDE_OrgApacheLuceneSearchMultiTermQueryWrapperFilter 1
#include "org/apache/lucene/search/MultiTermQueryWrapperFilter.h"

@class OrgApacheLuceneSearchMultiTermQuery;
@class OrgApacheLuceneUtilBytesRef;

/*!
 @brief A Filter that restricts search results to a range of term
  values in a given field.
 <p>This filter matches the documents looking for terms that fall into the
  supplied range according to <code>Byte.compareTo(Byte)</code>
 ,  It is not intended
  for numerical ranges; use <code>NumericRangeFilter</code> instead.
 @since 2.9
 */
@interface OrgApacheLuceneSearchTermRangeFilter : OrgApacheLuceneSearchMultiTermQueryWrapperFilter

#pragma mark Public

/*!
 @param fieldName The field this range applies to
 @param lowerTerm The lower bound on this range
 @param upperTerm The upper bound on this range
 @param includeLower Does this range include the lower bound?
 @param includeUpper Does this range include the upper bound?
 @throw IllegalArgumentExceptionif both terms are null or if
   lowerTerm is null and includeLower is true (similar for upperTerm
   and includeUpper)
 */
- (instancetype __nonnull)initWithNSString:(NSString *)fieldName
           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)lowerTerm
           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)upperTerm
                               withBoolean:(jboolean)includeLower
                               withBoolean:(jboolean)includeUpper;

/*!
 @brief Returns the lower value of this range filter
 */
- (OrgApacheLuceneUtilBytesRef *)getLowerTerm;

/*!
 @brief Returns the upper value of this range filter
 */
- (OrgApacheLuceneUtilBytesRef *)getUpperTerm;

/*!
 @brief Returns <code>true</code> if the lower endpoint is inclusive
 */
- (jboolean)includesLower;

/*!
 @brief Returns <code>true</code> if the upper endpoint is inclusive
 */
- (jboolean)includesUpper;

/*!
 @brief Constructs a filter for field <code>fieldName</code> matching
  less than or equal to <code>upperTerm</code>.
 */
+ (OrgApacheLuceneSearchTermRangeFilter *)LessWithNSString:(NSString *)fieldName
                           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)upperTerm;

/*!
 @brief Constructs a filter for field <code>fieldName</code> matching
  greater than or equal to <code>lowerTerm</code>.
 */
+ (OrgApacheLuceneSearchTermRangeFilter *)MoreWithNSString:(NSString *)fieldName
                           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)lowerTerm;

/*!
 @brief Factory that creates a new TermRangeFilter using Strings for term text.
 */
+ (OrgApacheLuceneSearchTermRangeFilter *)newStringRangeWithNSString:(NSString *)field
                                                        withNSString:(NSString *)lowerTerm
                                                        withNSString:(NSString *)upperTerm
                                                         withBoolean:(jboolean)includeLower
                                                         withBoolean:(jboolean)includeUpper OBJC_METHOD_FAMILY_NONE;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneSearchMultiTermQuery:(OrgApacheLuceneSearchMultiTermQuery *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchTermRangeFilter)

FOUNDATION_EXPORT void OrgApacheLuceneSearchTermRangeFilter_initWithNSString_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_withBoolean_(OrgApacheLuceneSearchTermRangeFilter *self, NSString *fieldName, OrgApacheLuceneUtilBytesRef *lowerTerm, OrgApacheLuceneUtilBytesRef *upperTerm, jboolean includeLower, jboolean includeUpper);

FOUNDATION_EXPORT OrgApacheLuceneSearchTermRangeFilter *new_OrgApacheLuceneSearchTermRangeFilter_initWithNSString_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_withBoolean_(NSString *fieldName, OrgApacheLuceneUtilBytesRef *lowerTerm, OrgApacheLuceneUtilBytesRef *upperTerm, jboolean includeLower, jboolean includeUpper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchTermRangeFilter *create_OrgApacheLuceneSearchTermRangeFilter_initWithNSString_withOrgApacheLuceneUtilBytesRef_withOrgApacheLuceneUtilBytesRef_withBoolean_withBoolean_(NSString *fieldName, OrgApacheLuceneUtilBytesRef *lowerTerm, OrgApacheLuceneUtilBytesRef *upperTerm, jboolean includeLower, jboolean includeUpper);

FOUNDATION_EXPORT OrgApacheLuceneSearchTermRangeFilter *OrgApacheLuceneSearchTermRangeFilter_newStringRangeWithNSString_withNSString_withNSString_withBoolean_withBoolean_(NSString *field, NSString *lowerTerm, NSString *upperTerm, jboolean includeLower, jboolean includeUpper);

FOUNDATION_EXPORT OrgApacheLuceneSearchTermRangeFilter *OrgApacheLuceneSearchTermRangeFilter_LessWithNSString_withOrgApacheLuceneUtilBytesRef_(NSString *fieldName, OrgApacheLuceneUtilBytesRef *upperTerm);

FOUNDATION_EXPORT OrgApacheLuceneSearchTermRangeFilter *OrgApacheLuceneSearchTermRangeFilter_MoreWithNSString_withOrgApacheLuceneUtilBytesRef_(NSString *fieldName, OrgApacheLuceneUtilBytesRef *lowerTerm);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchTermRangeFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchTermRangeFilter")
