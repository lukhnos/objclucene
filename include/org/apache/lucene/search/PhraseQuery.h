//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/search/PhraseQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchPhraseQuery")
#ifdef RESTRICT_OrgApacheLuceneSearchPhraseQuery
#define INCLUDE_ALL_OrgApacheLuceneSearchPhraseQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchPhraseQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchPhraseQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchPhraseQuery_) && (INCLUDE_ALL_OrgApacheLuceneSearchPhraseQuery || defined(INCLUDE_OrgApacheLuceneSearchPhraseQuery))
#define OrgApacheLuceneSearchPhraseQuery_

#define RESTRICT_OrgApacheLuceneSearchQuery 1
#define INCLUDE_OrgApacheLuceneSearchQuery 1
#include "org/apache/lucene/search/Query.h"

@class IOSIntArray;
@class IOSObjectArray;
@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchWeight;

/*!
 @brief A Query that matches documents containing a particular sequence of terms.
 A PhraseQuery is built by QueryParser for input like <code>"new york"</code>.
   
 <p>This query may be combined with other terms or queries with a <code>BooleanQuery</code>.
  
 <b>NOTE</b>: Leading holes don't have any particular meaning for this query
  and will be ignored. For instance this query: 
 <pre class="prettyprint">
  PhraseQuery.Builder builder = new PhraseQuery.Builder();
  builder.add(new Term("body", "one"), 4);
  builder.add(new Term("body", "two"), 5);
  PhraseQuery pq = builder.build(); 
 
@endcode
  is equivalent to the below query: 
 <pre class="prettyprint">
  PhraseQuery.Builder builder = new PhraseQuery.Builder();
  builder.add(new Term("body", "one"), 0);
  builder.add(new Term("body", "two"), 1);
  PhraseQuery pq = builder.build(); 
 
@endcode
 */
@interface OrgApacheLuceneSearchPhraseQuery : OrgApacheLuceneSearchQuery

#pragma mark Public

/*!
 @brief Constructs an empty phrase query.
 */
- (instancetype __nonnull)init;

/*!
 @brief Create a phrase query which will match documents that contain the given
  list of terms at consecutive positions in <code>field</code>, and at a
  maximum edit distance of <code>slop</code>.For more complicated use-cases,
  use <code>PhraseQuery.Builder</code>.
 - seealso: #getSlop()
 */
- (instancetype __nonnull)initWithInt:(jint)slop
                         withNSString:(NSString *)field
 withOrgApacheLuceneUtilBytesRefArray:(IOSObjectArray *)terms;

/*!
 @brief Create a phrase query which will match documents that contain the given
  list of terms at consecutive positions in <code>field</code>, and at a
  maximum edit distance of <code>slop</code>.For more complicated use-cases,
  use <code>PhraseQuery.Builder</code>.
 - seealso: #getSlop()
 */
- (instancetype __nonnull)initWithInt:(jint)slop
                         withNSString:(NSString *)field
                    withNSStringArray:(IOSObjectArray *)terms;

/*!
 @brief Create a phrase query which will match documents that contain the given
  list of terms at consecutive positions in <code>field</code>.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)field
      withOrgApacheLuceneUtilBytesRefArray:(IOSObjectArray *)terms;

/*!
 @brief Create a phrase query which will match documents that contain the given
  list of terms at consecutive positions in <code>field</code>.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)field
                         withNSStringArray:(IOSObjectArray *)terms;

/*!
 @brief Adds a term to the end of the query phrase.
 The relative position of the term is the one immediately after the last term added.
 */
- (void)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term;

/*!
 @brief Adds a term to the end of the query phrase.
 The relative position of the term within the phrase is specified explicitly.
  This allows e.g. phrases with more than one term at the same position
  or phrases with gaps (e.g. in connection with stopwords).
 */
- (void)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                withInt:(jint)position;

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores;

/*!
 @brief Returns true iff <code>o</code> is equal to this.
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Returns the relative positions of terms in this phrase.
 */
- (IOSIntArray *)getPositions;

/*!
 @brief Return the slop for this <code>PhraseQuery</code>.
 <p>The slop is an edit distance between respective positions of terms as
  defined in this <code>PhraseQuery</code> and the positions of terms in a
  document. 
 <p>For instance, when searching for <code>"quick fox"</code>, it is expected that
  the difference between the positions of <code>fox</code> and <code>quick</code> is 1.
  So <code>"a quick brown fox"</code> would be at an edit distance of 1 since the
  difference of the positions of <code>fox</code> and <code>quick</code> is 2.
  Similarly, <code>"the fox is quick"</code> would be at an edit distance of 3
  since the difference of the positions of <code>fox</code> and <code>quick</code> is -2.
  The slop defines the maximum edit distance for a document to match. 
 <p>More exact matches are scored higher than sloppier matches, thus search
  results are sorted by exactness.
 */
- (jint)getSlop;

/*!
 @brief Returns the list of terms in this phrase.
 */
- (IOSObjectArray *)getTerms;

/*!
 @brief Returns a hash code value for this object.
 */
- (NSUInteger)hash;

- (OrgApacheLuceneSearchQuery *)rewriteWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

/*!
 @brief Set the slop.
 - seealso: #getSlop()
 */
- (void)setSlopWithInt:(jint)s;

/*!
 @brief Prints a user-readable version of this query.
 */
- (NSString *)toStringWithNSString:(NSString *)f;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchPhraseQuery)

FOUNDATION_EXPORT void OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withNSStringArray_(OrgApacheLuceneSearchPhraseQuery *self, jint slop, NSString *field, IOSObjectArray *terms);

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withNSStringArray_(jint slop, NSString *field, IOSObjectArray *terms) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withNSStringArray_(jint slop, NSString *field, IOSObjectArray *terms);

FOUNDATION_EXPORT void OrgApacheLuceneSearchPhraseQuery_initWithNSString_withNSStringArray_(OrgApacheLuceneSearchPhraseQuery *self, NSString *field, IOSObjectArray *terms);

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithNSString_withNSStringArray_(NSString *field, IOSObjectArray *terms) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithNSString_withNSStringArray_(NSString *field, IOSObjectArray *terms);

FOUNDATION_EXPORT void OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_(OrgApacheLuceneSearchPhraseQuery *self, jint slop, NSString *field, IOSObjectArray *terms);

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_(jint slop, NSString *field, IOSObjectArray *terms) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithInt_withNSString_withOrgApacheLuceneUtilBytesRefArray_(jint slop, NSString *field, IOSObjectArray *terms);

FOUNDATION_EXPORT void OrgApacheLuceneSearchPhraseQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(OrgApacheLuceneSearchPhraseQuery *self, NSString *field, IOSObjectArray *terms);

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(NSString *field, IOSObjectArray *terms) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_initWithNSString_withOrgApacheLuceneUtilBytesRefArray_(NSString *field, IOSObjectArray *terms);

FOUNDATION_EXPORT void OrgApacheLuceneSearchPhraseQuery_init(OrgApacheLuceneSearchPhraseQuery *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *new_OrgApacheLuceneSearchPhraseQuery_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery *create_OrgApacheLuceneSearchPhraseQuery_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchPhraseQuery)

#endif

#if !defined (OrgApacheLuceneSearchPhraseQuery_Builder_) && (INCLUDE_ALL_OrgApacheLuceneSearchPhraseQuery || defined(INCLUDE_OrgApacheLuceneSearchPhraseQuery_Builder))
#define OrgApacheLuceneSearchPhraseQuery_Builder_

@class OrgApacheLuceneIndexTerm;
@class OrgApacheLuceneSearchPhraseQuery;

/*!
 @brief A builder for phrase queries.
 */
@interface OrgApacheLuceneSearchPhraseQuery_Builder : NSObject

#pragma mark Public

/*!
 @brief Sole constructor.
 */
- (instancetype __nonnull)init;

/*!
 @brief Adds a term to the end of the query phrase.
 The relative position of the term is the one immediately after the last term added.
 */
- (OrgApacheLuceneSearchPhraseQuery_Builder *)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term;

/*!
 @brief Adds a term to the end of the query phrase.
 The relative position of the term within the phrase is specified explicitly.
  This allows e.g. phrases with more than one term at the same position
  or phrases with gaps (e.g. in connection with stopwords).
 */
- (OrgApacheLuceneSearchPhraseQuery_Builder *)addWithOrgApacheLuceneIndexTerm:(OrgApacheLuceneIndexTerm *)term
                                                                      withInt:(jint)position;

/*!
 @brief Build a phrase query based on the terms that have been added.
 */
- (OrgApacheLuceneSearchPhraseQuery *)build;

/*!
 @brief Set the slop.
 - seealso: PhraseQuery#getSlop()
 */
- (OrgApacheLuceneSearchPhraseQuery_Builder *)setSlopWithInt:(jint)slop;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchPhraseQuery_Builder)

FOUNDATION_EXPORT void OrgApacheLuceneSearchPhraseQuery_Builder_init(OrgApacheLuceneSearchPhraseQuery_Builder *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery_Builder *new_OrgApacheLuceneSearchPhraseQuery_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery_Builder *create_OrgApacheLuceneSearchPhraseQuery_Builder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchPhraseQuery_Builder)

#endif

#if !defined (OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_) && (INCLUDE_ALL_OrgApacheLuceneSearchPhraseQuery || defined(INCLUDE_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq))
#define OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class IOSObjectArray;
@class OrgApacheLuceneIndexPostingsEnum;

@interface OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq : NSObject < JavaLangComparable > {
 @public
  OrgApacheLuceneIndexPostingsEnum *postings_;
  jint position_;
  IOSObjectArray *terms_;
  jint nTerms_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneIndexPostingsEnum:(OrgApacheLuceneIndexPostingsEnum *)postings
                                                           withInt:(jint)position
                                 withOrgApacheLuceneIndexTermArray:(IOSObjectArray *)terms;

- (jint)compareToWithId:(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *)other;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq)

J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq, postings_, OrgApacheLuceneIndexPostingsEnum *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq, terms_, IOSObjectArray *)

FOUNDATION_EXPORT void OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *self, OrgApacheLuceneIndexPostingsEnum *postings, jint position, IOSObjectArray *terms);

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *new_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(OrgApacheLuceneIndexPostingsEnum *postings, jint position, IOSObjectArray *terms) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq *create_OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq_initWithOrgApacheLuceneIndexPostingsEnum_withInt_withOrgApacheLuceneIndexTermArray_(OrgApacheLuceneIndexPostingsEnum *postings, jint position, IOSObjectArray *terms);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchPhraseQuery_PostingsAndFreq)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchPhraseQuery")
