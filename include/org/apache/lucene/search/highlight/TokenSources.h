//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./highlighter/src/java/org/apache/lucene/search/highlight/TokenSources.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchHighlightTokenSources")
#ifdef RESTRICT_OrgApacheLuceneSearchHighlightTokenSources
#define INCLUDE_ALL_OrgApacheLuceneSearchHighlightTokenSources 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchHighlightTokenSources 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchHighlightTokenSources

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchHighlightTokenSources_) && (INCLUDE_ALL_OrgApacheLuceneSearchHighlightTokenSources || defined(INCLUDE_OrgApacheLuceneSearchHighlightTokenSources))
#define OrgApacheLuceneSearchHighlightTokenSources_

@class OrgApacheLuceneAnalysisAnalyzer;
@class OrgApacheLuceneAnalysisTokenStream;
@class OrgApacheLuceneDocumentDocument;
@class OrgApacheLuceneIndexFields;
@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneIndexTerms;

/*!
 @brief Convenience methods for obtaining a <code>TokenStream</code> for use with the <code>Highlighter</code> - can obtain from
  term vectors with offsets and positions or from an Analyzer re-parsing the stored content.
 - seealso: TokenStreamFromTermVector
 */
@interface OrgApacheLuceneSearchHighlightTokenSources : NSObject

#pragma mark Public

/*!
 @brief A convenience method that tries a number of approaches to getting a token
  stream.The cost of finding there are no termVectors in the index is
  minimal (1000 invocations still registers 0 ms).
 So this "lazy" (flexible?)
  approach to coding is probably acceptable
 @return null if field not stored correctly
 @throw IOExceptionIf there is a low-level I/O error
 */
+ (OrgApacheLuceneAnalysisTokenStream *)getAnyTokenStreamWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                                                     withInt:(jint)docId
                                                                                withNSString:(NSString *)field
                                                         withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer;

/*!
 @brief A convenience method that tries to first get a <code>TokenStreamFromTermVector</code> for the
  specified docId, then, falls back to using the passed in 
 <code>org.apache.lucene.document.Document</code> to retrieve the TokenStream.
 This is useful when you already have the document, but would prefer to use
  the vector first.
 @param reader The <code>org.apache.lucene.index.IndexReader</code>  to use to try
          and get the vector from
 @param docId The docId to retrieve.
 @param field The field to retrieve on the document
 @param document The document to fall back on
 @param analyzer The analyzer to use for creating the TokenStream if the         vector doesn't exist
 @return The <code>org.apache.lucene.analysis.TokenStream</code> for the
          <code>org.apache.lucene.index.IndexableField</code> on the
          <code>org.apache.lucene.document.Document</code>
 @throw IOExceptionif there was an error loading
 */
+ (OrgApacheLuceneAnalysisTokenStream *)getAnyTokenStreamWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                                                     withInt:(jint)docId
                                                                                withNSString:(NSString *)field
                                                         withOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)document
                                                         withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer;

/*!
 @brief Get a token stream by un-inverting the term vector.This method returns null if <code>tvFields</code> is null
  or if the field has no term vector, or if the term vector doesn't have offsets.
 Positions are recommended on the
  term vector but it isn't strictly required.
 @param field The field to get term vectors from.
 @param tvFields from <code>IndexReader.getTermVectors(int)</code> . Possibly null. For performance, this instance should
                   be re-used for the same document (e.g. when highlighting multiple fields).
 @param maxStartOffset Terms with a startOffset greater than this aren't returned.  Use -1 for no limit.                        Suggest using 
 <code>Highlighter.getMaxDocCharsToAnalyze()</code>  - 1
 @return a token stream from term vectors. Null if no term vectors with the right options.
 */
+ (OrgApacheLuceneAnalysisTokenStream *)getTermVectorTokenStreamOrNullWithNSString:(NSString *)field
                                                    withOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)tvFields
                                                                           withInt:(jint)maxStartOffset;

+ (OrgApacheLuceneAnalysisTokenStream *)getTokenStreamWithOrgApacheLuceneDocumentDocument:(OrgApacheLuceneDocumentDocument *)doc
                                                                             withNSString:(NSString *)field
                                                      withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer;

+ (OrgApacheLuceneAnalysisTokenStream *)getTokenStreamWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                                                  withInt:(jint)docId
                                                                             withNSString:(NSString *)field
                                                      withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer;

/*!
 @brief Get a token stream from either un-inverting a term vector if possible, or by analyzing the text.
 WARNING: Don't call this if there is more than one value for this field.  If there are, and if there are term
  vectors, then there is a single tokenstream with offsets suggesting all the field values were concatenated.
 @param field The field to either get term vectors from or to analyze the text from.
 @param tvFields from <code>IndexReader.getTermVectors(int)</code> . Possibly null. For performance, this instance should
                   be re-used for the same document (e.g. when highlighting multiple fields).
 @param text the text to analyze, failing term vector un-inversion
 @param analyzer the analyzer to analyze <code>text</code>  with, failing term vector un-inversion
 @param maxStartOffset Terms with a startOffset greater than this aren't returned.  Use -1 for no limit.                        Suggest using 
 <code>Highlighter.getMaxDocCharsToAnalyze()</code>  - 1.
 @return a token stream from either term vectors, or from analyzing the text. Never null.
 */
+ (OrgApacheLuceneAnalysisTokenStream *)getTokenStreamWithNSString:(NSString *)field
                                    withOrgApacheLuceneIndexFields:(OrgApacheLuceneIndexFields *)tvFields
                                                      withNSString:(NSString *)text
                               withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer
                                                           withInt:(jint)maxStartOffset;

+ (OrgApacheLuceneAnalysisTokenStream *)getTokenStreamWithNSString:(NSString *)field
                                                      withNSString:(NSString *)contents
                               withOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)analyzer;

/*!
 @brief Returns a token stream generated from a <code>Terms</code>.This
  can be used to feed the highlighter with a pre-parsed token
  stream.
 The <code>Terms</code> must have offsets available. If there are no positions available,
  all tokens will have position increments reflecting adjacent tokens, or coincident when terms
  share a start offset. If there are stopwords filtered from the index, you probably want to ensure
  term vectors have positions so that phrase queries won't match across stopwords.
 @throw IllegalArgumentExceptionif no offsets are available
 */
+ (OrgApacheLuceneAnalysisTokenStream *)getTokenStreamWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)tpv;

/*!
 @brief Simply calls <code>getTokenStream(org.apache.lucene.index.Terms)</code> now.
 */
+ (OrgApacheLuceneAnalysisTokenStream *)getTokenStreamWithOrgApacheLuceneIndexTerms:(OrgApacheLuceneIndexTerms *)vector
                                                                        withBoolean:(jboolean)tokenPositionsGuaranteedContiguous;

/*!
 @brief Returns a <code>TokenStream</code> with positions and offsets constructed from
  field termvectors.If the field has no termvectors or offsets
  are not included in the termvector, return null.
 See <code>getTokenStream(org.apache.lucene.index.Terms)</code>
  for an explanation of what happens when positions aren't present.
 @param reader the <code>IndexReader</code>  to retrieve term vectors from
 @param docId the document to retrieve termvectors for
 @param field the field to retrieve termvectors for
 @return a <code>TokenStream</code>, or null if offsets are not available
 @throw IOExceptionIf there is a low-level I/O error
 - seealso: #getTokenStream(org.apache.lucene.index.Terms)
 */
+ (OrgApacheLuceneAnalysisTokenStream *)getTokenStreamWithOffsetsWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                                                             withInt:(jint)docId
                                                                                        withNSString:(NSString *)field;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneSearchHighlightTokenSources)

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getTokenStreamWithNSString_withOrgApacheLuceneIndexFields_withNSString_withOrgApacheLuceneAnalysisAnalyzer_withInt_(NSString *field, OrgApacheLuceneIndexFields *tvFields, NSString *text, OrgApacheLuceneAnalysisAnalyzer *analyzer, jint maxStartOffset);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getTermVectorTokenStreamOrNullWithNSString_withOrgApacheLuceneIndexFields_withInt_(NSString *field, OrgApacheLuceneIndexFields *tvFields, jint maxStartOffset);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getAnyTokenStreamWithOrgApacheLuceneIndexIndexReader_withInt_withNSString_withOrgApacheLuceneDocumentDocument_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneIndexIndexReader *reader, jint docId, NSString *field, OrgApacheLuceneDocumentDocument *document, OrgApacheLuceneAnalysisAnalyzer *analyzer);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getAnyTokenStreamWithOrgApacheLuceneIndexIndexReader_withInt_withNSString_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneIndexIndexReader *reader, jint docId, NSString *field, OrgApacheLuceneAnalysisAnalyzer *analyzer);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getTokenStreamWithOrgApacheLuceneIndexTerms_withBoolean_(OrgApacheLuceneIndexTerms *vector, jboolean tokenPositionsGuaranteedContiguous);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getTokenStreamWithOrgApacheLuceneIndexTerms_(OrgApacheLuceneIndexTerms *tpv);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getTokenStreamWithOffsetsWithOrgApacheLuceneIndexIndexReader_withInt_withNSString_(OrgApacheLuceneIndexIndexReader *reader, jint docId, NSString *field);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getTokenStreamWithOrgApacheLuceneIndexIndexReader_withInt_withNSString_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneIndexIndexReader *reader, jint docId, NSString *field, OrgApacheLuceneAnalysisAnalyzer *analyzer);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getTokenStreamWithOrgApacheLuceneDocumentDocument_withNSString_withOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneDocumentDocument *doc, NSString *field, OrgApacheLuceneAnalysisAnalyzer *analyzer);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisTokenStream *OrgApacheLuceneSearchHighlightTokenSources_getTokenStreamWithNSString_withNSString_withOrgApacheLuceneAnalysisAnalyzer_(NSString *field, NSString *contents, OrgApacheLuceneAnalysisAnalyzer *analyzer);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchHighlightTokenSources)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchHighlightTokenSources")
