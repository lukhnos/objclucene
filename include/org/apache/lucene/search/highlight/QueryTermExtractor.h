//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneSearchHighlightQueryTermExtractor")
#ifdef RESTRICT_OrgApacheLuceneSearchHighlightQueryTermExtractor
#define INCLUDE_ALL_OrgApacheLuceneSearchHighlightQueryTermExtractor 0
#else
#define INCLUDE_ALL_OrgApacheLuceneSearchHighlightQueryTermExtractor 1
#endif
#undef RESTRICT_OrgApacheLuceneSearchHighlightQueryTermExtractor

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneSearchHighlightQueryTermExtractor_) && (INCLUDE_ALL_OrgApacheLuceneSearchHighlightQueryTermExtractor || defined(INCLUDE_OrgApacheLuceneSearchHighlightQueryTermExtractor))
#define OrgApacheLuceneSearchHighlightQueryTermExtractor_

@class IOSObjectArray;
@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneSearchQuery;

/*!
 @brief Utility class used to extract the terms used in a query, plus any weights.
 This class will not find terms for MultiTermQuery, TermRangeQuery and PrefixQuery classes
  so the caller must pass a rewritten query (see Query.rewrite) to obtain a list of 
  expanded terms.
 */
@interface OrgApacheLuceneSearchHighlightQueryTermExtractor : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Extracts all terms texts of a given Query into an array of WeightedTerms
 @param query Query to extract term texts from
 @param reader used to compute IDF which can be used to a) score selected fragments better  b) use graded highlights eg changing intensity of font color
 @param fieldName the field on which Inverse Document Frequency (IDF) calculations are based
 @return an array of the terms used in a query, plus their weights.
 */
+ (IOSObjectArray *)getIdfWeightedTermsWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                  withOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                         withNSString:(NSString *)fieldName;

/*!
 @brief Extracts all terms texts of a given Query into an array of WeightedTerms
 @param query Query to extract term texts from
 @return an array of the terms used in a query, plus their weights.
 */
+ (IOSObjectArray *)getTermsWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query;

/*!
 @brief Extracts all terms texts of a given Query into an array of WeightedTerms
 @param query Query to extract term texts from
 @param prohibited <code> true </code>  to extract "prohibited" terms, too
 @return an array of the terms used in a query, plus their weights.
 */
+ (IOSObjectArray *)getTermsWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                               withBoolean:(jboolean)prohibited;

/*!
 @brief Extracts all terms texts of a given Query into an array of WeightedTerms
 @param query Query to extract term texts from
 @param prohibited <code> true </code>  to extract "prohibited" terms, too
 @param fieldName The fieldName used to filter query terms
 @return an array of the terms used in a query, plus their weights.
 */
+ (IOSObjectArray *)getTermsWithOrgApacheLuceneSearchQuery:(OrgApacheLuceneSearchQuery *)query
                                               withBoolean:(jboolean)prohibited
                                              withNSString:(NSString *)fieldName;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneSearchHighlightQueryTermExtractor)

FOUNDATION_EXPORT void OrgApacheLuceneSearchHighlightQueryTermExtractor_init(OrgApacheLuceneSearchHighlightQueryTermExtractor *self);

FOUNDATION_EXPORT OrgApacheLuceneSearchHighlightQueryTermExtractor *new_OrgApacheLuceneSearchHighlightQueryTermExtractor_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneSearchHighlightQueryTermExtractor *create_OrgApacheLuceneSearchHighlightQueryTermExtractor_init(void);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneSearchHighlightQueryTermExtractor_getTermsWithOrgApacheLuceneSearchQuery_(OrgApacheLuceneSearchQuery *query);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneSearchHighlightQueryTermExtractor_getIdfWeightedTermsWithOrgApacheLuceneSearchQuery_withOrgApacheLuceneIndexIndexReader_withNSString_(OrgApacheLuceneSearchQuery *query, OrgApacheLuceneIndexIndexReader *reader, NSString *fieldName);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneSearchHighlightQueryTermExtractor_getTermsWithOrgApacheLuceneSearchQuery_withBoolean_withNSString_(OrgApacheLuceneSearchQuery *query, jboolean prohibited, NSString *fieldName);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneSearchHighlightQueryTermExtractor_getTermsWithOrgApacheLuceneSearchQuery_withBoolean_(OrgApacheLuceneSearchQuery *query, jboolean prohibited);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneSearchHighlightQueryTermExtractor)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneSearchHighlightQueryTermExtractor")
