//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queries/src/java/org/apache/lucene/queries/function/valuesource/MultiFunction.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction")
#ifdef RESTRICT_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction
#define INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction 1
#endif
#undef RESTRICT_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_) && (INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction || defined(INCLUDE_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction))
#define OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_

#define RESTRICT_OrgApacheLuceneQueriesFunctionValueSource 1
#define INCLUDE_OrgApacheLuceneQueriesFunctionValueSource 1
#include "org/apache/lucene/queries/function/ValueSource.h"

@class IOSObjectArray;
@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneQueriesFunctionFunctionValues;
@class OrgApacheLuceneSearchIndexSearcher;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief Abstract parent class for <code>ValueSource</code> implementations that wrap multiple
  ValueSources and apply their own logic.
 */
@interface OrgApacheLuceneQueriesFunctionValuesourceMultiFunction : OrgApacheLuceneQueriesFunctionValueSource {
 @public
  id<JavaUtilList> sources_;
}

#pragma mark Public

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)sources;

/*!
 @brief Equivilent the the <code>FunctionValues[]</code> method with the same name, but optimized for 
  dealing with exactly 2 arguments.
 @return true if <em>both</em> of the specified <code>values</code>
          <code>FunctionValues.exists</code> for the specified doc, else false.
 - seealso: #anyExists(int,FunctionValues[])
 */
+ (jboolean)allExistsWithInt:(jint)doc
withOrgApacheLuceneQueriesFunctionFunctionValues:(OrgApacheLuceneQueriesFunctionFunctionValues *)values1
withOrgApacheLuceneQueriesFunctionFunctionValues:(OrgApacheLuceneQueriesFunctionFunctionValues *)values2;

/*!
 @brief Helper utility for <code>FunctionValues</code>
 @return true if <em>all</em> of the specified <code>values</code>
          <code>FunctionValues.exists</code> for the specified doc, else false.
 */
+ (jboolean)allExistsWithInt:(jint)doc
withOrgApacheLuceneQueriesFunctionFunctionValuesArray:(IOSObjectArray *)values;

/*!
 @brief Equivilent the the <code>FunctionValues[]</code> method with the same name, but optimized for 
  dealing with exactly 2 arguments.
 @return true if <em>either</em> of the specified <code>values</code>
          <code>FunctionValues.exists</code> for the specified doc, else false.
 - seealso: #anyExists(int,FunctionValues[])
 */
+ (jboolean)anyExistsWithInt:(jint)doc
withOrgApacheLuceneQueriesFunctionFunctionValues:(OrgApacheLuceneQueriesFunctionFunctionValues *)values1
withOrgApacheLuceneQueriesFunctionFunctionValues:(OrgApacheLuceneQueriesFunctionFunctionValues *)values2;

/*!
 @brief Helper utility for <code>FunctionValues</code>
 @return true if <em>any</em> of the specified <code>values</code>
          <code>FunctionValues.exists</code> for the specified doc, else false.
 */
+ (jboolean)anyExistsWithInt:(jint)doc
withOrgApacheLuceneQueriesFunctionFunctionValuesArray:(IOSObjectArray *)values;

- (void)createWeightWithJavaUtilMap:(id<JavaUtilMap>)context
withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher;

- (NSString *)description__;

+ (NSString *)description__WithNSString:(NSString *)name
                       withJavaUtilList:(id<JavaUtilList>)sources;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

+ (NSString *)toStringWithNSString:(NSString *)name
withOrgApacheLuceneQueriesFunctionFunctionValuesArray:(IOSObjectArray *)valsArr
                           withInt:(jint)doc;

+ (IOSObjectArray *)valsArrWithJavaUtilList:(id<JavaUtilList>)sources
                            withJavaUtilMap:(id<JavaUtilMap>)fcontext
  withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)readerContext;

#pragma mark Protected

- (NSString *)name;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction, sources_, id<JavaUtilList>)

FOUNDATION_EXPORT void OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_initWithJavaUtilList_(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction *self, id<JavaUtilList> sources);

FOUNDATION_EXPORT jboolean OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_allExistsWithInt_withOrgApacheLuceneQueriesFunctionFunctionValuesArray_(jint doc, IOSObjectArray *values);

FOUNDATION_EXPORT jboolean OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_anyExistsWithInt_withOrgApacheLuceneQueriesFunctionFunctionValuesArray_(jint doc, IOSObjectArray *values);

FOUNDATION_EXPORT jboolean OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_allExistsWithInt_withOrgApacheLuceneQueriesFunctionFunctionValues_withOrgApacheLuceneQueriesFunctionFunctionValues_(jint doc, OrgApacheLuceneQueriesFunctionFunctionValues *values1, OrgApacheLuceneQueriesFunctionFunctionValues *values2);

FOUNDATION_EXPORT jboolean OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_anyExistsWithInt_withOrgApacheLuceneQueriesFunctionFunctionValues_withOrgApacheLuceneQueriesFunctionFunctionValues_(jint doc, OrgApacheLuceneQueriesFunctionFunctionValues *values1, OrgApacheLuceneQueriesFunctionFunctionValues *values2);

FOUNDATION_EXPORT NSString *OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_description__WithNSString_withJavaUtilList_(NSString *name, id<JavaUtilList> sources);

FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_valsArrWithJavaUtilList_withJavaUtilMap_withOrgApacheLuceneIndexLeafReaderContext_(id<JavaUtilList> sources, id<JavaUtilMap> fcontext, OrgApacheLuceneIndexLeafReaderContext *readerContext);

FOUNDATION_EXPORT NSString *OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_toStringWithNSString_withOrgApacheLuceneQueriesFunctionFunctionValuesArray_withInt_(NSString *name, IOSObjectArray *valsArr, jint doc);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction)

#endif

#if !defined (OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values_) && (INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction || defined(INCLUDE_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values))
#define OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values_

#define RESTRICT_OrgApacheLuceneQueriesFunctionFunctionValues 1
#define INCLUDE_OrgApacheLuceneQueriesFunctionFunctionValues 1
#include "org/apache/lucene/queries/function/FunctionValues.h"

@class IOSObjectArray;
@class OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller;
@class OrgApacheLuceneQueriesFunctionValuesourceMultiFunction;

@interface OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values : OrgApacheLuceneQueriesFunctionFunctionValues {
 @public
  IOSObjectArray *valsArr_;
}

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneQueriesFunctionValuesourceMultiFunction:(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction *)outer$
                                   withOrgApacheLuceneQueriesFunctionFunctionValuesArray:(IOSObjectArray *)valsArr;

- (OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller *)getValueFiller;

- (NSString *)toStringWithInt:(jint)doc;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values, valsArr_, IOSObjectArray *)

FOUNDATION_EXPORT void OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values_initWithOrgApacheLuceneQueriesFunctionValuesourceMultiFunction_withOrgApacheLuceneQueriesFunctionFunctionValuesArray_(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values *self, OrgApacheLuceneQueriesFunctionValuesourceMultiFunction *outer$, IOSObjectArray *valsArr);

FOUNDATION_EXPORT OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values *new_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values_initWithOrgApacheLuceneQueriesFunctionValuesourceMultiFunction_withOrgApacheLuceneQueriesFunctionFunctionValuesArray_(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction *outer$, IOSObjectArray *valsArr) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values *create_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values_initWithOrgApacheLuceneQueriesFunctionValuesourceMultiFunction_withOrgApacheLuceneQueriesFunctionFunctionValuesArray_(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction *outer$, IOSObjectArray *valsArr);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesFunctionValuesourceMultiFunction_Values)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceMultiFunction")
