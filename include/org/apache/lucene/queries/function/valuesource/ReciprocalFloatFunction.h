//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queries/src/java/org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction")
#ifdef RESTRICT_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction
#define INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction 1
#endif
#undef RESTRICT_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction_) && (INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction || defined(INCLUDE_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction))
#define OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction_

#define RESTRICT_OrgApacheLuceneQueriesFunctionValueSource 1
#define INCLUDE_OrgApacheLuceneQueriesFunctionValueSource 1
#include "org/apache/lucene/queries/function/ValueSource.h"

@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneQueriesFunctionFunctionValues;
@class OrgApacheLuceneSearchIndexSearcher;
@protocol JavaUtilMap;

/*!
 @brief <code>ReciprocalFloatFunction</code> implements a reciprocal function f(x) = a/(mx+b), based on
  the float value of a field or function as exported by <code>org.apache.lucene.queries.function.ValueSource</code>.
 <br>
  When a and b are equal, and x&gt;=0, this function has a maximum value of 1 that drops as x increases.
  Increasing the value of a and b together results in a movement of the entire function to a flatter part of the curve. 
 <p>These properties make this an idea function for boosting more recent documents. 
 <p>Example:<code>  recip(ms(NOW,mydatefield),3.16e-11,1,1)</code>
  <p>A multiplier of 3.16e-11 changes the units from milliseconds to years (since there are about 3.16e10 milliseconds
  per year).  Thus, a very recent date will yield a value close to 1/(0+1) or 1,
  a date a year in the past will get a multiplier of about 1/(1+1) or 1/2,
  and date two years old will yield 1/(2+1) or 1/3.
 - seealso: org.apache.lucene.queries.function.FunctionQuery
 */
@interface OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction : OrgApacheLuceneQueriesFunctionValueSource {
 @public
  OrgApacheLuceneQueriesFunctionValueSource *source_;
  jfloat m_;
  jfloat a_;
  jfloat b_;
}

#pragma mark Public

/*!
 @brief f(source) = a/(m*float(source)+b)
 */
- (instancetype __nonnull)initWithOrgApacheLuceneQueriesFunctionValueSource:(OrgApacheLuceneQueriesFunctionValueSource *)source
                                                                  withFloat:(jfloat)m
                                                                  withFloat:(jfloat)a
                                                                  withFloat:(jfloat)b;

- (void)createWeightWithJavaUtilMap:(id<JavaUtilMap>)context
withOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher;

- (NSString *)description__;

- (jboolean)isEqual:(id)o;

- (OrgApacheLuceneQueriesFunctionFunctionValues *)getValuesWithJavaUtilMap:(id<JavaUtilMap>)context
                                 withOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)readerContext;

- (NSUInteger)hash;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction, source_, OrgApacheLuceneQueriesFunctionValueSource *)

FOUNDATION_EXPORT void OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction_initWithOrgApacheLuceneQueriesFunctionValueSource_withFloat_withFloat_withFloat_(OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction *self, OrgApacheLuceneQueriesFunctionValueSource *source, jfloat m, jfloat a, jfloat b);

FOUNDATION_EXPORT OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction *new_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction_initWithOrgApacheLuceneQueriesFunctionValueSource_withFloat_withFloat_withFloat_(OrgApacheLuceneQueriesFunctionValueSource *source, jfloat m, jfloat a, jfloat b) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction *create_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction_initWithOrgApacheLuceneQueriesFunctionValueSource_withFloat_withFloat_withFloat_(OrgApacheLuceneQueriesFunctionValueSource *source, jfloat m, jfloat a, jfloat b);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueriesFunctionValuesourceReciprocalFloatFunction")
