//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueriesFunctionFunctionValues")
#ifdef RESTRICT_OrgApacheLuceneQueriesFunctionFunctionValues
#define INCLUDE_ALL_OrgApacheLuceneQueriesFunctionFunctionValues 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueriesFunctionFunctionValues 1
#endif
#undef RESTRICT_OrgApacheLuceneQueriesFunctionFunctionValues

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueriesFunctionFunctionValues_) && (INCLUDE_ALL_OrgApacheLuceneQueriesFunctionFunctionValues || defined(INCLUDE_OrgApacheLuceneQueriesFunctionFunctionValues))
#define OrgApacheLuceneQueriesFunctionFunctionValues_

@class IOSByteArray;
@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSLongArray;
@class IOSObjectArray;
@class IOSShortArray;
@class OrgApacheLuceneIndexIndexReader;
@class OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller;
@class OrgApacheLuceneQueriesFunctionValueSourceScorer;
@class OrgApacheLuceneSearchExplanation;
@class OrgApacheLuceneUtilBytesRefBuilder;

/*!
 @brief Represents field values as different types.
 Normally created via a <code>ValueSource</code> for a particular field and reader.
 */
@interface OrgApacheLuceneQueriesFunctionFunctionValues : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

- (jboolean)boolValWithInt:(jint)doc;

/*!
 @brief returns the bytes representation of the string val - TODO: should this return the indexed raw bytes not?
 */
- (jboolean)bytesValWithInt:(jint)doc
withOrgApacheLuceneUtilBytesRefBuilder:(OrgApacheLuceneUtilBytesRefBuilder *)target;

- (jbyte)byteValWithInt:(jint)doc;

- (void)byteValWithInt:(jint)doc
         withByteArray:(IOSByteArray *)vals;

- (jdouble)doubleValWithInt:(jint)doc;

- (void)doubleValWithInt:(jint)doc
         withDoubleArray:(IOSDoubleArray *)vals;

/*!
 @brief Returns true if there is a value for this document
 */
- (jboolean)existsWithInt:(jint)doc;

- (OrgApacheLuceneSearchExplanation *)explainWithInt:(jint)doc;

- (jfloat)floatValWithInt:(jint)doc;

- (void)floatValWithInt:(jint)doc
         withFloatArray:(IOSFloatArray *)vals;

- (OrgApacheLuceneQueriesFunctionValueSourceScorer *)getRangeScorerWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader
                                                                                          withNSString:(NSString *)lowerVal
                                                                                          withNSString:(NSString *)upperVal
                                                                                           withBoolean:(jboolean)includeLower
                                                                                           withBoolean:(jboolean)includeUpper;

- (OrgApacheLuceneQueriesFunctionValueSourceScorer *)getScorerWithOrgApacheLuceneIndexIndexReader:(OrgApacheLuceneIndexIndexReader *)reader;

/*!
 */
- (OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller *)getValueFiller;

- (jint)intValWithInt:(jint)doc;

- (void)intValWithInt:(jint)doc
         withIntArray:(IOSIntArray *)vals;

- (jlong)longValWithInt:(jint)doc;

- (void)longValWithInt:(jint)doc
         withLongArray:(IOSLongArray *)vals;

/*!
 @return the number of unique sort ordinals this instance has
 */
- (jint)numOrd;

/*!
 @brief Native Java Object representation of the value
 */
- (id)objectValWithInt:(jint)doc;

/*!
 @param doc The doc to retrieve to sort ordinal for
 @return the sort ordinal for the specified doc
  TODO: Maybe we can just use intVal for this...
 */
- (jint)ordValWithInt:(jint)doc;

- (jshort)shortValWithInt:(jint)doc;

- (void)shortValWithInt:(jint)doc
         withShortArray:(IOSShortArray *)vals;

- (NSString *)strValWithInt:(jint)doc;

- (void)strValWithInt:(jint)doc
    withNSStringArray:(IOSObjectArray *)vals;

- (NSString *)toStringWithInt:(jint)doc;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesFunctionFunctionValues)

FOUNDATION_EXPORT void OrgApacheLuceneQueriesFunctionFunctionValues_init(OrgApacheLuceneQueriesFunctionFunctionValues *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesFunctionFunctionValues)

#endif

#if !defined (OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller_) && (INCLUDE_ALL_OrgApacheLuceneQueriesFunctionFunctionValues || defined(INCLUDE_OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller))
#define OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller_

@class OrgApacheLuceneUtilMutableMutableValue;

/*!
 @brief Abstraction of the logic required to fill the value of a specified doc into
  a reusable <code>MutableValue</code>.Implementations of <code>FunctionValues</code>
  are encouraged to define their own implementations of ValueFiller if their
  value is not a float.
 */
@interface OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief MutableValue will be reused across calls.Returns true if the value exists.
 */
- (void)fillValueWithInt:(jint)doc;

/*!
 @brief MutableValue will be reused across calls
 */
- (OrgApacheLuceneUtilMutableMutableValue *)getValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller)

FOUNDATION_EXPORT void OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller_init(OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesFunctionFunctionValues_ValueFiller)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueriesFunctionFunctionValues")
