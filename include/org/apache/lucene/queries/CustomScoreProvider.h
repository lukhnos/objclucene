//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./queries/src/java/org/apache/lucene/queries/CustomScoreProvider.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneQueriesCustomScoreProvider")
#ifdef RESTRICT_OrgApacheLuceneQueriesCustomScoreProvider
#define INCLUDE_ALL_OrgApacheLuceneQueriesCustomScoreProvider 0
#else
#define INCLUDE_ALL_OrgApacheLuceneQueriesCustomScoreProvider 1
#endif
#undef RESTRICT_OrgApacheLuceneQueriesCustomScoreProvider

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneQueriesCustomScoreProvider_) && (INCLUDE_ALL_OrgApacheLuceneQueriesCustomScoreProvider || defined(INCLUDE_OrgApacheLuceneQueriesCustomScoreProvider))
#define OrgApacheLuceneQueriesCustomScoreProvider_

@class IOSFloatArray;
@class IOSObjectArray;
@class OrgApacheLuceneIndexLeafReaderContext;
@class OrgApacheLuceneSearchExplanation;

/*!
 @brief An instance of this subclass should be returned by 
 <code>CustomScoreQuery.getCustomScoreProvider</code>, if you want
  to modify the custom score calculation of a <code>CustomScoreQuery</code>.
 <p>Since Lucene 2.9, queries operate on each segment of an index separately,
  so the protected <code>context</code> field can be used to resolve doc IDs,
  as the supplied <code>doc</code> ID is per-segment and without knowledge
  of the IndexReader you cannot access the document or DocValues.
 @since 2.9.2
 */
@interface OrgApacheLuceneQueriesCustomScoreProvider : NSObject {
 @public
  OrgApacheLuceneIndexLeafReaderContext *context_;
}

#pragma mark Public

/*!
 @brief Creates a new instance of the provider class for the given <code>IndexReader</code>.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneIndexLeafReaderContext:(OrgApacheLuceneIndexLeafReaderContext *)context;

/*!
 @brief Explain the custom score.
 Whenever overriding <code>customScore(int, float, float)</code>, 
  this method should also be overridden to provide the correct explanation
  for the part of the custom scoring.
 @param doc doc being explained.
 @param subQueryExpl explanation for the sub-query part.
 @param valSrcExpl explanation for the value source part.
 @return an explanation for the custom score
 */
- (OrgApacheLuceneSearchExplanation *)customExplainWithInt:(jint)doc
                      withOrgApacheLuceneSearchExplanation:(OrgApacheLuceneSearchExplanation *)subQueryExpl
                      withOrgApacheLuceneSearchExplanation:(OrgApacheLuceneSearchExplanation *)valSrcExpl;

/*!
 @brief Explain the custom score.
 Whenever overriding <code>customScore(int, float, float[])</code>, 
  this method should also be overridden to provide the correct explanation
  for the part of the custom scoring.
 @param doc doc being explained.
 @param subQueryExpl explanation for the sub-query part.
 @param valSrcExpls explanation for the value source part.
 @return an explanation for the custom score
 */
- (OrgApacheLuceneSearchExplanation *)customExplainWithInt:(jint)doc
                      withOrgApacheLuceneSearchExplanation:(OrgApacheLuceneSearchExplanation *)subQueryExpl
                 withOrgApacheLuceneSearchExplanationArray:(IOSObjectArray *)valSrcExpls;

/*!
 @brief Compute a custom score by the subQuery score and the <code>FunctionQuery</code> score.
 <p> 
  Subclasses can override this method to modify the custom score. 
 <p>
  If your custom scoring is different than the default herein you 
  should override at least one of the two customScore() methods.
  If the number of <code>function queries</code> is always &lt; 2 it is 
  sufficient to override this customScore() method, which is simpler.  
 <p>
  The default computation herein is a multiplication of the two scores: 
 @code

      ModifiedScore = subQueryScore * valSrcScore 
  
@endcode
 @param doc id of scored doc.
 @param subQueryScore score of that doc by the subQuery.
 @param valSrcScore score of that doc by the <code>FunctionQuery</code> .
 @return custom score.
 */
- (jfloat)customScoreWithInt:(jint)doc
                   withFloat:(jfloat)subQueryScore
                   withFloat:(jfloat)valSrcScore;

/*!
 @brief Compute a custom score by the subQuery score and a number of  
 <code>org.apache.lucene.queries.function.FunctionQuery</code> scores.
 <p> 
  Subclasses can override this method to modify the custom score.   
 <p>
  If your custom scoring is different than the default herein you 
  should override at least one of the two customScore() methods.
  If the number of <code>function queries</code> is always &lt; 2 it is 
  sufficient to override the other  
 <code>customScore()</code> 
  method, which is simpler.  
 <p>
  The default computation herein is a multiplication of given scores: 
 @code

      ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ... 
  
@endcode
 @param doc id of scored doc.
 @param subQueryScore score of that doc by the subQuery.
 @param valSrcScores scores of that doc by the <code>FunctionQuery</code> .
 @return custom score.
 */
- (jfloat)customScoreWithInt:(jint)doc
                   withFloat:(jfloat)subQueryScore
              withFloatArray:(IOSFloatArray *)valSrcScores;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneQueriesCustomScoreProvider)

J2OBJC_FIELD_SETTER(OrgApacheLuceneQueriesCustomScoreProvider, context_, OrgApacheLuceneIndexLeafReaderContext *)

FOUNDATION_EXPORT void OrgApacheLuceneQueriesCustomScoreProvider_initWithOrgApacheLuceneIndexLeafReaderContext_(OrgApacheLuceneQueriesCustomScoreProvider *self, OrgApacheLuceneIndexLeafReaderContext *context);

FOUNDATION_EXPORT OrgApacheLuceneQueriesCustomScoreProvider *new_OrgApacheLuceneQueriesCustomScoreProvider_initWithOrgApacheLuceneIndexLeafReaderContext_(OrgApacheLuceneIndexLeafReaderContext *context) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneQueriesCustomScoreProvider *create_OrgApacheLuceneQueriesCustomScoreProvider_initWithOrgApacheLuceneIndexLeafReaderContext_(OrgApacheLuceneIndexLeafReaderContext *context);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneQueriesCustomScoreProvider)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneQueriesCustomScoreProvider")
