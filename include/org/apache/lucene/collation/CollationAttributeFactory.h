//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/collation/CollationAttributeFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneCollationCollationAttributeFactory")
#ifdef RESTRICT_OrgApacheLuceneCollationCollationAttributeFactory
#define INCLUDE_ALL_OrgApacheLuceneCollationCollationAttributeFactory 0
#else
#define INCLUDE_ALL_OrgApacheLuceneCollationCollationAttributeFactory 1
#endif
#undef RESTRICT_OrgApacheLuceneCollationCollationAttributeFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneCollationCollationAttributeFactory_) && (INCLUDE_ALL_OrgApacheLuceneCollationCollationAttributeFactory || defined(INCLUDE_OrgApacheLuceneCollationCollationAttributeFactory))
#define OrgApacheLuceneCollationCollationAttributeFactory_

#define RESTRICT_OrgApacheLuceneUtilAttributeFactory 1
#define INCLUDE_OrgApacheLuceneUtilAttributeFactory_StaticImplementationAttributeFactory 1
#include "org/apache/lucene/util/AttributeFactory.h"

@class IOSClass;
@class JavaTextCollator;
@class OrgApacheLuceneCollationTokenattributesCollatedTermAttributeImpl;
@class OrgApacheLuceneUtilAttributeFactory;

/*!
 @brief <p>
    Converts each token into its <code>java.text.CollationKey</code>, and then
    encodes the bytes as an index term.
 </p>
  <p>
    <strong>WARNING:</strong> Make sure you use exactly the same Collator at
    index and query time -- CollationKeys are only comparable when produced by
    the same Collator.  Since <code>java.text.RuleBasedCollator</code>s are not
    independently versioned, it is unsafe to search against stored
    CollationKeys unless the following are exactly the same (best practice is
    to store this information with the index and check that they remain the
    same at query time): 
 </p>
  <ol>
    <li>JVM vendor</li>
    <li>JVM version, including patch version</li>
    <li>
      The language (and country and variant, if specified) of the Locale
      used when constructing the collator via     
 <code>Collator.getInstance(java.util.Locale)</code>.
    </li>
    <li>
      The collation strength used - see <code>Collator.setStrength(int)</code>
    </li>
  </ol>  
 <p>
    The <code>ICUCollationAttributeFactory</code> in the analysis-icu package 
    uses ICU4J's Collator, which makes its
    version available, thus allowing collation to be versioned independently
    from the JVM.  ICUCollationAttributeFactory is also significantly faster and
    generates significantly shorter keys than CollationAttributeFactory.  See   
 <a href="http://site.icu-project.org/charts/collation-icu4j-sun">
 http://site.icu-project.org/charts/collation-icu4j-sun</a> for key
    generation timing and key length comparisons between ICU4J and
    java.text.Collator over several languages. 
 </p>
  <p>
    CollationKeys generated by java.text.Collators are not compatible
    with those those generated by ICU Collators.  Specifically, if you use 
    CollationAttributeFactory to generate index terms, do not use
    ICUCollationAttributeFactory on the query side, or vice versa. 
 </p>
 */
@interface OrgApacheLuceneCollationCollationAttributeFactory : OrgApacheLuceneUtilAttributeFactory_StaticImplementationAttributeFactory

#pragma mark Public

/*!
 @brief Create a CollationAttributeFactory, using the supplied Attribute Factory 
  as the factory for all other attributes.
 @param delegate Attribute Factory
 @param collator CollationKey generator
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)delegate
                                                 withJavaTextCollator:(JavaTextCollator *)collator;

/*!
 @brief Create a CollationAttributeFactory, using  
 <code>TokenStream.DEFAULT_TOKEN_ATTRIBUTE_FACTORY</code> as the
  factory for all other attributes.
 @param collator CollationKey generator
 */
- (instancetype __nonnull)initWithJavaTextCollator:(JavaTextCollator *)collator;

- (OrgApacheLuceneCollationTokenattributesCollatedTermAttributeImpl *)createInstance;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)arg0
                                                         withIOSClass:(IOSClass *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneCollationCollationAttributeFactory)

FOUNDATION_EXPORT void OrgApacheLuceneCollationCollationAttributeFactory_initWithJavaTextCollator_(OrgApacheLuceneCollationCollationAttributeFactory *self, JavaTextCollator *collator);

FOUNDATION_EXPORT OrgApacheLuceneCollationCollationAttributeFactory *new_OrgApacheLuceneCollationCollationAttributeFactory_initWithJavaTextCollator_(JavaTextCollator *collator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCollationCollationAttributeFactory *create_OrgApacheLuceneCollationCollationAttributeFactory_initWithJavaTextCollator_(JavaTextCollator *collator);

FOUNDATION_EXPORT void OrgApacheLuceneCollationCollationAttributeFactory_initWithOrgApacheLuceneUtilAttributeFactory_withJavaTextCollator_(OrgApacheLuceneCollationCollationAttributeFactory *self, OrgApacheLuceneUtilAttributeFactory *delegate, JavaTextCollator *collator);

FOUNDATION_EXPORT OrgApacheLuceneCollationCollationAttributeFactory *new_OrgApacheLuceneCollationCollationAttributeFactory_initWithOrgApacheLuceneUtilAttributeFactory_withJavaTextCollator_(OrgApacheLuceneUtilAttributeFactory *delegate, JavaTextCollator *collator) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneCollationCollationAttributeFactory *create_OrgApacheLuceneCollationCollationAttributeFactory_initWithOrgApacheLuceneUtilAttributeFactory_withJavaTextCollator_(OrgApacheLuceneUtilAttributeFactory *delegate, JavaTextCollator *collator);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneCollationCollationAttributeFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneCollationCollationAttributeFactory")
