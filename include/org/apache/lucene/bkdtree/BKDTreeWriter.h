//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/bkdtree/BKDTreeWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDTreeWriter")
#ifdef RESTRICT_OrgApacheLuceneBkdtreeBKDTreeWriter
#define INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDTreeWriter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDTreeWriter 1
#endif
#undef RESTRICT_OrgApacheLuceneBkdtreeBKDTreeWriter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneBkdtreeBKDTreeWriter_) && (INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDTreeWriter || defined(INCLUDE_OrgApacheLuceneBkdtreeBKDTreeWriter))
#define OrgApacheLuceneBkdtreeBKDTreeWriter_

@class OrgApacheLuceneStoreIndexOutput;
@protocol OrgApacheLuceneBkdtreeLatLonWriter;

/*!
 @brief Recursively builds a BKD tree to assign all incoming points to smaller
   and smaller rectangles until the number of points in a given
   rectangle is &lt= the <code>maxPointsInLeafNode</code>.The tree is
   fully balanced, which means the leaf nodes will have between 50% and 100% of
   the requested <code>maxPointsInLeafNode</code>, except for the adversarial case
   of indexing exactly the same point many times.
 <p>
   See <a href="https://www.cs.duke.edu/~pankaj/publications/papers/bkd-sstd.pdf">this paper</a> for details.
   <p>This consumes heap during writing: it allocates a <code>LongBitSet(numPoints)</code>, 
   and for any nodes with fewer than <code>maxPointsSortInHeap</code>, it holds
   the points in memory as simple java arrays.  
 <p>
   <b>NOTE</b>: This can write at most Integer.MAX_VALUE * <code>maxPointsInLeafNode</code> total points.
 */
@interface OrgApacheLuceneBkdtreeBKDTreeWriter : NSObject
@property (readonly, class) jint BYTES_PER_DOC NS_SWIFT_NAME(BYTES_PER_DOC);
@property (readonly, class) jint DEFAULT_MAX_POINTS_IN_LEAF_NODE NS_SWIFT_NAME(DEFAULT_MAX_POINTS_IN_LEAF_NODE);
@property (readonly, class) jint DEFAULT_MAX_POINTS_SORT_IN_HEAP NS_SWIFT_NAME(DEFAULT_MAX_POINTS_SORT_IN_HEAP);
@property (readonly, class) jdouble MAX_LAT_INCL NS_SWIFT_NAME(MAX_LAT_INCL);
@property (readonly, class) jdouble MAX_LON_INCL NS_SWIFT_NAME(MAX_LON_INCL);
@property (readonly, class) jdouble MIN_LAT_INCL NS_SWIFT_NAME(MIN_LAT_INCL);
@property (readonly, class) jdouble MIN_LON_INCL NS_SWIFT_NAME(MIN_LON_INCL);
@property (readonly, class) jdouble TOLERANCE NS_SWIFT_NAME(TOLERANCE);

#pragma mark Public

- (instancetype __nonnull)initPackagePrivate;

- (instancetype __nonnull)initPackagePrivateWithInt:(jint)maxPointsInLeafNode
                                            withInt:(jint)maxPointsSortInHeap;

- (void)addWithDouble:(jdouble)lat
           withDouble:(jdouble)lon
              withInt:(jint)docID;

/*!
 @brief Writes the BKD tree to the provided <code>IndexOutput</code> and returns the file offset where index was written.
 */
- (jlong)finishWithOrgApacheLuceneStoreIndexOutput:(OrgApacheLuceneStoreIndexOutput *)outArg;

+ (void)verifyParamsWithInt:(jint)maxPointsInLeafNode
                    withInt:(jint)maxPointsSortInHeap;

#pragma mark Package-Private

- (void)addWithInt:(jint)latEnc
           withInt:(jint)lonEnc
           withInt:(jint)docID;

/*!
 @brief Turns quantized value from <code>encodeLat</code> back into a double.
 */
+ (jdouble)decodeLatWithInt:(jint)x;

/*!
 @brief Turns quantized value from <code>encodeLon</code> back into a double.
 */
+ (jdouble)decodeLonWithInt:(jint)x;

/*!
 @brief Quantizes double (64 bit) latitude into 32 bits
 */
+ (jint)encodeLatWithDouble:(jdouble)lat;

/*!
 @brief Quantizes double (64 bit) longitude into 32 bits
 */
+ (jint)encodeLonWithDouble:(jdouble)lon;

- (id<OrgApacheLuceneBkdtreeLatLonWriter>)getWriterWithLong:(jlong)count;

+ (jboolean)validLatWithDouble:(jdouble)lat;

+ (jboolean)validLonWithDouble:(jdouble)lon;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneBkdtreeBKDTreeWriter)

inline jint OrgApacheLuceneBkdtreeBKDTreeWriter_get_BYTES_PER_DOC(void);
#define OrgApacheLuceneBkdtreeBKDTreeWriter_BYTES_PER_DOC 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneBkdtreeBKDTreeWriter, BYTES_PER_DOC, jint)

inline jint OrgApacheLuceneBkdtreeBKDTreeWriter_get_DEFAULT_MAX_POINTS_IN_LEAF_NODE(void);
#define OrgApacheLuceneBkdtreeBKDTreeWriter_DEFAULT_MAX_POINTS_IN_LEAF_NODE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneBkdtreeBKDTreeWriter, DEFAULT_MAX_POINTS_IN_LEAF_NODE, jint)

/*!
 @brief This works out to max of ~10 MB peak heap tied up during writing:
 */
inline jint OrgApacheLuceneBkdtreeBKDTreeWriter_get_DEFAULT_MAX_POINTS_SORT_IN_HEAP(void);
#define OrgApacheLuceneBkdtreeBKDTreeWriter_DEFAULT_MAX_POINTS_SORT_IN_HEAP 131072
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneBkdtreeBKDTreeWriter, DEFAULT_MAX_POINTS_SORT_IN_HEAP, jint)

inline jdouble OrgApacheLuceneBkdtreeBKDTreeWriter_get_MAX_LAT_INCL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble OrgApacheLuceneBkdtreeBKDTreeWriter_MAX_LAT_INCL;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneBkdtreeBKDTreeWriter, MAX_LAT_INCL, jdouble)

inline jdouble OrgApacheLuceneBkdtreeBKDTreeWriter_get_MAX_LON_INCL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jdouble OrgApacheLuceneBkdtreeBKDTreeWriter_MAX_LON_INCL;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgApacheLuceneBkdtreeBKDTreeWriter, MAX_LON_INCL, jdouble)

inline jdouble OrgApacheLuceneBkdtreeBKDTreeWriter_get_MIN_LAT_INCL(void);
#define OrgApacheLuceneBkdtreeBKDTreeWriter_MIN_LAT_INCL -90.0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneBkdtreeBKDTreeWriter, MIN_LAT_INCL, jdouble)

inline jdouble OrgApacheLuceneBkdtreeBKDTreeWriter_get_MIN_LON_INCL(void);
#define OrgApacheLuceneBkdtreeBKDTreeWriter_MIN_LON_INCL -180.0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneBkdtreeBKDTreeWriter, MIN_LON_INCL, jdouble)

/*!
 @brief Max quantization error for both lat and lon when encoding/decoding into 32 bits
 */
inline jdouble OrgApacheLuceneBkdtreeBKDTreeWriter_get_TOLERANCE(void);
#define OrgApacheLuceneBkdtreeBKDTreeWriter_TOLERANCE 1.0E-7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneBkdtreeBKDTreeWriter, TOLERANCE, jdouble)

FOUNDATION_EXPORT void OrgApacheLuceneBkdtreeBKDTreeWriter_initPackagePrivate(OrgApacheLuceneBkdtreeBKDTreeWriter *self);

FOUNDATION_EXPORT OrgApacheLuceneBkdtreeBKDTreeWriter *new_OrgApacheLuceneBkdtreeBKDTreeWriter_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneBkdtreeBKDTreeWriter *create_OrgApacheLuceneBkdtreeBKDTreeWriter_initPackagePrivate(void);

FOUNDATION_EXPORT void OrgApacheLuceneBkdtreeBKDTreeWriter_initPackagePrivateWithInt_withInt_(OrgApacheLuceneBkdtreeBKDTreeWriter *self, jint maxPointsInLeafNode, jint maxPointsSortInHeap);

FOUNDATION_EXPORT OrgApacheLuceneBkdtreeBKDTreeWriter *new_OrgApacheLuceneBkdtreeBKDTreeWriter_initPackagePrivateWithInt_withInt_(jint maxPointsInLeafNode, jint maxPointsSortInHeap) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneBkdtreeBKDTreeWriter *create_OrgApacheLuceneBkdtreeBKDTreeWriter_initPackagePrivateWithInt_withInt_(jint maxPointsInLeafNode, jint maxPointsSortInHeap);

FOUNDATION_EXPORT void OrgApacheLuceneBkdtreeBKDTreeWriter_verifyParamsWithInt_withInt_(jint maxPointsInLeafNode, jint maxPointsSortInHeap);

FOUNDATION_EXPORT jboolean OrgApacheLuceneBkdtreeBKDTreeWriter_validLatWithDouble_(jdouble lat);

FOUNDATION_EXPORT jboolean OrgApacheLuceneBkdtreeBKDTreeWriter_validLonWithDouble_(jdouble lon);

FOUNDATION_EXPORT jint OrgApacheLuceneBkdtreeBKDTreeWriter_encodeLatWithDouble_(jdouble lat);

FOUNDATION_EXPORT jint OrgApacheLuceneBkdtreeBKDTreeWriter_encodeLonWithDouble_(jdouble lon);

FOUNDATION_EXPORT jdouble OrgApacheLuceneBkdtreeBKDTreeWriter_decodeLatWithInt_(jint x);

FOUNDATION_EXPORT jdouble OrgApacheLuceneBkdtreeBKDTreeWriter_decodeLonWithInt_(jint x);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneBkdtreeBKDTreeWriter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDTreeWriter")
