//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./sandbox/src/java/org/apache/lucene/bkdtree/BKDPointInPolygonQuery.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery")
#ifdef RESTRICT_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery
#define INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery 0
#else
#define INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery 1
#endif
#undef RESTRICT_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneBkdtreeBKDPointInPolygonQuery_) && (INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery || defined(INCLUDE_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery))
#define OrgApacheLuceneBkdtreeBKDPointInPolygonQuery_

#define RESTRICT_OrgApacheLuceneSearchQuery 1
#define INCLUDE_OrgApacheLuceneSearchQuery 1
#include "org/apache/lucene/search/Query.h"

@class IOSDoubleArray;
@class OrgApacheLuceneSearchIndexSearcher;
@class OrgApacheLuceneSearchWeight;

/*!
 @brief Finds all previously indexed points that fall within the specified polygon.
 <p>The field must be indexed with <code>BKDTreeDocValuesFormat</code>, and <code>BKDPointField</code> added per document.
   <p>Because this implementation cannot intersect each cell with the polygon, it will be costly especially for large polygons, as every
    possible point must be checked.  
 <p><b>NOTE</b>: for fastest performance, this allocates FixedBitSet(maxDoc) for each segment.  The score of each hit is the query boost.
 */
@interface OrgApacheLuceneBkdtreeBKDPointInPolygonQuery : OrgApacheLuceneSearchQuery {
 @public
  NSString *field_;
  jdouble minLat_;
  jdouble maxLat_;
  jdouble minLon_;
  jdouble maxLon_;
  IOSDoubleArray *polyLats_;
  IOSDoubleArray *polyLons_;
}

#pragma mark Public

/*!
 @brief The lats/lons must be clockwise or counter-clockwise.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)field
                           withDoubleArray:(IOSDoubleArray *)polyLats
                           withDoubleArray:(IOSDoubleArray *)polyLons;

- (OrgApacheLuceneSearchWeight *)createWeightWithOrgApacheLuceneSearchIndexSearcher:(OrgApacheLuceneSearchIndexSearcher *)searcher
                                                                        withBoolean:(jboolean)needsScores;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)toStringWithNSString:(NSString *)field;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneBkdtreeBKDPointInPolygonQuery)

J2OBJC_FIELD_SETTER(OrgApacheLuceneBkdtreeBKDPointInPolygonQuery, field_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneBkdtreeBKDPointInPolygonQuery, polyLats_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneBkdtreeBKDPointInPolygonQuery, polyLons_, IOSDoubleArray *)

FOUNDATION_EXPORT void OrgApacheLuceneBkdtreeBKDPointInPolygonQuery_initWithNSString_withDoubleArray_withDoubleArray_(OrgApacheLuceneBkdtreeBKDPointInPolygonQuery *self, NSString *field, IOSDoubleArray *polyLats, IOSDoubleArray *polyLons);

FOUNDATION_EXPORT OrgApacheLuceneBkdtreeBKDPointInPolygonQuery *new_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery_initWithNSString_withDoubleArray_withDoubleArray_(NSString *field, IOSDoubleArray *polyLats, IOSDoubleArray *polyLons) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneBkdtreeBKDPointInPolygonQuery *create_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery_initWithNSString_withDoubleArray_withDoubleArray_(NSString *field, IOSDoubleArray *polyLats, IOSDoubleArray *polyLons);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneBkdtreeBKDPointInPolygonQuery)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneBkdtreeBKDPointInPolygonQuery")
