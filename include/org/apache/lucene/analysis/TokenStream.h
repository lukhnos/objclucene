//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/analysis/TokenStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisTokenStream")
#ifdef RESTRICT_OrgApacheLuceneAnalysisTokenStream
#define INCLUDE_ALL_OrgApacheLuceneAnalysisTokenStream 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisTokenStream 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisTokenStream

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisTokenStream_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisTokenStream || defined(INCLUDE_OrgApacheLuceneAnalysisTokenStream))
#define OrgApacheLuceneAnalysisTokenStream_

#define RESTRICT_OrgApacheLuceneUtilAttributeSource 1
#define INCLUDE_OrgApacheLuceneUtilAttributeSource 1
#include "org/apache/lucene/util/AttributeSource.h"

#define RESTRICT_JavaIoCloseable 1
#define INCLUDE_JavaIoCloseable 1
#include "java/io/Closeable.h"

@class OrgApacheLuceneUtilAttributeFactory;

/*!
 @brief A <code>TokenStream</code> enumerates the sequence of tokens, either from 
 <code>Field</code>s of a <code>Document</code> or from query text.
 <p>
  This is an abstract class; concrete subclasses are: 
 <ul>
  <li><code>Tokenizer</code>, a <code>TokenStream</code> whose input is a Reader; and 
 <li><code>TokenFilter</code>, a <code>TokenStream</code> whose input is another 
 <code>TokenStream</code>.
  </ul>
  A new <code>TokenStream</code> API has been introduced with Lucene 2.9. This API
  has moved from being <code>Token</code>-based to <code>Attribute</code>-based. While 
 <code>Token</code> still exists in 2.9 as a convenience class, the preferred way
  to store the information of a <code>Token</code> is to use <code>AttributeImpl</code>s.
  <p>
  <code>TokenStream</code> now extends <code>AttributeSource</code>, which provides
  access to all of the token <code>Attribute</code>s for the <code>TokenStream</code>.
  Note that only one instance per <code>AttributeImpl</code> is created and reused
  for every token. This approach reduces object creation and allows local
  caching of references to the <code>AttributeImpl</code>s. See 
 <code>incrementToken()</code> for further details. 
 <p>
  <b>The workflow of the new <code>TokenStream</code> API is as follows:</b>
  <ol>
  <li>Instantiation of <code>TokenStream</code>/<code>TokenFilter</code>s which add/get
  attributes to/from the <code>AttributeSource</code>.
  <li>The consumer calls <code>TokenStream.reset()</code>.
  <li>The consumer retrieves attributes from the stream and stores local
  references to all attributes it wants to access. 
 <li>The consumer calls <code>incrementToken()</code> until it returns false
  consuming the attributes after each call. 
 <li>The consumer calls <code>end()</code> so that any end-of-stream operations
  can be performed. 
 <li>The consumer calls <code>close()</code> to release any resource when finished
  using the <code>TokenStream</code>.
  </ol>
  To make sure that filters and consumers know which attributes are available,
  the attributes must be added during instantiation. Filters and consumers are
  not required to check for availability of attributes in 
 <code>incrementToken()</code>.
  <p>
  You can find some example code for the new API in the analysis package level
  Javadoc. 
 <p>
  Sometimes it is desirable to capture a current state of a <code>TokenStream</code>,
  e.g., for buffering purposes (see <code>CachingTokenFilter</code>,
  TeeSinkTokenFilter). For this usecase 
 <code>AttributeSource.captureState</code> and <code>AttributeSource.restoreState</code>
  can be used. 
 <p>The <code>TokenStream</code>-API in Lucene is based on the decorator pattern.
  Therefore all non-abstract subclasses must be final or have at least a final
  implementation of <code>incrementToken</code>! This is checked when Java
  assertions are enabled.
 */
@interface OrgApacheLuceneAnalysisTokenStream : OrgApacheLuceneUtilAttributeSource < JavaIoCloseable >
@property (readonly, class, strong) OrgApacheLuceneUtilAttributeFactory *DEFAULT_TOKEN_ATTRIBUTE_FACTORY NS_SWIFT_NAME(DEFAULT_TOKEN_ATTRIBUTE_FACTORY);

#pragma mark Public

/*!
 @brief Releases resources associated with this stream.
 <p>
  If you override this method, always call <code>super.close()</code>, otherwise
  some internal state will not be correctly reset (e.g., <code>Tokenizer</code> will
  throw <code>IllegalStateException</code> on reuse).
 */
- (void)close;

/*!
 @brief This method is called by the consumer after the last token has been
  consumed, after <code>incrementToken()</code> returned <code>false</code>
  (using the new <code>TokenStream</code> API).Streams implementing the old API
  should upgrade to use this feature.
 <p>
  This method can be used to perform any end-of-stream operations, such as
  setting the final offset of a stream. The final offset of a stream might
  differ from the offset of the last token eg in case one or more whitespaces
  followed after the last token, but a WhitespaceTokenizer was used. 
 <p>
  Additionally any skipped positions (such as those removed by a stopfilter)
  can be applied to the position increment, or any adjustment of other
  attributes where the end-of-stream value may be important. 
 <p>
  If you override this method, always call <code>super.end()</code>.
 @throw IOExceptionIf an I/O error occurs
 */
- (void)end;

/*!
 @brief Consumers (i.e., <code>IndexWriter</code>) use this method to advance the stream to
  the next token.Implementing classes must implement this method and update
  the appropriate <code>AttributeImpl</code>s with the attributes of the next
  token.
 <P>
  The producer must make no assumptions about the attributes after the method
  has been returned: the caller may arbitrarily change it. If the producer
  needs to preserve the state for subsequent calls, it can use 
 <code>captureState</code> to create a copy of the current attribute state. 
 <p>
  This method is called for every token of a document, so an efficient
  implementation is crucial for good performance. To avoid calls to 
 <code>addAttribute(Class)</code> and <code>getAttribute(Class)</code>,
  references to all <code>AttributeImpl</code>s that this stream uses should be
  retrieved during instantiation. 
 <p>
  To ensure that filters and consumers know which attributes are available,
  the attributes must be added during instantiation. Filters and consumers
  are not required to check for availability of attributes in 
 <code>incrementToken()</code>.
 @return false for end of stream; true otherwise
 */
- (jboolean)incrementToken;

/*!
 @brief This method is called by a consumer before it begins consumption using 
 <code>incrementToken()</code>.
 <p>
  Resets this stream to a clean state. Stateful implementations must implement
  this method so that they can be reused, just as if they had been created fresh. 
 <p>
  If you override this method, always call <code>super.reset()</code>, otherwise
  some internal state will not be correctly reset (e.g., <code>Tokenizer</code> will
  throw <code>IllegalStateException</code> on further usage).
 */
- (void)reset;

#pragma mark Protected

/*!
 @brief A TokenStream using the default attribute factory.
 */
- (instancetype __nonnull)init;

/*!
 @brief A TokenStream using the supplied AttributeFactory for creating new <code>Attribute</code> instances.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

/*!
 @brief A TokenStream that uses the same attributes as the supplied one.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)input;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisTokenStream)

/*!
 @brief Default <code>AttributeFactory</code> instance that should be used for TokenStreams.
 */
inline OrgApacheLuceneUtilAttributeFactory *OrgApacheLuceneAnalysisTokenStream_get_DEFAULT_TOKEN_ATTRIBUTE_FACTORY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneUtilAttributeFactory *OrgApacheLuceneAnalysisTokenStream_DEFAULT_TOKEN_ATTRIBUTE_FACTORY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisTokenStream, DEFAULT_TOKEN_ATTRIBUTE_FACTORY, OrgApacheLuceneUtilAttributeFactory *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisTokenStream_init(OrgApacheLuceneAnalysisTokenStream *self);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisTokenStream_initWithOrgApacheLuceneUtilAttributeSource_(OrgApacheLuceneAnalysisTokenStream *self, OrgApacheLuceneUtilAttributeSource *input);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisTokenStream_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisTokenStream *self, OrgApacheLuceneUtilAttributeFactory *factory);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisTokenStream)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisTokenStream")
