//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/analysis/NumericTokenStream.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisNumericTokenStream")
#ifdef RESTRICT_OrgApacheLuceneAnalysisNumericTokenStream
#define INCLUDE_ALL_OrgApacheLuceneAnalysisNumericTokenStream 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisNumericTokenStream 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisNumericTokenStream
#ifdef INCLUDE_OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl
#define INCLUDE_OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttribute 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisNumericTokenStream_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisNumericTokenStream || defined(INCLUDE_OrgApacheLuceneAnalysisNumericTokenStream))
#define OrgApacheLuceneAnalysisNumericTokenStream_

#define RESTRICT_OrgApacheLuceneAnalysisTokenStream 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenStream 1
#include "org/apache/lucene/analysis/TokenStream.h"

@class OrgApacheLuceneUtilAttributeFactory;
@class OrgApacheLuceneUtilAttributeSource;

/*!
 @brief <b>Expert:</b> This class provides a <code>TokenStream</code>
  for indexing numeric values that can be used by <code>NumericRangeQuery</code>
 .
 <p>Note that for simple usage, <code>IntField</code>, <code>LongField</code>
 , <code>FloatField</code> or <code>DoubleField</code> is
  recommended.  These fields disable norms and
  term freqs, as they are not usually needed during
  searching.  If you need to change these settings, you
  should use this class. 
 <p>Here's an example usage, for an <code>int</code> field: 
 <pre class="prettyprint">
   FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);
   fieldType.setOmitNorms(true);
   fieldType.setIndexOptions(IndexOptions.DOCS_ONLY);
   Field field = new Field(name, new NumericTokenStream(precisionStep).setIntValue(value), fieldType);
   document.add(field); 
 
@endcode
  
 <p>For optimal performance, re-use the TokenStream and Field instance
  for more than one document: 
 <pre class="prettyprint">
   NumericTokenStream stream = new NumericTokenStream(precisionStep);
   FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);
   fieldType.setOmitNorms(true);
   fieldType.setIndexOptions(IndexOptions.DOCS_ONLY);
   Field field = new Field(name, stream, fieldType);
   Document document = new Document();
   document.add(field);
   for(all documents) {
     stream.setIntValue(value)
     writer.addDocument(document);
   } 
 
@endcode
  
 <p>This stream is not intended to be used in analyzers;
  it's more for iterating the different precisions during
  indexing a specific numeric value.</p>
  <p><b>NOTE</b>: as token streams are only consumed once
  the document is added to the index, if you index more
  than one numeric field, use a separate <code>NumericTokenStream</code>
  instance for each.</p>
  
 <p>See <code>NumericRangeQuery</code> for more details on the 
 <a href="../search/NumericRangeQuery.html#precisionStepDesc">
 <code>precisionStep</code></a>
  parameter as well as how numeric fields work under the hood.</p>
 @since 2.9
 */
@interface OrgApacheLuceneAnalysisNumericTokenStream : OrgApacheLuceneAnalysisTokenStream
@property (readonly, copy, class) NSString *TOKEN_TYPE_FULL_PREC NS_SWIFT_NAME(TOKEN_TYPE_FULL_PREC);
@property (readonly, copy, class) NSString *TOKEN_TYPE_LOWER_PREC NS_SWIFT_NAME(TOKEN_TYPE_LOWER_PREC);

#pragma mark Public

/*!
 @brief Creates a token stream for numeric values using the default <code>precisionStep</code>
  <code>NumericUtils.PRECISION_STEP_DEFAULT</code> (16).The stream is not yet initialized,
  before using set a value using the various set<em>???
 </em>Value() methods.
 */
- (instancetype __nonnull)init;

/*!
 @brief Expert: Creates a token stream for numeric values with the specified 
 <code>precisionStep</code> using the given 
 <code>org.apache.lucene.util.AttributeFactory</code>.
 The stream is not yet initialized,
  before using set a value using the various set<em>???</em>Value() methods.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                                              withInt:(jint)precisionStep;

/*!
 @brief Creates a token stream for numeric values with the specified 
 <code>precisionStep</code>.The stream is not yet initialized,
  before using set a value using the various set<em>???
 </em>Value() methods.
 */
- (instancetype __nonnull)initWithInt:(jint)precisionStep;

/*!
 @brief Returns the precision step.
 */
- (jint)getPrecisionStep;

- (jboolean)incrementToken;

- (void)reset;

/*!
 @brief Initializes the token stream with the supplied <code>double</code> value.
 @param value the value, for which this TokenStream should enumerate tokens.
 @return this instance, because of this you can use it the following way: 
 <code>new Field(name, new NumericTokenStream(precisionStep).setDoubleValue(value))</code>
 */
- (OrgApacheLuceneAnalysisNumericTokenStream *)setDoubleValueWithDouble:(jdouble)value;

/*!
 @brief Initializes the token stream with the supplied <code>float</code> value.
 @param value the value, for which this TokenStream should enumerate tokens.
 @return this instance, because of this you can use it the following way: 
 <code>new Field(name, new NumericTokenStream(precisionStep).setFloatValue(value))</code>
 */
- (OrgApacheLuceneAnalysisNumericTokenStream *)setFloatValueWithFloat:(jfloat)value;

/*!
 @brief Initializes the token stream with the supplied <code>int</code> value.
 @param value the value, for which this TokenStream should enumerate tokens.
 @return this instance, because of this you can use it the following way: 
 <code>new Field(name, new NumericTokenStream(precisionStep).setIntValue(value))</code>
 */
- (OrgApacheLuceneAnalysisNumericTokenStream *)setIntValueWithInt:(jint)value;

/*!
 @brief Initializes the token stream with the supplied <code>long</code> value.
 @param value the value, for which this TokenStream should enumerate tokens.
 @return this instance, because of this you can use it the following way: 
 <code>new Field(name, new NumericTokenStream(precisionStep).setLongValue(value))</code>
 */
- (OrgApacheLuceneAnalysisNumericTokenStream *)setLongValueWithLong:(jlong)value;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisNumericTokenStream)

/*!
 @brief The full precision token gets this token type assigned.
 */
inline NSString *OrgApacheLuceneAnalysisNumericTokenStream_get_TOKEN_TYPE_FULL_PREC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisNumericTokenStream_TOKEN_TYPE_FULL_PREC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisNumericTokenStream, TOKEN_TYPE_FULL_PREC, NSString *)

/*!
 @brief The lower precision tokens gets this token type assigned.
 */
inline NSString *OrgApacheLuceneAnalysisNumericTokenStream_get_TOKEN_TYPE_LOWER_PREC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisNumericTokenStream_TOKEN_TYPE_LOWER_PREC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisNumericTokenStream, TOKEN_TYPE_LOWER_PREC, NSString *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisNumericTokenStream_init(OrgApacheLuceneAnalysisNumericTokenStream *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNumericTokenStream *new_OrgApacheLuceneAnalysisNumericTokenStream_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNumericTokenStream *create_OrgApacheLuceneAnalysisNumericTokenStream_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisNumericTokenStream_initWithInt_(OrgApacheLuceneAnalysisNumericTokenStream *self, jint precisionStep);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNumericTokenStream *new_OrgApacheLuceneAnalysisNumericTokenStream_initWithInt_(jint precisionStep) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNumericTokenStream *create_OrgApacheLuceneAnalysisNumericTokenStream_initWithInt_(jint precisionStep);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisNumericTokenStream_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(OrgApacheLuceneAnalysisNumericTokenStream *self, OrgApacheLuceneUtilAttributeFactory *factory, jint precisionStep);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNumericTokenStream *new_OrgApacheLuceneAnalysisNumericTokenStream_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint precisionStep) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNumericTokenStream *create_OrgApacheLuceneAnalysisNumericTokenStream_initWithOrgApacheLuceneUtilAttributeFactory_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint precisionStep);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisNumericTokenStream)

#endif

#if !defined (OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttribute_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisNumericTokenStream || defined(INCLUDE_OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttribute))
#define OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttribute_

#define RESTRICT_OrgApacheLuceneUtilAttribute 1
#define INCLUDE_OrgApacheLuceneUtilAttribute 1
#include "org/apache/lucene/util/Attribute.h"

/*!
 @brief <b>Expert:</b> Use this attribute to get the details of the currently generated token.
 @since 4.0
 */
@protocol OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttribute < OrgApacheLuceneUtilAttribute, JavaObject >

/*!
 @brief Returns current shift value, undefined before first token
 */
- (jint)getShift;

/*!
 @brief Returns current token's raw value as <code>long</code> with all <code>getShift</code> applied, undefined before first token
 */
- (jlong)getRawValue;

/*!
 @brief Returns value size in bits (32 for <code>float</code>, <code>int</code>; 64 for <code>double</code>, <code>long</code>)
 */
- (jint)getValueSize;

/*!
 @brief <em>Don't call this method!
 </em>
 */
- (void)init__WithLong:(jlong)value
               withInt:(jint)valSize
               withInt:(jint)precisionStep
               withInt:(jint)shift OBJC_METHOD_FAMILY_NONE;

/*!
 @brief <em>Don't call this method!
 </em>
 */
- (void)setShiftWithInt:(jint)shift;

/*!
 @brief <em>Don't call this method!
 </em>
 */
- (jint)incShift;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttribute)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttribute)

#endif

#if !defined (OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisNumericTokenStream || defined(INCLUDE_OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl))
#define OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl_

#define RESTRICT_OrgApacheLuceneUtilAttributeImpl 1
#define INCLUDE_OrgApacheLuceneUtilAttributeImpl 1
#include "org/apache/lucene/util/AttributeImpl.h"

#define RESTRICT_OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute 1
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"

@class OrgApacheLuceneUtilBytesRef;
@protocol OrgApacheLuceneUtilAttributeReflector;

/*!
 @brief Implementation of <code>NumericTermAttribute</code>.
 @since 4.0
 */
@interface OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl : OrgApacheLuceneUtilAttributeImpl < OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttribute, OrgApacheLuceneAnalysisTokenattributesTermToBytesRefAttribute >

#pragma mark Public

/*!
 @brief Creates, but does not yet initialize this attribute instance
 - seealso: #init(long, int, int, int)
 */
- (instancetype __nonnull)init;

- (void)clear;

- (OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl *)java_clone;

- (void)copyToWithOrgApacheLuceneUtilAttributeImpl:(OrgApacheLuceneUtilAttributeImpl *)target OBJC_METHOD_FAMILY_NONE;

- (jboolean)isEqual:(id)obj;

- (OrgApacheLuceneUtilBytesRef *)getBytesRef;

- (jlong)getRawValue;

- (jint)getShift;

- (jint)getValueSize;

- (NSUInteger)hash;

- (jint)incShift;

- (void)init__WithLong:(jlong)value
               withInt:(jint)valueSize
               withInt:(jint)precisionStep
               withInt:(jint)shift OBJC_METHOD_FAMILY_NONE;

- (void)reflectWithWithOrgApacheLuceneUtilAttributeReflector:(id<OrgApacheLuceneUtilAttributeReflector>)reflector;

- (void)setShiftWithInt:(jint)shift;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl_init(OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl *new_OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl *create_OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisNumericTokenStream_NumericTermAttributeImpl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisNumericTokenStream")
