//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/analysis/tokenattributes/CharTermAttribute.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisTokenattributesCharTermAttribute")
#ifdef RESTRICT_OrgApacheLuceneAnalysisTokenattributesCharTermAttribute
#define INCLUDE_ALL_OrgApacheLuceneAnalysisTokenattributesCharTermAttribute 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisTokenattributesCharTermAttribute 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisTokenattributesCharTermAttribute

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisTokenattributesCharTermAttribute || defined(INCLUDE_OrgApacheLuceneAnalysisTokenattributesCharTermAttribute))
#define OrgApacheLuceneAnalysisTokenattributesCharTermAttribute_

#define RESTRICT_OrgApacheLuceneUtilAttribute 1
#define INCLUDE_OrgApacheLuceneUtilAttribute 1
#include "org/apache/lucene/util/Attribute.h"

#define RESTRICT_JavaLangCharSequence 1
#define INCLUDE_JavaLangCharSequence 1
#include "java/lang/CharSequence.h"

#define RESTRICT_JavaLangAppendable 1
#define INCLUDE_JavaLangAppendable 1
#include "java/lang/Appendable.h"

@class IOSCharArray;
@class JavaLangStringBuilder;

/*!
 @brief The term text of a Token.
 */
@protocol OrgApacheLuceneAnalysisTokenattributesCharTermAttribute < OrgApacheLuceneUtilAttribute, JavaLangCharSequence, JavaLangAppendable, JavaObject >

/*!
 @brief Copies the contents of buffer, starting at offset for
   length characters, into the termBuffer array.
 @param buffer the buffer to copy
 @param offset the index in the buffer of the first character to copy
 @param length the number of characters to copy
 */
- (void)copyBufferWithCharArray:(IOSCharArray *)buffer
                        withInt:(jint)offset
                        withInt:(jint)length OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns the internal termBuffer character array which
   you can then directly alter.If the array is too
   small for your token, use <code>resizeBuffer(int)</code>
  to increase it.
 After
   altering the buffer be sure to call <code>setLength</code>
  to record the number of valid
   characters that were placed into the termBuffer.   
 <p>
   <b>NOTE</b>: The returned buffer may be larger than
   the valid <code>length()</code>.
 */
- (IOSCharArray *)buffer;

/*!
 @brief Grows the termBuffer to at least size newSize, preserving the
   existing content.
 @param newSize minimum size of the new termBuffer
 @return newly created termBuffer with <code>length >= newSize</code>
 */
- (IOSCharArray *)resizeBufferWithInt:(jint)newSize;

/*!
 @brief Set number of valid characters (length of the term) in
   the termBuffer array.Use this to truncate the termBuffer
   or to synchronize with external manipulation of the termBuffer.
 Note: to grow the size of the array,
   use <code>resizeBuffer(int)</code> first.
 @param length the truncated length
 */
- (id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)setLengthWithInt:(jint)length;

/*!
 @brief Sets the length of the termBuffer to zero.
 Use this method before appending contents
  using the <code>Appendable</code> interface.
 */
- (id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)setEmpty;

- (id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq;

- (id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                                                                      withInt:(jint)start
                                                                                      withInt:(jint)end;

- (id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)appendWithChar:(jchar)c;

/*!
 @brief Appends the specified <code>String</code> to this character sequence.
 <p>The characters of the <code>String</code> argument are appended, in order, increasing the length of
  this sequence by the length of the argument. If argument is <code>null</code>, then the four
  characters <code>"null"</code> are appended.
 */
- (id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)appendWithNSString:(NSString *)s;

/*!
 @brief Appends the specified <code>StringBuilder</code> to this character sequence.
 <p>The characters of the <code>StringBuilder</code> argument are appended, in order, increasing the length of
  this sequence by the length of the argument. If argument is <code>null</code>, then the four
  characters <code>"null"</code> are appended.
 */
- (id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)appendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

/*!
 @brief Appends the contents of the other <code>CharTermAttribute</code> to this character sequence.
 <p>The characters of the <code>CharTermAttribute</code> argument are appended, in order, increasing the length of
  this sequence by the length of the argument. If argument is <code>null</code>, then the four
  characters <code>"null"</code> are appended.
 */
- (id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)appendWithOrgApacheLuceneAnalysisTokenattributesCharTermAttribute:(id<OrgApacheLuceneAnalysisTokenattributesCharTermAttribute>)termAtt;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisTokenattributesCharTermAttribute)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisTokenattributesCharTermAttribute)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisTokenattributesCharTermAttribute")
