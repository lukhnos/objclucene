//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer")
#ifdef RESTRICT_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer
#define INCLUDE_ALL_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer || defined(INCLUDE_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer))
#define OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_

#define RESTRICT_OrgApacheLuceneAnalysisNgramNGramTokenizer 1
#define INCLUDE_OrgApacheLuceneAnalysisNgramNGramTokenizer 1
#include "org/apache/lucene/analysis/ngram/NGramTokenizer.h"

@class OrgApacheLuceneUtilAttributeFactory;

/*!
 @brief Tokenizes the input from an edge into n-grams of given size(s).
 <p>
  This <code>Tokenizer</code> create n-grams from the beginning edge of a input token. 
 <p><a name="match_version"></a>As of Lucene 4.4, this class supports 
 <code>pre-tokenization</code> and correctly handles
  supplementary characters.
 */
@interface OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer : OrgApacheLuceneAnalysisNgramNGramTokenizer
@property (readonly, class) jint DEFAULT_MAX_GRAM_SIZE NS_SWIFT_NAME(DEFAULT_MAX_GRAM_SIZE);
@property (readonly, class) jint DEFAULT_MIN_GRAM_SIZE NS_SWIFT_NAME(DEFAULT_MIN_GRAM_SIZE);

#pragma mark Public

/*!
 @brief Creates EdgeNGramTokenizer that can generate n-grams in the sizes of the given range
 @param factory<code>org.apache.lucene.util.AttributeFactory</code>  to use
 @param minGram the smallest n-gram to generate
 @param maxGram the largest n-gram to generate
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                                              withInt:(jint)minGram
                                                              withInt:(jint)maxGram;

/*!
 @brief Creates EdgeNGramTokenizer that can generate n-grams in the sizes of the given range
 @param minGram the smallest n-gram to generate
 @param maxGram the largest n-gram to generate
 */
- (instancetype __nonnull)initWithInt:(jint)minGram
                              withInt:(jint)maxGram;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithInt:(jint)arg0
                              withInt:(jint)arg1
                          withBoolean:(jboolean)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)arg0
                                                              withInt:(jint)arg1
                                                              withInt:(jint)arg2
                                                          withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer)

inline jint OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_get_DEFAULT_MAX_GRAM_SIZE(void);
#define OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_DEFAULT_MAX_GRAM_SIZE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer, DEFAULT_MAX_GRAM_SIZE, jint)

inline jint OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_get_DEFAULT_MIN_GRAM_SIZE(void);
#define OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_DEFAULT_MIN_GRAM_SIZE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer, DEFAULT_MIN_GRAM_SIZE, jint)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_initWithInt_withInt_(OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer *self, jint minGram, jint maxGram);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer *new_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_initWithInt_withInt_(jint minGram, jint maxGram) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer *create_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_initWithInt_withInt_(jint minGram, jint maxGram);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withInt_(OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory, jint minGram, jint maxGram);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer *new_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint minGram, jint maxGram) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer *create_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withInt_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, jint minGram, jint maxGram);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisNgramEdgeNGramTokenizer")
