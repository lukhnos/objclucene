//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisHunspellDictionary")
#ifdef RESTRICT_OrgApacheLuceneAnalysisHunspellDictionary
#define INCLUDE_ALL_OrgApacheLuceneAnalysisHunspellDictionary 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisHunspellDictionary 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisHunspellDictionary

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisHunspellDictionary_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisHunspellDictionary || defined(INCLUDE_OrgApacheLuceneAnalysisHunspellDictionary))
#define OrgApacheLuceneAnalysisHunspellDictionary_

@class IOSByteArray;
@class IOSCharArray;
@class IOSIntArray;
@class JavaIoInputStream;
@class JavaLangStringBuilder;
@class JavaUtilArrayList;
@class JavaUtilRegexPattern;
@class OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy;
@class OrgApacheLuceneUtilBytesRef;
@class OrgApacheLuceneUtilBytesRefBuilder;
@class OrgApacheLuceneUtilBytesRefHash;
@class OrgApacheLuceneUtilFstFST;
@class OrgApacheLuceneUtilIntsRef;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief In-memory structure for the dictionary (.dic) and affix (.aff)
  data of a hunspell dictionary.
 */
@interface OrgApacheLuceneAnalysisHunspellDictionary : NSObject {
 @public
  OrgApacheLuceneUtilFstFST *prefixes_;
  OrgApacheLuceneUtilFstFST *suffixes_;
  JavaUtilArrayList *patterns_;
  OrgApacheLuceneUtilFstFST *words_;
  OrgApacheLuceneUtilBytesRefHash *flagLookup_;
  IOSCharArray *stripData_;
  IOSIntArray *stripOffsets_;
  IOSByteArray *affixData_;
  jboolean hasStemExceptions_;
  jboolean ignoreCase_;
  jboolean complexPrefixes_;
  jboolean twoStageAffix_;
  jint circumfix_;
  jint keepcase_;
  jint needaffix_;
  jint onlyincompound_;
  OrgApacheLuceneUtilFstFST *iconv_;
  OrgApacheLuceneUtilFstFST *oconv_;
  jboolean needsInputCleaning_;
  jboolean needsOutputCleaning_;
  jboolean fullStrip_;
  NSString *language_;
  jboolean alternateCasing_;
}
@property (readonly, class, strong) IOSCharArray *NOFLAGS NS_SWIFT_NAME(NOFLAGS);
@property (readonly, class, strong) JavaUtilRegexPattern *ENCODING_PATTERN NS_SWIFT_NAME(ENCODING_PATTERN);
@property (readonly, class, strong) id<JavaUtilMap> CHARSET_ALIASES NS_SWIFT_NAME(CHARSET_ALIASES);

#pragma mark Public

/*!
 @brief Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix
  and dictionary files.
 You have to close the provided InputStreams yourself.
 @param affix InputStream for reading the hunspell affix file (won't be closed).
 @param dictionary InputStream for reading the hunspell dictionary file (won't be closed).
 @throw IOExceptionCan be thrown while reading from the InputStreams
 @throw ParseExceptionCan be thrown if the content of the files does not meet expected formats
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)affix
                              withJavaIoInputStream:(JavaIoInputStream *)dictionary;

/*!
 @brief Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix
  and dictionary files.
 You have to close the provided InputStreams yourself.
 @param affix InputStream for reading the hunspell affix file (won't be closed).
 @param dictionaries InputStream for reading the hunspell dictionary files (won't be closed).
 @throw IOExceptionCan be thrown while reading from the InputStreams
 @throw ParseExceptionCan be thrown if the content of the files does not meet expected formats
 */
- (instancetype __nonnull)initWithJavaIoInputStream:(JavaIoInputStream *)affix
                                   withJavaUtilList:(id<JavaUtilList>)dictionaries
                                        withBoolean:(jboolean)ignoreCase;

#pragma mark Package-Private

+ (void)applyMappingsWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                         withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

/*!
 @brief folds single character (according to LANG if present)
 */
- (jchar)caseFoldWithChar:(jchar)c;

- (id<JavaLangCharSequence>)cleanInputWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                     withJavaLangStringBuilder:(JavaLangStringBuilder *)reuse;

+ (IOSCharArray *)decodeFlagsWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)b;

+ (void)encodeFlagsWithOrgApacheLuceneUtilBytesRefBuilder:(OrgApacheLuceneUtilBytesRefBuilder *)b
                                            withCharArray:(IOSCharArray *)flags;

+ (NSString *)escapeDashWithNSString:(NSString *)re;

/*!
 @brief Parses the encoding specified in the affix file readable through the provided InputStream
 @param affix InputStream for reading the affix file
 @return Encoding specified in the affix file
 @throw IOExceptionCan be thrown while reading from the InputStream
 @throw ParseExceptionThrown if the first non-empty non-comment line read from the file does not adhere to the format <code>SET <encoding></code>
 */
+ (NSString *)getDictionaryEncodingWithJavaIoInputStream:(JavaIoInputStream *)affix;

/*!
 @brief Determines the appropriate <code>FlagParsingStrategy</code> based on the FLAG definition line taken from the affix file
 @param flagLine Line containing the flag information
 @return FlagParsingStrategy that handles parsing flags in the way specified in the FLAG definition
 */
+ (OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *)getFlagParsingStrategyWithNSString:(NSString *)flagLine;

- (NSString *)getStemExceptionWithInt:(jint)id_;

+ (jboolean)hasFlagWithCharArray:(IOSCharArray *)flags
                        withChar:(jchar)flag;

+ (jint)indexOfSpaceOrTabWithNSString:(NSString *)text
                              withInt:(jint)start;

- (OrgApacheLuceneUtilIntsRef *)lookupWithOrgApacheLuceneUtilFstFST:(OrgApacheLuceneUtilFstFST *)fst
                                                      withCharArray:(IOSCharArray *)word
                                                            withInt:(jint)offset
                                                            withInt:(jint)length;

- (OrgApacheLuceneUtilIntsRef *)lookupPrefixWithCharArray:(IOSCharArray *)word
                                                  withInt:(jint)offset
                                                  withInt:(jint)length;

- (OrgApacheLuceneUtilIntsRef *)lookupSuffixWithCharArray:(IOSCharArray *)word
                                                  withInt:(jint)offset
                                                  withInt:(jint)length;

/*!
 @brief Looks up Hunspell word forms from the dictionary
 */
- (OrgApacheLuceneUtilIntsRef *)lookupWordWithCharArray:(IOSCharArray *)word
                                                withInt:(jint)offset
                                                withInt:(jint)length;

+ (jint)morphBoundaryWithNSString:(NSString *)line;

- (NSString *)unescapeEntryWithNSString:(NSString *)entry_;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisHunspellDictionary)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, prefixes_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, suffixes_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, patterns_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, words_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, flagLookup_, OrgApacheLuceneUtilBytesRefHash *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, stripData_, IOSCharArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, stripOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, affixData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, iconv_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, oconv_, OrgApacheLuceneUtilFstFST *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisHunspellDictionary, language_, NSString *)

inline IOSCharArray *OrgApacheLuceneAnalysisHunspellDictionary_get_NOFLAGS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSCharArray *OrgApacheLuceneAnalysisHunspellDictionary_NOFLAGS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, NOFLAGS, IOSCharArray *)

/*!
 @brief pattern accepts optional BOM + SET + any whitespace
 */
inline JavaUtilRegexPattern *OrgApacheLuceneAnalysisHunspellDictionary_get_ENCODING_PATTERN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *OrgApacheLuceneAnalysisHunspellDictionary_ENCODING_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, ENCODING_PATTERN, JavaUtilRegexPattern *)

inline id<JavaUtilMap> OrgApacheLuceneAnalysisHunspellDictionary_get_CHARSET_ALIASES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheLuceneAnalysisHunspellDictionary_CHARSET_ALIASES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisHunspellDictionary, CHARSET_ALIASES, id<JavaUtilMap>)

inline jchar OrgApacheLuceneAnalysisHunspellDictionary_get_FLAG_SEPARATOR(void);
#define OrgApacheLuceneAnalysisHunspellDictionary_FLAG_SEPARATOR 0x001f
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisHunspellDictionary, FLAG_SEPARATOR, jchar)

inline jchar OrgApacheLuceneAnalysisHunspellDictionary_get_MORPH_SEPARATOR(void);
#define OrgApacheLuceneAnalysisHunspellDictionary_MORPH_SEPARATOR 0x001e
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisHunspellDictionary, MORPH_SEPARATOR, jchar)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaIoInputStream_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaIoInputStream *affix, JavaIoInputStream *dictionary);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisHunspellDictionary *new_OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaIoInputStream_(JavaIoInputStream *affix, JavaIoInputStream *dictionary) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisHunspellDictionary *create_OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaIoInputStream_(JavaIoInputStream *affix, JavaIoInputStream *dictionary);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaUtilList_withBoolean_(OrgApacheLuceneAnalysisHunspellDictionary *self, JavaIoInputStream *affix, id<JavaUtilList> dictionaries, jboolean ignoreCase);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisHunspellDictionary *new_OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaUtilList_withBoolean_(JavaIoInputStream *affix, id<JavaUtilList> dictionaries, jboolean ignoreCase) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisHunspellDictionary *create_OrgApacheLuceneAnalysisHunspellDictionary_initWithJavaIoInputStream_withJavaUtilList_withBoolean_(JavaIoInputStream *affix, id<JavaUtilList> dictionaries, jboolean ignoreCase);

FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisHunspellDictionary_escapeDashWithNSString_(NSString *re);

FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisHunspellDictionary_getDictionaryEncodingWithJavaIoInputStream_(JavaIoInputStream *affix);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *OrgApacheLuceneAnalysisHunspellDictionary_getFlagParsingStrategyWithNSString_(NSString *flagLine);

FOUNDATION_EXPORT jint OrgApacheLuceneAnalysisHunspellDictionary_morphBoundaryWithNSString_(NSString *line);

FOUNDATION_EXPORT jint OrgApacheLuceneAnalysisHunspellDictionary_indexOfSpaceOrTabWithNSString_withInt_(NSString *text, jint start);

FOUNDATION_EXPORT IOSCharArray *OrgApacheLuceneAnalysisHunspellDictionary_decodeFlagsWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *b);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisHunspellDictionary_encodeFlagsWithOrgApacheLuceneUtilBytesRefBuilder_withCharArray_(OrgApacheLuceneUtilBytesRefBuilder *b, IOSCharArray *flags);

FOUNDATION_EXPORT jboolean OrgApacheLuceneAnalysisHunspellDictionary_hasFlagWithCharArray_withChar_(IOSCharArray *flags, jchar flag);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisHunspellDictionary_applyMappingsWithOrgApacheLuceneUtilFstFST_withJavaLangStringBuilder_(OrgApacheLuceneUtilFstFST *fst, JavaLangStringBuilder *sb);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisHunspellDictionary)

#endif

#if !defined (OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisHunspellDictionary || defined(INCLUDE_OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy))
#define OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy_

@class IOSCharArray;

/*!
 @brief Abstraction of the process of parsing flags taken from the affix and dic files
 */
@interface OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy : NSObject

#pragma mark Package-Private

- (instancetype __nonnull)init;

/*!
 @brief Parses the given String into a single flag
 @param rawFlag String to parse into a flag
 @return Parsed flag
 */
- (jchar)parseFlagWithNSString:(NSString *)rawFlag;

/*!
 @brief Parses the given String into multiple flags
 @param rawFlags String to parse into flags
 @return Parsed flags
 */
- (IOSCharArray *)parseFlagsWithNSString:(NSString *)rawFlags;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy_init(OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisHunspellDictionary_FlagParsingStrategy)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisHunspellDictionary")
