//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianStemFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisIdIndonesianStemFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisIdIndonesianStemFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisIdIndonesianStemFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisIdIndonesianStemFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisIdIndonesianStemFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisIdIndonesianStemFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisIdIndonesianStemFilter || defined(INCLUDE_OrgApacheLuceneAnalysisIdIndonesianStemFilter))
#define OrgApacheLuceneAnalysisIdIndonesianStemFilter_

#define RESTRICT_OrgApacheLuceneAnalysisTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenFilter 1
#include "org/apache/lucene/analysis/TokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;

/*!
 @brief A <code>TokenFilter</code> that applies <code>IndonesianStemmer</code> to stem Indonesian words.
 */
@interface OrgApacheLuceneAnalysisIdIndonesianStemFilter : OrgApacheLuceneAnalysisTokenFilter

#pragma mark Public

/*!
 @brief Calls <code>IndonesianStemFilter(input, true)</code>
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input;

/*!
 @brief Create a new IndonesianStemFilter.
 <p>
  If <code>stemDerivational</code> is false, 
  only inflectional suffixes (particles and possessive pronouns) are stemmed.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                         withBoolean:(jboolean)stemDerivational;

- (jboolean)incrementToken;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisIdIndonesianStemFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisIdIndonesianStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisIdIndonesianStemFilter *self, OrgApacheLuceneAnalysisTokenStream *input);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisIdIndonesianStemFilter *new_OrgApacheLuceneAnalysisIdIndonesianStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisIdIndonesianStemFilter *create_OrgApacheLuceneAnalysisIdIndonesianStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisIdIndonesianStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_withBoolean_(OrgApacheLuceneAnalysisIdIndonesianStemFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jboolean stemDerivational);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisIdIndonesianStemFilter *new_OrgApacheLuceneAnalysisIdIndonesianStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_withBoolean_(OrgApacheLuceneAnalysisTokenStream *input, jboolean stemDerivational) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisIdIndonesianStemFilter *create_OrgApacheLuceneAnalysisIdIndonesianStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_withBoolean_(OrgApacheLuceneAnalysisTokenStream *input, jboolean stemDerivational);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisIdIndonesianStemFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisIdIndonesianStemFilter")
