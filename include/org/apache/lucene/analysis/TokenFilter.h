//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/analysis/TokenFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisTokenFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisTokenFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisTokenFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisTokenFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisTokenFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisTokenFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisTokenFilter || defined(INCLUDE_OrgApacheLuceneAnalysisTokenFilter))
#define OrgApacheLuceneAnalysisTokenFilter_

#define RESTRICT_OrgApacheLuceneAnalysisTokenStream 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenStream 1
#include "org/apache/lucene/analysis/TokenStream.h"

@class OrgApacheLuceneUtilAttributeFactory;
@class OrgApacheLuceneUtilAttributeSource;

/*!
 @brief A TokenFilter is a TokenStream whose input is another TokenStream.
 <p>
   This is an abstract class; subclasses must override <code>incrementToken()</code>.
 - seealso: TokenStream
 */
@interface OrgApacheLuceneAnalysisTokenFilter : OrgApacheLuceneAnalysisTokenStream {
 @public
  /*!
   @brief The source of tokens for this filter.
   */
  OrgApacheLuceneAnalysisTokenStream *input_;
}

#pragma mark Public

/*!
 @brief <p>
  <b>NOTE:</b> 
  The default implementation chains the call to the input TokenStream, so
  be sure to call <code>super.close()</code> when overriding this method.
 */
- (void)close;

/*!
 @brief <p>  
 <b>NOTE:</b> 
  The default implementation chains the call to the input TokenStream, so
  be sure to call <code>super.end()</code> first when overriding this method.
 */
- (void)end;

/*!
 @brief <p>
  <b>NOTE:</b> 
  The default implementation chains the call to the input TokenStream, so
  be sure to call <code>super.reset()</code> when overriding this method.
 */
- (void)reset;

#pragma mark Protected

/*!
 @brief Construct a token stream filtering the given input.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisTokenFilter)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisTokenFilter, input_, OrgApacheLuceneAnalysisTokenStream *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisTokenFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisTokenFilter")
