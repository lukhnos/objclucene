//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/no/NorwegianLightStemFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisNoNorwegianLightStemFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter || defined(INCLUDE_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter))
#define OrgApacheLuceneAnalysisNoNorwegianLightStemFilter_

#define RESTRICT_OrgApacheLuceneAnalysisTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenFilter 1
#include "org/apache/lucene/analysis/TokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;

/*!
 @brief A <code>TokenFilter</code> that applies <code>NorwegianLightStemmer</code> to stem Norwegian
  words.
 <p>
  To prevent terms from being stemmed use an instance of 
 <code>SetKeywordMarkerFilter</code> or a custom <code>TokenFilter</code> that sets
  the <code>KeywordAttribute</code> before this <code>TokenStream</code>.
  </p>
 */
@interface OrgApacheLuceneAnalysisNoNorwegianLightStemFilter : OrgApacheLuceneAnalysisTokenFilter

#pragma mark Public

/*!
 @brief Calls <code>NorwegianLightStemFilter(input, BOKMAAL)</code>
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input;

/*!
 @brief Creates a new NorwegianLightStemFilter
 @param flags set to <code>NorwegianLightStemmer.BOKMAAL</code> , 
                       <code>NorwegianLightStemmer.NYNORSK</code> , or both.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                             withInt:(jint)flags;

- (jboolean)incrementToken;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisNoNorwegianLightStemFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisNoNorwegianLightStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisNoNorwegianLightStemFilter *self, OrgApacheLuceneAnalysisTokenStream *input);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNoNorwegianLightStemFilter *new_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNoNorwegianLightStemFilter *create_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisNoNorwegianLightStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisNoNorwegianLightStemFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jint flags);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNoNorwegianLightStemFilter *new_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint flags) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisNoNorwegianLightStemFilter *create_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint flags);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisNoNorwegianLightStemFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisNoNorwegianLightStemFilter")
