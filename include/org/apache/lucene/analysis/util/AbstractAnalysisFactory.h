//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory")
#ifdef RESTRICT_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory || defined(INCLUDE_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory))
#define OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory_

@class JavaUtilRegexPattern;
@class OrgApacheLuceneAnalysisUtilCharArraySet;
@class OrgApacheLuceneUtilVersion;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;
@protocol OrgApacheLuceneAnalysisUtilResourceLoader;

/*!
 @brief Abstract parent class for analysis factories <code>TokenizerFactory</code>,
  <code>TokenFilterFactory</code> and <code>CharFilterFactory</code>.
 <p>
  The typical lifecycle for a factory consumer is: 
 <ol>
    <li>Create factory via its constructor (or via XXXFactory.forName)
    <li>(Optional) If the factory uses resources such as files, <code>ResourceLoaderAware.inform(ResourceLoader)</code> is called to initialize those resources.
    <li>Consumer calls create() to obtain instances. 
 </ol>
 */
@interface OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory : NSObject {
 @public
  /*!
   @brief the luceneVersion arg
   */
  OrgApacheLuceneUtilVersion *luceneMatchVersion_;
}
@property (readonly, copy, class) NSString *LUCENE_MATCH_VERSION_PARAM NS_SWIFT_NAME(LUCENE_MATCH_VERSION_PARAM);

#pragma mark Public

- (NSString *)getWithJavaUtilMap:(id<JavaUtilMap>)args
                    withNSString:(NSString *)name;

- (NSString *)getWithJavaUtilMap:(id<JavaUtilMap>)args
                    withNSString:(NSString *)name
          withJavaUtilCollection:(id<JavaUtilCollection>)allowedValues;

- (NSString *)getWithJavaUtilMap:(id<JavaUtilMap>)args
                    withNSString:(NSString *)name
          withJavaUtilCollection:(id<JavaUtilCollection>)allowedValues
                    withNSString:(NSString *)defaultVal;

- (NSString *)getWithJavaUtilMap:(id<JavaUtilMap>)args
                    withNSString:(NSString *)name
          withJavaUtilCollection:(id<JavaUtilCollection>)allowedValues
                    withNSString:(NSString *)defaultVal
                     withBoolean:(jboolean)caseSensitive;

- (NSString *)getWithJavaUtilMap:(id<JavaUtilMap>)args
                    withNSString:(NSString *)name
                    withNSString:(NSString *)defaultVal;

- (jchar)getCharWithJavaUtilMap:(id<JavaUtilMap>)args
                   withNSString:(NSString *)name
                       withChar:(jchar)defaultValue;

/*!
 @return the string used to specify the concrete class name in a serialized representation: the class arg.  
          If the concrete class name was not specified via a class arg, returns <code>getClass().getName()</code>.
 */
- (NSString *)getClassArg;

- (OrgApacheLuceneUtilVersion *)getLuceneMatchVersion;

- (id<JavaUtilMap>)getOriginalArgs;

/*!
 @brief Returns whitespace- and/or comma-separated set of values, or null if none are found
 */
- (id<JavaUtilSet>)getSetWithJavaUtilMap:(id<JavaUtilMap>)args
                            withNSString:(NSString *)name;

- (jboolean)isExplicitLuceneMatchVersion;

- (NSString *)requireWithJavaUtilMap:(id<JavaUtilMap>)args
                        withNSString:(NSString *)name;

- (NSString *)requireWithJavaUtilMap:(id<JavaUtilMap>)args
                        withNSString:(NSString *)name
              withJavaUtilCollection:(id<JavaUtilCollection>)allowedValues;

- (NSString *)requireWithJavaUtilMap:(id<JavaUtilMap>)args
                        withNSString:(NSString *)name
              withJavaUtilCollection:(id<JavaUtilCollection>)allowedValues
                         withBoolean:(jboolean)caseSensitive;

- (jchar)requireCharWithJavaUtilMap:(id<JavaUtilMap>)args
                       withNSString:(NSString *)name;

- (void)setExplicitLuceneMatchVersionWithBoolean:(jboolean)isExplicitLuceneMatchVersion;

#pragma mark Protected

/*!
 @brief Initialize this factory via a set of key-value pairs.
 */
- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)args;

- (jboolean)getBooleanWithJavaUtilMap:(id<JavaUtilMap>)args
                         withNSString:(NSString *)name
                          withBoolean:(jboolean)defaultVal;

- (jfloat)getFloatWithJavaUtilMap:(id<JavaUtilMap>)args
                     withNSString:(NSString *)name
                        withFloat:(jfloat)defaultVal;

- (jint)getIntWithJavaUtilMap:(id<JavaUtilMap>)args
                 withNSString:(NSString *)name
                      withInt:(jint)defaultVal;

/*!
 @brief Returns the resource's lines (with content treated as UTF-8)
 */
- (id<JavaUtilList>)getLinesWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader
                                                             withNSString:(NSString *)resource;

/*!
 @brief Compiles a pattern for the value of the specified argument key <code>name</code>
 */
- (JavaUtilRegexPattern *)getPatternWithJavaUtilMap:(id<JavaUtilMap>)args
                                       withNSString:(NSString *)name;

/*!
 @brief same as <code>getWordSet(ResourceLoader, String, boolean)</code>,
  except the input is in snowball format.
 */
- (OrgApacheLuceneAnalysisUtilCharArraySet *)getSnowballWordSetWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader
                                                                                                withNSString:(NSString *)wordFiles
                                                                                                 withBoolean:(jboolean)ignoreCase;

/*!
 @brief Returns as <code>CharArraySet</code> from wordFiles, which
  can be a comma-separated list of filenames
 */
- (OrgApacheLuceneAnalysisUtilCharArraySet *)getWordSetWithOrgApacheLuceneAnalysisUtilResourceLoader:(id<OrgApacheLuceneAnalysisUtilResourceLoader>)loader
                                                                                        withNSString:(NSString *)wordFiles
                                                                                         withBoolean:(jboolean)ignoreCase;

- (jboolean)requireBooleanWithJavaUtilMap:(id<JavaUtilMap>)args
                             withNSString:(NSString *)name;

- (jfloat)requireFloatWithJavaUtilMap:(id<JavaUtilMap>)args
                         withNSString:(NSString *)name;

- (jint)requireIntWithJavaUtilMap:(id<JavaUtilMap>)args
                     withNSString:(NSString *)name;

/*!
 @brief Splits file names separated by comma character.
 File names can contain comma characters escaped by backslash '\'
 @param fileNames the string containing file names
 @return a list of file names with the escaping backslashed removed
 */
- (id<JavaUtilList>)splitFileNamesWithNSString:(NSString *)fileNames;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory, luceneMatchVersion_, OrgApacheLuceneUtilVersion *)

inline NSString *OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory_get_LUCENE_MATCH_VERSION_PARAM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory_LUCENE_MATCH_VERSION_PARAM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory, LUCENE_MATCH_VERSION_PARAM, NSString *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory *self, id<JavaUtilMap> args);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory")
