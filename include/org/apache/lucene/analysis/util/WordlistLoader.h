//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilWordlistLoader")
#ifdef RESTRICT_OrgApacheLuceneAnalysisUtilWordlistLoader
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilWordlistLoader 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilWordlistLoader 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisUtilWordlistLoader

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisUtilWordlistLoader_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisUtilWordlistLoader || defined(INCLUDE_OrgApacheLuceneAnalysisUtilWordlistLoader))
#define OrgApacheLuceneAnalysisUtilWordlistLoader_

@class JavaIoInputStream;
@class JavaIoReader;
@class JavaNioCharsetCharset;
@class OrgApacheLuceneAnalysisUtilCharArrayMap;
@class OrgApacheLuceneAnalysisUtilCharArraySet;
@protocol JavaUtilList;

/*!
 @brief Loader for text files that represent a list of stopwords.
 - seealso: IOUtilsto obtain <code>Reader</code> instances
 */
@interface OrgApacheLuceneAnalysisUtilWordlistLoader : NSObject

#pragma mark Public

/*!
 @brief Accesses a resource by name and returns the (non comment) lines containing
  data using the given character encoding.
 <p>
  A comment line is any line that starts with the character "#" 
 </p>
 @return a list of non-blank non-comment lines with whitespace trimmed
 @throw IOExceptionIf there is a low-level I/O error.
 */
+ (id<JavaUtilList>)getLinesWithJavaIoInputStream:(JavaIoInputStream *)stream
                        withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

/*!
 @brief Reads stopwords from a stopword list in Snowball format.
 <p>
  The snowball format is the following: 
 <ul>
  <li>Lines may contain multiple words separated by whitespace. 
 <li>The comment character is the vertical line (&#124;).
  <li>Lines may contain trailing comments. 
 </ul>
 @param reader Reader containing a Snowball stopword list
 @return A <code>CharArraySet</code> with the reader's words
 */
+ (OrgApacheLuceneAnalysisUtilCharArraySet *)getSnowballWordSetWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Reads stopwords from a stopword list in Snowball format.
 <p>
  The snowball format is the following: 
 <ul>
  <li>Lines may contain multiple words separated by whitespace. 
 <li>The comment character is the vertical line (&#124;).
  <li>Lines may contain trailing comments. 
 </ul>
 @param reader Reader containing a Snowball stopword list
 @param result the <code>CharArraySet</code>  to fill with the readers words
 @return the given <code>CharArraySet</code> with the reader's words
 */
+ (OrgApacheLuceneAnalysisUtilCharArraySet *)getSnowballWordSetWithJavaIoReader:(JavaIoReader *)reader
                                    withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)result;

/*!
 @brief Reads a stem dictionary.Each line contains: 
 @code
word<b>\t</b>stem
@endcode
  (i.e. two tab separated words)
 @return stem dictionary that overrules the stemming algorithm
 @throw IOExceptionIf there is a low-level I/O error.
 */
+ (OrgApacheLuceneAnalysisUtilCharArrayMap *)getStemDictWithJavaIoReader:(JavaIoReader *)reader
                             withOrgApacheLuceneAnalysisUtilCharArrayMap:(OrgApacheLuceneAnalysisUtilCharArrayMap *)result;

/*!
 @brief Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting
  leading and trailing whitespace).Every line of the Reader should contain only
  one word.
 The words need to be in lowercase if you make use of an
  Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
 @param reader Reader containing the wordlist
 @return A <code>CharArraySet</code> with the reader's words
 */
+ (OrgApacheLuceneAnalysisUtilCharArraySet *)getWordSetWithJavaIoReader:(JavaIoReader *)reader;

/*!
 @brief Reads lines from a Reader and adds every line as an entry to a CharArraySet (omitting
  leading and trailing whitespace).Every line of the Reader should contain only
  one word.
 The words need to be in lowercase if you make use of an
  Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
 @param reader Reader containing the wordlist
 @param result the <code>CharArraySet</code>  to fill with the readers words
 @return the given <code>CharArraySet</code> with the reader's words
 */
+ (OrgApacheLuceneAnalysisUtilCharArraySet *)getWordSetWithJavaIoReader:(JavaIoReader *)reader
                            withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)result;

/*!
 @brief Reads lines from a Reader and adds every non-comment line as an entry to a CharArraySet (omitting
  leading and trailing whitespace).Every line of the Reader should contain only
  one word.
 The words need to be in lowercase if you make use of an
  Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
 @param reader Reader containing the wordlist
 @param comment The string representing a comment.
 @return A CharArraySet with the reader's words
 */
+ (OrgApacheLuceneAnalysisUtilCharArraySet *)getWordSetWithJavaIoReader:(JavaIoReader *)reader
                                                           withNSString:(NSString *)comment;

/*!
 @brief Reads lines from a Reader and adds every non-comment line as an entry to a CharArraySet (omitting
  leading and trailing whitespace).Every line of the Reader should contain only
  one word.
 The words need to be in lowercase if you make use of an
  Analyzer which uses LowerCaseFilter (like StandardAnalyzer).
 @param reader Reader containing the wordlist
 @param comment The string representing a comment.
 @param result the <code>CharArraySet</code>  to fill with the readers words
 @return the given <code>CharArraySet</code> with the reader's words
 */
+ (OrgApacheLuceneAnalysisUtilCharArraySet *)getWordSetWithJavaIoReader:(JavaIoReader *)reader
                                                           withNSString:(NSString *)comment
                            withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)result;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisUtilWordlistLoader)

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArraySet *OrgApacheLuceneAnalysisUtilWordlistLoader_getWordSetWithJavaIoReader_withOrgApacheLuceneAnalysisUtilCharArraySet_(JavaIoReader *reader, OrgApacheLuceneAnalysisUtilCharArraySet *result);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArraySet *OrgApacheLuceneAnalysisUtilWordlistLoader_getWordSetWithJavaIoReader_(JavaIoReader *reader);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArraySet *OrgApacheLuceneAnalysisUtilWordlistLoader_getWordSetWithJavaIoReader_withNSString_(JavaIoReader *reader, NSString *comment);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArraySet *OrgApacheLuceneAnalysisUtilWordlistLoader_getWordSetWithJavaIoReader_withNSString_withOrgApacheLuceneAnalysisUtilCharArraySet_(JavaIoReader *reader, NSString *comment, OrgApacheLuceneAnalysisUtilCharArraySet *result);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArraySet *OrgApacheLuceneAnalysisUtilWordlistLoader_getSnowballWordSetWithJavaIoReader_withOrgApacheLuceneAnalysisUtilCharArraySet_(JavaIoReader *reader, OrgApacheLuceneAnalysisUtilCharArraySet *result);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArraySet *OrgApacheLuceneAnalysisUtilWordlistLoader_getSnowballWordSetWithJavaIoReader_(JavaIoReader *reader);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArrayMap *OrgApacheLuceneAnalysisUtilWordlistLoader_getStemDictWithJavaIoReader_withOrgApacheLuceneAnalysisUtilCharArrayMap_(JavaIoReader *reader, OrgApacheLuceneAnalysisUtilCharArrayMap *result);

FOUNDATION_EXPORT id<JavaUtilList> OrgApacheLuceneAnalysisUtilWordlistLoader_getLinesWithJavaIoInputStream_withJavaNioCharsetCharset_(JavaIoInputStream *stream, JavaNioCharsetCharset *charset);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisUtilWordlistLoader)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilWordlistLoader")
