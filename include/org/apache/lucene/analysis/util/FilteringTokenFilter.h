//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/FilteringTokenFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilFilteringTokenFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisUtilFilteringTokenFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilFilteringTokenFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilFilteringTokenFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisUtilFilteringTokenFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisUtilFilteringTokenFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisUtilFilteringTokenFilter || defined(INCLUDE_OrgApacheLuceneAnalysisUtilFilteringTokenFilter))
#define OrgApacheLuceneAnalysisUtilFilteringTokenFilter_

#define RESTRICT_OrgApacheLuceneAnalysisTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenFilter 1
#include "org/apache/lucene/analysis/TokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;

/*!
 @brief Abstract base class for TokenFilters that may remove tokens.
 You have to implement <code>accept</code> and return a boolean if the current
  token should be preserved. <code>incrementToken</code> uses this method
  to decide if a token should be passed to the caller.
 */
@interface OrgApacheLuceneAnalysisUtilFilteringTokenFilter : OrgApacheLuceneAnalysisTokenFilter

#pragma mark Public

/*!
 @brief Create a new <code>FilteringTokenFilter</code>.
 @param inArg the <code>TokenStream</code>  to consume
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg;

- (void)end;

- (jboolean)incrementToken;

- (void)reset;

#pragma mark Protected

/*!
 @brief Override this method and return if the current input token should be returned by <code>incrementToken</code>.
 */
- (jboolean)accept;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisUtilFilteringTokenFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilFilteringTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisUtilFilteringTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisUtilFilteringTokenFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilFilteringTokenFilter")
