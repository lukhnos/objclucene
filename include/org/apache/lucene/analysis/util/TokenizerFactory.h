//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/TokenizerFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilTokenizerFactory")
#ifdef RESTRICT_OrgApacheLuceneAnalysisUtilTokenizerFactory
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilTokenizerFactory 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilTokenizerFactory 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisUtilTokenizerFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisUtilTokenizerFactory_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisUtilTokenizerFactory || defined(INCLUDE_OrgApacheLuceneAnalysisUtilTokenizerFactory))
#define OrgApacheLuceneAnalysisUtilTokenizerFactory_

#define RESTRICT_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory 1
#define INCLUDE_OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory 1
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"

@class IOSClass;
@class JavaLangClassLoader;
@class OrgApacheLuceneAnalysisTokenizer;
@class OrgApacheLuceneUtilAttributeFactory;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief Abstract parent class for analysis factories that create <code>Tokenizer</code>
  instances.
 */
@interface OrgApacheLuceneAnalysisUtilTokenizerFactory : OrgApacheLuceneAnalysisUtilAbstractAnalysisFactory

#pragma mark Public

/*!
 @brief returns a list of all available tokenizer names from context classpath
 */
+ (id<JavaUtilSet>)availableTokenizers;

/*!
 @brief Creates a TokenStream of the specified input using the default attribute factory.
 */
- (OrgApacheLuceneAnalysisTokenizer *)create;

/*!
 @brief Creates a TokenStream of the specified input using the given AttributeFactory
 */
- (OrgApacheLuceneAnalysisTokenizer *)createWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

/*!
 @brief looks up a tokenizer by name from context classpath
 */
+ (OrgApacheLuceneAnalysisUtilTokenizerFactory *)forNameWithNSString:(NSString *)name
                                                     withJavaUtilMap:(id<JavaUtilMap>)args;

/*!
 @brief looks up a tokenizer class by name from context classpath
 */
+ (IOSClass *)lookupClassWithNSString:(NSString *)name;

/*!
 @brief Reloads the factory list from the given <code>ClassLoader</code>.
 Changes to the factories are visible after the method ends, all
  iterators (<code>availableTokenizers()</code>,...) stay consistent.   
 <p><b>NOTE:</b> Only new factories are added, existing ones are
  never removed or replaced.  
 <p><em>This method is expensive and should only be called for discovery
  of new factories on the given classpath/classloader!</em>
 */
+ (void)reloadTokenizersWithJavaLangClassLoader:(JavaLangClassLoader *)classloader;

#pragma mark Protected

/*!
 @brief Initialize this factory via a set of key-value pairs.
 */
- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)args;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisUtilTokenizerFactory)

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilTokenizerFactory *OrgApacheLuceneAnalysisUtilTokenizerFactory_forNameWithNSString_withJavaUtilMap_(NSString *name, id<JavaUtilMap> args);

FOUNDATION_EXPORT IOSClass *OrgApacheLuceneAnalysisUtilTokenizerFactory_lookupClassWithNSString_(NSString *name);

FOUNDATION_EXPORT id<JavaUtilSet> OrgApacheLuceneAnalysisUtilTokenizerFactory_availableTokenizers(void);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilTokenizerFactory_reloadTokenizersWithJavaLangClassLoader_(JavaLangClassLoader *classloader);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilTokenizerFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisUtilTokenizerFactory *self, id<JavaUtilMap> args);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisUtilTokenizerFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilTokenizerFactory")
