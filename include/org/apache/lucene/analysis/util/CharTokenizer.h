//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/CharTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilCharTokenizer")
#ifdef RESTRICT_OrgApacheLuceneAnalysisUtilCharTokenizer
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilCharTokenizer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilCharTokenizer 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisUtilCharTokenizer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisUtilCharTokenizer_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisUtilCharTokenizer || defined(INCLUDE_OrgApacheLuceneAnalysisUtilCharTokenizer))
#define OrgApacheLuceneAnalysisUtilCharTokenizer_

#define RESTRICT_OrgApacheLuceneAnalysisTokenizer 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenizer 1
#include "org/apache/lucene/analysis/Tokenizer.h"

@class OrgApacheLuceneUtilAttributeFactory;

/*!
 @brief An abstract base class for simple, character-oriented tokenizers.
 */
@interface OrgApacheLuceneAnalysisUtilCharTokenizer : OrgApacheLuceneAnalysisTokenizer

#pragma mark Public

/*!
 @brief Creates a new <code>CharTokenizer</code> instance
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a new <code>CharTokenizer</code> instance
 @param factory the attribute factory to use for this 
 <code>Tokenizer</code>
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

- (void)end;

- (jboolean)incrementToken;

- (void)reset;

#pragma mark Protected

/*!
 @brief Returns true iff a codepoint should be included in a token.This tokenizer
  generates as tokens adjacent sequences of codepoints which satisfy this
  predicate.
 Codepoints for which this is false are used to define token
  boundaries and are not included in tokens.
 */
- (jboolean)isTokenCharWithInt:(jint)c;

/*!
 @brief Called on each token character to normalize it before it is added to the
  token.The default implementation does nothing.
 Subclasses may use this to,
  e.g., lowercase tokens.
 */
- (jint)normalizeWithInt:(jint)c;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisUtilCharTokenizer)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilCharTokenizer_init(OrgApacheLuceneAnalysisUtilCharTokenizer *self);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilCharTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisUtilCharTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisUtilCharTokenizer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilCharTokenizer")
