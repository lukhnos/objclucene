//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/util/StopwordAnalyzerBase.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase")
#ifdef RESTRICT_OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase || defined(INCLUDE_OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase))
#define OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase_

#define RESTRICT_OrgApacheLuceneAnalysisAnalyzer 1
#define INCLUDE_OrgApacheLuceneAnalysisAnalyzer 1
#include "org/apache/lucene/analysis/Analyzer.h"

@class IOSClass;
@class JavaIoReader;
@class OrgApacheLuceneAnalysisAnalyzer_ReuseStrategy;
@class OrgApacheLuceneAnalysisUtilCharArraySet;
@class OrgLukhnosPortmobileFilePath;

/*!
 @brief Base class for Analyzers that need to make use of stopword sets.
 */
@interface OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase : OrgApacheLuceneAnalysisAnalyzer {
 @public
  /*!
   @brief An immutable stopword set
   */
  OrgApacheLuceneAnalysisUtilCharArraySet *stopwords_;
}

#pragma mark Public

/*!
 @brief Returns the analyzer's stopword set or an empty set if the analyzer has no
  stopwords
 @return the analyzer's stopword set or an empty set if the analyzer has no
          stopwords
 */
- (OrgApacheLuceneAnalysisUtilCharArraySet *)getStopwordSet;

#pragma mark Protected

/*!
 @brief Creates a new Analyzer with an empty stopword set
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a new instance initialized with the given stopword set
 @param stopwords the analyzer's stopword set
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)stopwords;

/*!
 @brief Creates a CharArraySet from a file resource associated with a class.
 (See
  <code>Class.getResourceAsStream(String)</code>).
 @param ignoreCase <code>
  true </code>  if the set should ignore the case of the           stopwords, otherwise 
  <code> false </code>
 @param aClass a class that is associated with the given stopwordResource
 @param resource name of the resource file associated with the given class
 @param comment comment string to ignore in the stopword file
 @return a CharArraySet containing the distinct stopwords from the given
          file
 @throw IOException
 if loading the stopwords throws an <code>IOException</code>
 */
+ (OrgApacheLuceneAnalysisUtilCharArraySet *)loadStopwordSetWithBoolean:(jboolean)ignoreCase
                                                           withIOSClass:(IOSClass *)aClass
                                                           withNSString:(NSString *)resource
                                                           withNSString:(NSString *)comment;

/*!
 @brief Creates a CharArraySet from a path.
 @param stopwords the stopwords file to load
 @return a CharArraySet containing the distinct stopwords from the given
          file
 @throw IOException
 if loading the stopwords throws an <code>IOException</code>
 */
+ (OrgApacheLuceneAnalysisUtilCharArraySet *)loadStopwordSetWithOrgLukhnosPortmobileFilePath:(OrgLukhnosPortmobileFilePath *)stopwords;

/*!
 @brief Creates a CharArraySet from a file.
 @param stopwords the stopwords reader to load
 @return a CharArraySet containing the distinct stopwords from the given
          reader
 @throw IOException
 if loading the stopwords throws an <code>IOException</code>
 */
+ (OrgApacheLuceneAnalysisUtilCharArraySet *)loadStopwordSetWithJavaIoReader:(JavaIoReader *)stopwords;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy:(OrgApacheLuceneAnalysisAnalyzer_ReuseStrategy *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase, stopwords_, OrgApacheLuceneAnalysisUtilCharArraySet *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase_initWithOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase *self, OrgApacheLuceneAnalysisUtilCharArraySet *stopwords);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase_init(OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArraySet *OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase_loadStopwordSetWithBoolean_withIOSClass_withNSString_withNSString_(jboolean ignoreCase, IOSClass *aClass, NSString *resource, NSString *comment);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArraySet *OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase_loadStopwordSetWithOrgLukhnosPortmobileFilePath_(OrgLukhnosPortmobileFilePath *stopwords);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisUtilCharArraySet *OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase_loadStopwordSetWithJavaIoReader_(JavaIoReader *stopwords);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisUtilStopwordAnalyzerBase")
