//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/standard/std40/StandardTokenizer40.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40")
#ifdef RESTRICT_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40
#define INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 || defined(INCLUDE_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40))
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_

#define RESTRICT_OrgApacheLuceneAnalysisTokenizer 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenizer 1
#include "org/apache/lucene/analysis/Tokenizer.h"

@class IOSObjectArray;
@class OrgApacheLuceneUtilAttributeFactory;

/*!
 @brief Backcompat standard tokenizer for Lucene 4.0-4.6.This supports Unicode 6.1.
 */
@interface OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 : OrgApacheLuceneAnalysisTokenizer
@property (readonly, class) jint ALPHANUM NS_SWIFT_NAME(ALPHANUM);
@property (readonly, class) jint APOSTROPHE NS_SWIFT_NAME(APOSTROPHE);
@property (readonly, class) jint ACRONYM NS_SWIFT_NAME(ACRONYM);
@property (readonly, class) jint COMPANY NS_SWIFT_NAME(COMPANY);
@property (readonly, class) jint EMAIL NS_SWIFT_NAME(EMAIL);
@property (readonly, class) jint HOST NS_SWIFT_NAME(HOST);
@property (readonly, class) jint NUM NS_SWIFT_NAME(NUM);
@property (readonly, class) jint CJ NS_SWIFT_NAME(CJ);
@property (readonly, class) jint ACRONYM_DEP NS_SWIFT_NAME(ACRONYM_DEP);
@property (readonly, class) jint SOUTHEAST_ASIAN NS_SWIFT_NAME(SOUTHEAST_ASIAN);
@property (readonly, class) jint IDEOGRAPHIC NS_SWIFT_NAME(IDEOGRAPHIC);
@property (readonly, class) jint HIRAGANA NS_SWIFT_NAME(HIRAGANA);
@property (readonly, class) jint KATAKANA NS_SWIFT_NAME(KATAKANA);
@property (readonly, class) jint HANGUL NS_SWIFT_NAME(HANGUL);
@property (readonly, class, strong) IOSObjectArray *TOKEN_TYPES NS_SWIFT_NAME(TOKEN_TYPES);

#pragma mark Public

/*!
 @brief Creates a new instance of the <code>org.apache.lucene.analysis.standard.std40.StandardTokenizer40</code>.
 See http://issues.apache.org/jira/browse/LUCENE-1068
 */
- (instancetype __nonnull)init;

/*!
 @brief Creates a new StandardTokenizer40 with a given <code>org.apache.lucene.util.AttributeFactory</code>
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

- (void)close;

- (void)end;

/*!
 - seealso: #setMaxTokenLength
 */
- (jint)getMaxTokenLength;

- (jboolean)incrementToken;

- (void)reset;

/*!
 @brief Set the max allowed token length.Any token longer
   than this is skipped.
 */
- (void)setMaxTokenLengthWithInt:(jint)length;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40)

inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_ALPHANUM(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_ALPHANUM 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, ALPHANUM, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_APOSTROPHE(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_APOSTROPHE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, APOSTROPHE, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_ACRONYM(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_ACRONYM 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, ACRONYM, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_COMPANY(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_COMPANY 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, COMPANY, jint)

inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_EMAIL(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_EMAIL 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, EMAIL, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_HOST(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_HOST 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, HOST, jint)

inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_NUM(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_NUM 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, NUM, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_CJ(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_CJ 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, CJ, jint)

/*!
 */
inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_ACRONYM_DEP(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_ACRONYM_DEP 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, ACRONYM_DEP, jint)

inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_SOUTHEAST_ASIAN(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_SOUTHEAST_ASIAN 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, SOUTHEAST_ASIAN, jint)

inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_IDEOGRAPHIC(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_IDEOGRAPHIC 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, IDEOGRAPHIC, jint)

inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_HIRAGANA(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_HIRAGANA 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, HIRAGANA, jint)

inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_KATAKANA(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_KATAKANA 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, KATAKANA, jint)

inline jint OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_HANGUL(void);
#define OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_HANGUL 13
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, HANGUL, jint)

/*!
 @brief String token types that correspond to token type int constants
 */
inline IOSObjectArray *OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_get_TOKEN_TYPES(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_TOKEN_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40, TOKEN_TYPES, IOSObjectArray *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_init(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 *new_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 *create_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 *self, OrgApacheLuceneUtilAttributeFactory *factory);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 *new_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40 *create_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisStandardStd40StandardTokenizer40")
