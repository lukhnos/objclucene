//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper")
#ifdef RESTRICT_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper
#define INCLUDE_ALL_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper || defined(INCLUDE_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper))
#define OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_

#define RESTRICT_OrgApacheLuceneAnalysisAnalyzerWrapper 1
#define INCLUDE_OrgApacheLuceneAnalysisAnalyzerWrapper 1
#include "org/apache/lucene/analysis/AnalyzerWrapper.h"

@class OrgApacheLuceneAnalysisAnalyzer;
@class OrgApacheLuceneAnalysisAnalyzer_ReuseStrategy;
@class OrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents;

/*!
 @brief A ShingleAnalyzerWrapper wraps a <code>ShingleFilter</code> around another <code>Analyzer</code>.
 <p>
  A shingle is another name for a token based n-gram. 
 </p>
 */
@interface OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper : OrgApacheLuceneAnalysisAnalyzerWrapper

#pragma mark Public

/*!
 @brief Wraps <code>StandardAnalyzer</code>.
 */
- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)defaultAnalyzer;

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)defaultAnalyzer
                                                          withInt:(jint)maxShingleSize;

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)defaultAnalyzer
                                                          withInt:(jint)minShingleSize
                                                          withInt:(jint)maxShingleSize;

/*!
 @brief Creates a new ShingleAnalyzerWrapper
 @param delegate Analyzer whose TokenStream is to be filtered
 @param minShingleSize Min shingle (token ngram) size
 @param maxShingleSize Max shingle size
 @param tokenSeparator Used to separate input stream tokens in output shingles
 @param outputUnigrams Whether or not the filter shall pass the original         tokens to the output stream
 @param outputUnigramsIfNoShingles Overrides the behavior of outputUnigrams==false for those         times when no shingles are available (because there are fewer than
          minShingleSize tokens in the input stream)?
          Note that if outputUnigrams==true, then unigrams are always output,
          regardless of whether any shingles are available.
 @param fillerToken filler token to use when positionIncrement is more than 1
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisAnalyzer:(OrgApacheLuceneAnalysisAnalyzer *)delegate
                                                          withInt:(jint)minShingleSize
                                                          withInt:(jint)maxShingleSize
                                                     withNSString:(NSString *)tokenSeparator
                                                      withBoolean:(jboolean)outputUnigrams
                                                      withBoolean:(jboolean)outputUnigramsIfNoShingles
                                                     withNSString:(NSString *)fillerToken;

/*!
 @brief Wraps <code>StandardAnalyzer</code>.
 */
- (instancetype __nonnull)initWithInt:(jint)minShingleSize
                              withInt:(jint)maxShingleSize;

- (NSString *)getFillerToken;

/*!
 @brief The max shingle (token ngram) size
 @return The max shingle (token ngram) size
 */
- (jint)getMaxShingleSize;

/*!
 @brief The min shingle (token ngram) size
 @return The min shingle (token ngram) size
 */
- (jint)getMinShingleSize;

- (NSString *)getTokenSeparator;

- (OrgApacheLuceneAnalysisAnalyzer *)getWrappedAnalyzerWithNSString:(NSString *)fieldName;

- (jboolean)isOutputUnigrams;

- (jboolean)isOutputUnigramsIfNoShingles;

#pragma mark Protected

- (OrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents *)wrapComponentsWithNSString:(NSString *)fieldName
                            withOrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents:(OrgApacheLuceneAnalysisAnalyzer_TokenStreamComponents *)components;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisAnalyzer_ReuseStrategy:(OrgApacheLuceneAnalysisAnalyzer_ReuseStrategy *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *self, OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *new_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *create_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_(OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *self, OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, jint maxShingleSize);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *new_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, jint maxShingleSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *create_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, jint maxShingleSize);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_withInt_(OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *self, OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, jint minShingleSize, jint maxShingleSize);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *new_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_withInt_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, jint minShingleSize, jint maxShingleSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *create_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_withInt_(OrgApacheLuceneAnalysisAnalyzer *defaultAnalyzer, jint minShingleSize, jint maxShingleSize);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_withInt_withNSString_withBoolean_withBoolean_withNSString_(OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *self, OrgApacheLuceneAnalysisAnalyzer *delegate, jint minShingleSize, jint maxShingleSize, NSString *tokenSeparator, jboolean outputUnigrams, jboolean outputUnigramsIfNoShingles, NSString *fillerToken);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *new_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_withInt_withNSString_withBoolean_withBoolean_withNSString_(OrgApacheLuceneAnalysisAnalyzer *delegate, jint minShingleSize, jint maxShingleSize, NSString *tokenSeparator, jboolean outputUnigrams, jboolean outputUnigramsIfNoShingles, NSString *fillerToken) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *create_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithOrgApacheLuceneAnalysisAnalyzer_withInt_withInt_withNSString_withBoolean_withBoolean_withNSString_(OrgApacheLuceneAnalysisAnalyzer *delegate, jint minShingleSize, jint maxShingleSize, NSString *tokenSeparator, jboolean outputUnigrams, jboolean outputUnigramsIfNoShingles, NSString *fillerToken);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_init(OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *new_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *create_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithInt_withInt_(OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *self, jint minShingleSize, jint maxShingleSize);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *new_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithInt_withInt_(jint minShingleSize, jint maxShingleSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper *create_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper_initWithInt_withInt_(jint minShingleSize, jint maxShingleSize);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisShingleShingleAnalyzerWrapper")
