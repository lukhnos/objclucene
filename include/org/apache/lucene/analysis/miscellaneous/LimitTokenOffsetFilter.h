//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenOffsetFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter || defined(INCLUDE_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter))
#define OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter_

#define RESTRICT_OrgApacheLuceneAnalysisTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenFilter 1
#include "org/apache/lucene/analysis/TokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;

/*!
 @brief Lets all tokens pass through until it sees one with a start offset &lt;= a
  configured limit, which won't pass and ends the stream.This can be useful to
  limit highlighting, for example.
 <p>
  By default, this filter ignores any tokens in the wrapped <code>TokenStream</code>
  once the limit has been exceeded, which can result in <code>reset()</code> being
  called prior to <code>incrementToken()</code> returning <code>false</code>.  For most 
 <code>TokenStream</code> implementations this should be acceptable, and faster
  then consuming the full stream. If you are wrapping a <code>TokenStream</code>
  which requires that the full stream of tokens be exhausted in order to
  function properly, use the 
 <code>LimitTokenOffsetFilter(TokenStream, int, boolean)</code> option.
 */
@interface OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter : OrgApacheLuceneAnalysisTokenFilter

#pragma mark Public

/*!
 @brief Lets all tokens pass through until it sees one with a start offset &lt;= <code>maxStartOffset</code>
  which won't pass and ends the stream.It won't consume any tokens afterwards.
 @param maxStartOffset the maximum start offset allowed
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                             withInt:(jint)maxStartOffset;

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                             withInt:(jint)maxStartOffset
                                                         withBoolean:(jboolean)consumeAllTokens;

- (jboolean)incrementToken;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jint maxStartOffset);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter *new_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint maxStartOffset) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter *create_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *input, jint maxStartOffset);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jint maxStartOffset, jboolean consumeAllTokens);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter *new_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(OrgApacheLuceneAnalysisTokenStream *input, jint maxStartOffset, jboolean consumeAllTokens) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter *create_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(OrgApacheLuceneAnalysisTokenStream *input, jint maxStartOffset, jboolean consumeAllTokens);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenOffsetFilter")
