//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/PatternKeywordMarkerFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter || defined(INCLUDE_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter))
#define OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter_

#define RESTRICT_OrgApacheLuceneAnalysisMiscellaneousKeywordMarkerFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisMiscellaneousKeywordMarkerFilter 1
#include "org/apache/lucene/analysis/miscellaneous/KeywordMarkerFilter.h"

@class JavaUtilRegexPattern;
@class OrgApacheLuceneAnalysisTokenStream;

/*!
 @brief Marks terms as keywords via the <code>KeywordAttribute</code>.Each token
  that matches the provided pattern is marked as a keyword by setting 
 <code>KeywordAttribute.setKeyword(boolean)</code> to <code>true</code>.
 */
@interface OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter : OrgApacheLuceneAnalysisMiscellaneousKeywordMarkerFilter

#pragma mark Public

/*!
 @brief Create a new <code>PatternKeywordMarkerFilter</code>, that marks the current
  token as a keyword if the tokens term buffer matches the provided 
 <code>Pattern</code> via the <code>KeywordAttribute</code>.
 @param inArg TokenStream to filter
 @param pattern the pattern to apply to the incoming term buffer
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                            withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

#pragma mark Protected

- (jboolean)isKeyword;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_(OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, JavaUtilRegexPattern *pattern);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter *new_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_(OrgApacheLuceneAnalysisTokenStream *inArg, JavaUtilRegexPattern *pattern) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter *create_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilRegexPattern_(OrgApacheLuceneAnalysisTokenStream *inArg, JavaUtilRegexPattern *pattern);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousPatternKeywordMarkerFilter")
