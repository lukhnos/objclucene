//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory")
#ifdef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory || defined(INCLUDE_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory))
#define OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_

#define RESTRICT_OrgApacheLuceneAnalysisUtilTokenFilterFactory 1
#define INCLUDE_OrgApacheLuceneAnalysisUtilTokenFilterFactory 1
#include "org/apache/lucene/analysis/util/TokenFilterFactory.h"

@class OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter;
@class OrgApacheLuceneAnalysisTokenStream;
@class OrgApacheLuceneAnalysisUtilCharArraySet;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;

/*!
 @brief Factory for <code>CapitalizationFilter</code>.
 <p>
  The factory takes parameters: 
 <ul>
  <li> "onlyFirstWord" - should each word be capitalized or all of the words? 
 <li> "keep" - a keep word list.  Each word that should be kept separated by whitespace. 
 <li> "keepIgnoreCase - true or false.  If true, the keep list will be considered case-insensitive. 
 <li> "forceFirstLetter" - Force the first letter to be capitalized even if it is in the keep list 
 <li> "okPrefix" - do not change word capitalization if a word begins with something in this list.
  for example if "McK" is on the okPrefix list, the word "McKinley" should not be changed to
  "Mckinley" 
 <li> "minWordLength" - how long the word needs to be to get capitalization applied.  If the
  minWordLength is 3, "and" &gt; "And" but "or" stays "or" 
 <li>"maxWordCount" - if the token contains more then maxWordCount words, the capitalization is
  assumed to be correct. 
 </ul>
  
 <pre class="prettyprint">
  &lt;fieldType name="text_cptlztn" class="solr.TextField" positionIncrementGap="100"&gt;
    &lt;analyzer&gt;
      &lt;tokenizer class="solr.WhitespaceTokenizerFactory"/&gt;
      &lt;filter class="solr.CapitalizationFilterFactory" onlyFirstWord="true"
            keep="java solr lucene" keepIgnoreCase="false"
            okPrefix="McK McD McA"/&gt;      
 &lt;/analyzer&gt;
  &lt;/fieldType&gt;
@endcode
 @since solr 1.3
 */
@interface OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory : OrgApacheLuceneAnalysisUtilTokenFilterFactory {
 @public
  OrgApacheLuceneAnalysisUtilCharArraySet *keep_;
  id<JavaUtilCollection> okPrefix_;
  jint minWordLength_;
  jint maxWordCount_;
  jint maxTokenLength_;
  jboolean onlyFirstWord_;
  jboolean forceFirstLetter_;
}
@property (readonly, copy, class) NSString *KEEP NS_SWIFT_NAME(KEEP);
@property (readonly, copy, class) NSString *KEEP_IGNORE_CASE NS_SWIFT_NAME(KEEP_IGNORE_CASE);
@property (readonly, copy, class) NSString *OK_PREFIX NS_SWIFT_NAME(OK_PREFIX);
@property (readonly, copy, class) NSString *MIN_WORD_LENGTH NS_SWIFT_NAME(MIN_WORD_LENGTH);
@property (readonly, copy, class) NSString *MAX_WORD_COUNT NS_SWIFT_NAME(MAX_WORD_COUNT);
@property (readonly, copy, class) NSString *MAX_TOKEN_LENGTH NS_SWIFT_NAME(MAX_TOKEN_LENGTH);
@property (readonly, copy, class) NSString *ONLY_FIRST_WORD NS_SWIFT_NAME(ONLY_FIRST_WORD);
@property (readonly, copy, class) NSString *FORCE_FIRST_LETTER NS_SWIFT_NAME(FORCE_FIRST_LETTER);

#pragma mark Public

/*!
 @brief Creates a new CapitalizationFilterFactory
 */
- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)args;

- (OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter *)createWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, keep_, OrgApacheLuceneAnalysisUtilCharArraySet *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, okPrefix_, id<JavaUtilCollection>)

inline NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_get_KEEP(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, KEEP, NSString *)

inline NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_get_KEEP_IGNORE_CASE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_KEEP_IGNORE_CASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, KEEP_IGNORE_CASE, NSString *)

inline NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_get_OK_PREFIX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_OK_PREFIX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, OK_PREFIX, NSString *)

inline NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_get_MIN_WORD_LENGTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MIN_WORD_LENGTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, MIN_WORD_LENGTH, NSString *)

inline NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_get_MAX_WORD_COUNT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_WORD_COUNT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, MAX_WORD_COUNT, NSString *)

inline NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_get_MAX_TOKEN_LENGTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_MAX_TOKEN_LENGTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, MAX_TOKEN_LENGTH, NSString *)

inline NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_get_ONLY_FIRST_WORD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_ONLY_FIRST_WORD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, ONLY_FIRST_WORD, NSString *)

inline NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_get_FORCE_FIRST_LETTER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_FORCE_FIRST_LETTER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory, FORCE_FIRST_LETTER, NSString *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_initWithJavaUtilMap_(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory *self, id<JavaUtilMap> args);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory *new_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_initWithJavaUtilMap_(id<JavaUtilMap> args) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory *create_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory_initWithJavaUtilMap_(id<JavaUtilMap> args);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilterFactory")
