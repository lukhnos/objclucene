//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter || defined(INCLUDE_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter))
#define OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter_

#define RESTRICT_OrgApacheLuceneAnalysisTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenFilter 1
#include "org/apache/lucene/analysis/TokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;

/*!
 @brief This TokenFilter limits the number of tokens while indexing.It is
  a replacement for the maximum field length setting inside <code>org.apache.lucene.index.IndexWriter</code>.
 <p>
  By default, this filter ignores any tokens in the wrapped <code>TokenStream</code>
  once the limit has been reached, which can result in <code>reset()</code> being 
  called prior to <code>incrementToken()</code> returning <code>false</code>.  For most  
 <code>TokenStream</code> implementations this should be acceptable, and faster 
  then consuming the full stream. If you are wrapping a <code>TokenStream</code> 
  which requires that the full stream of tokens be exhausted in order to 
  function properly, use the  
 <code>consumeAllTokens</code> 
  option.
 */
@interface OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter : OrgApacheLuceneAnalysisTokenFilter

#pragma mark Public

/*!
 @brief Build a filter that only accepts tokens up to a maximum number.
 This filter will not consume any tokens beyond the maxTokenCount limit
 - seealso: #LimitTokenCountFilter(TokenStream,int,boolean)
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                                             withInt:(jint)maxTokenCount;

/*!
 @brief Build an filter that limits the maximum number of tokens per field.
 @param inArg the stream to wrap
 @param maxTokenCount max number of tokens to produce
 @param consumeAllTokens whether all tokens from the input must be consumed even if maxTokenCount is reached.
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                                             withInt:(jint)maxTokenCount
                                                         withBoolean:(jboolean)consumeAllTokens;

- (jboolean)incrementToken;

- (void)reset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, jint maxTokenCount);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter *new_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *inArg, jint maxTokenCount) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter *create_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_(OrgApacheLuceneAnalysisTokenStream *inArg, jint maxTokenCount);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, jint maxTokenCount, jboolean consumeAllTokens);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter *new_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(OrgApacheLuceneAnalysisTokenStream *inArg, jint maxTokenCount, jboolean consumeAllTokens) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter *create_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter_initWithOrgApacheLuceneAnalysisTokenStream_withInt_withBoolean_(OrgApacheLuceneAnalysisTokenStream *inArg, jint maxTokenCount, jboolean consumeAllTokens);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousLimitTokenCountFilter")
