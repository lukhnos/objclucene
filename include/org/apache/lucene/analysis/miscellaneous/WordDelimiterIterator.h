//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterIterator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator")
#ifdef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator || defined(INCLUDE_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator))
#define OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_

@class IOSByteArray;
@class IOSCharArray;

/*!
 @brief A BreakIterator-like API for iterating over subwords in text, according to WordDelimiterFilter rules.
 */
@interface OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator : NSObject {
 @public
  IOSCharArray *text_;
  jint length_;
  /*!
   @brief start position of text, excluding leading delimiters
   */
  jint startBounds_;
  /*!
   @brief end position of text, excluding trailing delimiters
   */
  jint endBounds_;
  /*!
   @brief Beginning of subword
   */
  jint current_;
  /*!
   @brief End of subword
   */
  jint end_;
  /*!
   @brief If false, causes case changes to be ignored (subwords will only be generated
  given SUBWORD_DELIM tokens).
   (Defaults to true)
   */
  jboolean splitOnCaseChange_;
  /*!
   @brief If false, causes numeric changes to be ignored (subwords will only be generated
  given SUBWORD_DELIM tokens).
   (Defaults to true)
   */
  jboolean splitOnNumerics_;
  /*!
   @brief If true, causes trailing "'s" to be removed for each subword.
   (Defaults to true) 
 <p>
  "O'Neil's" =&gt; "O", "Neil"
   */
  jboolean stemEnglishPossessive_;
}
@property (readonly, class) jint DONE NS_SWIFT_NAME(DONE);
@property (readonly, class, strong) IOSByteArray *DEFAULT_WORD_DELIM_TABLE NS_SWIFT_NAME(DEFAULT_WORD_DELIM_TABLE);

#pragma mark Public

/*!
 @brief Computes the type of the given character
 @param ch Character whose type is to be determined
 @return Type of the character
 */
+ (jbyte)getTypeWithInt:(jint)ch;

#pragma mark Package-Private

/*!
 @brief Create a new WordDelimiterIterator operating with the supplied rules.
 @param charTypeTable table containing character types
 @param splitOnCaseChange if true, causes "PowerShot" to be two tokens; ("Power-Shot" remains two parts regards)
 @param splitOnNumerics if true, causes "j2se" to be three tokens; "j" "2" "se"
 @param stemEnglishPossessive if true, causes trailing "'s" to be removed for each subword: "O'Neil's" = &gt;  "O", "Neil"
 */
- (instancetype __nonnull)initWithByteArray:(IOSByteArray *)charTypeTable
                                withBoolean:(jboolean)splitOnCaseChange
                                withBoolean:(jboolean)splitOnNumerics
                                withBoolean:(jboolean)stemEnglishPossessive;

/*!
 @brief Determines if the current word contains only one subword.Note, it could be potentially surrounded by delimiters
 @return <code>true</code> if the current word contains only one subword, <code>false</code> otherwise
 */
- (jboolean)isSingleWord;

/*!
 @brief Advance to the next subword in the string.
 @return index of the next subword, or <code>DONE</code> if all subwords have been returned
 */
- (jint)next;

/*!
 @brief Reset the text to a new value, and reset all state
 @param text New text
 @param length length of the text
 */
- (void)setTextWithCharArray:(IOSCharArray *)text
                     withInt:(jint)length;

/*!
 @brief Return the type of the current subword.
 This currently uses the type of the first character in the subword.
 @return type of the current word
 */
- (jint)type;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator, text_, IOSCharArray *)

/*!
 @brief Indicates the end of iteration
 */
inline jint OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_get_DONE(void);
#define OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DONE -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator, DONE, jint)

inline IOSByteArray *OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_get_DEFAULT_WORD_DELIM_TABLE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_DEFAULT_WORD_DELIM_TABLE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator, DEFAULT_WORD_DELIM_TABLE, IOSByteArray *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_initWithByteArray_withBoolean_withBoolean_withBoolean_(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *self, IOSByteArray *charTypeTable, jboolean splitOnCaseChange, jboolean splitOnNumerics, jboolean stemEnglishPossessive);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *new_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_initWithByteArray_withBoolean_withBoolean_withBoolean_(IOSByteArray *charTypeTable, jboolean splitOnCaseChange, jboolean splitOnNumerics, jboolean stemEnglishPossessive) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator *create_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_initWithByteArray_withBoolean_withBoolean_withBoolean_(IOSByteArray *charTypeTable, jboolean splitOnCaseChange, jboolean splitOnNumerics, jboolean stemEnglishPossessive);

FOUNDATION_EXPORT jbyte OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator_getTypeWithInt_(jint ch);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousWordDelimiterIterator")
