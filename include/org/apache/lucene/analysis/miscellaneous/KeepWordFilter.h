//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/KeepWordFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter || defined(INCLUDE_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter))
#define OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter_

#define RESTRICT_OrgApacheLuceneAnalysisUtilFilteringTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisUtilFilteringTokenFilter 1
#include "org/apache/lucene/analysis/util/FilteringTokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;
@class OrgApacheLuceneAnalysisUtilCharArraySet;

/*!
 @brief A TokenFilter that only keeps tokens with text contained in the
  required words.This filter behaves like the inverse of StopFilter.
 @since solr 1.3
 */
@interface OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter : OrgApacheLuceneAnalysisUtilFilteringTokenFilter

#pragma mark Public

/*!
 @brief Create a new <code>KeepWordFilter</code>.
 <p><b>NOTE</b>: The words set passed to this constructor will be directly
  used by this filter and should not be modified.
 @param inArg the <code>TokenStream</code>  to consume
 @param words the words to keep
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                         withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)words;

- (jboolean)accept;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, OrgApacheLuceneAnalysisUtilCharArraySet *words);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter *new_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisTokenStream *inArg, OrgApacheLuceneAnalysisUtilCharArraySet *words) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter *create_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter_initWithOrgApacheLuceneAnalysisTokenStream_withOrgApacheLuceneAnalysisUtilCharArraySet_(OrgApacheLuceneAnalysisTokenStream *inArg, OrgApacheLuceneAnalysisUtilCharArraySet *words);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousKeepWordFilter")
