//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter || defined(INCLUDE_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter))
#define OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_

#define RESTRICT_OrgApacheLuceneAnalysisTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenFilter 1
#include "org/apache/lucene/analysis/TokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;
@class OrgApacheLuceneAnalysisUtilCharArraySet;
@protocol JavaUtilCollection;

/*!
 @brief A filter to apply normal capitalization rules to Tokens.It will make the first letter
  capital and the rest lower case.
 <p>
  This filter is particularly useful to build nice looking facet parameters.  This filter
  is not appropriate if you intend to use a prefix query.
 */
@interface OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter : OrgApacheLuceneAnalysisTokenFilter
@property (readonly, class) jint DEFAULT_MAX_WORD_COUNT NS_SWIFT_NAME(DEFAULT_MAX_WORD_COUNT);
@property (readonly, class) jint DEFAULT_MAX_TOKEN_LENGTH NS_SWIFT_NAME(DEFAULT_MAX_TOKEN_LENGTH);

#pragma mark Public

/*!
 @brief Creates a CapitalizationFilter with the default parameters.
 <p>
  Calls <code>CapitalizationFilter(in, true, null, true, null, 0, DEFAULT_MAX_WORD_COUNT, DEFAULT_MAX_TOKEN_LENGTH)</code>
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg;

/*!
 @brief Creates a CapitalizationFilter with the specified parameters.
 @param inArg input tokenstream
 @param onlyFirstWord should each word be capitalized or all of the words?
 @param keep a keep word list.  Each word that should be kept separated by whitespace.
 @param forceFirstLetter Force the first letter to be capitalized even if it is in the keep list.
 @param okPrefix do not change word capitalization if a word begins with something in this list.
 @param minWordLength how long the word needs to be to get capitalization applied.  If the                       minWordLength is 3, "and" 
  &gt;  "And" but "or" stays "or".
 @param maxWordCount if the token contains more then maxWordCount words, the capitalization is                      assumed to be correct.
 @param maxTokenLength ???
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)inArg
                                                         withBoolean:(jboolean)onlyFirstWord
                         withOrgApacheLuceneAnalysisUtilCharArraySet:(OrgApacheLuceneAnalysisUtilCharArraySet *)keep
                                                         withBoolean:(jboolean)forceFirstLetter
                                              withJavaUtilCollection:(id<JavaUtilCollection>)okPrefix
                                                             withInt:(jint)minWordLength
                                                             withInt:(jint)maxWordCount
                                                             withInt:(jint)maxTokenLength;

- (jboolean)incrementToken;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter)

inline jint OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_get_DEFAULT_MAX_WORD_COUNT(void);
#define OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_DEFAULT_MAX_WORD_COUNT 2147483647
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter, DEFAULT_MAX_WORD_COUNT, jint)

inline jint OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_get_DEFAULT_MAX_TOKEN_LENGTH(void);
#define OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_DEFAULT_MAX_TOKEN_LENGTH 2147483647
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter, DEFAULT_MAX_TOKEN_LENGTH, jint)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter *new_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *inArg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter *create_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *inArg);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_withBoolean_withOrgApacheLuceneAnalysisUtilCharArraySet_withBoolean_withJavaUtilCollection_withInt_withInt_withInt_(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter *self, OrgApacheLuceneAnalysisTokenStream *inArg, jboolean onlyFirstWord, OrgApacheLuceneAnalysisUtilCharArraySet *keep, jboolean forceFirstLetter, id<JavaUtilCollection> okPrefix, jint minWordLength, jint maxWordCount, jint maxTokenLength);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter *new_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_withBoolean_withOrgApacheLuceneAnalysisUtilCharArraySet_withBoolean_withJavaUtilCollection_withInt_withInt_withInt_(OrgApacheLuceneAnalysisTokenStream *inArg, jboolean onlyFirstWord, OrgApacheLuceneAnalysisUtilCharArraySet *keep, jboolean forceFirstLetter, id<JavaUtilCollection> okPrefix, jint minWordLength, jint maxWordCount, jint maxTokenLength) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter *create_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter_initWithOrgApacheLuceneAnalysisTokenStream_withBoolean_withOrgApacheLuceneAnalysisUtilCharArraySet_withBoolean_withJavaUtilCollection_withInt_withInt_withInt_(OrgApacheLuceneAnalysisTokenStream *inArg, jboolean onlyFirstWord, OrgApacheLuceneAnalysisUtilCharArraySet *keep, jboolean forceFirstLetter, id<JavaUtilCollection> okPrefix, jint minWordLength, jint maxWordCount, jint maxTokenLength);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisMiscellaneousCapitalizationFilter")
