//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/pattern/PatternTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisPatternPatternTokenizer")
#ifdef RESTRICT_OrgApacheLuceneAnalysisPatternPatternTokenizer
#define INCLUDE_ALL_OrgApacheLuceneAnalysisPatternPatternTokenizer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisPatternPatternTokenizer 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisPatternPatternTokenizer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisPatternPatternTokenizer_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisPatternPatternTokenizer || defined(INCLUDE_OrgApacheLuceneAnalysisPatternPatternTokenizer))
#define OrgApacheLuceneAnalysisPatternPatternTokenizer_

#define RESTRICT_OrgApacheLuceneAnalysisTokenizer 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenizer 1
#include "org/apache/lucene/analysis/Tokenizer.h"

@class IOSCharArray;
@class JavaUtilRegexPattern;
@class OrgApacheLuceneUtilAttributeFactory;

/*!
 @brief This tokenizer uses regex pattern matching to construct distinct tokens
  for the input stream.It takes two arguments:  "pattern" and "group".
 <ul>
  <li>"pattern" is the regular expression.</li>
  <li>"group" says which group to extract into tokens.</li>
   </ul>
  <p>
  group=-1 (the default) is equivalent to "split".  In this case, the tokens will
  be equivalent to the output from (without empty tokens): 
 <code>String.split(java.lang.String)</code>
  </p>
  <p>
  Using group &gt;= 0 selects the matching group as the token.  For example, if you have:<br>
  @code

   pattern = \'([^\']+)\'
   group = 0
   input = aaa 'bbb' 'ccc'
 
@endcode
  the output will be two tokens: 'bbb' and 'ccc' (including the ' marks).  With the same input
  but using group=1, the output would be: bbb and ccc (no ' marks) 
 <p>NOTE: This Tokenizer does not output tokens that are of zero length.</p>
 - seealso: Pattern
 */
@interface OrgApacheLuceneAnalysisPatternPatternTokenizer : OrgApacheLuceneAnalysisTokenizer {
 @public
  IOSCharArray *buffer_;
}

#pragma mark Public

/*!
 @brief creates a new PatternTokenizer returning tokens from group (-1 for split functionality)
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory
                                             withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                                              withInt:(jint)group;

/*!
 @brief creates a new PatternTokenizer returning tokens from group (-1 for split functionality)
 */
- (instancetype __nonnull)initWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                               withInt:(jint)group;

- (void)end;

- (jboolean)incrementToken;

- (void)reset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisPatternPatternTokenizer)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisPatternPatternTokenizer, buffer_, IOSCharArray *)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithJavaUtilRegexPattern_withInt_(OrgApacheLuceneAnalysisPatternPatternTokenizer *self, JavaUtilRegexPattern *pattern, jint group);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPatternPatternTokenizer *new_OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithJavaUtilRegexPattern_withInt_(JavaUtilRegexPattern *pattern, jint group) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPatternPatternTokenizer *create_OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithJavaUtilRegexPattern_withInt_(JavaUtilRegexPattern *pattern, jint group);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(OrgApacheLuceneAnalysisPatternPatternTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory, JavaUtilRegexPattern *pattern, jint group);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPatternPatternTokenizer *new_OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, JavaUtilRegexPattern *pattern, jint group) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPatternPatternTokenizer *create_OrgApacheLuceneAnalysisPatternPatternTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_withJavaUtilRegexPattern_withInt_(OrgApacheLuceneUtilAttributeFactory *factory, JavaUtilRegexPattern *pattern, jint group);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisPatternPatternTokenizer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisPatternPatternTokenizer")
