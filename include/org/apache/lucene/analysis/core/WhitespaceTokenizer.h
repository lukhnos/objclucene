//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/core/WhitespaceTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer")
#ifdef RESTRICT_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisCoreWhitespaceTokenizer_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer || defined(INCLUDE_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer))
#define OrgApacheLuceneAnalysisCoreWhitespaceTokenizer_

#define RESTRICT_OrgApacheLuceneAnalysisUtilCharTokenizer 1
#define INCLUDE_OrgApacheLuceneAnalysisUtilCharTokenizer 1
#include "org/apache/lucene/analysis/util/CharTokenizer.h"

@class OrgApacheLuceneUtilAttributeFactory;

/*!
 @brief A WhitespaceTokenizer is a tokenizer that divides text at whitespace.
 Adjacent sequences of non-Whitespace characters form tokens.
 */
@interface OrgApacheLuceneAnalysisCoreWhitespaceTokenizer : OrgApacheLuceneAnalysisUtilCharTokenizer

#pragma mark Public

/*!
 @brief Construct a new WhitespaceTokenizer.
 */
- (instancetype __nonnull)init;

/*!
 @brief Construct a new WhitespaceTokenizer using a given 
 <code>org.apache.lucene.util.AttributeFactory</code>.
 @param factory the attribute factory to use for this 
 <code>Tokenizer</code>
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

#pragma mark Protected

/*!
 @brief Collects only characters which do not satisfy 
 <code>Character.isWhitespace(int)</code>.
 */
- (jboolean)isTokenCharWithInt:(jint)c;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisCoreWhitespaceTokenizer)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCoreWhitespaceTokenizer_init(OrgApacheLuceneAnalysisCoreWhitespaceTokenizer *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreWhitespaceTokenizer *new_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreWhitespaceTokenizer *create_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCoreWhitespaceTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisCoreWhitespaceTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreWhitespaceTokenizer *new_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreWhitespaceTokenizer *create_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisCoreWhitespaceTokenizer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCoreWhitespaceTokenizer")
