//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/core/Lucene43TypeTokenFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter || defined(INCLUDE_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter))
#define OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_

#define RESTRICT_OrgApacheLuceneAnalysisUtilLucene43FilteringTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisUtilLucene43FilteringTokenFilter 1
#include "org/apache/lucene/analysis/util/Lucene43FilteringTokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;
@protocol JavaUtilSet;

/*!
 @brief Backcompat TypeTokenFilter for versions 4.3 and before.
 */
@interface OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter : OrgApacheLuceneAnalysisUtilLucene43FilteringTokenFilter

#pragma mark Public

- (instancetype __nonnull)initWithBoolean:(jboolean)enablePositionIncrements
   withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                          withJavaUtilSet:(id<JavaUtilSet>)stopTypes
                              withBoolean:(jboolean)useWhiteList;

#pragma mark Protected

/*!
 @brief By default accept the token if its type is not a stop type.
 When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes
 */
- (jboolean)accept;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithBoolean:(jboolean)arg0
   withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter *self, jboolean enablePositionIncrements, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter *new_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(jboolean enablePositionIncrements, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter *create_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter_initWithBoolean_withOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(jboolean enablePositionIncrements, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLucene43TypeTokenFilter")
