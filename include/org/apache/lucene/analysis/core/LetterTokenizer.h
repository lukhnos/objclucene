//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/core/LetterTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLetterTokenizer")
#ifdef RESTRICT_OrgApacheLuceneAnalysisCoreLetterTokenizer
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLetterTokenizer 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLetterTokenizer 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisCoreLetterTokenizer

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisCoreLetterTokenizer_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLetterTokenizer || defined(INCLUDE_OrgApacheLuceneAnalysisCoreLetterTokenizer))
#define OrgApacheLuceneAnalysisCoreLetterTokenizer_

#define RESTRICT_OrgApacheLuceneAnalysisUtilCharTokenizer 1
#define INCLUDE_OrgApacheLuceneAnalysisUtilCharTokenizer 1
#include "org/apache/lucene/analysis/util/CharTokenizer.h"

@class OrgApacheLuceneUtilAttributeFactory;

/*!
 @brief A LetterTokenizer is a tokenizer that divides text at non-letters.That's to
  say, it defines tokens as maximal strings of adjacent letters, as defined by
  java.lang.Character.isLetter() predicate.
 <p>
  Note: this does a decent job for most European languages, but does a terrible
  job for some Asian languages, where words are not separated by spaces. 
 </p>
 */
@interface OrgApacheLuceneAnalysisCoreLetterTokenizer : OrgApacheLuceneAnalysisUtilCharTokenizer

#pragma mark Public

/*!
 @brief Construct a new LetterTokenizer.
 */
- (instancetype __nonnull)init;

/*!
 @brief Construct a new LetterTokenizer using a given 
 <code>org.apache.lucene.util.AttributeFactory</code>.
 @param factory the attribute factory to use for this 
 <code>Tokenizer</code>
 */
- (instancetype __nonnull)initWithOrgApacheLuceneUtilAttributeFactory:(OrgApacheLuceneUtilAttributeFactory *)factory;

#pragma mark Protected

/*!
 @brief Collects only characters which satisfy 
 <code>Character.isLetter(int)</code>.
 */
- (jboolean)isTokenCharWithInt:(jint)c;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisCoreLetterTokenizer)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCoreLetterTokenizer_init(OrgApacheLuceneAnalysisCoreLetterTokenizer *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreLetterTokenizer *new_OrgApacheLuceneAnalysisCoreLetterTokenizer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreLetterTokenizer *create_OrgApacheLuceneAnalysisCoreLetterTokenizer_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCoreLetterTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneAnalysisCoreLetterTokenizer *self, OrgApacheLuceneUtilAttributeFactory *factory);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreLetterTokenizer *new_OrgApacheLuceneAnalysisCoreLetterTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreLetterTokenizer *create_OrgApacheLuceneAnalysisCoreLetterTokenizer_initWithOrgApacheLuceneUtilAttributeFactory_(OrgApacheLuceneUtilAttributeFactory *factory);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisCoreLetterTokenizer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCoreLetterTokenizer")
