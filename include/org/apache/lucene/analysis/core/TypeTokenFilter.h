//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/core/TypeTokenFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCoreTypeTokenFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisCoreTypeTokenFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCoreTypeTokenFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCoreTypeTokenFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisCoreTypeTokenFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisCoreTypeTokenFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisCoreTypeTokenFilter || defined(INCLUDE_OrgApacheLuceneAnalysisCoreTypeTokenFilter))
#define OrgApacheLuceneAnalysisCoreTypeTokenFilter_

#define RESTRICT_OrgApacheLuceneAnalysisUtilFilteringTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisUtilFilteringTokenFilter 1
#include "org/apache/lucene/analysis/util/FilteringTokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;
@protocol JavaUtilSet;

/*!
 @brief Removes tokens whose types appear in a set of blocked types from a token stream.
 */
@interface OrgApacheLuceneAnalysisCoreTypeTokenFilter : OrgApacheLuceneAnalysisUtilFilteringTokenFilter

#pragma mark Public

/*!
 @brief Create a new <code>TypeTokenFilter</code> that filters tokens out
  (useWhiteList=false).
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                     withJavaUtilSet:(id<JavaUtilSet>)stopTypes;

/*!
 @brief Create a new <code>TypeTokenFilter</code>.
 @param input the <code>TokenStream</code>  to consume
 @param stopTypes the types to filter
 @param useWhiteList if true, then tokens whose type is in stopTypes will                      be kept, otherwise they will be filtered out
 */
- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                     withJavaUtilSet:(id<JavaUtilSet>)stopTypes
                                                         withBoolean:(jboolean)useWhiteList;

#pragma mark Protected

/*!
 @brief By default accept the token if its type is not a stop type.
 When the useWhiteList parameter is set to true then accept the token if its type is contained in the stopTypes
 */
- (jboolean)accept;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisCoreTypeTokenFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(OrgApacheLuceneAnalysisCoreTypeTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreTypeTokenFilter *new_OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreTypeTokenFilter *create_OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_withBoolean_(OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes, jboolean useWhiteList);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_(OrgApacheLuceneAnalysisCoreTypeTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreTypeTokenFilter *new_OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_(OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCoreTypeTokenFilter *create_OrgApacheLuceneAnalysisCoreTypeTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withJavaUtilSet_(OrgApacheLuceneAnalysisTokenStream *input, id<JavaUtilSet> stopTypes);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisCoreTypeTokenFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCoreTypeTokenFilter")
