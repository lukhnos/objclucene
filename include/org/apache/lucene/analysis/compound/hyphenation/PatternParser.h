//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser")
#ifdef RESTRICT_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser || defined(INCLUDE_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser))
#define OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_

#define RESTRICT_OrgXmlSaxHelpersDefaultHandler 1
#define INCLUDE_OrgXmlSaxHelpersDefaultHandler 1
#include "org/xml/sax/helpers/DefaultHandler.h"

@class IOSCharArray;
@class JavaLangStringBuilder;
@class JavaUtilArrayList;
@class OrgXmlSaxInputSource;
@protocol OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer;
@protocol OrgXmlSaxAttributes;
@protocol OrgXmlSaxXMLReader;

/*!
 @brief A SAX document handler to read and parse hyphenation patterns from a XML
  file.
 This class has been taken from the Apache FOP project (http://xmlgraphics.apache.org/fop/). They have been slightly modified.
 */
@interface OrgApacheLuceneAnalysisCompoundHyphenationPatternParser : OrgXmlSaxHelpersDefaultHandler {
 @public
  id<OrgXmlSaxXMLReader> parser_;
  jint currElement_;
  id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer> consumer_;
  JavaLangStringBuilder *token_;
  JavaUtilArrayList *exception_;
  jchar hyphenChar_;
  NSString *errMsg_;
}
@property (readonly, class) jint ELEM_CLASSES NS_SWIFT_NAME(ELEM_CLASSES);
@property (readonly, class) jint ELEM_EXCEPTIONS NS_SWIFT_NAME(ELEM_EXCEPTIONS);
@property (readonly, class) jint ELEM_PATTERNS NS_SWIFT_NAME(ELEM_PATTERNS);
@property (readonly, class) jint ELEM_HYPHEN NS_SWIFT_NAME(ELEM_HYPHEN);

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer:(id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>)consumer;

/*!
 - seealso: org.xml.sax.ContentHandler#characters(char[], int, int)
 */
- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length;

/*!
 - seealso: org.xml.sax.ContentHandler#endElement(java.lang.String,
      java.lang.String, java.lang.String)
 */
- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)local
                  withNSString:(NSString *)raw;

/*!
 @brief Parses a hyphenation pattern file.
 @param source the InputSource for the file
 @throw IOExceptionIn case of an exception while parsing
 */
- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source;

/*!
 @brief Parses a hyphenation pattern file.
 @param filename the filename
 @throw IOExceptionIn case of an exception while parsing
 */
- (void)parseWithNSString:(NSString *)filename;

- (OrgXmlSaxInputSource *)resolveEntityWithNSString:(NSString *)publicId
                                       withNSString:(NSString *)systemId;

- (void)setConsumerWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer:(id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>)consumer;

/*!
 - seealso: org.xml.sax.ContentHandler#startElement(java.lang.String,
      java.lang.String, java.lang.String, org.xml.sax.Attributes)
 */
- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)local
                    withNSString:(NSString *)raw
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attrs;

#pragma mark Protected

- (NSString *)getExceptionWordWithJavaUtilArrayList:(JavaUtilArrayList *)ex;

+ (NSString *)getInterletterValuesWithNSString:(NSString *)pat;

+ (NSString *)getPatternWithNSString:(NSString *)word;

- (JavaUtilArrayList *)normalizeExceptionWithJavaUtilArrayList:(JavaUtilArrayList *)ex;

- (NSString *)readTokenWithJavaLangStringBuilder:(JavaLangStringBuilder *)chars;

#pragma mark Package-Private

/*!
 @brief Creates a SAX parser using JAXP
 @return the created SAX parser
 */
+ (id<OrgXmlSaxXMLReader>)createParser;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser)

J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, parser_, id<OrgXmlSaxXMLReader>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, consumer_, id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer>)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, token_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, exception_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, errMsg_, NSString *)

inline jint OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_get_ELEM_CLASSES(void);
#define OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_CLASSES 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, ELEM_CLASSES, jint)

inline jint OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_get_ELEM_EXCEPTIONS(void);
#define OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_EXCEPTIONS 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, ELEM_EXCEPTIONS, jint)

inline jint OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_get_ELEM_PATTERNS(void);
#define OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_PATTERNS 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, ELEM_PATTERNS, jint)

inline jint OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_get_ELEM_HYPHEN(void);
#define OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_ELEM_HYPHEN 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser, ELEM_HYPHEN, jint)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_init(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *self);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *new_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *create_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_init(void);

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *self, id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer> consumer);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *new_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_(id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer> consumer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisCompoundHyphenationPatternParser *create_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_initWithOrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer_(id<OrgApacheLuceneAnalysisCompoundHyphenationPatternConsumer> consumer);

FOUNDATION_EXPORT id<OrgXmlSaxXMLReader> OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_createParser(void);

FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getPatternWithNSString_(NSString *word);

FOUNDATION_EXPORT NSString *OrgApacheLuceneAnalysisCompoundHyphenationPatternParser_getInterletterValuesWithNSString_(NSString *pat);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisCompoundHyphenationPatternParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisCompoundHyphenationPatternParser")
