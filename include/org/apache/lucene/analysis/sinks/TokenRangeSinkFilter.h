//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/sinks/TokenRangeSinkFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter || defined(INCLUDE_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter))
#define OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_

#define RESTRICT_OrgApacheLuceneAnalysisSinksTeeSinkTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisSinksTeeSinkTokenFilter_SinkFilter 1
#include "org/apache/lucene/analysis/sinks/TeeSinkTokenFilter.h"

@class OrgApacheLuceneUtilAttributeSource;

/*!
 @brief Counts the tokens as they go by and saves to the internal list those between the range of lower and upper, exclusive of upper
 */
@interface OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter : OrgApacheLuceneAnalysisSinksTeeSinkTokenFilter_SinkFilter

#pragma mark Public

- (instancetype __nonnull)initWithInt:(jint)lower
                              withInt:(jint)upper;

- (jboolean)acceptWithOrgApacheLuceneUtilAttributeSource:(OrgApacheLuceneUtilAttributeSource *)source;

- (void)reset;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter *self, jint lower, jint upper);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter *new_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(jint lower, jint upper) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter *create_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter_initWithInt_withInt_(jint lower, jint upper);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisSinksTokenRangeSinkFilter")
