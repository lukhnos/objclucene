//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter || defined(INCLUDE_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter))
#define OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter_

#define RESTRICT_OrgApacheLuceneAnalysisTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenFilter 1
#include "org/apache/lucene/analysis/TokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;

/*!
 @brief Assigns a payload to a token based on the <code>org.apache.lucene.analysis.Token.type()</code>
 */
@interface OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter : OrgApacheLuceneAnalysisTokenFilter

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input
                                                           withFloat:(jfloat)payload
                                                        withNSString:(NSString *)typeMatch;

- (jboolean)incrementToken;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withFloat_withNSString_(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input, jfloat payload, NSString *typeMatch);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter *new_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withFloat_withNSString_(OrgApacheLuceneAnalysisTokenStream *input, jfloat payload, NSString *typeMatch) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter *create_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_withFloat_withNSString_(OrgApacheLuceneAnalysisTokenStream *input, jfloat payload, NSString *typeMatch);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsNumericPayloadTokenFilter")
