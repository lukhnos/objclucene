//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./analysis/common/src/java/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter")
#ifdef RESTRICT_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter
#define INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter 0
#else
#define INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter 1
#endif
#undef RESTRICT_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter_) && (INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter || defined(INCLUDE_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter))
#define OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter_

#define RESTRICT_OrgApacheLuceneAnalysisTokenFilter 1
#define INCLUDE_OrgApacheLuceneAnalysisTokenFilter 1
#include "org/apache/lucene/analysis/TokenFilter.h"

@class OrgApacheLuceneAnalysisTokenStream;

/*!
 @brief Makes the <code>org.apache.lucene.analysis.Token.type()</code> a payload.
 Encodes the type using <code>String.getBytes(String)</code> with "UTF-8" as the encoding
 */
@interface OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter : OrgApacheLuceneAnalysisTokenFilter

#pragma mark Public

- (instancetype __nonnull)initWithOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)input;

- (jboolean)incrementToken;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter)

FOUNDATION_EXPORT void OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter *self, OrgApacheLuceneAnalysisTokenStream *input);

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter *new_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter *create_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter_initWithOrgApacheLuceneAnalysisTokenStream_(OrgApacheLuceneAnalysisTokenStream *input);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneAnalysisPayloadsTypeAsPayloadTokenFilter")
