//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/document/DoubleField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneDocumentDoubleField")
#ifdef RESTRICT_OrgApacheLuceneDocumentDoubleField
#define INCLUDE_ALL_OrgApacheLuceneDocumentDoubleField 0
#else
#define INCLUDE_ALL_OrgApacheLuceneDocumentDoubleField 1
#endif
#undef RESTRICT_OrgApacheLuceneDocumentDoubleField

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneDocumentDoubleField_) && (INCLUDE_ALL_OrgApacheLuceneDocumentDoubleField || defined(INCLUDE_OrgApacheLuceneDocumentDoubleField))
#define OrgApacheLuceneDocumentDoubleField_

#define RESTRICT_OrgApacheLuceneDocumentField 1
#define INCLUDE_OrgApacheLuceneDocumentField 1
#include "org/apache/lucene/document/Field.h"

@class IOSByteArray;
@class JavaIoReader;
@class OrgApacheLuceneAnalysisTokenStream;
@class OrgApacheLuceneDocumentFieldType;
@class OrgApacheLuceneDocumentField_Index;
@class OrgApacheLuceneDocumentField_Store;
@class OrgApacheLuceneDocumentField_TermVector;
@class OrgApacheLuceneUtilBytesRef;

/*!
 @brief <p>
  Field that indexes <code>double</code> values
  for efficient range filtering and sorting.
 Here's an example usage:  
 <pre class="prettyprint">
  document.add(new DoubleField(name, 6.0, Field.Store.NO)); 
 
@endcode
  
  For optimal performance, re-use the <code>DoubleField</code> and 
 <code>Document</code> instance for more than one document:  
 <pre class="prettyprint">
   DoubleField field = new DoubleField(name, 0.0, Field.Store.NO);
   Document document = new Document();
   document.add(field); 
   for(all documents) {
     ...
     field.setDoubleValue(value)
     writer.addDocument(document);
     ...
   } 
 
@endcode
  See also <code>IntField</code>, <code>LongField</code>, <code>FloatField</code>
 .
  
 <p>To perform range querying or filtering against a 
 <code>DoubleField</code>, use <code>NumericRangeQuery</code>.
  To sort according to a 
 <code>DoubleField</code>, use the normal numeric sort types, eg 
 <code>org.apache.lucene.search.SortField.Type.DOUBLE</code>. <code>DoubleField</code> 
  values can also be loaded directly from <code>org.apache.lucene.index.LeafReader.getNumericDocValues</code>.</p>
  
 <p>You may add the same field name as an <code>DoubleField</code> to
  the same document more than once.  Range querying and
  filtering will be the logical OR of all values; so a range query
  will hit all documents that have at least one value in
  the range. However sort behavior is not defined.  If you need to sort,
  you should separately index a single-valued <code>DoubleField</code>.</p>
  
 <p>A <code>DoubleField</code> will consume somewhat more disk space
  in the index than an ordinary single-valued field.
  However, for a typical index that includes substantial
  textual content per document, this increase will likely
  be in the noise. </p>
  
 <p>Within Lucene, each numeric value is indexed as a 
 <em>trie</em> structure, where each term is logically
  assigned to larger and larger pre-defined brackets (which
  are simply lower-precision representations of the value).
  The step size between each successive bracket is called the 
 <code>precisionStep</code>, measured in bits.  Smaller 
 <code>precisionStep</code> values result in larger number
  of brackets, which consumes more disk space in the index
  but may result in faster range search performance.  The
  default value, 16, was selected for a reasonable tradeoff
  of disk space consumption versus performance.  You can
  create a custom <code>FieldType</code> and invoke the <code>FieldType.setNumericPrecisionStep</code>
  method if you'd
  like to change the value.  Note that you must also
  specify a congruent value when creating <code>NumericRangeQuery</code>
 .
  For low cardinality fields larger precision steps are good.
  If the cardinality is &lt; 100, it is fair
  to use <code>Integer.MAX_VALUE</code>, which produces one
  term per value. 
 <p>For more information on the internals of numeric trie
  indexing, including the <a href="../search/NumericRangeQuery.html#precisionStepDesc">
 <code>precisionStep</code></a>
  configuration, see <code>NumericRangeQuery</code>. The format of
  indexed values is described in <code>NumericUtils</code>.
  
 <p>If you only need to sort by numeric value, and never
  run range querying/filtering, you can index using a 
 <code>precisionStep</code> of <code>Integer.MAX_VALUE</code>.
  This will minimize disk space consumed. </p>
  
 <p>More advanced users can instead use <code>NumericTokenStream</code>
  directly, when indexing numbers. This
  class is a wrapper around this token stream type for
  easier, more intuitive usage.</p>
 @since 2.9
 */
@interface OrgApacheLuceneDocumentDoubleField : OrgApacheLuceneDocumentField
@property (readonly, class, strong) OrgApacheLuceneDocumentFieldType *TYPE_NOT_STORED NS_SWIFT_NAME(TYPE_NOT_STORED);
@property (readonly, class, strong) OrgApacheLuceneDocumentFieldType *TYPE_STORED NS_SWIFT_NAME(TYPE_STORED);

#pragma mark Public

/*!
 @brief Expert: allows you to customize the <code>FieldType</code>
 .
 @param name field name
 @param value 64-bit double value
 @param type customized field type: must have <code>FieldType.numericType()</code>          of 
 <code>FieldType.NumericType.DOUBLE</code> .
 @throw IllegalArgumentExceptionif the field name or type is null, or
           if the field type does not have a DOUBLE numericType()
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                                withDouble:(jdouble)value
      withOrgApacheLuceneDocumentFieldType:(OrgApacheLuceneDocumentFieldType *)type;

/*!
 @brief Creates a stored or un-stored DoubleField with the provided value
   and default <code>precisionStep</code> <code>NumericUtils.PRECISION_STEP_DEFAULT</code>
  (16).
 @param name field name
 @param value 64-bit double value
 @param stored Store.YES if the content should also be stored
 @throw IllegalArgumentExceptionif the field name is null.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)name
                                withDouble:(jdouble)value
    withOrgApacheLuceneDocumentField_Store:(OrgApacheLuceneDocumentField_Store *)stored;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                             withByteArray:(IOSByteArray *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                             withByteArray:(IOSByteArray *)arg1
                                   withInt:(jint)arg2
                                   withInt:(jint)arg3 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                             withByteArray:(IOSByteArray *)arg1
                                   withInt:(jint)arg2
                                   withInt:(jint)arg3
      withOrgApacheLuceneDocumentFieldType:(OrgApacheLuceneDocumentFieldType *)arg4 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                             withByteArray:(IOSByteArray *)arg1
      withOrgApacheLuceneDocumentFieldType:(OrgApacheLuceneDocumentFieldType *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                          withJavaIoReader:(JavaIoReader *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                          withJavaIoReader:(JavaIoReader *)arg1
withOrgApacheLuceneDocumentField_TermVector:(OrgApacheLuceneDocumentField_TermVector *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                          withJavaIoReader:(JavaIoReader *)arg1
      withOrgApacheLuceneDocumentFieldType:(OrgApacheLuceneDocumentFieldType *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                              withNSString:(NSString *)arg1
    withOrgApacheLuceneDocumentField_Store:(OrgApacheLuceneDocumentField_Store *)arg2
    withOrgApacheLuceneDocumentField_Index:(OrgApacheLuceneDocumentField_Index *)arg3 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                              withNSString:(NSString *)arg1
    withOrgApacheLuceneDocumentField_Store:(OrgApacheLuceneDocumentField_Store *)arg2
    withOrgApacheLuceneDocumentField_Index:(OrgApacheLuceneDocumentField_Index *)arg3
withOrgApacheLuceneDocumentField_TermVector:(OrgApacheLuceneDocumentField_TermVector *)arg4 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                              withNSString:(NSString *)arg1
      withOrgApacheLuceneDocumentFieldType:(OrgApacheLuceneDocumentFieldType *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
    withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
    withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg1
withOrgApacheLuceneDocumentField_TermVector:(OrgApacheLuceneDocumentField_TermVector *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
    withOrgApacheLuceneAnalysisTokenStream:(OrgApacheLuceneAnalysisTokenStream *)arg1
      withOrgApacheLuceneDocumentFieldType:(OrgApacheLuceneDocumentFieldType *)arg2 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
      withOrgApacheLuceneDocumentFieldType:(OrgApacheLuceneDocumentFieldType *)arg1 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
           withOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)arg1
      withOrgApacheLuceneDocumentFieldType:(OrgApacheLuceneDocumentFieldType *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgApacheLuceneDocumentDoubleField)

/*!
 @brief Type for a DoubleField that is not stored:
  normalization factors, frequencies, and positions are omitted.
 */
inline OrgApacheLuceneDocumentFieldType *OrgApacheLuceneDocumentDoubleField_get_TYPE_NOT_STORED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneDocumentFieldType *OrgApacheLuceneDocumentDoubleField_TYPE_NOT_STORED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneDocumentDoubleField, TYPE_NOT_STORED, OrgApacheLuceneDocumentFieldType *)

/*!
 @brief Type for a stored DoubleField:
  normalization factors, frequencies, and positions are omitted.
 */
inline OrgApacheLuceneDocumentFieldType *OrgApacheLuceneDocumentDoubleField_get_TYPE_STORED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT OrgApacheLuceneDocumentFieldType *OrgApacheLuceneDocumentDoubleField_TYPE_STORED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheLuceneDocumentDoubleField, TYPE_STORED, OrgApacheLuceneDocumentFieldType *)

FOUNDATION_EXPORT void OrgApacheLuceneDocumentDoubleField_initWithNSString_withDouble_withOrgApacheLuceneDocumentField_Store_(OrgApacheLuceneDocumentDoubleField *self, NSString *name, jdouble value, OrgApacheLuceneDocumentField_Store *stored);

FOUNDATION_EXPORT OrgApacheLuceneDocumentDoubleField *new_OrgApacheLuceneDocumentDoubleField_initWithNSString_withDouble_withOrgApacheLuceneDocumentField_Store_(NSString *name, jdouble value, OrgApacheLuceneDocumentField_Store *stored) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneDocumentDoubleField *create_OrgApacheLuceneDocumentDoubleField_initWithNSString_withDouble_withOrgApacheLuceneDocumentField_Store_(NSString *name, jdouble value, OrgApacheLuceneDocumentField_Store *stored);

FOUNDATION_EXPORT void OrgApacheLuceneDocumentDoubleField_initWithNSString_withDouble_withOrgApacheLuceneDocumentFieldType_(OrgApacheLuceneDocumentDoubleField *self, NSString *name, jdouble value, OrgApacheLuceneDocumentFieldType *type);

FOUNDATION_EXPORT OrgApacheLuceneDocumentDoubleField *new_OrgApacheLuceneDocumentDoubleField_initWithNSString_withDouble_withOrgApacheLuceneDocumentFieldType_(NSString *name, jdouble value, OrgApacheLuceneDocumentFieldType *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheLuceneDocumentDoubleField *create_OrgApacheLuceneDocumentDoubleField_initWithNSString_withDouble_withOrgApacheLuceneDocumentFieldType_(NSString *name, jdouble value, OrgApacheLuceneDocumentFieldType *type);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneDocumentDoubleField)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneDocumentDoubleField")
