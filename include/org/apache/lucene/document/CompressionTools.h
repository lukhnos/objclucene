//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./core/src/java/org/apache/lucene/document/CompressionTools.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheLuceneDocumentCompressionTools")
#ifdef RESTRICT_OrgApacheLuceneDocumentCompressionTools
#define INCLUDE_ALL_OrgApacheLuceneDocumentCompressionTools 0
#else
#define INCLUDE_ALL_OrgApacheLuceneDocumentCompressionTools 1
#endif
#undef RESTRICT_OrgApacheLuceneDocumentCompressionTools

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgApacheLuceneDocumentCompressionTools_) && (INCLUDE_ALL_OrgApacheLuceneDocumentCompressionTools || defined(INCLUDE_OrgApacheLuceneDocumentCompressionTools))
#define OrgApacheLuceneDocumentCompressionTools_

@class IOSByteArray;
@class OrgApacheLuceneUtilBytesRef;

/*!
 @brief Simple utility class providing static methods to
   compress and decompress binary data for stored fields.
 This class uses java.util.zip.Deflater and Inflater
   classes to compress and decompress.
 */
@interface OrgApacheLuceneDocumentCompressionTools : NSObject

#pragma mark Public

/*!
 @brief Compresses all bytes in the array, with default BEST_COMPRESSION level
 */
+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)value;

/*!
 @brief Compresses the specified byte range, with default BEST_COMPRESSION level
 */
+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)value
                                withInt:(jint)offset
                                withInt:(jint)length;

/*!
 @brief Compresses the specified byte range using the
   specified compressionLevel (constants are defined in
   java.util.zip.Deflater).
 */
+ (IOSByteArray *)compressWithByteArray:(IOSByteArray *)value
                                withInt:(jint)offset
                                withInt:(jint)length
                                withInt:(jint)compressionLevel;

/*!
 @brief Compresses the String value, with default BEST_COMPRESSION level
 */
+ (IOSByteArray *)compressStringWithNSString:(NSString *)value;

/*!
 @brief Compresses the String value using the specified
   compressionLevel (constants are defined in
   java.util.zip.Deflater).
 */
+ (IOSByteArray *)compressStringWithNSString:(NSString *)value
                                     withInt:(jint)compressionLevel;

/*!
 @brief Decompress the byte array previously returned by
   compress
 */
+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)value;

/*!
 @brief Decompress the byte array previously returned by
   compress
 */
+ (IOSByteArray *)decompressWithByteArray:(IOSByteArray *)value
                                  withInt:(jint)offset
                                  withInt:(jint)length;

/*!
 @brief Decompress the byte array previously returned by
   compress (referenced by the provided BytesRef)
 */
+ (IOSByteArray *)decompressWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes;

/*!
 @brief Decompress the byte array previously returned by
   compressString back into a String
 */
+ (NSString *)decompressStringWithByteArray:(IOSByteArray *)value;

/*!
 @brief Decompress the byte array previously returned by
   compressString back into a String
 */
+ (NSString *)decompressStringWithByteArray:(IOSByteArray *)value
                                    withInt:(jint)offset
                                    withInt:(jint)length;

/*!
 @brief Decompress the byte array (referenced by the provided BytesRef) 
   previously returned by compressString back into a String
 */
+ (NSString *)decompressStringWithOrgApacheLuceneUtilBytesRef:(OrgApacheLuceneUtilBytesRef *)bytes;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheLuceneDocumentCompressionTools)

FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_withInt_(IOSByteArray *value, jint offset, jint length, jint compressionLevel);

FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length);

FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressWithByteArray_(IOSByteArray *value);

FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_(NSString *value);

FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneDocumentCompressionTools_compressStringWithNSString_withInt_(NSString *value, jint compressionLevel);

FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneDocumentCompressionTools_decompressWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *bytes);

FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_(IOSByteArray *value);

FOUNDATION_EXPORT IOSByteArray *OrgApacheLuceneDocumentCompressionTools_decompressWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length);

FOUNDATION_EXPORT NSString *OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_(IOSByteArray *value);

FOUNDATION_EXPORT NSString *OrgApacheLuceneDocumentCompressionTools_decompressStringWithByteArray_withInt_withInt_(IOSByteArray *value, jint offset, jint length);

FOUNDATION_EXPORT NSString *OrgApacheLuceneDocumentCompressionTools_decompressStringWithOrgApacheLuceneUtilBytesRef_(OrgApacheLuceneUtilBytesRef *bytes);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheLuceneDocumentCompressionTools)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgApacheLuceneDocumentCompressionTools")
